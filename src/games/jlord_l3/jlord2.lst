0001   0000             ;--------------------------------------------------------------
0002   0000             ;Jungle Lord Game ROM Disassembly
0003   0000             ;Dumped by Pinbuilder ©2000-2005 Jess M. Askey
0004   0000             ;--------------------------------------------------------------
0005   0000             #include  "68logic.asm"	;680X logic definitions
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin		      logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ y	*+5
0050+  0000             #defcont						\ jmp	var2_
0051+  0000             #defcont					\#else
0052+  0000             #defcont						\ x	var2_
0053+  0000             #defcont					\#endif
0054+  0000             #defcont				\#else
0055+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0056+  0000             #defcont				\#endif
0057+  0000             
0058+  0000             ;*******************************************************************
0059+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0060+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0061+  0000             ;*             at that address to point to the current address.    *
0062+  0000             ;*******************************************************************
0063+  0000             #define logic_end \var1_ .set *
0064+  0000             #defcont		\ .pop var3_, var4_
0065+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0066+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0067+  0000             #defcont  				\var2_ .set var1_-var4_-2
0068+  0000             #defcont				\#if var2_+127 < 0
0069+  0000             #defcont					\ .error "Branch Range < -127"
0070+  0000             #defcont				\#else
0071+  0000             #defcont					\#if var2_-128 > 0
0072+  0000             #defcont						\ .error "Branch Range > 128"
0073+  0000             #defcont					\#else
0074+  0000             #defcont    					\ .org var4_+1
0075+  0000             #defcont						\ .byte var2_
0076+  0000             #defcont					\#endif
0077+  0000             #defcont				\#endif
0078+  0000             #defcont			\#else	
0079+  0000             #defcont    			\ .org  var4_-2	
0080+  0000             #defcont				\ .word var1_
0081+  0000             #defcont			\#endif
0082+  0000             #defcont			\ .org	var1_
0083+  0000             #defcont		\#else
0084+  0000             #defcont			\.error "Wrong Endtype for IF block"
0085+  0000             #defcont		\#endif
0086+  0000             
0087+  0000             ;*******************************************************************
0088+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0089+  0000             ;*             (ie. with additional logic as defined below). The   *
0090+  0000             ;*             ELSE block will resove how to terminate the current *
0091+  0000             ;*             code and then set the owning IF statement's data    *
0092+  0000             ;*             byte.                                               *
0093+  0000             ;*******************************************************************
0094+  0000             #define	logic_else(x,y)	\var1_ .set $
0095+  0000             #defcont		\ .pop var3_, var4_
0096+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0097+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0098+  0000             #defcont				\ .org var4_+1
0099+  0000             #defcont	      		\#if x==0
0100+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0101+  0000             #defcont					\#if var2_+127 < 0
0102+  0000             #defcont						\ .org var1_
0103+  0000             #defcont						\.push $+3, 1
0104+  0000             #defcont						\ jmp $
0105+  0000             #defcont					\#else
0106+  0000             #defcont						\#if var2_-128>0
0107+  0000             #defcont							\ .org var1_
0108+  0000             #defcont							\.push $+3, 1
0109+  0000             #defcont							\ jmp $
0110+  0000             #defcont						\#else
0111+  0000             #defcont							\.push var1_, 0
0112+  0000             #defcont							\ .byte var2_
0113+  0000             #defcont							\ .org var1_
0114+  0000             #defcont							\ BRA $
0115+  0000             #defcont							\ .org var1_+2
0116+  0000             #defcont						\#endif
0117+  0000             #defcont					\#endif
0118+  0000             #defcont				\#else
0119+  0000             #defcont					\ .byte var1_-var4_-2+2
0120+  0000             #defcont					\ .org var1_
0121+  0000             #defcont					\.push $, 0
0122+  0000             #defcont					\ y $		
0123+  0000             #defcont				\#endif
0124+  0000             #defcont			\#else
0125+  0000             #defcont				\.error "Duplicate ELSE Statement"
0126+  0000             #defcont			\#endif
0127+  0000             #defcont		\#else
0128+  0000             #defcont			\ .error "Misplaced Else"
0129+  0000             #defcont		\#endif
0130+  0000             
0131+  0000             
0132+  0000             ;*******************************************************************
0133+  0000             ;* Defines how to use the various logic macros defined above.      *
0134+  0000             ;*******************************************************************
0135+  0000             #define	ifeq	logic_ifxx(BNE)		
0136+  0000             #define	ifne	logic_ifxx(BEQ)
0137+  0000             #define	ifpl	logic_ifxx(BMI)
0138+  0000             #define	ifhi	logic_ifxx(BLO)
0139+  0000             #define	ifmi	logic_ifxx(BPL)
0140+  0000             #define	iflo	logic_ifxx(BHI)
0141+  0000             #define	ifcs	logic_ifxx(BCC)
0142+  0000             #define	ifcc	logic_ifxx(BCS)
0143+  0000             #define 	ifvc	logic_ifxx(BVS)
0144+  0000             #define 	ifvs	logic_ifxx(BVC)
0145+  0000             #define	ifge	logic_ifxx(BLO)
0146+  0000             #define	ifgt	logic_ifxx(BLS)
0147+  0000             
0148+  0000             #define	else  	logic_else(0,0)
0149+  0000             #define	else_eq	logic_else(1,BEQ)
0150+  0000             #define	else_ne	logic_else(1,BNE)
0151+  0000             #define	else_pl	logic_else(1,BPL)
0152+  0000             #define	else_mi	logic_else(1,BMI)
0153+  0000             #define	else_cc	logic_else(1,BCC)
0154+  0000             #define	else_cs	logic_else(1,BCS)
0155+  0000             
0156+  0000             #define 	endif		logic_end
0157+  0000             
0158+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0159+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0160+  0000             #define	plend	logic_loopend(BMI,BPL)
0161+  0000             #define	miend	logic_loopend(BPL,BMI)
0162+  0000             #define	csend	logic_loopend(BCC,BCS)
0163+  0000             #define	ccend	logic_loopend(BCS,BCC)
0164+  0000             #define	vcend	logic_loopend(BVS,BVC)
0165+  0000             #define	vsend	logic_loopend(BVC,BVS)
0166+  0000             #define     hiend logic_loopend(BLS,BHI)
0167+  0000             #define     lsend logic_loopend(BHI,BLS)
0168+  0000             
0169+  0000             #define	loopend	logic_loopend(BRA,BRA)
0170+  0000             
0171+  0000             #define	lsb(x)	x&$FF
0172+  0000             
0173+  0000             #define	msb(x)	(x>>8)&$FF0006   0000             #include "7hard.asm"		;Level 7 Hardware Definitions
0001+  0000             ;***********************************************************
0002+  0000             ;* Level 7 Hardware Definitions                            *
0003+  0000             ;* 1999-2001 Jess M. Askey                                 *
0004+  0000             ;***********************************************************
0005+  0000             ;* This file defines the RAM structure and the actual      *
0006+  0000             ;* hardware contained on the Level 7 CPU board.            *
0007+  0000             ;***********************************************************
0008+  0000             	.org $0000
0009+  0000             
0010+  0000             ram_base	
0011+  0000             vm_reg_a			.block	1		;Virtual Machine Register A
0012+  0001             vm_reg_b			.block	1		;Virtual Machine Register B
0013+  0002             game_ram_2			.block	1
0014+  0003             game_ram_3			.block	1
0015+  0004             game_ram_4			.block	1
0016+  0005             game_ram_5			.block	1
0017+  0006             game_ram_6			.block	1
0018+  0007             game_ram_7			.block	1
0019+  0008             game_ram_8			.block	1
0020+  0009             game_ram_9			.block	1
0021+  000A             game_ram_a			.block	1
0022+  000B             game_ram_b			.block	1
0023+  000C             game_ram_c			.block	1
0024+  000D             game_ram_d			.block	1
0025+  000E             game_ram_e			.block	1
0026+  000F             game_ram_f			.block	1
0027+  0010             lampbuffer0			.block	8		;Lamp Buffer 0
0028+  0018             bitflags			.block	8
0029+  0020             lampbufferselect		.block	8		;Lamp Buffer Selection Bit
0030+  0028             lampbuffer1			.block	8		;Lamp Buffer 1
0031+  0030             lampflashflag		.block	8		;Lamp Flashing Bits
0032+  0038             score_p1_b0			.block	4
0033+  003C             score_p2_b0			.block	4
0034+  0040             score_p3_b0			.block	4
0035+  0044             score_p4_b0			.block	4
0036+  0048             score_p1_b1			.block	4
0037+  004C             score_p2_b1			.block	4
0038+  0050             score_p3_b1			.block	4
0039+  0054             score_p4_b1			.block	4
0040+  0058             mbip_b0			.block	1
0041+  0059             mbip_b1			.block	1
0042+  005A             cred_b0			.block	1
0043+  005B             cred_b1			.block	1
0044+  005C             dmask_p1			.block	1
0045+  005D             dmask_p2			.block	1
0046+  005E             dmask_p3			.block	1
0047+  005F             dmask_p4			.block	1
0048+  0060             comma_flags			.block	1
0049+  0061             switch_debounced		.block	8
0050+  0069             switch_masked		.block	8
0051+  0071             switch_pending		.block	8
0052+  0079             switch_aux			.block	8
0053+  0081             switch_b4			.block	8
0054+  0089             irq_counter			.block	1
0055+  008A             lamp_index_word		.block	2		;This will always be $00 in the MSB, will be a rotating bit in LSB
0056+  008C             lamp_bit			.block	1		;$008C
0057+  008D             comma_data_temp		.block	1
0058+  008E             credp1p2_bufferselect	.block	1
0059+  008F             mbipp3p4_bufferselect	.block	1
0060+  0090             swap_player_displays	.block	1
0061+  0091             solenoid_address		.block	2
0062+  0093             solenoid_bitpos		.block	1
0063+  0094             solenoid_counter		.block	1
0064+  0095             irqcount16			.block	1
0065+  0096             switch_queue_pointer	.block	2
0066+  0098             solenoid_queue_pointer	.block	2
0067+  009A             temp1				.block	2
0068+  009C             temp2				.block	2
0069+  009E             temp3				.block	2
0070+  00A0             sys_temp1			.block	1
0071+  00A1             sys_temp2			.block	1
0072+  00A2             sys_temp3			.block	1
0073+  00A3             sys_temp4			.block	1
0074+  00A4             sys_temp5			.block	1
0075+  00A5             sw_encoded			.block	1
0076+  00A6             sys_temp_w2			.block	2
0077+  00A8             sys_temp_w3			.block	2
0078+  00AA             thread_priority		.block	1
0079+  00AB             unused_ram1			.block	1		;$00AB
0080+  00AC             irqcount			.block	1
0081+  00AD             vm_base			.block	2
0082+  00AF             vm_nextslot			.block	2
0083+  00B1             current_thread		.block	2
0084+  00B3             vm_tail_thread		.block	2
0085+  00B5             lamp_flash_rate		.block	1
0086+  00B6             lamp_flash_count		.block	1
0087+  00B7             thread_timer_byte		.block	1
0088+  00B8             soundcount			.block	1
0089+  00B9             lastsound			.block	1
0090+  00BA             cur_sndflags		.block	1		;$00BA
0091+  00BB             soundptr			.block	2
0092+  00BD             soundirqcount		.block	2
0093+  00BF             soundindex_com		.block	2
0094+  00C1             sys_soundflags		.block	1
0095+  00C2             soundindex			.block	1
0096+  00C3             csound_timer		.block	2		;$00C3
0097+  00C5             next_sndflags		.block	1		;$00C5
0098+  00C6             next_sndcnt		      .block	1		;$00C6
0099+  00C7             next_sndcmd		      .block	1		;$00C7
0100+  00C8             flag_tilt			.block	1
0101+  00C9             flag_gameover		.block	1
0102+  00CA             flag_bonusball		.block	1
0103+  00CB             flags_selftest		.block	1
0104+  00CC             num_players			.block	1
0105+  00CD             player_up			.block	1
0106+  00CE             pscore_buf			.block	2
0107+  00D0             num_eb			.block	1
0108+  00D1             vm_pc				.block	2
0109+  00D3             num_tilt			.block	1
0110+  00D4             minutetimer			.block	2
0111+  00D6             flag_timer_bip		.block	1
0112+  00D7             randomseed			.block	1
0113+  00D8             x_temp_1			.block	2		;$00D8-D9
0114+  00DA             eb_x_temp			.block	2		;$00DA-DB
0115+  00DC             credit_x_temp		.block	2		;$00DC-DD
0116+  00DE             x_temp_2			.block	2
0117+  00E0             
0118+  00E0             ;***************************************************************
0119+  00E0             ;* Spare RAM: The last 32 bytes are available to the GAME ROM
0120+  00E0             ;*            if needed. Only the first 8 are defined by name.
0121+  00E0             ;***************************************************************
0122+  00E0             spare_ram			.block	1
0123+  00E1             spare_ram+1			.block	1
0124+  00E2             spare_ram+2			.block	1
0125+  00E3             spare_ram+3			.block	1
0126+  00E4             spare_ram+4			.block	1
0127+  00E5             spare_ram+5			.block	1
0128+  00E6             spare_ram+6			.block	1
0129+  00E7             spare_ram+7			.block	1
0130+  00E8             
0131+  00E8             ;***************************************************************
0132+  00E8             ;* CMOS RAM - The cmos RAM data bus is only 4-bits wide, so
0133+  00E8             ;*            each byte of data takes two consecutive address
0134+  00E8             ;*            locations. The lower address is the most 
0135+  00E8             ;*            significant nibble in the byte.
0136+  00E8             ;***************************************************************
0137+  0100             	.org $0100
0138+  0100             
0139+  0100             cmos_base
0140+  0100             cmos_csum			.block	2
0141+  0102             
0142+  0102             ;* First section is game audits
0143+  0102             aud_base
0144+  0102             aud_leftcoins		.block	4	;0102-0105	"Coins, Left Chute"
0145+  0106             aud_centercoins		.block	4	;0106-0109	"Coins, Center Chute"
0146+  010A             aud_rightcoins		.block	4	;010A-010D	"Coins, Right Chute"
0147+  010E             aud_paidcredits		.block	4	;010E-0111	Total Paid Credits
0148+  0112             aud_specialcredits	.block	4	;0112-0115	Special Credits
0149+  0116             aud_replaycredits		.block	4	;0116-0119	Replay Score Credits
0150+  011A             aud_matchcredits		.block	4	;011A-011D	Match Credits
0151+  011E             aud_totalcredits		.block	4	;011E-0121	Total Credits
0152+  0122             aud_extraballs		.block	4	;0122-0125	Total Extra Balls
0153+  0126             aud_avgballtime		.block	4	;0126-0129	Ball Time in Minutes
0154+  012A             aud_totalballs		.block	4	;012A-012D	Total Balls Played
0155+  012E             aud_game1			.block	4	;012E-0131	Game Specific Audit#1
0156+  0132             aud_game2			.block	4	;0132-0135	Game Specific Audit#2
0157+  0136             aud_game3			.block	4	;0136-0139	Game Specific Audit#3
0158+  013A             aud_game4			.block	4	;013A-013D	Game Specific Audit#4
0159+  013E             aud_game5			.block	4	;013E-0141	Game Specific Audit#5
0160+  0142             aud_game6			.block	4	;0142-0145	Game Specific Audit#6
0161+  0146             aud_game7			.block	4	;0146-0149	Game Specific Audit#7
0162+  014A             aud_autocycles		.block	4	;014A-014D	Number of Auto Cycles Completed
0163+  014E             aud_hstdcredits		.block	2	;014E-014F	2 -HSTD Credits Awarded
0164+  0150             aud_replay1times		.block	4	;0150-0153	2 -Times Exceeded
0165+  0154             aud_replay2times		.block	4	;0154-0157	2 -Times Exceeded
0166+  0158             aud_replay3times		.block	4	;0158-015B	2 -Times Exceeded
0167+  015C             aud_replay4times		.block	4	;015C-015F	2 -Times Exceeded
0168+  0160             
0169+  0160             				.block	2	;0160-0161	Unknown
0170+  0162             cmos_bonusunits		.block	2	;0162-1063	Hold Over Bonus Coin Units
0171+  0164             cmos_coinunits		.block	2	;0164-0165	Hold Over Total Coin Units
0172+  0166             				
0173+  0166             aud_currenthstd		.block	8	;0166-016D	Current HSTD
0174+  016E             aud_currentcredits	.block	2	;016D-016F  Current Credits			
0175+  0170             aud_command			.block	2	;0170-0171	Command Entry
0176+  0172             
0177+  0172             				.block	11
0178+  017D             
0179+  017D             
0180+  017D             
0181+  017D             
0182+  017D             ;* Then adjustments
0183+  017D             adj_base
0184+  017D             adj_cmoscsum			.block	4	;017D-0180	"Game #, ROM Revision"                                     
0185+  0181             adj_backuphstd			.block	2     ;0181-0182	Backup HSTD                                                
0186+  0183             adj_replay1				.block	2     ;0183-0184	Replay 1 Score                                             
0187+  0185             adj_replay2				.block	2     ;0185-0186	Replay 2 Score                                             
0188+  0187             adj_replay3				.block	2     ;0187-0188	Replay 3 Score                                             
0189+  0189             adj_replay4				.block	2     ;0189-018A	Replay 4 Score                                             
0190+  018B             adj_matchenable			.block	2     ;018B-018C	Match: 00=On 01=OFF                                        
0191+  018D             adj_specialaward			.block	2     ;018D-018E	Special:00=Awards Credit 01=Extra Ball 02=Awards Points    
0192+  018F             adj_replayaward			.block	2     ;018F-0190	Replay Scores: 00=Awards Credit 01=Extra Ball              
0193+  0191             adj_maxplumbbobtilts		.block	2     ;0191-0192	Max Plumb Bob Tilts                                        
0194+  0193             adj_numberofballs			.block	2     ;0193-0194	Number of Balls (3 or 5)                                   
0195+  0195             adj_gameadjust1			.block	2     ;0195-0196	Game Specific Adjustment#1                                 
0196+  0197             adj_gameadjust2			.block	2     ;0197-0198	Game Specific Adjustment#2                                 
0197+  0199             adj_gameadjust3			.block	2     ;0199-019A	Game Specific Adjustment#3                                 
0198+  019B             adj_gameadjust4			.block	2     ;019B-019C	Game Specific Adjustment#4                                 
0199+  019D             adj_gameadjust5			.block	2     ;019D-019E	Game Specific Adjustment#5                                 
0200+  019F             adj_gameadjust6			.block	2     ;019F-01A0	Game Specific Adjustment#6                                 
0201+  01A1             adj_gameadjust7			.block	2     ;01A1-01A2	Game Specific Adjustment#7                                 
0202+  01A3             adj_gameadjust8			.block	2     ;01A3-01A4	Game Specific Adjustment#8                                 
0203+  01A5             adj_gameadjust9			.block	2     ;01A5-01A6	Game Specific Adjustment#9                                 
0204+  01A7             adj_hstdcredits			.block	2     ;01A7-01A8	High Score Credit Award                                    
0205+  01A9             adj_max_extraballs		.block	2     ;01A9-019A	Maximum Extra Balls 00=No Extra Balls                      
0206+  01AB             adj_max_credits			.block	2     ;01AB-01AC	Maximum Credits                                            
0207+  01AD             adj_pricecontrol			.block	2     ;01AD-01AE	Standard/Custom Pricing Control   
0208+  01AF             
0209+  01AF             cmos_pricingbase                         
0210+  01AF             cmos_leftcoinmult			.block	2     ;01AF-01B0	Left Coin Slot Multiplier                                  
0211+  01B1             cmos_centercoinmult		.block	2     ;01B1-01B2	Center Coin Slot Multiplier    
0212+  01B3             cmos_rightcoinmult		.block	2     ;01B3-01B4	Right Coin Slot Multiplier     
0213+  01B5             cmos_coinsforcredit		.block	2     ;01B5-01B6	Coin Units Required for Credit 
0214+  01B7             cmos_bonuscoins			.block	2     ;01B7-01B8	Coin Units Bonus Point         
0215+  01B9             cmos_minimumcoins			.block	2     ;01B9-01BA	Minimum Coin Units             
0216+  01BB             
0217+  01BB             
0218+  01BB             
0219+  01BB             ;***************************************************************
0220+  01BB             ;* Extended RAM area. This RAM space was added in Level 7 games
0221+  01BB             ;* for extended flexibility.
0222+  01BB             ;***************************************************************
0223+  1100             	.org $1100
0224+  1100             
0225+  1100             switch_queue		.block	24
0226+  1118             
0227+  1118             switch_queue_full
0228+  1118             sol_queue			.block	16
0229+  1128             
0230+  1128             sol_queue_full
0231+  1128             score_queue			.block	8
0232+  1130             
0233+  1130             score_queue_full
0234+  1130             exe_buffer			.block	16		;Temp code buffer for exe macro
0235+  1140             p1_gamedata			.block	25
0236+  1159             p2_gamedata			.block	25
0237+  1172             p3_gamedata			.block	25
0238+  118B             p4_gamedata			.block	25
0239+  11A4             
0240+  11A4             
0241+  11A4             ;***************************************************************
0242+  11A4             ;* PIA Input/Output hardware
0243+  11A4             ;***************************************************************
0244+  11A4             ;* Some equates for indexing
0245+  11A4             pia_pir			.equ		0
0246+  11A4             pia_control			.equ		1
0247+  11A4             pia_pir_a			.equ		0
0248+  11A4             pia_control_a		.equ		1
0249+  11A4             pia_pir_b			.equ		2
0250+  11A4             pia_control_b		.equ		3
0251+  11A4             
0252+  11A4             
0253+  11A4             pia_sound_data		.equ		$2100
0254+  11A4             pia_sound_ctrl		.equ		$2101
0255+  11A4             pia_comma_data		.equ		$2102
0256+  11A4             pia_comma_ctrl		.equ		$2103
0257+  11A4             
0258+  11A4             pia_sol_low_data		.equ		$2200
0259+  11A4             pia_sol_low_ctrl		.equ		$2201
0260+  11A4             pia_sol_high_data		.equ		$2202
0261+  11A4             pia_sol_high_ctrl		.equ		$2203
0262+  11A4             
0263+  11A4             pia_lamp_row_data		.equ		$2400
0264+  11A4             pia_lamp_row_ctrl		.equ		$2401
0265+  11A4             pia_lamp_col_data		.equ		$2402
0266+  11A4             pia_lamp_col_ctrl		.equ		$2403
0267+  11A4             
0268+  11A4             pia_disp_digit_data	.equ		$2800
0269+  11A4             pia_disp_digit_ctrl	.equ		$2801
0270+  11A4             pia_disp_seg_data		.equ		$2802
0271+  11A4             pia_disp_seg_ctrl		.equ		$2803
0272+  11A4             
0273+  11A4             pia_switch_return_data	.equ		$3000
0274+  11A4             pia_switch_return_ctrl	.equ		$3001
0275+  11A4             pia_switch_strobe_data	.equ		$3002
0276+  11A4             pia_switch_strobe_ctrl	.equ		$3003
0277+  11A4             
0278+  11A4             
0279+  11A4             ;*******************************************
0280+  11A4             ;* Special PIA for Hyperball Driver Boards *
0281+  11A4             ;* Controls the Alpha-Numeric Display      *
0282+  11A4             ;*******************************************
0283+  11A4             pia_alphanum_digit_data	.equ		$4000
0284+  11A4             pia_alphanum_digit_ctrl	.equ		$4001
0285+  11A4             pia_alphanum_seg_data	.equ		$4002
0286+  11A4             pia_alphanum_seg_ctrl	.equ		$4003
0007   11A4             ;#include  "level7.exp"	;Level 7 system defines
0008   11A4             #include  "wvm7.asm"	;Level 7 macro defines
0001+  11A4             ;*****************************************************************************
0002+  11A4             ;* Williams Level 7 Virtual Machine Macro Definitions
0003+  11A4             ;*****************************************************************************
0004+  11A4             ;* Code copyright Williams Electronic Games Inc.
0005+  11A4             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  11A4             ;* For use with TASMx Assembler
0007+  11A4             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  11A4             ;* for more information.
0009+  11A4             ;* You may redistribute this file as long as this header remains intact.
0010+  11A4             ;*****************************************************************************
0011+  11A4             ;* Version 	Date		Notes
0012+  11A4             ;* 0.90	04/29/2006	Converted Lamp Range Macros into meaningful mnemonics
0013+  11A4             ;*
0014+  11A4             ;*****************************************************************************
0015+  11A4             .module wml7
0016+  11A4             .msfirst
0017+  11A4             
0018+  11A4             wml1_       .equ  $00
0019+  11A4             wml2_       .equ  $00
0020+  11A4             wml3_       .equ  $00
0021+  11A4             wml4_       .equ  $00
0022+  11A4             wml5_       .equ  $00
0023+  11A4             wml6_       .equ  $00
0024+  11A4             
0025+  11A4             #define     FLAG_WML_IF       $10
0026+  11A4             #define     FLAG_WML_ELSE     $20
0027+  11A4             #define	FLAG_WML_BEGIN 	$40
0028+  11A4             #define     FLAG_WML_EXE      $80
0029+  11A4             
0030+  11A4             ;********************************************************
0031+  11A4             ;* First Define the Thread Structure used in the virtual 
0032+  11A4             ;* machine linked list.
0033+  11A4             ;********************************************************
0034+  11A4             ;* Next:	This is the pointer to the next thread in 
0035+  11A4             ;* 		the linked list. The VM requires this to 
0036+  11A4             ;*		move about the list of threads. This is 
0037+  11A4             ;* 		set by the VM thread handlers and does not
0038+  11A4             ;*          need to be manually fiddled with by the 
0039+  11A4             ;*          game program as it is automatic.
0040+  11A4             ;*
0041+  11A4             ;* Timer:	This is a byte timer (0-255) that holds the 
0042+  11A4             ;*          number of IRQ's counts required before the 
0043+  11A4             ;*          thread is executed. This is set by the 
0044+  11A4             ;*          programmer for delays between executions.	
0045+  11A4             ;*
0046+  11A4             ;* Vars:	When a thread is created, the originating
0047+  11A4             ;*          program may push up to 8 additional bytes
0048+  11A4             ;* 		of data onto the stack which will then be
0049+  11A4             ;*          placed into these 8 byte holders.
0050+  11A4             ;*
0051+  11A4             ;* PC:	This is the address of the program entry 
0052+  11A4             ;*          point that will be executed when the thread
0053+  11A4             ;*       	timer expires.
0054+  11A4             ;*
0055+  11A4             ;* ID:	The thread ID is a number that identifies 
0056+  11A4             ;* 		the thread type. The ID defintions are all
0057+  11A4             ;*		decided by the programmer except for thread
0058+  11A4             ;*		ID #06 which is a general 'end-of-ball' terminated
0059+  11A4             ;*		thread. Because the VM can destroy groups of 
0060+  11A4             ;* 		threads by ID and branch on existence of threads
0061+  11A4             ;*    	with certain ID's, this is a very important
0062+  11A4             ;*		design consideration. See the programming 
0063+  11A4             ;*  		manual for more information.
0064+  11A4             ;*	
0065+  11A4             ;* RegA:	This holds the value that was contained in 
0066+  11A4             ;*		the CPU register A when the Thread was created.
0067+  11A4             ;*
0068+  11A4             ;* RegB:	Similar to above, holds the value of CPU reg B.
0069+  11A4             ;*
0070+  11A4             ;* RegX:	Again, holds the value of the X register upon
0071+  11A4             ;*		thread creation.
0072+  11A4             ;*
0073+  11A4             ;************************************************************
0074+  11A4             
0075+  11A4             threadobj_next	.equ	$00
0076+  11A4             threadobj_timer	.equ	$02
0077+  11A4             threadobj_var1	.equ	$03
0078+  11A4             threadobj_var2	.equ	$04
0079+  11A4             threadobj_var3	.equ	$05
0080+  11A4             threadobj_var4	.equ	$06
0081+  11A4             threadobj_var5	.equ	$07
0082+  11A4             threadobj_var6	.equ	$09
0083+  11A4             threadobj_var7	.equ	$09
0084+  11A4             threadobj_var8	.equ	$0a
0085+  11A4             threadobj_pc	.equ	$0b
0086+  11A4             threadobj_id	.equ	$0d
0087+  11A4             threadobj_rega	.equ	$0e
0088+  11A4             threadobj_regb	.equ	$0f
0089+  11A4             threadobj_regx	.equ	$10
0090+  11A4             
0091+  11A4             ;********************************************************
0092+  11A4             ;* Now define some standard RAM locations etc...
0093+  11A4             ;********************************************************
0094+  11A4             rega	.equ	$00
0095+  11A4             regb	.equ	$01
0096+  11A4             
0097+  11A4             ;********************************************************
0098+  11A4             ;* Switch Table Equates
0099+  11A4             ;********************************************************
0100+  11A4             #define	SWITCHENTRY(a,b)	\.db a \.dw b
0101+  11A4             
0102+  11A4             sf_wml7	      .equ	$80
0103+  11A4             sf_code 	      .equ 	$00
0104+  11A4             sf_tilt	      .equ	$40
0105+  11A4             sf_notilt         .equ  $00
0106+  11A4             sf_gameover	      .equ	$20
0107+  11A4             sf_nogameover     .equ  $00
0108+  11A4             sf_enabled	      .equ	$10
0109+  11A4             sf_disabled       .equ  $00
0110+  11A4             sf_instant	      .equ	$08
0111+  11A4             sf_delayed        .equ  $00
0112+  11A4             
0113+  11A4             ;********************************************************
0114+  11A4             ;* Test for our current execution mode, CODE or WML7
0115+  11A4             ;* If we think the programmer has their code wrong, 
0116+  11A4             ;* then throw an error.
0117+  11A4             ;********************************************************
0118+  11A4             ;_MODECPU_         .equ  $00
0119+  11A4             ;_MODEWML_         .equ  $80
0120+  11A4             ;_CURRENTMODE_     .equ  _MODECPU_
0121+  11A4             ;
0122+  11A4             ;#define     _SETMODECPU_      \_CURRENTMODE_     .set  _MODECPU_
0123+  11A4             ;#define     _SETMODEWML_      \_CURRENTMODE_     .set  _MODEWML_
0124+  11A4             ;
0125+  11A4             ;#define     _CHECKWML_        \#if _CURRENTMODE_ != _MODEWML_
0126+  11A4             ;#defcont                      \     .error "WML7: Execution mode does not expect WML codes now, are you sure your code is structured properly?"
0127+  11A4             ;#defcont                      \#endif
0128+  11A4             ;
0129+  11A4             ;#define     _CHECKCPU_        \#if _CURRENTMODE_ != _MODECPU_
0130+  11A4             ;#defcont                      \     .error "WML7: Execution mode does not expect CPU codes now, are you sure your code is structured properly?"
0131+  11A4             ;#defcont                      \#endif
0132+  11A4             ;********************************************************
0133+  11A4             ;* Define our Level 7 macros.
0134+  11A4             ;********************************************************
0135+  11A4             #define 	PC100_	\.db $00	
0136+  11A4             #define 	NOP_		\.db $01	
0137+  11A4             #define	MRTS_		\.db $02
0138+  11A4             #define	KILL_		\.db $03	
0139+  11A4             #define 	CPUX_		\.db $04
0140+  11A4             #define	SPEC_		\.db $05	
0141+  11A4             #define	EB_		\.db $06	
0142+  11A4             
0143+  11A4             ;********************************************************
0144+  11A4             ;* Lamp Macro Definition: These take care of turning lamps
0145+  11A4             ;*                        on/off and doing the basic lamp
0146+  11A4             ;*                        effects.
0147+  11A4             ;********************************************************
0148+  11A4             #define	BITX_(x,a)		      \.db x,a
0149+  11A4             #define	BITX_(x,a,b)		\.db x,((a&$7F)+$80),b
0150+  11A4             #define	BITX_(x,a,b,c)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),c
0151+  11A4             #define	BITX_(x,a,b,c,d)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0152+  11A4             #define	BITX_(x,a,b,c,d,e)	\.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0153+  11A4             #define	BITX_(x,a,b,c,d,e,f)    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
0154+  11A4             #define	BITX_(x,a,b,c,d,e,f,g)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
0155+  11A4             
0156+  11A4             ;*****************************************************************
0157+  11A4             ;* Macros 1X_
0158+  11A4             ;*****************************************************************
0159+  11A4             #define	BITON_(a)		      \BITX_($10,a)
0160+  11A4             #define	BITON_(a,b)		      \BITX_($10,a,b)
0161+  11A4             #define	BITON_(a,b,c)	      \BITX_($10,a,b,c)
0162+  11A4             #define	BITON_(a,b,c,d)	      \BITX_($10,a,b,c,d)
0163+  11A4             #define	BITON_(a,b,c,d,e)	      \BITX_($10,a,b,c,d,e)
0164+  11A4             #define	BITON_(a,b,c,d,e,f)     \BITX_($10,a,b,c,d,e,f)
0165+  11A4             #define	BITON_(a,b,c,d,e,f,g)   \BITX_($10,a,b,c,d,e,f,g)
0166+  11A4             
0167+  11A4             #define	BITOFF_(a)		      \BITX_($11,a)            
0168+  11A4             #define	BITOFF_(a,b)		\BITX_($11,a,b)          
0169+  11A4             #define	BITOFF_(a,b,c)	      \BITX_($11,a,b,c)        
0170+  11A4             #define	BITOFF_(a,b,c,d)	      \BITX_($11,a,b,c,d)      
0171+  11A4             #define	BITOFF_(a,b,c,d,e)	\BITX_($11,a,b,c,d,e)    
0172+  11A4             #define	BITOFF_(a,b,c,d,e,f)    \BITX_($11,a,b,c,d,e,f)  
0173+  11A4             #define	BITOFF_(a,b,c,d,e,f,g)  \BITX_($11,a,b,c,d,e,f,g)
0174+  11A4                                                 
0175+  11A4             #define	BITINV_(a)		      \BITX_($12,a)            
0176+  11A4             #define	BITINV_(a,b)		\BITX_($12,a,b)          
0177+  11A4             #define	BITINV_(a,b,c)	      \BITX_($12,a,b,c)        
0178+  11A4             #define	BITINV_(a,b,c,d)	      \BITX_($12,a,b,c,d)      
0179+  11A4             #define	BITINV_(a,b,c,d,e)	\BITX_($12,a,b,c,d,e)    
0180+  11A4             #define	BITINV_(a,b,c,d,e,f)    \BITX_($12,a,b,c,d,e,f)  
0181+  11A4             #define	BITINV_(a,b,c,d,e,f,g)  \BITX_($12,a,b,c,d,e,f,g)
0182+  11A4             
0183+  11A4             #define	BITFL_(a)		      \BITX_($13,a)            
0184+  11A4             #define	BITFL_(a,b)			\BITX_($13,a,b)          
0185+  11A4             #define	BITFL_(a,b,c)	      \BITX_($13,a,b,c)        
0186+  11A4             #define	BITFL_(a,b,c,d)	      \BITX_($13,a,b,c,d)      
0187+  11A4             #define	BITFL_(a,b,c,d,e)		\BITX_($13,a,b,c,d,e)    
0188+  11A4             #define	BITFL_(a,b,c,d,e,f)    	\BITX_($13,a,b,c,d,e,f)  
0189+  11A4             #define	BITFL_(a,b,c,d,e,f,g)  	\BITX_($13,a,b,c,d,e,f,g)
0190+  11A4              
0191+  11A4             #define	BITONP_(a)		      \BITX_($14,a)            
0192+  11A4             #define	BITONP_(a,b)		\BITX_($14,a,b)          
0193+  11A4             #define	BITONP_(a,b,c)	      \BITX_($14,a,b,c)        
0194+  11A4             #define	BITONP_(a,b,c,d)	      \BITX_($14,a,b,c,d)      
0195+  11A4             #define	BITONP_(a,b,c,d,e)	\BITX_($14,a,b,c,d,e)    
0196+  11A4             #define	BITONP_(a,b,c,d,e,f)    \BITX_($14,a,b,c,d,e,f)  
0197+  11A4             #define	BITONP_(a,b,c,d,e,f,g)  \BITX_($14,a,b,c,d,e,f,g)
0198+  11A4             
0199+  11A4             #define	BITOFFP_(a)		      \BITX_($15,a)            
0200+  11A4             #define	BITOFFP_(a,b)		\BITX_($15,a,b)          
0201+  11A4             #define	BITOFFP_(a,b,c)	      \BITX_($15,a,b,c)        
0202+  11A4             #define	BITOFFP_(a,b,c,d)	      \BITX_($15,a,b,c,d)      
0203+  11A4             #define	BITOFFP_(a,b,c,d,e)	\BITX_($15,a,b,c,d,e)    
0204+  11A4             #define	BITOFFP_(a,b,c,d,e,f)   \BITX_($15,a,b,c,d,e,f)  
0205+  11A4             #define	BITOFFP_(a,b,c,d,e,f,g) \BITX_($15,a,b,c,d,e,f,g)
0206+  11A4             
0207+  11A4             #define	BITINVP_(a)		      \BITX_($16,a)            
0208+  11A4             #define	BITINVP_(a,b)		\BITX_($16,a,b)          
0209+  11A4             #define	BITINVP_(a,b,c)	      \BITX_($16,a,b,c)        
0210+  11A4             #define	BITINVP_(a,b,c,d)	      \BITX_($16,a,b,c,d)      
0211+  11A4             #define	BITINVP_(a,b,c,d,e)	\BITX_($16,a,b,c,d,e)    
0212+  11A4             #define	BITINVP_(a,b,c,d,e,f)   \BITX_($16,a,b,c,d,e,f)  
0213+  11A4             #define	BITINVP_(a,b,c,d,e,f,g) \BITX_($16,a,b,c,d,e,f,g)
0214+  11A4             
0215+  11A4             #define	BITFLP_(a)		      \BITX_($17,a)            
0216+  11A4             #define	BITFLP_(a,b)		\BITX_($17,a,b)          
0217+  11A4             #define	BITFLP_(a,b,c)	      \BITX_($17,a,b,c)        
0218+  11A4             #define	BITFLP_(a,b,c,d)	      \BITX_($17,a,b,c,d)      
0219+  11A4             #define	BITFLP_(a,b,c,d,e)	\BITX_($17,a,b,c,d,e)    
0220+  11A4             #define	BITFLP_(a,b,c,d,e,f)   	\BITX_($17,a,b,c,d,e,f)  
0221+  11A4             #define	BITFLP_(a,b,c,d,e,f,g) 	\BITX_($17,a,b,c,d,e,f,g)
0222+  11A4             
0223+  11A4             ;************************
0224+  11A4             ;* Lamp/Bit Effects
0225+  11A4             ;************************
0226+  11A4             #define	RSET0_(a)		      \BITX_($18,a)            
0227+  11A4             #define	RSET0_(a,b)			\BITX_($18,a,b)          
0228+  11A4             #define	RSET0_(a,b,c)	      \BITX_($18,a,b,c)        
0229+  11A4             #define	RSET0_(a,b,c,d)	      \BITX_($18,a,b,c,d)      
0230+  11A4             #define	RSET0_(a,b,c,d,e)		\BITX_($18,a,b,c,d,e)    
0231+  11A4             #define	RSET0_(a,b,c,d,e,f)   	\BITX_($18,a,b,c,d,e,f)  
0232+  11A4             #define	RSET0_(a,b,c,d,e,f,g) 	\BITX_($18,a,b,c,d,e,f,g)
0233+  11A4             
0234+  11A4             #define	RCLR0_(a)		      \BITX_($19,a)            
0235+  11A4             #define	RCLR0_(a,b)			\BITX_($19,a,b)          
0236+  11A4             #define	RCLR0_(a,b,c)	      \BITX_($19,a,b,c)        
0237+  11A4             #define	RCLR0_(a,b,c,d)	      \BITX_($19,a,b,c,d)      
0238+  11A4             #define	RCLR0_(a,b,c,d,e)		\BITX_($19,a,b,c,d,e)    
0239+  11A4             #define	RCLR0_(a,b,c,d,e,f)   	\BITX_($19,a,b,c,d,e,f)  
0240+  11A4             #define	RCLR0_(a,b,c,d,e,f,g) 	\BITX_($19,a,b,c,d,e,f,g)
0241+  11A4             
0242+  11A4             #define	RSET1R0_(a)		      \BITX_($1A,a)            
0243+  11A4             #define	RSET1R0_(a,b)		\BITX_($1A,a,b)          
0244+  11A4             #define	RSET1R0_(a,b,c)	      \BITX_($1A,a,b,c)        
0245+  11A4             #define	RSET1R0_(a,b,c,d)	      \BITX_($1A,a,b,c,d)      
0246+  11A4             #define	RSET1R0_(a,b,c,d,e)	\BITX_($1A,a,b,c,d,e)    
0247+  11A4             #define	RSET1R0_(a,b,c,d,e,f)   \BITX_($1A,a,b,c,d,e,f)  
0248+  11A4             #define	RSET1R0_(a,b,c,d,e,f,g) \BITX_($1A,a,b,c,d,e,f,g)
0249+  11A4             
0250+  11A4             #define	RSET1RC0_(a)		\BITX_($1B,a)            
0251+  11A4             #define	RSET1RC0_(a,b)		\BITX_($1B,a,b)          
0252+  11A4             #define	RSET1RC0_(a,b,c)	      \BITX_($1B,a,b,c)        
0253+  11A4             #define	RSET1RC0_(a,b,c,d)	\BITX_($1B,a,b,c,d)      
0254+  11A4             #define	RSET1RC0_(a,b,c,d,e)	\BITX_($1B,a,b,c,d,e)    
0255+  11A4             #define	RSET1RC0_(a,b,c,d,e,f)  \BITX_($1B,a,b,c,d,e,f)  
0256+  11A4             #define	RSET1RC0_(a,b,c,d,e,f,g) \BITX_($1B,a,b,c,d,e,f,g)
0257+  11A4             
0258+  11A4             #define	RCLR1L0_(a)		      \BITX_($1C,a)            
0259+  11A4             #define	RCLR1L0_(a,b)		\BITX_($1C,a,b)          
0260+  11A4             #define	RCLR1L0_(a,b,c)	      \BITX_($1C,a,b,c)        
0261+  11A4             #define	RCLR1L0_(a,b,c,d)	      \BITX_($1C,a,b,c,d)      
0262+  11A4             #define	RCLR1L0_(a,b,c,d,e)	\BITX_($1C,a,b,c,d,e)    
0263+  11A4             #define	RCLR1L0_(a,b,c,d,e,f)   \BITX_($1C,a,b,c,d,e,f)  
0264+  11A4             #define	RCLR1L0_(a,b,c,d,e,f,g) \BITX_($1C,a,b,c,d,e,f,g)
0265+  11A4             
0266+  11A4             #define	RROL0_(a)		      \BITX_($1D,a)            
0267+  11A4             #define	RROL0_(a,b)			\BITX_($1D,a,b)          
0268+  11A4             #define	RROL0_(a,b,c)	      \BITX_($1D,a,b,c)        
0269+  11A4             #define	RROL0_(a,b,c,d)	      \BITX_($1D,a,b,c,d)      
0270+  11A4             #define	RROL0_(a,b,c,d,e)		\BITX_($1D,a,b,c,d,e)    
0271+  11A4             #define	RROL0_(a,b,c,d,e,f)   	\BITX_($1D,a,b,c,d,e,f)  
0272+  11A4             #define	RROL0_(a,b,c,d,e,f,g) 	\BITX_($1D,a,b,c,d,e,f,g)
0273+  11A4             
0274+  11A4             #define	RROR0_(a)		      \BITX_($1E,a)            
0275+  11A4             #define	RROR0_(a,b)			\BITX_($1E,a,b)          
0276+  11A4             #define	RROR0_(a,b,c)	      \BITX_($1E,a,b,c)        
0277+  11A4             #define	RROR0_(a,b,c,d)	      \BITX_($1E,a,b,c,d)      
0278+  11A4             #define	RROR0_(a,b,c,d,e)		\BITX_($1E,a,b,c,d,e)    
0279+  11A4             #define	RROR0_(a,b,c,d,e,f)   	\BITX_($1E,a,b,c,d,e,f)  
0280+  11A4             #define	RROR0_(a,b,c,d,e,f,g) 	\BITX_($1E,a,b,c,d,e,f,g)
0281+  11A4             
0282+  11A4             #define	RINV0_(a)		      \BITX_($1F,a)            
0283+  11A4             #define	RINV0_(a,b)			\BITX_($1F,a,b)          
0284+  11A4             #define	RINV0_(a,b,c)	      \BITX_($1F,a,b,c)        
0285+  11A4             #define	RINV0_(a,b,c,d)	      \BITX_($1F,a,b,c,d)      
0286+  11A4             #define	RINV0_(a,b,c,d,e)		\BITX_($1F,a,b,c,d,e)    
0287+  11A4             #define	RINV0_(a,b,c,d,e,f)   	\BITX_($1F,a,b,c,d,e,f)  
0288+  11A4             #define	RINV0_(a,b,c,d,e,f,g) 	\BITX_($1F,a,b,c,d,e,f,g)
0289+  11A4             
0290+  11A4             ;*****************************************************************
0291+  11A4             ;* Macros 2X_
0292+  11A4             ;*****************************************************************
0293+  11A4             
0294+  11A4             #define	BITON2_(a)		      	\BITX_($20,a)
0295+  11A4             #define	BITON2_(a,b)			\BITX_($20,a,b)
0296+  11A4             #define	BITON2_(a,b,c)	      	\BITX_($20,a,b,c)
0297+  11A4             #define	BITON2_(a,b,c,d)	      	\BITX_($20,a,b,c,d)
0298+  11A4             #define	BITON2_(a,b,c,d,e)		\BITX_($20,a,b,c,d,e)
0299+  11A4             #define	BITON2_(a,b,c,d,e,f)    	\BITX_($20,a,b,c,d,e,f)
0300+  11A4             #define	BITON2_(a,b,c,d,e,f,g)  	\BITX_($20,a,b,c,d,e,f,g)
0301+  11A4             
0302+  11A4             #define	BITOFF2_(a)		      	\BITX_($21,a)            
0303+  11A4             #define	BITOFF2_(a,b)			\BITX_($21,a,b)          
0304+  11A4             #define	BITOFF2_(a,b,c)	      	\BITX_($21,a,b,c)        
0305+  11A4             #define	BITOFF2_(a,b,c,d)	      	\BITX_($21,a,b,c,d)      
0306+  11A4             #define	BITOFF2_(a,b,c,d,e)		\BITX_($21,a,b,c,d,e)    
0307+  11A4             #define	BITOFF2_(a,b,c,d,e,f)   	\BITX_($21,a,b,c,d,e,f)  
0308+  11A4             #define	BITOFF2_(a,b,c,d,e,f,g) 	\BITX_($21,a,b,c,d,e,f,g)
0309+  11A4                                                 
0310+  11A4             #define	BITINV2_(a)		      	\BITX_($22,a)            
0311+  11A4             #define	BITINV2_(a,b)			\BITX_($22,a,b)          
0312+  11A4             #define	BITINV2_(a,b,c)	      	\BITX_($22,a,b,c)        
0313+  11A4             #define	BITINV2_(a,b,c,d)	      	\BITX_($22,a,b,c,d)      
0314+  11A4             #define	BITINV2_(a,b,c,d,e)		\BITX_($22,a,b,c,d,e)    
0315+  11A4             #define	BITINV2_(a,b,c,d,e,f)   	\BITX_($22,a,b,c,d,e,f)  
0316+  11A4             #define	BITINV2_(a,b,c,d,e,f,g) 	\BITX_($22,a,b,c,d,e,f,g)
0317+  11A4             
0318+  11A4             #define	BITFL2_(a)		      	\BITX_($23,a)            
0319+  11A4             #define	BITFL2_(a,b)			\BITX_($23,a,b)          
0320+  11A4             #define	BITFL2_(a,b,c)	      	\BITX_($23,a,b,c)        
0321+  11A4             #define	BITFL2_(a,b,c,d)	      	\BITX_($23,a,b,c,d)      
0322+  11A4             #define	BITFL2_(a,b,c,d,e)		\BITX_($23,a,b,c,d,e)    
0323+  11A4             #define	BITFL2_(a,b,c,d,e,f)    	\BITX_($23,a,b,c,d,e,f)  
0324+  11A4             #define	BITFL2_(a,b,c,d,e,f,g)  	\BITX_($23,a,b,c,d,e,f,g)
0325+  11A4              
0326+  11A4             #define	BITONP2_(a)		      	\BITX_($24,a)            
0327+  11A4             #define	BITONP2_(a,b)			\BITX_($24,a,b)          
0328+  11A4             #define	BITONP2_(a,b,c)	      	\BITX_($24,a,b,c)        
0329+  11A4             #define	BITONP2_(a,b,c,d)	      	\BITX_($24,a,b,c,d)      
0330+  11A4             #define	BITONP2_(a,b,c,d,e)		\BITX_($24,a,b,c,d,e)    
0331+  11A4             #define	BITONP2_(a,b,c,d,e,f)   	\BITX_($24,a,b,c,d,e,f)  
0332+  11A4             #define	BITONP2_(a,b,c,d,e,f,g) 	\BITX_($24,a,b,c,d,e,f,g)
0333+  11A4             
0334+  11A4             #define	BITOFFP2_(a)			\BITX_($25,a)            
0335+  11A4             #define	BITOFFP2_(a,b)			\BITX_($25,a,b)          
0336+  11A4             #define	BITOFFP2_(a,b,c)	      	\BITX_($25,a,b,c)        
0337+  11A4             #define	BITOFFP2_(a,b,c,d)		\BITX_($25,a,b,c,d)      
0338+  11A4             #define	BITOFFP2_(a,b,c,d,e)		\BITX_($25,a,b,c,d,e)    
0339+  11A4             #define	BITOFFP2_(a,b,c,d,e,f)  	\BITX_($25,a,b,c,d,e,f)  
0340+  11A4             #define	BITOFFP2_(a,b,c,d,e,f,g)	\BITX_($25,a,b,c,d,e,f,g)
0341+  11A4             
0342+  11A4             #define	BITINVP2_(a)			\BITX_($26,a)            
0343+  11A4             #define	BITINVP2_(a,b)			\BITX_($26,a,b)          
0344+  11A4             #define	BITINVP2_(a,b,c)	      	\BITX_($26,a,b,c)        
0345+  11A4             #define	BITINVP2_(a,b,c,d)		\BITX_($26,a,b,c,d)      
0346+  11A4             #define	BITINVP2_(a,b,c,d,e)		\BITX_($26,a,b,c,d,e)    
0347+  11A4             #define	BITINVP2_(a,b,c,d,e,f)   	\BITX_($26,a,b,c,d,e,f)  
0348+  11A4             #define	BITINVP2_(a,b,c,d,e,f,g) 	\BITX_($26,a,b,c,d,e,f,g)
0349+  11A4             
0350+  11A4             #define	BITFLP2_(a)		      	\BITX_($27,a)            
0351+  11A4             #define	BITFLP2_(a,b)			\BITX_($27,a,b)          
0352+  11A4             #define	BITFLP2_(a,b,c)	      	\BITX_($27,a,b,c)        
0353+  11A4             #define	BITFLP2_(a,b,c,d)	      	\BITX_($27,a,b,c,d)      
0354+  11A4             #define	BITFLP2_(a,b,c,d,e)		\BITX_($27,a,b,c,d,e)    
0355+  11A4             #define	BITFLP2_(a,b,c,d,e,f)   	\BITX_($27,a,b,c,d,e,f)  
0356+  11A4             #define	BITFLP2_(a,b,c,d,e,f,g) 	\BITX_($27,a,b,c,d,e,f,g)
0357+  11A4             
0358+  11A4             ;************************
0359+  11A4             ;* Lamp/Bit Effects
0360+  11A4             ;************************
0361+  11A4             #define	RSET1_(a)		      \BITX_($28,a)            
0362+  11A4             #define	RSET1_(a,b)			\BITX_($28,a,b)          
0363+  11A4             #define	RSET1_(a,b,c)	      \BITX_($28,a,b,c)        
0364+  11A4             #define	RSET1_(a,b,c,d)	      \BITX_($28,a,b,c,d)      
0365+  11A4             #define	RSET1_(a,b,c,d,e)		\BITX_($28,a,b,c,d,e)    
0366+  11A4             #define	RSET1_(a,b,c,d,e,f)   	\BITX_($28,a,b,c,d,e,f)  
0367+  11A4             #define	RSET1_(a,b,c,d,e,f,g) 	\BITX_($28,a,b,c,d,e,f,g)
0368+  11A4             
0369+  11A4             #define	RCLR1_(a)		      \BITX_($29,a)            
0370+  11A4             #define	RCLR1_(a,b)			\BITX_($29,a,b)          
0371+  11A4             #define	RCLR1_(a,b,c)	      \BITX_($29,a,b,c)        
0372+  11A4             #define	RCLR1_(a,b,c,d)	      \BITX_($29,a,b,c,d)      
0373+  11A4             #define	RCLR1_(a,b,c,d,e)		\BITX_($29,a,b,c,d,e)    
0374+  11A4             #define	RCLR1_(a,b,c,d,e,f)   	\BITX_($29,a,b,c,d,e,f)  
0375+  11A4             #define	RCLR1_(a,b,c,d,e,f,g) 	\BITX_($29,a,b,c,d,e,f,g)
0376+  11A4             
0377+  11A4             #define	RSET1R1_(a)		      \BITX_($2A,a)            
0378+  11A4             #define	RSET1R1_(a,b)		\BITX_($2A,a,b)          
0379+  11A4             #define	RSET1R1_(a,b,c)	      \BITX_($2A,a,b,c)        
0380+  11A4             #define	RSET1R1_(a,b,c,d)	      \BITX_($2A,a,b,c,d)      
0381+  11A4             #define	RSET1R1_(a,b,c,d,e)	\BITX_($2A,a,b,c,d,e)    
0382+  11A4             #define	RSET1R1_(a,b,c,d,e,f)   \BITX_($2A,a,b,c,d,e,f)  
0383+  11A4             #define	RSET1R1_(a,b,c,d,e,f,g) \BITX_($2A,a,b,c,d,e,f,g)
0384+  11A4             
0385+  11A4             #define	RSET1RC1_(a)		\BITX_($2B,a)            
0386+  11A4             #define	RSET1RC1_(a,b)		\BITX_($2B,a,b)          
0387+  11A4             #define	RSET1RC1_(a,b,c)	      \BITX_($2B,a,b,c)        
0388+  11A4             #define	RSET1RC1_(a,b,c,d)	\BITX_($2B,a,b,c,d)      
0389+  11A4             #define	RSET1RC1_(a,b,c,d,e)	\BITX_($2B,a,b,c,d,e)    
0390+  11A4             #define	RSET1RC1_(a,b,c,d,e,f)  \BITX_($2B,a,b,c,d,e,f)  
0391+  11A4             #define	RSET1RC1_(a,b,c,d,e,f,g) \BITX_($2B,a,b,c,d,e,f,g)
0392+  11A4             
0393+  11A4             #define	RCLR1L1_(a)		      \BITX_($2C,a)            
0394+  11A4             #define	RCLR1L1_(a,b)		\BITX_($2C,a,b)          
0395+  11A4             #define	RCLR1L1_(a,b,c)	      \BITX_($2C,a,b,c)        
0396+  11A4             #define	RCLR1L1_(a,b,c,d)	      \BITX_($2C,a,b,c,d)      
0397+  11A4             #define	RCLR1L1_(a,b,c,d,e)	\BITX_($2C,a,b,c,d,e)    
0398+  11A4             #define	RCLR1L1_(a,b,c,d,e,f)   \BITX_($2C,a,b,c,d,e,f)  
0399+  11A4             #define	RCLR1L1_(a,b,c,d,e,f,g) \BITX_($2C,a,b,c,d,e,f,g)
0400+  11A4             
0401+  11A4             #define	RROL1_(a)		      \BITX_($2D,a)            
0402+  11A4             #define	RROL1_(a,b)			\BITX_($2D,a,b)          
0403+  11A4             #define	RROL1_(a,b,c)	      \BITX_($2D,a,b,c)        
0404+  11A4             #define	RROL1_(a,b,c,d)	      \BITX_($2D,a,b,c,d)      
0405+  11A4             #define	RROL1_(a,b,c,d,e)		\BITX_($2D,a,b,c,d,e)    
0406+  11A4             #define	RROL1_(a,b,c,d,e,f)   	\BITX_($2D,a,b,c,d,e,f)  
0407+  11A4             #define	RROL1_(a,b,c,d,e,f,g) 	\BITX_($2D,a,b,c,d,e,f,g)
0408+  11A4             
0409+  11A4             #define	RROR1_(a)		      \BITX_($2E,a)            
0410+  11A4             #define	RROR1_(a,b)			\BITX_($2E,a,b)          
0411+  11A4             #define	RROR1_(a,b,c)	      \BITX_($2E,a,b,c)        
0412+  11A4             #define	RROR1_(a,b,c,d)	      \BITX_($2E,a,b,c,d)      
0413+  11A4             #define	RROR1_(a,b,c,d,e)		\BITX_($2E,a,b,c,d,e)    
0414+  11A4             #define	RROR1_(a,b,c,d,e,f)   	\BITX_($2E,a,b,c,d,e,f)  
0415+  11A4             #define	RROR1_(a,b,c,d,e,f,g) 	\BITX_($2E,a,b,c,d,e,f,g)
0416+  11A4             
0417+  11A4             #define	RINV1_(a)		      \BITX_($2F,a)            
0418+  11A4             #define	RINV1_(a,b)			\BITX_($2F,a,b)          
0419+  11A4             #define	RINV1_(a,b,c)	      \BITX_($2F,a,b,c)        
0420+  11A4             #define	RINV1_(a,b,c,d)	      \BITX_($2F,a,b,c,d)      
0421+  11A4             #define	RINV1_(a,b,c,d,e)		\BITX_($2F,a,b,c,d,e)    
0422+  11A4             #define	RINV1_(a,b,c,d,e,f)   	\BITX_($2F,a,b,c,d,e,f)  
0423+  11A4             #define	RINV1_(a,b,c,d,e,f,g) 	\BITX_($2F,a,b,c,d,e,f,g)
0424+  11A4             
0425+  11A4             ;********************************************************
0426+  11A4             ;* Solenoid Macro Definition: Up to 15 Solenoids are Supported
0427+  11A4             ;* 
0428+  11A4             ;* The macro takes a coded value of the solenoid number 
0429+  11A4             ;* and the number of IRQ's to leave the solenoid on.
0430+  11A4             ;* You can define the solenoid number plus the time by using
0431+  11A4             ;* the equates following this macro definition...
0432+  11A4             ;* 
0433+  11A4             ;* Example #1:  Turn on Solenoid #1 for 4 IRQ cycles
0434+  11A4             ;*
0435+  11A4             ;*          sol_1_on    .equ  $00+SOLENOID_ON_4_CYCLES
0436+  11A4             ;*          sol_1_off   .equ  $00+SOLENOID_OFF
0437+  11A4             ;* 
0438+  11A4             ;* Then use the SOL_ macro...
0439+  11A4             ;*
0440+  11A4             ;*    Turn it on:       SOL_(sol_1_on)
0441+  11A4             ;*    Turn it off:      SOL_(sol_1_off)
0442+  11A4             ;*
0443+  11A4             ;* Example #2:  Turn on Solenoid #15 indefinitely, and Solenoid #6 for 2 IRQ cycles
0444+  11A4             ;*
0445+  11A4             ;*          sol_15_on   .equ  $0E+SOLENOID_ON_LATCH
0446+  11A4             ;*          sol_15_off  .equ  $0E+SOLENOID_OFF
0447+  11A4             ;*
0448+  11A4             ;*          sol_2_on    .equ  $01+SOLENOID_ON_2_CYCLES
0449+  11A4             ;*          sol_2_off   .equ  $01+SOLENOID_OFF
0450+  11A4             ;* 
0451+  11A4             ;* Then use the SOL_ macro...
0452+  11A4             ;*
0453+  11A4             ;*    Turn them on:       SOL_(sol_15_on,sol_2_on)
0454+  11A4             ;*    Turn them off:      SOL_(sol_15_off,sol_2_off)
0455+  11A4             ;********************************************************
0456+  11A4             #define	SOL_(a)		                  \.db $31,a
0457+  11A4             #define	SOL_(a,b)		                  \.db $32,a,b
0458+  11A4             #define 	SOL_(a,b,c)		                  \.db $33,a,b,c
0459+  11A4             #define	SOL_(a,b,c,d)	                  \.db $34,a,b,c,d
0460+  11A4             #define	SOL_(a,b,c,d,e)	                  \.db $35,a,b,c,d,e
0461+  11A4             #define	SOL_(a,b,c,d,e,f)	                  \.db $36,a,b,c,d,e,f
0462+  11A4             #define	SOL_(a,b,c,d,e,f,g)	            \.db $37,a,b,c,d,e,f,g
0463+  11A4             #define	SOL_(a,b,c,d,e,f,g,h)	            \.db $38,a,b,c,d,e,f,g,h
0464+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i)	            \.db $39,a,b,c,d,e,f,g,h,i
0465+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j)	      \.db $3A,a,b,c,d,e,f,g,h,i,j
0466+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k)	      \.db $3B,a,b,c,d,e,f,g,h,i,j,k
0467+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l)	      \.db $3C,a,b,c,d,e,f,g,h,i,j,k,l
0468+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m)	\.db $3D,a,b,c,d,e,f,g,h,i,j,k,l,m
0469+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n)	\.db $3E,a,b,c,d,e,f,g,h,i,j,k,l,m,n
0470+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)	\.db $3F,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o
0471+  11A4             
0472+  11A4             ;********************************************************
0473+  11A4             ;* some additional solenoid defines for timing
0474+  11A4             ;* Use these in the top of your game definition to specify 
0475+  11A4             ;* static lables for each solenoid
0476+  11A4             ;********************************************************
0477+  11A4             SOLENOID_ON_1_CYCLES       .equ  $20
0478+  11A4             SOLENOID_ON_2_CYCLES       .equ  $40
0479+  11A4             SOLENOID_ON_3_CYCLES       .equ  $60
0480+  11A4             SOLENOID_ON_4_CYCLES       .equ  $80
0481+  11A4             SOLENOID_ON_5_CYCLES       .equ  $A0
0482+  11A4             SOLENOID_ON_6_CYCLES       .equ  $C0
0483+  11A4             SOLENOID_ON_LATCH          .equ  $E0
0484+  11A4             SOLENOID_OFF               .equ  $00
0485+  11A4             
0486+  11A4             ;********************************************************
0487+  11A4             ;* Macros 40-43: Static Length, easy
0488+  11A4             ;********************************************************
0489+  11A4             #define	PTSND_(snd,count,unit)	\.db $40,snd      \ ADDPOINTS_(count,unit)
0490+  11A4             
0491+  11A4             #define	PTCHIME_(count,unit)	\.db $41    \ ADDPOINTS_(count,unit)
0492+  11A4             
0493+  11A4             #define	POINTS_(count,unit)	\.db $42    \ ADDPOINTS_(count,unit)
0494+  11A4             
0495+  11A4             #define	PTSDIG_(count,unit)	\.db $43    \ ADDPOINTS_(count,unit)
0496+  11A4             
0497+  11A4             #define     ADDPOINTS_(count,unit)  \#if ((unit < 10) & (count <= 32))
0498+  11A4             #defcont				      \	.error "Point unit must be multples of 10 and count must be less than 33"
0499+  11A4             #defcont				      \#else
0500+  11A4             #defcont					      \#if (unit == 10)
0501+  11A4             #defcont					      \	.db (((count)<<3)&$F8)+1
0502+  11A4             #defcont					      \#else 
0503+  11A4             #defcont					      	\#if (unit == 100)
0504+  11A4             #defcont						      \	.db (((count)<<3)&$F8)+2
0505+  11A4             #defcont						      \#else 
0506+  11A4             #defcont							      \#if (unit == 1000)
0507+  11A4             #defcont							      \	.db (((count)<<3)&$F8)+3
0508+  11A4             #defcont							      \#else 
0509+  11A4             #defcont								      \#if (unit == 10000)
0510+  11A4             #defcont								      \	.db (((count)<<3)&$F8)+4
0511+  11A4             #defcont								      \#else 
0512+  11A4             #defcont									      \#if (unit == 100000)
0513+  11A4             #defcont									      \	.db (((count)<<3)&$F8)+5
0514+  11A4             #defcont									      \#else 
0515+  11A4             #defcont									      \	.error "Macros only support points under 1,000,000 points"
0516+  11A4             #defcont									      \#endif
0517+  11A4             #defcont								      \#endif
0518+  11A4             #defcont							      \#endif
0519+  11A4             #defcont						      \#endif
0520+  11A4             #defcont					      \#endif
0521+  11A4             #defcont				      \#endif
0522+  11A4             
0523+  11A4             
0524+  11A4             
0525+  11A4             ;********************************************************
0526+  11A4             ;* Macros 44-4F: Define temporary execution of CPU code.
0527+  11A4             ;*               The length of bytes to execute is in 
0528+  11A4             ;*               the lower nibble and must be between
0529+  11A4             ;*               4-f. Therefore, number of bytes to 
0530+  11A4             ;*               execute must be between 2 and 13.
0531+  11A4             :*
0532+  11A4             ;* There are two macros defined here, the first is the
0533+  11A4             ;* new style macro where it will automatically calculate
0534+  11A4             ;* the number of opcode bytes that are executed. This 
0535+  11A4             ;* style requires and end tag for the macro called EXEEND_
0536+  11A4             ;* that marks where execution returns to WML7.
0537+  11A4             ;*
0538+  11A4             ;* The old style macro does not require an end tag but
0539+  11A4             ;* does require you to calcuate the number of bytes that
0540+  11A4             ;* will be executed as native 680X code. This is obviously
0541+  11A4             ;* more tedious but I left it here for some reason. 
0542+  11A4             ;********************************************************
0543+  11A4             #define     EXE_              \.push *,FLAG_WML_EXE
0544+  11A4             #defcont                      \.db $44
0545+  11A4             
0546+  11A4             #define     EXEEND_           \wml4_ .set *
0547+  11A4             #defcont                      \.pop wml1_,wml2_
0548+  11A4             #defcont                      \#if wml1_ == FLAG_WML_EXE
0549+  11A4             #defcont                            \wml3_ .set wml4_-wml2_
0550+  11A4             #defcont                            \#if (wml3_>14)|(wml3_<3)
0551+  11A4             #defcont                            \     .error "Macro EXE_: Number of executed bytes must be between 2 and 15"
0552+  11A4             #defcont                            \#else
0553+  11A4             #defcont                            \     .org wml2_
0554+  11A4             #defcont                            \     .db $44+wml3_-3
0555+  11A4             #defcont                            \#endif
0556+  11A4             #defcont                            \.org wml4_
0557+  11A4             #defcont                      \#else
0558+  11A4             #defcont                            \.error "EXEEND_ did not have a starting EXE_ code"
0559+  11A4             #defcont                      \#endif
0560+  11A4             
0561+  11A4                
0562+  11A4             #define	EXE_(a)		\#if (a>13)|(a<2)
0563+  11A4             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0564+  11A4             #defcont				\#else
0565+  11A4             #defcont				\    .db ($44+a-2)
0566+  11A4             #defcont				\#endif
0567+  11A4             
0568+  11A4             ;********************************************************
0569+  11A4             ;* Macros 50-57:
0570+  11A4             ;********************************************************
0571+  11A4             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0572+  11A4             #defcont				\	.db $50,((a*16)+b) 
0573+  11A4             #defcont				\#else
0574+  11A4             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0575+  11A4             #defcont				\#endif
0576+  11A4             
0577+  11A4             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0578+  11A4             #defcont				\	.db $51,((a*16)+b) 
0579+  11A4             #defcont				\#else
0580+  11A4             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0581+  11A4             #defcont				\#endif
0582+  11A4             
0583+  11A4             #define	PRI_(a)		\.db $52,a
0584+  11A4             
0585+  11A4             #define	SLEEP_(a)		\#if (a<16)
0586+  11A4             #defcont				\	.db ($70+a)
0587+  11A4             #defcont				\#else
0588+  11A4             #defcont				\	.db $53,a
0589+  11A4             #defcont				\#endif
0590+  11A4             
0591+  11A4             #define	REMTHREAD_(a,b)	\.db $54,a,b
0592+  11A4             
0593+  11A4             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0594+  11A4             
0595+  11A4             #define 	JSR_(a)		\.db $56 \.dw a
0596+  11A4             #define	JSRD_(a)		\.db $57 \.dw a
0597+  11A4             
0598+  11A4             ;*******************************************************************
0599+  11A4             ;* Branch Macros: 58-5B
0600+  11A4             ;*******************************************************************
0601+  11A4             #define     IFLOC_(type,vars)    \ .push  *, vars, type        
0602+  11A4             
0603+  11A4             ;*******************************************************************
0604+  11A4             ;* Begin: The start marker for logical loops, must terminate with  *
0605+  11A4             ;*        an 'XXEND_' statement.                                    *
0606+  11A4             ;******************************************************************* 
0607+  11A4             #define     BEGIN_	      IFLOC_(FLAG_WML_BEGIN,0)
0608+  11A4             
0609+  11A4             ;*******************************************************************
0610+  11A4             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0611+  11A4             ;*            pulls the pc location of the beginning of the loop   *
0612+  11A4             ;*            and verifies that the 'type' is correct.             *
0613+  11A4             ;*******************************************************************
0614+  11A4             #define 	LOGIC_LOOPEND_(vars)	\ .pop wml1_, wml2_, wml3_
0615+  11A4             #defcont						\wml2_ .set vars
0616+  11A4             #defcont						\wml4_ .set *
0617+  11A4             #defcont						\#if (wml1_ & FLAG_WML_BEGIN)
0618+  11A4             #defcont							\#if ((wml4_-wml3_) <= 127)
0619+  11A4             #defcont								\ .org wml4_-1
0620+  11A4             #defcont								\ .db wml3_-wml4_
0621+  11A4             #defcont								\ .org wml4_
0622+  11A4             #defcont							\#else
0623+  11A4             #defcont								\ .error "Loop Branch out of Range."
0624+  11A4             #defcont							\#endif
0625+  11A4             #defcont						\#else
0626+  11A4             #defcont							\ .error "Inappropriate End for BEGIN Loop."
0627+  11A4             #defcont						\#endif
0628+  11A4             
0629+  11A4             ;*******************************************************************
0630+  11A4             ;* Basic Loop
0631+  11A4             ;*******************************************************************
0632+  11A4             #define	LOOP_		\ .pop wml1_, wml2_, wml3_ \ JMPR_(wml3_)
0633+  11A4             
0634+  11A4             ;*******************************************************************
0635+  11A4             ;* Conditional Looping
0636+  11A4             ;*******************************************************************
0637+  11A4             #define	EQEND_(z)						BNER_(z,*+3) \ LOGIC_LOOPEND_(1)		
0638+  11A4             #define	EQEND_(z,y)						BNER_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0639+  11A4             #define	EQEND_(z,y,x)					BNER_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0640+  11A4             #define	EQEND_(z,y,x,w)					BNER_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0641+  11A4             #define	EQEND_(z,y,x,w,v)					BNER_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0642+  11A4             #define     EQEND_(z,y,x,w,v,u)				BNER_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0643+  11A4             #define     EQEND_(z,y,x,w,v,u,t)			     	BNER_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0644+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s)     			BNER_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0645+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r)     		BNER_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0646+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q)     		BNER_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0647+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p)     		BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0648+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0649+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0650+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0651+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0652+  11A4             
0653+  11A4             #define	NEEND_(z)						BEQR_(z,*+3) \ LOGIC_LOOPEND_(1)		
0654+  11A4             #define	NEEND_(z,y)						BEQR_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0655+  11A4             #define	NEEND_(z,y,x)					BEQR_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0656+  11A4             #define	NEEND_(z,y,x,w)					BEQR_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0657+  11A4             #define	NEEND_(z,y,x,w,v)					BEQR_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0658+  11A4             #define     NEEND_(z,y,x,w,v,u)				BEQR_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0659+  11A4             #define     NEEND_(z,y,x,w,v,u,t)			     	BEQR_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0660+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s)     			BEQR_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0661+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r)     		BEQR_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0662+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q)     		BEQR_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0663+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p)     		BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0664+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0665+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0666+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0667+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0668+  11A4             ;*******************************************************************
0669+  11A4             ;* IFxxx: These are the standard 'if' statements, they will always  
0670+  11A4             ;*        be of type FLAG_WML_IF                                           
0671+  11A4             ;*******************************************************************
0672+  11A4             #define     IFEQR_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BNER_(z,*+3)     
0673+  11A4             #define     IFEQR_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BNER_(z,y,*+3)   
0674+  11A4             #define     IFEQR_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BNER_(z,y,x,*+3) 
0675+  11A4             #define     IFEQR_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BNER_(z,y,x,w,*+3)   
0676+  11A4             #define     IFEQR_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BNER_(z,y,x,w,v,*+3) 
0677+  11A4             #define     IFEQR_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BNER_(z,y,x,w,v,u,*+3) 
0678+  11A4             #define     IFEQR_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BNER_(z,y,x,w,v,u,t,*+3) 
0679+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BNER_(z,y,x,w,v,u,t,s,*+3) 
0680+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BNER_(z,y,x,w,v,u,t,s,r,*+3)
0681+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BNER_(z,y,x,w,v,u,t,s,r,q,*+3)
0682+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0683+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0684+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0685+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0686+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0687+  11A4             
0688+  11A4             #define     IFNER_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BEQR_(z,*+3)     
0689+  11A4             #define     IFNER_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BEQR_(z,y,*+3)   
0690+  11A4             #define     IFNER_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BEQR_(z,y,x,*+3) 
0691+  11A4             #define     IFNER_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BEQR_(z,y,x,w,*+3) 
0692+  11A4             #define     IFNER_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BEQR_(z,y,x,w,v,*+3) 
0693+  11A4             #define     IFNER_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BEQR_(z,y,x,w,v,u,*+3) 
0694+  11A4             #define     IFNER_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BEQR_(z,y,x,w,v,u,t,*+3) 
0695+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BEQR_(z,y,x,w,v,u,t,s,*+3) 
0696+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BEQR_(z,y,x,w,v,u,t,s,r,*+3)
0697+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BEQR_(z,y,x,w,v,u,t,s,r,q,*+3)
0698+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0699+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0700+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0701+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0702+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0703+  11A4             
0704+  11A4             #define     ENDIF_ \wml1_ .set *
0705+  11A4             #defcont		 \ .pop wml3_, wml5_, wml4_
0706+  11A4             #defcont		 \#if (wml3_ & FLAG_WML_BEGIN)==0
0707+  11A4             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0708+  11A4             #defcont  			      \wml2_ .set wml1_-wml4_-wml5_-2
0709+  11A4             #defcont			      \#if wml2_+127 < 0
0710+  11A4             #defcont				      \ .error "Branch Range < -127"
0711+  11A4             #defcont			      \#else
0712+  11A4             #defcont				      \#if wml2_-128 > 0
0713+  11A4             #defcont					      \ .error "Branch Range > 128"
0714+  11A4             #defcont				      \#else
0715+  11A4             #defcont    				      \ .org wml4_+wml5_+1
0716+  11A4             #defcont					      \ .byte wml2_
0717+  11A4             #defcont				      \#endif
0718+  11A4             #defcont			      \#endif
0719+  11A4             #defcont                \#else
0720+  11A4             #defcont                      \ .org  wml4_-2	
0721+  11A4             #defcont				\ JMP_(wml1_)
0722+  11A4             #defcont                      \ .error "123: Not Tested"
0723+  11A4             #defcont                \#endif
0724+  11A4             #defcont			\ .org	wml1_
0725+  11A4             #defcont		 \#else
0726+  11A4             #defcont			\.error "Wrong Endtype for IFXXR_ block"
0727+  11A4             #defcont		 \#endif
0728+  11A4             
0729+  11A4             #define	ELSE_	\wml1_ .set $
0730+  11A4             #defcont		\ .pop wml3_, wml5_, wml4_
0731+  11A4             #defcont		\#if (wml3_ & FLAG_WML_BEGIN)==0
0732+  11A4             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0733+  11A4             #defcont				\ .org wml4_+wml5_+1
0734+  11A4             #defcont				\wml2_ .set wml1_-wml4_
0735+  11A4             #defcont					\#if wml2_+127 < 0
0736+  11A4             #defcont						\ .org wml1_
0737+  11A4             #defcont						\.push wml1_+3, wml5_, FLAG_WML_ELSE
0738+  11A4             #defcont						\ JMP_($)
0739+  11A4             #defcont                                  \ .error "(124)ELSE_: Not Tested with long JMP"
0740+  11A4             #defcont					\#else
0741+  11A4             #defcont						\#if wml2_-128>0
0742+  11A4             #defcont							\ .org wml1_
0743+  11A4             #defcont							\.push wml1_+3, wml5_, FLAG_WML_ELSE
0744+  11A4             #defcont							\ JMP_($)
0745+  11A4             #defcont                                  \ .error "(125)ELSE_: Not Tested with long JMP"
0746+  11A4             #defcont						\#else
0747+  11A4             #defcont							\.push wml1_-wml5_, wml5_, FLAG_WML_IF
0748+  11A4             #defcont							\ .byte wml2_-wml5_
0749+  11A4             #defcont							\ .org wml1_
0750+  11A4             #defcont							\ JMPR_($+1)
0751+  11A4             #defcont							\ .org wml1_+2
0752+  11A4             #defcont						\#endif
0753+  11A4             #defcont					\#endif
0754+  11A4             #defcont			\#else
0755+  11A4             #defcont				\.error "Duplicate ELSE Statement"
0756+  11A4             #defcont			\#endif
0757+  11A4             #defcont		\#else
0758+  11A4             #defcont			\ .error "Misplaced Else"
0759+  11A4             #defcont		\#endif
0760+  11A4             
0761+  11A4             #define     BEQR_(p1__,ba__)     \#if $+3-ba__ < 128
0762+  11A4             #defcont                                 \.db $5A,p1__,ba__-$-3
0763+  11A4             #defcont				\#else
0764+  11A4             #defcont					\#if ba__-$+3 < 127
0765+  11A4             #defcont                                 \.db $5A,p1__,$+3-ba__
0766+  11A4             #defcont					\#else
0767+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0768+  11A4             #defcont					\#endif
0769+  11A4             #defcont				\#endif
0770+  11A4             
0771+  11A4             #define     BEQR_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0772+  11A4             #defcont                                 \.db $5A,p1__,p2__,ba__-$-4
0773+  11A4             #defcont				\#else
0774+  11A4             #defcont					\#if ba__-$+4 < 127
0775+  11A4             #defcont                                 \.db $5A,p1__,p2__,$+4-ba__
0776+  11A4             #defcont					\#else
0777+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0778+  11A4             #defcont					\#endif
0779+  11A4             #defcont				\#endif
0780+  11A4             
0781+  11A4             #define     BEQR_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0782+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,ba__-$-5
0783+  11A4             #defcont				\#else
0784+  11A4             #defcont					\#if ba__-$+5 < 127
0785+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,$+5-ba__
0786+  11A4             #defcont					\#else
0787+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0788+  11A4             #defcont					\#endif
0789+  11A4             #defcont				\#endif
0790+  11A4             
0791+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0792+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,ba__-$-6
0793+  11A4             #defcont				\#else
0794+  11A4             #defcont					\#if ba__-$+6 < 127
0795+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,$+6-ba__
0796+  11A4             #defcont					\#else
0797+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0798+  11A4             #defcont					\#endif
0799+  11A4             #defcont				\#endif
0800+  11A4             
0801+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0802+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0803+  11A4             #defcont				\#else
0804+  11A4             #defcont					\#if ba__-$+7 < 127
0805+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0806+  11A4             #defcont					\#else
0807+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0808+  11A4             #defcont					\#endif
0809+  11A4             #defcont				\#endif
0810+  11A4             
0811+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0812+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0813+  11A4             #defcont				\#else
0814+  11A4             #defcont					\#if ba__-$+8 < 127
0815+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0816+  11A4             #defcont					\#else
0817+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0818+  11A4             #defcont					\#endif
0819+  11A4             #defcont				\#endif
0820+  11A4             
0821+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0822+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0823+  11A4             #defcont				\#else
0824+  11A4             #defcont					\#if ba__-$+9 < 127
0825+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0826+  11A4             #defcont					\#else
0827+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0828+  11A4             #defcont					\#endif
0829+  11A4             #defcont				\#endif
0830+  11A4             
0831+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0832+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0833+  11A4             #defcont				\#else
0834+  11A4             #defcont					\#if ba__-$+10 < 127
0835+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0836+  11A4             #defcont					\#else
0837+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0838+  11A4             #defcont					\#endif
0839+  11A4             #defcont				\#endif
0840+  11A4             
0841+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0842+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0843+  11A4             #defcont				\#else
0844+  11A4             #defcont					\#if ba__-$+11 < 127
0845+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0846+  11A4             #defcont					\#else
0847+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0848+  11A4             #defcont					\#endif
0849+  11A4             #defcont				\#endif
0850+  11A4             
0851+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0852+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0853+  11A4             #defcont				\#else
0854+  11A4             #defcont					\#if ba__-$+12 < 127
0855+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0856+  11A4             #defcont					\#else
0857+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0858+  11A4             #defcont					\#endif
0859+  11A4             #defcont				\#endif
0860+  11A4             
0861+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0862+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0863+  11A4             #defcont				\#else
0864+  11A4             #defcont					\#if ba__-$+13 < 127
0865+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0866+  11A4             #defcont					\#else
0867+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0868+  11A4             #defcont					\#endif
0869+  11A4             #defcont				\#endif
0870+  11A4             
0871+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0872+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0873+  11A4             #defcont				\#else
0874+  11A4             #defcont					\#if ba__-$+14 < 127
0875+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0876+  11A4             #defcont					\#else
0877+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0878+  11A4             #defcont					\#endif
0879+  11A4             #defcont				\#endif
0880+  11A4             
0881+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0882+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0883+  11A4             #defcont				\#else
0884+  11A4             #defcont					\#if ba__-$+15 < 127
0885+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0886+  11A4             #defcont					\#else
0887+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0888+  11A4             #defcont					\#endif
0889+  11A4             #defcont				\#endif
0890+  11A4             
0891+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0892+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0893+  11A4             #defcont				\#else
0894+  11A4             #defcont					\#if ba__-$+16 < 127
0895+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0896+  11A4             #defcont					\#else
0897+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0898+  11A4             #defcont					\#endif
0899+  11A4             #defcont				\#endif
0900+  11A4             
0901+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
0902+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
0903+  11A4             #defcont				\#else
0904+  11A4             #defcont					\#if ba__-$+17 < 127
0905+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
0906+  11A4             #defcont					\#else
0907+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0908+  11A4             #defcont					\#endif
0909+  11A4             #defcont				\#endif
0910+  11A4             
0911+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
0912+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
0913+  11A4             #defcont				\#else
0914+  11A4             #defcont					\#if ba__-$+18 < 127
0915+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
0916+  11A4             #defcont					\#else
0917+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0918+  11A4             #defcont					\#endif
0919+  11A4             #defcont				\#endif
0920+  11A4             
0921+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
0922+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
0923+  11A4             #defcont				\#else
0924+  11A4             #defcont					\#if ba__-$+19 < 127
0925+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
0926+  11A4             #defcont					\#else
0927+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0928+  11A4             #defcont					\#endif
0929+  11A4             #defcont				\#endif
0930+  11A4             
0931+  11A4             #define     BEQA_(p1__,ba__)     \.db $58,p1__ \.dw ba__
0932+  11A4             #define     BEQA_(p1__,p2__,ba__)     \.db $58,p1__,p2__ \.dw ba__
0933+  11A4             #define     BEQA_(p1__,p2__,p3__,ba__)     \.db $58,p1__,p2__,p3__ \.dw ba__
0934+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,ba__)     \.db $58,p1__,p2__,p3__,p4__ \.dw ba__
0935+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__ \.dw ba__
0936+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
0937+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
0938+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
0939+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
0940+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
0941+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
0942+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
0943+  11A4             
0944+  11A4             #define     BNER_(p1__,ba__)     \#if $+3-ba__ < 128
0945+  11A4             #defcont                                 \.db $5B,p1__,ba__-$-3
0946+  11A4             #defcont				\#else
0947+  11A4             #defcont					\#if ba__-$+3 < 127
0948+  11A4             #defcont                                 \.db $5B,p1__,$+3-ba__
0949+  11A4             #defcont					\#else
0950+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0951+  11A4             #defcont					\#endif
0952+  11A4             #defcont				\#endif
0953+  11A4             
0954+  11A4             #define     BNER_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0955+  11A4             #defcont                                 \.db $5B,p1__,p2__,ba__-$-4
0956+  11A4             #defcont				\#else
0957+  11A4             #defcont					\#if ba__-$+4 < 127
0958+  11A4             #defcont                                 \.db $5B,p1__,p2__,$+4-ba__
0959+  11A4             #defcont					\#else
0960+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0961+  11A4             #defcont					\#endif
0962+  11A4             #defcont				\#endif
0963+  11A4             
0964+  11A4             #define     BNER_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0965+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,ba__-$-5
0966+  11A4             #defcont				\#else
0967+  11A4             #defcont					\#if ba__-$+5 < 127
0968+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,$+5-ba__
0969+  11A4             #defcont					\#else
0970+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0971+  11A4             #defcont					\#endif
0972+  11A4             #defcont				\#endif
0973+  11A4             
0974+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0975+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,ba__-$-6
0976+  11A4             #defcont				\#else
0977+  11A4             #defcont					\#if ba__-$+6 < 127
0978+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,$+6-ba__
0979+  11A4             #defcont					\#else
0980+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0981+  11A4             #defcont					\#endif
0982+  11A4             #defcont				\#endif
0983+  11A4             
0984+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0985+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0986+  11A4             #defcont				\#else
0987+  11A4             #defcont					\#if ba__-$+7 < 127
0988+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0989+  11A4             #defcont					\#else
0990+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0991+  11A4             #defcont					\#endif
0992+  11A4             #defcont				\#endif
0993+  11A4             
0994+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0995+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0996+  11A4             #defcont				\#else
0997+  11A4             #defcont					\#if ba__-$+8 < 127
0998+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0999+  11A4             #defcont					\#else
1000+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1001+  11A4             #defcont					\#endif
1002+  11A4             #defcont				\#endif
1003+  11A4             
1004+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
1005+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
1006+  11A4             #defcont				\#else
1007+  11A4             #defcont					\#if ba__-$+9 < 127
1008+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
1009+  11A4             #defcont					\#else
1010+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1011+  11A4             #defcont					\#endif
1012+  11A4             #defcont				\#endif
1013+  11A4             
1014+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
1015+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
1016+  11A4             #defcont				\#else
1017+  11A4             #defcont					\#if ba__-$+10 < 127
1018+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
1019+  11A4             #defcont					\#else
1020+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1021+  11A4             #defcont					\#endif
1022+  11A4             #defcont				\#endif
1023+  11A4             
1024+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
1025+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
1026+  11A4             #defcont				\#else
1027+  11A4             #defcont					\#if ba__-$+11 < 127
1028+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
1029+  11A4             #defcont					\#else
1030+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1031+  11A4             #defcont					\#endif
1032+  11A4             #defcont				\#endif
1033+  11A4             
1034+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
1035+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
1036+  11A4             #defcont				\#else
1037+  11A4             #defcont					\#if ba__-$+12 < 127
1038+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
1039+  11A4             #defcont					\#else
1040+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1041+  11A4             #defcont					\#endif
1042+  11A4             #defcont				\#endif
1043+  11A4             
1044+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
1045+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
1046+  11A4             #defcont				\#else
1047+  11A4             #defcont					\#if ba__-$+13 < 127
1048+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
1049+  11A4             #defcont					\#else
1050+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1051+  11A4             #defcont					\#endif
1052+  11A4             #defcont				\#endif
1053+  11A4             
1054+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
1055+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
1056+  11A4             #defcont				\#else
1057+  11A4             #defcont					\#if ba__-$+14 < 127
1058+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
1059+  11A4             #defcont					\#else
1060+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1061+  11A4             #defcont					\#endif
1062+  11A4             #defcont				\#endif
1063+  11A4             
1064+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
1065+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
1066+  11A4             #defcont				\#else
1067+  11A4             #defcont					\#if ba__-$+15 < 127
1068+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
1069+  11A4             #defcont					\#else
1070+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1071+  11A4             #defcont					\#endif
1072+  11A4             #defcont				\#endif
1073+  11A4             
1074+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
1075+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
1076+  11A4             #defcont				\#else
1077+  11A4             #defcont					\#if ba__-$+16 < 127
1078+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
1079+  11A4             #defcont					\#else
1080+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1081+  11A4             #defcont					\#endif
1082+  11A4             #defcont				\#endif
1083+  11A4             
1084+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
1085+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
1086+  11A4             #defcont				\#else
1087+  11A4             #defcont					\#if ba__-$+17 < 127
1088+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
1089+  11A4             #defcont					\#else
1090+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1091+  11A4             #defcont					\#endif
1092+  11A4             #defcont				\#endif
1093+  11A4             
1094+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
1095+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
1096+  11A4             #defcont				\#else
1097+  11A4             #defcont					\#if ba__-$+18 < 127
1098+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
1099+  11A4             #defcont					\#else
1100+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1101+  11A4             #defcont					\#endif
1102+  11A4             #defcont				\#endif
1103+  11A4             
1104+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
1105+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
1106+  11A4             #defcont				\#else
1107+  11A4             #defcont					\#if ba__-$+19 < 127
1108+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
1109+  11A4             #defcont					\#else
1110+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1111+  11A4             #defcont					\#endif
1112+  11A4             #defcont				\#endif
1113+  11A4             
1114+  11A4             #define     BNEA_(p1__,ba__)     \.db $59,p1__ \.dw ba__
1115+  11A4             #define     BNEA_(p1__,p2__,ba__)     \.db $59,p1__,p2__ \.dw ba__
1116+  11A4             #define     BNEA_(p1__,p2__,p3__,ba__)     \.db $59,p1__,p2__,p3__ \.dw ba__
1117+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,ba__)     \.db $59,p1__,p2__,p3__,p4__ \.dw ba__
1118+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__ \.dw ba__
1119+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
1120+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
1121+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
1122+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
1123+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
1124+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
1125+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
1126+  11A4             ;**********************************************************
1127+  11A4             ;* Macros 5C-5F
1128+  11A4             ;**********************************************************
1129+  11A4             #define	JMPD_(a)		.db $5c \.dw a
1130+  11A4             
1131+  11A4             #define	SWSET_(a)		      .db $5d,a
1132+  11A4             #define	SWSET_(a,b)		      .db $5d,((a&$7F)+$80),b
1133+  11A4             #define	SWSET_(a,b,c)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),c
1134+  11A4             #define	SWSET_(a,b,c,d)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
1135+  11A4             #define	SWSET_(a,b,c,d,e)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
1136+  11A4             #define	SWSET_(a,b,c,d,e,f)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
1137+  11A4             #define	SWSET_(a,b,c,d,e,f,g)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
1138+  11A4             #define	SWSET_(a,b,c,d,e,f,g,h)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7F)+$80),h
1139+  11A4             
1140+  11A4             #define	SWCLR_(a)		      .db $5e,a
1141+  11A4             #define	SWCLR_(a,b)		      .db $5e,((a&$7F)+$80),b
1142+  11A4             #define	SWCLR_(a,b,c)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),c
1143+  11A4             #define	SWCLR_(a,b,c,d)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
1144+  11A4             #define	SWCLR_(a,b,c,d,e)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
1145+  11A4             #define	SWCLR_(a,b,c,d,e,f)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
1146+  11A4             #define	SWCLR_(a,b,c,d,e,f,g)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
1147+  11A4             #define	SWCLR_(a,b,c,d,e,f,g,h)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7F)+$80),h
1148+  11A4             
1149+  11A4             #define	JMP_(a)		.db $5f \.dw a
1150+  11A4             
1151+  11A4             ;**********************************************************
1152+  11A4             ;* Macro 6X:
1153+  11A4             ;**********************************************************
1154+  11A4             #define	SLEEPI_(a)		.db ($60+(a&$0f))
1155+  11A4             
1156+  11A4             ;**********************************************************
1157+  11A4             ;* Macro 7X: 
1158+  11A4             ;**********************************************************
1159+  11A4             ;See SLEEP macro previous...
1160+  11A4             
1161+  11A4             ;**********************************************************
1162+  11A4             ;* Macro 8X:
1163+  11A4             ;**********************************************************
1164+  11A4             #define 	JMPR_(a)		\#if a-$ > $7ff
1165+  11A4             #defcont				\	.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1166+  11A4             #defcont				\#else
1167+  11A4             #defcont				\	#if $-a > $7ff
1168+  11A4             #defcont				\		.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1169+  11A4             #defcont				\	#endif
1170+  11A4             #defcont				\#endif
1171+  11A4             #defcont				\	.db ($80+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1172+  11A4             
1173+  11A4             ;**********************************************************
1174+  11A4             ;* Macro 9X:
1175+  11A4             ;**********************************************************
1176+  11A4             #define 	JSRR_(a)		\#if a-$ > $7ff
1177+  11A4             #defcont				\	.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1178+  11A4             #defcont				\#else
1179+  11A4             #defcont				\	#if $-a > $7ff
1180+  11A4             #defcont				\		.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1181+  11A4             #defcont				\	#endif
1182+  11A4             #defcont				\#endif
1183+  11A4             #defcont				\	.db ($90+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1184+  11A4             ;**********************************************************
1185+  11A4             ;* Macro AX:
1186+  11A4             ;**********************************************************
1187+  11A4             #define 	JSRDR_(a)		\#if a-$ > $7ff
1188+  11A4             #defcont				\	.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1189+  11A4             #defcont				\#else
1190+  11A4             #defcont				\	#if $-a > $7ff
1191+  11A4             #defcont				\		.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1192+  11A4             #defcont				\	#endif
1193+  11A4             #defcont				\#endif
1194+  11A4             #defcont				\	.db ($a0+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1195+  11A4             
1196+  11A4             
1197+  11A4             ;**********************************************************
1198+  11A4             ;* Macro BX: Add NextByte to RAM LSD(command) 
1199+  11A4             ;**********************************************************
1200+  11A4             #define 	ADDRAM_(ramloc,data)	\#if ramloc > $0f
1201+  11A4             #defcont					\	.error "Macro ADDRAM_: RAM Location must be between $00-$0F"
1202+  11A4             #defcont					\#endif
1203+  11A4             #defcont					\	.db ($b0+(ramloc&$0f)),data
1204+  11A4             
1205+  11A4             ;**********************************************************
1206+  11A4             ;* Macro CX: Set NextByte to RAM LSD(command) 
1207+  11A4             ;**********************************************************
1208+  11A4             #define 	SETRAM_(ramloc,data)	\#if ramloc > $0f
1209+  11A4             #defcont					\	.error "Macro SETRAM_: RAM Location must be between $00-$0F"
1210+  11A4             #defcont					\#endif
1211+  11A4             #defcont					\	.db ($c0+ramloc),data
1212+  11A4             
1213+  11A4             ;**********************************************************
1214+  11A4             ;* Macro DX: Play Index Sound (NextByte)Times  
1215+  11A4             ;**********************************************************
1216+  11A4             #define	RSND_(snd,times)		.db $d0+(snd&0F),times
1217+  11A4             
1218+  11A4             ;**********************************************************
1219+  11A4             ;* Macro EX,FX: Play Index Sound (NextByte)Times  
1220+  11A4             ;**********************************************************
1221+  11A4             #define	SSND_(a)		\#if (a<$20)
1222+  11A4             #defcont				\	.db $e0+a
1223+  11A4             #defcont				\#else
1224+  11A4             #defcont				\	.db $e0
1225+  11A4             #defcont				\	.error "Macro SSND_: Parameters must be less than $20"
1226+  11A4             #defcont				\#endif
0009   11A4             #include  "7gen.asm"	;Level 7 general defines
0001+  11A4             ;*****************************************************************************
0002+  11A4             ;* Williams Level 7 General Macros
0003+  11A4             ;*****************************************************************************
0004+  11A4             ;* Code copyright Williams Electronic Games Inc.
0005+  11A4             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  11A4             ;* For use with TASMx Assembler
0007+  11A4             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  11A4             ;* for more information.
0009+  11A4             ;* You may redistribute this file as long as this header remains intact.
0010+  11A4             ;*****************************************************************************
0011+  11A4             .module 7gen
0012+  11A4             .msfirst
0013+  11A4             ;*****************************************************************************
0014+  11A4             ;* This is where you should put general timesaving macros above and beyond
0015+  11A4             ;* the base logic and WML7 macros...
0016+  11A4             ;*
0017+  11A4             ;* An example is repetitive code such as...
0018+  11A4             ;*
0019+  11A4             ;* ldx	#gj_2B
0020+  11A4             ;* jsr	newthread_06
0021+  11A4             ;*
0022+  11A4             ;* Is both long and it is easy to forget to reference the label properly, it
0023+  11A4             ;* can be replaced with..
0024+  11A4             ;*
0025+  11A4             ;* NEWTHREAD(gj_2B) 
0026+  11A4             ;* 
0027+  11A4             ;* By using the macro defined below...
0028+  11A4             ;*****************************************************************************
0029+  11A4             
0030+  11A4             #define	NEWTHREAD(x)	\ ldx #x	\ jsr newthread_06
0031+  11A4             #define     NEWTHREAD_JMP(x)	\ ldx #x	\ jmp newthread_06
0010   11A4             
0011   11A4             ;*************************************************************
0012   11A4             ;* Set the emulation flag to make our file on the $8000 boundary
0013   11A4             ;* in order for the eprom emulator to work correctly. The 
0014   11A4             ;* emulator will cover the block from $8000-$ffff. 
0015   11A4             ;*************************************************************
0016   11A4             emulate .equ 1
0017   11A4             
0018   11A4             ;--------------------------------------------------------------
0019   11A4             ; GAME RAM Locations:
0020   11A4             ;
0021   11A4             ; $02 - Last Random Drop Target
0022   11A4             ; $03 - Not Used?
0023   11A4             ; $04 - Not Used?
0024   11A4             ; $05 - Not Used?
0025   11A4             ; $06 - Not Used?
0026   11A4             ; $07 - Not Used?
0027   11A4             ; $08 - Outhole Bonus Delay Value
0028   11A4             ; $09 - Not Used?
0029   11A4             ; $0a - Current Timer Value for display
0030   11A4             ; $0b - Background Sound Flag (00=constant,01=increment)
0031   11A4             ; $0c - GI Counter
0032   11A4             ; $0d - Temp holder for Multiball timer animation
0033   11A4             ; $0e	- Bell Counter
0034   11A4             ; $0f - Buzzer Counter
0035   11A4             ;--------------------------------------------------
0036   11A4             ; Extra RAM Locations Used:
0037   11A4             ; 
0038   11A4             ; $00E0: Double Trouble Value ($00,$01,$02,$04,$08,$16)
0039   11A4             ; $00E1: Comma Flags Temp Holder
0040   11A4             ;
0041   11A4             ;
0042   11A4             ;--------------------------------------------------
0043   11A4             ; Game Bit Definitions:
0044   11A4             ; 1.1(00) - Set when game is in multiball fancy display
0045   11A4             ; 1.2(01) - Set when lock is lit?
0046   11A4             ; 1.3(02)
0047   11A4             ; 1.4(03)
0048   11A4             ; 1.5(04) - Not Used?
0049   11A4             ; 1.6(05) - Not Used?
0050   11A4             ; 1.7(06) - Not Used?
0051   11A4             ; 1.8(07) - Not Used?
0052   11A4             ; 2.1(08) - Not Used?
0053   11A4             ; 2.2(09) - Not Used?
0054   11A4             ; 2.3(0A) - Not Used?
0055   11A4             ; 2.4(0B) - Not Used?
0056   11A4             ; 2.5(0C) - Not Used?
0057   11A4             ; 2.6(0D) - Not Used?
0058   11A4             ; 2.7(0E) - Not Used?
0059   11A4             ; 2.8(0F) - Game Play Disable: This is set when a player is being initialized
0060   11A4             ; 3.1(10)
0061   11A4             ; 3.2(11) - Tilt Timer: Set for 2.5 seconds after a plumb bob tilt
0062   11A4             ; 3.3(12) - Double Trouble: Set when player has double trouble lit
0063   11A4             ; 3.4(13) - Mini Playfied: Set when the Mini-PF is active
0064   11A4             ; 3.5(14) - Eject Hole Bit: Set for upper eject, clear for lower eject
0065   11A4             ; 3.6(15) - Outhole: Set when ball enters outhole, cleared when ejected to shooter
0066   11A4             ; 3.7(16)
0067   11A4             ; 3.8(17)
0068   11A4             ; 4.1(18)
0069   11A4             ; 4.2(19)
0070   11A4             ; 4.3(1A) - Lower Loop Switch: This bit is set for a number of cycles looking for the upper loop
0071   11A4             ; 4.4(1B) - Upper Loop Switch: This bit is set for a number of cycles looking for the lower loop
0072   11A4             ; 4.5(1C) -
0073   11A4             ; 4.6(1D) -
0074   11A4             ; 4.7(1E) - Playfield Entry Flag
0075   11A4             ; 4.8(1F) - Multiball Flag: Set when two balls are in play?
0076   11A4             ; 5.1(20) - Replay has been awarded if set
0077   11A4             ; 5.2(21)
0078   11A4             ; 5.3(22) - Fancy Bell Active
0079   11A4             ; 5.4(23)
0080   11A4             ; 5.5(24)
0081   11A4             ; 5.6(25)
0082   11A4             ; 5.7(26)
0083   11A4             ; 5.8(27) - Set when timer counting down
0084   11A4             ; 6.1(28)
0085   11A4             ; 6.2(29)
0086   11A4             ; 6.3(2A)
0087   11A4             ; 6.4(2B)
0088   11A4             ; 6.5(2C)
0089   11A4             ; 6.6(2D) - Left Magnet Active
0090   11A4             ; 6.7(2E) - Right Magnet Active
0091   11A4             ; 6.8(2F)
0092   11A4             ; 7.1(30)
0093   11A4             ; 7.2(31)
0094   11A4             ; 7.3(32)
0095   11A4             ; 7.4(33)
0096   11A4             ; 7.5(34)
0097   11A4             ; 7.6(35)
0098   11A4             ; 7.7(36)
0099   11A4             ; 7.8(37)
0100   11A4             ; 8.1(38)
0101   11A4             ; 8.2(39)
0102   11A4             ; 8.3(3A)
0103   11A4             ; 8.4(3B)
0104   11A4             ; 8.5(3C)
0105   11A4             ; 8.6(3D)
0106   11A4             ; 8.7(3E)
0107   11A4             ; 8.8(3F)
0108   11A4             ;
0109   11A4             ;*************************************
0110   11A4             ;* Thread ID's
0111   11A4             ;*************************************
0112   11A4             ;* $01 - Magnet Threads
0113   11A4             ;* $10 - Eject Switches
0114   11A4             ;* $20 - Extra Kick
0115   11A4             ;* $30 - Upper Drop Target
0116   11A4             ;* $43 - Attract Mode
0117   11A4             ;* $50 - Multiplier Loop
0118   11A4             ;* $60 - Lock Lit
0119   11A4             ;* $70 - Right Drop Target Timer
0120   11A4             ;* $80 -
0121   11A4             ;* $90 - Lower Loop Switch
0122   11A4             ;* $A0 - Min Tilt
0123   11A4             ;* $B0 - Fancy MB
0124   11A4             ;* $C0 - Ballshooter
0125   11A4             ;* $D0 - 
0126   11A4             ;* $E0 - Backgroud Sound
0127   11A4             ;* $F0 - 
0128   11A4             ;*
0129   11A4             ;*
0130   11A4             ;*
0131   11A4             ;*************************************
0132   11A4             ;* Define Our Solenoids and the
0133   11A4             ;* time they should be on for each
0134   11A4             ;* trigger.
0135   11A4             ;*************************************
0136   11A4             outhole_on        .equ	$00+SOLENOID_ON_2_CYCLES
0137   11A4             outhole_off       .equ	$00+SOLENOID_OFF
0138   11A4             trough_on         .equ	$01+SOLENOID_ON_2_CYCLES
0139   11A4             trough_off        .equ	$01+SOLENOID_OFF
0140   11A4             gi_on	            .equ	$02+SOLENOID_ON_LATCH
0141   11A4             gi_off            .equ  $02+SOLENOID_OFF
0142   11A4             dtleft_on         .equ	$03+SOLENOID_ON_3_CYCLES
0143   11A4             dtleft_off        .equ	$03+SOLENOID_OFF
0144   11A4             dtright_on        .equ	$04+SOLENOID_ON_3_CYCLES
0145   11A4             dtright_off       .equ	$04+SOLENOID_OFF
0146   11A4             buzzer_on         .equ	$05+SOLENOID_ON_LATCH
0147   11A4             buzzer_off        .equ	$05+SOLENOID_OFF
0148   11A4             lowereject_on     .equ	$06+SOLENOID_ON_2_CYCLES
0149   11A4             lowereject_off    .equ	$06+SOLENOID_OFF
0150   11A4             uppereject_on     .equ	$07+SOLENOID_ON_2_CYCLES
0151   11A4             uppereject_off    .equ	$07+SOLENOID_OFF
0152   11A4             dt1_on	      .equ	$08+SOLENOID_ON_2_CYCLES
0153   11A4             dt1_off 	      .equ	$08+SOLENOID_OFF
0154   11A4             dt2_on            .equ	$09+SOLENOID_ON_2_CYCLES
0155   11A4             dt2_off           .equ	$09+SOLENOID_OFF
0156   11A4             dt3_on            .equ	$0A+SOLENOID_ON_2_CYCLES
0157   11A4             dt3_off    	      .equ	$0A+SOLENOID_OFF
0158   11A4             dt4_on	      .equ	$0B+SOLENOID_ON_2_CYCLES
0159   11A4             dt4_off	      .equ	$0B+SOLENOID_OFF
0160   11A4             dt5_on	      .equ	$0C+SOLENOID_ON_2_CYCLES
0161   11A4             dt5_off	      .equ	$0C+SOLENOID_OFF
0162   11A4             dtrelease_on	.equ	$0D+SOLENOID_ON_3_CYCLES
0163   11A4             dtrelease_off     .equ	$0D+SOLENOID_OFF
0164   11A4             bell_on_short     .equ	$0E+SOLENOID_ON_6_CYCLES
0165   11A4             bell_on	      .equ	$0E+SOLENOID_ON_LATCH
0166   11A4             bell_off	      .equ	$0E+SOLENOID_OFF
0167   11A4             minikick_on       .equ	$13+SOLENOID_ON_1_CYCLES
0168   11A4             minikick_on_hard  .equ	$13+SOLENOID_ON_2_CYCLES
0169   11A4             minikick_off      .equ	$13+SOLENOID_OFF
0170   11A4             leftmag_on        .equ	$14+SOLENOID_ON_LATCH
0171   11A4             leftmag_off       .equ	$14+SOLENOID_OFF
0172   11A4             rightmag_on       .equ	$15+SOLENOID_ON_LATCH
0173   11A4             rightmag_off      .equ	$15+SOLENOID_OFF
0174   11A4             flippers_on       .equ	$18+SOLENOID_ON_LATCH
0175   11A4             flippers_off      .equ	$18+SOLENOID_OFF
0176   11A4             ;******************************************************
0177   11A4             #define     BIGROM       1
0178   11A4             
0179   11A4             #IF emulate
0180   8000             	.org	$8000
0181   8000             #ENDIF
0182   8000 55          	.db $55
0183   8001             		
0184   8001             #ifdef BIGROM
0185   D000             	.org $d000
0186   D000~            #else
0187   D000~            	.org $d800
0188   D000             #endif
0189   D000             
0190   D000             ;******************************************************
0191   D000             ;* Lamp Animation Data:  If minus goto next lamp 
0192   D000             ;*                       immediately, if not, wait 2 IRQ's)
0193   D000             ;******************************************************
0194   D000             ani_bt_data
0195   D000 199516BCBDBE	.db	$19,$95,$16,$BC,$BD,$BE,$3F,$93,$14,$B0,$87,$26,$B1,$88,$27,$B2
0195   D006 3F9314B08726B18827B2
0196   D010 8928B38A29B4	.db	$89,$28,$B3,$8A,$29,$B4,$8B,$2A,$35,$36,$37,$B8,$BA,$BB,$1C,$B9
0196   D016 8B2A353637B8BABB1CB9
0197   D020 1218911D2B1E	.db	$12,$18,$91,$1D,$2B,$1E,$1E,$1E,$90,$2D,$A0,$A1,$A2,$A3,$24,$8F
0197   D026 1E1E902DA0A1A2A3248F
0198   D030 8E 8D 0C 00 	.db	$8E,$8D,$0C,$00
0199   D034             	
0200   D034             ani_tb_data
0201   D034 8C8D8E0FA4A3	.db	$8C,$8D,$8E,$0F,$A4,$A3,$A2,$A1,$20,$AD,$10,$10,$10,$1E,$2B,$9D
0201   D03A A2A120AD1010101E2B9D
0202   D044 111892399CBB	.db	$11,$18,$92,$39,$9C,$BB,$BA,$38,$37,$36,$35,$AA,$8B,$34,$A9,$8A
0202   D04A BA38373635AA8B34A98A
0203   D054 33A88932A788	.db	$33,$A8,$89,$32,$A7,$88,$31,$A6,$87,$30,$94,$13,$BF,$BE,$BD,$3C
0203   D05A 31A687309413BFBEBD3C
0204   D064 96 15 19 00 	.db	$96,$15,$19,$00
0205   D068             
0206   D068             ;******************************************************
0207   D068             ;* Lamp Animation Code
0208   D068             ;******************************************************
0209   D068 86 20       ani_bottop	ldaa	#$20
0210   D06A 9A 1F       		oraa	$1F
0211   D06C 97 1F       		staa	$1F
0212   D06E             		;jsr  macro_start
0213   D06E             		;BITON_($7D)
0214   D06E             		;EXE_
0215   D06E CE CF FF    			ldx  #ani_bt_data-1
0216   D071 BD D0 9A    			jsr  lamp_str_on
0217   D074 CE CF FF    			ldx  #ani_bt_data-1
0218   D077 BD D0 B1    			jsr  lamp_str_off
0219   D07A             			
0220   D07A 86 DF       		ldaa	#$DF
0221   D07C 94 1F       		anda	$1F
0222   D07E 97 1F       		staa	$1F
0223   D080             		;EXEEND_
0224   D080             		;BITOFF_($7D)
0225   D080             		;MRTS_
0226   D080 39          		rts
0227   D081             		
0228   D081 86 20       ani_topbot	ldaa	#$20
0229   D083 9A 1F       		oraa	$1F
0230   D085 97 1F       		staa	$1F
0231   D087             		;jsr  macro_start
0232   D087             		;BITON_($7D)
0233   D087             		;EXE_
0234   D087 CE D0 33    			ldx  #ani_tb_data-1
0235   D08A BD D0 9A    			jsr  lamp_str_on
0236   D08D CE D0 33    			ldx  #ani_tb_data-1
0237   D090 BD D0 B1    			jsr  lamp_str_off
0238   D093 86 DF       		ldaa	#$DF
0239   D095 94 1F       		anda	$1F
0240   D097 97 1F       		staa	$1F
0241   D099             		;EXEEND_
0242   D099             		;BITOFF_($7D)
0243   D099             		;MRTS_
0244   D099 39          		rts
0245   D09A             	
0246   D09A             ;*****************************************************	
0247   D09A             ;* Turn on Lamp String: 
0248   D09A             ;*****************************************************
0249   D09A             lamp_str_on	
0250   D09A             		begin
0250   D09A             
0251   D09A             			begin
0251   D09A             
0252   D09A 08          				inx  
0253   D09B E6 00       				ldab $00,X
0254   D09D 27 11       				beq  lamp_str_rts
0255   D09F 17          				tba  
0256   D0A0 84 7F       				anda #$7F
0257   D0A2 DF 9E       				stx  temp3
0258   D0A4 BD F1 8D    				jsr  lamp_on_1	;Turn on lamp?
0259   D0A7 5D          				tstb 
0260   D0A8             			plend
0260   D0A8             
0260   D0A8             
0260   D0A8~            			plend
0260   D0A8~            			plend
0260   D0A8~            			plend
0260   D0A8             
0260   D0A8 2B F0       
0260   D0AA             
0260   D0AA~            			plend
0260   D0AA~            			plend
0260   D0AA             
0261   D0AA BD EA 2F    			jsr  addthread	;Loop it with delay of 2 IRQ's
0262   D0AD 01          			.db  $01    
0263   D0AE             		loopend
0263   D0AE             
0263   D0AE             
0263   D0AE~            		loopend
0263   D0AE~            		loopend
0263   D0AE~            		loopend
0263   D0AE             
0263   D0AE 20 EA       
0263   D0B0             
0263   D0B0~            		loopend
0263   D0B0~            		loopend
0263   D0B0             
0264   D0B0             lamp_str_rts
0265   D0B0 39          		rts
0266   D0B1             
0267   D0B1             ;*****************************************************
0268   D0B1             ;* Turn off Lamp String:
0269   D0B1             ;*****************************************************
0270   D0B1             lamp_str_off	
0271   D0B1             		begin
0271   D0B1             
0272   D0B1             			begin
0272   D0B1             
0273   D0B1 08          				inx  
0274   D0B2 E6 00       				ldab $00,X
0275   D0B4 27 FA       				beq  lamp_str_rts
0276   D0B6 17          				tba  
0277   D0B7 84 7F       				anda #$7F
0278   D0B9 DF 9E       				stx  temp3
0279   D0BB BD F1 92    				jsr  lamp_off_1	;Turn off lamp?
0280   D0BE 5D          				tstb 
0281   D0BF             			plend
0281   D0BF             
0281   D0BF             
0281   D0BF~            			plend
0281   D0BF~            			plend
0281   D0BF~            			plend
0281   D0BF             
0281   D0BF 2B F0       
0281   D0C1             
0281   D0C1~            			plend
0281   D0C1~            			plend
0281   D0C1             
0282   D0C1 BD EA 2F    			jsr  addthread	;Loop it with delay of 2 IRQ's
0283   D0C4 01          			.db  $01   
0284   D0C5             		loopend
0284   D0C5             
0284   D0C5             
0284   D0C5~            		loopend
0284   D0C5~            		loopend
0284   D0C5~            		loopend
0284   D0C5             
0284   D0C5 20 EA       
0284   D0C7             
0284   D0C7~            		loopend
0284   D0C7~            		loopend
0284   D0C7             
0285   D0C7             
0286   D0C7             ;******************************************************
0287   D0C7             ;* FancyBell - This is the ring pattern that jungle 
0288   D0C7             ;*             Lord plays on replays. It is the standard
0289   D0C7             ;*             
0290   D0C7             ;*             Shave-and-a-hair-cut
0291   D0C7             ;*
0292   D0C7             ;*             pattern...
0293   D0C7             ;******************************************************
0294   D0C7 BD F3 AB    fancybell		jsr	macro_start
0295   D0CA             			PRI_($05)				;Priority=#05
0295   D0CA 52 05       
0296   D0CC             			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0296   D0CC             
0296   D0CC             
0296   D0CC             
0296   D0CC 5AFCFFD8F2F0
0296   D0D2 00FB
0296   D0D4~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0296   D0D4~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0296   D0D4~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0296   D0D4~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0296   D0D4~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0296   D0D4~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0296   D0D4             
0297   D0D4             				SOL_(bell_on_short)	      ;Turn ON Sol#15:bell
0297   D0D4 31 CE       
0298   D0D6             			ENDIF_
0298   D0D6             
0298   D0D6             
0298   D0D6             
0298   D0D6             
0298   D0D6             
0298   D0D6~            			ENDIF_
0298   D0D6~            			ENDIF_
0298   D0D6             
0298   D0D6~            			ENDIF_
0298   D0D6~            			ENDIF_
0298   D0D6             
0298   D0D3             
0298   D0D3 02          
0298   D0D4             
0298   D0D4             
0298   D0D4~            			ENDIF_
0298   D0D4~            			ENDIF_
0298   D0D4~            			ENDIF_
0298   D0D4~            			ENDIF_
0298   D0D4~            			ENDIF_
0298   D0D4             
0298   D0D6             
0298   D0D6~            			ENDIF_
0298   D0D6~            			ENDIF_
0298   D0D6             
0299   D0D6             			BITON_($E0,$62)			;Turn ON: Bit#20, Bit#22
0299   D0D6             
0299   D0D6 10 E0 62    
0300   D0D9             			JSRR_(gi_bell_long)		
0300   D0D9~            			JSRR_(gi_bell_long)		
0300   D0D9~            			JSRR_(gi_bell_long)		
0300   D0D9             
0300   D0D9~            			JSRR_(gi_bell_long)		
0300   D0D9~            			JSRR_(gi_bell_long)		
0300   D0D9             
0300   D0D9             
0300   D0D9 90          
0300   D0DA 0E          
0301   D0DB             			JSRR_(gi_bell_long)		
0301   D0DB~            			JSRR_(gi_bell_long)		
0301   D0DB~            			JSRR_(gi_bell_long)		
0301   D0DB             
0301   D0DB~            			JSRR_(gi_bell_long)		
0301   D0DB~            			JSRR_(gi_bell_long)		
0301   D0DB             
0301   D0DB             
0301   D0DB 90          
0301   D0DC 0C          
0302   D0DD             			JSRR_(gi_bell_short)		
0302   D0DD~            			JSRR_(gi_bell_short)		
0302   D0DD~            			JSRR_(gi_bell_short)		
0302   D0DD             
0302   D0DD~            			JSRR_(gi_bell_short)		
0302   D0DD~            			JSRR_(gi_bell_short)		
0302   D0DD             
0302   D0DD             
0302   D0DD 90          
0302   D0DE 15          
0303   D0DF             			JSRR_(gi_bell_long)		
0303   D0DF~            			JSRR_(gi_bell_long)		
0303   D0DF~            			JSRR_(gi_bell_long)		
0303   D0DF             
0303   D0DF~            			JSRR_(gi_bell_long)		
0303   D0DF~            			JSRR_(gi_bell_long)		
0303   D0DF             
0303   D0DF             
0303   D0DF 90          
0303   D0E0 08          
0304   D0E1             			JSRR_(gi_bell_long)		
0304   D0E1~            			JSRR_(gi_bell_long)		
0304   D0E1~            			JSRR_(gi_bell_long)		
0304   D0E1             
0304   D0E1~            			JSRR_(gi_bell_long)		
0304   D0E1~            			JSRR_(gi_bell_long)		
0304   D0E1             
0304   D0E1             
0304   D0E1 90          
0304   D0E2 06          
0305   D0E3             			SLEEP_(24)
0305   D0E3~            			SLEEP_(24)
0305   D0E3~            			SLEEP_(24)
0305   D0E3             
0305   D0E3 53 18       
0305   D0E5             
0306   D0E5             			;JSRR_(buzz_on_inc)			
0307   D0E5             			;SLEEP_(12)
0308   D0E5             			;JSRR_(buzz_off_dec)			
0309   D0E5             			;SLEEP_(8)
0310   D0E5             			;JSRR_(buzz_on_inc)			
0311   D0E5             			;SLEEP_(12)
0312   D0E5             			;JSRR_(buzz_off_dec)			
0313   D0E5             			BITOFF_($62)			;Turn OFF: Bit#22
0313   D0E5             
0313   D0E5 11 62       
0314   D0E7             			SSND_($11)				;Sound #11
0314   D0E7             
0314   D0E7 F1          
0314   D0E8~            			SSND_($11)				;Sound #11
0314   D0E8~            			SSND_($11)				;Sound #11
0314   D0E8~            			SSND_($11)				;Sound #11
0314   D0E8             
0315   D0E8             			KILL_					;Remove This Thread
0315   D0E8 03          
0316   D0E9             
0317   D0E9             gi_bell_long	JSRR_(gi_off_inc)			
0317   D0E9~            gi_bell_long	JSRR_(gi_off_inc)			
0317   D0E9~            gi_bell_long	JSRR_(gi_off_inc)			
0317   D0E9             
0317   D0E9~            gi_bell_long	JSRR_(gi_off_inc)			
0317   D0E9~            gi_bell_long	JSRR_(gi_off_inc)			
0317   D0E9             
0317   D0E9             
0317   D0E9 92          
0317   D0EA 88          
0318   D0EB             			JSRR_(bell_on_inc)		
0318   D0EB~            			JSRR_(bell_on_inc)		
0318   D0EB~            			JSRR_(bell_on_inc)		
0318   D0EB             
0318   D0EB~            			JSRR_(bell_on_inc)		
0318   D0EB~            			JSRR_(bell_on_inc)		
0318   D0EB             
0318   D0EB             
0318   D0EB 94          
0318   D0EC 95          
0319   D0ED             			SLEEP_(12)
0319   D0ED             
0319   D0ED 7C          
0319   D0EE~            			SLEEP_(12)
0319   D0EE~            			SLEEP_(12)
0319   D0EE             
0320   D0EE             gi_bell_com		JSRR_(bell_off_dec)		
0320   D0EE~            gi_bell_com		JSRR_(bell_off_dec)		
0320   D0EE~            gi_bell_com		JSRR_(bell_off_dec)		
0320   D0EE             
0320   D0EE~            gi_bell_com		JSRR_(bell_off_dec)		
0320   D0EE~            gi_bell_com		JSRR_(bell_off_dec)		
0320   D0EE             
0320   D0EE             
0320   D0EE 94          
0320   D0EF 9F          
0321   D0F0             			JSRR_(gi_on_dec)			
0321   D0F0~            			JSRR_(gi_on_dec)			
0321   D0F0~            			JSRR_(gi_on_dec)			
0321   D0F0             
0321   D0F0~            			JSRR_(gi_on_dec)			
0321   D0F0~            			JSRR_(gi_on_dec)			
0321   D0F0             
0321   D0F0             
0321   D0F0 92          
0321   D0F1 72          
0322   D0F2             			SLEEP_(6)
0322   D0F2             
0322   D0F2 76          
0322   D0F3~            			SLEEP_(6)
0322   D0F3~            			SLEEP_(6)
0322   D0F3             
0323   D0F3             			MRTS_					;Macro RTS, Save MRA,MRB
0323   D0F3 02          
0324   D0F4             
0325   D0F4             gi_bell_short	JSRR_(gi_off_inc)			
0325   D0F4~            gi_bell_short	JSRR_(gi_off_inc)			
0325   D0F4~            gi_bell_short	JSRR_(gi_off_inc)			
0325   D0F4             
0325   D0F4~            gi_bell_short	JSRR_(gi_off_inc)			
0325   D0F4~            gi_bell_short	JSRR_(gi_off_inc)			
0325   D0F4             
0325   D0F4             
0325   D0F4 92          
0325   D0F5 7D          
0326   D0F6             			JSRR_(bell_on_inc)		
0326   D0F6~            			JSRR_(bell_on_inc)		
0326   D0F6~            			JSRR_(bell_on_inc)		
0326   D0F6             
0326   D0F6~            			JSRR_(bell_on_inc)		
0326   D0F6~            			JSRR_(bell_on_inc)		
0326   D0F6             
0326   D0F6             
0326   D0F6 94          
0326   D0F7 8A          
0327   D0F8             			SLEEP_(6)
0327   D0F8             
0327   D0F8 76          
0327   D0F9~            			SLEEP_(6)
0327   D0F9~            			SLEEP_(6)
0327   D0F9             
0328   D0F9             			JMPR_(gi_bell_com)
0328   D0F9~            			JMPR_(gi_bell_com)
0328   D0F9~            			JMPR_(gi_bell_com)
0328   D0F9             
0328   D0F9~            			JMPR_(gi_bell_com)
0328   D0F9~            			JMPR_(gi_bell_com)
0328   D0F9             
0328   D0F9             
0328   D0F9 8F          
0328   D0FA F3          
0329   D0FB             
0330   D0FB             ;******************************************************
0331   D0FB             ;* System Coin Accepted Hook - This will ring the bell
0332   D0FB             ;*                             if bit29 is 0
0333   D0FB             ;******************************************************					
0334   D0FB BD F3 AB    hook_coin		jsr	macro_start		
0335   D0FE             			IFEQR_($69)                   ;BNER_BIT#29
0335   D0FE             
0335   D0FE             
0335   D0FE             
0335   D0FE 5B 69 00    
0335   D101~            			IFEQR_($69)                   ;BNER_BIT#29
0335   D101~            			IFEQR_($69)                   ;BNER_BIT#29
0335   D101~            			IFEQR_($69)                   ;BNER_BIT#29
0335   D101~            			IFEQR_($69)                   ;BNER_BIT#29
0335   D101~            			IFEQR_($69)                   ;BNER_BIT#29
0335   D101~            			IFEQR_($69)                   ;BNER_BIT#29
0335   D101             
0336   D101             			      SOL_(bell_on_short)		;Turn ON Sol#15:bell
0336   D101 31 CE       
0337   D103             			      SLEEP_(20)
0337   D103~            			      SLEEP_(20)
0337   D103~            			      SLEEP_(20)
0337   D103             
0337   D103 53 14       
0337   D105             
0338   D105             			ENDIF_			
0338   D105             
0338   D105             
0338   D105             
0338   D105             
0338   D105             
0338   D105~            			ENDIF_			
0338   D105~            			ENDIF_			
0338   D105             
0338   D105~            			ENDIF_			
0338   D105~            			ENDIF_			
0338   D105             
0338   D100             
0338   D100 04          
0338   D101             
0338   D101             
0338   D101~            			ENDIF_			
0338   D101~            			ENDIF_			
0338   D101~            			ENDIF_			
0338   D101~            			ENDIF_			
0338   D101~            			ENDIF_			
0338   D101             
0338   D105             
0338   D105~            			ENDIF_			
0338   D105~            			ENDIF_			
0338   D105             
0339   D105                               CPUX_					;Resume CPU Execution
0339   D105 04          
0340   D106 39          			rts	
0341   D107             
0342   D107             ;********************************************************
0343   D107             ;* Outlane Switches:
0344   D107             ;********************************************************			
0345   D107             sw_leftdrain
0346   D107             sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D107 42          
0346   D108             
0346   D108~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D108~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D108             
0346   D108~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D108~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D108             
0346   D108~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D108~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D108             
0346   D108             
0346   D108 2B          
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109~            sw_rightdrain	POINTS_(5,1000)			;5000 Points/Digit Sound
0346   D109             
0346   D109             
0346   D109             
0346   D109             
0347   D109             			EXE_
0347   D109             
0347   D109 44          
0348   D10A C6 02       				ldab	#$02
0349   D10C             			EXEEND_
0349   D10C             
0349   D10C             
0349   D10C             
0349   D10C             
0349   D10C~            			EXEEND_
0349   D10C~            			EXEEND_
0349   D10C             
0349   D109             
0349   D109 44          
0349   D10A             
0349   D10C             
0349   D10C~            			EXEEND_
0349   D10C~            			EXEEND_
0349   D10C             
0350   D10C                   		JSRDR_(add_bonus_m)			
0350   D10C~                  		JSRDR_(add_bonus_m)			
0350   D10C~                  		JSRDR_(add_bonus_m)			
0350   D10C             
0350   D10C~                  		JSRDR_(add_bonus_m)			
0350   D10C~                  		JSRDR_(add_bonus_m)			
0350   D10C             
0350   D10C             
0350   D10C A4          
0350   D10D E5          
0351   D10E             			IFEQR_($E0)			      ;BNER_RAM$00
0351   D10E             
0351   D10E             
0351   D10E             
0351   D10E 5B E0 00    
0351   D111~            			IFEQR_($E0)			      ;BNER_RAM$00
0351   D111~            			IFEQR_($E0)			      ;BNER_RAM$00
0351   D111~            			IFEQR_($E0)			      ;BNER_RAM$00
0351   D111~            			IFEQR_($E0)			      ;BNER_RAM$00
0351   D111~            			IFEQR_($E0)			      ;BNER_RAM$00
0351   D111~            			IFEQR_($E0)			      ;BNER_RAM$00
0351   D111             
0352   D111                   			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
0352   D111             
0352   D111 15 00       
0353   D113                   			EXE_
0353   D113             
0353   D113 44          
0354   D114 CE 01 36          			      ldx	#aud_game3			;Increment Drain Shield Counter
0355   D117 BD F7 7F          			      jsr	ptrx_plus_1
0356   D11A                   			EXEEND_
0356   D11A             
0356   D11A             
0356   D11A             
0356   D11A             
0356   D11A~                  			EXEEND_
0356   D11A~                  			EXEEND_
0356   D11A             
0356   D113             
0356   D113 48          
0356   D114             
0356   D11A             
0356   D11A~                  			EXEEND_
0356   D11A~                  			EXEEND_
0356   D11A             
0357   D11A                   			SSND_($13)				;Sound #13
0357   D11A             
0357   D11A F3          
0357   D11B~                  			SSND_($13)				;Sound #13
0357   D11B~                  			SSND_($13)				;Sound #13
0357   D11B~                  			SSND_($13)				;Sound #13
0357   D11B             
0358   D11B                   			RCLR1_($08)				;Effect: Range #08
0358   D11B             
0358   D11B 29 08       
0359   D11D                   			JSRDR_(alllamps_off)		
0359   D11D~                  			JSRDR_(alllamps_off)		
0359   D11D~                  			JSRDR_(alllamps_off)		
0359   D11D             
0359   D11D~                  			JSRDR_(alllamps_off)		
0359   D11D~                  			JSRDR_(alllamps_off)		
0359   D11D             
0359   D11D             
0359   D11D A4          
0359   D11E 45          
0360   D11F                   			ADDRAM_(rega,$40)			;RAM$00+=$40
0360   D11F~                  			ADDRAM_(rega,$40)			;RAM$00+=$40
0360   D11F~                  			ADDRAM_(rega,$40)			;RAM$00+=$40
0360   D11F             
0360   D11F B0 40       
0361   D121                   			BITONP2_(rega)			;Turn ON Lamp/Bit @RAM:00
0361   D121             
0361   D121 24 00       
0362   D123                   			ADDRAM_(rega,$F8)			;RAM$00+=$F8
0362   D123~                  			ADDRAM_(rega,$F8)			;RAM$00+=$F8
0362   D123~                  			ADDRAM_(rega,$F8)			;RAM$00+=$F8
0362   D123             
0362   D123 B0 F8       
0363   D125                   			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
0363   D125             
0363   D125 15 00       
0364   D127                   			BITOFF2_($1A)			;Turn OFF: Lamp#1A(keepshooting)
0364   D127             
0364   D127 21 1A       
0365   D129                   			BITFL_($1A)				;Flash: Lamp#1A(keepshooting)
0365   D129             
0365   D129 13 1A       
0366   D12B                   			BITON_($66)				;Turn ON: Bit#26
0366   D12B             
0366   D12B 10 66       
0367   D12D                   			SOL_(flippers_on)             ;Turn ON Sol#25:flippers?
0367   D12D 31 F8       
0368   D12F                   			JSRR_(gi_off_inc)			
0368   D12F~                  			JSRR_(gi_off_inc)			
0368   D12F~                  			JSRR_(gi_off_inc)			
0368   D12F             
0368   D12F~                  			JSRR_(gi_off_inc)			
0368   D12F~                  			JSRR_(gi_off_inc)			
0368   D12F             
0368   D12F             
0368   D12F 92          
0368   D130 42          
0369   D131                   			EXE_				      
0369   D131             
0369   D131 44          
0370   D132 7C 00 C8          			      inc	flag_tilt
0371   D135                   			EXEEND_
0371   D135             
0371   D135             
0371   D135             
0371   D135             
0371   D135~                  			EXEEND_
0371   D135~                  			EXEEND_
0371   D135             
0371   D131             
0371   D131 45          
0371   D132             
0371   D135             
0371   D135~                  			EXEEND_
0371   D135~                  			EXEEND_
0371   D135             
0372   D135                   		ELSE_
0372   D135             
0372   D135             
0372   D135             
0372   D135             
0372   D110             
0372   D110             
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110             
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110~                  		ELSE_
0372   D110             
0372   D110             
0372   D110 26          
0372   D135             
0372   D135             
0372   D135~                  		ELSE_
0372   D135~                  		ELSE_
0372   D135             
0372   D135~                  		ELSE_
0372   D135~                  		ELSE_
0372   D135             
0372   D135             
0372   D135 80          
0372   D136 00          
0372   D137             
0372   D137             
0372   D137             
0372   D137~                  		ELSE_
0372   D137~                  		ELSE_
0372   D137             
0372   D137~                  		ELSE_
0372   D137~                  		ELSE_
0372   D137             
0373   D137                   			JSRR_(gi_off_inc)
0373   D137~                  			JSRR_(gi_off_inc)
0373   D137~                  			JSRR_(gi_off_inc)
0373   D137             
0373   D137~                  			JSRR_(gi_off_inc)
0373   D137~                  			JSRR_(gi_off_inc)
0373   D137             
0373   D137             
0373   D137 92          
0373   D138 3A          
0374   D139                   			;no drainshield, see if they were magna-saving...
0375   D139                   			IFEQR_($FB,$F8,$30,$F8,$31)	;BNER_(SW#49 || SW#50) 
0375   D139             
0375   D139             
0375   D139             
0375   D139 5BFBF830F831
0375   D13F FC
0375   D140~                  			IFEQR_($FB,$F8,$30,$F8,$31)	;BNER_(SW#49 || SW#50) 
0375   D140~                  			IFEQR_($FB,$F8,$30,$F8,$31)	;BNER_(SW#49 || SW#50) 
0375   D140~                  			IFEQR_($FB,$F8,$30,$F8,$31)	;BNER_(SW#49 || SW#50) 
0375   D140~                  			IFEQR_($FB,$F8,$30,$F8,$31)	;BNER_(SW#49 || SW#50) 
0375   D140~                  			IFEQR_($FB,$F8,$30,$F8,$31)	;BNER_(SW#49 || SW#50) 
0375   D140~                  			IFEQR_($FB,$F8,$30,$F8,$31)	;BNER_(SW#49 || SW#50) 
0375   D140             
0376   D140                   				;yes, they were, make them feel bad
0377   D140                   				EXE_
0377   D140             
0377   D140 44          
0378   D141 BD FB 80          					jsr	get_random
0379   D144 84 07       						anda	#$07
0380   D146             						ifeq
0380   D146             
0380   D146 26 FE       
0381   D148             							;Do the BlackKnight Laugh
0382   D148 86 05       							ldaa	#$05
0383   D14A             						else
0383   D14A             
0383   D14A             
0383   D14A             
0383   D14A             
0383   D147             
0383   D147             
0383   D147             
0383   D147~            						else
0383   D147~            						else
0383   D147~            						else
0383   D147~            						else
0383   D147             
0383   D147~            						else
0383   D147~            						else
0383   D147~            						else
0383   D147~            						else
0383   D147             
0383   D147             
0383   D147 04          
0383   D14A             
0383   D14A 20 FE       
0383   D14C             
0383   D14C             
0383   D14C             
0383   D14C~            						else
0383   D14C~            						else
0383   D14C~            						else
0383   D14C~            						else
0383   D14C~            						else
0383   D14C             
0383   D14C~            						else
0383   D14C~            						else
0383   D14C             
0383   D14C~            						else
0383   D14C~            						else
0383   D14C             
0384   D14C             							;Regular JL speech
0385   D14C 86 04       							ldaa	#$04
0386   D14E             						endif
0386   D14E             
0386   D14E             
0386   D14E             
0386   D14E             
0386   D14E             
0386   D14E~            						endif
0386   D14E~            						endif
0386   D14E             
0386   D14E~            						endif
0386   D14E~            						endif
0386   D14E             
0386   D14B             
0386   D14B 02          
0386   D14C             
0386   D14C             
0386   D14C~            						endif
0386   D14C~            						endif
0386   D14C~            						endif
0386   D14C             
0386   D14E             
0386   D14E~            						endif
0386   D14E~            						endif
0386   D14E             
0387   D14E             					EXEEND_
0387   D14E             
0387   D14E             
0387   D14E             
0387   D14E             
0387   D14E~            					EXEEND_
0387   D14E~            					EXEEND_
0387   D14E             
0387   D140             
0387   D140 4F          
0387   D141             
0387   D14E             
0387   D14E~            					EXEEND_
0387   D14E~            					EXEEND_
0387   D14E             
0388   D14E             					EXE_
0388   D14E             
0388   D14E 44          
0389   D14F BD D9 4D    						jsr	ext_snd
0390   D152             					EXEEND_
0390   D152             
0390   D152             
0390   D152             
0390   D152             
0390   D152~            					EXEEND_
0390   D152~            					EXEEND_
0390   D152             
0390   D14E             
0390   D14E 45          
0390   D14F             
0390   D152             
0390   D152~            					EXEEND_
0390   D152~            					EXEEND_
0390   D152             
0391   D152                   				;SETRAM_(rega,$04)
0392   D152                   				;JSRD_(ext_snd)
0393   D152                   			ELSE_
0393   D152             
0393   D152             
0393   D152             
0393   D152             
0393   D13F             
0393   D13F             
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F             
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F~                  			ELSE_
0393   D13F             
0393   D13F             
0393   D13F 14          
0393   D152             
0393   D152             
0393   D152~                  			ELSE_
0393   D152~                  			ELSE_
0393   D152             
0393   D152~                  			ELSE_
0393   D152~                  			ELSE_
0393   D152             
0393   D152             
0393   D152 80          
0393   D153 00          
0393   D154             
0393   D154             
0393   D154             
0393   D154~                  			ELSE_
0393   D154~                  			ELSE_
0393   D154             
0393   D154~                  			ELSE_
0393   D154~                  			ELSE_
0393   D154             
0394   D154                   				SSND_($18)
0394   D154             
0394   D154 F8          
0394   D155~                  				SSND_($18)
0394   D155~                  				SSND_($18)
0394   D155~                  				SSND_($18)
0394   D155             
0395   D155                   				;no, just show drain animation
0396   D155                   				RCLR1_($08)				;Effect: Range #08
0396   D155             
0396   D155 29 08       
0397   D157             					RSET1_($48)				;Effect: Range #08
0397   D157             
0397   D157 28 48       
0398   D159             					JSRD_(ani_topbot)	
0398   D159 57          
0398   D15A D0 81       
0399   D15C             					RCLR1_($48)				;Effect: Range #08
0399   D15C             
0399   D15C 29 48       
0400   D15E             					RCLR1_($08)				;Effect: Range #08
0400   D15E             
0400   D15E 29 08       
0401   D160                   			ENDIF_
0401   D160             
0401   D160             
0401   D160             
0401   D160             
0401   D160             
0401   D160~                  			ENDIF_
0401   D160~                  			ENDIF_
0401   D160             
0401   D160~                  			ENDIF_
0401   D160~                  			ENDIF_
0401   D160             
0401   D153             
0401   D153 0C          
0401   D154             
0401   D154             
0401   D154~                  			ENDIF_
0401   D154~                  			ENDIF_
0401   D154~                  			ENDIF_
0401   D154~                  			ENDIF_
0401   D154~                  			ENDIF_
0401   D154             
0401   D160             
0401   D160~                  			ENDIF_
0401   D160~                  			ENDIF_
0401   D160             
0402   D160                   			JSRR_(gi_on_dec)
0402   D160~                  			JSRR_(gi_on_dec)
0402   D160~                  			JSRR_(gi_on_dec)
0402   D160             
0402   D160~                  			JSRR_(gi_on_dec)
0402   D160~                  			JSRR_(gi_on_dec)
0402   D160             
0402   D160             
0402   D160 92          
0402   D161 02          
0403   D162             			ENDIF_
0403   D162             
0403   D162             
0403   D162             
0403   D162             
0403   D162             
0403   D162~            			ENDIF_
0403   D162~            			ENDIF_
0403   D162             
0403   D162~            			ENDIF_
0403   D162~            			ENDIF_
0403   D162             
0403   D136             
0403   D136 2B          
0403   D137             
0403   D137             
0403   D137~            			ENDIF_
0403   D137~            			ENDIF_
0403   D137~            			ENDIF_
0403   D137~            			ENDIF_
0403   D137~            			ENDIF_
0403   D137             
0403   D162             
0403   D162~            			ENDIF_
0403   D162~            			ENDIF_
0403   D162             
0404   D162             			KILL_					;Remove This Thread
0404   D162 03          
0405   D163             
0406   D163             
0407   D163             ;************************************************************************
0408   D163             ;* Left Drop Target Timer Thread:
0409   D163             ;************************************************************************
0410   D163 BD F3 AB    left_timer		jsr	macro_start
0411   D166             			EXE_				
0411   D166             
0411   D166 44          
0412   D167 BD E5 6B    			      jsr	get_lord			;Get Number of L-O-R-D lamps to go
0413   D16A 48          			      asla	
0414   D16B 8B 0D       			      adda	#$0D
0415   D16D C6 08       			      ldab	#$08
0416   D16F             			EXEEND_
0416   D16F             
0416   D16F             
0416   D16F             
0416   D16F             
0416   D16F~            			EXEEND_
0416   D16F~            			EXEEND_
0416   D16F             
0416   D166             
0416   D166 4A          
0416   D167             
0416   D16F             
0416   D16F~            			EXEEND_
0416   D16F~            			EXEEND_
0416   D16F             
0417   D16F             			BEGIN_
0417   D16F             
0418   D16F             				ADDRAM_(rega,-1)			;RAM$00-=1
0418   D16F~            				ADDRAM_(rega,-1)			;RAM$00-=1
0418   D16F~            				ADDRAM_(rega,-1)			;RAM$00-=1
0418   D16F             
0418   D16F B0 FF       
0419   D171             lt_outer_loop		BITON_($1C)		            ;Turn ON: Lamp#1C(dt_left)
0419   D171             
0419   D171 10 1C       
0420   D173             				SSND_($09)				;Sound #09
0420   D173             
0420   D173 E9          
0420   D174~            				SSND_($09)				;Sound #09
0420   D174~            				SSND_($09)				;Sound #09
0420   D174~            				SSND_($09)				;Sound #09
0420   D174             
0421   D174 60          				SLEEPI_(rega)				;Delay RAM$00
0422   D175             				BITOFF_($1C)			;Turn OFF: Lamp#1C(dt_left)
0422   D175             
0422   D175 11 1C       
0423   D177             				BEGIN_
0423   D177             
0424   D177 60          					SLEEPI_(rega)			;Delay RAM$00
0425   D178             				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D178             
0425   D178 5AFEF2F010FD
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E             
0425   D17E             
0425   D17E             
0425   D17E             
0425   D17E             
0425   D17E             
0425   D17E             
0425   D17D             
0425   D17D F9          
0425   D17E             
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E             
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0425   D17E             
0426   D17E             			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D17E             
0426   D17E 5BFCE003FE  
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183             
0426   D183             
0426   D183             
0426   D183             
0426   D183             
0426   D183             
0426   D183             
0426   D182             
0426   D182 EC          
0426   D183             
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183             
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0426   D183             
0427   D183             			ADDRAM_(regb,-1)			;RAM$01-=1
0427   D183~            			ADDRAM_(regb,-1)			;RAM$01-=1
0427   D183~            			ADDRAM_(regb,-1)			;RAM$01-=1
0427   D183             
0427   D183 B1 FF       
0428   D185             			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0428   D185             
0428   D185 5BFCE100E7  
0428   D18A~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0428   D18A~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0428   D18A~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0428   D18A~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0428   D18A~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0428   D18A~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0428   D18A             
0429   D18A             			BITON_($5D)				;Turn ON: Bit#1D
0429   D18A             
0429   D18A 10 5D       
0430   D18C             			SOL_(dtleft_on)               ;Turn ON Sol#4:dt_left
0430   D18C 31 63       
0431   D18E             			SLEEP_(48)
0431   D18E~            			SLEEP_(48)
0431   D18E~            			SLEEP_(48)
0431   D18E             
0431   D18E 53 30       
0431   D190             
0432   D190             			BITOFF_($DC,$DD,$1C)		;Turn OFF: Bit#1C, Bit#1D, Lamp#1C(dt_left)
0432   D190             
0432   D190 11 DC DD 1C 
0433   D194             			KILL_					;Remove This Thread
0433   D194 03          
0434   D195             
0435   D195             ;************************************************************************
0436   D195             ;* Right Drop Target Timer Thread:
0437   D195             ;************************************************************************
0438   D195 BD F3 AB    right_timer		jsr	macro_start
0439   D198             			PRI_($70)				;Priority=#70
0439   D198 52 70       
0440   D19A             			EXE_				
0440   D19A             
0440   D19A 44          
0441   D19B BD E5 6B    			      jsr	get_lord
0442   D19E 48          			      asla	
0443   D19F 8B 0D       			      adda	#$0D
0444   D1A1 C6 08       			      ldab	#$08
0445   D1A3             			EXEEND_
0445   D1A3             
0445   D1A3             
0445   D1A3             
0445   D1A3             
0445   D1A3~            			EXEEND_
0445   D1A3~            			EXEEND_
0445   D1A3             
0445   D19A             
0445   D19A 4A          
0445   D19B             
0445   D1A3             
0445   D1A3~            			EXEEND_
0445   D1A3~            			EXEEND_
0445   D1A3             
0446   D1A3             			BEGIN_
0446   D1A3             
0447   D1A3             				ADDRAM_(rega,-1)			;RAM$00-=1
0447   D1A3~            				ADDRAM_(rega,-1)			;RAM$00-=1
0447   D1A3~            				ADDRAM_(rega,-1)			;RAM$00-=1
0447   D1A3             
0447   D1A3 B0 FF       
0448   D1A5             rt_outer_loop		BITON_($18)				;Turn ON: Lamp#18(dt_right)
0448   D1A5             
0448   D1A5 10 18       
0449   D1A7             				SSND_($09)				;Sound #09
0449   D1A7             
0449   D1A7 E9          
0449   D1A8~            				SSND_($09)				;Sound #09
0449   D1A8~            				SSND_($09)				;Sound #09
0449   D1A8~            				SSND_($09)				;Sound #09
0449   D1A8             
0450   D1A8 60          				SLEEPI_(rega)			;Delay RAM$00
0451   D1A9             				BITOFF_($18)			;Turn OFF: Lamp#18(dt_right)
0451   D1A9             
0451   D1A9 11 18       
0452   D1AB             				BEGIN_
0452   D1AB             
0453   D1AB 60          					SLEEPI_(rega)			;Delay RAM$00
0454   D1AC             				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1AC             
0454   D1AC 5AFEF2F010FD
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2             
0454   D1B2             
0454   D1B2             
0454   D1B2             
0454   D1B2             
0454   D1B2             
0454   D1B2             
0454   D1B1             
0454   D1B1 F9          
0454   D1B2             
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2             
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0454   D1B2             
0455   D1B2             			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B2             
0455   D1B2 5BFCE003FE  
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7             
0455   D1B7             
0455   D1B7             
0455   D1B7             
0455   D1B7             
0455   D1B7             
0455   D1B7             
0455   D1B6             
0455   D1B6 EC          
0455   D1B7             
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7             
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0455   D1B7             
0456   D1B7             			ADDRAM_(regb,-1)			;RAM$01-=1
0456   D1B7~            			ADDRAM_(regb,-1)			;RAM$01-=1
0456   D1B7~            			ADDRAM_(regb,-1)			;RAM$01-=1
0456   D1B7             
0456   D1B7 B1 FF       
0457   D1B9             			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0457   D1B9             
0457   D1B9 5BFCE100E7  
0457   D1BE~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0457   D1BE~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0457   D1BE~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0457   D1BE~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0457   D1BE~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0457   D1BE~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0457   D1BE             
0458   D1BE             			BITON_($59)				;Turn ON: Bit#19
0458   D1BE             
0458   D1BE 10 59       
0459   D1C0             			SOL_(dtright_on)              ;Turn ON Sol#5:dt_right
0459   D1C0 31 64       
0460   D1C2             			SLEEP_(48)
0460   D1C2~            			SLEEP_(48)
0460   D1C2~            			SLEEP_(48)
0460   D1C2             
0460   D1C2 53 30       
0460   D1C4             
0461   D1C4             			BITOFF_($D8,$D9,$18)		;Turn OFF: Bit#18, Bit#19, Lamp#18(dt_right)
0461   D1C4             
0461   D1C4 11 D8 D9 18 
0462   D1C8             			KILL_					;Remove This Thread
0462   D1C8 03          
0463   D1C9             
0464   D1C9             ;**********************************************************
0465   D1C9             ;* Plunger Thread
0466   D1C9             ;**********************************************************
0467   D1C9             sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0467   D1C9             
0467   D1C9             
0467   D1C9             
0467   D1C9 5B F8 E0 FF 
0467   D1CD~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0467   D1CD~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0467   D1CD~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0467   D1CD~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0467   D1CD~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0467   D1CD~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0467   D1CD             
0468   D1CD             			      REMTHREADS_($F8,$C0)		;Remove Multiple Threads Based on Priority
0468   D1CD 55 F8 C0    
0469   D1D0             			      KILL_					;Remove This Thread
0469   D1D0 03          
0470   D1D1                               ENDIF_
0470   D1D1             
0470   D1D1             
0470   D1D1             
0470   D1D1             
0470   D1D1             
0470   D1D1~                              ENDIF_
0470   D1D1~                              ENDIF_
0470   D1D1             
0470   D1D1~                              ENDIF_
0470   D1D1~                              ENDIF_
0470   D1D1             
0470   D1CC             
0470   D1CC 04          
0470   D1CD             
0470   D1CD             
0470   D1CD~                              ENDIF_
0470   D1CD~                              ENDIF_
0470   D1CD~                              ENDIF_
0470   D1CD~                              ENDIF_
0470   D1CD~                              ENDIF_
0470   D1CD             
0470   D1D1             
0470   D1D1~                              ENDIF_
0470   D1D1~                              ENDIF_
0470   D1D1             
0471   D1D1                               EXE_
0471   D1D1             
0471   D1D1 44          
0472   D1D2             			      NEWTHREAD(bottop)		;Spawn the new thread for 12345 logic
0472   D1D2 CE D1 E9    
0472   D1D5 BD EA C4    
0473   D1D8             			EXEEND_
0473   D1D8             
0473   D1D8             
0473   D1D8             
0473   D1D8             
0473   D1D8~            			EXEEND_
0473   D1D8~            			EXEEND_
0473   D1D8             
0473   D1D1             
0473   D1D1 48          
0473   D1D2             
0473   D1D8             
0473   D1D8~            			EXEEND_
0473   D1D8~            			EXEEND_
0473   D1D8             
0474   D1D8 D9 1E                         RSND_($09,$1E)			;Sound #09(x30)
0475   D1DA             			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0475   D1DA             
0475   D1DA             
0475   D1DA             
0475   D1DA 5BFB505EFE  
0475   D1DF~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0475   D1DF~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0475   D1DF~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0475   D1DF~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0475   D1DF~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0475   D1DF~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0475   D1DF             
0476   D1DF             			      PRI_($C0)				;Priority=#C0
0476   D1DF 52 C0       
0477   D1E1             			      SLEEP_(255)
0477   D1E1~            			      SLEEP_(255)
0477   D1E1~            			      SLEEP_(255)
0477   D1E1             
0477   D1E1 53 FF       
0477   D1E3             
0478   D1E3             			      SLEEP_(129)
0478   D1E3~            			      SLEEP_(129)
0478   D1E3~            			      SLEEP_(129)
0478   D1E3             
0478   D1E3 53 81       
0478   D1E5             
0479   D1E5             			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0479   D1E5             
0479   D1E5 5A 5E 1A    
0479   D1E8~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0479   D1E8~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0479   D1E8~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0479   D1E8~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0479   D1E8~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0479   D1E8~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0479   D1E8             
0480   D1E8             			ENDIF_
0480   D1E8             
0480   D1E8             
0480   D1E8             
0480   D1E8             
0480   D1E8             
0480   D1E8~            			ENDIF_
0480   D1E8~            			ENDIF_
0480   D1E8             
0480   D1E8~            			ENDIF_
0480   D1E8~            			ENDIF_
0480   D1E8             
0480   D1DE             
0480   D1DE 09          
0480   D1DF             
0480   D1DF             
0480   D1DF~            			ENDIF_
0480   D1DF~            			ENDIF_
0480   D1DF~            			ENDIF_
0480   D1DF~            			ENDIF_
0480   D1DF~            			ENDIF_
0480   D1DF             
0480   D1E8             
0480   D1E8~            			ENDIF_
0480   D1E8~            			ENDIF_
0480   D1E8             
0481   D1E8             kill_1		KILL_					;Remove This Thread
0481   D1E8 03          
0482   D1E9             
0483   D1E9 BD F3 AB    bottop		jsr	macro_start
0484   D1EC             			RCLR1_($08)				;Effect: Range #08
0484   D1EC             
0484   D1EC 29 08       
0485   D1EE             			RSET1_($48)				;Effect: Range #08
0485   D1EE             
0485   D1EE 28 48       
0486   D1F0             			JSRD_(ani_bottop)	
0486   D1F0 57          
0486   D1F1 D0 68       
0487   D1F3             			RCLR1_($48)				;Effect: Range #08
0487   D1F3             
0487   D1F3 29 48       
0488   D1F5             			RCLR1_($08)				;Effect: Range #08
0488   D1F5             
0488   D1F5 29 08       
0489   D1F7             			KILL_
0489   D1F7 03          
0490   D1F8             ;**************************************************************
0491   D1F8             ;* Playfield Entry Switch - Always scores 10 points
0492   D1F8             ;**************************************************************
0493   D1F8 BD F3 AB    pf_entry_cpu	jsr	macro_start
0494   D1FB             sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FB 43          
0494   D1FC             
0494   D1FC~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FC~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FC             
0494   D1FC             
0494   D1FC 09          
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0494   D1FD             
0494   D1FD             
0495   D1FD             			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0495   D1FD             
0495   D1FD 5BFB505EE6  
0495   D202~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0495   D202~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0495   D202~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0495   D202~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0495   D202~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0495   D202~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0495   D202             
0496   D202             gb_56			BITOFF_($DE,$50)			;Turn OFF: Bit#1E, Bit#10
0496   D202             
0496   D202 11 DE 50    
0497   D205             			REMTHREADS_($F8,$C0)		;Remove Multiple Threads Based on Priority
0497   D205 55 F8 C0    
0498   D208             			BNEA_($57,gb_24)        	;BNEA_BIT#17 to gb_24
0498   D208 59 57       
0498   D20A E3 3C       
0499   D20C             			BITOFF_($57)			;Turn OFF: Bit#17
0499   D20C             
0499   D20C 11 57       
0500   D20E             			KILL_					;Remove This Thread
0500   D20E 03          
0501   D20F             
0502   D20F             ;***************************************************************
0503   D20F             ;* Outhole Thread
0504   D20F             ;***************************************************************
0505   D20F             sw_outhole		SOL_(outhole_on)              ;Turn ON Sol#1:outhole
0505   D20F 31 40       
0506   D211             			BITON_($55)				;Turn ON: Bit#15
0506   D211             
0506   D211 10 55       
0507   D213             			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0507   D213             
0507   D213             
0507   D213             
0507   D213 5BFB505EFE  
0507   D218~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0507   D218~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0507   D218~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0507   D218~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0507   D218~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0507   D218~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0507   D218             
0508   D218             			      EXE_	
0508   D218             
0508   D218 44          
0509   D219             			      	NEWTHREAD(gj_2B)			
0509   D219 CE D2 24    
0509   D21C BD EA C4    
0510   D21F             			      EXEEND_
0510   D21F             
0510   D21F             
0510   D21F             
0510   D21F             
0510   D21F~            			      EXEEND_
0510   D21F~            			      EXEEND_
0510   D21F             
0510   D218             
0510   D218 48          
0510   D219             
0510   D21F             
0510   D21F~            			      EXEEND_
0510   D21F~            			      EXEEND_
0510   D21F             
0511   D21F             			ENDIF_
0511   D21F             
0511   D21F             
0511   D21F             
0511   D21F             
0511   D21F             
0511   D21F~            			ENDIF_
0511   D21F~            			ENDIF_
0511   D21F             
0511   D21F~            			ENDIF_
0511   D21F~            			ENDIF_
0511   D21F             
0511   D217             
0511   D217 07          
0511   D218             
0511   D218             
0511   D218~            			ENDIF_
0511   D218~            			ENDIF_
0511   D218~            			ENDIF_
0511   D218~            			ENDIF_
0511   D218~            			ENDIF_
0511   D218             
0511   D21F             
0511   D21F~            			ENDIF_
0511   D21F~            			ENDIF_
0511   D21F             
0512   D21F             			SLEEP_(192)
0512   D21F~            			SLEEP_(192)
0512   D21F~            			SLEEP_(192)
0512   D21F             
0512   D21F 53 C0       
0512   D221             
0513   D221 5E 29       			SWCLR_($29)				;Clear Sw#: $29(outhole)
0514   D223             			KILL_					;Remove This Thread
0514   D223 03          
0515   D224             
0516   D224             ;***************************************************************
0517   D224             ;*
0518   D224             ;***************************************************************
0519   D224 BD F3 AB    gj_2B			jsr	macro_start
0520   D227             			JMPR_(gb_56)	
0520   D227~            			JMPR_(gb_56)	
0520   D227~            			JMPR_(gb_56)	
0520   D227             
0520   D227~            			JMPR_(gb_56)	
0520   D227~            			JMPR_(gb_56)	
0520   D227             
0520   D227             
0520   D227 8F          
0520   D228 D9          
0521   D229             			
0522   D229             ;***************************************************************
0523   D229             ;* Multiball counter: This routine is responsible for incrementing
0524   D229             ;* the count in the player 1 score display at the start of the
0525   D229             ;* multiball animation process. It resets game_ram_d and increments
0526   D229             ;* it until it matches the value of game_ram_a
0527   D229             ;***************************************************************					
0528   D229 4F          mb_countup		clra	
0529   D22A 97 0D       			staa	game_ram_d
0530   D22C             			begin
0530   D22C             
0531   D22C 16          				tab	
0532   D22D BD EC F3    				jsr	split_ab
0533   D230 8A 0F       				oraa	#$0F
0534   D232 CA F0       				orab	#$F0
0535   D234 97 49       				staa	$49
0536   D236 D7 48       				stab	score_p1_b1
0537   D238 86 0C       				ldaa	#$0C
0538   D23A BD EC FC    				jsr	isnd_once
0539   D23D BD EA 2F    				jsr	addthread
0540   D240 05          				.db $05
0541   D241 96 0D       				ldaa	game_ram_d
0542   D243 8B 01       				adda	#$01
0543   D245 19          				daa	
0544   D246 25 06       				bcs	countup_end
0545   D248 97 0D       				staa	game_ram_d
0546   D24A 91 0A       				cmpa	game_ram_a
0547   D24C             			hiend
0547   D24C             
0547   D24C             
0547   D24C~            			hiend
0547   D24C~            			hiend
0547   D24C~            			hiend
0547   D24C             
0547   D24C 23 DE       
0547   D24E             
0547   D24E~            			hiend
0547   D24E~            			hiend
0547   D24E             
0548   D24E 39          countup_end		rts	
0549   D24F             
0550   D24F             ;******************************************************
0551   D24F             ;* This will show the current timer value in the digit
0552   D24F             ;* specified in X.
0553   D24F             ;******************************************************
0554   D24F D6 0A       show_timer		ldab	game_ram_a			;Get timer value
0555   D251 96 E3       time_disp		ldaa	spare_ram+3			;If spare_ram+3 != zero then numbers span digit bytes
0556   D253             			ifne
0556   D253             
0556   D253 27 FE       
0557   D255 17          				tba	
0558   D256 BD EC F3    				jsr	split_ab
0559   D259 8A 0F       				oraa	#$0F
0560   D25B CA F0       				orab	#$F0
0561   D25D A7 01       				staa	$01,X				;Split them up
0562   D25F             			endif
0562   D25F             
0562   D25F             
0562   D25F             
0562   D25F             
0562   D25F             
0562   D25F~            			endif
0562   D25F~            			endif
0562   D25F             
0562   D25F~            			endif
0562   D25F~            			endif
0562   D25F             
0562   D254             
0562   D254 0A          
0562   D255             
0562   D255             
0562   D255~            			endif
0562   D255~            			endif
0562   D255~            			endif
0562   D255             
0562   D25F             
0562   D25F~            			endif
0562   D25F~            			endif
0562   D25F             
0563   D25F E7 00       			stab	$00,X				;Store them...
0564   D261 8C 00 4B    			cpx	#score_p2_b1-1		;Are we at the right side of player 2?
0565   D264             			ifeq
0565   D264             
0565   D264 26 FE       
0566   D266 96 E3       				ldaa	spare_ram+3
0567   D268             				ifne
0567   D268             
0567   D268 27 FE       
0568   D26A 96 0A       					ldaa	game_ram_a
0569   D26C 97 4C       					staa	score_p2_b1
0570   D26E             				endif
0570   D26E             
0570   D26E             
0570   D26E             
0570   D26E             
0570   D26E             
0570   D26E~            				endif
0570   D26E~            				endif
0570   D26E             
0570   D26E~            				endif
0570   D26E~            				endif
0570   D26E             
0570   D269             
0570   D269 04          
0570   D26A             
0570   D26A             
0570   D26A~            				endif
0570   D26A~            				endif
0570   D26A~            				endif
0570   D26A             
0570   D26E             
0570   D26E~            				endif
0570   D26E~            				endif
0570   D26E             
0571   D26E             			endif
0571   D26E             
0571   D26E             
0571   D26E             
0571   D26E             
0571   D26E             
0571   D26E~            			endif
0571   D26E~            			endif
0571   D26E             
0571   D26E~            			endif
0571   D26E~            			endif
0571   D26E             
0571   D265             
0571   D265 08          
0571   D266             
0571   D266             
0571   D266~            			endif
0571   D266~            			endif
0571   D266~            			endif
0571   D266             
0571   D26E             
0571   D26E~            			endif
0571   D26E~            			endif
0571   D26E             
0572   D26E 39          			rts	
0573   D26F             
0574   D26F             ;*******************************************************
0575   D26F             ;* This thread follows behind and erases the previous
0576   D26F             ;* displayed value.
0577   D26F             ;*******************************************************
0578   D26F C6 FF       erase_timer		ldab	#$FF
0579   D271 20 DE       			bra	time_disp
0580   D273             
0581   D273             ;*******************************************************
0582   D273             ;* Fix edges
0583   D273             ;*******************************************************			
0584   D273 96 E4       fix_edges		ldaa	spare_ram+4		;Moving Right or Left?
0585   D275             			ifne				;Left
0585   D275             
0585   D275 27 FE       
0586   D277 96 E3       				ldaa	spare_ram+3		;Spanning digit
0587   D279             				ifeq
0587   D279             
0587   D279 26 FE       
0588   D27B 09          					dex	
0589   D27C 8C 00 53    					cpx	#score_p4_b1-1
0590   D27F 26 11       					bne	fix_end
0591   D281 0D          					sec	
0592   D282 39          					rts				;We are done	
0593   D283             				endif
0593   D283             
0593   D283             
0593   D283             
0593   D283             
0593   D283             
0593   D283~            				endif
0593   D283~            				endif
0593   D283             
0593   D283~            				endif
0593   D283~            				endif
0593   D283             
0593   D27A             
0593   D27A 08          
0593   D27B             
0593   D27B             
0593   D27B~            				endif
0593   D27B~            				endif
0593   D27B~            				endif
0593   D27B             
0593   D283             
0593   D283~            				endif
0593   D283~            				endif
0593   D283             
0594   D283 8C 00 54    				cpx	#score_p4_b1
0595   D286             				ifeq				;Put half in MBIP 
0595   D286             
0595   D286 26 FE       
0596   D288 96 0A       					ldaa	game_ram_a
0597   D28A 44          					lsra	
0598   D28B 44          					lsra	
0599   D28C 44          					lsra	
0600   D28D 44          					lsra	
0601   D28E 8A F0       					oraa	#$F0
0602   D290 97 59       					staa	mbip_b1
0603   D292             				endif
0603   D292             
0603   D292             
0603   D292             
0603   D292             
0603   D292             
0603   D292~            				endif
0603   D292~            				endif
0603   D292             
0603   D292~            				endif
0603   D292~            				endif
0603   D292             
0603   D287             
0603   D287 0A          
0603   D288             
0603   D288             
0603   D288~            				endif
0603   D288~            				endif
0603   D288~            				endif
0603   D288             
0603   D292             
0603   D292~            				endif
0603   D292~            				endif
0603   D292             
0604   D292 73 00 E3    fix_end			com	spare_ram+3
0605   D295 0C          				clc	
0606   D296 39          				rts
0607   D297             			endif	
0607   D297             
0607   D297             
0607   D297             
0607   D297             
0607   D297             
0607   D297~            			endif	
0607   D297~            			endif	
0607   D297             
0607   D297~            			endif	
0607   D297~            			endif	
0607   D297             
0607   D276             
0607   D276 20          
0607   D277             
0607   D277             
0607   D277~            			endif	
0607   D277~            			endif	
0607   D277~            			endif	
0607   D277             
0607   D297             
0607   D297~            			endif	
0607   D297~            			endif	
0607   D297             
0608   D297             			;Here if was moving right
0609   D297 96 E3       			ldaa	spare_ram+3
0610   D299 27 F7       			beq	fix_end
0611   D29B 08          			inx	
0612   D29C 20 F4       			bra	fix_end
0613   D29E             
0614   D29E             ;*******************************************************
0615   D29E             ;* Adjusts X value for display animation
0616   D29E             ;*******************************************************			
0617   D29E 8C 00 4F    adj_anix		cpx	#score_p3_b1-1		;Are we at the end of Player 2
0618   D2A1             			ifeq					;yes
0618   D2A1             
0618   D2A1 26 FE       
0619   D2A3 CE 00 53    				ldx	#score_p4_b1-1		;then, adjust to the end of Player 3
0620   D2A6 73 00 E4    chng_dir			com	spare_ram+4			;Chage direction
0621   D2A9 0D          				sec	
0622   D2AA 39          				rts	
0623   D2AB             			endif			
0623   D2AB             
0623   D2AB             
0623   D2AB             
0623   D2AB             
0623   D2AB             
0623   D2AB~            			endif			
0623   D2AB~            			endif			
0623   D2AB             
0623   D2AB~            			endif			
0623   D2AB~            			endif			
0623   D2AB             
0623   D2A2             
0623   D2A2 08          
0623   D2A3             
0623   D2A3             
0623   D2A3~            			endif			
0623   D2A3~            			endif			
0623   D2A3~            			endif			
0623   D2A3             
0623   D2AB             
0623   D2AB~            			endif			
0623   D2AB~            			endif			
0623   D2AB             
0624   D2AB 8C 00 50    			cpx	#score_p3_b1		;Are we at the start of Player 3
0625   D2AE             			ifeq					;yes
0625   D2AE             
0625   D2AE 26 FE       
0626   D2B0 CE 00 54    				ldx	#score_p4_b1		;then, adjust to the start of Player 4
0627   D2B3 20 F1       				bra	chng_dir
0628   D2B5             			endif
0628   D2B5             
0628   D2B5             
0628   D2B5             
0628   D2B5             
0628   D2B5             
0628   D2B5~            			endif
0628   D2B5~            			endif
0628   D2B5             
0628   D2B5~            			endif
0628   D2B5~            			endif
0628   D2B5             
0628   D2AF             
0628   D2AF 05          
0628   D2B0             
0628   D2B0             
0628   D2B0~            			endif
0628   D2B0~            			endif
0628   D2B0~            			endif
0628   D2B0             
0628   D2B5             
0628   D2B5~            			endif
0628   D2B5~            			endif
0628   D2B5             
0629   D2B5 8C 00 4B    			cpx	#score_p2_b1-1		;Are we at the end of Player 1
0630   D2B8             			ifeq					;Yes
0630   D2B8             
0630   D2B8 26 FE       
0631   D2BA 96 E3       				ldaa	spare_ram+3			
0632   D2BC 27 0B       				beq	ret_clr
0633   D2BE 08          				inx	
0634   D2BF 0D          				sec	
0635   D2C0 39          				rts
0636   D2C1             			endif	
0636   D2C1             
0636   D2C1             
0636   D2C1             
0636   D2C1             
0636   D2C1             
0636   D2C1~            			endif	
0636   D2C1~            			endif	
0636   D2C1             
0636   D2C1~            			endif	
0636   D2C1~            			endif	
0636   D2C1             
0636   D2B9             
0636   D2B9 07          
0636   D2BA             
0636   D2BA             
0636   D2BA~            			endif	
0636   D2BA~            			endif	
0636   D2BA~            			endif	
0636   D2BA             
0636   D2C1             
0636   D2C1~            			endif	
0636   D2C1~            			endif	
0636   D2C1             
0637   D2C1 8C 00 57    			cpx	#mbip_b0-1			;Are we at the end of Player 4
0638   D2C4             			ifeq					;Yes...
0638   D2C4             
0638   D2C4 26 FE       
0639   D2C6 73 00 E4    				com	spare_ram+4			;change direction
0640   D2C9             			endif
0640   D2C9             
0640   D2C9             
0640   D2C9             
0640   D2C9             
0640   D2C9             
0640   D2C9~            			endif
0640   D2C9~            			endif
0640   D2C9             
0640   D2C9~            			endif
0640   D2C9~            			endif
0640   D2C9             
0640   D2C5             
0640   D2C5 03          
0640   D2C6             
0640   D2C6             
0640   D2C6~            			endif
0640   D2C6~            			endif
0640   D2C6~            			endif
0640   D2C6             
0640   D2C9             
0640   D2C9~            			endif
0640   D2C9~            			endif
0640   D2C9             
0641   D2C9 0C          ret_clr		clc	
0642   D2CA 39          			rts
0643   D2CB             			
0644   D2CB             ;***********************************************************
0645   D2CB             ;* This routine takes care of the fancy display during the
0646   D2CB             ;* start of multiball.
0647   D2CB             ;***********************************************************			
0648   D2CB             mb_fancy		BITON_($40)				;Turn ON: Bit#00
0648   D2CB             
0648   D2CB 10 40       
0649   D2CD             			PRI_($B5)				;Priority=#B5
0649   D2CD 52 B5       
0650   D2CF             			BEGIN_
0650   D2CF             
0651   D2CF             				SLEEP_(11)
0651   D2CF             
0651   D2CF 7B          
0651   D2D0~            				SLEEP_(11)
0651   D2D0~            				SLEEP_(11)
0651   D2D0             
0652   D2D0             			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D0             
0652   D2D0 5AFEF2F240FD
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6             
0652   D2D6             
0652   D2D6             
0652   D2D6             
0652   D2D6             
0652   D2D6             
0652   D2D6             
0652   D2D5             
0652   D2D5 F9          
0652   D2D6             
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6             
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0652   D2D6             
0653   D2D6             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
0653   D2D6 55 F8 D0    
0654   D2D9             			JSRDR_(cpdisp_show)		
0654   D2D9~            			JSRDR_(cpdisp_show)		
0654   D2D9~            			JSRDR_(cpdisp_show)		
0654   D2D9             
0654   D2D9~            			JSRDR_(cpdisp_show)		
0654   D2D9~            			JSRDR_(cpdisp_show)		
0654   D2D9             
0654   D2D9             
0654   D2D9 A4          
0654   D2DA BD          
0655   D2DB             			JSRR_(gi_off_inc)			
0655   D2DB~            			JSRR_(gi_off_inc)			
0655   D2DB~            			JSRR_(gi_off_inc)			
0655   D2DB             
0655   D2DB~            			JSRR_(gi_off_inc)			
0655   D2DB~            			JSRR_(gi_off_inc)			
0655   D2DB             
0655   D2DB             
0655   D2DB 90          
0655   D2DC 96          
0656   D2DD             			RCLR1_($08)				;Effect: Range #08
0656   D2DD             
0656   D2DD 29 08       
0657   D2DF             			JSRDR_(alllamps_off)		
0657   D2DF~            			JSRDR_(alllamps_off)		
0657   D2DF~            			JSRDR_(alllamps_off)		
0657   D2DF             
0657   D2DF~            			JSRDR_(alllamps_off)		
0657   D2DF~            			JSRDR_(alllamps_off)		
0657   D2DF             
0657   D2DF             
0657   D2DF A2          
0657   D2E0 83          
0658   D2E1             			CPUX_					;Resume CPU Execution
0658   D2E1 04          
0659   D2E2             			NEWTHREAD(attract_1)
0659   D2E2 CE D7 AE    
0659   D2E5 BD EA C4    
0660   D2E8             			NEWTHREAD(attract_2)
0660   D2E8 CE D7 DB    
0660   D2EB BD EA C4    
0661   D2EE 7F 00 60    			clr	comma_flags
0662   D2F1 CE 00 48    			ldx	#score_p1_b1
0663   D2F4 C6 10       			ldab	#$10
0664   D2F6 86 FF       			ldaa	#$FF
0665   D2F8 97 59       			staa	mbip_b1
0666   D2FA 97 5B       			staa	cred_b1
0667   D2FC BD F8 40    			jsr	write_range			;Blank all displays in Buffer 1
0668   D2FF 86 FF       			ldaa	#$FF
0669   D301 BD F8 A4    			jsr	store_display_mask
0670   D304 BD D2 29    			jsr	mb_countup			;Increment counter in Player 1 score display
0671   D307 BD F3 AB    			jsr	macro_start
0672   D30A             			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0672   D30A~            			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0672   D30A~            			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0672   D30A             
0672   D30A~            			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0672   D30A~            			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0672   D30A             
0672   D30A             
0672   D30A 92          
0672   D30B 76          
0673   D30C             			CPUX_					;Resume CPU Execution
0673   D30C 04          
0674   D30D CE 00 48    			ldx	#score_p1_b1
0675   D310 4F          			clra	
0676   D311 97 E4       			staa	spare_ram+4			;Store direction: 00=right ff=left
0677   D313 43          			coma	
0678   D314 97 E3       			staa	spare_ram+3			;Store Digit Span info: 00=normal ff=split
0679   D316             			begin
0679   D316             
0680   D316             				begin
0680   D316             
0681   D316 BD D2 4F    					jsr	show_timer			;Show the digit
0682   D319 BD EA 2F    					jsr	addthread			;Wait a bit
0683   D31C 04          					.db $04
0684   D31D BD D2 6F    					jsr	erase_timer			;Erase trailing digits
0685   D320 BD D2 9E    					jsr	adj_anix			;Adjust X value
0686   D323             				ccend
0686   D323             
0686   D323             
0686   D323~            				ccend
0686   D323~            				ccend
0686   D323~            				ccend
0686   D323             
0686   D323 25 F1       
0686   D325             
0686   D325~            				ccend
0686   D325~            				ccend
0686   D325             
0687   D325 BD D2 73    				jsr	fix_edges			;Fix transistions
0688   D328             			csend
0688   D328             
0688   D328             
0688   D328~            			csend
0688   D328~            			csend
0688   D328~            			csend
0688   D328             
0688   D328 24 EC       
0688   D32A             
0688   D32A~            			csend
0688   D32A~            			csend
0688   D32A             
0689   D32A             			;Now we are done with the walking animation
0690   D32A 96 0A       			ldaa	game_ram_a
0691   D32C 97 59       			staa	mbip_b1			;Put timer back in MBIP
0692   D32E BD F3 AB    			jsr	macro_start
0693   D331             			;This next section will flash the time in the MBIP display 4 times...
0694   D331             			SETRAM_(regb,$03)			;RAM$01=$03
0694   D331~            			SETRAM_(regb,$03)			;RAM$01=$03
0694   D331~            			SETRAM_(regb,$03)			;RAM$01=$03
0694   D331             
0694   D331 C1 03       
0695   D333             			BEGIN_
0695   D333             
0696   D333             				SLEEP_(16)
0696   D333~            				SLEEP_(16)
0696   D333~            				SLEEP_(16)
0696   D333             
0696   D333 53 10       
0696   D335             
0697   D335             				EXE_
0697   D335             
0697   D335 44          
0698   D336 86 FF       				      ldaa	#$FF
0699   D338 97 59       				      staa	mbip_b1
0700   D33A             				EXEEND_
0700   D33A             
0700   D33A             
0700   D33A             
0700   D33A             
0700   D33A~            				EXEEND_
0700   D33A~            				EXEEND_
0700   D33A             
0700   D335             
0700   D335 46          
0700   D336             
0700   D33A             
0700   D33A~            				EXEEND_
0700   D33A~            				EXEEND_
0700   D33A             
0701   D33A             				SLEEP_(16)
0701   D33A~            				SLEEP_(16)
0701   D33A~            				SLEEP_(16)
0701   D33A             
0701   D33A 53 10       
0701   D33C             
0702   D33C             				EXE_
0702   D33C             
0702   D33C 44          
0703   D33D 96 0A       				      ldaa	game_ram_a
0704   D33F 97 59       				      staa	mbip_b1
0705   D341             				EXEEND_
0705   D341             
0705   D341             
0705   D341             
0705   D341             
0705   D341~            				EXEEND_
0705   D341~            				EXEEND_
0705   D341             
0705   D33C             
0705   D33C 46          
0705   D33D             
0705   D341             
0705   D341~            				EXEEND_
0705   D341~            				EXEEND_
0705   D341             
0706   D341             				ADDRAM_(regb,-1)			;RAM$01-=1
0706   D341~            				ADDRAM_(regb,-1)			;RAM$01-=1
0706   D341~            				ADDRAM_(regb,-1)			;RAM$01-=1
0706   D341             
0706   D341 B1 FF       
0707   D343             			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D343             
0707   D343 5BFCE100FE  
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348             
0707   D348             
0707   D348             
0707   D348             
0707   D348             
0707   D348             
0707   D348             
0707   D347             
0707   D347 EB          
0707   D348             
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348             
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0707   D348             
0708   D348             			EXE_
0708   D348             
0708   D348 44          
0709   D349             			      ;Put back all the scores
0710   D349 CE 00 00    			      ldx	#vm_reg_a
0711   D34C DF 5C       			      stx	dmask_p1
0712   D34E DF 5E       			      stx	dmask_p3
0713   D350 96 E1       			      ldaa	spare_ram+1
0714   D352 97 60       			      staa	comma_flags
0715   D354             			EXEEND_
0715   D354             
0715   D354             
0715   D354             
0715   D354             
0715   D354~            			EXEEND_
0715   D354~            			EXEEND_
0715   D354             
0715   D348             
0715   D348 4D          
0715   D349             
0715   D354             
0715   D354~            			EXEEND_
0715   D354~            			EXEEND_
0715   D354             
0716   D354             			JSRD_(update_commas)		
0716   D354 57          
0716   D355 EB A1       
0717   D357             			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0717   D357~            			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0717   D357~            			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0717   D357             
0717   D357~            			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0717   D357~            			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0717   D357             
0717   D357             
0717   D357 92          
0717   D358 36          
0718   D359             			SSND_($12)				;Sound #12
0718   D359             
0718   D359 F2          
0718   D35A~            			SSND_($12)				;Sound #12
0718   D35A~            			SSND_($12)				;Sound #12
0718   D35A~            			SSND_($12)				;Sound #12
0718   D35A             
0719   D35A             			BITOFF_($40)			;Turn OFF: Bit#00
0719   D35A             
0719   D35A 11 40       
0720   D35C             			JSRDR_(alllamps_on)		
0720   D35C~            			JSRDR_(alllamps_on)		
0720   D35C~            			JSRDR_(alllamps_on)		
0720   D35C             
0720   D35C~            			JSRDR_(alllamps_on)		
0720   D35C~            			JSRDR_(alllamps_on)		
0720   D35C             
0720   D35C             
0720   D35C A2          
0720   D35D 13          
0721   D35E             			REMTHREADS_($F8,$42)		;Remove Multiple Threads Based on Priority
0721   D35E 55 F8 42    
0722   D361             			REMTHREADS_($FF,$43)		;Kill the lamp effects
0722   D361 55 FF 43    
0723   D364             ;************************************************************
0724   D364             ;* NOTE: This falls through from above!
0725   D364             ;* General Illumination Routines
0726   D364             ;************************************************************
0727   D364             gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0727   D364             
0727   D364             
0727   D364             
0727   D364 5AFCEC00FE  
0727   D369~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0727   D369~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0727   D369~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0727   D369~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0727   D369~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0727   D369~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0727   D369             
0728   D369             			      ADDRAM_($0C,-1)			;RAM$0C-=1
0728   D369~            			      ADDRAM_($0C,-1)			;RAM$0C-=1
0728   D369~            			      ADDRAM_($0C,-1)			;RAM$0C-=1
0728   D369             
0728   D369 BC FF       
0729   D36B             			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0729   D36B             
0729   D36B 5BFCEC0002  
0729   D370~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0729   D370~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0729   D370~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0729   D370~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0729   D370~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0729   D370~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0729   D370             
0730   D370             			ENDIF_
0730   D370             
0730   D370             
0730   D370             
0730   D370             
0730   D370             
0730   D370~            			ENDIF_
0730   D370~            			ENDIF_
0730   D370             
0730   D370~            			ENDIF_
0730   D370~            			ENDIF_
0730   D370             
0730   D368             
0730   D368 07          
0730   D369             
0730   D369             
0730   D369~            			ENDIF_
0730   D369~            			ENDIF_
0730   D369~            			ENDIF_
0730   D369~            			ENDIF_
0730   D369~            			ENDIF_
0730   D369             
0730   D370             
0730   D370~            			ENDIF_
0730   D370~            			ENDIF_
0730   D370             
0731   D370             			SOL_(gi_off)			;Turn OFF Sol#3:gi
0731   D370 31 02       
0732   D372             gi_on_dec_end	MRTS_					;Macro RTS, Save MRA,MRB
0732   D372 02          
0733   D373             
0734   D373             
0735   D373             gi_off_inc		ADDRAM_($0C,$01)			;RAM$0C+=$01
0735   D373~            gi_off_inc		ADDRAM_($0C,$01)			;RAM$0C+=$01
0735   D373~            gi_off_inc		ADDRAM_($0C,$01)			;RAM$0C+=$01
0735   D373             
0735   D373 BC 01       
0736   D375             			SOL_(gi_on)			      ;Turn ON Sol#3:gi
0736   D375 31 E2       
0737   D377             			MRTS_					;Macro RTS, Save MRA,MRB
0737   D377 02          
0738   D378             
0739   D378             ;**********************************************************
0740   D378             ;* 1-2-3-4-5 Switches: This is the routine that takes care
0741   D378             ;*                     of handling all the switch closures
0742   D378             ;*                     for this feature. If all are on,
0743   D378             ;*                     then Double Bonus lights.
0744   D378             ;**********************************************************
0745   D378 BD F3 AB    sw_12345_com	jsr	macro_start
0746   D37B             			;Fall through to target logic
0747   D37B             sw_1_target
0748   D37B             sw_2_target
0749   D37B             sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37B 42          
0749   D37C             
0749   D37C~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37C~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37C             
0749   D37C~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37C~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37C             
0749   D37C~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37C~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37C             
0749   D37C             
0749   D37C 0B          
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D~            sw_3_target		POINTS_(1,1000)			;1000 Points
0749   D37D             
0749   D37D             
0749   D37D             
0749   D37D             
0750   D37D             			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
0750   D37D             
0750   D37D 14 00       
0751   D37F             			IFEQR_($F6,$04)		      ;BNER_RangeON#04
0751   D37F             
0751   D37F             
0751   D37F             
0751   D37F 5B F6 04 FF 
0751   D383~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
0751   D383~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
0751   D383~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
0751   D383~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
0751   D383~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
0751   D383~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
0751   D383             
0752   D383                   			PRI_($05)				;Priority=#05
0752   D383 52 05       
0753   D385                   			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0753   D385             
0753   D385             
0753   D385             
0753   D385 5B 19 00    
0753   D388~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0753   D388~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0753   D388~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0753   D388~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0753   D388~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0753   D388~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0753   D388             
0754   D388                   			      ;If already lit, then give points
0755   D388                   			      POINTS_(5,10000)			;50,000 Points
0755   D388 42          
0755   D389             
0755   D389~                  			      POINTS_(5,10000)			;50,000 Points
0755   D389~                  			      POINTS_(5,10000)			;50,000 Points
0755   D389             
0755   D389~                  			      POINTS_(5,10000)			;50,000 Points
0755   D389~                  			      POINTS_(5,10000)			;50,000 Points
0755   D389             
0755   D389~                  			      POINTS_(5,10000)			;50,000 Points
0755   D389~                  			      POINTS_(5,10000)			;50,000 Points
0755   D389             
0755   D389~                  			      POINTS_(5,10000)			;50,000 Points
0755   D389~                  			      POINTS_(5,10000)			;50,000 Points
0755   D389             
0755   D389             
0755   D389 2C          
0755   D38A~                  			      POINTS_(5,10000)			;50,000 Points
0755   D38A~                  			      POINTS_(5,10000)			;50,000 Points
0755   D38A~                  			      POINTS_(5,10000)			;50,000 Points
0755   D38A~                  			      POINTS_(5,10000)			;50,000 Points
0755   D38A~                  			      POINTS_(5,10000)			;50,000 Points
0755   D38A~                  			      POINTS_(5,10000)			;50,000 Points
0755   D38A             
0755   D38A             
0755   D38A             
0755   D38A             
0755   D38A             
0756   D38A                   			ENDIF_
0756   D38A             
0756   D38A             
0756   D38A             
0756   D38A             
0756   D38A             
0756   D38A~                  			ENDIF_
0756   D38A~                  			ENDIF_
0756   D38A             
0756   D38A~                  			ENDIF_
0756   D38A~                  			ENDIF_
0756   D38A             
0756   D387             
0756   D387 02          
0756   D388             
0756   D388             
0756   D388~                  			ENDIF_
0756   D388~                  			ENDIF_
0756   D388~                  			ENDIF_
0756   D388~                  			ENDIF_
0756   D388~                  			ENDIF_
0756   D388             
0756   D38A             
0756   D38A~                  			ENDIF_
0756   D38A~                  			ENDIF_
0756   D38A             
0757   D38A                   			BITON_($19)				;Turn ON: Lamp#19(double_score)
0757   D38A             
0757   D38A 10 19       
0758   D38C                   			SSND_($1D)				;Sound #1D
0758   D38C             
0758   D38C FD          
0758   D38D~                  			SSND_($1D)				;Sound #1D
0758   D38D~                  			SSND_($1D)				;Sound #1D
0758   D38D~                  			SSND_($1D)				;Sound #1D
0758   D38D             
0759   D38D                   			RCLR0_($04)				;Effect: Range #04
0759   D38D             
0759   D38D 19 04       
0760   D38F                   			RCLR1_($08)				;Effect: Range #08
0760   D38F             
0760   D38F 29 08       
0761   D391                   			JSRD_(alllamps_off)			
0761   D391 57          
0761   D392 D5 64       
0762   D394                   			SETRAM_(rega,$1E)			;RAM$00=$1E
0762   D394~                  			SETRAM_(rega,$1E)			;RAM$00=$1E
0762   D394~                  			SETRAM_(rega,$1E)			;RAM$00=$1E
0762   D394             
0762   D394 C0 1E       
0763   D396                   			BEGIN_
0763   D396             
0764   D396             	 				RINV1_($04)				;Effect: Range #04
0764   D396             
0764   D396 2F 04       
0765   D398             	      			SLEEP_(3)
0765   D398             
0765   D398 73          
0765   D399~            	      			SLEEP_(3)
0765   D399~            	      			SLEEP_(3)
0765   D399             
0766   D399             	      			ADDRAM_(rega,-1)			;RAM$00-=1
0766   D399~            	      			ADDRAM_(rega,-1)			;RAM$00-=1
0766   D399~            	      			ADDRAM_(rega,-1)			;RAM$00-=1
0766   D399             
0766   D399 B0 FF       
0767   D39B                   			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D39B             
0767   D39B 5BFCE000FE  
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0             
0767   D3A0             
0767   D3A0             
0767   D3A0             
0767   D3A0             
0767   D3A0             
0767   D3A0             
0767   D39F             
0767   D39F F6          
0767   D3A0             
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0             
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0~                  			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0767   D3A0             
0768   D3A0                   			RCLR1_($C4,$04)
0768   D3A0             
0768   D3A0 29 C4 04    
0769   D3A3                   			JSRD_(alllamps_on)	
0769   D3A3 57          
0769   D3A4 D5 71       
0770   D3A6                   		ELSE_
0770   D3A6             
0770   D3A6             
0770   D3A6             
0770   D3A6             
0770   D382             
0770   D382             
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382             
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382~                  		ELSE_
0770   D382             
0770   D382             
0770   D382 25          
0770   D3A6             
0770   D3A6             
0770   D3A6~                  		ELSE_
0770   D3A6~                  		ELSE_
0770   D3A6             
0770   D3A6~                  		ELSE_
0770   D3A6~                  		ELSE_
0770   D3A6             
0770   D3A6             
0770   D3A6 80          
0770   D3A7 00          
0770   D3A8             
0770   D3A8             
0770   D3A8             
0770   D3A8~                  		ELSE_
0770   D3A8~                  		ELSE_
0770   D3A8             
0770   D3A8~                  		ELSE_
0770   D3A8~                  		ELSE_
0770   D3A8             
0771   D3A8                   			EXE_
0771   D3A8             
0771   D3A8 44          
0772   D3A9 36                				psha
0773   D3AA 81 13       					cmpa	#$13
0774   D3AC 86 00       					ldaa	#$00
0775   D3AE             					ifcc
0775   D3AE             
0775   D3AE 25 FE       
0776   D3B0 8B 03       						adda	#03
0777   D3B2             					endif
0777   D3B2             
0777   D3B2             
0777   D3B2             
0777   D3B2             
0777   D3B2             
0777   D3B2~            					endif
0777   D3B2~            					endif
0777   D3B2             
0777   D3B2~            					endif
0777   D3B2~            					endif
0777   D3B2             
0777   D3AF             
0777   D3AF 02          
0777   D3B0             
0777   D3B0             
0777   D3B0~            					endif
0777   D3B0~            					endif
0777   D3B0~            					endif
0777   D3B0             
0777   D3B2             
0777   D3B2~            					endif
0777   D3B2~            					endif
0777   D3B2             
0778   D3B2 BD D9 4D    					jsr	ext_snd
0779   D3B5 32          					pula
0780   D3B6             				EXEEND_
0780   D3B6             
0780   D3B6             
0780   D3B6             
0780   D3B6             
0780   D3B6~            				EXEEND_
0780   D3B6~            				EXEEND_
0780   D3B6             
0780   D3A8             
0780   D3A8 4F          
0780   D3A9             
0780   D3B6             
0780   D3B6~            				EXEEND_
0780   D3B6~            				EXEEND_
0780   D3B6             
0781   D3B6                   			;flash the proper lamp a bunch, fancy like
0782   D3B6                   			SETRAM_(regb,$10)			;RAM$01=$10
0782   D3B6~                  			SETRAM_(regb,$10)			;RAM$01=$10
0782   D3B6~                  			SETRAM_(regb,$10)			;RAM$01=$10
0782   D3B6             
0782   D3B6 C1 10       
0783   D3B8                   			BEGIN_
0783   D3B8             
0784   D3B8             	 				BITINVP_(rega)			
0784   D3B8             
0784   D3B8 16 00       
0785   D3BA             	      			SLEEP_(3)
0785   D3BA             
0785   D3BA 73          
0785   D3BB~            	      			SLEEP_(3)
0785   D3BB~            	      			SLEEP_(3)
0785   D3BB             
0786   D3BB             	      			ADDRAM_(regb,-1)			;RAM$01-=1
0786   D3BB~            	      			ADDRAM_(regb,-1)			;RAM$01-=1
0786   D3BB~            	      			ADDRAM_(regb,-1)			;RAM$01-=1
0786   D3BB             
0786   D3BB B1 FF       
0787   D3BD                   			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3BD             
0787   D3BD 5BFCE100FE  
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2             
0787   D3C2             
0787   D3C2             
0787   D3C2             
0787   D3C2             
0787   D3C2             
0787   D3C2             
0787   D3C1             
0787   D3C1 F6          
0787   D3C2             
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2             
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0787   D3C2             
0788   D3C2                   			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
0788   D3C2             
0788   D3C2 14 00       
0789   D3C4                   	      ENDIF_		
0789   D3C4             
0789   D3C4             
0789   D3C4             
0789   D3C4             
0789   D3C4             
0789   D3C4~                  	      ENDIF_		
0789   D3C4~                  	      ENDIF_		
0789   D3C4             
0789   D3C4~                  	      ENDIF_		
0789   D3C4~                  	      ENDIF_		
0789   D3C4             
0789   D3A7             
0789   D3A7 1C          
0789   D3A8             
0789   D3A8             
0789   D3A8~                  	      ENDIF_		
0789   D3A8~                  	      ENDIF_		
0789   D3A8~                  	      ENDIF_		
0789   D3A8~                  	      ENDIF_		
0789   D3A8~                  	      ENDIF_		
0789   D3A8             
0789   D3C4             
0789   D3C4~                  	      ENDIF_		
0789   D3C4~                  	      ENDIF_		
0789   D3C4             
0790   D3C4             			KILL_					;Remove This Thread
0790   D3C4 03          
0791   D3C5             
0792   D3C5             ;************************************************************
0793   D3C5             ;* #5 Rollover switch: Will turn on multiplier lamp or drain
0794   D3C5             ;*                     shield on loop.
0795   D3C5             ;************************************************************
0796   D3C5             sw_5_rollover	JSRDR_(spawn_loop)
0796   D3C5~            sw_5_rollover	JSRDR_(spawn_loop)
0796   D3C5~            sw_5_rollover	JSRDR_(spawn_loop)
0796   D3C5             
0796   D3C5~            sw_5_rollover	JSRDR_(spawn_loop)
0796   D3C5~            sw_5_rollover	JSRDR_(spawn_loop)
0796   D3C5             
0796   D3C5             
0796   D3C5 A0          
0796   D3C6 25          
0797   D3C7             			EXE_
0797   D3C7             
0797   D3C7 44          
0798   D3C8             			      NEWTHREAD(sw_12345_com)		;Spawn the new thread for 12345 logic
0798   D3C8 CE D3 78    
0798   D3CB BD EA C4    
0799   D3CE             			EXEEND_
0799   D3CE             
0799   D3CE             
0799   D3CE             
0799   D3CE             
0799   D3CE~            			EXEEND_
0799   D3CE~            			EXEEND_
0799   D3CE             
0799   D3C7             
0799   D3C7 48          
0799   D3C8             
0799   D3CE             
0799   D3CE~            			EXEEND_
0799   D3CE~            			EXEEND_
0799   D3CE             
0800   D3CE             			JSRDR_(add_bonus)		      ;1 bonus advance	
0800   D3CE~            			JSRDR_(add_bonus)		      ;1 bonus advance	
0800   D3CE~            			JSRDR_(add_bonus)		      ;1 bonus advance	
0800   D3CE             
0800   D3CE~            			JSRDR_(add_bonus)		      ;1 bonus advance	
0800   D3CE~            			JSRDR_(add_bonus)		      ;1 bonus advance	
0800   D3CE             
0800   D3CE             
0800   D3CE A2          
0800   D3CF 1B          
0801   D3D0             			KILL_
0801   D3D0 03          
0802   D3D1             			
0803   D3D1             			
0804   D3D1             ;***************************************************************
0805   D3D1             ;* #4 Rollover switch: Will turn on multiplier lamp or drain
0806   D3D1             ;*                     shield on loop and flash eject hole for
0807   D3D1             ;*			     double kick.
0808   D3D1             ;***************************************************************						
0809   D3D1             sw_4_rollover	JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp	
0809   D3D1~            sw_4_rollover	JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp	
0809   D3D1~            sw_4_rollover	JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp	
0809   D3D1             
0809   D3D1~            sw_4_rollover	JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp	
0809   D3D1~            sw_4_rollover	JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp	
0809   D3D1             
0809   D3D1             
0809   D3D1 A0          
0809   D3D2 19          
0810   D3D3             			EXE_
0810   D3D3             
0810   D3D3 44          
0811   D3D4             			      NEWTHREAD(sw_12345_com)		;Spawn the new thread for 12345 logic
0811   D3D4 CE D3 78    
0811   D3D7 BD EA C4    
0812   D3DA             			EXEEND_	
0812   D3DA             
0812   D3DA             
0812   D3DA             
0812   D3DA             
0812   D3DA~            			EXEEND_	
0812   D3DA~            			EXEEND_	
0812   D3DA             
0812   D3D3             
0812   D3D3 48          
0812   D3D4             
0812   D3DA             
0812   D3DA~            			EXEEND_	
0812   D3DA~            			EXEEND_	
0812   D3DA             
0813   D3DA             			JSRDR_(add_bonus)			;1 bonus advance	
0813   D3DA~            			JSRDR_(add_bonus)			;1 bonus advance	
0813   D3DA~            			JSRDR_(add_bonus)			;1 bonus advance	
0813   D3DA             
0813   D3DA~            			JSRDR_(add_bonus)			;1 bonus advance	
0813   D3DA~            			JSRDR_(add_bonus)			;1 bonus advance	
0813   D3DA             
0813   D3DA             
0813   D3DA A2          
0813   D3DB 0F          
0814   D3DC             			IFNER_($41)			      ;BEQR_BIT#01
0814   D3DC             
0814   D3DC             
0814   D3DC             
0814   D3DC 5A 41 00    
0814   D3DF~            			IFNER_($41)			      ;BEQR_BIT#01
0814   D3DF~            			IFNER_($41)			      ;BEQR_BIT#01
0814   D3DF~            			IFNER_($41)			      ;BEQR_BIT#01
0814   D3DF~            			IFNER_($41)			      ;BEQR_BIT#01
0814   D3DF~            			IFNER_($41)			      ;BEQR_BIT#01
0814   D3DF~            			IFNER_($41)			      ;BEQR_BIT#01
0814   D3DF             
0815   D3DF                   			BITFL_($2B)				;Flash: Lamp#2B(extra_kick)
0815   D3DF             
0815   D3DF 13 2B       
0816   D3E1                   			PRI_($20)				;Priority=#20
0816   D3E1 52 20       
0817   D3E3                   			JSRD_(get_lord_num)			
0817   D3E3 57          
0817   D3E4 E5 61       
0818   D3E6 60                			SLEEPI_(rega)			;Delay RAM$00
0819   D3E7                   			SLEEP_(160)
0819   D3E7~                  			SLEEP_(160)
0819   D3E7~                  			SLEEP_(160)
0819   D3E7             
0819   D3E7 53 A0       
0819   D3E9             
0820   D3E9                   			BITOFF_($2B)			;Turn OFF: Lamp#2B(extra_kick)
0820   D3E9             
0820   D3E9 11 2B       
0821   D3EB                   	      ENDIF_
0821   D3EB             
0821   D3EB             
0821   D3EB             
0821   D3EB             
0821   D3EB             
0821   D3EB~                  	      ENDIF_
0821   D3EB~                  	      ENDIF_
0821   D3EB             
0821   D3EB~                  	      ENDIF_
0821   D3EB~                  	      ENDIF_
0821   D3EB             
0821   D3DE             
0821   D3DE 0C          
0821   D3DF             
0821   D3DF             
0821   D3DF~                  	      ENDIF_
0821   D3DF~                  	      ENDIF_
0821   D3DF~                  	      ENDIF_
0821   D3DF~                  	      ENDIF_
0821   D3DF~                  	      ENDIF_
0821   D3DF             
0821   D3EB             
0821   D3EB~                  	      ENDIF_
0821   D3EB~                  	      ENDIF_
0821   D3EB             
0822   D3EB             			KILL_					;Remove This Thread
0822   D3EB 03          
0823   D3EC             
0824   D3EC             spawn_loop		NEWTHREAD_JMP(activate_loop)
0824   D3EC CE D3 F2    
0824   D3EF 7E EA C4    
0825   D3F2             			
0826   D3F2 BD F3 AB    activate_loop	jsr	macro_start
0827   D3F5             			REMTHREADS_($F8,$50)		;Remove Multiple Threads Based on Priority
0827   D3F5 55 F8 50    
0828   D3F8             			PRI_($50)				;Priority=#50
0828   D3F8 52 50       
0829   D3FA             			IFEQR_($F6,$01)			;BNER_RangeON#01
0829   D3FA             
0829   D3FA             
0829   D3FA             
0829   D3FA 5B F6 01 FF 
0829   D3FE~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0829   D3FE~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0829   D3FE~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0829   D3FE~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0829   D3FE~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0829   D3FE~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0829   D3FE             
0830   D3FE             				;here if all multipliers are lit
0831   D3FE             				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0831   D3FE             
0831   D3FE             
0831   D3FE             
0831   D3FE 5AFCD601FE  
0831   D403~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0831   D403~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0831   D403~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0831   D403~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0831   D403~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0831   D403~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0831   D403             
0832   D403             	      			BITFL_($1D)				;Flash: Lamp#1D(loop_dshield)
0832   D403             
0832   D403 13 1D       
0833   D405             	      			SLEEP_(160)
0833   D405~            	      			SLEEP_(160)
0833   D405~            	      			SLEEP_(160)
0833   D405             
0833   D405 53 A0       
0833   D407             
0834   D407             	      			BITOFF_($1D)			;Turn OFF: Lamp#1D(loop_dshield)
0834   D407             
0834   D407 11 1D       
0835   D409             	      	      ENDIF_
0835   D409             
0835   D409             
0835   D409             
0835   D409             
0835   D409             
0835   D409~            	      	      ENDIF_
0835   D409~            	      	      ENDIF_
0835   D409             
0835   D409~            	      	      ENDIF_
0835   D409~            	      	      ENDIF_
0835   D409             
0835   D402             
0835   D402 06          
0835   D403             
0835   D403             
0835   D403~            	      	      ENDIF_
0835   D403~            	      	      ENDIF_
0835   D403~            	      	      ENDIF_
0835   D403~            	      	      ENDIF_
0835   D403~            	      	      ENDIF_
0835   D403             
0835   D409             
0835   D409~            	      	      ENDIF_
0835   D409~            	      	      ENDIF_
0835   D409             
0836   D409             	      		KILL_	
0836   D409 03          
0837   D40A             	      	ENDIF_				;Remove This Thread
0837   D40A             
0837   D40A             
0837   D40A             
0837   D40A             
0837   D40A             
0837   D40A~            	      	ENDIF_				;Remove This Thread
0837   D40A~            	      	ENDIF_				;Remove This Thread
0837   D40A             
0837   D40A~            	      	ENDIF_				;Remove This Thread
0837   D40A~            	      	ENDIF_				;Remove This Thread
0837   D40A             
0837   D3FD             
0837   D3FD 0C          
0837   D3FE             
0837   D3FE             
0837   D3FE~            	      	ENDIF_				;Remove This Thread
0837   D3FE~            	      	ENDIF_				;Remove This Thread
0837   D3FE~            	      	ENDIF_				;Remove This Thread
0837   D3FE~            	      	ENDIF_				;Remove This Thread
0837   D3FE~            	      	ENDIF_				;Remove This Thread
0837   D3FE             
0837   D40A             
0837   D40A~            	      	ENDIF_				;Remove This Thread
0837   D40A~            	      	ENDIF_				;Remove This Thread
0837   D40A             
0838   D40A             			;fall through
0839   D40A             ;***************************************************************
0840   D40A             ;* Will light the loop to award a bonus multiplier for a time
0841   D40A             ;* period determined by the number of multipliers already lit.
0842   D40A             ;***************************************************************
0843   D40A             light_x		BITFL_($1E)				;Flash: Lamp#1E(loop_x)
0843   D40A             
0843   D40A 13 1E       
0844   D40C             			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
0844   D40C             
0844   D40C 21 1E       
0845   D40E             			SLEEP_(96)
0845   D40E~            			SLEEP_(96)
0845   D40E~            			SLEEP_(96)
0845   D40E             
0845   D40E 53 60       
0845   D410             
0846   D410             			EXE_
0846   D410             
0846   D410 44          
0847   D411 D6 17       			      ldab	$17
0848   D413 C4 F0       			      andb	#$F0
0849   D415 BD E5 75    			      jsr	bits_to_int
0850   D418             			EXEEND_
0850   D418             
0850   D418             
0850   D418             
0850   D418             
0850   D418~            			EXEEND_
0850   D418~            			EXEEND_
0850   D418             
0850   D410             
0850   D410 49          
0850   D411             
0850   D418             
0850   D418~            			EXEEND_
0850   D418~            			EXEEND_
0850   D418             
0851   D418             			EXE_
0851   D418             
0851   D418 44          
0852   D419 40          			      nega	
0853   D41A 48          			      asla	
0854   D41B 48          			      asla	
0855   D41C 48          			      asla	
0856   D41D 48          			      asla	
0857   D41E 48          			      asla	
0858   D41F 48          			      asla	
0859   D420 4A          			      deca	
0860   D421             			EXEEND_
0860   D421             
0860   D421             
0860   D421             
0860   D421             
0860   D421~            			EXEEND_
0860   D421~            			EXEEND_
0860   D421             
0860   D418             
0860   D418 4A          
0860   D419             
0860   D421             
0860   D421~            			EXEEND_
0860   D421~            			EXEEND_
0860   D421             
0861   D421 60          			SLEEPI_(rega)			;Delay RAM$00
0862   D422             			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0862   D422             
0862   D422             
0862   D422             
0862   D422 5A 3E 00    
0862   D425~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0862   D425~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0862   D425~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0862   D425~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0862   D425~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0862   D425~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0862   D425             
0863   D425             			      SLEEP_(64)
0863   D425~            			      SLEEP_(64)
0863   D425~            			      SLEEP_(64)
0863   D425             
0863   D425 53 40       
0863   D427             
0864   D427             			ENDIF_
0864   D427             
0864   D427             
0864   D427             
0864   D427             
0864   D427             
0864   D427~            			ENDIF_
0864   D427~            			ENDIF_
0864   D427             
0864   D427~            			ENDIF_
0864   D427~            			ENDIF_
0864   D427             
0864   D424             
0864   D424 02          
0864   D425             
0864   D425             
0864   D425~            			ENDIF_
0864   D425~            			ENDIF_
0864   D425~            			ENDIF_
0864   D425~            			ENDIF_
0864   D425~            			ENDIF_
0864   D425             
0864   D427             
0864   D427~            			ENDIF_
0864   D427~            			ENDIF_
0864   D427             
0865   D427                   		BITOFF2_($5E)			;Turn OFF: Lamp#1E(loop_x)
0865   D427             
0865   D427 21 5E       
0866   D429             			BITON2_($1E)			;Turn ON: Lamp#1E(loop_x)
0866   D429             
0866   D429 20 1E       
0867   D42B             			SLEEP_(64)
0867   D42B~            			SLEEP_(64)
0867   D42B~            			SLEEP_(64)
0867   D42B             
0867   D42B 53 40       
0867   D42D             
0868   D42D             			BITOFF_($1E)			;Turn OFF: Lamp#1E(loop_x)
0868   D42D             
0868   D42D 11 1E       
0869   D42F             			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
0869   D42F             
0869   D42F 21 1E       
0870   D431             			KILL_					;Remove This Thread
0870   D431 03          
0871   D432             
0872   D432             ;**********************************************************************
0873   D432             ;* Left Magnet Button
0874   D432             ;**********************************************************************
0875   D432             sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0875   D432             
0875   D432             
0875   D432             
0875   D432 5AFBFBF5066D
0875   D438 4FFB
0875   D43A~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0875   D43A~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0875   D43A~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0875   D43A~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0875   D43A~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0875   D43A~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0875   D43A             
0876   D43A             				PRI_($09)				;Priority=#09
0876   D43A 52 09       
0877   D43C             				;This code removed to fix the left mag bug
0878   D43C             				;SETRAM_(regb,$2B)			;RAM$01=$2B
0879   D43C             				;JSRR_(gj_15)			
0880   D43C             				BITON_($6D)				;Turn ON: Bit#2D - this will protect us from reentering here again
0880   D43C             
0880   D43C 10 6D       
0881   D43E             				SOL_(leftmag_on)		      ;Turn ON Sol#21:left_magnet
0881   D43E 31 F4       
0882   D440             				BEGIN_
0882   D440             
0883   D440             					SETRAM_(regb,$2B)			;RAM$01=$2B
0883   D440~            					SETRAM_(regb,$2B)			;RAM$01=$2B
0883   D440~            					SETRAM_(regb,$2B)			;RAM$01=$2B
0883   D440             
0883   D440 C1 2B       
0884   D442             					JSRR_(gj_15)			
0884   D442~            					JSRR_(gj_15)			
0884   D442~            					JSRR_(gj_15)			
0884   D442             
0884   D442~            					JSRR_(gj_15)			
0884   D442~            					JSRR_(gj_15)			
0884   D442             
0884   D442             
0884   D442 90          
0884   D443 22          
0885   D444             					RCLR1L0_($06)			;Effect: Range #06
0885   D444             
0885   D444 1C 06       
0886   D446             					SETRAM_(rega,$20)			;RAM$00=$20
0886   D446~            					SETRAM_(rega,$20)			;RAM$00=$20
0886   D446~            					SETRAM_(rega,$20)			;RAM$00=$20
0886   D446             
0886   D446 C0 20       
0887   D448             					BEGIN_
0887   D448             
0888   D448             						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0888   D448~            						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0888   D448~            						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0888   D448             
0888   D448~            						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0888   D448~            						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0888   D448             
0888   D448             
0888   D448 90          
0888   D449 26          
0889   D44A             											;magnet on time is 20 ticks.		
0890   D44A             						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0890   D44A             
0890   D44A 5B F8 31 0F 
0890   D44E~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0890   D44E~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0890   D44E~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0890   D44E~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0890   D44E~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0890   D44E~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0890   D44E             
0891   D44E             					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D44E             
0891   D44E 5BFCE000FE  
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453             
0891   D453             
0891   D453             
0891   D453             
0891   D453             
0891   D453             
0891   D453             
0891   D452             
0891   D452 F5          
0891   D453             
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453             
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0891   D453             
0892   D453             					ADDRAM_(regb,$C0)			;RAM$01+=$C0
0892   D453~            					ADDRAM_(regb,$C0)			;RAM$01+=$C0
0892   D453~            					ADDRAM_(regb,$C0)			;RAM$01+=$C0
0892   D453             
0892   D453 B1 C0       
0893   D455             					BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0893   D455             
0893   D455 25 01       
0894   D457             				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D457             
0894   D457 5B F5 06 FF 
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B             
0894   D45B             
0894   D45B             
0894   D45B             
0894   D45B             
0894   D45B             
0894   D45B             
0894   D45A             
0894   D45A E5          
0894   D45B             
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B             
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0894   D45B             
0895   D45B             				;Here if we are out of magna-saves
0896   D45B             				ADDRAM_(regb,$40)			;RAM$01+=$40
0896   D45B~            				ADDRAM_(regb,$40)			;RAM$01+=$40
0896   D45B~            				ADDRAM_(regb,$40)			;RAM$01+=$40
0896   D45B             
0896   D45B B1 40       
0897   D45D             lmag_off			SOL_(leftmag_off)             ;Turn OFF Sol#21:left_magnet
0897   D45D 31 14       
0898   D45F             				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0898   D45F~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0898   D45F~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0898   D45F             
0898   D45F B1 C0       
0899   D461             				BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0899   D461             
0899   D461 25 01       
0900   D463             				BITOFF_($6D)			;Turn OFF: Bit#2D
0900   D463             
0900   D463 11 6D       
0901   D465             			ENDIF_
0901   D465             
0901   D465             
0901   D465             
0901   D465             
0901   D465             
0901   D465~            			ENDIF_
0901   D465~            			ENDIF_
0901   D465             
0901   D465~            			ENDIF_
0901   D465~            			ENDIF_
0901   D465             
0901   D439             
0901   D439 2B          
0901   D43A             
0901   D43A             
0901   D43A~            			ENDIF_
0901   D43A~            			ENDIF_
0901   D43A~            			ENDIF_
0901   D43A~            			ENDIF_
0901   D43A~            			ENDIF_
0901   D43A             
0901   D465             
0901   D465~            			ENDIF_
0901   D465~            			ENDIF_
0901   D465             
0902   D465             kill_2		KILL_					;Remove This Thread
0902   D465 03          
0903   D466             
0904   D466             
0905   D466             gj_15			BEGIN_
0905   D466             
0906   D466             				ADDRAM_(regb,-1)			;RAM$01-=1
0906   D466~            				ADDRAM_(regb,-1)			;RAM$01-=1
0906   D466~            				ADDRAM_(regb,-1)			;RAM$01-=1
0906   D466             
0906   D466 B1 FF       
0907   D468             			EQEND_($E1)				;BNER_RAM$01
0907   D468             
0907   D468 5B E1 00    
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B             
0907   D46B             
0907   D46B             
0907   D46B             
0907   D46B             
0907   D46B             
0907   D46B             
0907   D46A             
0907   D46A FB          
0907   D46B             
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B             
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B~            			EQEND_($E1)				;BNER_RAM$01
0907   D46B             
0908   D46B             			BITONP2_(regb)			;Turn ON Lamp/Bit @RAM:01
0908   D46B             
0908   D46B 24 01       
0909   D46D             			ADDRAM_(regb,$40)			;RAM$01+=$40
0909   D46D~            			ADDRAM_(regb,$40)			;RAM$01+=$40
0909   D46D~            			ADDRAM_(regb,$40)			;RAM$01+=$40
0909   D46D             
0909   D46D B1 40       
0910   D46F             			MRTS_					;Macro RTS, Save MRA,MRB
0910   D46F 02          
0911   D470             
0912   D470             ;**********************************************************************
0913   D470             ;* Routine to do the lamp effect for the magna-save. It will also
0914   D470             ;* decrement RAM $00 which is the minimum magnet on time counter and 
0915   D470             ;* create the magna-save sound.
0916   D470             ;**********************************************************************
0917   D470             mag_tick		SLEEP_(2)
0917   D470             
0917   D470 72          
0917   D471~            mag_tick		SLEEP_(2)
0917   D471~            mag_tick		SLEEP_(2)
0917   D471             
0918   D471             			BITINVP2_(regb)			;Toggle Lamp/Bit @RAM:01
0918   D471             
0918   D471 26 01       
0919   D473             			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0919   D473             
0919   D473             
0919   D473             
0919   D473 5BFAF9C0E1F3
0919   D479 FBFCE16AFCE14BF5
0919   D481~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0919   D481~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0919   D481~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0919   D481~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0919   D481~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0919   D481~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0919   D481             
0920   D481             				;BNER_((!(RAM$01==#75 || RAM$01==#106)) && (RAM$01 + BIT#80)) 
0921   D481             				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0921   D481~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0921   D481~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0921   D481             
0921   D481 B1 C0       
0922   D483             				BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0922   D483             
0922   D483 25 01       
0923   D485             				ADDRAM_(regb,$01)			;RAM$01+=$01
0923   D485~            				ADDRAM_(regb,$01)			;RAM$01+=$01
0923   D485~            				ADDRAM_(regb,$01)			;RAM$01+=$01
0923   D485             
0923   D485 B1 01       
0924   D487             				BITONP2_(regb)			;Turn ON Lamp/Bit @RAM:01
0924   D487             
0924   D487 24 01       
0925   D489             				ADDRAM_(regb,$40)			;RAM$01+=$40
0925   D489~            				ADDRAM_(regb,$40)			;RAM$01+=$40
0925   D489~            				ADDRAM_(regb,$40)			;RAM$01+=$40
0925   D489             
0925   D489 B1 40       
0926   D48B             			ENDIF_
0926   D48B             
0926   D48B             
0926   D48B             
0926   D48B             
0926   D48B             
0926   D48B~            			ENDIF_
0926   D48B~            			ENDIF_
0926   D48B             
0926   D48B~            			ENDIF_
0926   D48B~            			ENDIF_
0926   D48B             
0926   D480             
0926   D480 0A          
0926   D481             
0926   D481             
0926   D481~            			ENDIF_
0926   D481~            			ENDIF_
0926   D481~            			ENDIF_
0926   D481~            			ENDIF_
0926   D481~            			ENDIF_
0926   D481             
0926   D48B             
0926   D48B~            			ENDIF_
0926   D48B~            			ENDIF_
0926   D48B             
0927   D48B             			ADDRAM_(rega,-1)			;RAM$00-=1
0927   D48B~            			ADDRAM_(rega,-1)			;RAM$00-=1
0927   D48B~            			ADDRAM_(rega,-1)			;RAM$00-=1
0927   D48B             
0927   D48B B0 FF       
0928   D48D             			SSND_($1A)				;Sound #1A
0928   D48D             
0928   D48D FA          
0928   D48E~            			SSND_($1A)				;Sound #1A
0928   D48E~            			SSND_($1A)				;Sound #1A
0928   D48E~            			SSND_($1A)				;Sound #1A
0928   D48E             
0929   D48E             			MRTS_					;Macro RTS, Save MRA,MRB
0929   D48E 02          
0930   D48F             ;**********************************************************************
0931   D48F             ;* Right Magnet Button
0932   D48F             ;**********************************************************************
0933   D48F             sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0933   D48F             
0933   D48F 5AFBFBF5056E
0933   D495 4FCE
0933   D497~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0933   D497~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0933   D497~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0933   D497~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0933   D497~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0933   D497~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0933   D497             
0934   D497             			PRI_($09)				;Priority=#09
0934   D497 52 09       
0935   D499             			BITON_($6E)				;Bit#2E=1 - this will protect us from reentering here again
0935   D499             
0935   D499 10 6E       
0936   D49B             			SOL_(rightmag_on)            	;Turn ON Sol#6:right_magnet
0936   D49B 31 F5       
0937   D49D             			BEGIN_
0937   D49D             
0938   D49D             				SETRAM_(regb,$0C)			;RAM$01=$0C
0938   D49D~            				SETRAM_(regb,$0C)			;RAM$01=$0C
0938   D49D~            				SETRAM_(regb,$0C)			;RAM$01=$0C
0938   D49D             
0938   D49D C1 0C       
0939   D49F             				JSRR_(gj_15)			
0939   D49F~            				JSRR_(gj_15)			
0939   D49F~            				JSRR_(gj_15)			
0939   D49F             
0939   D49F~            				JSRR_(gj_15)			
0939   D49F~            				JSRR_(gj_15)			
0939   D49F             
0939   D49F             
0939   D49F 9F          
0939   D4A0 C5          
0940   D4A1             				RCLR1L0_($05)				;Effect: Range #05
0940   D4A1             
0940   D4A1 1C 05       
0941   D4A3             				SETRAM_(rega,$20)			;RAM$00=$20
0941   D4A3~            				SETRAM_(rega,$20)			;RAM$00=$20
0941   D4A3~            				SETRAM_(rega,$20)			;RAM$00=$20
0941   D4A3             
0941   D4A3 C0 20       
0942   D4A5             				BEGIN_
0942   D4A5             
0943   D4A5             					JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0943   D4A5~            					JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0943   D4A5~            					JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0943   D4A5             
0943   D4A5~            					JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0943   D4A5~            					JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0943   D4A5             
0943   D4A5             
0943   D4A5 9F          
0943   D4A6 C9          
0944   D4A7             											;magnet on time is $20 ticks.		
0945   D4A7             					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0945   D4A7             
0945   D4A7 5B F8 30 0F 
0945   D4AB~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0945   D4AB~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0945   D4AB~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0945   D4AB~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0945   D4AB~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0945   D4AB~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0945   D4AB             
0946   D4AB             	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4AB             
0946   D4AB 5BFCE000FE  
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0             
0946   D4B0             
0946   D4B0             
0946   D4B0             
0946   D4B0             
0946   D4B0             
0946   D4B0             
0946   D4AF             
0946   D4AF F5          
0946   D4B0             
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0             
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0946   D4B0             
0947   D4B0             	      		ADDRAM_(regb,$C0)			;RAM$01+=$C0
0947   D4B0~            	      		ADDRAM_(regb,$C0)			;RAM$01+=$C0
0947   D4B0~            	      		ADDRAM_(regb,$C0)			;RAM$01+=$C0
0947   D4B0             
0947   D4B0 B1 C0       
0948   D4B2             	      		BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0948   D4B2             
0948   D4B2 25 01       
0949   D4B4                   		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B4             
0949   D4B4 5B F5 05 FF 
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8             
0949   D4B8             
0949   D4B8             
0949   D4B8             
0949   D4B8             
0949   D4B8             
0949   D4B8             
0949   D4B7             
0949   D4B7 E5          
0949   D4B8             
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8             
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0949   D4B8             
0950   D4B8                   		;Here if we are out of magna-saves
0951   D4B8                   		ADDRAM_(regb,$40)			;RAM$01+=$40
0951   D4B8~                  		ADDRAM_(regb,$40)			;RAM$01+=$40
0951   D4B8~                  		ADDRAM_(regb,$40)			;RAM$01+=$40
0951   D4B8             
0951   D4B8 B1 40       
0952   D4BA             rmag_off		SOL_(rightmag_off)            ;Turn OFF Sol#6:right_magnet
0952   D4BA 31 15       
0953   D4BC             			ADDRAM_(regb,$C0)			;RAM$01+=$C0
0953   D4BC~            			ADDRAM_(regb,$C0)			;RAM$01+=$C0
0953   D4BC~            			ADDRAM_(regb,$C0)			;RAM$01+=$C0
0953   D4BC             
0953   D4BC B1 C0       
0954   D4BE             			BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0954   D4BE             
0954   D4BE 25 01       
0955   D4C0             			BITOFF_($6E)			;Bit#2E=0 Set the magnet status bit
0955   D4C0             
0955   D4C0 11 6E       
0956   D4C2             			KILL_					;Remove This Thread
0956   D4C2 03          
0957   D4C3             
0958   D4C3             ;**********************************************************************
0959   D4C3             ;* Player Initialization: Called from System at start of each ball. 
0960   D4C3             ;*                        This will flash the high score between balls.
0961   D4C3             ;**********************************************************************
0962   D4C3 96 60       hook_playerinit	ldaa	comma_flags
0963   D4C5 97 E1       			staa	spare_ram+1
0964   D4C7 7F 00 E5    			clr	spare_ram+5
0965   D4CA BD F3 AB    			jsr	macro_start
0966   D4CD             			PRI_($05)				;Priority=#05
0966   D4CD 52 05       
0967   D4CF             			BITON_($4F)				;Turn ON: Bit#0F
0967   D4CF             
0967   D4CF 10 4F       
0968   D4D1             			CPUX_					;Resume CPU Execution
0968   D4D1 04          
0969   D4D2 CE 01 81    			ldx	#adj_backuphstd
0970   D4D5 BD EF 53    			jsr	cmosinc_a
0971   D4D8             			ifne
0971   D4D8             
0971   D4D8 27 FE       
0972   D4DA DE CE       				ldx	pscore_buf
0973   D4DC A6 00       				ldaa	$00,X
0974   D4DE 4C          				inca	
0975   D4DF             				ifne
0975   D4DF             
0975   D4DF 27 FE       
0976   D4E1 BD FA 0B    					jsr	show_hstd
0977   D4E4 86 7F       					ldaa	#$7F
0978   D4E6 BD F8 A4    					jsr	store_display_mask
0979   D4E9 86 FF       					ldaa	#$FF
0980   D4EB 97 60       					staa	comma_flags
0981   D4ED 86 1D       					ldaa	#$1D
0982   D4EF BD EC FC    					jsr	isnd_once
0983   D4F2 86 05       					ldaa	#$05
0984   D4F4 BD F1 69    					jsr	lamp_flash
0985   D4F7 BD EA 2F    					jsr	addthread
0986   D4FA 80          					.db $80
0987   D4FB             		
0988   D4FB BD F1 5B    					jsr	lamp_off
0989   D4FE 96 E1       					ldaa	spare_ram+1
0990   D500 97 60       					staa	comma_flags
0991   D502 4F          					clra	
0992   D503 BD F8 A4    					jsr	store_display_mask
0993   D506             				endif
0993   D506             
0993   D506             
0993   D506             
0993   D506             
0993   D506             
0993   D506~            				endif
0993   D506~            				endif
0993   D506             
0993   D506~            				endif
0993   D506~            				endif
0993   D506             
0993   D4E0             
0993   D4E0 25          
0993   D4E1             
0993   D4E1             
0993   D4E1~            				endif
0993   D4E1~            				endif
0993   D4E1~            				endif
0993   D4E1             
0993   D506             
0993   D506~            				endif
0993   D506~            				endif
0993   D506             
0994   D506             			endif
0994   D506             
0994   D506             
0994   D506             
0994   D506             
0994   D506             
0994   D506~            			endif
0994   D506~            			endif
0994   D506             
0994   D506~            			endif
0994   D506~            			endif
0994   D506             
0994   D4D9             
0994   D4D9 2C          
0994   D4DA             
0994   D4DA             
0994   D4DA~            			endif
0994   D4DA~            			endif
0994   D4DA~            			endif
0994   D4DA             
0994   D506             
0994   D506~            			endif
0994   D506~            			endif
0994   D506             
0995   D506 BD F3 AB    			jsr	macro_start
0996   D509             			IFNER_($61)			      ;BEQR_BIT#21
0996   D509             
0996   D509             
0996   D509             
0996   D509 5A 61 00    
0996   D50C~            			IFNER_($61)			      ;BEQR_BIT#21
0996   D50C~            			IFNER_($61)			      ;BEQR_BIT#21
0996   D50C~            			IFNER_($61)			      ;BEQR_BIT#21
0996   D50C~            			IFNER_($61)			      ;BEQR_BIT#21
0996   D50C~            			IFNER_($61)			      ;BEQR_BIT#21
0996   D50C~            			IFNER_($61)			      ;BEQR_BIT#21
0996   D50C             
0997   D50C                   			SLEEP_(96)
0997   D50C~                  			SLEEP_(96)
0997   D50C~                  			SLEEP_(96)
0997   D50C             
0997   D50C 53 60       
0997   D50E             
0998   D50E                   			BITON_($61)				;Turn ON: Bit#21
0998   D50E             
0998   D50E 10 61       
0999   D510                   		ENDIF_
0999   D510             
0999   D510             
0999   D510             
0999   D510             
0999   D510             
0999   D510~                  		ENDIF_
0999   D510~                  		ENDIF_
0999   D510             
0999   D510~                  		ENDIF_
0999   D510~                  		ENDIF_
0999   D510             
0999   D50B             
0999   D50B 04          
0999   D50C             
0999   D50C             
0999   D50C~                  		ENDIF_
0999   D50C~                  		ENDIF_
0999   D50C~                  		ENDIF_
0999   D50C~                  		ENDIF_
0999   D50C~                  		ENDIF_
0999   D50C             
0999   D510             
0999   D510~                  		ENDIF_
0999   D510~                  		ENDIF_
0999   D510             
1000   D510             			RCLR1_($47)				;Effect: Range #07
1000   D510             
1000   D510 29 47       
1001   D512             			JSR_(add_drainshield)			
1001   D512 56          
1001   D513 E2 15       
1002   D515             			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
1002   D515             
1002   D515             
1002   D515             
1002   D515 5BFCFF0FD701
1002   D51B FC
1002   D51C~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
1002   D51C~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
1002   D51C~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
1002   D51C~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
1002   D51C~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
1002   D51C~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
1002   D51C             
1003   D51C             				RCLR0_($06,$05)			;Effect: Range #06 Range #05
1003   D51C             
1003   D51C 19 86 05    
1004   D51F             			ENDIF_
1004   D51F             
1004   D51F             
1004   D51F             
1004   D51F             
1004   D51F             
1004   D51F~            			ENDIF_
1004   D51F~            			ENDIF_
1004   D51F             
1004   D51F~            			ENDIF_
1004   D51F~            			ENDIF_
1004   D51F             
1004   D51B             
1004   D51B 03          
1004   D51C             
1004   D51C             
1004   D51C~            			ENDIF_
1004   D51C~            			ENDIF_
1004   D51C~            			ENDIF_
1004   D51C~            			ENDIF_
1004   D51C~            			ENDIF_
1004   D51C             
1004   D51F             
1004   D51F~            			ENDIF_
1004   D51F~            			ENDIF_
1004   D51F             
1005   D51F             			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
1005   D51F             
1005   D51F             
1005   D51F             
1005   D51F 5AFCD901FE  
1005   D524~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
1005   D524~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
1005   D524~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
1005   D524~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
1005   D524~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
1005   D524~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
1005   D524             
1006   D524                   			EXE_
1006   D524             
1006   D524 44          
1007   D525                   			      NEWTHREAD(bg_snd)			;Start the BG Sound
1007   D525 CE D5 BC    
1007   D528 BD EA C4    
1008   D52B                   			EXEEND_
1008   D52B             
1008   D52B             
1008   D52B             
1008   D52B             
1008   D52B~                  			EXEEND_
1008   D52B~                  			EXEEND_
1008   D52B             
1008   D524             
1008   D524 48          
1008   D525             
1008   D52B             
1008   D52B~                  			EXEEND_
1008   D52B~                  			EXEEND_
1008   D52B             
1009   D52B                   		ENDIF_
1009   D52B             
1009   D52B             
1009   D52B             
1009   D52B             
1009   D52B             
1009   D52B~                  		ENDIF_
1009   D52B~                  		ENDIF_
1009   D52B             
1009   D52B~                  		ENDIF_
1009   D52B~                  		ENDIF_
1009   D52B             
1009   D523             
1009   D523 07          
1009   D524             
1009   D524             
1009   D524~                  		ENDIF_
1009   D524~                  		ENDIF_
1009   D524~                  		ENDIF_
1009   D524~                  		ENDIF_
1009   D524~                  		ENDIF_
1009   D524             
1009   D52B             
1009   D52B~                  		ENDIF_
1009   D52B~                  		ENDIF_
1009   D52B             
1010   D52B             			IFEQR_($52)			;BNER_BIT#12
1010   D52B             
1010   D52B             
1010   D52B             
1010   D52B 5B 52 00    
1010   D52E~            			IFEQR_($52)			;BNER_BIT#12
1010   D52E~            			IFEQR_($52)			;BNER_BIT#12
1010   D52E~            			IFEQR_($52)			;BNER_BIT#12
1010   D52E~            			IFEQR_($52)			;BNER_BIT#12
1010   D52E~            			IFEQR_($52)			;BNER_BIT#12
1010   D52E~            			IFEQR_($52)			;BNER_BIT#12
1010   D52E             
1011   D52E                   			EXE_
1011   D52E             
1011   D52E 44          
1012   D52F                   			      NEWTHREAD(udt_init)		;Set up the Upper drop Targets
1012   D52F CE D7 1F    
1012   D532 BD EA C4    
1013   D535                   			EXEEND_
1013   D535             
1013   D535             
1013   D535             
1013   D535             
1013   D535~                  			EXEEND_
1013   D535~                  			EXEEND_
1013   D535             
1013   D52E             
1013   D52E 48          
1013   D52F             
1013   D535             
1013   D535~                  			EXEEND_
1013   D535~                  			EXEEND_
1013   D535             
1014   D535                   	      ELSE_			
1014   D535             
1014   D535             
1014   D535             
1014   D535             
1014   D52D             
1014   D52D             
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D             
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D~                  	      ELSE_			
1014   D52D             
1014   D52D             
1014   D52D 09          
1014   D535             
1014   D535             
1014   D535~                  	      ELSE_			
1014   D535~                  	      ELSE_			
1014   D535             
1014   D535~                  	      ELSE_			
1014   D535~                  	      ELSE_			
1014   D535             
1014   D535             
1014   D535 80          
1014   D536 00          
1014   D537             
1014   D537             
1014   D537             
1014   D537~                  	      ELSE_			
1014   D537~                  	      ELSE_			
1014   D537             
1014   D537~                  	      ELSE_			
1014   D537~                  	      ELSE_			
1014   D537             
1015   D537             			      JSR_(udt_setup)
1015   D537 56          
1015   D538 E5 A6       
1016   D53A             			ENDIF_				
1016   D53A             
1016   D53A             
1016   D53A             
1016   D53A             
1016   D53A             
1016   D53A~            			ENDIF_				
1016   D53A~            			ENDIF_				
1016   D53A             
1016   D53A~            			ENDIF_				
1016   D53A~            			ENDIF_				
1016   D53A             
1016   D536             
1016   D536 03          
1016   D537             
1016   D537             
1016   D537~            			ENDIF_				
1016   D537~            			ENDIF_				
1016   D537~            			ENDIF_				
1016   D537~            			ENDIF_				
1016   D537~            			ENDIF_				
1016   D537             
1016   D53A             
1016   D53A~            			ENDIF_				
1016   D53A~            			ENDIF_				
1016   D53A             
1017   D53A             			SOL_(dtleft_on,dtright_on,gi_off,buzzer_off,bell_off)	
1017   D53A 35636402050E
1018   D540                                                             ;Sol#4:dt_left ON  
1019   D540             								;Sol#5:dt_right ON  
1020   D540             								;Sol#3:GI OFF  
1021   D540             								;Sol#6:buzzer OFF  
1022   D540             								;Sol#15:bell OFF
1023   D540             			SETRAM_($0C,$00)			;RAM$0C=$00	Reset GI counter
1023   D540~            			SETRAM_($0C,$00)			;RAM$0C=$00	Reset GI counter
1023   D540~            			SETRAM_($0C,$00)			;RAM$0C=$00	Reset GI counter
1023   D540             
1023   D540 CC 00       
1024   D542             			SETRAM_($0E,$00)			;RAM$0E=$00	Reset Bell counter
1024   D542~            			SETRAM_($0E,$00)			;RAM$0E=$00	Reset Bell counter
1024   D542~            			SETRAM_($0E,$00)			;RAM$0E=$00	Reset Bell counter
1024   D542             
1024   D542 CE 00       
1025   D544             			SETRAM_($0F,$00)			;RAM$0F=$00 Reset Buzzer counter
1025   D544~            			SETRAM_($0F,$00)			;RAM$0F=$00 Reset Buzzer counter
1025   D544~            			SETRAM_($0F,$00)			;RAM$0F=$00 Reset Buzzer counter
1025   D544             
1025   D544 CF 00       
1026   D546             			IFEQR_($41)			      ;BNER_BIT#01 
1026   D546             
1026   D546             
1026   D546             
1026   D546 5B 41 00    
1026   D549~            			IFEQR_($41)			      ;BNER_BIT#01 
1026   D549~            			IFEQR_($41)			      ;BNER_BIT#01 
1026   D549~            			IFEQR_($41)			      ;BNER_BIT#01 
1026   D549~            			IFEQR_($41)			      ;BNER_BIT#01 
1026   D549~            			IFEQR_($41)			      ;BNER_BIT#01 
1026   D549~            			IFEQR_($41)			      ;BNER_BIT#01 
1026   D549             
1027   D549             			      JSRD_(lock_thread)
1027   D549 57          
1027   D54A D7 0F       
1028   D54C             			ENDIF_			
1028   D54C             
1028   D54C             
1028   D54C             
1028   D54C             
1028   D54C             
1028   D54C~            			ENDIF_			
1028   D54C~            			ENDIF_			
1028   D54C             
1028   D54C~            			ENDIF_			
1028   D54C~            			ENDIF_			
1028   D54C             
1028   D548             
1028   D548 03          
1028   D549             
1028   D549             
1028   D549~            			ENDIF_			
1028   D549~            			ENDIF_			
1028   D549~            			ENDIF_			
1028   D549~            			ENDIF_			
1028   D549~            			ENDIF_			
1028   D549             
1028   D54C             
1028   D54C~            			ENDIF_			
1028   D54C~            			ENDIF_			
1028   D54C             
1029   D54C             			JSRR_(do_trough)			
1029   D54C~            			JSRR_(do_trough)			
1029   D54C~            			JSRR_(do_trough)			
1029   D54C             
1029   D54C~            			JSRR_(do_trough)			
1029   D54C~            			JSRR_(do_trough)			
1029   D54C             
1029   D54C             
1029   D54C 93          
1029   D54D E9          
1030   D54E             			BITOFF_($55)			;Turn OFF: Bit#15
1030   D54E             
1030   D54E 11 55       
1031   D550             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
1031   D550 55 F8 D0    
1032   D553             			JSRDR_(cpdisp_show)		
1032   D553~            			JSRDR_(cpdisp_show)		
1032   D553~            			JSRDR_(cpdisp_show)		
1032   D553             
1032   D553~            			JSRDR_(cpdisp_show)		
1032   D553~            			JSRDR_(cpdisp_show)		
1032   D553             
1032   D553             
1032   D553 A2          
1032   D554 43          
1033   D555             			BITOFF_($4F)			;Turn OFF: Bit#0F
1033   D555             
1033   D555 11 4F       
1034   D557             			BITOFF_($7F)			;Clear the full-bonus flag
1034   D557             
1034   D557 11 7F       
1035   D559             			BITOFF_($7E)			;Clear the bonus effect flag
1035   D559             
1035   D559 11 7E       
1036   D55B             			BITOFF_($7D)			;Clear the lamp animation flag
1036   D55B             
1036   D55B 11 7D       
1037   D55D 5EA5A6981C  			SWCLR_($A5,$A6,$98,$1C)		;Clear Sw#: $25(upper_eject) $26(lower_eject) $18(dt_rb) $1C(dt_ll)
1038   D562             			CPUX_					;Resume CPU Execution
1038   D562 04          
1039   D563 39          			rts	
1040   D564             			
1041   D564 36          alllamps_off	psha	
1042   D565 96 E5       			ldaa	spare_ram+5
1043   D567 4C          			inca	
1044   D568 97 E5       			staa	spare_ram+5
1045   D56A 86 C8       			ldaa	#$C8
1046   D56C BD F2 08    			jsr	lampm_8
1047   D56F 32          			pula	
1048   D570 39          			rts
1049   D571             				
1050   D571 36          alllamps_on		psha	
1051   D572 96 E5       			ldaa	spare_ram+5
1052   D574             			ifne
1052   D574             
1052   D574 27 FE       
1053   D576 4A          				deca	
1054   D577 97 E5       				staa	spare_ram+5
1055   D579 26 05       				bne	alllamps_on_end
1056   D57B             			endif
1056   D57B             
1056   D57B             
1056   D57B             
1056   D57B             
1056   D57B             
1056   D57B~            			endif
1056   D57B~            			endif
1056   D57B             
1056   D57B~            			endif
1056   D57B~            			endif
1056   D57B             
1056   D575             
1056   D575 05          
1056   D576             
1056   D576             
1056   D576~            			endif
1056   D576~            			endif
1056   D576~            			endif
1056   D576             
1056   D57B             
1056   D57B~            			endif
1056   D57B~            			endif
1056   D57B             
1057   D57B 86 C8       			ldaa	#$C8
1058   D57D BD F1 A7    			jsr	lampm_off
1059   D580 32          alllamps_on_end	pula	
1060   D581 39          			rts	
1061   D582             
1062   D582             ;**********************************************************
1063   D582             ;* Bell Routines
1064   D582             ;**********************************************************			
1065   D582             bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
1065   D582             
1065   D582             
1065   D582             
1065   D582 5BFCFFD8F2F0
1065   D588 00FB
1065   D58A~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
1065   D58A~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
1065   D58A~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
1065   D58A~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
1065   D58A~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
1065   D58A~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
1065   D58A             
1066   D58A             				ADDRAM_($0E,$01)			;RAM$0E+=$01
1066   D58A~            				ADDRAM_($0E,$01)			;RAM$0E+=$01
1066   D58A~            				ADDRAM_($0E,$01)			;RAM$0E+=$01
1066   D58A             
1066   D58A BE 01       
1067   D58C             				SOL_(bell_on)			;Turn ON Sol#15:bell
1067   D58C 31 EE       
1068   D58E             			ENDIF_
1068   D58E             
1068   D58E             
1068   D58E             
1068   D58E             
1068   D58E             
1068   D58E~            			ENDIF_
1068   D58E~            			ENDIF_
1068   D58E             
1068   D58E~            			ENDIF_
1068   D58E~            			ENDIF_
1068   D58E             
1068   D589             
1068   D589 04          
1068   D58A             
1068   D58A             
1068   D58A~            			ENDIF_
1068   D58A~            			ENDIF_
1068   D58A~            			ENDIF_
1068   D58A~            			ENDIF_
1068   D58A~            			ENDIF_
1068   D58A             
1068   D58E             
1068   D58E~            			ENDIF_
1068   D58E~            			ENDIF_
1068   D58E             
1069   D58E             mrts_1		MRTS_					;Macro RTS, Save MRA,MRB
1069   D58E 02          
1070   D58F             
1071   D58F             bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
1071   D58F             
1071   D58F             
1071   D58F             
1071   D58F 5AFCEE00FE  
1071   D594~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
1071   D594~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
1071   D594~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
1071   D594~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
1071   D594~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
1071   D594~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
1071   D594             
1072   D594             			      ADDRAM_($0E,-1)			;RAM$0E-=1
1072   D594~            			      ADDRAM_($0E,-1)			;RAM$0E-=1
1072   D594~            			      ADDRAM_($0E,-1)			;RAM$0E-=1
1072   D594             
1072   D594 BE FF       
1073   D596             			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
1073   D596             
1073   D596 5BFCEE00F3  
1073   D59B~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
1073   D59B~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
1073   D59B~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
1073   D59B~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
1073   D59B~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
1073   D59B~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
1073   D59B             
1074   D59B             			ENDIF_
1074   D59B             
1074   D59B             
1074   D59B             
1074   D59B             
1074   D59B             
1074   D59B~            			ENDIF_
1074   D59B~            			ENDIF_
1074   D59B             
1074   D59B~            			ENDIF_
1074   D59B~            			ENDIF_
1074   D59B             
1074   D593             
1074   D593 07          
1074   D594             
1074   D594             
1074   D594~            			ENDIF_
1074   D594~            			ENDIF_
1074   D594~            			ENDIF_
1074   D594~            			ENDIF_
1074   D594~            			ENDIF_
1074   D594             
1074   D59B             
1074   D59B~            			ENDIF_
1074   D59B~            			ENDIF_
1074   D59B             
1075   D59B             			SOL_(bell_off)    		;Turn OFF Sol#15:bell
1075   D59B 31 0E       
1076   D59D             			MRTS_					;Macro RTS, Save MRA,MRB
1076   D59D 02          
1077   D59E             
1078   D59E             ;**********************************************************
1079   D59E             ;* Buzzer Routines
1080   D59E             ;**********************************************************
1081   D59E             buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
1081   D59E             
1081   D59E 5BFCFFD80F00
1081   D5A4 E9
1081   D5A5~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
1081   D5A5~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
1081   D5A5~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
1081   D5A5~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
1081   D5A5~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
1081   D5A5~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
1081   D5A5             
1082   D5A5             			ADDRAM_($0F,$01)			;RAM$0F+=$01
1082   D5A5~            			ADDRAM_($0F,$01)			;RAM$0F+=$01
1082   D5A5~            			ADDRAM_($0F,$01)			;RAM$0F+=$01
1082   D5A5             
1082   D5A5 BF 01       
1083   D5A7             			SOL_(buzzer_on)              	;Turn ON Sol#6:buzzer
1083   D5A7 31 E5       
1084   D5A9             			MRTS_					;Macro RTS, Save MRA,MRB
1084   D5A9 02          
1085   D5AA             
1086   D5AA             buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
1086   D5AA             
1086   D5AA             
1086   D5AA             
1086   D5AA 5AFCEF00FE  
1086   D5AF~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
1086   D5AF~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
1086   D5AF~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
1086   D5AF~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
1086   D5AF~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
1086   D5AF~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
1086   D5AF             
1087   D5AF             			      ADDRAM_($0F,-1)			;RAM$0F-=1
1087   D5AF~            			      ADDRAM_($0F,-1)			;RAM$0F-=1
1087   D5AF~            			      ADDRAM_($0F,-1)			;RAM$0F-=1
1087   D5AF             
1087   D5AF BF FF       
1088   D5B1             			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
1088   D5B1             
1088   D5B1 5BFCEF00D8  
1088   D5B6~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
1088   D5B6~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
1088   D5B6~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
1088   D5B6~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
1088   D5B6~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
1088   D5B6~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
1088   D5B6             
1089   D5B6             			ENDIF_
1089   D5B6             
1089   D5B6             
1089   D5B6             
1089   D5B6             
1089   D5B6             
1089   D5B6~            			ENDIF_
1089   D5B6~            			ENDIF_
1089   D5B6             
1089   D5B6~            			ENDIF_
1089   D5B6~            			ENDIF_
1089   D5B6             
1089   D5AE             
1089   D5AE 07          
1089   D5AF             
1089   D5AF             
1089   D5AF~            			ENDIF_
1089   D5AF~            			ENDIF_
1089   D5AF~            			ENDIF_
1089   D5AF~            			ENDIF_
1089   D5AF~            			ENDIF_
1089   D5AF             
1089   D5B6             
1089   D5B6~            			ENDIF_
1089   D5B6~            			ENDIF_
1089   D5B6             
1090   D5B6             			SOL_(buzzer_off)            	;Turn OFF Sol#6:buzzer
1090   D5B6 31 05       
1091   D5B8             			MRTS_					;Macro RTS, Save MRA,MRB
1091   D5B8 02          
1092   D5B9             
1093   D5B9             
1094   D5B9             
1095   D5B9             
1096   D5B9             trough_kill		JSRR_(do_trough)			
1096   D5B9~            trough_kill		JSRR_(do_trough)			
1096   D5B9~            trough_kill		JSRR_(do_trough)			
1096   D5B9             
1096   D5B9~            trough_kill		JSRR_(do_trough)			
1096   D5B9~            trough_kill		JSRR_(do_trough)			
1096   D5B9             
1096   D5B9             
1096   D5B9 93          
1096   D5BA 7C          
1097   D5BB             			KILL_					;Remove This Thread
1097   D5BB 03          
1098   D5BC             
1099   D5BC             ;**********************************************************
1100   D5BC             ;* Background Sound Thread
1101   D5BC             ;**********************************************************
1102   D5BC BD F3 AB    bg_snd		jsr	macro_start
1103   D5BF             			PRI_($E0)				;Priority=#E0
1103   D5BF 52 E0       
1104   D5C1             			BEGIN_
1104   D5C1             
1105   D5C1             				SSND_($1B)				;Sound #1B
1105   D5C1             
1105   D5C1 FB          
1105   D5C2~            				SSND_($1B)				;Sound #1B
1105   D5C2~            				SSND_($1B)				;Sound #1B
1105   D5C2~            				SSND_($1B)				;Sound #1B
1105   D5C2             
1106   D5C2             				SETRAM_($0B,$00)			;RAM$0B=$00
1106   D5C2~            				SETRAM_($0B,$00)			;RAM$0B=$00
1106   D5C2~            				SETRAM_($0B,$00)			;RAM$0B=$00
1106   D5C2             
1106   D5C2 CB 00       
1107   D5C4             				BEGIN_
1107   D5C4             
1108   D5C4             					SLEEP_(255)
1108   D5C4~            					SLEEP_(255)
1108   D5C4~            					SLEEP_(255)
1108   D5C4             
1108   D5C4 53 FF       
1108   D5C6             
1109   D5C6             					SLEEP_(192)
1109   D5C6~            					SLEEP_(192)
1109   D5C6~            					SLEEP_(192)
1109   D5C6             
1109   D5C6 53 C0       
1109   D5C8             
1110   D5C8             					;do the magnasave sparkle effect
1111   D5C8             					RCLR1_($45,$05,$46,$06)			
1111   D5C8             
1111   D5C8 29C585C606  
1112   D5CD             					RSET1R1_($45,$46)			
1112   D5CD             
1112   D5CD 2A C5 46    
1113   D5D0             					BEGIN_
1113   D5D0             
1114   D5D0             						SLEEP_(4)
1114   D5D0             
1114   D5D0 74          
1114   D5D1~            						SLEEP_(4)
1114   D5D1~            						SLEEP_(4)
1114   D5D1             
1115   D5D1             						RROR1_($45,$46)			
1115   D5D1             
1115   D5D1 2E C5 46    
1116   D5D4             						EXE_				;CPU Execute Next 4 Bytes
1116   D5D4             
1116   D5D4 44          
1117   D5D5 96 20       							ldaa	$20
1118   D5D7 84 80       							anda	#$80
1119   D5D9             						EXEEND_
1119   D5D9             
1119   D5D9             
1119   D5D9             
1119   D5D9             
1119   D5D9~            						EXEEND_
1119   D5D9~            						EXEEND_
1119   D5D9             
1119   D5D4             
1119   D5D4 46          
1119   D5D5             
1119   D5D9             
1119   D5D9~            						EXEEND_
1119   D5D9~            						EXEEND_
1119   D5D9             
1120   D5D9             					NEEND_($FC,$E0,$00)
1120   D5D9             
1120   D5D9 5AFCE000FE  
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE             
1120   D5DE             
1120   D5DE             
1120   D5DE             
1120   D5DE             
1120   D5DE             
1120   D5DE             
1120   D5DD             
1120   D5DD F2          
1120   D5DE             
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE             
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE~            					NEEND_($FC,$E0,$00)
1120   D5DE             
1121   D5DE             					RCLR1_($45,$46)				
1121   D5DE             
1121   D5DE 29 C5 46    
1122   D5E1             				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E1             
1122   D5E1 5AFCEB00FE  
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6             
1122   D5E6             
1122   D5E6             
1122   D5E6             
1122   D5E6             
1122   D5E6             
1122   D5E6             
1122   D5E5             
1122   D5E5 DE          
1122   D5E6             
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6             
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
1122   D5E6             
1123   D5E6             				JSRD_(send_sound)			
1123   D5E6 57          
1123   D5E7 FB 30       
1124   D5E9             			LOOP_
1124   D5E9             
1124   D5E9             
1124   D5E9~            			LOOP_
1124   D5E9~            			LOOP_
1124   D5E9             
1124   D5E9~            			LOOP_
1124   D5E9~            			LOOP_
1124   D5E9             
1124   D5E9             
1124   D5E9 8F          
1124   D5EA D6          
1125   D5EB             
1126   D5EB             ;**************************************************************
1127   D5EB             ;* Add Bonus: This routine will add onto the running bonus, the
1128   D5EB             ;* 		  amount passed in B (RAM $01)
1129   D5EB             ;**************************************************************	
1130   D5EB C6 01       add_bonus		ldab	#$01
1131   D5ED BD F3 AB    			jsr	macro_start
1132   D5F0             			SETRAM_(regb,$01)
1132   D5F0~            			SETRAM_(regb,$01)
1132   D5F0~            			SETRAM_(regb,$01)
1132   D5F0             
1132   D5F0 C1 01       
1133   D5F2             			CPUX_
1133   D5F2 04          
1134   D5F3 36          add_bonus_m		psha	
1135   D5F4 86 01       			ldaa	#$01
1136   D5F6 97 AA       			staa	thread_priority
1137   D5F8 32          			pula	
1138   D5F9 CE D5 FF    			ldx	#bonuseffect
1139   D5FC 7E EA 78    			jmp	newthread_sp
1140   D5FF             			
1141   D5FF BD F3 AB    bonuseffect		jsr	macro_start
1142   D602             			IFNER_($7F)				;Effect Flag
1142   D602             
1142   D602             
1142   D602             
1142   D602 5A 7F 00    
1142   D605~            			IFNER_($7F)				;Effect Flag
1142   D605~            			IFNER_($7F)				;Effect Flag
1142   D605~            			IFNER_($7F)				;Effect Flag
1142   D605~            			IFNER_($7F)				;Effect Flag
1142   D605~            			IFNER_($7F)				;Effect Flag
1142   D605~            			IFNER_($7F)				;Effect Flag
1142   D605             
1143   D605             				BEGIN_
1143   D605             
1144   D605             					SLEEP_(4)
1144   D605             
1144   D605 74          
1144   D606~            					SLEEP_(4)
1144   D606~            					SLEEP_(4)
1144   D606             
1145   D606             				NEEND_($FB,$7E,$7D )
1145   D606             
1145   D606 5AFB7E7DFE  
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B             
1145   D60B             
1145   D60B             
1145   D60B             
1145   D60B             
1145   D60B             
1145   D60B             
1145   D60A             
1145   D60A FA          
1145   D60B             
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B             
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B~            				NEEND_($FB,$7E,$7D )
1145   D60B             
1146   D60B             				BITON_($7E)
1146   D60B             
1146   D60B 10 7E       
1147   D60D             				BEGIN_
1147   D60D             
1148   D60D             					SLEEP_(2)
1148   D60D             
1148   D60D 72          
1148   D60E~            					SLEEP_(2)
1148   D60E~            					SLEEP_(2)
1148   D60E             
1149   D60E             					IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
1149   D60E             
1149   D60E             
1149   D60E             
1149   D60E 5AFBFA3BF600
1149   D614 4FFB
1149   D616~            					IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
1149   D616~            					IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
1149   D616~            					IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
1149   D616~            					IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
1149   D616~            					IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
1149   D616~            					IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
1149   D616             
1150   D616             						IFNER_($F6,$00)	
1150   D616             
1150   D616             
1150   D616             
1150   D616 5A F6 00 FF 
1150   D61A~            						IFNER_($F6,$00)	
1150   D61A~            						IFNER_($F6,$00)	
1150   D61A~            						IFNER_($F6,$00)	
1150   D61A~            						IFNER_($F6,$00)	
1150   D61A~            						IFNER_($F6,$00)	
1150   D61A~            						IFNER_($F6,$00)	
1150   D61A             
1151   D61A             							;IFNER_($7D)				
1152   D61A             								RCLR1_($40,$00)			;Effect: Range #C0 Range #00
1152   D61A             
1152   D61A 29 C0 00    
1153   D61D             								RSET1R1_($40)				;Effect: Range #40
1153   D61D             
1153   D61D 2A 40       
1154   D61F             								BEGIN_
1154   D61F             
1155   D61F             									SLEEP_(3)
1155   D61F             
1155   D61F 73          
1155   D620~            									SLEEP_(3)
1155   D620~            									SLEEP_(3)
1155   D620             
1156   D620             									RROR1_($40)			;Effect: Range #40
1156   D620             
1156   D620 2E 40       
1157   D622             									EXE_				;CPU Execute Next 4 Bytes
1157   D622             
1157   D622 44          
1158   D623 96 27       										ldaa	$27
1159   D625 84 01       										anda	#$01
1160   D627             									EXEEND_
1160   D627             
1160   D627             
1160   D627             
1160   D627             
1160   D627~            									EXEEND_
1160   D627~            									EXEEND_
1160   D627             
1160   D622             
1160   D622 46          
1160   D623             
1160   D627             
1160   D627~            									EXEEND_
1160   D627~            									EXEEND_
1160   D627             
1161   D627             								NEEND_($FC,$E0,$00)
1161   D627             
1161   D627 5AFCE000FE  
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C             
1161   D62C             
1161   D62C             
1161   D62C             
1161   D62C             
1161   D62C             
1161   D62C             
1161   D62B             
1161   D62B F3          
1161   D62C             
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C             
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C~            								NEEND_($FC,$E0,$00)
1161   D62C             
1162   D62C             								RCLR1_($40)				;Effect: Range #40
1162   D62C             
1162   D62C 29 40       
1163   D62E             							;ENDIF_
1164   D62E             							;RCLR1_($40)
1165   D62E             							RSET1R0_($00)			;Effect: Range #00
1165   D62E             
1165   D62E 1A 00       
1166   D630             						ELSE_
1166   D630             
1166   D630             
1166   D630             
1166   D630             
1166   D619             
1166   D619             
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619             
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619~            						ELSE_
1166   D619             
1166   D619             
1166   D619 18          
1166   D630             
1166   D630             
1166   D630~            						ELSE_
1166   D630~            						ELSE_
1166   D630             
1166   D630~            						ELSE_
1166   D630~            						ELSE_
1166   D630             
1166   D630             
1166   D630 80          
1166   D631 00          
1166   D632             
1166   D632             
1166   D632             
1166   D632~            						ELSE_
1166   D632~            						ELSE_
1166   D632             
1166   D632~            						ELSE_
1166   D632~            						ELSE_
1166   D632             
1167   D632             							EXE_
1167   D632             
1167   D632 44          
1168   D633 36          			      			      psha	
1169   D634 86 03       			      			      ldaa	#$03
1170   D636 BD F1 D5    			      			      jsr	$F1D5
1171   D639 32          			      			      pula
1172   D63A             			      			EXEEND_
1172   D63A             
1172   D63A             
1172   D63A             
1172   D63A             
1172   D63A~            			      			EXEEND_
1172   D63A~            			      			EXEEND_
1172   D63A             
1172   D632             
1172   D632 49          
1172   D633             
1172   D63A             
1172   D63A~            			      			EXEEND_
1172   D63A~            			      			EXEEND_
1172   D63A             
1173   D63A             				      		;IFNER_($7D)
1174   D63A             								BEGIN_
1174   D63A             
1175   D63A             									SLEEP_(3)
1175   D63A             
1175   D63A 73          
1175   D63B~            									SLEEP_(3)
1175   D63B~            									SLEEP_(3)
1175   D63B             
1176   D63B             									RCLR1L0_($00)				;Effect: Range #00
1176   D63B             
1176   D63B 1C 00       
1177   D63D             								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D63D             
1177   D63D 5B F5 00 FF 
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641             
1177   D641             
1177   D641             
1177   D641             
1177   D641             
1177   D641             
1177   D641             
1177   D640             
1177   D640 F9          
1177   D641             
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641             
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641~            								EQEND_($F5,$00)		;BNE_RangeOFF#00
1177   D641             
1178   D641             							;ENDIF_
1179   D641             							;RCLR0_($00)
1180   D641             			      	      ENDIF_
1180   D641             
1180   D641             
1180   D641             
1180   D641             
1180   D641             
1180   D641~            			      	      ENDIF_
1180   D641~            			      	      ENDIF_
1180   D641             
1180   D641~            			      	      ENDIF_
1180   D641~            			      	      ENDIF_
1180   D641             
1180   D631             
1180   D631 0F          
1180   D632             
1180   D632             
1180   D632~            			      	      ENDIF_
1180   D632~            			      	      ENDIF_
1180   D632~            			      	      ENDIF_
1180   D632~            			      	      ENDIF_
1180   D632~            			      	      ENDIF_
1180   D632             
1180   D641             
1180   D641~            			      	      ENDIF_
1180   D641~            			      	      ENDIF_
1180   D641             
1181   D641             				     	ELSE_
1181   D641             
1181   D641             
1181   D641             
1181   D641             
1181   D615             
1181   D615             
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615             
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615~            				     	ELSE_
1181   D615             
1181   D615             
1181   D615 2D          
1181   D641             
1181   D641             
1181   D641~            				     	ELSE_
1181   D641~            				     	ELSE_
1181   D641             
1181   D641~            				     	ELSE_
1181   D641~            				     	ELSE_
1181   D641             
1181   D641             
1181   D641 80          
1181   D642 00          
1181   D643             
1181   D643             
1181   D643             
1181   D643~            				     	ELSE_
1181   D643~            				     	ELSE_
1181   D643             
1181   D643~            				     	ELSE_
1181   D643~            				     	ELSE_
1181   D643             
1182   D643             				     		;we are here if the bonus is at full count...
1183   D643             				     		IFNER_($7F)
1183   D643             
1183   D643             
1183   D643             
1183   D643 5A 7F 00    
1183   D646~            				     		IFNER_($7F)
1183   D646~            				     		IFNER_($7F)
1183   D646~            				     		IFNER_($7F)
1183   D646~            				     		IFNER_($7F)
1183   D646~            				     		IFNER_($7F)
1183   D646~            				     		IFNER_($7F)
1183   D646             
1184   D646             					     		BITON_($7F)
1184   D646             
1184   D646 10 7F       
1185   D648             					    		EXE_
1185   D648             
1185   D648 44          
1186   D649             			      			      NEWTHREAD(fullbonus)		;Do a fancy animation
1186   D649 CE D6 59    
1186   D64C BD EA C4    
1187   D64F             			      			EXEEND_
1187   D64F             
1187   D64F             
1187   D64F             
1187   D64F             
1187   D64F~            			      			EXEEND_
1187   D64F~            			      			EXEEND_
1187   D64F             
1187   D648             
1187   D648 48          
1187   D649             
1187   D64F             
1187   D64F~            			      			EXEEND_
1187   D64F~            			      			EXEEND_
1187   D64F             
1188   D64F             			      		ENDIF_
1188   D64F             
1188   D64F             
1188   D64F             
1188   D64F             
1188   D64F             
1188   D64F~            			      		ENDIF_
1188   D64F~            			      		ENDIF_
1188   D64F             
1188   D64F~            			      		ENDIF_
1188   D64F~            			      		ENDIF_
1188   D64F             
1188   D645             
1188   D645 09          
1188   D646             
1188   D646             
1188   D646~            			      		ENDIF_
1188   D646~            			      		ENDIF_
1188   D646~            			      		ENDIF_
1188   D646~            			      		ENDIF_
1188   D646~            			      		ENDIF_
1188   D646             
1188   D64F             
1188   D64F~            			      		ENDIF_
1188   D64F~            			      		ENDIF_
1188   D64F             
1189   D64F             			      	ENDIF_
1189   D64F             
1189   D64F             
1189   D64F             
1189   D64F             
1189   D64F             
1189   D64F~            			      	ENDIF_
1189   D64F~            			      	ENDIF_
1189   D64F             
1189   D64F~            			      	ENDIF_
1189   D64F~            			      	ENDIF_
1189   D64F             
1189   D642             
1189   D642 0C          
1189   D643             
1189   D643             
1189   D643~            			      	ENDIF_
1189   D643~            			      	ENDIF_
1189   D643~            			      	ENDIF_
1189   D643~            			      	ENDIF_
1189   D643~            			      	ENDIF_
1189   D643             
1189   D64F             
1189   D64F~            			      	ENDIF_
1189   D64F~            			      	ENDIF_
1189   D64F             
1190   D64F             			      	ADDRAM_(regb,-1)
1190   D64F~            			      	ADDRAM_(regb,-1)
1190   D64F~            			      	ADDRAM_(regb,-1)
1190   D64F             
1190   D64F B1 FF       
1191   D651             			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D651             
1191   D651 5BFCE100FE  
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656             
1191   D656             
1191   D656             
1191   D656             
1191   D656             
1191   D656             
1191   D656             
1191   D655             
1191   D655 B7          
1191   D656             
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656             
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656~            			      EQEND_($FC,$E1,$00)		;BNER_RAM$01==$00
1191   D656             
1192   D656             		  	ENDIF_
1192   D656             
1192   D656             
1192   D656             
1192   D656             
1192   D656             
1192   D656~            		  	ENDIF_
1192   D656~            		  	ENDIF_
1192   D656             
1192   D656~            		  	ENDIF_
1192   D656~            		  	ENDIF_
1192   D656             
1192   D604             
1192   D604 51          
1192   D605             
1192   D605             
1192   D605~            		  	ENDIF_
1192   D605~            		  	ENDIF_
1192   D605~            		  	ENDIF_
1192   D605~            		  	ENDIF_
1192   D605~            		  	ENDIF_
1192   D605             
1192   D656             
1192   D656~            		  	ENDIF_
1192   D656~            		  	ENDIF_
1192   D656             
1193   D656             	      	BITOFF_($7E)
1193   D656             
1193   D656 11 7E       
1194   D658             	      	KILL_
1194   D658 03          
1195   D659             
1196   D659 36          fullbonus		psha	
1197   D65A 86 01       			ldaa	#$01
1198   D65C 97 AA       			staa	thread_priority
1199   D65E 32          			pula
1200   D65F BD F3 AB    			jsr	macro_start
1201   D662             			BEGIN_
1201   D662             
1202   D662             				SLEEP_(5)
1202   D662             
1202   D662 75          
1202   D663~            				SLEEP_(5)
1202   D663~            				SLEEP_(5)
1202   D663             
1203   D663             			NEEND_($7E)
1203   D663             
1203   D663 5A 7E 00    
1203   D666~            			NEEND_($7E)
1203   D666~            			NEEND_($7E)
1203   D666~            			NEEND_($7E)
1203   D666~            			NEEND_($7E)
1203   D666~            			NEEND_($7E)
1203   D666~            			NEEND_($7E)
1203   D666             
1203   D666             
1203   D666             
1203   D666             
1203   D666             
1203   D666             
1203   D666             
1203   D665             
1203   D665 FC          
1203   D666             
1203   D666~            			NEEND_($7E)
1203   D666~            			NEEND_($7E)
1203   D666             
1203   D666~            			NEEND_($7E)
1203   D666~            			NEEND_($7E)
1203   D666             
1204   D666             			PRI_($F0)				;Priority=#F0
1204   D666 52 F0       
1205   D668             			RCLR0_($00,$03)				;Clear Buffer 1
1205   D668             
1205   D668 19 80 03    
1206   D66B             			RCLR1_($40,$43,$00,$03)				;Clear Buffer 1
1206   D66B             
1206   D66B 29C0C38003  
1207   D670             			BEGIN_
1207   D670             
1208   D670             				SETRAM_(rega,$2F)			;RAM$00=$2F
1208   D670~            				SETRAM_(rega,$2F)			;RAM$00=$2F
1208   D670~            				SETRAM_(rega,$2F)			;RAM$00=$2F
1208   D670             
1208   D670 C0 2F       
1209   D672             				BEGIN_
1209   D672             
1210   D672             					SLEEP_(4)
1210   D672             
1210   D672 74          
1210   D673~            					SLEEP_(4)
1210   D673~            					SLEEP_(4)
1210   D673             
1211   D673             					ADDRAM_(rega,$01)			;RAM$00+=$01
1211   D673~            					ADDRAM_(rega,$01)			;RAM$00+=$01
1211   D673~            					ADDRAM_(rega,$01)			;RAM$00+=$01
1211   D673             
1211   D673 B0 01       
1212   D675             					BITINVP_(rega)			;Toggle Lamp/Bit @RAM:00
1212   D675             
1212   D675 16 00       
1213   D677             				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D677             
1213   D677 5BFCE038FE  
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C             
1213   D67C             
1213   D67C             
1213   D67C             
1213   D67C             
1213   D67C             
1213   D67C             
1213   D67B             
1213   D67B F6          
1213   D67C             
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C             
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C~            				EQEND_($FC,$E0,$38)		;BNER_RAM$00==$78
1213   D67C             
1214   D67C             				BITINV_($3A)			;Toggle: Lamp#3A(bonus_20)
1214   D67C             
1214   D67C 12 3A       
1215   D67E             				BITINV_($3B)			;Toggle: Lamp#3B(bonus_30)
1215   D67E             
1215   D67E 12 3B       
1216   D680             				SLEEP_(4)
1216   D680             
1216   D680 74          
1216   D681~            				SLEEP_(4)
1216   D681~            				SLEEP_(4)
1216   D681             
1217   D681             				BITINV_($39)			;Toggle: Lamp#39(bonus_10)
1217   D681             
1217   D681 12 39       
1218   D683             				SLEEP_(4)
1218   D683             
1218   D683 74          
1218   D684~            				SLEEP_(4)
1218   D684~            				SLEEP_(4)
1218   D684             
1219   D684             			LOOP_
1219   D684             
1219   D684             
1219   D684~            			LOOP_
1219   D684~            			LOOP_
1219   D684             
1219   D684~            			LOOP_
1219   D684~            			LOOP_
1219   D684             
1219   D684             
1219   D684 8F          
1219   D685 EA          
1220   D686             
1221   D686             
1222   D686             			
1223   D686             ;inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
1224   D686             ;				RSET1RC0_($00)				;Effect: Range #00
1225   D686             ;				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
1226   D686             ;	      			EXE_
1227   D686             ;	      			      psha	
1228   D686             ;	      			      ldaa	#$03
1229   D686             ;	      			      jsr	$F1D5
1230   D686             ;	      			      pula
1231   D686             ;	      			EXEEND_	
1232   D686             ;	      	      ENDIF_
1233   D686             ;	      	ENDIF_
1234   D686             ;			MRTS_					;Macro RTS, Save MRA,MRB
1235   D686             
1236   D686             ;**************************************************************
1237   D686             ;* Outhole Routine Called from System
1238   D686             ;**************************************************************
1239   D686 BD D7 98    hook_outhole	jsr	cpdisp_show
1240   D689 D6 CA       			ldab	flag_bonusball
1241   D68B BD F3 AB    			jsr	macro_start
1242   D68E             			BEGIN_
1242   D68E             
1243   D68E             				SLEEP_(10)				;Wait for bonus effects to end
1243   D68E             
1243   D68E 7A          
1243   D68F~            				SLEEP_(10)				;Wait for bonus effects to end
1243   D68F~            				SLEEP_(10)				;Wait for bonus effects to end
1243   D68F             
1244   D68F             			NEEND_($7E)
1244   D68F             
1244   D68F 5A 7E 00    
1244   D692~            			NEEND_($7E)
1244   D692~            			NEEND_($7E)
1244   D692~            			NEEND_($7E)
1244   D692~            			NEEND_($7E)
1244   D692~            			NEEND_($7E)
1244   D692~            			NEEND_($7E)
1244   D692             
1244   D692             
1244   D692             
1244   D692             
1244   D692             
1244   D692             
1244   D692             
1244   D691             
1244   D691 FC          
1244   D692             
1244   D692~            			NEEND_($7E)
1244   D692~            			NEEND_($7E)
1244   D692             
1244   D692~            			NEEND_($7E)
1244   D692~            			NEEND_($7E)
1244   D692             
1245   D692             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
1245   D692 55 F8 D0    
1246   D695             			REMTHREADS_($F8,$F0)		;Remove Multiple Threads Based on Priority
1246   D695 55 F8 F0    
1247   D698             			JSRD_(send_sound)		
1247   D698 57          
1247   D699 FB 30       
1248   D69B             			;see if they had full bonus...
1249   D69B             			IFEQR_($7F)
1249   D69B             
1249   D69B             
1249   D69B             
1249   D69B 5B 7F 00    
1249   D69E~            			IFEQR_($7F)
1249   D69E~            			IFEQR_($7F)
1249   D69E~            			IFEQR_($7F)
1249   D69E~            			IFEQR_($7F)
1249   D69E~            			IFEQR_($7F)
1249   D69E~            			IFEQR_($7F)
1249   D69E             
1250   D69E             				;turn on 9 and 30
1251   D69E             				RCLR0_($43,$40)
1251   D69E             
1251   D69E 19 C3 40    
1252   D6A1             				BITON_($38,$3B)
1252   D6A1             
1252   D6A1 10 B8 3B    
1253   D6A4             			ENDIF_
1253   D6A4             
1253   D6A4             
1253   D6A4             
1253   D6A4             
1253   D6A4             
1253   D6A4~            			ENDIF_
1253   D6A4~            			ENDIF_
1253   D6A4             
1253   D6A4~            			ENDIF_
1253   D6A4~            			ENDIF_
1253   D6A4             
1253   D69D             
1253   D69D 06          
1253   D69E             
1253   D69E             
1253   D69E~            			ENDIF_
1253   D69E~            			ENDIF_
1253   D69E~            			ENDIF_
1253   D69E~            			ENDIF_
1253   D69E~            			ENDIF_
1253   D69E             
1253   D6A4             
1253   D6A4~            			ENDIF_
1253   D6A4~            			ENDIF_
1253   D6A4             
1254   D6A4             			SLEEP_(20)
1254   D6A4~            			SLEEP_(20)
1254   D6A4~            			SLEEP_(20)
1254   D6A4             
1254   D6A4 53 14       
1254   D6A6             
1255   D6A6             			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1255   D6A6             
1255   D6A6             
1255   D6A6             
1255   D6A6 5AFCE100FE  
1255   D6AB~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1255   D6AB~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1255   D6AB~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1255   D6AB~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1255   D6AB~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1255   D6AB~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1255   D6AB             
1256   D6AB                   			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1256   D6AB             
1256   D6AB             
1256   D6AB             
1256   D6AB 5B 19 00    
1256   D6AE~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1256   D6AE~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1256   D6AE~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1256   D6AE~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1256   D6AE~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1256   D6AE~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1256   D6AE             
1257   D6AE                   				SSND_($18)
1257   D6AE             
1257   D6AE F8          
1257   D6AF~                  				SSND_($18)
1257   D6AF~                  				SSND_($18)
1257   D6AF~                  				SSND_($18)
1257   D6AF             
1258   D6AF                   			      BITFL_($19)				;Flash: Lamp#19(double_score)
1258   D6AF             
1258   D6AF 13 19       
1259   D6B1                   			      SLEEP_(70)
1259   D6B1~                  			      SLEEP_(70)
1259   D6B1~                  			      SLEEP_(70)
1259   D6B1             
1259   D6B1 53 46       
1259   D6B3             
1260   D6B3                   			ENDIF_
1260   D6B3             
1260   D6B3             
1260   D6B3             
1260   D6B3             
1260   D6B3             
1260   D6B3~                  			ENDIF_
1260   D6B3~                  			ENDIF_
1260   D6B3             
1260   D6B3~                  			ENDIF_
1260   D6B3~                  			ENDIF_
1260   D6B3             
1260   D6AD             
1260   D6AD 05          
1260   D6AE             
1260   D6AE             
1260   D6AE~                  			ENDIF_
1260   D6AE~                  			ENDIF_
1260   D6AE~                  			ENDIF_
1260   D6AE~                  			ENDIF_
1260   D6AE~                  			ENDIF_
1260   D6AE             
1260   D6B3             
1260   D6B3~                  			ENDIF_
1260   D6B3~                  			ENDIF_
1260   D6B3             
1261   D6B3                   			SETRAM_($08,$14)			;RAM$08=$14
1261   D6B3~                  			SETRAM_($08,$14)			;RAM$08=$14
1261   D6B3~                  			SETRAM_($08,$14)			;RAM$08=$14
1261   D6B3             
1261   D6B3 C8 14       
1262   D6B5                   			RSET1_($4D)				;Effect: Range #0D (Bounus 1-30)
1262   D6B5             
1262   D6B5 28 4D       
1263   D6B7             mult_loop		      SETRAM_(regb,$01)			;RAM$01=$01
1263   D6B7~            mult_loop		      SETRAM_(regb,$01)			;RAM$01=$01
1263   D6B7~            mult_loop		      SETRAM_(regb,$01)			;RAM$01=$01
1263   D6B7             
1263   D6B7 C1 01       
1264   D6B9                   			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1264   D6B9             
1264   D6B9             
1264   D6B9             
1264   D6B9 5B 3E 00    
1264   D6BC~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1264   D6BC~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1264   D6BC~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1264   D6BC~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1264   D6BC~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1264   D6BC~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1264   D6BC             
1265   D6BC                   			      SETRAM_(regb,$02)			;RAM$01=$02
1265   D6BC~                  			      SETRAM_(regb,$02)			;RAM$01=$02
1265   D6BC~                  			      SETRAM_(regb,$02)			;RAM$01=$02
1265   D6BC             
1265   D6BC C1 02       
1266   D6BE                   			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1266   D6BE             
1266   D6BE             
1266   D6BE             
1266   D6BE 5B 3F 00    
1266   D6C1~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1266   D6C1~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1266   D6C1~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1266   D6C1~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1266   D6C1~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1266   D6C1~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1266   D6C1             
1267   D6C1                   			            SETRAM_(regb,$05)			;RAM$01=$05
1267   D6C1~                  			            SETRAM_(regb,$05)			;RAM$01=$05
1267   D6C1~                  			            SETRAM_(regb,$05)			;RAM$01=$05
1267   D6C1             
1267   D6C1 C1 05       
1268   D6C3                   			      ENDIF_
1268   D6C3             
1268   D6C3             
1268   D6C3             
1268   D6C3             
1268   D6C3             
1268   D6C3~                  			      ENDIF_
1268   D6C3~                  			      ENDIF_
1268   D6C3             
1268   D6C3~                  			      ENDIF_
1268   D6C3~                  			      ENDIF_
1268   D6C3             
1268   D6C0             
1268   D6C0 02          
1268   D6C1             
1268   D6C1             
1268   D6C1~                  			      ENDIF_
1268   D6C1~                  			      ENDIF_
1268   D6C1~                  			      ENDIF_
1268   D6C1~                  			      ENDIF_
1268   D6C1~                  			      ENDIF_
1268   D6C1             
1268   D6C3             
1268   D6C3~                  			      ENDIF_
1268   D6C3~                  			      ENDIF_
1268   D6C3             
1269   D6C3                   			ENDIF_
1269   D6C3             
1269   D6C3             
1269   D6C3             
1269   D6C3             
1269   D6C3             
1269   D6C3~                  			ENDIF_
1269   D6C3~                  			ENDIF_
1269   D6C3             
1269   D6C3~                  			ENDIF_
1269   D6C3~                  			ENDIF_
1269   D6C3             
1269   D6BB             
1269   D6BB 07          
1269   D6BC             
1269   D6BC             
1269   D6BC~                  			ENDIF_
1269   D6BC~                  			ENDIF_
1269   D6BC~                  			ENDIF_
1269   D6BC~                  			ENDIF_
1269   D6BC~                  			ENDIF_
1269   D6BC             
1269   D6C3             
1269   D6C3~                  			ENDIF_
1269   D6C3~                  			ENDIF_
1269   D6C3             
1270   D6C3                   			BEGIN_
1270   D6C3             
1271   D6C3             		 			SETRAM_(rega,$0D)			;RAM$00=$0D
1271   D6C3~            		 			SETRAM_(rega,$0D)			;RAM$00=$0D
1271   D6C3~            		 			SETRAM_(rega,$0D)			;RAM$00=$0D
1271   D6C3             
1271   D6C3 C0 0D       
1272   D6C5             	      			JSRD_(lampm_x)
1272   D6C5 57          
1272   D6C6 F3 02       
1273   D6C8             	      			;Do our bonus countdown here...			
1274   D6C8             bonus_loop		      	IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1274   D6C8             
1274   D6C8             
1274   D6C8             
1274   D6C8 5AFBF0F58DFD
1274   D6CE~            bonus_loop		      	IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1274   D6CE~            bonus_loop		      	IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1274   D6CE~            bonus_loop		      	IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1274   D6CE~            bonus_loop		      	IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1274   D6CE~            bonus_loop		      	IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1274   D6CE~            bonus_loop		      	IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1274   D6CE             
1275   D6CE             						POINTS_(1,1000)
1275   D6CE 42          
1275   D6CF             
1275   D6CF~            						POINTS_(1,1000)
1275   D6CF~            						POINTS_(1,1000)
1275   D6CF             
1275   D6CF~            						POINTS_(1,1000)
1275   D6CF~            						POINTS_(1,1000)
1275   D6CF             
1275   D6CF~            						POINTS_(1,1000)
1275   D6CF~            						POINTS_(1,1000)
1275   D6CF             
1275   D6CF             
1275   D6CF 0B          
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0~            						POINTS_(1,1000)
1275   D6D0             
1275   D6D0             
1275   D6D0             
1275   D6D0             
1276   D6D0             						IFEQR_($19)
1276   D6D0             
1276   D6D0             
1276   D6D0             
1276   D6D0 5B 19 00    
1276   D6D3~            						IFEQR_($19)
1276   D6D3~            						IFEQR_($19)
1276   D6D3~            						IFEQR_($19)
1276   D6D3~            						IFEQR_($19)
1276   D6D3~            						IFEQR_($19)
1276   D6D3~            						IFEQR_($19)
1276   D6D3             
1277   D6D3             							SSND_($06)
1277   D6D3             
1277   D6D3 E6          
1277   D6D4~            							SSND_($06)
1277   D6D4~            							SSND_($06)
1277   D6D4~            							SSND_($06)
1277   D6D4             
1278   D6D4             						ELSE_
1278   D6D4             
1278   D6D4             
1278   D6D4             
1278   D6D4             
1278   D6D2             
1278   D6D2             
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2             
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2~            						ELSE_
1278   D6D2             
1278   D6D2             
1278   D6D2 03          
1278   D6D4             
1278   D6D4             
1278   D6D4~            						ELSE_
1278   D6D4~            						ELSE_
1278   D6D4             
1278   D6D4~            						ELSE_
1278   D6D4~            						ELSE_
1278   D6D4             
1278   D6D4             
1278   D6D4 80          
1278   D6D5 00          
1278   D6D6             
1278   D6D6             
1278   D6D6             
1278   D6D6~            						ELSE_
1278   D6D6~            						ELSE_
1278   D6D6             
1278   D6D6~            						ELSE_
1278   D6D6~            						ELSE_
1278   D6D6             
1279   D6D6             							SSND_($1E)
1279   D6D6             
1279   D6D6 FE          
1279   D6D7~            							SSND_($1E)
1279   D6D7~            							SSND_($1E)
1279   D6D7~            							SSND_($1E)
1279   D6D7             
1280   D6D7             						ENDIF_
1280   D6D7             
1280   D6D7             
1280   D6D7             
1280   D6D7             
1280   D6D7             
1280   D6D7~            						ENDIF_
1280   D6D7~            						ENDIF_
1280   D6D7             
1280   D6D7~            						ENDIF_
1280   D6D7~            						ENDIF_
1280   D6D7             
1280   D6D5             
1280   D6D5 01          
1280   D6D6             
1280   D6D6             
1280   D6D6~            						ENDIF_
1280   D6D6~            						ENDIF_
1280   D6D6~            						ENDIF_
1280   D6D6~            						ENDIF_
1280   D6D6~            						ENDIF_
1280   D6D6             
1280   D6D7             
1280   D6D7~            						ENDIF_
1280   D6D7~            						ENDIF_
1280   D6D7             
1281   D6D7             	            			;PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1282   D6D7             	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1282   D6D7             
1282   D6D7             
1282   D6D7             
1282   D6D7 5A F5 80 FF 
1282   D6DB~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1282   D6DB~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1282   D6DB~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1282   D6DB~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1282   D6DB~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1282   D6DB~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1282   D6DB             
1283   D6DB             	            			      RCLR1L1_($00)				;Effect: Range #00
1283   D6DB             
1283   D6DB 2C 00       
1284   D6DD             	            			ELSE_			
1284   D6DD             
1284   D6DD             
1284   D6DD             
1284   D6DD             
1284   D6DA             
1284   D6DA             
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA             
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA~            	            			ELSE_			
1284   D6DA             
1284   D6DA             
1284   D6DA 04          
1284   D6DD             
1284   D6DD             
1284   D6DD~            	            			ELSE_			
1284   D6DD~            	            			ELSE_			
1284   D6DD             
1284   D6DD~            	            			ELSE_			
1284   D6DD~            	            			ELSE_			
1284   D6DD             
1284   D6DD             
1284   D6DD 80          
1284   D6DE 00          
1284   D6DF             
1284   D6DF             
1284   D6DF             
1284   D6DF~            	            			ELSE_			
1284   D6DF~            	            			ELSE_			
1284   D6DF             
1284   D6DF~            	            			ELSE_			
1284   D6DF~            	            			ELSE_			
1284   D6DF             
1285   D6DF             	                                    RSET1_($00)				;Effect: Range #00
1285   D6DF             
1285   D6DF 28 00       
1286   D6E1             	            			      SETRAM_(rega,$83)			;RAM$00=$83
1286   D6E1~            	            			      SETRAM_(rega,$83)			;RAM$00=$83
1286   D6E1~            	            			      SETRAM_(rega,$83)			;RAM$00=$83
1286   D6E1             
1286   D6E1 C0 83       
1287   D6E3             	            			      JSRD_(lampm_z)
1287   D6E3 57          
1287   D6E4 F2 B3       
1288   D6E6             	            			ENDIF_			
1288   D6E6             
1288   D6E6             
1288   D6E6             
1288   D6E6             
1288   D6E6             
1288   D6E6~            	            			ENDIF_			
1288   D6E6~            	            			ENDIF_			
1288   D6E6             
1288   D6E6~            	            			ENDIF_			
1288   D6E6~            	            			ENDIF_			
1288   D6E6             
1288   D6DE             
1288   D6DE 07          
1288   D6DF             
1288   D6DF             
1288   D6DF~            	            			ENDIF_			
1288   D6DF~            	            			ENDIF_			
1288   D6DF~            	            			ENDIF_			
1288   D6DF~            	            			ENDIF_			
1288   D6DF~            	            			ENDIF_			
1288   D6DF             
1288   D6E6             
1288   D6E6~            	            			ENDIF_			
1288   D6E6~            	            			ENDIF_			
1288   D6E6             
1289   D6E6             				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1289   D6E6             
1289   D6E6             
1289   D6E6             
1289   D6E6 5AFCE802FE  
1289   D6EB~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1289   D6EB~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1289   D6EB~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1289   D6EB~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1289   D6EB~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1289   D6EB~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1289   D6EB             
1290   D6EB             	            			      ADDRAM_($08,-1)			;RAM$08-=1
1290   D6EB~            	            			      ADDRAM_($08,-1)			;RAM$08-=1
1290   D6EB~            	            			      ADDRAM_($08,-1)			;RAM$08-=1
1290   D6EB             
1290   D6EB B8 FF       
1291   D6ED             	            			ENDIF_
1291   D6ED             
1291   D6ED             
1291   D6ED             
1291   D6ED             
1291   D6ED             
1291   D6ED~            	            			ENDIF_
1291   D6ED~            	            			ENDIF_
1291   D6ED             
1291   D6ED~            	            			ENDIF_
1291   D6ED~            	            			ENDIF_
1291   D6ED             
1291   D6EA             
1291   D6EA 02          
1291   D6EB             
1291   D6EB             
1291   D6EB~            	            			ENDIF_
1291   D6EB~            	            			ENDIF_
1291   D6EB~            	            			ENDIF_
1291   D6EB~            	            			ENDIF_
1291   D6EB~            	            			ENDIF_
1291   D6EB             
1291   D6ED             
1291   D6ED~            	            			ENDIF_
1291   D6ED~            	            			ENDIF_
1291   D6ED             
1292   D6ED 68          				            SLEEPI_($8)				;Delay RAM$08
1293   D6EE             	            			JMPR_(bonus_loop)
1293   D6EE~            	            			JMPR_(bonus_loop)
1293   D6EE~            	            			JMPR_(bonus_loop)
1293   D6EE             
1293   D6EE~            	            			JMPR_(bonus_loop)
1293   D6EE~            	            			JMPR_(bonus_loop)
1293   D6EE             
1293   D6EE             
1293   D6EE 8F          
1293   D6EF D8          
1294   D6F0             	      			ENDIF_	
1294   D6F0             
1294   D6F0             
1294   D6F0             
1294   D6F0             
1294   D6F0             
1294   D6F0~            	      			ENDIF_	
1294   D6F0~            	      			ENDIF_	
1294   D6F0             
1294   D6F0~            	      			ENDIF_	
1294   D6F0~            	      			ENDIF_	
1294   D6F0             
1294   D6CD             
1294   D6CD 22          
1294   D6CE             
1294   D6CE             
1294   D6CE~            	      			ENDIF_	
1294   D6CE~            	      			ENDIF_	
1294   D6CE~            	      			ENDIF_	
1294   D6CE~            	      			ENDIF_	
1294   D6CE~            	      			ENDIF_	
1294   D6CE             
1294   D6F0             
1294   D6F0~            	      			ENDIF_	
1294   D6F0~            	      			ENDIF_	
1294   D6F0             
1295   D6F0             				      ADDRAM_(regb,-1)			;RAM$01-=1
1295   D6F0~            				      ADDRAM_(regb,-1)			;RAM$01-=1
1295   D6F0~            				      ADDRAM_(regb,-1)			;RAM$01-=1
1295   D6F0             
1295   D6F0 B1 FF       
1296   D6F2                   			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F2             
1296   D6F2 5BFCE100FE  
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7             
1296   D6F7             
1296   D6F7             
1296   D6F7             
1296   D6F7             
1296   D6F7             
1296   D6F7             
1296   D6F6             
1296   D6F6 CC          
1296   D6F7             
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7             
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1296   D6F7             
1297   D6F7                   			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1297   D6F7             
1297   D6F7             
1297   D6F7             
1297   D6F7 5A F5 01 FF 
1297   D6FB~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1297   D6FB~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1297   D6FB~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1297   D6FB~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1297   D6FB~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1297   D6FB~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1297   D6FB             
1298   D6FB                   			      RCLR1L0_($01)				;Effect: Range #01
1298   D6FB             
1298   D6FB 1C 01       
1299   D6FD                   			      JMPR_(mult_loop)
1299   D6FD~                  			      JMPR_(mult_loop)
1299   D6FD~                  			      JMPR_(mult_loop)
1299   D6FD             
1299   D6FD~                  			      JMPR_(mult_loop)
1299   D6FD~                  			      JMPR_(mult_loop)
1299   D6FD             
1299   D6FD             
1299   D6FD 8F          
1299   D6FE B8          
1300   D6FF                   			ENDIF_	
1300   D6FF             
1300   D6FF             
1300   D6FF             
1300   D6FF             
1300   D6FF             
1300   D6FF~                  			ENDIF_	
1300   D6FF~                  			ENDIF_	
1300   D6FF             
1300   D6FF~                  			ENDIF_	
1300   D6FF~                  			ENDIF_	
1300   D6FF             
1300   D6FA             
1300   D6FA 04          
1300   D6FB             
1300   D6FB             
1300   D6FB~                  			ENDIF_	
1300   D6FB~                  			ENDIF_	
1300   D6FB~                  			ENDIF_	
1300   D6FB~                  			ENDIF_	
1300   D6FB~                  			ENDIF_	
1300   D6FB             
1300   D6FF             
1300   D6FF~                  			ENDIF_	
1300   D6FF~                  			ENDIF_	
1300   D6FF             
1301   D6FF                   	      ENDIF_	
1301   D6FF             
1301   D6FF             
1301   D6FF             
1301   D6FF             
1301   D6FF             
1301   D6FF~                  	      ENDIF_	
1301   D6FF~                  	      ENDIF_	
1301   D6FF             
1301   D6FF~                  	      ENDIF_	
1301   D6FF~                  	      ENDIF_	
1301   D6FF             
1301   D6AA             
1301   D6AA 54          
1301   D6AB             
1301   D6AB             
1301   D6AB~                  	      ENDIF_	
1301   D6AB~                  	      ENDIF_	
1301   D6AB~                  	      ENDIF_	
1301   D6AB~                  	      ENDIF_	
1301   D6AB~                  	      ENDIF_	
1301   D6AB             
1301   D6FF             
1301   D6FF~                  	      ENDIF_	
1301   D6FF~                  	      ENDIF_	
1301   D6FF             
1302   D6FF             			BEGIN_
1302   D6FF             
1303   D6FF             				SSND_($1C)				;Sound #1C
1303   D6FF             
1303   D6FF FC          
1303   D700~            				SSND_($1C)				;Sound #1C
1303   D700~            				SSND_($1C)				;Sound #1C
1303   D700~            				SSND_($1C)				;Sound #1C
1303   D700             
1304   D700             				JSRDR_(cpdisp_show)		
1304   D700~            				JSRDR_(cpdisp_show)		
1304   D700~            				JSRDR_(cpdisp_show)		
1304   D700             
1304   D700~            				JSRDR_(cpdisp_show)		
1304   D700~            				JSRDR_(cpdisp_show)		
1304   D700             
1304   D700             
1304   D700 A0          
1304   D701 96          
1305   D702             				REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
1305   D702 55 F8 D0    
1306   D705             				SLEEP_(2)
1306   D705             
1306   D705 72          
1306   D706~            				SLEEP_(2)
1306   D706~            				SLEEP_(2)
1306   D706             
1307   D706             			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D706             
1307   D706 5AFB5162FE  
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B             
1307   D70B             
1307   D70B             
1307   D70B             
1307   D70B             
1307   D70B             
1307   D70B             
1307   D70A             
1307   D70A F4          
1307   D70B             
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B             
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1307   D70B             
1308   D70B             			BITOFF_($7F)			;Set clear the bonus flag	
1308   D70B             
1308   D70B 11 7F       
1309   D70D             			CPUX_					;Resume CPU Execution
1309   D70D 04          
1310   D70E 39          			rts	
1311   D70F             
1312   D70F             ;**********************************************************
1313   D70F             ;* Lock Thread Enable: Creates a thread with ID = $60 that
1314   D70F             ;*                     flashes the lock lamp.
1315   D70F             ;**********************************************************			
1316   D70F             lock_thread		NEWTHREAD_JMP(lock_enable)
1316   D70F CE D7 15    
1316   D712 7E EA C4    
1317   D715             			
1318   D715 BD F3 AB    lock_enable		jsr	macro_start
1319   D718             			PRI_($60)				;Priority=#60
1319   D718 52 60       
1320   D71A             lock_loop		BITINV_($2C)			;Toggle: Lamp#2C(lock)
1320   D71A             
1320   D71A 12 2C       
1321   D71C             			SLEEP_(3)
1321   D71C             
1321   D71C 73          
1321   D71D~            			SLEEP_(3)
1321   D71D~            			SLEEP_(3)
1321   D71D             
1322   D71D             			JMPR_(lock_loop)
1322   D71D~            			JMPR_(lock_loop)
1322   D71D~            			JMPR_(lock_loop)
1322   D71D             
1322   D71D~            			JMPR_(lock_loop)
1322   D71D~            			JMPR_(lock_loop)
1322   D71D             
1322   D71D             
1322   D71D 8F          
1322   D71E FB          
1323   D71F             
1324   D71F             ;**********************************************************
1325   D71F             ;* Upper drop target init thread
1326   D71F             ;**********************************************************						
1327   D71F BD F3 AB    udt_init		jsr	macro_start
1328   D722             			PRI_($30)				;Priority=#30
1328   D722 52 30       
1329   D724             			BITON_($42)				;Turn ON: Bit#02
1329   D724             
1329   D724 10 42       
1330   D726             			SOL_(dtrelease_on)		;Turn ON Sol#14:dt_release
1330   D726 31 6D       
1331   D728             			BEGIN_
1331   D728             
1332   D728             				SLEEP_(32)
1332   D728~            				SLEEP_(32)
1332   D728~            				SLEEP_(32)
1332   D728             
1332   D728 53 20       
1332   D72A             
1333   D72A             				EXE_
1333   D72A             
1333   D72A 44          
1334   D72B 96 D6       				      ldaa	flag_timer_bip
1335   D72D             				EXEEND_
1335   D72D             
1335   D72D             
1335   D72D             
1335   D72D             
1335   D72D~            				EXEEND_
1335   D72D~            				EXEEND_
1335   D72D             
1335   D72A             
1335   D72A 44          
1335   D72B             
1335   D72D             
1335   D72D~            				EXEEND_
1335   D72D~            				EXEEND_
1335   D72D             
1336   D72D             			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D72D             
1336   D72D 5AFCE000FE  
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732             
1336   D732             
1336   D732             
1336   D732             
1336   D732             
1336   D732             
1336   D732             
1336   D731             
1336   D731 F6          
1336   D732             
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732             
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1336   D732             
1337   D732 5F          			JMP_(udt_reset)				
1337   D733 E6 6E       
1338   D735             
1339   D735             ;**********************************************************
1340   D735             ;* Main Reset Hook
1341   D735             ;**********************************************************
1342   D735 86 1C       hook_reset		ldaa	#$1C
1343   D737 7E EC FC    			jmp	isnd_once			;Kill Background Sounds
1344   D73A             			begin
1344   D73A             
1345   D73A 7E EA 67    				jmp	killthread
1346   D73D 96 18       disp_animation		ldaa	bitflags			;See if bit#01 is set
1347   D73F 46          				rora					;If so, we had score, stop the flashing
1348   D740             			ccend
1348   D740             
1348   D740             
1348   D740~            			ccend
1348   D740~            			ccend
1348   D740~            			ccend
1348   D740             
1348   D740 25 F8       
1348   D742             
1348   D742~            			ccend
1348   D742~            			ccend
1348   D742             
1349   D742 86 D0       			ldaa	#$D0
1350   D744 C6 F8       			ldab	#$F8
1351   D746 BD EA FB    			jsr	kill_threads
1352   D749 CE 00 48    			ldx	#score_p1_b1
1353   D74C 96 CD       			ldaa	player_up
1354   D74E 48          			asla	
1355   D74F 48          			asla	
1356   D750 BD EE FF    			jsr	xplusa
1357   D753 86 FF       			ldaa	#$FF
1358   D755 A7 00       			staa	$00,X
1359   D757 A7 01       			staa	$01,X
1360   D759 A7 02       			staa	$02,X
1361   D75B A7 03       			staa	$03,X
1362   D75D BD D7 98    			jsr	cpdisp_show
1363   D760 5F          			clrb	
1364   D761 4F          			clra	
1365   D762 BD EA 2F    			jsr	addthread
1366   D765 58          			.db $58
1367   D766             			begin
1367   D766             
1368   D766             				begin
1368   D766             
1369   D766 88 80       					eora	#$80
1370   D768 C8 01       					eorb	#$01
1371   D76A             					begin
1371   D76A             
1372   D76A 47          						asra	
1373   D76B 36          						psha	
1374   D76C 84 7F       						anda	#$7F
1375   D76E 8D 33       						bsr	plyrmask_x
1376   D770 37          						pshb	
1377   D771 E6 00       						ldab	$00,X
1378   D773 C4 80       						andb	#$80
1379   D775 1B          						aba	
1380   D776 A7 00       						staa	$00,X
1381   D778 BD F9 19    						jsr	disp_mask
1382   D77B 43          						coma	
1383   D77C 94 60       						anda	comma_flags
1384   D77E 97 60       						staa	comma_flags
1385   D780 8D 1E       						bsr	to_update_commas
1386   D782 33          						pulb	
1387   D783 BD EA 2F    						jsr	addthread
1388   D786 03          						.db $03
1389   D787 32          						pula	
1390   D788 36          						psha	
1391   D789 84 01       						anda	#$01
1392   D78B 11          						cba	
1393   D78C 32          						pula	
1394   D78D             					eqend
1394   D78D             
1394   D78D             
1394   D78D~            					eqend
1394   D78D~            					eqend
1394   D78D~            					eqend
1394   D78D             
1394   D78D 26 DB       
1394   D78F             
1394   D78F~            					eqend
1394   D78F~            					eqend
1394   D78F             
1395   D78F 5D          					tstb	
1396   D790             				eqend
1396   D790             
1396   D790             
1396   D790~            				eqend
1396   D790~            				eqend
1396   D790~            				eqend
1396   D790             
1396   D790 26 D4       
1396   D792             
1396   D792~            				eqend
1396   D792~            				eqend
1396   D792             
1397   D792 BD EA 2F    				jsr	addthread
1398   D795 20          				.db $20
1399   D796             			loopend
1399   D796             
1399   D796             
1399   D796~            			loopend
1399   D796~            			loopend
1399   D796~            			loopend
1399   D796             
1399   D796 20 CE       
1399   D798             
1399   D798~            			loopend
1399   D798~            			loopend
1399   D798             
1400   D798             
1401   D798             ;***********************************************************
1402   D798             ;* Will show buffer 0 of current player
1403   D798             ;***********************************************************			
1404   D798 8D 09       cpdisp_show		bsr	plyrmask_x
1405   D79A A6 00       			ldaa	$00,X
1406   D79C 84 80       			anda	#$80
1407   D79E A7 00       			staa	$00,X
1408   D7A0 7E EB A1    to_update_commas	jmp	update_commas
1409   D7A3             
1410   D7A3             ;***********************************************************
1411   D7A3             ;* Loads X with pointer to current players display mask
1412   D7A3             ;***********************************************************
1413   D7A3 36          plyrmask_x		psha	
1414   D7A4 96 CD       			ldaa	player_up
1415   D7A6 CE 00 5C    			ldx	#dmask_p1
1416   D7A9 BD EE FF    			jsr	xplusa
1417   D7AC 32          			pula	
1418   D7AD 39          			rts
1419   D7AE             			
1420   D7AE             ;***********************************************************
1421   D7AE             ;* Attract Mode Lamps 1: LORD Lamps
1422   D7AE             ;***********************************************************
1423   D7AE BD F3 AB    attract_1		jsr	macro_start
1424   D7B1             			PRI_($43)				;Priority=#43
1424   D7B1 52 43       
1425   D7B3             			REMTHREADS_($FA,$42)		;Remove Multiple Threads Based on Priority
1425   D7B3 55 FA 42    
1426   D7B6             			BEGIN_
1426   D7B6             
1427   D7B6             				SETRAM_(regb,$0B)			;RAM$01=$0B
1427   D7B6~            				SETRAM_(regb,$0B)			;RAM$01=$0B
1427   D7B6~            				SETRAM_(regb,$0B)			;RAM$01=$0B
1427   D7B6             
1427   D7B6 C1 0B       
1428   D7B8             				RSET1_($02)				;Effect: Range #02
1428   D7B8             
1428   D7B8 28 02       
1429   D7BA             				BEGIN_
1429   D7BA             
1430   D7BA             					BEGIN_
1430   D7BA             
1431   D7BA             						RSET1_($42)				;Effect: Range #02
1431   D7BA             
1431   D7BA 28 42       
1432   D7BC             						BITOFF2_($4F)			;Turn OFF: Lamp#0F(D)
1432   D7BC             
1432   D7BC 21 4F       
1433   D7BE             						RROR1_($02)				;Effect: Range #02
1433   D7BE             
1433   D7BE 2E 02       
1434   D7C0             						SLEEP_(3)
1434   D7C0             
1434   D7C0 73          
1434   D7C1~            						SLEEP_(3)
1434   D7C1~            						SLEEP_(3)
1434   D7C1             
1435   D7C1             					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C1             
1435   D7C1 5B F5 82 FF 
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5             
1435   D7C5             
1435   D7C5             
1435   D7C5             
1435   D7C5             
1435   D7C5             
1435   D7C5             
1435   D7C4             
1435   D7C4 F5          
1435   D7C5             
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5             
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
1435   D7C5             
1436   D7C5             					BEGIN_
1436   D7C5             
1437   D7C5             						RSET1R1_($02)				;Effect: Range #02
1437   D7C5             
1437   D7C5 2A 02       
1438   D7C7             						SLEEP_(3)
1438   D7C7             
1438   D7C7 73          
1438   D7C8~            						SLEEP_(3)
1438   D7C8~            						SLEEP_(3)
1438   D7C8             
1439   D7C8             					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7C8             
1439   D7C8 5B F6 82 FF 
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC             
1439   D7CC             
1439   D7CC             
1439   D7CC             
1439   D7CC             
1439   D7CC             
1439   D7CC             
1439   D7CB             
1439   D7CB F9          
1439   D7CC             
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC             
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
1439   D7CC             
1440   D7CC             					ADDRAM_(regb,-1)			;RAM$01-=1
1440   D7CC~            					ADDRAM_(regb,-1)			;RAM$01-=1
1440   D7CC~            					ADDRAM_(regb,-1)			;RAM$01-=1
1440   D7CC             
1440   D7CC B1 FF       
1441   D7CE             				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7CE             
1441   D7CE 5BFCE100FE  
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3             
1441   D7D3             
1441   D7D3             
1441   D7D3             
1441   D7D3             
1441   D7D3             
1441   D7D3             
1441   D7D2             
1441   D7D2 E7          
1441   D7D3             
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3             
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
1441   D7D3             
1442   D7D3             			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D3             
1442   D7D3 5AFB40F1FE  
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8             
1442   D7D8             
1442   D7D8             
1442   D7D8             
1442   D7D8             
1442   D7D8             
1442   D7D8             
1442   D7D7             
1442   D7D7 DE          
1442   D7D8             
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8             
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
1442   D7D8             
1443   D7D8             			RCLR1_($42)				;Effect: Range #02
1443   D7D8             
1443   D7D8 29 42       
1444   D7DA             			KILL_					;Remove This Thread
1444   D7DA 03          
1445   D7DB             
1446   D7DB             ;********************************************************
1447   D7DB             ;* Attract Mode Lamps 2
1448   D7DB             ;*
1449   D7DB             ;* This is a ping-pong effect on the left and right
1450   D7DB             ;* magna save lamps. One lamp is one and it bounces 
1451   D7DB             ;* from end to end in the group.
1452   D7DB             ;********************************************************
1453   D7DB             attract_2		NEWTHREAD(attract_2a)
1453   D7DB CE D8 0A    
1453   D7DE BD EA C4    
1454   D7E1 BD F3 AB    			jsr	macro_start
1455   D7E4             			PRI_($43)				;Priority=#43
1455   D7E4 52 43       
1456   D7E6             			BITON2_($66)			;Turn ON: Lamp#26(lmag1)
1456   D7E6             
1456   D7E6 20 66       
1457   D7E8             			BITON2_($47)			;Turn ON: Lamp#07(rmag1)
1457   D7E8             
1457   D7E8 20 47       
1458   D7EA             			BITON2_($60)			;Turn ON: Lamp#20(dt1)
1458   D7EA             
1458   D7EA 20 60       
1459   D7EC             			BEGIN_
1459   D7EC             
1460   D7EC             				BEGIN_
1460   D7EC             
1461   D7EC             					ADDRAM_(rega,$01)			;RAM$00+=$01
1461   D7EC~            					ADDRAM_(rega,$01)			;RAM$00+=$01
1461   D7EC~            					ADDRAM_(rega,$01)			;RAM$00+=$01
1461   D7EC             
1461   D7EC B0 01       
1462   D7EE             at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
1462   D7EE             
1462   D7EE 5AFCFFE00100
1462   D7F4 09
1462   D7F5~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
1462   D7F5~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
1462   D7F5~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
1462   D7F5~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
1462   D7F5~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
1462   D7F5~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
1462   D7F5             
1463   D7F5             				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F5             
1463   D7F5 5A F7 26 FF 
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9             
1463   D7F9             
1463   D7F9             
1463   D7F9             
1463   D7F9             
1463   D7F9             
1463   D7F9             
1463   D7F8             
1463   D7F8 F3          
1463   D7F9             
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9             
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9~            				NEEND_($F7,$26)    		;BEQR_BIT#26
1463   D7F9             
1464   D7F9             				RROL1_($06,$05)			;Effect: Range #06 Range #05
1464   D7F9             
1464   D7F9 2D 86 05    
1465   D7FC             				JMPR_(at2_2)			
1465   D7FC~            				JMPR_(at2_2)			
1465   D7FC~            				JMPR_(at2_2)			
1465   D7FC             
1465   D7FC~            				JMPR_(at2_2)			
1465   D7FC~            				JMPR_(at2_2)			
1465   D7FC             
1465   D7FC             
1465   D7FC 80          
1465   D7FD 07          
1466   D7FE             at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D7FE             
1466   D7FE 5A F7 2A FF 
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802             
1466   D802             
1466   D802             
1466   D802             
1466   D802             
1466   D802             
1466   D802             
1466   D801             
1466   D801 EA          
1466   D802             
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802             
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
1466   D802             
1467   D802             			RROR1_($06,$05)			;Effect: Range #06 Range #05
1467   D802             
1467   D802 2E 86 05    
1468   D805             at2_2			RROL1_($0B)				;Effect: Range #0B
1468   D805             
1468   D805 2D 0B       
1469   D807             			SLEEP_(4)
1469   D807             
1469   D807 74          
1469   D808~            			SLEEP_(4)
1469   D808~            			SLEEP_(4)
1469   D808             
1470   D808             			JMPR_(at2_loop)			
1470   D808~            			JMPR_(at2_loop)			
1470   D808~            			JMPR_(at2_loop)			
1470   D808             
1470   D808~            			JMPR_(at2_loop)			
1470   D808~            			JMPR_(at2_loop)			
1470   D808             
1470   D808             
1470   D808 8F          
1470   D809 E4          
1471   D80A             			
1472   D80A             ;********************************************************
1473   D80A             ;* Attract Mode Lamps 2a
1474   D80A             ;*
1475   D80A             ;* This effect is the center lamps of the PF that include
1476   D80A             ;* the double-score lamp, the multiplier lamps and the 
1477   D80A             ;* bonus lamps from 1-30.  It is a sweep effect that 
1478   D80A             ;* starts with the bottom (double-score) lamp and the 
1479   D80A             ;* multiplier lamps turning on, then the bonus lamps 
1480   D80A             ;* starting at 1 turning on and sequentially turning on
1481   D80A             ;* up through 9. Once all lamps are on, the effect repeats
1482   D80A             ;* but with the lamps turning off.
1483   D80A             ;********************************************************			
1484   D80A BD F3 AB    attract_2a		jsr	macro_start
1485   D80D             			PRI_($43)				;Priority=#43
1485   D80D 52 43       
1486   D80F             			BEGIN_
1486   D80F             
1487   D80F             				BITINV2_($59)			;Toggle: Lamp#19(double_score)
1487   D80F             
1487   D80F 22 59       
1488   D811             				BITINV2_($7C)			;Toggle: Lamp#3C(2x)
1488   D811             
1488   D811 22 7C       
1489   D813             				BITINV2_($7F)			;Toggle: Lamp#3F(5x)
1489   D813             
1489   D813 22 7F       
1490   D815             				SLEEP_(3)
1490   D815             
1490   D815 73          
1490   D816~            				SLEEP_(3)
1490   D816~            				SLEEP_(3)
1490   D816             
1491   D816             				BITINV2_($7D)			;Toggle: Lamp#3D(3x)
1491   D816             
1491   D816 22 7D       
1492   D818             				BITINV2_($7E)			;Toggle: Lamp#3E(4x)
1492   D818             
1492   D818 22 7E       
1493   D81A             				SETRAM_(rega,$6F)			;RAM$00=$6F
1493   D81A~            				SETRAM_(rega,$6F)			;RAM$00=$6F
1493   D81A~            				SETRAM_(rega,$6F)			;RAM$00=$6F
1493   D81A             
1493   D81A C0 6F       
1494   D81C             				BEGIN_
1494   D81C             
1495   D81C             					SLEEP_(3)
1495   D81C             
1495   D81C 73          
1495   D81D~            					SLEEP_(3)
1495   D81D~            					SLEEP_(3)
1495   D81D             
1496   D81D             					ADDRAM_(rega,$01)			;RAM$00+=$01
1496   D81D~            					ADDRAM_(rega,$01)			;RAM$00+=$01
1496   D81D~            					ADDRAM_(rega,$01)			;RAM$00+=$01
1496   D81D             
1496   D81D B0 01       
1497   D81F             					BITINVP2_(rega)			;Toggle Lamp/Bit @RAM:00
1497   D81F             
1497   D81F 26 00       
1498   D821             				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D821             
1498   D821 5BFCE078FE  
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826             
1498   D826             
1498   D826             
1498   D826             
1498   D826             
1498   D826             
1498   D826             
1498   D825             
1498   D825 F6          
1498   D826             
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826             
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
1498   D826             
1499   D826             				BITINV2_($7A)			;Toggle: Lamp#3A(bonus_20)
1499   D826             
1499   D826 22 7A       
1500   D828             				BITINV2_($7B)			;Toggle: Lamp#3B(bonus_30)
1500   D828             
1500   D828 22 7B       
1501   D82A             				SLEEP_(3)
1501   D82A             
1501   D82A 73          
1501   D82B~            				SLEEP_(3)
1501   D82B~            				SLEEP_(3)
1501   D82B             
1502   D82B             				BITINV2_($79)			;Toggle: Lamp#39(bonus_10)
1502   D82B             
1502   D82B 22 79       
1503   D82D             				SLEEP_(3)
1503   D82D             
1503   D82D 73          
1503   D82E~            				SLEEP_(3)
1503   D82E~            				SLEEP_(3)
1503   D82E             
1504   D82E             			LOOP_
1504   D82E             
1504   D82E             
1504   D82E~            			LOOP_
1504   D82E~            			LOOP_
1504   D82E             
1504   D82E~            			LOOP_
1504   D82E~            			LOOP_
1504   D82E             
1504   D82E             
1504   D82E 8F          
1504   D82F DF          
1505   D830             
1506   D830             ;**********************************************************
1507   D830             ;* Attract Mode Lamps 3
1508   D830             ;*
1509   D830             ;* This effect sets up two large groups of lamps and toggles
1510   D830             ;* between the two groups being on with a 15 cycle pause.
1511   D830             ;**********************************************************					
1512   D830 BD F3 AB    attract_3	jsr	macro_start
1513   D833             		PRI_($43)				;Priority=#43
1513   D833 52 43       
1514   D835                   	;Run our new code if not set
1515   D835                   	BITON2_($58)			;Turn ON: Lamp#18(dt_right)
1515   D835             
1515   D835 20 58       
1516   D837                   	BITON2_($5C)			;Turn ON: Lamp#1C(dt_left)
1516   D837             
1516   D837 20 5C       
1517   D839                   	BITON2_($5D)			;Turn ON: Lamp#1D(loop_dshield)
1517   D839             
1517   D839 20 5D       
1518   D83B                   	BEGIN_
1518   D83B             
1519   D83B                   		BITINV2_($56)			;Toggle: Lamp#16(drainshield_r)
1519   D83B             
1519   D83B 22 56       
1520   D83D                   		BITINV2_($58)			;Toggle: Lamp#18(dt_right)
1520   D83D             
1520   D83D 22 58       
1521   D83F                   		BITINV2_($55)			;Toggle: Lamp#15(drainshield_l)
1521   D83F             
1521   D83F 22 55       
1522   D841                   		BITINV2_($5C)			;Toggle: Lamp#1C(dt_left)
1522   D841             
1522   D841 22 5C       
1523   D843                   		;BITINV2_($5E)			;Toggle: Lamp#1E(loop_x)
1524   D843                   		;BITINV2_($5D)			;Toggle: Lamp#1D(loop_dshield)
1525   D843                   		BITINV2_($5A)			;Toggle: Lamp#1A(keepshooting)
1525   D843             
1525   D843 22 5A       
1526   D845                   		SLEEP_(15)
1526   D845             
1526   D845 7F          
1526   D846~                  		SLEEP_(15)
1526   D846~                  		SLEEP_(15)
1526   D846             
1527   D846                   	LOOP_		
1527   D846             
1527   D846             
1527   D846~                  	LOOP_		
1527   D846~                  	LOOP_		
1527   D846             
1527   D846~                  	LOOP_		
1527   D846~                  	LOOP_		
1527   D846             
1527   D846             
1527   D846 8F          
1527   D847 F3          
1528   D848             
1529   D848             ;**********************************************************
1530   D848             ;* Attract Mode Lamps 4
1531   D848             ;*
1532   D848             ;* This effect makes the super fast flashing effect on the
1533   D848             ;* mini playfield and other lamps.
1534   D848             ;**********************************************************				
1535   D848 BD F3 AB    attract_4	      jsr	macro_start
1536   D84B             			PRI_($43)				;Priority=#43
1536   D84B 52 43       
1537   D84D             			BEGIN_
1537   D84D             
1538   D84D             				BITINV2_($57)			;Toggle: Lamp#17(mini_pf)
1538   D84D             
1538   D84D 22 57       
1539   D84F             				BITINV2_($5F)			;Toggle: Lamp#1F(mini_pf)
1539   D84F             
1539   D84F 22 5F       
1540   D851             				BITINV2_($65)			;Toggle: Lamp#25(mini_pf)
1540   D851             
1540   D851 22 65       
1541   D853             				BITINV2_($6E)			;Toggle: Lamp#2E(mini_pf)
1541   D853             
1541   D853 22 6E       
1542   D855             				BITINV2_($6F)			;Toggle: Lamp#2F(mini_pf)
1542   D855             
1542   D855 22 6F       
1543   D857             				BITINV2_($5B)			;Toggle: Lamp#1B(special)
1543   D857             
1543   D857 22 5B       
1544   D859             				BITINV2_($6D)			;Toggle: Lamp#2D(double_trouble)
1544   D859             
1544   D859 22 6D       
1545   D85B             				BITINV2_($5E)			;Toggle: Lamp#1E(look_x)
1545   D85B             
1545   D85B 22 5E       
1546   D85D             				BITINV2_($5D)			;Toggle: Lamp#1D(loop_dshield)
1546   D85D             
1546   D85D 22 5D       
1547   D85F             				BITINV2_($6C)			;Toggle: Lamp#2C(lock)
1547   D85F             
1547   D85F 22 6C       
1548   D861             				BITINV2_($6B)			;Toggle: Lamp#2B(extra_kick)
1548   D861             
1548   D861 22 6B       
1549   D863             				SLEEP_(3)
1549   D863             
1549   D863 73          
1549   D864~            				SLEEP_(3)
1549   D864~            				SLEEP_(3)
1549   D864             
1550   D864             			LOOP_	
1550   D864             
1550   D864             
1550   D864~            			LOOP_	
1550   D864~            			LOOP_	
1550   D864             
1550   D864~            			LOOP_	
1550   D864~            			LOOP_	
1550   D864             
1550   D864             
1550   D864 8F          
1550   D865 E7          
1551   D866             ;**********************************************************
1552   D866             ;* Attract Mode Lamps 5
1553   D866             ;*
1554   D866             ;* This effect sets and rotates a single lamp on through the
1555   D866             ;* 1-5 number targets/rollovers.
1556   D866             ;**********************************************************	
1557   D866 BD F3 AB    attract_5		jsr	macro_start
1558   D869             			PRI_($43)				;Priority=#43
1558   D869 52 43       
1559   D86B             			BITON2_($50)			;Toggle: Lamp#10(1_target)
1559   D86B             
1559   D86B 20 50       
1560   D86D             			BEGIN_
1560   D86D             
1561   D86D             				RROR1_($04)				;Rotate Right Lamp Group $04 (1-5 targets)
1561   D86D             
1561   D86D 2E 04       
1562   D86F             				SLEEP_(4)
1562   D86F             
1562   D86F 74          
1562   D870~            				SLEEP_(4)
1562   D870~            				SLEEP_(4)
1562   D870             
1563   D870             			LOOP_
1563   D870             
1563   D870             
1563   D870~            			LOOP_
1563   D870~            			LOOP_
1563   D870             
1563   D870~            			LOOP_
1563   D870~            			LOOP_
1563   D870             
1563   D870             
1563   D870 8F          
1563   D871 FB          
1564   D872             ;*********************************************************
1565   D872             ; Main System Game Over Entry:
1566   D872             ;*********************************************************	
1567   D872 BD F3 AB    gameover_entry	jsr	macro_start
1568   D875             			IFEQR_($69)			      ;BNER_BIT#29
1568   D875             
1568   D875             
1568   D875             
1568   D875 5B 69 00    
1568   D878~            			IFEQR_($69)			      ;BNER_BIT#29
1568   D878~            			IFEQR_($69)			      ;BNER_BIT#29
1568   D878~            			IFEQR_($69)			      ;BNER_BIT#29
1568   D878~            			IFEQR_($69)			      ;BNER_BIT#29
1568   D878~            			IFEQR_($69)			      ;BNER_BIT#29
1568   D878~            			IFEQR_($69)			      ;BNER_BIT#29
1568   D878             
1569   D878                   			SOL_(gi_off)  		      ;Turn OFF Sol#3:gi
1569   D878 31 02       
1570   D87A                   			SETRAM_($0C,$00)			;RAM$0C=$00
1570   D87A~                  			SETRAM_($0C,$00)			;RAM$0C=$00
1570   D87A~                  			SETRAM_($0C,$00)			;RAM$0C=$00
1570   D87A             
1570   D87A CC 00       
1571   D87C                   			JSRD_(send_sound)			
1571   D87C 57          
1571   D87D FB 30       
1572   D87F                   			SSND_($1C)				;Stop Background Sound
1572   D87F             
1572   D87F FC          
1572   D880~                  			SSND_($1C)				;Stop Background Sound
1572   D880~                  			SSND_($1C)				;Stop Background Sound
1572   D880~                  			SSND_($1C)				;Stop Background Sound
1572   D880             
1573   D880                   			IFNER_($60)			      ;BEQR_BIT#20
1573   D880             
1573   D880             
1573   D880             
1573   D880 5A 60 00    
1573   D883~                  			IFNER_($60)			      ;BEQR_BIT#20
1573   D883~                  			IFNER_($60)			      ;BEQR_BIT#20
1573   D883~                  			IFNER_($60)			      ;BEQR_BIT#20
1573   D883~                  			IFNER_($60)			      ;BEQR_BIT#20
1573   D883~                  			IFNER_($60)			      ;BEQR_BIT#20
1573   D883~                  			IFNER_($60)			      ;BEQR_BIT#20
1573   D883             
1574   D883                   			      SSND_($0F)				;Sound #0F
1574   D883             
1574   D883 EF          
1574   D884~                  			      SSND_($0F)				;Sound #0F
1574   D884~                  			      SSND_($0F)				;Sound #0F
1574   D884~                  			      SSND_($0F)				;Sound #0F
1574   D884             
1575   D884                   			ELSE_			
1575   D884             
1575   D884             
1575   D884             
1575   D884             
1575   D882             
1575   D882             
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882             
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882~                  			ELSE_			
1575   D882             
1575   D882             
1575   D882 03          
1575   D884             
1575   D884             
1575   D884~                  			ELSE_			
1575   D884~                  			ELSE_			
1575   D884             
1575   D884~                  			ELSE_			
1575   D884~                  			ELSE_			
1575   D884             
1575   D884             
1575   D884 80          
1575   D885 00          
1575   D886             
1575   D886             
1575   D886             
1575   D886~                  			ELSE_			
1575   D886~                  			ELSE_			
1575   D886             
1575   D886~                  			ELSE_			
1575   D886~                  			ELSE_			
1575   D886             
1576   D886             			            SSND_($10)				;Sound #10
1576   D886             
1576   D886 F0          
1576   D887~            			            SSND_($10)				;Sound #10
1576   D887~            			            SSND_($10)				;Sound #10
1576   D887~            			            SSND_($10)				;Sound #10
1576   D887             
1577   D887                   			      BITOFF_($60)			;Turn OFF: Bit#20
1577   D887             
1577   D887 11 60       
1578   D889                   			ENDIF_
1578   D889             
1578   D889             
1578   D889             
1578   D889             
1578   D889             
1578   D889~                  			ENDIF_
1578   D889~                  			ENDIF_
1578   D889             
1578   D889~                  			ENDIF_
1578   D889~                  			ENDIF_
1578   D889             
1578   D885             
1578   D885 03          
1578   D886             
1578   D886             
1578   D886~                  			ENDIF_
1578   D886~                  			ENDIF_
1578   D886~                  			ENDIF_
1578   D886~                  			ENDIF_
1578   D886~                  			ENDIF_
1578   D886             
1578   D889             
1578   D889~                  			ENDIF_
1578   D889~                  			ENDIF_
1578   D889             
1579   D889             			      SLEEP_(192)
1579   D889~            			      SLEEP_(192)
1579   D889~            			      SLEEP_(192)
1579   D889             
1579   D889 53 C0       
1579   D88B             
1580   D88B                   			BITOFF_($69)			;Turn OFF: Bit#29
1580   D88B             
1580   D88B 11 69       
1581   D88D                               ENDIF_
1581   D88D             
1581   D88D             
1581   D88D             
1581   D88D             
1581   D88D             
1581   D88D~                              ENDIF_
1581   D88D~                              ENDIF_
1581   D88D             
1581   D88D~                              ENDIF_
1581   D88D~                              ENDIF_
1581   D88D             
1581   D877             
1581   D877 15          
1581   D878             
1581   D878             
1581   D878~                              ENDIF_
1581   D878~                              ENDIF_
1581   D878~                              ENDIF_
1581   D878~                              ENDIF_
1581   D878~                              ENDIF_
1581   D878             
1581   D88D             
1581   D88D~                              ENDIF_
1581   D88D~                              ENDIF_
1581   D88D             
1582   D88D                               RCLR1_($08)				;Effect: Range #08
1582   D88D             
1582   D88D 29 08       
1583   D88F             			RSET1_($48)				;Effect: Range #08
1583   D88F             
1583   D88F 28 48       
1584   D891             			EXE_
1584   D891             
1584   D891 44          
1585   D892 BD D8 AE    				jsr	start_atthreads
1586   D895             			EXEEND_
1586   D895             
1586   D895             
1586   D895             
1586   D895             
1586   D895~            			EXEEND_
1586   D895~            			EXEEND_
1586   D895             
1586   D891             
1586   D891 45          
1586   D892             
1586   D895             
1586   D895~            			EXEEND_
1586   D895~            			EXEEND_
1586   D895             
1587   D895             			BEGIN_
1587   D895             
1588   D895             				SETRAM_(rega,$3C)			;RAM$00=$3C: 60 times
1588   D895~            				SETRAM_(rega,$3C)			;RAM$00=$3C: 60 times
1588   D895~            				SETRAM_(rega,$3C)			;RAM$00=$3C: 60 times
1588   D895             
1588   D895 C0 3C       
1589   D897             				BEGIN_
1589   D897             
1590   D897             					SLEEP_(255)				;255 is about 4 seconds
1590   D897~            					SLEEP_(255)				;255 is about 4 seconds
1590   D897~            					SLEEP_(255)				;255 is about 4 seconds
1590   D897             
1590   D897 53 FF       
1590   D899             
1591   D899             					ADDRAM_(rega,-1)			;RAM$00-=1
1591   D899~            					ADDRAM_(rega,-1)			;RAM$00-=1
1591   D899~            					ADDRAM_(rega,-1)			;RAM$00-=1
1591   D899             
1591   D899 B0 FF       
1592   D89B             				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D89B             
1592   D89B 5BFCE000FE  
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0             
1592   D8A0             
1592   D8A0             
1592   D8A0             
1592   D8A0             
1592   D8A0             
1592   D8A0             
1592   D89F             
1592   D89F F7          
1592   D8A0             
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0             
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1592   D8A0             
1593   D8A0             				;new attract possible, but randomize a bit
1594   D8A0             				IFEQR_($F4,$05)
1594   D8A0             
1594   D8A0             
1594   D8A0             
1594   D8A0 5B F4 05 FF 
1594   D8A4~            				IFEQR_($F4,$05)
1594   D8A4~            				IFEQR_($F4,$05)
1594   D8A4~            				IFEQR_($F4,$05)
1594   D8A4~            				IFEQR_($F4,$05)
1594   D8A4~            				IFEQR_($F4,$05)
1594   D8A4~            				IFEQR_($F4,$05)
1594   D8A4             
1595   D8A4             					JSRR_(atimeout_orig)
1595   D8A4~            					JSRR_(atimeout_orig)
1595   D8A4~            					JSRR_(atimeout_orig)
1595   D8A4             
1595   D8A4~            					JSRR_(atimeout_orig)
1595   D8A4~            					JSRR_(atimeout_orig)
1595   D8A4             
1595   D8A4             
1595   D8A4 90          
1595   D8A5 26          
1596   D8A6             				ELSE_
1596   D8A6             
1596   D8A6             
1596   D8A6             
1596   D8A6             
1596   D8A3             
1596   D8A3             
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3             
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3~            				ELSE_
1596   D8A3             
1596   D8A3             
1596   D8A3 04          
1596   D8A6             
1596   D8A6             
1596   D8A6~            				ELSE_
1596   D8A6~            				ELSE_
1596   D8A6             
1596   D8A6~            				ELSE_
1596   D8A6~            				ELSE_
1596   D8A6             
1596   D8A6             
1596   D8A6 80          
1596   D8A7 00          
1596   D8A8             
1596   D8A8             
1596   D8A8             
1596   D8A8~            				ELSE_
1596   D8A8~            				ELSE_
1596   D8A8             
1596   D8A8~            				ELSE_
1596   D8A8~            				ELSE_
1596   D8A8             
1597   D8A8             					JSRR_(atimeout_new)
1597   D8A8~            					JSRR_(atimeout_new)
1597   D8A8~            					JSRR_(atimeout_new)
1597   D8A8             
1597   D8A8~            					JSRR_(atimeout_new)
1597   D8A8~            					JSRR_(atimeout_new)
1597   D8A8             
1597   D8A8             
1597   D8A8 90          
1597   D8A9 41          
1598   D8AA             				ENDIF_
1598   D8AA             
1598   D8AA             
1598   D8AA             
1598   D8AA             
1598   D8AA             
1598   D8AA~            				ENDIF_
1598   D8AA~            				ENDIF_
1598   D8AA             
1598   D8AA~            				ENDIF_
1598   D8AA~            				ENDIF_
1598   D8AA             
1598   D8A7             
1598   D8A7 02          
1598   D8A8             
1598   D8A8             
1598   D8A8~            				ENDIF_
1598   D8A8~            				ENDIF_
1598   D8A8~            				ENDIF_
1598   D8A8~            				ENDIF_
1598   D8A8~            				ENDIF_
1598   D8A8             
1598   D8AA             
1598   D8AA~            				ENDIF_
1598   D8AA~            				ENDIF_
1598   D8AA             
1599   D8AA             				JSRR_(gi_on_dec)
1599   D8AA~            				JSRR_(gi_on_dec)
1599   D8AA~            				JSRR_(gi_on_dec)
1599   D8AA             
1599   D8AA~            				JSRR_(gi_on_dec)
1599   D8AA~            				JSRR_(gi_on_dec)
1599   D8AA             
1599   D8AA             
1599   D8AA 9A          
1599   D8AB B8          
1600   D8AC             			LOOP_
1600   D8AC             
1600   D8AC             
1600   D8AC~            			LOOP_
1600   D8AC~            			LOOP_
1600   D8AC             
1600   D8AC~            			LOOP_
1600   D8AC~            			LOOP_
1600   D8AC             
1600   D8AC             
1600   D8AC 8F          
1600   D8AD E7          
1601   D8AE             
1602   D8AE             ;***********************************************************
1603   D8AE             ;* Used to start all the attract mode threads up.
1604   D8AE             ;***********************************************************			
1605   D8AE             start_atthreads	NEWTHREAD(attract_1)
1605   D8AE CE D7 AE    
1605   D8B1 BD EA C4    
1606   D8B4             			NEWTHREAD(attract_2)
1606   D8B4 CE D7 DB    
1606   D8B7 BD EA C4    
1607   D8BA             			NEWTHREAD(attract_3)
1607   D8BA CE D8 30    
1607   D8BD BD EA C4    
1608   D8C0             			NEWTHREAD(attract_4)
1608   D8C0 CE D8 48    
1608   D8C3 BD EA C4    
1609   D8C6             			NEWTHREAD_JMP(attract_5)
1609   D8C6 CE D8 66    
1609   D8C9 7E EA C4    
1610   D8CC             			
1611   D8CC             ;***********************************************************
1612   D8CC             ;* This is the orignal attract mode timeout, it flashes the 
1613   D8CC             ;* GI and plays a random speech phrase. This is still used
1614   D8CC             ;* but alternates with the new attract mode timeout code
1615   D8CC             ;* which is below.
1616   D8CC             ;***********************************************************		
1617   D8CC             atimeout_orig	SETRAM_(rega,$10)			;RAM$00=$10
1617   D8CC~            atimeout_orig	SETRAM_(rega,$10)			;RAM$00=$10
1617   D8CC~            atimeout_orig	SETRAM_(rega,$10)			;RAM$00=$10
1617   D8CC             
1617   D8CC C0 10       
1618   D8CE             			BEGIN_
1618   D8CE             
1619   D8CE             				JSRR_(gi_off_inc)			
1619   D8CE~            				JSRR_(gi_off_inc)			
1619   D8CE~            				JSRR_(gi_off_inc)			
1619   D8CE             
1619   D8CE~            				JSRR_(gi_off_inc)			
1619   D8CE~            				JSRR_(gi_off_inc)			
1619   D8CE             
1619   D8CE             
1619   D8CE 9A          
1619   D8CF A3          
1620   D8D0             				SLEEP_(4)
1620   D8D0             
1620   D8D0 74          
1620   D8D1~            				SLEEP_(4)
1620   D8D1~            				SLEEP_(4)
1620   D8D1             
1621   D8D1             				JSRR_(gi_on_dec)			
1621   D8D1~            				JSRR_(gi_on_dec)			
1621   D8D1~            				JSRR_(gi_on_dec)			
1621   D8D1             
1621   D8D1~            				JSRR_(gi_on_dec)			
1621   D8D1~            				JSRR_(gi_on_dec)			
1621   D8D1             
1621   D8D1             
1621   D8D1 9A          
1621   D8D2 91          
1622   D8D3             				SLEEP_(4)
1622   D8D3             
1622   D8D3 74          
1622   D8D4~            				SLEEP_(4)
1622   D8D4~            				SLEEP_(4)
1622   D8D4             
1623   D8D4             				ADDRAM_(rega,-1)			;RAM$00-=1
1623   D8D4~            				ADDRAM_(rega,-1)			;RAM$00-=1
1623   D8D4~            				ADDRAM_(rega,-1)			;RAM$00-=1
1623   D8D4             
1623   D8D4 B0 FF       
1624   D8D6             			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8D6             
1624   D8D6 5BFCE000FE  
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB             
1624   D8DB             
1624   D8DB             
1624   D8DB             
1624   D8DB             
1624   D8DB             
1624   D8DB             
1624   D8DA             
1624   D8DA F3          
1624   D8DB             
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB             
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB~            			EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1624   D8DB             
1625   D8DB             			JSRR_(gi_off_inc)			
1625   D8DB~            			JSRR_(gi_off_inc)			
1625   D8DB~            			JSRR_(gi_off_inc)			
1625   D8DB             
1625   D8DB~            			JSRR_(gi_off_inc)			
1625   D8DB~            			JSRR_(gi_off_inc)			
1625   D8DB             
1625   D8DB             
1625   D8DB 9A          
1625   D8DC 96          
1626   D8DD             			IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1626   D8DD             
1626   D8DD             
1626   D8DD             
1626   D8DD 5AFCFFD7F2F0
1626   D8E3 10FB
1626   D8E5~            			IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1626   D8E5~            			IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1626   D8E5~            			IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1626   D8E5~            			IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1626   D8E5~            			IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1626   D8E5~            			IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1626   D8E5             
1627   D8E5             				SSND_($0E)				;Sound #0E
1627   D8E5             
1627   D8E5 EE          
1627   D8E6~            				SSND_($0E)				;Sound #0E
1627   D8E6~            				SSND_($0E)				;Sound #0E
1627   D8E6~            				SSND_($0E)				;Sound #0E
1627   D8E6             
1628   D8E6             				JSRD_(send_sound)	
1628   D8E6 57          
1628   D8E7 FB 30       
1629   D8E9             			ENDIF_				
1629   D8E9             
1629   D8E9             
1629   D8E9             
1629   D8E9             
1629   D8E9             
1629   D8E9~            			ENDIF_				
1629   D8E9~            			ENDIF_				
1629   D8E9             
1629   D8E9~            			ENDIF_				
1629   D8E9~            			ENDIF_				
1629   D8E9             
1629   D8E4             
1629   D8E4 04          
1629   D8E5             
1629   D8E5             
1629   D8E5~            			ENDIF_				
1629   D8E5~            			ENDIF_				
1629   D8E5~            			ENDIF_				
1629   D8E5~            			ENDIF_				
1629   D8E5~            			ENDIF_				
1629   D8E5             
1629   D8E9             
1629   D8E9~            			ENDIF_				
1629   D8E9~            			ENDIF_				
1629   D8E9             
1630   D8E9             			SSND_($1C)				;Sound #1C	
1630   D8E9             
1630   D8E9 FC          
1630   D8EA~            			SSND_($1C)				;Sound #1C	
1630   D8EA~            			SSND_($1C)				;Sound #1C	
1630   D8EA~            			SSND_($1C)				;Sound #1C	
1630   D8EA             
1631   D8EA             			MRTS_
1631   D8EA 02          
1632   D8EB             
1633   D8EB             ;***********************************************************
1634   D8EB             ;* This is the new attract mode timeout, it turns off all 
1635   D8EB             ;* lamps (controlled and GI) then does the up/down lamp
1636   D8EB             ;* animation 3 times and then continues the standard lamp
1637   D8EB             ;* animation for the attract mode.
1638   D8EB             ;***********************************************************			
1639   D8EB             atimeout_new	REMTHREADS_($FF,$43)		;Remove Multiple Threads Based on Priority
1639   D8EB 55 FF 43    
1640   D8EE             			RCLR1_($08)				;Effect: Range #08
1640   D8EE             
1640   D8EE 29 08       
1641   D8F0             			RSET1_($48)				;Effect: Range #08
1641   D8F0             
1641   D8F0 28 48       
1642   D8F2             			JSR_(gi_off_inc)
1642   D8F2 56          
1642   D8F3 D3 73       
1643   D8F5             			;Attract sound
1644   D8F5             			EXE_
1644   D8F5             
1644   D8F5 44          
1645   D8F6 BD FB 80    				jsr	get_random
1646   D8F9 84 07       				anda	#$07
1647   D8FB 8B 18       				adda	#$18
1648   D8FD             			EXEEND_
1648   D8FD             
1648   D8FD             
1648   D8FD             
1648   D8FD             
1648   D8FD~            			EXEEND_
1648   D8FD~            			EXEEND_
1648   D8FD             
1648   D8F5             
1648   D8F5 49          
1648   D8F6             
1648   D8FD             
1648   D8FD~            			EXEEND_
1648   D8FD~            			EXEEND_
1648   D8FD             
1649   D8FD             			JSRD_(ext_snd)
1649   D8FD 57          
1649   D8FE D9 4D       
1650   D900             			;setup loop
1651   D900             			SETRAM_($0B,$02)
1651   D900~            			SETRAM_($0B,$02)
1651   D900~            			SETRAM_($0B,$02)
1651   D900             
1651   D900 CB 02       
1652   D902             			BEGIN_
1652   D902             
1653   D902             				JSRD_(ani_bottop)
1653   D902 57          
1653   D903 D0 68       
1654   D905             				JSRD_(ani_topbot)
1654   D905 57          
1654   D906 D0 81       
1655   D908             				ADDRAM_($0B,-1)
1655   D908~            				ADDRAM_($0B,-1)
1655   D908~            				ADDRAM_($0B,-1)
1655   D908             
1655   D908 BB FF       
1656   D90A             			EQEND_($FC,$EB,$00)
1656   D90A             
1656   D90A 5BFCEB00FE  
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F             
1656   D90F             
1656   D90F             
1656   D90F             
1656   D90F             
1656   D90F             
1656   D90F             
1656   D90E             
1656   D90E F3          
1656   D90F             
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F             
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F~            			EQEND_($FC,$EB,$00)
1656   D90F             
1657   D90F             			JSRD_(start_atthreads)	
1657   D90F 57          
1657   D910 D8 AE       
1658   D912             			MRTS_
1658   D912 02          
1659   D913             
1660   D913             			
1661   D913             
1662   D913             ;attract_play	;start lamp playground			
1663   D913             ;			jsr 	macro_start
1664   D913             ;			;RSET1_($00)				;Turn on all lamps in group
1665   D913             ;			RCLR0_($00)				;Turn off all lamps in group
1666   D913             ;			;BITOFF2_($70)
1667   D913             ;			;BITOFF2_($35)
1668   D913             ;			;BITOFF2_($00)
1669   D913             ;			BITON2_($5E)				;Turn ON: Lamp#1E(loop_x)
1670   D913             ;			BEGIN_
1671   D913             ;				BITINV2_($5E)
1672   D913             ;				RSET1R1_($00)				;Fill Left without reset
1673   D913             ;				;RSET1RC1_($00)				;Fill Left with Reset on Full
1674   D913             ;				;RCLR1L1_($00)				;Clear Right without reset
1675   D913             ;				;RROL1_($00)				;Rotate Left
1676   D913             ;				;RROR1_($00)				;Rotate Right
1677   D913             ;				;SLEEP_(30)
1678   D913             ;				;RINV1_($00)				;Invert all lamps
1679   D913             ;				SLEEP_(60)
1680   D913             ;			LOOP_ 
1681   D913             					
1682   D913 DF A2       add_dt_audit	stx	sys_temp3
1683   D915 CE 01 3A    			ldx	#aud_game4			;Total 20,000 Double Trouble Scores
1684   D918 81 02       			cmpa	#$02
1685   D91A             			ifne
1685   D91A             
1685   D91A 27 FE       
1686   D91C CE 01 3E          			ldx	#aud_game5			;Total 40,000 Double Trouble Scores
1687   D91F 81 04             			cmpa	#$04
1688   D921                   			ifne
1688   D921             
1688   D921 27 FE       
1689   D923 CE 01 42                			ldx	#aud_game6			;Total 80,000 Double Trouble Scores
1690   D926 81 08                   			cmpa	#$08
1691   D928                         			ifne
1691   D928             
1691   D928 27 FE       
1692   D92A CE 01 46                			      ldx	#aud_game7			;Total 160,000 Double Trouble Scores
1693   D92D 81 16                   			      cmpa	#$16
1694   D92F 26 03                   			bne	aud_noadd               ;didn't find an audit for this, bad, exit
1695   D931                         			endif
1695   D931             
1695   D931             
1695   D931             
1695   D931             
1695   D931             
1695   D931~                        			endif
1695   D931~                        			endif
1695   D931             
1695   D931~                        			endif
1695   D931~                        			endif
1695   D931             
1695   D929             
1695   D929 07          
1695   D92A             
1695   D92A             
1695   D92A~                        			endif
1695   D92A~                        			endif
1695   D92A~                        			endif
1695   D92A             
1695   D931             
1695   D931~                        			endif
1695   D931~                        			endif
1695   D931             
1696   D931                         		endif
1696   D931             
1696   D931             
1696   D931             
1696   D931             
1696   D931             
1696   D931~                        		endif
1696   D931~                        		endif
1696   D931             
1696   D931~                        		endif
1696   D931~                        		endif
1696   D931             
1696   D922             
1696   D922 0E          
1696   D923             
1696   D923             
1696   D923~                        		endif
1696   D923~                        		endif
1696   D923~                        		endif
1696   D923             
1696   D931             
1696   D931~                        		endif
1696   D931~                        		endif
1696   D931             
1697   D931                         	endif
1697   D931             
1697   D931             
1697   D931             
1697   D931             
1697   D931             
1697   D931~                        	endif
1697   D931~                        	endif
1697   D931             
1697   D931~                        	endif
1697   D931~                        	endif
1697   D931             
1697   D91B             
1697   D91B 15          
1697   D91C             
1697   D91C             
1697   D91C~                        	endif
1697   D91C~                        	endif
1697   D91C~                        	endif
1697   D91C             
1697   D931             
1697   D931~                        	endif
1697   D931~                        	endif
1697   D931             
1698   D931 BD F7 7F    			jsr	ptrx_plus_1
1699   D934 DE A2       aud_noadd		ldx	sys_temp3
1700   D936 39          			rts	
1701   D937             
1702   D937             ;****************************************************
1703   D937             ; Check status of ball trough switches, if they are
1704   D937             ; both down, then eject a ball.
1705   D937             ;****************************************************			
1706   D937             do_trough		EXE_
1706   D937             
1706   D937 44          
1707   D938 7F 00 D6    			      clr	flag_timer_bip
1708   D93B 96 62       			      ldaa	$62
1709   D93D 84 03       			      anda	#$03
1710   D93F             			EXEEND_
1710   D93F             
1710   D93F             
1710   D93F             
1710   D93F             
1710   D93F~            			EXEEND_
1710   D93F~            			EXEEND_
1710   D93F             
1710   D937             
1710   D937 49          
1710   D938             
1710   D93F             
1710   D93F~            			EXEEND_
1710   D93F~            			EXEEND_
1710   D93F             
1711   D93F             			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1711   D93F             
1711   D93F             
1711   D93F             
1711   D93F 5BFCE003FE  
1711   D944~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1711   D944~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1711   D944~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1711   D944~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1711   D944~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1711   D944~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1711   D944             
1712   D944             			      SOL_(trough_on)   		;Turn ON Sol#2:trough
1712   D944 31 41       
1713   D946             			      BITOFF_($55)			;Turn OFF: Bit#15
1713   D946             
1713   D946 11 55       
1714   D948             			ENDIF_
1714   D948             
1714   D948             
1714   D948             
1714   D948             
1714   D948             
1714   D948~            			ENDIF_
1714   D948~            			ENDIF_
1714   D948             
1714   D948~            			ENDIF_
1714   D948~            			ENDIF_
1714   D948             
1714   D943             
1714   D943 04          
1714   D944             
1714   D944             
1714   D944~            			ENDIF_
1714   D944~            			ENDIF_
1714   D944~            			ENDIF_
1714   D944~            			ENDIF_
1714   D944~            			ENDIF_
1714   D944             
1714   D948             
1714   D948~            			ENDIF_
1714   D948~            			ENDIF_
1714   D948             
1715   D948                   		SLEEP_(96)
1715   D948~                  		SLEEP_(96)
1715   D948~                  		SLEEP_(96)
1715   D948             
1715   D948 53 60       
1715   D94A             
1716   D94A 5E 09       			SWCLR_($09)				;Clear Sw#: $09(left_trough)
1717   D94C             			MRTS_					;Macro RTS, Save MRA,MRB
1717   D94C 02          
1718   D94D             
1719   D94D             ;***************************************************
1720   D94D             ;* this is our special extended sound routine that
1721   D94D             ;* needs to be called for any of the sound commands
1722   D94D             ;* that are above $1F. Since the original level 7
1723   D94D             ;* flipper ROM's only support $1F commands, we need
1724   D94D             ;* to hack into the system calls to do this correctly.
1725   D94D             ;* When this routine is called A should contain the 
1726   D94D             ;* extended sound command from $00 to $1F, these will
1727   D94D             ;* translate into sound commands of $20-$3F
1728   D94D             ;***************************************************
1729   D94D C6 01       ext_snd           ldab  #$01
1730   D94F 36                            psha	
1731   D950 37          			pshb	
1732   D951 D7 B8       			stab	soundcount
1733   D953 16          			tab	                              ;store our sound in B temporarily
1734   D954 86 7F       			ldaa	#$7F
1735   D956 BD ED A0    			jsr	send_snd				;Send Sound Stop Command
1736   D959 17          			tba	                              ;get it back
1737   D95A 97 C2       			staa	soundindex				;Sound Command Table Index
1738   D95C 48          			asla	
1739   D95D 1B          			aba						;Index * 3
1740   D95E CE D9 DC    			ldx	#soundtable_x			;Game ROM: Sound Table Pointer
1741   D961 DF 9E       			stx  	temp3
1742   D963 BD EE FF    			jsr	xplusa				;X = X + A
1743   D966 A6 02       			ldaa	$02,X	
1744   D968 84 20       			anda 	#$20
1745   D96A             			ifne
1745   D96A             
1745   D96A 27 FE       
1746   D96C             				;wait a bit for the sound board to process the previous
1747   D96C 86 00       				ldaa	#(~$1F)&$1F
1748   D96E BD ED A0    				jsr	send_snd				;Send Bank Command
1749   D971             				;now wait again
1750   D971             				
1751   D971             			endif
1751   D971             
1751   D971             
1751   D971             
1751   D971             
1751   D971             
1751   D971~            			endif
1751   D971~            			endif
1751   D971             
1751   D971~            			endif
1751   D971~            			endif
1751   D971             
1751   D96B             
1751   D96B 05          
1751   D96C             
1751   D96C             
1751   D96C~            			endif
1751   D96C~            			endif
1751   D96C~            			endif
1751   D96C             
1751   D971             
1751   D971~            			endif
1751   D971~            			endif
1751   D971             
1752   D971 9E 9E       			lds	temp3
1753   D973 7E ED 66    			jmp   isnd_mult_x                  ;Jump to the middle of the regular sound
1754   D976             			                                    ;routine in the flipper ROM
1755   D976             			
1756   D976             ;*****************************************************
1757   D976             ;* Sound Lookup Table:
1758   D976             ;*****************************************************
1759   D976             ;  1st Byte: Sound Flags
1760   D976             ;  2nd Byte: IRQ Counter
1761   D976             ;  3rd Byte: Raw Sound Command      rawcmd;(sndcmd) (index)
1762   D976             
1763   D976             #define	regsound(a,b,c)		.db	a,b,(~c)&$3F
1764   D976             
1765   D976 23 06 3A    soundtable		regsound($23,$06,$05)		;(00) Credit Sound
1766   D979 A0 04 2F    			regsound($A0,$04,$10)		;(01) Pop Bumper Thud
1767   D97C 28 06 3A    			regsound($28,$06,$05)		;(02) Credit Sound
1768   D97F A0 04 38    			regsound($A0,$04,$07)		;(03) Thud
1769   D982 22 40 32    			regsound($22,$40,$0D)		;(04) UDT Bank Down
1770   D985 28 02 2D    			regsound($28,$02,$12)		;(05) 
1771   D988 24 22 3D    			regsound($24,$22,$02)		;(06) Electric Melt
1772   D98B 24 50 39    			regsound($24,$50,$06)		;(07) Double Trouble Target Timeout
1773   D98E C9 10 3E    			regsound($C9,$10,$01)		;(08) Tilt
1774   D991 23 20 34    			regsound($23,$20,$0B)		;(09) UDT Bank Down
1775   D994 D9 D6       			.dw c_sound1\	.db $FF	;(0A) 
1775   D996 FF          
1776   D997 27 20 33    			regsound($27,$20,$0C)		;(0B) Credit
1777   D99A 28 2C 23    			regsound($28,$2C,$1C)		;(0C) High Score 
1778   D99D 27 40 2B    			regsound($27,$40,$14)		;(0D) Special (Long Slow Explosion)
1779   D9A0 CC F0 26    			regsound($CC,$F0,$19)		;(0E) Add Player - Random Speech
1780   D9A3 CE D0 29    			regsound($CE,$D0,$16)		;(0F) "Me Jungle Lord"
1781   D9A6 CE FF 27    			regsound($CE,$FF,$18)		;(10) "You Win! Fight in Jungle Again"
1782   D9A9 CE 88 2E    			regsound($CE,$88,$11)		;(11) "You Jungle Lord"
1783   D9AC 4E FF 30    			regsound($4E,$FF,$0F)		;(12) "Stampede, (trumpet)"
1784   D9AF CE FF 31    			regsound($CE,$FF,$0E)		;(13) "Fight Tiger Again"
1785   D9B2 CE D8 35    			regsound($CE,$D8,$0A)		;(14) "Jungle Lord in Double Trouble" OR "You in Double Trouble"
1786   D9B5 CE C8 3C    			regsound($CE,$C8,$03)		;(15) High Score - "You  Win! You Jungle Lord"
1787   D9B8 8C 80 29    			regsound($8C,$80,$16)		;(16) Match - "Me Jungle Lord"
1788   D9BB CE A8 3B    			regsound($CE,$A8,$04)		;(17) Drop Target Timer
1789   D9BE 05 50 21    			regsound($05,$50,$1E)		;(18) Trumpet
1790   D9C1 05 50 21    			regsound($05,$50,$1E)		;(18) Trumpet
1791   D9C4 24 02 36    			regsound($24,$02,$09)		;(1A) Lower Drop Target Timer
1792   D9C7 BE 40 2A    			regsound($BE,$40,$15)		;(1B) Background Sound
1793   D9CA 9F 40 2C    			regsound($9F,$40,$13)		;(1C) Game Over (Kill All BG)
1794   D9CD A9 60 22    			regsound($A9,$60,$1D)		;(1D) Match Sound
1795   D9D0 04 04 36    			regsound($04,$04,$09)		;(1E) Bonus Count
1796   D9D3 28 40 28    			regsound($28,$40,$17)		;(1F) Explosion
1797   D9D6             
1798   D9D6 26822D803A3Fc_sound1		.db $26,$82,$2D,$80,$3A,$3F	;(19)(12)(02)
1799   D9DC             
1800   D9DC             ;**********************************************************************
1801   D9DC             ;* these are the extended sounds beyond $1F, they must be called via 
1802   D9DC             ;* the routine 'ext_snd' with the index into this table in A
1803   D9DC             ;**********************************************************************
1804   D9DC CE 06 10    soundtable_x	regsound($CE,$06,$2F)		;(00) monkey_oohooh
1805   D9DF CE 04 1C    			regsound($CE,$04,$23)		;(01) tiger_double
1806   D9E2 CE 06 1E    			regsound($CE,$06,$21)		;(02) tiger_slow
1807   D9E5 CE 04 16    			regsound($CE,$04,$29)		;(03) shriek1
1808   D9E8 CE D0 05    			regsound($CE,$D0,$3A)		;(04) "Me Jungle Lord"
1809   D9EB CE D0 0A    			regsound($CE,$D0,$35)		;(05) BK Laugh
1810   D9EE CE 22 00    			regsound($CE,$22,$3F)		;(06) Alt Bonus Countup 
1811   D9F1 CE 50 3F    			regsound($CE,$50,$00)		;(07) 
1812   D9F4 CE 10 3F    			regsound($CE,$10,$00)		;(08) 
1813   D9F7 CE 20 3F    			regsound($CE,$20,$00)		;(09) 
1814   D9FA CE 20 3F    			regsound($CE,$20,$00)		;(0A) 
1815   D9FD CE 20 3F    			regsound($CE,$20,$00)		;(0B) 
1816   DA00 CE 20 3F    			regsound($CE,$20,$00)		;(0C) 
1817   DA03 CE 20 3F    			regsound($CE,$20,$00)		;(0D) 
1818   DA06 23 20 3F    			regsound($23,$20,$00)		;(0A) 
1819   DA09 23 20 3F    			regsound($23,$20,$00)		;(0B) 
1820   DA0C 23 20 3F    			regsound($23,$20,$00)		;(0C) 
1821   DA0F 23 20 3F    			regsound($23,$20,$00)		;(0D) 
1822   DA12 23 20 04    			regsound($23,$20,$3B)		;(0E) Drum Background
1823   DA15 23 20 20    			regsound($23,$20,$1F)		;(0F) Trumpet
1824   DA18             			;Multiball Animals
1825   DA18 23 10 1F    			regsound($23,$10,$20)		;(10) tiger_norm
1826   DA1B 23 10 1B    			regsound($23,$10,$24)		;(11) tiger_bark
1827   DA1E 23 10 17    			regsound($23,$10,$28)		;(12) simple_chirp
1828   DA21 23 10 15    			regsound($23,$10,$2A)		;(13) shriek2
1829   DA24 23 10 14    			regsound($23,$10,$2B)		;(14) shriek3
1830   DA27 23 10 0F    			regsound($23,$10,$30)		;(15) monkey_oohooh2
1831   DA2A 23 10 0E    			regsound($23,$10,$31)		;(16) monkey_oohooh3
1832   DA2D 23 10 20    			regsound($23,$10,$1F)		;(17) Trumpet
1833   DA30             			;Attract Sounds
1834   DA30 23 20 1D    			regsound($23,$20,$22)		;(18) tiger_slowest
1835   DA33 23 20 11    			regsound($23,$20,$2E)		;(19) monkeytune
1836   DA36 23 20 13    			regsound($23,$20,$2C)		;(1A) shriek4
1837   DA39 23 20 09    			regsound($23,$20,$36)		;(1B) trumpet_slower
1838   DA3C CE 20 0D    			regsound($CE,$20,$32)		;(1C) monkey_oohooh4
1839   DA3F CE 20 0C    			regsound($CE,$20,$33)		;(1D) monkey_oohooh5
1840   DA42 CE 20 08    			regsound($CE,$20,$37)		;(1E) fight_jungle_lord 
1841   DA45 CE 20 12    			regsound($CE,$20,$2D)		;(1F) shriek5
1842   DA48             
1843   DA48 D3          switchtable		.db %11010011	\.dw sw_plumbtilt		;(1) plumbtilt
1843   DA49 E1 51       
1844   DA4B 91          			.db %10010001	\.dw sw_balltilt		;(2) balltilt
1844   DA4C E1 6C       
1845   DA4E 71          			.db %01110001	\.dw credit_button	;(3) credit_button
1845   DA4F FB 92       
1846   DA51 F2          			.db %11110010	\.dw sw_coin_r		;(4) coin_r
1846   DA52 E1 4D       
1847   DA54 F2          			.db %11110010	\.dw sw_coin_c		;(5) coin_c
1847   DA55 E1 4D       
1848   DA57 F2          			.db %11110010	\.dw sw_coin_l		;(6) coin_l
1848   DA58 E1 4D       
1849   DA5A 71          			.db %01110001	\.dw reset			;(7) slam
1849   DA5B E8 00       
1850   DA5D F1          			.db %11110001	\.dw sw_hstd_res		;(8) hstd_res
1850   DA5E E1 94       
1851   DA60 D4          			.db %11010100	\.dw sw_right_trough	;(9) right_trough
1851   DA61 E4 EA       
1852   DA63 D4          			.db %11010100	\.dw sw_left_trough	;(10) left_trough
1852   DA64 E5 03       
1853   DA66 D4          			.db %11010100	\.dw sw_notused		;(11) notused
1853   DA67 E1 B5       
1854   DA69 91          			.db %10010001	\.dw sw_leftsling		;(12) leftsling
1854   DA6A E1 98       
1855   DA6C 93          			.db %10010011	\.dw sw_L_rollover	;(13) L_rollover
1855   DA6D E3 8D       
1856   DA6F 93          			.db %10010011	\.dw sw_O_rollover	;(14) O_rollover
1856   DA70 E3 8D       
1857   DA72 93          			.db %10010011	\.dw sw_R_rollover	;(15) R_rollover
1857   DA73 E3 8D       
1858   DA75 93          			.db %10010011	\.dw sw_D_rollover	;(16) D_rollover
1858   DA76 E3 8D       
1859   DA78 92          			.db %10010010	\.dw sw_1_target		;(17) 1_target
1859   DA79 D3 7B       
1860   DA7B 92          			.db %10010010	\.dw sw_2_target		;(18) 2_target
1860   DA7C D3 7B       
1861   DA7E 92          			.db %10010010	\.dw sw_3_target		;(19) 3_target
1861   DA7F D3 7B       
1862   DA81 93          			.db %10010011	\.dw sw_4_rollover	;(20) 4_rollover
1862   DA82 D3 D1       
1863   DA84 93          			.db %10010011	\.dw sw_5_rollover	;(21) 5_rollover
1863   DA85 D3 C5       
1864   DA87 93          			.db %10010011	\.dw sw_leftdrain		;(22) leftdrain
1864   DA88 D1 07       
1865   DA8A 93          			.db %10010011	\.dw sw_rightdrain	;(23) rightdrain
1865   DA8B D1 07       
1866   DA8D 93          			.db %10010011	\.dw sw_looplow		;(24) looplow
1866   DA8E E1 B6       
1867   DA90 95          			.db %10010101	\.dw sw_dt_rb		;(25) dt_rb
1867   DA91 E2 40       
1868   DA93 95          			.db %10010101	\.dw sw_dt_rc		;(26) dt_rc
1868   DA94 E2 40       
1869   DA96 95          			.db %10010101	\.dw sw_dt_rt		;(27) dt_rt
1869   DA97 E2 40       
1870   DA99 91          			.db %10010001	\.dw sw_rightsling	;(28) rightsling
1870   DA9A E1 98       
1871   DA9C 95          			.db %10010101	\.dw sw_dt_ll		;(29) dt_ll
1871   DA9D E2 26       
1872   DA9F 95          			.db %10010101	\.dw sw_dt_lc		;(30) dt_lc
1872   DAA0 E2 26       
1873   DAA2 95          			.db %10010101	\.dw sw_dt_lu		;(31) dt_lu
1873   DAA3 E2 26       
1874   DAA5 93          			.db %10010011	\.dw sw_loophigh		;(32) loophigh
1874   DAA6 E1 F6       
1875   DAA8 95          			.db %10010101	\.dw sw_dt_u1		;(33) dt_u1
1875   DAA9 E7 79       
1876   DAAB 95          			.db %10010101	\.dw sw_dt_u2		;(34) dt_u2
1876   DAAC E7 79       
1877   DAAE 95          			.db %10010101	\.dw sw_dt_u3		;(35) dt_u3
1877   DAAF E7 79       
1878   DAB1 95          			.db %10010101	\.dw sw_dt_u4		;(36) dt_u4
1878   DAB2 E7 79       
1879   DAB4 95          			.db %10010101	\.dw sw_dt_u5		;(37) dt_u5
1879   DAB5 E7 79       
1880   DAB7 F4          			.db %11110100	\.dw sw_upper_eject	;(38) upper_eject
1880   DAB8 E3 EE       
1881   DABA F4          			.db %11110100	\.dw sw_lower_eject	;(39) lower_eject
1881   DABB E2 DD       
1882   DABD 91          			.db %10010001	\.dw sw_upper_sling	;(40) upper_sling
1882   DABE E1 98       
1883   DAC0 D3          			.db %11010011	\.dw sw_pf_tilt		;(41) pf_tilt
1883   DAC1 E1 51       
1884   DAC3 F6          			.db %11110110	\.dw sw_outhole		;(42) outhole
1884   DAC4 D2 0F       
1885   DAC6 9F          			.db %10011111	\.dw sw_ballshooter	;(43) ballshooter
1885   DAC7 D1 C9       
1886   DAC9 93          			.db %10010011	\.dw sw_pf_entry		;(44) pf_entry
1886   DACA D1 FB       
1887   DACC 91          			.db %10010001	\.dw sw_ten_1		;(45) ten_1
1887   DACD E1 98       
1888   DACF 91          			.db %10010001	\.dw sw_ten_2		;(46) ten_2
1888   DAD0 E1 98       
1889   DAD2 91          			.db %10010001	\.dw sw_ten_3		;(47) ten_3
1889   DAD3 E1 98       
1890   DAD5 91          			.db %10010001	\.dw sw_notused		;(48) notused
1890   DAD6 E1 B5       
1891   DAD8 91          			.db %10010001	\.dw sw_right_magnet	;(49) right_magnet
1891   DAD9 D4 8F       
1892   DADB 91          			.db %10010001	\.dw sw_left_magnet	;(50) left_magnet
1892   DADC D4 32       
1893   DADE             switchtable_end
1894   DADE             
1895   DADE 28          			.db $28
1896   DADF             
1897   DADF~            #if $>$E000
1898   DADF~            	.error "ROM Overflow at $E000, make sure your code is not too big."
1899   DADF             #endif
1900   E000              	.org $e000
1901   E000             
1902   E000             ;---------------------------------------------------------------------------
1903   E000             ;  Default game data and basic system tables start at $e000, these can not  
1904   E000             ;  ever be moved
1905   E000             ;---------------------------------------------------------------------------
1906   E000             
1907   E000 25 03       gr_gamenumber		.dw $2503
1908   E002 F2          gr_romrevision		.db $F2
1909   E003 B2 A5       gr_cmoscsum			.db $B2,$A5
1910   E005 20          gr_backuphstd		.db $20
1911   E006 07          gr_replay1			.db $07
1912   E007 15          gr_replay2			.db $15
1913   E008 00          gr_replay3			.db $00
1914   E009 00          gr_replay4			.db $00
1915   E00A 00          gr_matchenable		.db $00
1916   E00B 00          gr_specialaward		.db $00
1917   E00C 00          gr_replayaward		.db $00
1918   E00D 03          gr_maxplumbbobtilts	.db $03
1919   E00E 03          gr_numberofballs		.db $03
1920   E00F 35          gr_gameadjust1		.db $35
1921   E010 01          gr_gameadjust2		.db $01
1922   E011 05          gr_gameadjust3		.db $05
1923   E012 00          gr_gameadjust4		.db $00
1924   E013 00          gr_gameadjust5		.db $00
1925   E014 00          gr_gameadjust6		.db $00
1926   E015 00          gr_gameadjust7		.db $00
1927   E016 00          gr_gameadjust8		.db $00
1928   E017 00          gr_gameadjust9		.db $00
1929   E018 03          gr_hstdcredits		.db $03
1930   E019 04          gr_max_extraballs		.db $04
1931   E01A 30          gr_max_credits		.db $30
1932   E01B             ;---------------
1933   E01B             ;Pricing Data  |
1934   E01B             ;---------------
1935   E01B             
1936   E01B 01          gr_pricingdata		.db $01	;Left Coin Mult
1937   E01C 04          				.db $04	;Center Coin Mult
1938   E01D 01          				.db $01	;Right Coin Mult
1939   E01E 01          				.db $01	;Coin Units Required
1940   E01F 00          				.db $00	;Bonus Coins
1941   E020 00          				.db $00	;Minimum Coin Units
1942   E021             
1943   E021 09          				.db $09	;Left Coin Mult
1944   E022 45          				.db $45	;Center Coin Mult
1945   E023 18          				.db $18	;Right Coin Mult
1946   E024 05          				.db $05	;Coin Units Required
1947   E025 45          				.db $45	;Bonus Coins
1948   E026 00          				.db $00	;Minimum Coin Units
1949   E027             
1950   E027 01          				.db $01	;Left Coin Mult
1951   E028 04          				.db $04	;Center Coin Mult
1952   E029 01          				.db $01	;Right Coin Mult
1953   E02A 02          				.db $02	;Coin Units Required
1954   E02B 04          				.db $04	;Bonus Coins
1955   E02C 00          				.db $00	;Minimum Coin Units
1956   E02D             
1957   E02D 01          				.db $01	;Left Coin Mult
1958   E02E 16          				.db $16	;Center Coin Mult
1959   E02F 06          				.db $06	;Right Coin Mult
1960   E030 02          				.db $02	;Coin Units Required
1961   E031 00          				.db $00	;Bonus Coins
1962   E032 00          				.db $00	;Minimum Coin Units
1963   E033             
1964   E033 03          				.db $03	;Left Coin Mult
1965   E034 15          				.db $15	;Center Coin Mult
1966   E035 03          				.db $03	;Right Coin Mult
1967   E036 04          				.db $04	;Coin Units Required
1968   E037 15          				.db $15	;Bonus Coins
1969   E038 00          				.db $00	;Minimum Coin Units
1970   E039             
1971   E039 01          				.db $01	;Left Coin Mult
1972   E03A 00          				.db $00	;Center Coin Mult
1973   E03B 04          				.db $04	;Right Coin Mult
1974   E03C 01          				.db $01	;Coin Units Required
1975   E03D 00          				.db $00	;Bonus Coins
1976   E03E 00          				.db $00	;Minimum Coin Units
1977   E03F             
1978   E03F 01          				.db $01	;Left Coin Mult
1979   E040 00          				.db $00	;Center Coin Mult
1980   E041 02          				.db $02	;Right Coin Mult
1981   E042 01          				.db $01	;Coin Units Required
1982   E043 00          				.db $00	;Bonus Coins
1983   E044 00          				.db $00	;Minimum Coin Units
1984   E045             
1985   E045 01          				.db $01	;Left Coin Mult
1986   E046 00          				.db $00	;Center Coin Mult
1987   E047 02          				.db $02	;Right Coin Mult
1988   E048 02          				.db $02	;Coin Units Required
1989   E049 00          				.db $00	;Bonus Coins
1990   E04A 00          				.db $00	;Minimum Coin Units
1991   E04B             
1992   E04B             ;--------------
1993   E04B             ;System Data  |
1994   E04B             ;--------------
1995   E04B             
1996   E04B 1D          gr_maxthreads		.db $1D
1997   E04C 7F          gr_extendedromtest	.db $7F
1998   E04D 32          gr_lastswitch		.db (switchtable_end-switchtable)/3
1999   E04E 03          gr_numplayers		.db $03
2000   E04F             
2001   E04F E0 C2       gr_lamptable_ptr		.dw lamptable
2002   E051 DA 48       gr_switchtable_ptr	.dw switchtable
2003   E053 D9 76       gr_soundtable_ptr		.dw soundtable
2004   E055             
2005   E055 05          gr_lampflashrate		.db $05
2006   E056             
2007   E056 0D          gr_specialawardsound	.db $0D	;Special Sound
2008   E057 0E          gr_p1_startsound		.db $0E
2009   E058 0E          gr_p2_startsound		.db $0E
2010   E059 0E          gr_p3_startsound		.db $0E
2011   E05A 0E          gr_p4_startsound		.db $0E
2012   E05B 16          gr_matchsound		.db $16
2013   E05C 15          gr_highscoresound		.db $15
2014   E05D 1C          gr_gameoversound		.db $1C
2015   E05E 00          gr_creditsound		.db $00
2016   E05F             
2017   E05F 7E          gr_eb_lamp_1		.db $7E
2018   E060 00          gr_eb_lamp_2		.db $00
2019   E061 7E          gr_lastlamp			.db $7E
2020   E062 05          gr_hs_lamp			.db $05
2021   E063 04          gr_match_lamp		.db $04
2022   E064 01          gr_bip_lamp			.db $01
2023   E065 03          gr_gameover_lamp		.db $03
2024   E066 02          gr_tilt_lamp		.db $02
2025   E067             
2026   E067 D8 72       gr_gameoverthread_ptr	.dw gameover_entry
2027   E069             
2028   E069             gr_switchtypetable
2029   E069 00 02       				.db $00,$02
2030   E06B 00 09       				.db $00,$09
2031   E06D 00 04       				.db $00,$04
2032   E06F 1A 14       				.db $1A,$14
2033   E071 02 05       				.db $02,$05
2034   E073 08 05       				.db $08,$05
2035   E075 00 10       				.db $00,$10
2036   E077             
2037   E077 0200000000  gr_playerstartdata	.db $02,$00,$00,$00,$00
2038   E07C 0001000880  				.db $00,$01,$00,$08,$80
2039   E081 0000000000  				.db $00,$00,$00,$00,$00
2040   E086 0000000000  				.db $00,$00,$00,$00,$00
2041   E08B             
2042   E08B 81FF0000C0  gr_playerresetdata	.db $81,$FF,$00,$00,$C0
2043   E090 070000FA7F  				.db $07,$00,$00,$FA,$7F
2044   E095 0400000000  				.db $04,$00,$00,$00,$00
2045   E09A 0000400000  				.db $00,$00,$40,$00,$00
2046   E09F             
2047   E09F 39          gr_switch_event		rts\ .db $00	;(Switch Event)
2047   E0A0 00          
2048   E0A1 39          gr_sound_event		rts\ .db $00	;(Sound Event )
2048   E0A2 00          
2049   E0A3 20 4A       gr_score_event		bra score_event	;(Score Event)
2050   E0A5 20 39       gr_eb_event			bra eb_event	;(Extra Ball Event)
2051   E0A7 20 37       gr_special_event		bra special_event	;(Special Event)
2052   E0A9 39          gr_macro_event		rts\ .db $00	;(Start Macro Event)
2052   E0AA 00          
2053   E0AB             gr_ready_event
2054   E0AB 39          gr_ballstart_event	rts\ .db $00	;(Ball Start Event)
2054   E0AC 00          
2055   E0AD 39          gr_addplayer_event	rts\ .db $00	;(Add Player Event)
2055   E0AE 00          
2056   E0AF 20 35       gr_gameover_event		bra gameover_event;(Game Over Event)
2057   E0B1 39          gr_hstdtoggle_event	rts\ .db $00	;(HSTD Toggle Event)
2057   E0B2 00          
2058   E0B3             
2059   E0B3             gr_reset_hook_ptr
2060   E0B3 D7 35       			.dw hook_reset		;(From $E89F)Reset
2061   E0B5             gr_main_hook_ptr
2062   E0B5 E1 4C       			.dw hook_mainloop		;(From $E8B7)Main Loop Begin
2063   E0B7             gr_coin_hook_ptr
2064   E0B7 D0 FB       			.dw hook_coin		;(From $F770)Coin Accepted
2065   E0B9             gr_game_hook_ptr
2066   E0B9 E1 4C       			.dw hook_gamestart	;(From $F847)New Game Start
2067   E0BB             gr_player_hook_ptr
2068   E0BB D4 C3       			.dw hook_playerinit	;(From $F8D8)Init New Player
2069   E0BD             gr_outhole_hook_ptr
2070   E0BD D6 86       			.dw hook_outhole		;(From $F9BA)Outhole
2071   E0BF             
2072   E0BF             ;------------------------ end system data ---------------------------
2073   E0BF             
2074   E0BF             gr_irq_entry	
2075   E0BF 7E EF F7    gr_swi_entry	jmp	sys_irq
2076   E0C2             
2077   E0C2 30 38       lamptable         .db $30, $38      ;(00) bonus_1 -- bonus_9
2078   E0C4 3C 3F             		.db $3C ,$3F	;(01) 2x -- 10x
2079   E0C6 0C 0F       			.db $0C ,$0F	;(02) L -- D
2080   E0C8 39 3B       			.db $39 ,$3B	;(03) bonus_10 -- bonus_30
2081   E0CA 10 14       			.db $10 ,$14	;(04) 1_target -- 5_rollover
2082   E0CC 07 0B       			.db $07 ,$0B	;(05) rmag1 -- rmag5
2083   E0CE 26 2A       			.db $26 ,$2A	;(06) lmag1 -- lmag5
2084   E0D0 00 3F       			.db $00 ,$3F	;(07) all lamps
2085   E0D2 07 3F       			.db $07 ,$3F	;(08) all lamps except backbox
2086   E0D4 48 4C       			.db $48 ,$4C	;(09) bits 18 - 1c
2087   E0D6 43 47       			.db $43 ,$47	;(0A) bits 13 - 17
2088   E0D8 20 24       			.db $20 ,$24	;(0B) dt1 -- dt5
2089   E0DA 15 16       			.db $15 ,$16	;(0C) drainshield_l -- drainshield_r
2090   E0DC 30 3B       			.db $30 ,$3B	;(0D) bonus_1 -- bonus_30
2091   E0DE 4D 4E       			.db $4D ,$4E	;(0E) bits 1d -1e
2092   E0E0             
2093   E0E0             ;**************************************************************
2094   E0E0             ;* Ring the bell fancy when special or extra ball
2095   E0E0             ;**************************************************************
2096   E0E0             eb_event
2097   E0E0             special_event	NEWTHREAD_JMP(fancybell)
2097   E0E0 CE D0 C7    
2097   E0E3 7E EA C4    
2098   E0E6             			
2099   E0E6 86 FF       gameover_event	ldaa	#$FF
2100   E0E8 97 58       			staa	mbip_b0
2101   E0EA 86 69       			ldaa	#$69
2102   E0EC 7E F1 3C    			jmp	lamp_on
2103   E0EF             	
2104   E0EF             ;********************************************************
2105   E0EF             ;* Jungle Lord Scoring Event: This takes care of adding
2106   E0EF             ;* up all scores, this needs to be here because of the 
2107   E0EF             ;* double scoring. 
2108   E0EF             ;********************************************************		
2109   E0EF 37          score_event		pshb	
2110   E0F0 C6 D4       			ldab	#$D4
2111   E0F2 D7 0B       			stab	game_ram_b			;Set Background Sound toggle
2112   E0F4 D7 AA       			stab	thread_priority
2113   E0F6 CE D7 3D    			ldx	#disp_animation
2114   E0F9 BD EA 78    			jsr	newthread_sp
2115   E0FC D6 1C       			ldab	$1C
2116   E0FE             			ifmi	
2116   E0FE             
2116   E0FE 2A FE       
2117   E100 C4 3F       				andb	#$3F
2118   E102 D7 1C       				stab	$1C			;clear bit#26
2119   E104 36          				psha	
2120   E105 BD D5 71    				jsr	alllamps_on
2121   E108 86 1A       				ldaa	#$1A
2122   E10A BD F1 5B    				jsr	lamp_off		;turn off 'keepshooting' on playfield
2123   E10D 32          				pula	
2124   E10E             			endif
2124   E10E             
2124   E10E             
2124   E10E             
2124   E10E             
2124   E10E             
2124   E10E~            			endif
2124   E10E~            			endif
2124   E10E             
2124   E10E~            			endif
2124   E10E~            			endif
2124   E10E             
2124   E0FF             
2124   E0FF 0E          
2124   E100             
2124   E100             
2124   E100~            			endif
2124   E100~            			endif
2124   E100~            			endif
2124   E100             
2124   E10E             
2124   E10E~            			endif
2124   E10E~            			endif
2124   E10E             
2125   E10E D6 13       			ldab	$13
2126   E110 DA 33       			orab	$33
2127   E112 C5 02       			bitb	#$02
2128   E114             			ifne
2128   E114             
2128   E114 27 FE       
2129   E116 36          				psha	
2130   E117 84 F8       				anda	#$F8
2131   E119 48          				asla	
2132   E11A 33          				pulb	
2133   E11B C4 07       				andb	#$07
2134   E11D 1B          				aba	
2135   E11E             			endif
2135   E11E             
2135   E11E             
2135   E11E             
2135   E11E             
2135   E11E             
2135   E11E~            			endif
2135   E11E~            			endif
2135   E11E             
2135   E11E~            			endif
2135   E11E~            			endif
2135   E11E             
2135   E115             
2135   E115 08          
2135   E116             
2135   E116             
2135   E116~            			endif
2135   E116~            			endif
2135   E116~            			endif
2135   E116             
2135   E11E             
2135   E11E~            			endif
2135   E11E~            			endif
2135   E11E             
2136   E11E 33          			pulb	
2137   E11F 31          			ins	
2138   E120 31          			ins	
2139   E121 BD EB DB    			jsr	update_eb_count
2140   E124 BD EC 1D    			jsr	score_update
2141   E127 BD EB A1    			jsr	update_commas
2142   E12A CE 00 DE    			ldx	#x_temp_2
2143   E12D 8D 0C       			bsr	add_ab
2144   E12F D7 DE       			stab	x_temp_2
2145   E131 DE CE       			ldx	pscore_buf
2146   E133 8D 06       			bsr	add_ab
2147   E135 BD EC B7    			jsr	$ECB7			;Because we have overridden the scoring event, we need to check
2148   E138 7E EC 18    			jmp	$EC18			;if player has exceeded any of the replay scores.
2149   E13B             			
2150   E13B A6 00       add_ab		ldaa	$00,X
2151   E13D E6 01       			ldab	$01,X
2152   E13F 8D 05       			bsr	dec_test
2153   E141 BD EC F3    			jsr	split_ab
2154   E144 1B          			aba	
2155   E145 16          			tab	
2156   E146 C1 A0       dec_test		cmpb	#$A0
2157   E148             			ifcc
2157   E148             
2157   E148 25 FE       
2158   E14A CB 10       				addb	#$10
2159   E14C             			endif
2159   E14C             
2159   E14C             
2159   E14C             
2159   E14C             
2159   E14C             
2159   E14C~            			endif
2159   E14C~            			endif
2159   E14C             
2159   E14C~            			endif
2159   E14C~            			endif
2159   E14C             
2159   E149             
2159   E149 02          
2159   E14A             
2159   E14A             
2159   E14A~            			endif
2159   E14A~            			endif
2159   E14A~            			endif
2159   E14A             
2159   E14C             
2159   E14C~            			endif
2159   E14C~            			endif
2159   E14C             
2160   E14C             hook_gamestart
2161   E14C 39          hook_mainloop	rts
2162   E14D             
2163   E14D             ;************************************************************
2164   E14D             ;* Coin Routines, this simply plays sound $00 and jumps to 
2165   E14D             ;* the system coin routine which does all the coin code and
2166   E14D             ;* then plays sound $00 again.
2167   E14D             ;************************************************************	
2168   E14D             sw_coin_c
2169   E14D             sw_coin_l
2170   E14D             sw_coin_r		SSND_($00)				;Credit Sound
2170   E14D             
2170   E14D E0          
2170   E14E~            sw_coin_r		SSND_($00)				;Credit Sound
2170   E14E~            sw_coin_r		SSND_($00)				;Credit Sound
2170   E14E~            sw_coin_r		SSND_($00)				;Credit Sound
2170   E14E             
2171   E14E 5F          			JMP_(coin_accepted)		
2171   E14F F7 A2       
2172   E151             
2173   E151             ;************************************************************
2174   E151             ;* Tilt Routines:
2175   E151             ;************************************************************
2176   E151             sw_pf_tilt
2177   E151             sw_plumbtilt	EXE_
2177   E151             
2177   E151 44          
2178   E152             			      NEWTHREAD(min_tilt)
2178   E152 CE E1 85    
2178   E155 BD EA C4    
2179   E158             			EXEEND_
2179   E158             
2179   E158             
2179   E158             
2179   E158             
2179   E158~            			EXEEND_
2179   E158~            			EXEEND_
2179   E158             
2179   E151             
2179   E151 48          
2179   E152             
2179   E158             
2179   E158~            			EXEEND_
2179   E158~            			EXEEND_
2179   E158             
2180   E158             			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
2180   E158             
2180   E158             
2180   E158             
2180   E158 5AFB40F0FE  
2180   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
2180   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
2180   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
2180   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
2180   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
2180   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
2180   E15D             
2181   E15D                   			SSND_($08)				;Sound #08
2181   E15D             
2181   E15D E8          
2181   E15E~                  			SSND_($08)				;Sound #08
2181   E15E~                  			SSND_($08)				;Sound #08
2181   E15E~                  			SSND_($08)				;Sound #08
2181   E15E             
2182   E15E                   			JSRD_(tilt_warning)		
2182   E15E 57          
2182   E15F FB DD       
2183   E161                   			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
2183   E161             
2183   E161 5A F0 0F    
2183   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
2183   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
2183   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
2183   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
2183   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
2183   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
2183   E164             
2184   E164                   			JSR_(gi_off_inc)			
2184   E164 56          
2184   E165 D3 73       
2185   E167                   			SLEEP_(2)
2185   E167             
2185   E167 72          
2185   E168~                  			SLEEP_(2)
2185   E168~                  			SLEEP_(2)
2185   E168             
2186   E168                   			JSR_(gi_on_dec)
2186   E168 56          
2186   E169 D3 64       
2187   E16B                   	      ENDIF_			
2187   E16B             
2187   E16B             
2187   E16B             
2187   E16B             
2187   E16B             
2187   E16B~                  	      ENDIF_			
2187   E16B~                  	      ENDIF_			
2187   E16B             
2187   E16B~                  	      ENDIF_			
2187   E16B~                  	      ENDIF_			
2187   E16B             
2187   E15C             
2187   E15C 0E          
2187   E15D             
2187   E15D             
2187   E15D~                  	      ENDIF_			
2187   E15D~                  	      ENDIF_			
2187   E15D~                  	      ENDIF_			
2187   E15D~                  	      ENDIF_			
2187   E15D~                  	      ENDIF_			
2187   E15D             
2187   E16B             
2187   E16B~                  	      ENDIF_			
2187   E16B~                  	      ENDIF_			
2187   E16B             
2188   E16B             			KILL_					;Remove This Thread
2188   E16B 03          
2189   E16C             
2190   E16C             sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
2190   E16C             
2190   E16C             
2190   E16C             
2190   E16C 5A 40 00    
2190   E16F~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
2190   E16F~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
2190   E16F~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
2190   E16F~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
2190   E16F~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
2190   E16F~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
2190   E16F             
2191   E16F                   			SSND_($08)				;Sound #08
2191   E16F             
2191   E16F E8          
2191   E170~                  			SSND_($08)				;Sound #08
2191   E170~                  			SSND_($08)				;Sound #08
2191   E170~                  			SSND_($08)				;Sound #08
2191   E170             
2192   E170                   			JSRD_(do_tilt)			
2192   E170 57          
2192   E171 FB E9       
2193   E173             you_tilted      		JSR_(gi_off_inc)			
2193   E173 56          
2193   E174 D3 73       
2194   E176 5E A5 26          			SWCLR_($25,$26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
2195   E179                   			IFEQR_($5F)			      ;BNER_BIT#1F 
2195   E179             
2195   E179             
2195   E179             
2195   E179 5B 5F 00    
2195   E17C~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2195   E17C~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2195   E17C~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2195   E17C~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2195   E17C~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2195   E17C~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2195   E17C             
2196   E17C                   			      JSRR_(mb_end_disp)
2196   E17C~                  			      JSRR_(mb_end_disp)
2196   E17C~                  			      JSRR_(mb_end_disp)
2196   E17C             
2196   E17C~                  			      JSRR_(mb_end_disp)
2196   E17C~                  			      JSRR_(mb_end_disp)
2196   E17C             
2196   E17C             
2196   E17C 93          
2196   E17D 51          
2197   E17E                   			ENDIF_			
2197   E17E             
2197   E17E             
2197   E17E             
2197   E17E             
2197   E17E             
2197   E17E~                  			ENDIF_			
2197   E17E~                  			ENDIF_			
2197   E17E             
2197   E17E~                  			ENDIF_			
2197   E17E~                  			ENDIF_			
2197   E17E             
2197   E17B             
2197   E17B 02          
2197   E17C             
2197   E17C             
2197   E17C~                  			ENDIF_			
2197   E17C~                  			ENDIF_			
2197   E17C~                  			ENDIF_			
2197   E17C~                  			ENDIF_			
2197   E17C~                  			ENDIF_			
2197   E17C             
2197   E17E             
2197   E17E~                  			ENDIF_			
2197   E17E~                  			ENDIF_			
2197   E17E             
2198   E17E                   			BITOFF_($E6,$67)			;Turn OFF: Bit#26, Bit#27
2198   E17E             
2198   E17E 11 E6 67    
2199   E181                   			SLEEP_(156)
2199   E181~                  			SLEEP_(156)
2199   E181~                  			SLEEP_(156)
2199   E181             
2199   E181 53 9C       
2199   E183             
2200   E183                   			SSND_($1C)				;Sound #1C
2200   E183             
2200   E183 FC          
2200   E184~                  			SSND_($1C)				;Sound #1C
2200   E184~                  			SSND_($1C)				;Sound #1C
2200   E184~                  			SSND_($1C)				;Sound #1C
2200   E184             
2201   E184                   	      ENDIF_
2201   E184             
2201   E184             
2201   E184             
2201   E184             
2201   E184             
2201   E184~                  	      ENDIF_
2201   E184~                  	      ENDIF_
2201   E184             
2201   E184~                  	      ENDIF_
2201   E184~                  	      ENDIF_
2201   E184             
2201   E16E             
2201   E16E 15          
2201   E16F             
2201   E16F             
2201   E16F~                  	      ENDIF_
2201   E16F~                  	      ENDIF_
2201   E16F~                  	      ENDIF_
2201   E16F~                  	      ENDIF_
2201   E16F~                  	      ENDIF_
2201   E16F             
2201   E184             
2201   E184~                  	      ENDIF_
2201   E184~                  	      ENDIF_
2201   E184             
2202   E184             			KILL_					;Remove This Thread
2202   E184 03          
2203   E185             
2204   E185             ;**********************************************************
2205   E185             ;* This thread runs for 160 irq's and makes sure that 
2206   E185             ;* tilts can only happen every 2.5 seconds at a minimum.
2207   E185             ;**********************************************************
2208   E185 BD F3 AB    min_tilt		jsr	macro_start
2209   E188             			REMTHREADS_($F8,$A0)		;Remove Multiple Threads Based on Priority
2209   E188 55 F8 A0    
2210   E18B             			PRI_($A6)				;Priority=#A6
2210   E18B 52 A6       
2211   E18D             			BITON_($51)				;Turn ON: Bit#11
2211   E18D             
2211   E18D 10 51       
2212   E18F             			SLEEP_(160)
2212   E18F~            			SLEEP_(160)
2212   E18F~            			SLEEP_(160)
2212   E18F             
2212   E18F 53 A0       
2212   E191             
2213   E191             			BITOFF_($51)			;Turn OFF: Bit#11
2213   E191             
2213   E191 11 51       
2214   E193             			KILL_					;Remove This Thread
2214   E193 03          
2215   E194             
2216   E194             ;**********************************************************
2217   E194             ;* HSTD Reset Switch: Just do it.
2218   E194             ;**********************************************************
2219   E194             sw_hstd_res		JSRD_(restore_hstd)		
2219   E194 57          
2219   E195 EF 9D       
2220   E197             			KILL_					;Remove This Thread
2220   E197 03          
2221   E198             
2222   E198             ;**************************************************************
2223   E198             ;* 10 Point switches: If one of the outlanes are on, then
2224   E198             ;*                    switch it to the other.
2225   E198             ;**************************************************************
2226   E198             sw_leftsling
2227   E198             sw_rightsling
2228   E198             sw_ten_1
2229   E198             sw_ten_2
2230   E198             sw_ten_3
2231   E198             sw_upper_sling	POINTS_(1,10)
2231   E198 42          
2231   E199             
2231   E199~            sw_upper_sling	POINTS_(1,10)
2231   E199~            sw_upper_sling	POINTS_(1,10)
2231   E199             
2231   E199             
2231   E199 09          
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A~            sw_upper_sling	POINTS_(1,10)
2231   E19A             
2231   E19A             
2232   E19A             			IFEQR_($1B)
2232   E19A             
2232   E19A             
2232   E19A             
2232   E19A 5B 1B 00    
2232   E19D~            			IFEQR_($1B)
2232   E19D~            			IFEQR_($1B)
2232   E19D~            			IFEQR_($1B)
2232   E19D~            			IFEQR_($1B)
2232   E19D~            			IFEQR_($1B)
2232   E19D~            			IFEQR_($1B)
2232   E19D             
2233   E19D             				EXE_
2233   E19D             
2233   E19D 44          
2234   E19E BD FB 80    					jsr	get_random
2235   E1A1 84 07             			      anda	#$07
2236   E1A3 8B 10             			      adda	#$10
2237   E1A5 BD D9 4D    					jsr	ext_snd
2238   E1A8             				EXEEND_
2238   E1A8             
2238   E1A8             
2238   E1A8             
2238   E1A8             
2238   E1A8~            				EXEEND_
2238   E1A8~            				EXEEND_
2238   E1A8             
2238   E19D             
2238   E19D 4C          
2238   E19E             
2238   E1A8             
2238   E1A8~            				EXEEND_
2238   E1A8~            				EXEEND_
2238   E1A8             
2239   E1A8             			ELSE_
2239   E1A8             
2239   E1A8             
2239   E1A8             
2239   E1A8             
2239   E19C             
2239   E19C             
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C             
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C~            			ELSE_
2239   E19C             
2239   E19C             
2239   E19C 0D          
2239   E1A8             
2239   E1A8             
2239   E1A8~            			ELSE_
2239   E1A8~            			ELSE_
2239   E1A8             
2239   E1A8~            			ELSE_
2239   E1A8~            			ELSE_
2239   E1A8             
2239   E1A8             
2239   E1A8 80          
2239   E1A9 00          
2239   E1AA             
2239   E1AA             
2239   E1AA             
2239   E1AA~            			ELSE_
2239   E1AA~            			ELSE_
2239   E1AA             
2239   E1AA~            			ELSE_
2239   E1AA~            			ELSE_
2239   E1AA             
2240   E1AA             				SSND_($01)				;10 Points/Digit Sound
2240   E1AA             
2240   E1AA E1          
2240   E1AB~            				SSND_($01)				;10 Points/Digit Sound
2240   E1AB~            				SSND_($01)				;10 Points/Digit Sound
2240   E1AB~            				SSND_($01)				;10 Points/Digit Sound
2240   E1AB             
2241   E1AB             			ENDIF_
2241   E1AB             
2241   E1AB             
2241   E1AB             
2241   E1AB             
2241   E1AB             
2241   E1AB~            			ENDIF_
2241   E1AB~            			ENDIF_
2241   E1AB             
2241   E1AB~            			ENDIF_
2241   E1AB~            			ENDIF_
2241   E1AB             
2241   E1A9             
2241   E1A9 01          
2241   E1AA             
2241   E1AA             
2241   E1AA~            			ENDIF_
2241   E1AA~            			ENDIF_
2241   E1AA~            			ENDIF_
2241   E1AA~            			ENDIF_
2241   E1AA~            			ENDIF_
2241   E1AA             
2241   E1AB             
2241   E1AB~            			ENDIF_
2241   E1AB~            			ENDIF_
2241   E1AB             
2242   E1AB             			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
2242   E1AB             
2242   E1AB             
2242   E1AB             
2242   E1AB 5AFBF60CF50C
2242   E1B1 FC
2242   E1B2~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
2242   E1B2~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
2242   E1B2~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
2242   E1B2~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
2242   E1B2~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
2242   E1B2~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
2242   E1B2             
2243   E1B2             			      RINV0_($0C,$0E)				;Effect: Range #0C
2243   E1B2             
2243   E1B2 1F 8C 0E    
2244   E1B5             			ENDIF_
2244   E1B5             
2244   E1B5             
2244   E1B5             
2244   E1B5             
2244   E1B5             
2244   E1B5~            			ENDIF_
2244   E1B5~            			ENDIF_
2244   E1B5             
2244   E1B5~            			ENDIF_
2244   E1B5~            			ENDIF_
2244   E1B5             
2244   E1B1             
2244   E1B1 03          
2244   E1B2             
2244   E1B2             
2244   E1B2~            			ENDIF_
2244   E1B2~            			ENDIF_
2244   E1B2~            			ENDIF_
2244   E1B2~            			ENDIF_
2244   E1B2~            			ENDIF_
2244   E1B2             
2244   E1B5             
2244   E1B5~            			ENDIF_
2244   E1B5~            			ENDIF_
2244   E1B5             
2245   E1B5             sw_notused		KILL_					;Remove This Thread
2245   E1B5 03          
2246   E1B6             
2247   E1B6             ;**************************************************************
2248   E1B6             ;* Loop Switches:
2249   E1B6             ;**************************************************************
2250   E1B6             sw_looplow		REMTHREADS_($F8,$90)		;Remove Multiple Threads Based on Priority
2250   E1B6 55 F8 90    
2251   E1B9             			PRI_($90)				;Priority=#90
2251   E1B9 52 90       
2252   E1BB             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BB 43          
2252   E1BC             
2252   E1BC~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BC~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BC             
2252   E1BC~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BC~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BC             
2252   E1BC~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BC~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BC             
2252   E1BC             
2252   E1BC 0B          
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2252   E1BD             
2252   E1BD             
2252   E1BD             
2252   E1BD             
2253   E1BD             			IFNER_($5B)				;BEQR_BIT#1B
2253   E1BD             
2253   E1BD             
2253   E1BD             
2253   E1BD 5A 5B 00    
2253   E1C0~            			IFNER_($5B)				;BEQR_BIT#1B
2253   E1C0~            			IFNER_($5B)				;BEQR_BIT#1B
2253   E1C0~            			IFNER_($5B)				;BEQR_BIT#1B
2253   E1C0~            			IFNER_($5B)				;BEQR_BIT#1B
2253   E1C0~            			IFNER_($5B)				;BEQR_BIT#1B
2253   E1C0~            			IFNER_($5B)				;BEQR_BIT#1B
2253   E1C0             
2254   E1C0             				BITON_($5A)				;Turn ON: Bit#1A
2254   E1C0             
2254   E1C0 10 5A       
2255   E1C2             				SLEEP_(32)				;1/2 second
2255   E1C2~            				SLEEP_(32)				;1/2 second
2255   E1C2~            				SLEEP_(32)				;1/2 second
2255   E1C2             
2255   E1C2 53 20       
2255   E1C4             
2256   E1C4             noloop			BITOFF_($5A)			;Turn OFF: Bit#1A
2256   E1C4             
2256   E1C4 11 5A       
2257   E1C6             				KILL_					;Remove This Thread
2257   E1C6 03          
2258   E1C7             			ENDIF_
2258   E1C7             
2258   E1C7             
2258   E1C7             
2258   E1C7             
2258   E1C7             
2258   E1C7~            			ENDIF_
2258   E1C7~            			ENDIF_
2258   E1C7             
2258   E1C7~            			ENDIF_
2258   E1C7~            			ENDIF_
2258   E1C7             
2258   E1BF             
2258   E1BF 07          
2258   E1C0             
2258   E1C0             
2258   E1C0~            			ENDIF_
2258   E1C0~            			ENDIF_
2258   E1C0~            			ENDIF_
2258   E1C0~            			ENDIF_
2258   E1C0~            			ENDIF_
2258   E1C0             
2258   E1C7             
2258   E1C7~            			ENDIF_
2258   E1C7~            			ENDIF_
2258   E1C7             
2259   E1C7             loop_forward	REMTHREADS_($F8,$50)		;Remove Multiple Threads Based on Priority
2259   E1C7 55 F8 50    
2260   E1CA             			;Did player earn a multiplier?
2261   E1CA             			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
2261   E1CA             
2261   E1CA             
2261   E1CA             
2261   E1CA 5B F4 1E FF 
2261   E1CE~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
2261   E1CE~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
2261   E1CE~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
2261   E1CE~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
2261   E1CE~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
2261   E1CE~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
2261   E1CE             
2262   E1CE             				;yes
2263   E1CE                   			BITOFF_($9E,$5B)			;Turn OFF: Lamp#1E(loop_x), Bit#1B
2263   E1CE             
2263   E1CE 11 9E 5B    
2264   E1D1                   			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
2264   E1D1             
2264   E1D1 21 1E       
2265   E1D3                   			PRI_($05)				;Priority=#05
2265   E1D3 52 05       
2266   E1D5                   			RSET1R0_($01)				;Effect: Range #01
2266   E1D5             
2266   E1D5 1A 01       
2267   E1D7                   			SETRAM_(rega,$40)			;RAM$00=$40
2267   E1D7~                  			SETRAM_(rega,$40)			;RAM$00=$40
2267   E1D7~                  			SETRAM_(rega,$40)			;RAM$00=$40
2267   E1D7             
2267   E1D7 C0 40       
2268   E1D9                   			BEGIN_
2268   E1D9             
2269   E1D9             				      ADDRAM_(rega,-1)			;RAM$00-=1
2269   E1D9~            				      ADDRAM_(rega,-1)			;RAM$00-=1
2269   E1D9~            				      ADDRAM_(rega,-1)			;RAM$00-=1
2269   E1D9             
2269   E1D9 B0 FF       
2270   E1DB                   			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DB             
2270   E1DB 5B E0 00    
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE             
2270   E1DE             
2270   E1DE             
2270   E1DE             
2270   E1DE             
2270   E1DE             
2270   E1DE             
2270   E1DD             
2270   E1DD FB          
2270   E1DE             
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE             
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
2270   E1DE             
2271   E1DE                   			JSRR_(gatlin_sound)			
2271   E1DE~                  			JSRR_(gatlin_sound)			
2271   E1DE~                  			JSRR_(gatlin_sound)			
2271   E1DE             
2271   E1DE~                  			JSRR_(gatlin_sound)			
2271   E1DE~                  			JSRR_(gatlin_sound)			
2271   E1DE             
2271   E1DE             
2271   E1DE 91          
2271   E1DF F0          
2272   E1E0                   			KILL_					;Remove This Thread
2272   E1E0 03          
2273   E1E1                               ENDIF_
2273   E1E1             
2273   E1E1             
2273   E1E1             
2273   E1E1             
2273   E1E1             
2273   E1E1~                              ENDIF_
2273   E1E1~                              ENDIF_
2273   E1E1             
2273   E1E1~                              ENDIF_
2273   E1E1~                              ENDIF_
2273   E1E1             
2273   E1CD             
2273   E1CD 13          
2273   E1CE             
2273   E1CE             
2273   E1CE~                              ENDIF_
2273   E1CE~                              ENDIF_
2273   E1CE~                              ENDIF_
2273   E1CE~                              ENDIF_
2273   E1CE~                              ENDIF_
2273   E1CE             
2273   E1E1             
2273   E1E1~                              ENDIF_
2273   E1E1~                              ENDIF_
2273   E1E1             
2274   E1E1                               ;was drain shield lit?
2275   E1E1                   		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
2275   E1E1             
2275   E1E1             
2275   E1E1             
2275   E1E1 5B F4 1D FF 
2275   E1E5~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
2275   E1E5~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
2275   E1E5~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
2275   E1E5~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
2275   E1E5~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
2275   E1E5~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
2275   E1E5             
2276   E1E5                   			;yes
2277   E1E5                   			BITOFF_($1D)			;Turn OFF: Lamp#1D(loop_dshield)
2277   E1E5             
2277   E1E5 11 1D       
2278   E1E7                   			BITOFF2_($1D)			;Turn OFF: Lamp#1D(loop_dshield)
2278   E1E7             
2278   E1E7 21 1D       
2279   E1E9                   			JSRR_(loop_effect)			
2279   E1E9~                  			JSRR_(loop_effect)			
2279   E1E9~                  			JSRR_(loop_effect)			
2279   E1E9             
2279   E1E9~                  			JSRR_(loop_effect)			
2279   E1E9~                  			JSRR_(loop_effect)			
2279   E1E9             
2279   E1E9             
2279   E1E9 90          
2279   E1EA 25          
2280   E1EB             			ELSE_		
2280   E1EB             
2280   E1EB             
2280   E1EB             
2280   E1EB             
2280   E1E4             
2280   E1E4             
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4             
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4~            			ELSE_		
2280   E1E4             
2280   E1E4             
2280   E1E4 08          
2280   E1EB             
2280   E1EB             
2280   E1EB~            			ELSE_		
2280   E1EB~            			ELSE_		
2280   E1EB             
2280   E1EB~            			ELSE_		
2280   E1EB~            			ELSE_		
2280   E1EB             
2280   E1EB             
2280   E1EB 80          
2280   E1EC 00          
2280   E1ED             
2280   E1ED             
2280   E1ED             
2280   E1ED~            			ELSE_		
2280   E1ED~            			ELSE_		
2280   E1ED             
2280   E1ED~            			ELSE_		
2280   E1ED~            			ELSE_		
2280   E1ED             
2281   E1ED             				;no, nothing special
2282   E1ED             				SETRAM_(rega,$01)
2282   E1ED~            				SETRAM_(rega,$01)
2282   E1ED~            				SETRAM_(rega,$01)
2282   E1ED             
2282   E1ED C0 01       
2283   E1EF                   			JSRD_(ext_snd)	
2283   E1EF 57          
2283   E1F0 D9 4D       
2284   E1F2                   			POINTS_(15,1000)			;15000 Points
2284   E1F2 42          
2284   E1F3             
2284   E1F3~                  			POINTS_(15,1000)			;15000 Points
2284   E1F3~                  			POINTS_(15,1000)			;15000 Points
2284   E1F3             
2284   E1F3~                  			POINTS_(15,1000)			;15000 Points
2284   E1F3~                  			POINTS_(15,1000)			;15000 Points
2284   E1F3             
2284   E1F3~                  			POINTS_(15,1000)			;15000 Points
2284   E1F3~                  			POINTS_(15,1000)			;15000 Points
2284   E1F3             
2284   E1F3             
2284   E1F3 7B          
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4~                  			POINTS_(15,1000)			;15000 Points
2284   E1F4             
2284   E1F4             
2284   E1F4             
2284   E1F4             
2285   E1F4                   			JMPR_(bit1b_off)	
2285   E1F4~                  			JMPR_(bit1b_off)	
2285   E1F4~                  			JMPR_(bit1b_off)	
2285   E1F4             
2285   E1F4~                  			JMPR_(bit1b_off)	
2285   E1F4~                  			JMPR_(bit1b_off)	
2285   E1F4             
2285   E1F4             
2285   E1F4 80          
2285   E1F5 0E          
2286   E1F6                   			;done
2287   E1F6                   								
2288   E1F6             sw_loophigh		      REMTHREADS_($F8,$90)		;Remove Multiple Threads Based on Priority
2288   E1F6 55 F8 90    
2289   E1F9                   			PRI_($90)				;Priority=#90
2289   E1F9 52 90       
2290   E1FB                   			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FB 43          
2290   E1FC             
2290   E1FC~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FC~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FC             
2290   E1FC~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FC~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FC             
2290   E1FC~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FC~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FC             
2290   E1FC             
2290   E1FC 0B          
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2290   E1FD             
2290   E1FD             
2290   E1FD             
2290   E1FD             
2291   E1FD                   			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
2291   E1FD             
2291   E1FD 5A 5A 07    
2291   E200~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
2291   E200~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
2291   E200~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
2291   E200~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
2291   E200~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
2291   E200~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
2291   E200             
2292   E200                   			BITON_($5B)				;Turn ON: Bit#1B
2292   E200             
2292   E200 10 5B       
2293   E202                   			SLEEP_(32)				;1/2 second
2293   E202~                  			SLEEP_(32)				;1/2 second
2293   E202~                  			SLEEP_(32)				;1/2 second
2293   E202             
2293   E202 53 20       
2293   E204             
2294   E204                   	      ENDIF_
2294   E204             
2294   E204             
2294   E204             
2294   E204             
2294   E204             
2294   E204~                  	      ENDIF_
2294   E204~                  	      ENDIF_
2294   E204             
2294   E204~                  	      ENDIF_
2294   E204~                  	      ENDIF_
2294   E204             
2294   E1EC             
2294   E1EC 17          
2294   E1ED             
2294   E1ED             
2294   E1ED~                  	      ENDIF_
2294   E1ED~                  	      ENDIF_
2294   E1ED~                  	      ENDIF_
2294   E1ED~                  	      ENDIF_
2294   E1ED~                  	      ENDIF_
2294   E1ED             
2294   E204             
2294   E204~                  	      ENDIF_
2294   E204~                  	      ENDIF_
2294   E204             
2295   E204             bit1b_off		BITOFF_($5B)			;Turn OFF: Bit#1B
2295   E204             
2295   E204 11 5B       
2296   E206             			KILL_					;Remove This Thread
2296   E206 03          
2297   E207             
2298   E207             loop_backwards	SETRAM_(rega,$02)
2298   E207~            loop_backwards	SETRAM_(rega,$02)
2298   E207~            loop_backwards	SETRAM_(rega,$02)
2298   E207             
2298   E207 C0 02       
2299   E209                   		JSRD_(ext_snd)
2299   E209 57          
2299   E20A D9 4D       
2300   E20C             			JSRR_(loop_effect)			
2300   E20C~            			JSRR_(loop_effect)			
2300   E20C~            			JSRR_(loop_effect)			
2300   E20C             
2300   E20C~            			JSRR_(loop_effect)			
2300   E20C~            			JSRR_(loop_effect)			
2300   E20C             
2300   E20C             
2300   E20C 90          
2300   E20D 02          
2301   E20E             			JMPR_(noloop)
2301   E20E~            			JMPR_(noloop)
2301   E20E~            			JMPR_(noloop)
2301   E20E             
2301   E20E~            			JMPR_(noloop)
2301   E20E~            			JMPR_(noloop)
2301   E20E             
2301   E20E             
2301   E20E 8F          
2301   E20F B4          
2302   E210             						
2303   E210             loop_effect		RSET1R0_($0E)				;Effect: Range #0E
2303   E210             
2303   E210 1A 0E       
2304   E212             			IFNER_($56)			      ;BEQR_BIT#16
2304   E212             
2304   E212             
2304   E212             
2304   E212 5A 56 00    
2304   E215~            			IFNER_($56)			      ;BEQR_BIT#16
2304   E215~            			IFNER_($56)			      ;BEQR_BIT#16
2304   E215~            			IFNER_($56)			      ;BEQR_BIT#16
2304   E215~            			IFNER_($56)			      ;BEQR_BIT#16
2304   E215~            			IFNER_($56)			      ;BEQR_BIT#16
2304   E215~            			IFNER_($56)			      ;BEQR_BIT#16
2304   E215             
2305   E215             			      ;add a drain shield now
2306   E215             add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
2306   E215             
2306   E215             
2306   E215             
2306   E215 5AFCD601FE  
2306   E21A~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
2306   E21A~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
2306   E21A~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
2306   E21A~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
2306   E21A~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
2306   E21A~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
2306   E21A             
2307   E21A                         			EXE_
2307   E21A             
2307   E21A 44          
2308   E21B 96 19                   			      ldaa	bitflags + 1
2309   E21D 84 60                   			      anda	#$60
2310   E21F 9A 12                   			      oraa	$12
2311   E221 97 12                   			      staa	$12
2312   E223                         			EXEEND_
2312   E223             
2312   E223             
2312   E223             
2312   E223             
2312   E223~                        			EXEEND_
2312   E223~                        			EXEEND_
2312   E223             
2312   E21A             
2312   E21A 4A          
2312   E21B             
2312   E223             
2312   E223~                        			EXEEND_
2312   E223~                        			EXEEND_
2312   E223             
2313   E223                         			BITOFF_($56)			;Turn OFF: Bit#16
2313   E223             
2313   E223 11 56       
2314   E225                         		ENDIF_
2314   E225             
2314   E225             
2314   E225             
2314   E225             
2314   E225             
2314   E225~                        		ENDIF_
2314   E225~                        		ENDIF_
2314   E225             
2314   E225~                        		ENDIF_
2314   E225~                        		ENDIF_
2314   E225             
2314   E219             
2314   E219 0B          
2314   E21A             
2314   E21A             
2314   E21A~                        		ENDIF_
2314   E21A~                        		ENDIF_
2314   E21A~                        		ENDIF_
2314   E21A~                        		ENDIF_
2314   E21A~                        		ENDIF_
2314   E21A             
2314   E225             
2314   E225~                        		ENDIF_
2314   E225~                        		ENDIF_
2314   E225             
2315   E225                   		ENDIF_
2315   E225             
2315   E225             
2315   E225             
2315   E225             
2315   E225             
2315   E225~                  		ENDIF_
2315   E225~                  		ENDIF_
2315   E225             
2315   E225~                  		ENDIF_
2315   E225~                  		ENDIF_
2315   E225             
2315   E214             
2315   E214 10          
2315   E215             
2315   E215             
2315   E215~                  		ENDIF_
2315   E215~                  		ENDIF_
2315   E215~                  		ENDIF_
2315   E215~                  		ENDIF_
2315   E215~                  		ENDIF_
2315   E215             
2315   E225             
2315   E225~                  		ENDIF_
2315   E225~                  		ENDIF_
2315   E225             
2316   E225             			MRTS_					;Macro RTS, Save MRA,MRB
2316   E225 02          
2317   E226             
2318   E226             ;**************************************************************
2319   E226             ;* Left Drop Target Bank
2320   E226             ;**************************************************************
2321   E226             sw_dt_lc
2322   E226             sw_dt_ll
2323   E226             sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2323   E226             
2323   E226 5A 4F 64    
2323   E229~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2323   E229~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2323   E229~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2323   E229~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2323   E229~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2323   E229~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2323   E229             
2324   E229             			RSET1R0_($06)				;Effect: Range #06
2324   E229             
2324   E229 1A 06       
2325   E22B             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22B 43          
2325   E22C             
2325   E22C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22C             
2325   E22C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22C             
2325   E22C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22C             
2325   E22C             
2325   E22C 0B          
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2325   E22D             
2325   E22D             
2325   E22D             
2325   E22D             
2326   E22D             			JSRR_(do_lord)			
2326   E22D~            			JSRR_(do_lord)			
2326   E22D~            			JSRR_(do_lord)			
2326   E22D             
2326   E22D~            			JSRR_(do_lord)			
2326   E22D~            			JSRR_(do_lord)			
2326   E22D             
2326   E22D             
2326   E22D 90          
2326   E22E 5F          
2327   E22F             			EXE_
2327   E22F             
2327   E22F 44          
2328   E230 C4 70       			      andb	#$70
2329   E232             			EXEEND_
2329   E232             
2329   E232             
2329   E232             
2329   E232             
2329   E232~            			EXEEND_
2329   E232~            			EXEEND_
2329   E232             
2329   E22F             
2329   E22F 44          
2329   E230             
2329   E232             
2329   E232~            			EXEEND_
2329   E232~            			EXEEND_
2329   E232             
2330   E232             			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
2330   E232             
2330   E232 5BFCE17056  
2330   E237~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
2330   E237~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
2330   E237~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
2330   E237~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
2330   E237~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
2330   E237~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
2330   E237             
2331   E237             			BITOFF_($1C)			;Turn OFF: Lamp#1C(dt_left)
2331   E237             
2331   E237 11 1C       
2332   E239             			SOL_(dtleft_on)   		;Turn ON Sol#4:dt_left
2332   E239 31 63       
2333   E23B             			REMTHREADS_($F8,$80)		;Remove Multiple Threads Based on Priority
2333   E23B 55 F8 80    
2334   E23E             			JMPR_(dt_common)
2334   E23E~            			JMPR_(dt_common)
2334   E23E~            			JMPR_(dt_common)
2334   E23E             
2334   E23E~            			JMPR_(dt_common)
2334   E23E~            			JMPR_(dt_common)
2334   E23E             
2334   E23E             
2334   E23E 80          
2334   E23F 18          
2335   E240             			
2336   E240             ;**************************************************************
2337   E240             ;* Right Drop Target Bank
2338   E240             ;**************************************************************						
2339   E240             sw_dt_rb
2340   E240             sw_dt_rc
2341   E240             sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2341   E240             
2341   E240 5A 4F 4A    
2341   E243~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2341   E243~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2341   E243~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2341   E243~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2341   E243~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2341   E243~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
2341   E243             
2342   E243             			RSET1R0_($05)				;Effect: Range #05
2342   E243             
2342   E243 1A 05       
2343   E245             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E245 43          
2343   E246             
2343   E246~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E246~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E246             
2343   E246~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E246~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E246             
2343   E246~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E246~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E246             
2343   E246             
2343   E246 0B          
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2343   E247             
2343   E247             
2343   E247             
2343   E247             
2344   E247             			JSRR_(do_lord)			
2344   E247~            			JSRR_(do_lord)			
2344   E247~            			JSRR_(do_lord)			
2344   E247             
2344   E247~            			JSRR_(do_lord)			
2344   E247~            			JSRR_(do_lord)			
2344   E247             
2344   E247             
2344   E247 90          
2344   E248 45          
2345   E249             			EXE_
2345   E249             
2345   E249 44          
2346   E24A C4 07       			      andb	#$07
2347   E24C             			EXEEND_
2347   E24C             
2347   E24C             
2347   E24C             
2347   E24C             
2347   E24C~            			EXEEND_
2347   E24C~            			EXEEND_
2347   E24C             
2347   E249             
2347   E249 44          
2347   E24A             
2347   E24C             
2347   E24C~            			EXEEND_
2347   E24C~            			EXEEND_
2347   E24C             
2348   E24C             			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
2348   E24C             
2348   E24C 5BFCE1073C  
2348   E251~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
2348   E251~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
2348   E251~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
2348   E251~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
2348   E251~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
2348   E251~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
2348   E251             
2349   E251             			BITOFF_($18)			;Turn OFF: Lamp#18(dt_right)
2349   E251             
2349   E251 11 18       
2350   E253             			SOL_(dtright_on)           	;Turn ON Sol#5:dt_right
2350   E253 31 64       
2351   E255             			REMTHREADS_($F8,$70)		;Remove Multiple Threads Based on Priority
2351   E255 55 F8 70    
2352   E258             dt_common		PRI_($05)				;Priority=#05
2352   E258 52 05       
2353   E25A             			EXE_
2353   E25A             
2353   E25A 44          
2354   E25B 37          			      pshb	
2355   E25C 36          			      psha	
2356   E25D             			EXEEND_			
2356   E25D             
2356   E25D             
2356   E25D             
2356   E25D             
2356   E25D~            			EXEEND_			
2356   E25D~            			EXEEND_			
2356   E25D             
2356   E25A             
2356   E25A 44          
2356   E25B             
2356   E25D             
2356   E25D~            			EXEEND_			
2356   E25D~            			EXEEND_			
2356   E25D             
2357   E25D             			EXE_
2357   E25D             
2357   E25D 44          
2358   E25E 32          			      pula	
2359   E25F 36          			      psha
2360   E260             			EXEEND_	
2360   E260             
2360   E260             
2360   E260             
2360   E260             
2360   E260~            			EXEEND_	
2360   E260~            			EXEEND_	
2360   E260             
2360   E25D             
2360   E25D 44          
2360   E25E             
2360   E260             
2360   E260~            			EXEEND_	
2360   E260~            			EXEEND_	
2360   E260             
2361   E260             			IFEQR_($E0)			      ;BNER_RAM$00
2361   E260             
2361   E260             
2361   E260             
2361   E260 5B E0 00    
2361   E263~            			IFEQR_($E0)			      ;BNER_RAM$00
2361   E263~            			IFEQR_($E0)			      ;BNER_RAM$00
2361   E263~            			IFEQR_($E0)			      ;BNER_RAM$00
2361   E263~            			IFEQR_($E0)			      ;BNER_RAM$00
2361   E263~            			IFEQR_($E0)			      ;BNER_RAM$00
2361   E263~            			IFEQR_($E0)			      ;BNER_RAM$00
2361   E263             
2362   E263             			      JSRR_(gj_0E)			
2362   E263~            			      JSRR_(gj_0E)			
2362   E263~            			      JSRR_(gj_0E)			
2362   E263             
2362   E263~            			      JSRR_(gj_0E)			
2362   E263~            			      JSRR_(gj_0E)			
2362   E263             
2362   E263             
2362   E263 95          
2362   E264 2E          
2363   E265             			      JMPR_(gj_0F)
2363   E265~            			      JMPR_(gj_0F)
2363   E265~            			      JMPR_(gj_0F)
2363   E265             
2363   E265~            			      JMPR_(gj_0F)
2363   E265~            			      JMPR_(gj_0F)
2363   E265             
2363   E265             
2363   E265 80          
2363   E266 02          
2364   E267             			ENDIF_		
2364   E267             
2364   E267             
2364   E267             
2364   E267             
2364   E267             
2364   E267~            			ENDIF_		
2364   E267~            			ENDIF_		
2364   E267             
2364   E267~            			ENDIF_		
2364   E267~            			ENDIF_		
2364   E267             
2364   E262             
2364   E262 04          
2364   E263             
2364   E263             
2364   E263~            			ENDIF_		
2364   E263~            			ENDIF_		
2364   E263~            			ENDIF_		
2364   E263~            			ENDIF_		
2364   E263~            			ENDIF_		
2364   E263             
2364   E267             
2364   E267~            			ENDIF_		
2364   E267~            			ENDIF_		
2364   E267             
2365   E267 DA 0A       			RSND_($1A,$0A)			;Sound #1A(x10)
2366   E269             gj_0F			EXE_
2366   E269             
2366   E269 44          
2367   E26A 32          			      pula	
2368   E26B 33          			      pulb
2369   E26C             			EXEEND_	
2369   E26C             
2369   E26C             
2369   E26C             
2369   E26C             
2369   E26C~            			EXEEND_	
2369   E26C~            			EXEEND_	
2369   E26C             
2369   E269             
2369   E269 44          
2369   E26A             
2369   E26C             
2369   E26C~            			EXEEND_	
2369   E26C~            			EXEEND_	
2369   E26C             
2370   E26C             			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
2370   E26C             
2370   E26C 15 00       
2371   E26E             			ADDRAM_(rega,$01)			;RAM$00+=$01
2371   E26E~            			ADDRAM_(rega,$01)			;RAM$00+=$01
2371   E26E~            			ADDRAM_(rega,$01)			;RAM$00+=$01
2371   E26E             
2371   E26E B0 01       
2372   E270             			IFNER_($E0)				;BEQR_RAM$00
2372   E270             
2372   E270             
2372   E270             
2372   E270 5A E0 00    
2372   E273~            			IFNER_($E0)				;BEQR_RAM$00
2372   E273~            			IFNER_($E0)				;BEQR_RAM$00
2372   E273~            			IFNER_($E0)				;BEQR_RAM$00
2372   E273~            			IFNER_($E0)				;BEQR_RAM$00
2372   E273~            			IFNER_($E0)				;BEQR_RAM$00
2372   E273~            			IFNER_($E0)				;BEQR_RAM$00
2372   E273             
2373   E273             				BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2373   E273             
2373   E273 14 00       
2374   E275             				ADDRAM_(rega,$BF)			;RAM$00+=$BF
2374   E275~            				ADDRAM_(rega,$BF)			;RAM$00+=$BF
2374   E275~            				ADDRAM_(rega,$BF)			;RAM$00+=$BF
2374   E275             
2374   E275 B0 BF       
2375   E277             				SETRAM_(regb,$18)			;RAM$01=$18
2375   E277~            				SETRAM_(regb,$18)			;RAM$01=$18
2375   E277~            				SETRAM_(regb,$18)			;RAM$01=$18
2375   E277             
2375   E277 C1 18       
2376   E279             				BEGIN_
2376   E279             
2377   E279             					BITINVP_(rega)			;Toggle Lamp/Bit @RAM:00
2377   E279             
2377   E279 16 00       
2378   E27B             					SLEEP_(2)
2378   E27B             
2378   E27B 72          
2378   E27C~            					SLEEP_(2)
2378   E27C~            					SLEEP_(2)
2378   E27C             
2379   E27C             					ADDRAM_(regb,-1)			;RAM$01-=1
2379   E27C~            					ADDRAM_(regb,-1)			;RAM$01-=1
2379   E27C~            					ADDRAM_(regb,-1)			;RAM$01-=1
2379   E27C             
2379   E27C B1 FF       
2380   E27E             				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E27E             
2380   E27E 5BFCE100FE  
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283             
2380   E283             
2380   E283             
2380   E283             
2380   E283             
2380   E283             
2380   E283             
2380   E282             
2380   E282 F6          
2380   E283             
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283             
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
2380   E283             
2381   E283             				ADDRAM_(rega,$41)			;RAM$00+=$41
2381   E283~            				ADDRAM_(rega,$41)			;RAM$00+=$41
2381   E283~            				ADDRAM_(rega,$41)			;RAM$00+=$41
2381   E283             
2381   E283 B0 41       
2382   E285             				BITOFFP_($00)			;Turn OFF Lamp/Bit @RAM:00
2382   E285             
2382   E285 15 00       
2383   E287             			ENDIF_
2383   E287             
2383   E287             
2383   E287             
2383   E287             
2383   E287             
2383   E287~            			ENDIF_
2383   E287~            			ENDIF_
2383   E287             
2383   E287~            			ENDIF_
2383   E287~            			ENDIF_
2383   E287             
2383   E272             
2383   E272 14          
2383   E273             
2383   E273             
2383   E273~            			ENDIF_
2383   E273~            			ENDIF_
2383   E273~            			ENDIF_
2383   E273~            			ENDIF_
2383   E273~            			ENDIF_
2383   E273             
2383   E287             
2383   E287~            			ENDIF_
2383   E287~            			ENDIF_
2383   E287             
2384   E287             			EXE_
2384   E287             
2384   E287 44          
2385   E288 C6 05       				ldab	#$05
2386   E28A             			EXEEND_
2386   E28A             
2386   E28A             
2386   E28A             
2386   E28A             
2386   E28A~            			EXEEND_
2386   E28A~            			EXEEND_
2386   E28A             
2386   E287             
2386   E287 44          
2386   E288             
2386   E28A             
2386   E28A~            			EXEEND_
2386   E28A~            			EXEEND_
2386   E28A             
2387   E28A             			JSRD_(add_bonus_m)	
2387   E28A 57          
2387   E28B D5 F3       
2388   E28D             dt_kill		KILL_					;Remove This Thread
2388   E28D 03          
2389   E28E             
2390   E28E             do_lord		EXE_
2390   E28E             
2390   E28E 44          
2391   E28F 36          			      psha	
2392   E290 84 FC       			      anda	#$FC
2393   E292 8B 41       			      adda	#$41
2394   E294             			EXEEND_
2394   E294             
2394   E294             
2394   E294             
2394   E294             
2394   E294~            			EXEEND_
2394   E294~            			EXEEND_
2394   E294             
2394   E28E             
2394   E28E 47          
2394   E28F             
2394   E294             
2394   E294~            			EXEEND_
2394   E294~            			EXEEND_
2394   E294             
2395   E294             			BEGIN_
2395   E294             
2396   E294             				SLEEP_(2)
2396   E294             
2396   E294 72          
2396   E295~            				SLEEP_(2)
2396   E295~            				SLEEP_(2)
2396   E295             
2397   E295             			NEEND_($E0)				;BEQR_RAM$00
2397   E295             
2397   E295 5A E0 00    
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298             
2397   E298             
2397   E298             
2397   E298             
2397   E298             
2397   E298             
2397   E298             
2397   E297             
2397   E297 FC          
2397   E298             
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298             
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298~            			NEEND_($E0)				;BEQR_RAM$00
2397   E298             
2398   E298             			EXE_
2398   E298             
2398   E298 44          
2399   E299 33          			      pulb	
2400   E29A 4A          			      deca
2401   E29B             			EXEEND_	
2401   E29B             
2401   E29B             
2401   E29B             
2401   E29B             
2401   E29B~            			EXEEND_	
2401   E29B~            			EXEEND_	
2401   E29B             
2401   E298             
2401   E298 44          
2401   E299             
2401   E29B             
2401   E29B~            			EXEEND_	
2401   E29B~            			EXEEND_	
2401   E29B             
2402   E29B             			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
2402   E29B             
2402   E29B 5B F8 E1 EE 
2402   E29F~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
2402   E29F~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
2402   E29F~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
2402   E29F~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
2402   E29F~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
2402   E29F~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
2402   E29F             
2403   E29F             			EXE_
2403   E29F             
2403   E29F 44          
2404   E2A0 36          			      psha	
2405   E2A1 BD E5 6B    			      jsr	get_lord
2406   E2A4 16          			      tab	
2407   E2A5 32          			      pula	
2408   E2A6             			EXEEND_
2408   E2A6             
2408   E2A6             
2408   E2A6             
2408   E2A6             
2408   E2A6~            			EXEEND_
2408   E2A6~            			EXEEND_
2408   E2A6             
2408   E29F             
2408   E29F 48          
2408   E2A0             
2408   E2A6             
2408   E2A6~            			EXEEND_
2408   E2A6~            			EXEEND_
2408   E2A6             
2409   E2A6             			IFNER_($E0)		      ;BEQR_RAM$00
2409   E2A6             
2409   E2A6             
2409   E2A6             
2409   E2A6 5A E0 00    
2409   E2A9~            			IFNER_($E0)		      ;BEQR_RAM$00
2409   E2A9~            			IFNER_($E0)		      ;BEQR_RAM$00
2409   E2A9~            			IFNER_($E0)		      ;BEQR_RAM$00
2409   E2A9~            			IFNER_($E0)		      ;BEQR_RAM$00
2409   E2A9~            			IFNER_($E0)		      ;BEQR_RAM$00
2409   E2A9~            			IFNER_($E0)		      ;BEQR_RAM$00
2409   E2A9             
2410   E2A9                   			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
2410   E2A9             
2410   E2A9             
2410   E2A9             
2410   E2A9 5AFBFBFA5FFC
2410   E2AF D20041FAFCE101FCD501F2
2410   E2BA~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
2410   E2BA~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
2410   E2BA~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
2410   E2BA~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
2410   E2BA~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
2410   E2BA~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
2410   E2BA             
2411   E2BA                   				;BEQR_((ADJ#5==#1 && RAM$01==#1) || (BIT#01 || (ADJ#2==#0 && BIT#1F)))
2412   E2BA                         			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2412   E2BA             
2412   E2BA 14 00       
2413   E2BC                         			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
2413   E2BC             
2413   E2BC             
2413   E2BC             
2413   E2BC 5AFCE058FE  
2413   E2C1~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
2413   E2C1~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
2413   E2C1~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
2413   E2C1~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
2413   E2C1~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
2413   E2C1~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
2413   E2C1             
2414   E2C1                               			EXE_
2414   E2C1             
2414   E2C1 44          
2415   E2C2 C6 80                         			      ldab	#$80
2416   E2C4 D7 AA                         			      stab	thread_priority
2417   E2C6 CE D1 63                      			      ldx	#left_timer
2418   E2C9 BD EA 78                      			      jsr	newthread_sp
2419   E2CC                               			EXEEND_
2419   E2CC             
2419   E2CC             
2419   E2CC             
2419   E2CC             
2419   E2CC~                              			EXEEND_
2419   E2CC~                              			EXEEND_
2419   E2CC             
2419   E2C1             
2419   E2C1 4C          
2419   E2C2             
2419   E2CC             
2419   E2CC~                              			EXEEND_
2419   E2CC~                              			EXEEND_
2419   E2CC             
2420   E2CC                                           ELSE_ 						
2420   E2CC             
2420   E2CC             
2420   E2CC             
2420   E2CC             
2420   E2C0             
2420   E2C0             
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0             
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0~                                          ELSE_ 						
2420   E2C0             
2420   E2C0             
2420   E2C0 0D          
2420   E2CC             
2420   E2CC             
2420   E2CC~                                          ELSE_ 						
2420   E2CC~                                          ELSE_ 						
2420   E2CC             
2420   E2CC~                                          ELSE_ 						
2420   E2CC~                                          ELSE_ 						
2420   E2CC             
2420   E2CC             
2420   E2CC 80          
2420   E2CD 00          
2420   E2CE             
2420   E2CE             
2420   E2CE             
2420   E2CE~                                          ELSE_ 						
2420   E2CE~                                          ELSE_ 						
2420   E2CE             
2420   E2CE~                                          ELSE_ 						
2420   E2CE~                                          ELSE_ 						
2420   E2CE             
2421   E2CE                                       		EXE_
2421   E2CE             
2421   E2CE 44          
2422   E2CF C6 70                         			      ldab	#$70
2423   E2D1 D7 AA                         			      stab	thread_priority
2424   E2D3 CE D1 95                      			      ldx	#right_timer
2425   E2D6 BD EA 78                      			      jsr	newthread_sp
2426   E2D9                               			EXEEND_
2426   E2D9             
2426   E2D9             
2426   E2D9             
2426   E2D9             
2426   E2D9~                              			EXEEND_
2426   E2D9~                              			EXEEND_
2426   E2D9             
2426   E2CE             
2426   E2CE 4C          
2426   E2CF             
2426   E2D9             
2426   E2D9~                              			EXEEND_
2426   E2D9~                              			EXEEND_
2426   E2D9             
2427   E2D9                               		ENDIF_
2427   E2D9             
2427   E2D9             
2427   E2D9             
2427   E2D9             
2427   E2D9             
2427   E2D9~                              		ENDIF_
2427   E2D9~                              		ENDIF_
2427   E2D9             
2427   E2D9~                              		ENDIF_
2427   E2D9~                              		ENDIF_
2427   E2D9             
2427   E2CD             
2427   E2CD 0B          
2427   E2CE             
2427   E2CE             
2427   E2CE~                              		ENDIF_
2427   E2CE~                              		ENDIF_
2427   E2CE~                              		ENDIF_
2427   E2CE~                              		ENDIF_
2427   E2CE~                              		ENDIF_
2427   E2CE             
2427   E2D9             
2427   E2D9~                              		ENDIF_
2427   E2D9~                              		ENDIF_
2427   E2D9             
2428   E2D9                               	ENDIF_
2428   E2D9             
2428   E2D9             
2428   E2D9             
2428   E2D9             
2428   E2D9             
2428   E2D9~                              	ENDIF_
2428   E2D9~                              	ENDIF_
2428   E2D9             
2428   E2D9~                              	ENDIF_
2428   E2D9~                              	ENDIF_
2428   E2D9             
2428   E2B9             
2428   E2B9 1F          
2428   E2BA             
2428   E2BA             
2428   E2BA~                              	ENDIF_
2428   E2BA~                              	ENDIF_
2428   E2BA~                              	ENDIF_
2428   E2BA~                              	ENDIF_
2428   E2BA~                              	ENDIF_
2428   E2BA             
2428   E2D9             
2428   E2D9~                              	ENDIF_
2428   E2D9~                              	ENDIF_
2428   E2D9             
2429   E2D9                   		ENDIF_
2429   E2D9             
2429   E2D9             
2429   E2D9             
2429   E2D9             
2429   E2D9             
2429   E2D9~                  		ENDIF_
2429   E2D9~                  		ENDIF_
2429   E2D9             
2429   E2D9~                  		ENDIF_
2429   E2D9~                  		ENDIF_
2429   E2D9             
2429   E2A8             
2429   E2A8 30          
2429   E2A9             
2429   E2A9             
2429   E2A9~                  		ENDIF_
2429   E2A9~                  		ENDIF_
2429   E2A9~                  		ENDIF_
2429   E2A9~                  		ENDIF_
2429   E2A9~                  		ENDIF_
2429   E2A9             
2429   E2D9             
2429   E2D9~                  		ENDIF_
2429   E2D9~                  		ENDIF_
2429   E2D9             
2430   E2D9                   		EXE_
2430   E2D9             
2430   E2D9 44          
2431   E2DA D6 64       			      ldab	$64
2432   E2DC             			EXEEND_
2432   E2DC             
2432   E2DC             
2432   E2DC             
2432   E2DC             
2432   E2DC~            			EXEEND_
2432   E2DC~            			EXEEND_
2432   E2DC             
2432   E2D9             
2432   E2D9 44          
2432   E2DA             
2432   E2DC             
2432   E2DC~            			EXEEND_
2432   E2DC~            			EXEEND_
2432   E2DC             
2433   E2DC             			MRTS_					;Macro RTS, Save MRA,MRB
2433   E2DC 02          
2434   E2DD             
2435   E2DD             		
2436   E2DD             
2437   E2DD             ;************************************************************
2438   E2DD             ;* Lower Eject Hole
2439   E2DD             ;************************************************************			
2440   E2DD             sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
2440   E2DD             
2440   E2DD             
2440   E2DD             
2440   E2DD 5BFBF0F1FE  
2440   E2E2~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
2440   E2E2~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
2440   E2E2~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
2440   E2E2~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
2440   E2E2~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
2440   E2E2~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
2440   E2E2             
2441   E2E2             			      SETRAM_(rega,$46)			;RAM$00=$46	
2441   E2E2~            			      SETRAM_(rega,$46)			;RAM$00=$46	
2441   E2E2~            			      SETRAM_(rega,$46)			;RAM$00=$46	
2441   E2E2             
2441   E2E2 C0 46       
2442   E2E4                   		ELSE_	
2442   E2E4             
2442   E2E4             
2442   E2E4             
2442   E2E4             
2442   E2E1             
2442   E2E1             
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1             
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1~                  		ELSE_	
2442   E2E1             
2442   E2E1             
2442   E2E1 04          
2442   E2E4             
2442   E2E4             
2442   E2E4~                  		ELSE_	
2442   E2E4~                  		ELSE_	
2442   E2E4             
2442   E2E4~                  		ELSE_	
2442   E2E4~                  		ELSE_	
2442   E2E4             
2442   E2E4             
2442   E2E4 80          
2442   E2E5 00          
2442   E2E6             
2442   E2E6             
2442   E2E6             
2442   E2E6~                  		ELSE_	
2442   E2E6~                  		ELSE_	
2442   E2E6             
2442   E2E6~                  		ELSE_	
2442   E2E6~                  		ELSE_	
2442   E2E6             
2443   E2E6             	      		BEQA_($FB,$FB,$FE,$F2,$F0,$10,$FA,$5E,$F3,$57,$4F,sw_notused)
2443   E2E6 58FBFBFEF2F0
2443   E2EC 10FA5EF3574F
2443   E2F2 E1 B5       
2444   E2F4                                     ;BEQR_(BIT#0F || (((!BIT#17) && BIT#1E) || (LAMP#10(1_target) P $F0,$10))) to sw_notused
2445   E2F4                   			BITON_($54)				;Turn ON: Bit#14
2445   E2F4             
2445   E2F4 10 54       
2446   E2F6                   			BEQA_($41,mb_start)		;BEQR_BIT#01 to mb_start
2446   E2F6 58 41       
2446   E2F8 E4 06       
2447   E2FA                   			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
2447   E2FA             
2447   E2FA             
2447   E2FA             
2447   E2FA 5B F4 2B FF 
2447   E2FE~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
2447   E2FE~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
2447   E2FE~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
2447   E2FE~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
2447   E2FE~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
2447   E2FE~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
2447   E2FE             
2448   E2FE                   			      BITOFF_($2B)			;Turn OFF: Lamp#2B(extra_kick)
2448   E2FE             
2448   E2FE 11 2B       
2449   E300                   			      REMTHREADS_($F8,$14)		;Remove Multiple Threads Based on Priority
2449   E300 55 F8 14    
2450   E303                   			      BITON_($53)				;Turn ON: Bit#13
2450   E303             
2450   E303 10 53       
2451   E305                   			ENDIF_
2451   E305             
2451   E305             
2451   E305             
2451   E305             
2451   E305             
2451   E305~                  			ENDIF_
2451   E305~                  			ENDIF_
2451   E305             
2451   E305~                  			ENDIF_
2451   E305~                  			ENDIF_
2451   E305             
2451   E2FD             
2451   E2FD 07          
2451   E2FE             
2451   E2FE             
2451   E2FE~                  			ENDIF_
2451   E2FE~                  			ENDIF_
2451   E2FE~                  			ENDIF_
2451   E2FE~                  			ENDIF_
2451   E2FE~                  			ENDIF_
2451   E2FE             
2451   E305             
2451   E305~                  			ENDIF_
2451   E305~                  			ENDIF_
2451   E305             
2452   E305             eject_common	      PRI_($15)				;Priority=#15
2452   E305 52 15       
2453   E307                   			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E307 43          
2453   E308             
2453   E308~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E308~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E308             
2453   E308~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E308~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E308             
2453   E308~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E308~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E308             
2453   E308             
2453   E308 0B          
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
2453   E309             
2453   E309             
2453   E309             
2453   E309             
2454   E309                   			IFNER_($F8,$08)		      ;BEQR_SW#08
2454   E309             
2454   E309             
2454   E309             
2454   E309 5A F8 08 FF 
2454   E30D~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
2454   E30D~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
2454   E30D~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
2454   E30D~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
2454   E30D~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
2454   E30D~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
2454   E30D             
2455   E30D                         			BITON2_($17,$1F,$25,$2E,$2F,$2B)	;Turn ON: Lamp#17(mini_pf)
2455   E30D             
2455   E30D 20979FA5AEAF
2455   E313 2B
2456   E314                         			;BITON2_($1F)			;Turn ON: Lamp#1F(mini_pf)
2457   E314                         			;BITON2_($25)			;Turn ON: Lamp#25(mini_pf)
2458   E314                         			;BITON2_($2E)			;Turn ON: Lamp#2E(mini_pf)
2459   E314                         			;BITON2_($2F)			;Turn ON: Lamp#2F(mini_pf)
2460   E314                         			;BITON2_($2B)			;Turn ON: Lamp#2B(extra_kick)
2461   E314                         			BITOFF2_($6B)			;Turn OFF: Lamp#2B(extra_kick)
2461   E314             
2461   E314 21 6B       
2462   E316                         			BITON_($64)				;Turn ON: Bit#24
2462   E316             
2462   E316 10 64       
2463   E318                         		ELSE_			
2463   E318             
2463   E318             
2463   E318             
2463   E318             
2463   E30C             
2463   E30C             
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C             
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C~                        		ELSE_			
2463   E30C             
2463   E30C             
2463   E30C 0D          
2463   E318             
2463   E318             
2463   E318~                        		ELSE_			
2463   E318~                        		ELSE_			
2463   E318             
2463   E318~                        		ELSE_			
2463   E318~                        		ELSE_			
2463   E318             
2463   E318             
2463   E318 80          
2463   E319 00          
2463   E31A             
2463   E31A             
2463   E31A             
2463   E31A~                        		ELSE_			
2463   E31A~                        		ELSE_			
2463   E31A             
2463   E31A~                        		ELSE_			
2463   E31A~                        		ELSE_			
2463   E31A             
2464   E31A                   	      		JSR_(gi_off_inc)			
2464   E31A 56          
2464   E31B D3 73       
2465   E31D                         			RCLR1_($08)				;Effect: Range #08
2465   E31D             
2465   E31D 29 08       
2466   E31F                         			JSRD_(alllamps_off)			
2466   E31F 57          
2466   E320 D5 64       
2467   E322                         			RCLR1_($42)				;Effect: Range #02
2467   E322             
2467   E322 29 42       
2468   E324                         	      ENDIF_
2468   E324             
2468   E324             
2468   E324             
2468   E324             
2468   E324             
2468   E324~                        	      ENDIF_
2468   E324~                        	      ENDIF_
2468   E324             
2468   E324~                        	      ENDIF_
2468   E324~                        	      ENDIF_
2468   E324             
2468   E319             
2468   E319 0A          
2468   E31A             
2468   E31A             
2468   E31A~                        	      ENDIF_
2468   E31A~                        	      ENDIF_
2468   E31A~                        	      ENDIF_
2468   E31A~                        	      ENDIF_
2468   E31A~                        	      ENDIF_
2468   E31A             
2468   E324             
2468   E324~                        	      ENDIF_
2468   E324~                        	      ENDIF_
2468   E324             
2469   E324             gj_22     			EXE_
2469   E324             
2469   E324 44          
2470   E325                   			      NEWTHREAD(minipf_thread)
2470   E325 CE E3 72    
2470   E328 BD EA C4    
2471   E32B                   			EXEEND_
2471   E32B             
2471   E32B             
2471   E32B             
2471   E32B             
2471   E32B~                  			EXEEND_
2471   E32B~                  			EXEEND_
2471   E32B             
2471   E324             
2471   E324 48          
2471   E325             
2471   E32B             
2471   E32B~                  			EXEEND_
2471   E32B~                  			EXEEND_
2471   E32B             
2472   E32B                   			SLEEP_(64)
2472   E32B~                  			SLEEP_(64)
2472   E32B~                  			SLEEP_(64)
2472   E32B             
2472   E32B 53 40       
2472   E32D             
2473   E32D                   			SOL_(minikick_on)         	;Turn ON Sol#20:mini_kicker
2473   E32D 31 33       
2474   E32F                   			SLEEP_(255)                   ;wait 4 seconds
2474   E32F~                  			SLEEP_(255)                   ;wait 4 seconds
2474   E32F~                  			SLEEP_(255)                   ;wait 4 seconds
2474   E32F             
2474   E32F 53 FF       
2474   E331             
2475   E331                   			SOL_(minikick_on_hard)        ;Turn ON Sol#20:mini_kicker
2475   E331 31 53       
2476   E333                   			SLEEP_(192)
2476   E333~                  			SLEEP_(192)
2476   E333~                  			SLEEP_(192)
2476   E333             
2476   E333 53 C0       
2476   E335             
2477   E335             gb_89 			BITOFF_($53)			;Turn OFF: Bit#13
2477   E335             
2477   E335 11 53       
2478   E337                   			REMTHREADS_($F8,$10)		;Remove Multiple Threads Based on Priority
2478   E337 55 F8 10    
2479   E33A             gb_41 			JSRR_(minipf_done)			
2479   E33A~            gb_41 			JSRR_(minipf_done)			
2479   E33A~            gb_41 			JSRR_(minipf_done)			
2479   E33A             
2479   E33A~            gb_41 			JSRR_(minipf_done)			
2479   E33A~            gb_41 			JSRR_(minipf_done)			
2479   E33A             
2479   E33A             
2479   E33A 90          
2479   E33B 21          
2480   E33C             gb_24 			PRI_($17)				;Priority=#17
2480   E33C 52 17       
2481   E33E                   			SLEEP_(32)
2481   E33E~                  			SLEEP_(32)
2481   E33E~                  			SLEEP_(32)
2481   E33E             
2481   E33E 53 20       
2481   E340             
2482   E340                   			SSND_($0D)				;Sound #0D
2482   E340             
2482   E340 ED          
2482   E341~                  			SSND_($0D)				;Sound #0D
2482   E341~                  			SSND_($0D)				;Sound #0D
2482   E341~                  			SSND_($0D)				;Sound #0D
2482   E341             
2483   E341                   			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
2483   E341             
2483   E341             
2483   E341             
2483   E341 5BFA5FF808FD
2483   E347~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
2483   E347~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
2483   E347~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
2483   E347~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
2483   E347~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
2483   E347~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
2483   E347             
2484   E347                         			BITOFF_($57)			;Turn OFF: Bit#17
2484   E347             
2484   E347 11 57       
2485   E349                         			JMPR_(mb_restart)
2485   E349~                        			JMPR_(mb_restart)
2485   E349~                        			JMPR_(mb_restart)
2485   E349             
2485   E349~                        			JMPR_(mb_restart)
2485   E349~                        			JMPR_(mb_restart)
2485   E349             
2485   E349             
2485   E349 80          
2485   E34A F8          
2486   E34B                         	      ENDIF_	
2486   E34B             
2486   E34B             
2486   E34B             
2486   E34B             
2486   E34B             
2486   E34B~                        	      ENDIF_	
2486   E34B~                        	      ENDIF_	
2486   E34B             
2486   E34B~                        	      ENDIF_	
2486   E34B~                        	      ENDIF_	
2486   E34B             
2486   E346             
2486   E346 04          
2486   E347             
2486   E347             
2486   E347~                        	      ENDIF_	
2486   E347~                        	      ENDIF_	
2486   E347~                        	      ENDIF_	
2486   E347~                        	      ENDIF_	
2486   E347~                        	      ENDIF_	
2486   E347             
2486   E34B             
2486   E34B~                        	      ENDIF_	
2486   E34B~                        	      ENDIF_	
2486   E34B             
2487   E34B                    			SETRAM_(rega,lowereject_on)    
2487   E34B~                   			SETRAM_(rega,lowereject_on)    
2487   E34B~                   			SETRAM_(rega,lowereject_on)    
2487   E34B             
2487   E34B C0 46       
2488   E34D                   			IFNER_($54)			      ;BEQR_BIT#14 
2488   E34D             
2488   E34D             
2488   E34D             
2488   E34D 5A 54 00    
2488   E350~                  			IFNER_($54)			      ;BEQR_BIT#14 
2488   E350~                  			IFNER_($54)			      ;BEQR_BIT#14 
2488   E350~                  			IFNER_($54)			      ;BEQR_BIT#14 
2488   E350~                  			IFNER_($54)			      ;BEQR_BIT#14 
2488   E350~                  			IFNER_($54)			      ;BEQR_BIT#14 
2488   E350~                  			IFNER_($54)			      ;BEQR_BIT#14 
2488   E350             
2489   E350             gb_1C 			      SETRAM_(rega,uppereject_on)
2489   E350~            gb_1C 			      SETRAM_(rega,uppereject_on)
2489   E350~            gb_1C 			      SETRAM_(rega,uppereject_on)
2489   E350             
2489   E350 C0 47       
2490   E352                                     ENDIF_
2490   E352             
2490   E352             
2490   E352             
2490   E352             
2490   E352             
2490   E352~                                    ENDIF_
2490   E352~                                    ENDIF_
2490   E352             
2490   E352~                                    ENDIF_
2490   E352~                                    ENDIF_
2490   E352             
2490   E34F             
2490   E34F 02          
2490   E350             
2490   E350             
2490   E350~                                    ENDIF_
2490   E350~                                    ENDIF_
2490   E350~                                    ENDIF_
2490   E350~                                    ENDIF_
2490   E350~                                    ENDIF_
2490   E350             
2490   E352             
2490   E352~                                    ENDIF_
2490   E352~                                    ENDIF_
2490   E352             
2491   E352                               ENDIF_	
2491   E352             
2491   E352             
2491   E352             
2491   E352             
2491   E352             
2491   E352~                              ENDIF_	
2491   E352~                              ENDIF_	
2491   E352             
2491   E352~                              ENDIF_	
2491   E352~                              ENDIF_	
2491   E352             
2491   E2E5             
2491   E2E5 6C          
2491   E2E6             
2491   E2E6             
2491   E2E6~                              ENDIF_	
2491   E2E6~                              ENDIF_	
2491   E2E6~                              ENDIF_	
2491   E2E6~                              ENDIF_	
2491   E2E6~                              ENDIF_	
2491   E2E6             
2491   E352             
2491   E352~                              ENDIF_	
2491   E352~                              ENDIF_	
2491   E352             
2492   E352             			JSRD_(solbuf)			
2492   E352 57          
2492   E353 EB 23       
2493   E355             			BITOFF_($54)			;Turn OFF: Bit#14
2493   E355             
2493   E355 11 54       
2494   E357             			SLEEP_(32)
2494   E357~            			SLEEP_(32)
2494   E357~            			SLEEP_(32)
2494   E357             
2494   E357 53 20       
2494   E359             
2495   E359 5E A5 26    			SWCLR_($A5),($26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
2496   E35C             gb_0B			KILL_					;Remove This Thread
2496   E35C 03          
2497   E35D             
2498   E35D             
2499   E35D             minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2499   E35D             
2499   E35D             
2499   E35D             
2499   E35D 5B 64 00    
2499   E360~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2499   E360~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2499   E360~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2499   E360~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2499   E360~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2499   E360~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2499   E360             
2500   E360                   			BITOFF2_($2B,$17,$1F,$25,$2E,$2F)	;Turn OFF: Lamp#2B(extra_kick)
2500   E360             
2500   E360 21AB979FA5AE
2500   E366 2F
2501   E367                   			;BITOFF2_($17)			;Turn OFF: Lamp#17(mini_pf)
2502   E367                   			;BITOFF2_($1F)			;Turn OFF: Lamp#1F(mini_pf)
2503   E367                   			;BITOFF2_($25)			;Turn OFF: Lamp#25(mini_pf)
2504   E367                   			;BITOFF2_($2E)			;Turn OFF: Lamp#2E(mini_pf)
2505   E367                   			;BITOFF2_($2F)			;Turn OFF: Lamp#2F(mini_pf)
2506   E367                   		ELSE_				
2506   E367             
2506   E367             
2506   E367             
2506   E367             
2506   E35F             
2506   E35F             
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F             
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F~                  		ELSE_				
2506   E35F             
2506   E35F             
2506   E35F 09          
2506   E367             
2506   E367             
2506   E367~                  		ELSE_				
2506   E367~                  		ELSE_				
2506   E367             
2506   E367~                  		ELSE_				
2506   E367~                  		ELSE_				
2506   E367             
2506   E367             
2506   E367 80          
2506   E368 00          
2506   E369             
2506   E369             
2506   E369             
2506   E369~                  		ELSE_				
2506   E369~                  		ELSE_				
2506   E369             
2506   E369~                  		ELSE_				
2506   E369~                  		ELSE_				
2506   E369             
2507   E369             			      JSRD_(alllamps_on)			
2507   E369 57          
2507   E36A D5 71       
2508   E36C             			      JSR_(gi_on_dec)
2508   E36C 56          
2508   E36D D3 64       
2509   E36F             		      ENDIF_			
2509   E36F             
2509   E36F             
2509   E36F             
2509   E36F             
2509   E36F             
2509   E36F~            		      ENDIF_			
2509   E36F~            		      ENDIF_			
2509   E36F             
2509   E36F~            		      ENDIF_			
2509   E36F~            		      ENDIF_			
2509   E36F             
2509   E368             
2509   E368 06          
2509   E369             
2509   E369             
2509   E369~            		      ENDIF_			
2509   E369~            		      ENDIF_			
2509   E369~            		      ENDIF_			
2509   E369~            		      ENDIF_			
2509   E369~            		      ENDIF_			
2509   E369             
2509   E36F             
2509   E36F~            		      ENDIF_			
2509   E36F~            		      ENDIF_			
2509   E36F             
2510   E36F                   		BITOFF_($64)			;Turn OFF: Bit#24
2510   E36F             
2510   E36F 11 64       
2511   E371             			MRTS_					;Macro RTS, Save MRA,MRB
2511   E371 02          
2512   E372             
2513   E372 BD F3 AB    minipf_thread	jsr	macro_start
2514   E375             			PRI_($15)				;Priority=#15
2514   E375 52 15       
2515   E377             minipf_loop		BITINV2_($57)			;Toggle: Lamp#17(mini_pf)
2515   E377             
2515   E377 22 57       
2516   E379             			BITINV2_($5F)			;Toggle: Lamp#1F(mini_pf)
2516   E379             
2516   E379 22 5F       
2517   E37B             			BITINV2_($65)			;Toggle: Lamp#25(mini_pf)
2517   E37B             
2517   E37B 22 65       
2518   E37D             			BITINV2_($6E)			;Toggle: Lamp#2E(mini_pf)
2518   E37D             
2518   E37D 22 6E       
2519   E37F             			BITINV2_($6F)			;Toggle: Lamp#2F(mini_pf)
2519   E37F             
2519   E37F 22 6F       
2520   E381             			SSND_($05)				;Sound #05
2520   E381             
2520   E381 E5          
2520   E382~            			SSND_($05)				;Sound #05
2520   E382~            			SSND_($05)				;Sound #05
2520   E382~            			SSND_($05)				;Sound #05
2520   E382             
2521   E382             			SLEEP_(2)
2521   E382             
2521   E382 72          
2521   E383~            			SLEEP_(2)
2521   E383~            			SLEEP_(2)
2521   E383             
2522   E383             			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2522   E383             
2522   E383 5A F0 AF    
2522   E386~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2522   E386~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2522   E386~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2522   E386~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2522   E386~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2522   E386~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2522   E386             
2523   E386             			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2523   E386             
2523   E386 5B 53 EE    
2523   E389~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2523   E389~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2523   E389~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2523   E389~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2523   E389~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2523   E389~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2523   E389             
2524   E389             			BITINV2_($6B)			;Toggle: Lamp#2B(extra_kick)
2524   E389             
2524   E389 22 6B       
2525   E38B             			JMPR_(minipf_loop)	
2525   E38B~            			JMPR_(minipf_loop)	
2525   E38B~            			JMPR_(minipf_loop)	
2525   E38B             
2525   E38B~            			JMPR_(minipf_loop)	
2525   E38B~            			JMPR_(minipf_loop)	
2525   E38B             
2525   E38B             
2525   E38B 8F          
2525   E38C EA          
2526   E38D             					
2527   E38D             sw_L_rollover
2528   E38D             sw_O_rollover
2529   E38D             sw_R_rollover
2530   E38D             sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2530   E38D             
2530   E38D 5BFEF2F210C9
2530   E393~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2530   E393~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2530   E393~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2530   E393~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2530   E393~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2530   E393~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2530   E393             
2531   E393             			BEGIN_
2531   E393             
2532   E393             				SLEEP_(1)
2532   E393             
2532   E393 71          
2532   E394~            				SLEEP_(1)
2532   E394~            				SLEEP_(1)
2532   E394             
2533   E394             			EQEND_($F7,$17)			;BNER_BIT#17
2533   E394             
2533   E394 5B F7 17 FF 
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398             
2533   E398             
2533   E398             
2533   E398             
2533   E398             
2533   E398             
2533   E398             
2533   E397             
2533   E397 FB          
2533   E398             
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398             
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398~            			EQEND_($F7,$17)			;BNER_BIT#17
2533   E398             
2534   E398             			POINTS_(5,1000)			;5000 Points
2534   E398 42          
2534   E399             
2534   E399~            			POINTS_(5,1000)			;5000 Points
2534   E399~            			POINTS_(5,1000)			;5000 Points
2534   E399             
2534   E399~            			POINTS_(5,1000)			;5000 Points
2534   E399~            			POINTS_(5,1000)			;5000 Points
2534   E399             
2534   E399~            			POINTS_(5,1000)			;5000 Points
2534   E399~            			POINTS_(5,1000)			;5000 Points
2534   E399             
2534   E399             
2534   E399 2B          
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A~            			POINTS_(5,1000)			;5000 Points
2534   E39A             
2534   E39A             
2534   E39A             
2534   E39A             
2535   E39A             			REMTHREADS_($F8,$10)		;Remove Multiple Threads Based on Priority
2535   E39A 55 F8 10    
2536   E39D             			PRI_($17)				;Priority=#17
2536   E39D 52 17       
2537   E39F             			EXE_
2537   E39F             
2537   E39F 44          
2538   E3A0 16          			      tab	
2539   E3A1 50          			      negb	
2540   E3A2 CB 10       			      addb	#$10
2541   E3A4             			EXEEND_
2541   E3A4             
2541   E3A4             
2541   E3A4             
2541   E3A4             
2541   E3A4~            			EXEEND_
2541   E3A4~            			EXEEND_
2541   E3A4             
2541   E39F             
2541   E39F 46          
2541   E3A0             
2541   E3A4             
2541   E3A4~            			EXEEND_
2541   E3A4~            			EXEEND_
2541   E3A4             
2542   E3A4             			JSRD_(add_bonus_m)				
2542   E3A4 57          
2542   E3A5 D5 F3       
2543   E3A7             			IFNER_($E0)		      ;BEQR_RAM$00 
2543   E3A7             
2543   E3A7             
2543   E3A7             
2543   E3A7 5A E0 00    
2543   E3AA~            			IFNER_($E0)		      ;BEQR_RAM$00 
2543   E3AA~            			IFNER_($E0)		      ;BEQR_RAM$00 
2543   E3AA~            			IFNER_($E0)		      ;BEQR_RAM$00 
2543   E3AA~            			IFNER_($E0)		      ;BEQR_RAM$00 
2543   E3AA~            			IFNER_($E0)		      ;BEQR_RAM$00 
2543   E3AA~            			IFNER_($E0)		      ;BEQR_RAM$00 
2543   E3AA             
2544   E3AA                   			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2544   E3AA             
2544   E3AA 14 00       
2545   E3AC                   			JSRR_(gatlin_sound)			
2545   E3AC~                  			JSRR_(gatlin_sound)			
2545   E3AC~                  			JSRR_(gatlin_sound)			
2545   E3AC             
2545   E3AC~                  			JSRR_(gatlin_sound)			
2545   E3AC~                  			JSRR_(gatlin_sound)			
2545   E3AC             
2545   E3AC             
2545   E3AC 90          
2545   E3AD 22          
2546   E3AE                   			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2546   E3AE             
2546   E3AE             
2546   E3AE             
2546   E3AE 5B F6 02 FF 
2546   E3B2~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2546   E3B2~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2546   E3B2~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2546   E3B2~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2546   E3B2~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2546   E3B2~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2546   E3B2             
2547   E3B2                         			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2547   E3B2             
2547   E3B2             
2547   E3B2             
2547   E3B2 5A 1B 00    
2547   E3B5~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2547   E3B5~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2547   E3B5~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2547   E3B5~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2547   E3B5~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2547   E3B5~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2547   E3B5             
2548   E3B5                               			JSRR_(minipf_done)			
2548   E3B5~                              			JSRR_(minipf_done)			
2548   E3B5~                              			JSRR_(minipf_done)			
2548   E3B5             
2548   E3B5~                              			JSRR_(minipf_done)			
2548   E3B5~                              			JSRR_(minipf_done)			
2548   E3B5             
2548   E3B5             
2548   E3B5 9F          
2548   E3B6 A6          
2549   E3B7                               			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2549   E3B7             
2549   E3B7 5B F0 4C    
2549   E3BA~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2549   E3BA~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2549   E3BA~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2549   E3BA~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2549   E3BA~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2549   E3BA~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2549   E3BA             
2550   E3BA                               			BITON_($41)				;Turn ON: Bit#01
2550   E3BA             
2550   E3BA 10 41       
2551   E3BC 5E A5 26                      			SWCLR_($A5),($26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
2552   E3BF                               			KILL_					;Remove This Thread
2552   E3BF 03          
2553   E3C0                               	      ENDIF_
2553   E3C0             
2553   E3C0             
2553   E3C0             
2553   E3C0             
2553   E3C0             
2553   E3C0~                              	      ENDIF_
2553   E3C0~                              	      ENDIF_
2553   E3C0             
2553   E3C0~                              	      ENDIF_
2553   E3C0~                              	      ENDIF_
2553   E3C0             
2553   E3B4             
2553   E3B4 0B          
2553   E3B5             
2553   E3B5             
2553   E3B5~                              	      ENDIF_
2553   E3B5~                              	      ENDIF_
2553   E3B5~                              	      ENDIF_
2553   E3B5~                              	      ENDIF_
2553   E3B5~                              	      ENDIF_
2553   E3B5             
2553   E3C0             
2553   E3C0~                              	      ENDIF_
2553   E3C0~                              	      ENDIF_
2553   E3C0             
2554   E3C0                         			SPEC_					;Award Special
2554   E3C0 05          
2555   E3C1                         			RCLR0_($02)				;Effect: Range #02
2555   E3C1             
2555   E3C1 19 02       
2556   E3C3                         		ENDIF_
2556   E3C3             
2556   E3C3             
2556   E3C3             
2556   E3C3             
2556   E3C3             
2556   E3C3~                        		ENDIF_
2556   E3C3~                        		ENDIF_
2556   E3C3             
2556   E3C3~                        		ENDIF_
2556   E3C3~                        		ENDIF_
2556   E3C3             
2556   E3B1             
2556   E3B1 11          
2556   E3B2             
2556   E3B2             
2556   E3B2~                        		ENDIF_
2556   E3B2~                        		ENDIF_
2556   E3B2~                        		ENDIF_
2556   E3B2~                        		ENDIF_
2556   E3B2~                        		ENDIF_
2556   E3B2             
2556   E3C3             
2556   E3C3~                        		ENDIF_
2556   E3C3~                        		ENDIF_
2556   E3C3             
2557   E3C3             gb_0E 			BNEA_($53,gb_41)		      ;BNEA_BIT#13 to gb_41
2557   E3C3 59 53       
2557   E3C5 E3 3A       
2558   E3C7                   			BITOFF_($53)			;Turn OFF: Bit#13
2558   E3C7             
2558   E3C7 11 53       
2559   E3C9                   			SLEEP_(32)
2559   E3C9~                  			SLEEP_(32)
2559   E3C9~                  			SLEEP_(32)
2559   E3C9             
2559   E3C9 53 20       
2559   E3CB             
2560   E3CB                   			JMPR_(gj_22)
2560   E3CB~                  			JMPR_(gj_22)
2560   E3CB~                  			JMPR_(gj_22)
2560   E3CB             
2560   E3CB~                  			JMPR_(gj_22)
2560   E3CB~                  			JMPR_(gj_22)
2560   E3CB             
2560   E3CB             
2560   E3CB 8F          
2560   E3CC 57          
2561   E3CD                   		ENDIF_
2561   E3CD             
2561   E3CD             
2561   E3CD             
2561   E3CD             
2561   E3CD             
2561   E3CD~                  		ENDIF_
2561   E3CD~                  		ENDIF_
2561   E3CD             
2561   E3CD~                  		ENDIF_
2561   E3CD~                  		ENDIF_
2561   E3CD             
2561   E3A9             
2561   E3A9 23          
2561   E3AA             
2561   E3AA             
2561   E3AA~                  		ENDIF_
2561   E3AA~                  		ENDIF_
2561   E3AA~                  		ENDIF_
2561   E3AA~                  		ENDIF_
2561   E3AA~                  		ENDIF_
2561   E3AA             
2561   E3CD             
2561   E3CD~                  		ENDIF_
2561   E3CD~                  		ENDIF_
2561   E3CD             
2562   E3CD                               ;mini playfield buzzer						
2563   E3CD                   		SSND_($02)				;Credit Sound
2563   E3CD             
2563   E3CD E2          
2563   E3CE~                  		SSND_($02)				;Credit Sound
2563   E3CE~                  		SSND_($02)				;Credit Sound
2563   E3CE~                  		SSND_($02)				;Credit Sound
2563   E3CE             
2564   E3CE             			;JSR_(buzz_on_inc)				
2565   E3CE             			;SLEEP_(12)
2566   E3CE             			;JSR_(buzz_off_dec)				
2567   E3CE             			;SLEEP_(20)
2568   E3CE             			;JSR_(buzz_on_inc)				
2569   E3CE             			;SLEEP_(12)
2570   E3CE             			;JSR_(buzz_off_dec)				
2571   E3CE             			JMPR_(gb_0E)	
2571   E3CE~            			JMPR_(gb_0E)	
2571   E3CE~            			JMPR_(gb_0E)	
2571   E3CE             
2571   E3CE~            			JMPR_(gb_0E)	
2571   E3CE~            			JMPR_(gb_0E)	
2571   E3CE             
2571   E3CE             
2571   E3CE 8F          
2571   E3CF F3          
2572   E3D0             
2573   E3D0             ;*************************************************************************
2574   E3D0             ;* Gatlin Gun Sound Effect
2575   E3D0             ;*************************************************************************					
2576   E3D0             gatlin_sound	BITONP2_(rega)			;Turn ON Lamp/Bit @RAM:00
2576   E3D0             
2576   E3D0 24 00       
2577   E3D2             			ADDRAM_(rega,$40)			;RAM$00+=$40
2577   E3D2~            			ADDRAM_(rega,$40)			;RAM$00+=$40
2577   E3D2~            			ADDRAM_(rega,$40)			;RAM$00+=$40
2577   E3D2             
2577   E3D2 B0 40       
2578   E3D4             			SETRAM_(regb,$0C)			;RAM$01=$0C
2578   E3D4~            			SETRAM_(regb,$0C)			;RAM$01=$0C
2578   E3D4~            			SETRAM_(regb,$0C)			;RAM$01=$0C
2578   E3D4             
2578   E3D4 C1 0C       
2579   E3D6             			BEGIN_
2579   E3D6             
2580   E3D6             				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2580   E3D6             
2580   E3D6             
2580   E3D6             
2580   E3D6 5AFDE064FE  
2580   E3DB~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2580   E3DB~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2580   E3DB~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2580   E3DB~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2580   E3DB~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2580   E3DB~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2580   E3DB             
2581   E3DB             	      			SSND_($02)				;Sound #02
2581   E3DB             
2581   E3DB E2          
2581   E3DC~            	      			SSND_($02)				;Sound #02
2581   E3DC~            	      			SSND_($02)				;Sound #02
2581   E3DC~            	      			SSND_($02)				;Sound #02
2581   E3DC             
2582   E3DC             	      		ELSE_			
2582   E3DC             
2582   E3DC             
2582   E3DC             
2582   E3DC             
2582   E3DA             
2582   E3DA             
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA             
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA~            	      		ELSE_			
2582   E3DA             
2582   E3DA             
2582   E3DA 03          
2582   E3DC             
2582   E3DC             
2582   E3DC~            	      		ELSE_			
2582   E3DC~            	      		ELSE_			
2582   E3DC             
2582   E3DC~            	      		ELSE_			
2582   E3DC~            	      		ELSE_			
2582   E3DC             
2582   E3DC             
2582   E3DC 80          
2582   E3DD 00          
2582   E3DE             
2582   E3DE             
2582   E3DE             
2582   E3DE~            	      		ELSE_			
2582   E3DE~            	      		ELSE_			
2582   E3DE             
2582   E3DE~            	      		ELSE_			
2582   E3DE~            	      		ELSE_			
2582   E3DE             
2583   E3DE             					SSND_($0B)				;Sound #0B
2583   E3DE             
2583   E3DE EB          
2583   E3DF~            					SSND_($0B)				;Sound #0B
2583   E3DF~            					SSND_($0B)				;Sound #0B
2583   E3DF~            					SSND_($0B)				;Sound #0B
2583   E3DF             
2584   E3DF             				ENDIF_
2584   E3DF             
2584   E3DF             
2584   E3DF             
2584   E3DF             
2584   E3DF             
2584   E3DF~            				ENDIF_
2584   E3DF~            				ENDIF_
2584   E3DF             
2584   E3DF~            				ENDIF_
2584   E3DF~            				ENDIF_
2584   E3DF             
2584   E3DD             
2584   E3DD 01          
2584   E3DE             
2584   E3DE             
2584   E3DE~            				ENDIF_
2584   E3DE~            				ENDIF_
2584   E3DE~            				ENDIF_
2584   E3DE~            				ENDIF_
2584   E3DE~            				ENDIF_
2584   E3DE             
2584   E3DF             
2584   E3DF~            				ENDIF_
2584   E3DF~            				ENDIF_
2584   E3DF             
2585   E3DF             				BITINVP2_(rega)			;Toggle Lamp/Bit @RAM:00
2585   E3DF             
2585   E3DF 26 00       
2586   E3E1             				SLEEP_(4)
2586   E3E1             
2586   E3E1 74          
2586   E3E2~            				SLEEP_(4)
2586   E3E2~            				SLEEP_(4)
2586   E3E2             
2587   E3E2             				ADDRAM_(regb,-1)			;RAM$01-=1
2587   E3E2~            				ADDRAM_(regb,-1)			;RAM$01-=1
2587   E3E2~            				ADDRAM_(regb,-1)			;RAM$01-=1
2587   E3E2             
2587   E3E2 B1 FF       
2588   E3E4             			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E4             
2588   E3E4 5BFCE100FE  
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9             
2588   E3E9             
2588   E3E9             
2588   E3E9             
2588   E3E9             
2588   E3E9             
2588   E3E9             
2588   E3E8             
2588   E3E8 ED          
2588   E3E9             
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9             
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2588   E3E9             
2589   E3E9             			ADDRAM_(rega,$C0)			;RAM$00+=$C0
2589   E3E9~            			ADDRAM_(rega,$C0)			;RAM$00+=$C0
2589   E3E9~            			ADDRAM_(rega,$C0)			;RAM$00+=$C0
2589   E3E9             
2589   E3E9 B0 C0       
2590   E3EB             			BITOFFP2_(rega)			;Turn OFF Lamp/Bit @RAM:00
2590   E3EB             
2590   E3EB 25 00       
2591   E3ED             			MRTS_					;Macro RTS, Save MRA,MRB
2591   E3ED 02          
2592   E3EE             
2593   E3EE             sw_upper_eject	BEQA_($FB,$F0,$F1,gb_1C)	;BEQR_(GAME || TILT) to gb_1C
2593   E3EE 58 FB F0 F1 
2593   E3F2 E3 50       
2594   E3F4             			BEQA_($FB,$FB,$FE,$F2,$F0,$10,$FA,$F3,$57,$5E,$4F,gb_0B)
2594   E3F4 58FBFBFEF2F0
2594   E3FA 10FAF3575E4F
2594   E400 E3 5C       
2595   E402             			;BEQR_(BIT#0F || ((BIT#1E && (!BIT#17)) || (LAMP#10(1_target) P $F0,$10))) to gb_0B
2596   E402             			BNEA_($41,eject_common)		      ;BNEA_BIT#01 to eject_common
2596   E402 59 41       
2596   E404 E3 05       
2597   E406             
2598   E406             ;*******************************************************
2599   E406             ;* Begin Multiball
2600   E406             ;*******************************************************			
2601   E406             mb_start		BITOFF_($41)			;Turn OFF: Bit#01
2601   E406             
2601   E406 11 41       
2602   E408             			RCLR0_($02,$0C)			;Effect: Range #02 Range #0C
2602   E408             
2602   E408 19 82 0C    
2603   E40B             			BITON_($DF,$9B,$D6,$5E)		;Turn ON: Bit#1F, Lamp#1B(special), Bit#16, Bit#1E
2603   E40B             
2603   E40B 10DF9BD65E  
2604   E410             			EXE_
2604   E410             
2604   E410 44          
2605   E411 CE 01 2E    			      ldx	#aud_game1			;Times Multiball has been achieved
2606   E414 BD F7 7F    			      jsr	ptrx_plus_1
2607   E417             			EXEEND_
2607   E417             
2607   E417             
2607   E417             
2607   E417             
2607   E417~            			EXEEND_
2607   E417~            			EXEEND_
2607   E417             
2607   E410             
2607   E410 48          
2607   E411             
2607   E417             
2607   E417~            			EXEEND_
2607   E417~            			EXEEND_
2607   E417             
2608   E417             			EXE_
2608   E417             
2608   E417 44          
2609   E418 CE 01 95    			      ldx	#adj_gameadjust1		;Get Multiball Timer
2610   E41B BD EF 63    			      jsr	cmosinc_b
2611   E41E C1 15       			      cmpb	#$15
2612   E420             			      ifcs
2612   E420             
2612   E420 24 FE       
2613   E422 C6 15       				      ldab	#$15
2614   E424             			      endif
2614   E424             
2614   E424             
2614   E424             
2614   E424             
2614   E424             
2614   E424~            			      endif
2614   E424~            			      endif
2614   E424             
2614   E424~            			      endif
2614   E424~            			      endif
2614   E424             
2614   E421             
2614   E421 02          
2614   E422             
2614   E422             
2614   E422~            			      endif
2614   E422~            			      endif
2614   E422~            			      endif
2614   E422             
2614   E424             
2614   E424~            			      endif
2614   E424~            			      endif
2614   E424             
2615   E424             			EXEEND_
2615   E424             
2615   E424             
2615   E424             
2615   E424             
2615   E424~            			EXEEND_
2615   E424~            			EXEEND_
2615   E424             
2615   E417             
2615   E417 4E          
2615   E418             
2615   E424             
2615   E424~            			EXEEND_
2615   E424~            			EXEEND_
2615   E424             
2616   E424             			RAMCPY_($0A,regb)
2616   E424             
2616   E424 51 A1       
2616   E426~            			RAMCPY_($0A,regb)
2616   E426~            			RAMCPY_($0A,regb)
2616   E426             
2617   E426             			BITOFF_($01)			;Turn OFF: Lamp#01(bip)
2617   E426             
2617   E426 11 01       
2618   E428             			BITFL_($06)				;Flash: Lamp#06(multiball_timer)
2618   E428             
2618   E428 13 06       
2619   E42A             			IFEQR_($F8,$08)		      ;BNER_SW#08
2619   E42A             
2619   E42A             
2619   E42A             
2619   E42A 5B F8 08 FF 
2619   E42E~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2619   E42E~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2619   E42E~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2619   E42E~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2619   E42E~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2619   E42E~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2619   E42E             
2620   E42E                   			POINTS_(1,10)     	;10 Points
2620   E42E 42          
2620   E42F             
2620   E42F~                  			POINTS_(1,10)     	;10 Points
2620   E42F~                  			POINTS_(1,10)     	;10 Points
2620   E42F             
2620   E42F             
2620   E42F 09          
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430~                  			POINTS_(1,10)     	;10 Points
2620   E430             
2620   E430             
2621   E430                   			JSR_(mb_fancy)			;Do the fancy fancy animation	
2621   E430 56          
2621   E431 D2 CB       
2622   E433                   		ENDIF_
2622   E433             
2622   E433             
2622   E433             
2622   E433             
2622   E433             
2622   E433~                  		ENDIF_
2622   E433~                  		ENDIF_
2622   E433             
2622   E433~                  		ENDIF_
2622   E433~                  		ENDIF_
2622   E433             
2622   E42D             
2622   E42D 05          
2622   E42E             
2622   E42E             
2622   E42E~                  		ENDIF_
2622   E42E~                  		ENDIF_
2622   E42E~                  		ENDIF_
2622   E42E~                  		ENDIF_
2622   E42E~                  		ENDIF_
2622   E42E             
2622   E433             
2622   E433~                  		ENDIF_
2622   E433~                  		ENDIF_
2622   E433             
2623   E433             			SOL_(dtleft_on,dtright_on)	;Turn ON Sol#4:dt_left Sol#5:dt_right		
2623   E433 32 63 64    
2624   E436             			EXE_
2624   E436             
2624   E436 44          
2625   E437 96 5E       			      ldaa	dmask_p3
2626   E439 8A 80       			      oraa	#$80
2627   E43B 97 5E       			      staa	dmask_p3
2628   E43D 96 5F       			      ldaa	dmask_p4
2629   E43F 8A 80       			      oraa	#$80
2630   E441 97 5F       			      staa	dmask_p4
2631   E443             			EXEEND_
2631   E443             
2631   E443             
2631   E443             
2631   E443             
2631   E443~            			EXEEND_
2631   E443~            			EXEEND_
2631   E443             
2631   E436             
2631   E436 4E          
2631   E437             
2631   E443             
2631   E443~            			EXEEND_
2631   E443~            			EXEEND_
2631   E443             
2632   E443             ;***********************************************************
2633   E443             ;* NOTE: Falls through from above!
2634   E443             ;*
2635   E443             ;***********************************************************
2636   E443             mb_restart		PRI_($B1)				;Priority=#B1
2636   E443 52 B1       
2637   E445             			BITON_($5E)				;Turn ON: Bit#1E
2637   E445             
2637   E445 10 5E       
2638   E447             			BITOFF_($2C)			;Turn OFF: Lamp#2C(lock)
2638   E447             
2638   E447 11 2C       
2639   E449             			REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2639   E449 55 F8 60    
2640   E44C             			REMTHREADS_($F8,$B0)		;Remove Multiple Threads Based on Priority
2640   E44C 55 F8 B0    
2641   E44F             			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2641   E44F             
2641   E44F 5A F8 08 09 
2641   E453~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2641   E453~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2641   E453~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2641   E453~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2641   E453~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2641   E453~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2641   E453             
2642   E453             			EXE_
2642   E453             
2642   E453 44          
2643   E454             			      NEWTHREAD(pf_entry_cpu)
2643   E454 CE D1 F8    
2643   E457 BD EA C4    
2644   E45A             			EXEEND_
2644   E45A             
2644   E45A             
2644   E45A             
2644   E45A             
2644   E45A~            			EXEEND_
2644   E45A~            			EXEEND_
2644   E45A             
2644   E453             
2644   E453 48          
2644   E454             
2644   E45A             
2644   E45A~            			EXEEND_
2644   E45A~            			EXEEND_
2644   E45A             
2645   E45A             			;Start Drumbeat here
2646   E45A             			;SETRAM_(rega,$0E)
2647   E45A             			;JSRD_(ext_snd)
2648   E45A             			;
2649   E45A             			JMPR_(mb_nopause)
2649   E45A~            			JMPR_(mb_nopause)
2649   E45A~            			JMPR_(mb_nopause)
2649   E45A             
2649   E45A~            			JMPR_(mb_nopause)
2649   E45A~            			JMPR_(mb_nopause)
2649   E45A             
2649   E45A             
2649   E45A 80          
2649   E45B 2E          
2650   E45C             ;******************************************************
2651   E45C             ;* Ball Drained, pause multiball timer for a bit...
2652   E45C             ;* this will start the timer timout process where the 
2653   E45C             ;* counter is paused for a bit and then starts going
2654   E45C             ;* again if the player doesn't shoot the ball.
2655   E45C             ;******************************************************						
2656   E45C             mb_pause		SSND_($1C)				;Kill all BG Sound
2656   E45C             
2656   E45C FC          
2656   E45D~            mb_pause		SSND_($1C)				;Kill all BG Sound
2656   E45D~            mb_pause		SSND_($1C)				;Kill all BG Sound
2656   E45D~            mb_pause		SSND_($1C)				;Kill all BG Sound
2656   E45D             
2657   E45D             			JSRR_(show_score)			
2657   E45D~            			JSRR_(show_score)			
2657   E45D~            			JSRR_(show_score)			
2657   E45D             
2657   E45D~            			JSRR_(show_score)			
2657   E45D~            			JSRR_(show_score)			
2657   E45D             
2657   E45D             
2657   E45D 90          
2657   E45E D9          
2658   E45F             			SOL_(trough_on)   		;Turn ON Sol#2:trough
2658   E45F 31 41       
2659   E461             			EXE_
2659   E461             
2659   E461 44          
2660   E462 96 0A       			      ldaa	game_ram_a
2661   E464 97 59       			      staa	mbip_b1
2662   E466             			EXEEND_
2662   E466             
2662   E466             
2662   E466             
2662   E466             
2662   E466~            			EXEEND_
2662   E466~            			EXEEND_
2662   E466             
2662   E461             
2662   E461 46          
2662   E462             
2662   E466             
2662   E466~            			EXEEND_
2662   E466~            			EXEEND_
2662   E466             
2663   E466             			SLEEP_(80)
2663   E466~            			SLEEP_(80)
2663   E466~            			SLEEP_(80)
2663   E466             
2663   E466 53 50       
2663   E468             
2664   E468 5E 88 09    			SWCLR_($08,$09)			;Clear Sw#: $08(right_trough) $09(left_trough)
2665   E46B             			SETRAM_(regb,$16)			;RAM$01=$16
2665   E46B~            			SETRAM_(regb,$16)			;RAM$01=$16
2665   E46B~            			SETRAM_(regb,$16)			;RAM$01=$16
2665   E46B             
2665   E46B C1 16       
2666   E46D             			BEGIN_
2666   E46D             
2667   E46D             				EXE_
2667   E46D             
2667   E46D 44          
2668   E46E 86 FF       				      ldaa	#$FF
2669   E470 97 59       				      staa	mbip_b1
2670   E472             				EXEEND_
2670   E472             
2670   E472             
2670   E472             
2670   E472             
2670   E472~            				EXEEND_
2670   E472~            				EXEEND_
2670   E472             
2670   E46D             
2670   E46D 46          
2670   E46E             
2670   E472             
2670   E472~            				EXEEND_
2670   E472~            				EXEEND_
2670   E472             
2671   E472 61          				SLEEPI_(regb)			;Delay RAM$01
2672   E473             				EXE_
2672   E473             
2672   E473 44          
2673   E474 96 0A       				      ldaa	game_ram_a
2674   E476 97 59       				      staa	mbip_b1
2675   E478             				EXEEND_
2675   E478             
2675   E478             
2675   E478             
2675   E478             
2675   E478~            				EXEEND_
2675   E478~            				EXEEND_
2675   E478             
2675   E473             
2675   E473 46          
2675   E474             
2675   E478             
2675   E478~            				EXEEND_
2675   E478~            				EXEEND_
2675   E478             
2676   E478             				;make a thud
2677   E478             				SSND_($00)				;Sound #00
2677   E478             
2677   E478 E0          
2677   E479~            				SSND_($00)				;Sound #00
2677   E479~            				SSND_($00)				;Sound #00
2677   E479~            				SSND_($00)				;Sound #00
2677   E479             
2678   E479 61          				SLEEPI_(regb)			;Delay RAM$01
2679   E47A             				EXE_
2679   E47A             
2679   E47A 44          
2680   E47B 5A          				      decb	
2681   E47C 96 D6       				      ldaa	flag_timer_bip
2682   E47E             				EXEEND_
2682   E47E             
2682   E47E             
2682   E47E             
2682   E47E             
2682   E47E~            				EXEEND_
2682   E47E~            				EXEEND_
2682   E47E             
2682   E47A             
2682   E47A 45          
2682   E47B             
2682   E47E             
2682   E47E~            				EXEEND_
2682   E47E~            				EXEEND_
2682   E47E             
2683   E47E             			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E47E             
2683   E47E 5BFBFDE000FC
2683   E484 E100FA
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487             
2683   E487             
2683   E487             
2683   E487             
2683   E487             
2683   E487             
2683   E487             
2683   E486             
2683   E486 E6          
2683   E487             
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487             
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2683   E487             
2684   E487             			;switch to the background drums here...
2685   E487             			REMTHREADS_($F8,$E0)			;Kill the BG Sound thread
2685   E487 55 F8 E0    
2686   E48A             mb_nopause		SETRAM_(rega,$0E)
2686   E48A~            mb_nopause		SETRAM_(rega,$0E)
2686   E48A~            mb_nopause		SETRAM_(rega,$0E)
2686   E48A             
2686   E48A C0 0E       
2687   E48C             			JSRD_(ext_snd)
2687   E48C 57          
2687   E48D D9 4D       
2688   E48F             			;BEGIN_
2689   E48F             			;	SETRAM_(regb,$05)			;RAM$01=$05
2690   E48F             			;	SSND_($18)				;Sound #18
2691   E48F             mb_loop		;	PRI_($B1)				;Priority=#B1
2692   E48F             			;	ADDRAM_(regb,-1)			;RAM$01-=1
2693   E48F             			;NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2694   E48F             			;SSND_($00)				;Sound #00
2695   E48F             			;IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2696   E48F             			;	SSND_($19)				;Sound #19
2697   E48F             			;ENDIF_
2698   E48F             	            RAMCPY_(rega,$0A)
2698   E48F             
2698   E48F 51 0A       
2698   E491~            	            RAMCPY_(rega,$0A)
2698   E491~            	            RAMCPY_(rega,$0A)
2698   E491             
2699   E491             			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2699   E491             
2699   E491             
2699   E491             
2699   E491 5AFEF2F010FD
2699   E497~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2699   E497~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2699   E497~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2699   E497~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2699   E497~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2699   E497~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2699   E497             
2700   E497                   			EXE_
2700   E497             
2700   E497 44          
2701   E498 8B 99             			      adda	#$99
2702   E49A 19                			      daa	
2703   E49B 97 0A             			      staa	game_ram_a			;De-increment Mutiball Timer
2704   E49D                   			EXEEND_
2704   E49D             
2704   E49D             
2704   E49D             
2704   E49D             
2704   E49D~                  			EXEEND_
2704   E49D~                  			EXEEND_
2704   E49D             
2704   E497             
2704   E497 47          
2704   E498             
2704   E49D             
2704   E49D~                  			EXEEND_
2704   E49D~                  			EXEEND_
2704   E49D             
2705   E49D                   		ENDIF_
2705   E49D             
2705   E49D             
2705   E49D             
2705   E49D             
2705   E49D             
2705   E49D~                  		ENDIF_
2705   E49D~                  		ENDIF_
2705   E49D             
2705   E49D~                  		ENDIF_
2705   E49D~                  		ENDIF_
2705   E49D             
2705   E496             
2705   E496 06          
2705   E497             
2705   E497             
2705   E497~                  		ENDIF_
2705   E497~                  		ENDIF_
2705   E497~                  		ENDIF_
2705   E497~                  		ENDIF_
2705   E497~                  		ENDIF_
2705   E497             
2705   E49D             
2705   E49D~                  		ENDIF_
2705   E49D~                  		ENDIF_
2705   E49D             
2706   E49D             			EXE_
2706   E49D             
2706   E49D 44          
2707   E49E 97 59       			      staa	mbip_b1
2708   E4A0             			EXEEND_
2708   E4A0             
2708   E4A0             
2708   E4A0             
2708   E4A0             
2708   E4A0~            			EXEEND_
2708   E4A0~            			EXEEND_
2708   E4A0             
2708   E49D             
2708   E49D 44          
2708   E49E             
2708   E4A0             
2708   E4A0~            			EXEEND_
2708   E4A0~            			EXEEND_
2708   E4A0             
2709   E4A0             			;are we out of time yet?
2710   E4A0             			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2710   E4A0             
2710   E4A0             
2710   E4A0             
2710   E4A0 5AFCEA00FE  
2710   E4A5~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2710   E4A5~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2710   E4A5~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2710   E4A5~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2710   E4A5~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2710   E4A5~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2710   E4A5             
2711   E4A5             			      ;no, keep going
2712   E4A5                   			SLEEP_(32)
2712   E4A5~                  			SLEEP_(32)
2712   E4A5~                  			SLEEP_(32)
2712   E4A5             
2712   E4A5 53 20       
2712   E4A7             
2713   E4A7                   			EXE_
2713   E4A7             
2713   E4A7 44          
2714   E4A8 86 FF             			      ldaa	#$FF
2715   E4AA 97 59             			      staa	mbip_b1
2716   E4AC                   			EXEEND_
2716   E4AC             
2716   E4AC             
2716   E4AC             
2716   E4AC             
2716   E4AC~                  			EXEEND_
2716   E4AC~                  			EXEEND_
2716   E4AC             
2716   E4A7             
2716   E4A7 46          
2716   E4A8             
2716   E4AC             
2716   E4AC~                  			EXEEND_
2716   E4AC~                  			EXEEND_
2716   E4AC             
2717   E4AC                   			SLEEP_(32)
2717   E4AC~                  			SLEEP_(32)
2717   E4AC~                  			SLEEP_(32)
2717   E4AC             
2717   E4AC 53 20       
2717   E4AE             
2718   E4AE                   			JMPR_(mb_loop)
2718   E4AE~                  			JMPR_(mb_loop)
2718   E4AE~                  			JMPR_(mb_loop)
2718   E4AE             
2718   E4AE~                  			JMPR_(mb_loop)
2718   E4AE~                  			JMPR_(mb_loop)
2718   E4AE             
2718   E4AE             
2718   E4AE 8F          
2718   E4AF DF          
2719   E4B0             			ENDIF_	
2719   E4B0             
2719   E4B0             
2719   E4B0             
2719   E4B0             
2719   E4B0             
2719   E4B0~            			ENDIF_	
2719   E4B0~            			ENDIF_	
2719   E4B0             
2719   E4B0~            			ENDIF_	
2719   E4B0~            			ENDIF_	
2719   E4B0             
2719   E4A4             
2719   E4A4 0B          
2719   E4A5             
2719   E4A5             
2719   E4A5~            			ENDIF_	
2719   E4A5~            			ENDIF_	
2719   E4A5~            			ENDIF_	
2719   E4A5~            			ENDIF_	
2719   E4A5~            			ENDIF_	
2719   E4A5             
2719   E4B0             
2719   E4B0~            			ENDIF_	
2719   E4B0~            			ENDIF_	
2719   E4B0             
2720   E4B0             			;here if multiball timer has reached 0	
2721   E4B0             			IFEQR_($5E)			      ;BNER_BIT#1E
2721   E4B0             
2721   E4B0             
2721   E4B0             
2721   E4B0 5B 5E 00    
2721   E4B3~            			IFEQR_($5E)			      ;BNER_BIT#1E
2721   E4B3~            			IFEQR_($5E)			      ;BNER_BIT#1E
2721   E4B3~            			IFEQR_($5E)			      ;BNER_BIT#1E
2721   E4B3~            			IFEQR_($5E)			      ;BNER_BIT#1E
2721   E4B3~            			IFEQR_($5E)			      ;BNER_BIT#1E
2721   E4B3~            			IFEQR_($5E)			      ;BNER_BIT#1E
2721   E4B3             
2722   E4B3             			      BITON_($50)				;Turn ON: Bit#10
2722   E4B3             
2722   E4B3 10 50       
2723   E4B5             			ENDIF_
2723   E4B5             
2723   E4B5             
2723   E4B5             
2723   E4B5             
2723   E4B5             
2723   E4B5~            			ENDIF_
2723   E4B5~            			ENDIF_
2723   E4B5             
2723   E4B5~            			ENDIF_
2723   E4B5~            			ENDIF_
2723   E4B5             
2723   E4B2             
2723   E4B2 02          
2723   E4B3             
2723   E4B3             
2723   E4B3~            			ENDIF_
2723   E4B3~            			ENDIF_
2723   E4B3~            			ENDIF_
2723   E4B3~            			ENDIF_
2723   E4B3~            			ENDIF_
2723   E4B3             
2723   E4B5             
2723   E4B5~            			ENDIF_
2723   E4B5~            			ENDIF_
2723   E4B5             
2724   E4B5             			JSRR_(mb_end_disp)			
2724   E4B5~            			JSRR_(mb_end_disp)			
2724   E4B5~            			JSRR_(mb_end_disp)			
2724   E4B5             
2724   E4B5~            			JSRR_(mb_end_disp)			
2724   E4B5~            			JSRR_(mb_end_disp)			
2724   E4B5             
2724   E4B5             
2724   E4B5 90          
2724   E4B6 18          
2725   E4B7             			JSRR_(reset_dt)			
2725   E4B7~            			JSRR_(reset_dt)			
2725   E4B7~            			JSRR_(reset_dt)			
2725   E4B7             
2725   E4B7~            			JSRR_(reset_dt)			
2725   E4B7~            			JSRR_(reset_dt)			
2725   E4B7             
2725   E4B7             
2725   E4B7 90          
2725   E4B8 96          
2726   E4B9             			IFEQR_($F8,$08)		      ;BNER_SW#08
2726   E4B9             
2726   E4B9             
2726   E4B9             
2726   E4B9 5B F8 08 FF 
2726   E4BD~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2726   E4BD~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2726   E4BD~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2726   E4BD~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2726   E4BD~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2726   E4BD~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2726   E4BD             
2727   E4BD             			      JSRR_(add_drainshield)
2727   E4BD~            			      JSRR_(add_drainshield)
2727   E4BD~            			      JSRR_(add_drainshield)
2727   E4BD             
2727   E4BD~            			      JSRR_(add_drainshield)
2727   E4BD~            			      JSRR_(add_drainshield)
2727   E4BD             
2727   E4BD             
2727   E4BD 9D          
2727   E4BE 56          
2728   E4BF             			ENDIF_			
2728   E4BF             
2728   E4BF             
2728   E4BF             
2728   E4BF             
2728   E4BF             
2728   E4BF~            			ENDIF_			
2728   E4BF~            			ENDIF_			
2728   E4BF             
2728   E4BF~            			ENDIF_			
2728   E4BF~            			ENDIF_			
2728   E4BF             
2728   E4BC             
2728   E4BC 02          
2728   E4BD             
2728   E4BD             
2728   E4BD~            			ENDIF_			
2728   E4BD~            			ENDIF_			
2728   E4BD~            			ENDIF_			
2728   E4BD~            			ENDIF_			
2728   E4BD~            			ENDIF_			
2728   E4BD             
2728   E4BF             
2728   E4BF~            			ENDIF_			
2728   E4BF~            			ENDIF_			
2728   E4BF             
2729   E4BF             			PRI_($08)				;Priority=#08
2729   E4BF 52 08       
2730   E4C1             			;JSR_(buzz_on_inc)				
2731   E4C1             			;SLEEP_(128)
2732   E4C1             			;JSR_(buzz_off_dec)
2733   E4C1             			SSND_($1B)				;Start normal background thread	
2733   E4C1             
2733   E4C1 FB          
2733   E4C2~            			SSND_($1B)				;Start normal background thread	
2733   E4C2~            			SSND_($1B)				;Start normal background thread	
2733   E4C2~            			SSND_($1B)				;Start normal background thread	
2733   E4C2             
2734   E4C2             			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
2734   E4C2             
2734   E4C2             
2734   E4C2             
2734   E4C2 5AFCD901FE  
2734   E4C7~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
2734   E4C7~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
2734   E4C7~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
2734   E4C7~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
2734   E4C7~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
2734   E4C7~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
2734   E4C7             
2735   E4C7                   			EXE_
2735   E4C7             
2735   E4C7 44          
2736   E4C8                   			      NEWTHREAD(bg_snd)			;Start the BG Sound
2736   E4C8 CE D5 BC    
2736   E4CB BD EA C4    
2737   E4CE                   			EXEEND_
2737   E4CE             
2737   E4CE             
2737   E4CE             
2737   E4CE             
2737   E4CE~                  			EXEEND_
2737   E4CE~                  			EXEEND_
2737   E4CE             
2737   E4C7             
2737   E4C7 48          
2737   E4C8             
2737   E4CE             
2737   E4CE~                  			EXEEND_
2737   E4CE~                  			EXEEND_
2737   E4CE             
2738   E4CE                   		ENDIF_			
2738   E4CE             
2738   E4CE             
2738   E4CE             
2738   E4CE             
2738   E4CE             
2738   E4CE~                  		ENDIF_			
2738   E4CE~                  		ENDIF_			
2738   E4CE             
2738   E4CE~                  		ENDIF_			
2738   E4CE~                  		ENDIF_			
2738   E4CE             
2738   E4C6             
2738   E4C6 07          
2738   E4C7             
2738   E4C7             
2738   E4C7~                  		ENDIF_			
2738   E4C7~                  		ENDIF_			
2738   E4C7~                  		ENDIF_			
2738   E4C7~                  		ENDIF_			
2738   E4C7~                  		ENDIF_			
2738   E4C7             
2738   E4CE             
2738   E4CE~                  		ENDIF_			
2738   E4CE~                  		ENDIF_			
2738   E4CE             
2739   E4CE             			KILL_					;Remove This Thread
2739   E4CE 03          
2740   E4CF             
2741   E4CF             ;*****************************************************************
2742   E4CF             ;* This subroutine takes care of setting the multiball mode lamps
2743   E4CF             ;* back to normal and putting the player score masks back as well.
2744   E4CF             ;*****************************************************************
2745   E4CF             mb_end_disp		BITOFF_($DF,$DE,$9B,$86,$2C)	;Turn OFF: Bit#1F, Bit#1E, Lamp#1B(special), Lamp#06(multiball_timer), Lamp#2C(lock)
2745   E4CF             
2745   E4CF 11DFDE9B862C
2746   E4D5             			BITON_($01)				;Turn ON: Lamp#01(bip)
2746   E4D5             
2746   E4D5 10 01       
2747   E4D7             			REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2747   E4D7 55 F8 60    
2748   E4DA             			RCLR0_($02)				;Effect: Range #02
2748   E4DA             
2748   E4DA 19 02       
2749   E4DC             			EXE_
2749   E4DC             
2749   E4DC 44          
2750   E4DD 96 5E       			      ldaa	dmask_p3
2751   E4DF 84 7F       			      anda	#$7F
2752   E4E1 97 5E       			      staa	dmask_p3
2753   E4E3 96 5F       			      ldaa	dmask_p4
2754   E4E5 84 7F       			      anda	#$7F
2755   E4E7 97 5F       			      staa	dmask_p4
2756   E4E9             			EXEEND_
2756   E4E9             
2756   E4E9             
2756   E4E9             
2756   E4E9             
2756   E4E9~            			EXEEND_
2756   E4E9~            			EXEEND_
2756   E4E9             
2756   E4DC             
2756   E4DC 4E          
2756   E4DD             
2756   E4E9             
2756   E4E9~            			EXEEND_
2756   E4E9~            			EXEEND_
2756   E4E9             
2757   E4E9             			MRTS_					;Macro RTS, Save MRA,MRB
2757   E4E9 02          
2758   E4EA             
2759   E4EA             sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2759   E4EA             
2759   E4EA             
2759   E4EA             
2759   E4EA 5BFA5EF357FD
2759   E4F0~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2759   E4F0~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2759   E4F0~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2759   E4F0~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2759   E4F0~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2759   E4F0~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2759   E4F0             
2760   E4F0                   			SOL_(trough_on)              	;Turn ON Sol#2:trough
2760   E4F0 31 41       
2761   E4F2                   			SLEEP_(96)
2761   E4F2~                  			SLEEP_(96)
2761   E4F2~                  			SLEEP_(96)
2761   E4F2             
2761   E4F2 53 60       
2761   E4F4             
2762   E4F4 5E 08             			SWCLR_($08)				;Clear Sw#: $08(right_trough)
2763   E4F6                   			KILL_					;Remove This Thread
2763   E4F6 03          
2764   E4F7                               ENDIF_
2764   E4F7             
2764   E4F7             
2764   E4F7             
2764   E4F7             
2764   E4F7             
2764   E4F7~                              ENDIF_
2764   E4F7~                              ENDIF_
2764   E4F7             
2764   E4F7~                              ENDIF_
2764   E4F7~                              ENDIF_
2764   E4F7             
2764   E4EF             
2764   E4EF 07          
2764   E4F0             
2764   E4F0             
2764   E4F0~                              ENDIF_
2764   E4F0~                              ENDIF_
2764   E4F0~                              ENDIF_
2764   E4F0~                              ENDIF_
2764   E4F0~                              ENDIF_
2764   E4F0             
2764   E4F7             
2764   E4F7~                              ENDIF_
2764   E4F7~                              ENDIF_
2764   E4F7             
2765   E4F7             			IFEQR_($5F)			      ;BNER_BIT#1F 
2765   E4F7             
2765   E4F7             
2765   E4F7             
2765   E4F7 5B 5F 00    
2765   E4FA~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2765   E4FA~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2765   E4FA~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2765   E4FA~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2765   E4FA~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2765   E4FA~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2765   E4FA             
2766   E4FA             			      REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2766   E4FA 55 F8 60    
2767   E4FD 5C          			      JMPD_(lock_enable)			
2767   E4FE D7 15       
2768   E500                               ENDIF_
2768   E500             
2768   E500             
2768   E500             
2768   E500             
2768   E500             
2768   E500~                              ENDIF_
2768   E500~                              ENDIF_
2768   E500             
2768   E500~                              ENDIF_
2768   E500~                              ENDIF_
2768   E500             
2768   E4F9             
2768   E4F9 06          
2768   E4FA             
2768   E4FA             
2768   E4FA~                              ENDIF_
2768   E4FA~                              ENDIF_
2768   E4FA~                              ENDIF_
2768   E4FA~                              ENDIF_
2768   E4FA~                              ENDIF_
2768   E4FA             
2768   E500             
2768   E500~                              ENDIF_
2768   E500~                              ENDIF_
2768   E500             
2769   E500             			JSRR_(add_drainshield)			
2769   E500~            			JSRR_(add_drainshield)			
2769   E500~            			JSRR_(add_drainshield)			
2769   E500             
2769   E500~            			JSRR_(add_drainshield)			
2769   E500~            			JSRR_(add_drainshield)			
2769   E500             
2769   E500             
2769   E500 9D          
2769   E501 13          
2770   E502             			KILL_					;Remove This Thread
2770   E502 03          
2771   E503             
2772   E503             sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2772   E503             
2772   E503             
2772   E503             
2772   E503 5BFAF340FAF8
2772   E509 08F34FF9
2772   E50D~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2772   E50D~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2772   E50D~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2772   E50D~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2772   E50D~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2772   E50D~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2772   E50D             
2773   E50D                                     ;BNER_(((!BIT#0F) && SW#08) && (!BIT#00))
2774   E50D                   			IFEQR_($5F)			      ;BNER_BIT#1F 
2774   E50D             
2774   E50D             
2774   E50D             
2774   E50D 5B 5F 00    
2774   E510~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2774   E510~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2774   E510~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2774   E510~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2774   E510~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2774   E510~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2774   E510             
2775   E510                   			      BITON_($57)				;Turn ON: Bit#17
2775   E510             
2775   E510 10 57       
2776   E512                   			      JMPR_(mb_restart)
2776   E512~                  			      JMPR_(mb_restart)
2776   E512~                  			      JMPR_(mb_restart)
2776   E512             
2776   E512~                  			      JMPR_(mb_restart)
2776   E512~                  			      JMPR_(mb_restart)
2776   E512             
2776   E512             
2776   E512 8F          
2776   E513 2F          
2777   E514                   			ENDIF_			
2777   E514             
2777   E514             
2777   E514             
2777   E514             
2777   E514             
2777   E514~                  			ENDIF_			
2777   E514~                  			ENDIF_			
2777   E514             
2777   E514~                  			ENDIF_			
2777   E514~                  			ENDIF_			
2777   E514             
2777   E50F             
2777   E50F 04          
2777   E510             
2777   E510             
2777   E510~                  			ENDIF_			
2777   E510~                  			ENDIF_			
2777   E510~                  			ENDIF_			
2777   E510~                  			ENDIF_			
2777   E510~                  			ENDIF_			
2777   E510             
2777   E514             
2777   E514~                  			ENDIF_			
2777   E514~                  			ENDIF_			
2777   E514             
2778   E514                   			IFEQR_($66)				;BNER_BIT#26
2778   E514             
2778   E514             
2778   E514             
2778   E514 5B 66 00    
2778   E517~                  			IFEQR_($66)				;BNER_BIT#26
2778   E517~                  			IFEQR_($66)				;BNER_BIT#26
2778   E517~                  			IFEQR_($66)				;BNER_BIT#26
2778   E517~                  			IFEQR_($66)				;BNER_BIT#26
2778   E517~                  			IFEQR_($66)				;BNER_BIT#26
2778   E517~                  			IFEQR_($66)				;BNER_BIT#26
2778   E517             
2779   E517             	      			JSRR_(reset_dt)			
2779   E517~            	      			JSRR_(reset_dt)			
2779   E517~            	      			JSRR_(reset_dt)			
2779   E517             
2779   E517~            	      			JSRR_(reset_dt)			
2779   E517~            	      			JSRR_(reset_dt)			
2779   E517             
2779   E517             
2779   E517 90          
2779   E518 36          
2780   E519             	      			SOL_(flippers_off)            ;Turn OFF Sol#24:flippers
2780   E519 31 18       
2781   E51B             	      			EXE_
2781   E51B             
2781   E51B 44          
2782   E51C 7F 00 C8    	      			      clr	flag_tilt
2783   E51F             	      			EXEEND_
2783   E51F             
2783   E51F             
2783   E51F             
2783   E51F             
2783   E51F~            	      			EXEEND_
2783   E51F~            	      			EXEEND_
2783   E51F             
2783   E51B             
2783   E51B 45          
2783   E51C             
2783   E51F             
2783   E51F~            	      			EXEEND_
2783   E51F~            	      			EXEEND_
2783   E51F             
2784   E51F             	      			BITON_($67)				;Turn ON: Bit#27
2784   E51F             
2784   E51F 10 67       
2785   E521             	      			JSR_(gi_on_dec)			
2785   E521 56          
2785   E522 D3 64       
2786   E524             gb_5D	 				JSRR_(show_score)			
2786   E524~            gb_5D	 				JSRR_(show_score)			
2786   E524~            gb_5D	 				JSRR_(show_score)			
2786   E524             
2786   E524~            gb_5D	 				JSRR_(show_score)			
2786   E524~            gb_5D	 				JSRR_(show_score)			
2786   E524             
2786   E524             
2786   E524 90          
2786   E525 12          
2787   E526 5F          	      			JMP_(trough_kill)
2787   E527 D5 B9       
2788   E529             	      		ENDIF_				
2788   E529             
2788   E529             
2788   E529             
2788   E529             
2788   E529             
2788   E529~            	      		ENDIF_				
2788   E529~            	      		ENDIF_				
2788   E529             
2788   E529~            	      		ENDIF_				
2788   E529~            	      		ENDIF_				
2788   E529             
2788   E516             
2788   E516 12          
2788   E517             
2788   E517             
2788   E517~            	      		ENDIF_				
2788   E517~            	      		ENDIF_				
2788   E517~            	      		ENDIF_				
2788   E517~            	      		ENDIF_				
2788   E517~            	      		ENDIF_				
2788   E517             
2788   E529             
2788   E529~            	      		ENDIF_				
2788   E529~            	      		ENDIF_				
2788   E529             
2789   E529             	 		      IFEQR_($F0)			      ;BNER_TILT
2789   E529             
2789   E529             
2789   E529             
2789   E529 5B F0 00    
2789   E52C~            	 		      IFEQR_($F0)			      ;BNER_TILT
2789   E52C~            	 		      IFEQR_($F0)			      ;BNER_TILT
2789   E52C~            	 		      IFEQR_($F0)			      ;BNER_TILT
2789   E52C~            	 		      IFEQR_($F0)			      ;BNER_TILT
2789   E52C~            	 		      IFEQR_($F0)			      ;BNER_TILT
2789   E52C~            	 		      IFEQR_($F0)			      ;BNER_TILT
2789   E52C             
2790   E52C                         			EXE_
2790   E52C             
2790   E52C 44          
2791   E52D 7A 00 CA                			      dec	flag_bonusball
2792   E530                         			EXEEND_
2792   E530             
2792   E530             
2792   E530             
2792   E530             
2792   E530~                        			EXEEND_
2792   E530~                        			EXEEND_
2792   E530             
2792   E52C             
2792   E52C 45          
2792   E52D             
2792   E530             
2792   E530~                        			EXEEND_
2792   E530~                        			EXEEND_
2792   E530             
2793   E530                         	      ENDIF_
2793   E530             
2793   E530             
2793   E530             
2793   E530             
2793   E530             
2793   E530~                        	      ENDIF_
2793   E530~                        	      ENDIF_
2793   E530             
2793   E530~                        	      ENDIF_
2793   E530~                        	      ENDIF_
2793   E530             
2793   E52B             
2793   E52B 04          
2793   E52C             
2793   E52C             
2793   E52C~                        	      ENDIF_
2793   E52C~                        	      ENDIF_
2793   E52C~                        	      ENDIF_
2793   E52C~                        	      ENDIF_
2793   E52C~                        	      ENDIF_
2793   E52C             
2793   E530             
2793   E530~                        	      ENDIF_
2793   E530~                        	      ENDIF_
2793   E530             
2794   E530                   			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2794   E530             
2794   E530 5B 55 F1    
2794   E533~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2794   E533~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2794   E533~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2794   E533~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2794   E533~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2794   E533~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2794   E533             
2795   E533                   			BITON_($4F)				;Turn ON: Bit#0F
2795   E533             
2795   E533 10 4F       
2796   E535 5C                			JMPD_(outhole_main)		
2796   E536 F9 AB       
2797   E538                   
2798   E538             show_score 			JSRD_(cpdisp_show)			
2798   E538 57          
2798   E539 D7 98       
2799   E53B                   			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
2799   E53B 55 F8 D0    
2800   E53E                   			BITOFF_($55)			;Turn OFF: Bit#15
2800   E53E             
2800   E53E 11 55       
2801   E540                   			EXE_
2801   E540             
2801   E540 44          
2802   E541 96 D6             			      ldaa	flag_timer_bip
2803   E543                   			      ifne
2803   E543             
2803   E543 27 FE       
2804   E545                   				      NEWTHREAD(player_ready)
2804   E545 CE F8 DD    
2804   E548 BD EA C4    
2805   E54B 7F 00 D6          				      clr	flag_timer_bip
2806   E54E                   			      endif
2806   E54E             
2806   E54E             
2806   E54E             
2806   E54E             
2806   E54E             
2806   E54E~                  			      endif
2806   E54E~                  			      endif
2806   E54E             
2806   E54E~                  			      endif
2806   E54E~                  			      endif
2806   E54E             
2806   E544             
2806   E544 09          
2806   E545             
2806   E545             
2806   E545~                  			      endif
2806   E545~                  			      endif
2806   E545~                  			      endif
2806   E545             
2806   E54E             
2806   E54E~                  			      endif
2806   E54E~                  			      endif
2806   E54E             
2807   E54E                   			EXEEND_
2807   E54E             
2807   E54E             
2807   E54E             
2807   E54E             
2807   E54E~                  			EXEEND_
2807   E54E~                  			EXEEND_
2807   E54E             
2807   E540             
2807   E540 4F          
2807   E541             
2807   E54E             
2807   E54E~                  			EXEEND_
2807   E54E~                  			EXEEND_
2807   E54E             
2808   E54E                   			MRTS_					;Macro RTS, Save MRA,MRB
2808   E54E 02          
2809   E54F                   
2810   E54F             reset_dt 			REMTHREADS_($F8,$70)		;Remove Multiple Threads Based on Priority
2810   E54F 55 F8 70    
2811   E552                   			REMTHREADS_($F8,$80)		;Remove Multiple Threads Based on Priority
2811   E552 55 F8 80    
2812   E555                   			SOL_(dtleft_on,dtright_on)			
2812   E555 32 63 64    
2813   E558                   			                              ;Turn ON Sol#3:dt_l Sol#4:dt_r
2814   E558                   			BITOFF_($D8,$DC,$D9,$5D)	;Turn OFF: Bit#18, Bit#1C, Bit#19, Bit#1D
2814   E558             
2814   E558 11D8DCD95D  
2815   E55D                   			MRTS_					;Macro RTS, Save MRA,MRB
2815   E55D 02          
2816   E55E                               ENDIF_
2816   E55E             
2816   E55E             
2816   E55E             
2816   E55E             
2816   E55E             
2816   E55E~                              ENDIF_
2816   E55E~                              ENDIF_
2816   E55E             
2816   E55E~                              ENDIF_
2816   E55E~                              ENDIF_
2816   E55E             
2816   E50C             
2816   E50C 51          
2816   E50D             
2816   E50D             
2816   E50D~                              ENDIF_
2816   E50D~                              ENDIF_
2816   E50D~                              ENDIF_
2816   E50D~                              ENDIF_
2816   E50D~                              ENDIF_
2816   E50D             
2816   E55E             
2816   E55E~                              ENDIF_
2816   E55E~                              ENDIF_
2816   E55E             
2817   E55E 5E 09       			SWCLR_($09)				;Clear Sw#: $09(left_trough)
2818   E560             			KILL_					;Remove This Thread
2818   E560 03          
2819   E561             
2820   E561             ;**********************************************************************
2821   E561             ;* Get LORD Status
2822   E561             ;**********************************************************************
2823   E561 8D 08       get_lord_num	bsr	get_lord
2824   E563 48          			asla	
2825   E564 48          			asla	
2826   E565 48          			asla	
2827   E566 48          			asla	
2828   E567 48          			asla	
2829   E568 48          			asla	
2830   E569 4A          			deca	
2831   E56A 39          			rts
2832   E56B             				
2833   E56B D6 11       get_lord		ldab	$11
2834   E56D C4 F0       			andb	#$F0
2835   E56F 8D 04       			bsr	bits_to_int
2836   E571 40          			nega	
2837   E572 8B 04       			adda	#$04
2838   E574 39          			rts	
2839   E575             
2840   E575             ;********************************************************
2841   E575             ;* Will count the number of bits set in B and return the
2842   E575             ;* number in A.
2843   E575             ;********************************************************			
2844   E575 37          bits_to_int		pshb	
2845   E576 4F          			clra	
2846   E577 5D          bits_loop		tstb	
2847   E578             			ifne
2847   E578             
2847   E578 27 FE       
2848   E57A             				begin
2848   E57A             
2849   E57A 58          					aslb	
2850   E57B             				csend
2850   E57B             
2850   E57B             
2850   E57B~            				csend
2850   E57B~            				csend
2850   E57B~            				csend
2850   E57B             
2850   E57B 24 FD       
2850   E57D             
2850   E57D~            				csend
2850   E57D~            				csend
2850   E57D             
2851   E57D 4C          				inca	
2852   E57E 20 F7       				bra	bits_loop
2853   E580             			endif
2853   E580             
2853   E580             
2853   E580             
2853   E580             
2853   E580             
2853   E580~            			endif
2853   E580~            			endif
2853   E580             
2853   E580~            			endif
2853   E580~            			endif
2853   E580             
2853   E579             
2853   E579 06          
2853   E57A             
2853   E57A             
2853   E57A~            			endif
2853   E57A~            			endif
2853   E57A~            			endif
2853   E57A             
2853   E580             
2853   E580~            			endif
2853   E580~            			endif
2853   E580             
2854   E580 33          			pulb	
2855   E581 39          			rts	
2856   E582             			
2857   E582             ;*********************************************************
2858   E582             ;* Double Trouble Drop Target Data
2859   E582             ;*********************************************************			
2860   E582 0E          target_data		.db $0E
2861   E583 16          			.db $16
2862   E584 2A          			.db $2A
2863   E585 16          			.db $16
2864   E586 0E          			.db $0E
2865   E587             target_data_end
2866   E587             
2867   E587             double_trouble	PRI_($05)				;Priority=#05
2867   E587 52 05       
2868   E589             			RCLR0_($09,$0B)			;Effect: Range #09 Range #0B
2868   E589             
2868   E589 19 89 0B    
2869   E58C             			RROR0_($0A)				;Effect: Range #0A
2869   E58C             
2869   E58C 1E 0A       
2870   E58E             			IFEQR_($43)		            ;BNER_BIT#03 
2870   E58E             
2870   E58E             
2870   E58E             
2870   E58E 5B 43 00    
2870   E591~            			IFEQR_($43)		            ;BNER_BIT#03 
2870   E591~            			IFEQR_($43)		            ;BNER_BIT#03 
2870   E591~            			IFEQR_($43)		            ;BNER_BIT#03 
2870   E591~            			IFEQR_($43)		            ;BNER_BIT#03 
2870   E591~            			IFEQR_($43)		            ;BNER_BIT#03 
2870   E591~            			IFEQR_($43)		            ;BNER_BIT#03 
2870   E591             
2871   E591                   			EXE_
2871   E591             
2871   E591 44          
2872   E592 7F 00 E0          			      clr	spare_ram			;Reset DT value
2873   E595                   			      NEWTHREAD(set_dt_target)
2873   E595 CE E6 02    
2873   E598 BD EA C4    
2874   E59B                   			EXEEND_
2874   E59B             
2874   E59B             
2874   E59B             
2874   E59B             
2874   E59B~                  			EXEEND_
2874   E59B~                  			EXEEND_
2874   E59B             
2874   E591             
2874   E591 4B          
2874   E592             
2874   E59B             
2874   E59B~                  			EXEEND_
2874   E59B~                  			EXEEND_
2874   E59B             
2875   E59B                   			SSND_($14)				;Sound #14
2875   E59B             
2875   E59B F4          
2875   E59C~                  			SSND_($14)				;Sound #14
2875   E59C~                  			SSND_($14)				;Sound #14
2875   E59C~                  			SSND_($14)				;Sound #14
2875   E59C             
2876   E59C                   			BITON_($52)				;Turn ON: Bit#12
2876   E59C             
2876   E59C 10 52       
2877   E59E                   			EXE_
2877   E59E             
2877   E59E 44          
2878   E59F CE 01 32          			      ldx	#aud_game2			;Times Double Trouble Achieved
2879   E5A2 BD F7 7F          			      jsr	ptrx_plus_1
2880   E5A5                   			EXEEND_
2880   E5A5             
2880   E5A5             
2880   E5A5             
2880   E5A5             
2880   E5A5~                  			EXEEND_
2880   E5A5~                  			EXEEND_
2880   E5A5             
2880   E59E             
2880   E59E 48          
2880   E59F             
2880   E5A5             
2880   E5A5~                  			EXEEND_
2880   E5A5~                  			EXEEND_
2880   E5A5             
2881   E5A5                   			MRTS_					;Macro RTS, Save MRA,MRB
2881   E5A5 02          
2882   E5A6             ;**************************************************
2883   E5A6             ;* This routine will reset the upper drop target 
2884   E5A6             ;* bank and then reset the correct targets for the
2885   E5A6             ;* current player.
2886   E5A6             ;**************************************************
2887   E5A6             udt_setup		      PRI_($05)				;Priority=#05
2887   E5A6 52 05       
2888   E5A8                   			BITON_($42)				;Turn ON: Bit#02
2888   E5A8             
2888   E5A8 10 42       
2889   E5AA                   			SOL_(dtrelease_on)            ;Turn ON Sol#13:dt_release
2889   E5AA 31 6D       
2890   E5AC                   			SLEEP_(64)
2890   E5AC~                  			SLEEP_(64)
2890   E5AC~                  			SLEEP_(64)
2890   E5AC             
2890   E5AC 53 40       
2890   E5AE             
2891   E5AE                   		ENDIF_
2891   E5AE             
2891   E5AE             
2891   E5AE             
2891   E5AE             
2891   E5AE             
2891   E5AE~                  		ENDIF_
2891   E5AE~                  		ENDIF_
2891   E5AE             
2891   E5AE~                  		ENDIF_
2891   E5AE~                  		ENDIF_
2891   E5AE             
2891   E590             
2891   E590 1D          
2891   E591             
2891   E591             
2891   E591~                  		ENDIF_
2891   E591~                  		ENDIF_
2891   E591~                  		ENDIF_
2891   E591~                  		ENDIF_
2891   E591~                  		ENDIF_
2891   E591             
2891   E5AE             
2891   E5AE~                  		ENDIF_
2891   E5AE~                  		ENDIF_
2891   E5AE             
2892   E5AE             			;Here when Double Trouble Starts...
2893   E5AE             udt_start		CPUX_					;Resume CPU Execution
2893   E5AE 04          
2894   E5AF 86 48       			ldaa	#dt1_on                 ;Base solenoid is DT1
2895   E5B1 CE E5 82    			ldx	#target_data
2896   E5B4             			begin
2896   E5B4             
2897   E5B4 36          				psha	
2898   E5B5 96 18       				ldaa	bitflags
2899   E5B7 44          				lsra	
2900   E5B8 E6 00       				ldab	$00,X
2901   E5BA             				begin
2901   E5BA             
2902   E5BA 54          					lsrb	
2903   E5BB 48          					asla	
2904   E5BC             				miend
2904   E5BC             
2904   E5BC             
2904   E5BC~            				miend
2904   E5BC~            				miend
2904   E5BC~            				miend
2904   E5BC             
2904   E5BC 2A FC       
2904   E5BE             
2904   E5BE~            				miend
2904   E5BE~            				miend
2904   E5BE             
2905   E5BE 32          				pula	
2906   E5BF 54          				lsrb	
2907   E5C0             				ifcs
2907   E5C0             
2907   E5C0 24 FE       
2908   E5C2 80 28       					suba	#$28
2909   E5C4 BD F1 3C    					jsr	lamp_on
2910   E5C7 8B 28       					adda	#$28
2911   E5C9 DF A4       					stx	sys_temp5
2912   E5CB BD F2 F9    					jsr	bit_lamp_buf_0
2913   E5CE             					ifeq
2913   E5CE             
2913   E5CE 26 FE       
2914   E5D0 BD EB 23    						jsr	solbuf
2915   E5D3             					endif
2915   E5D3             
2915   E5D3             
2915   E5D3             
2915   E5D3             
2915   E5D3             
2915   E5D3~            					endif
2915   E5D3~            					endif
2915   E5D3             
2915   E5D3~            					endif
2915   E5D3~            					endif
2915   E5D3             
2915   E5CF             
2915   E5CF 03          
2915   E5D0             
2915   E5D0             
2915   E5D0~            					endif
2915   E5D0~            					endif
2915   E5D0~            					endif
2915   E5D0             
2915   E5D3             
2915   E5D3~            					endif
2915   E5D3~            					endif
2915   E5D3             
2916   E5D3 DE A4       					ldx	sys_temp5
2917   E5D5             				else
2917   E5D5             
2917   E5D5             
2917   E5D5             
2917   E5D5             
2917   E5C1             
2917   E5C1             
2917   E5C1             
2917   E5C1~            				else
2917   E5C1~            				else
2917   E5C1~            				else
2917   E5C1~            				else
2917   E5C1             
2917   E5C1~            				else
2917   E5C1~            				else
2917   E5C1~            				else
2917   E5C1~            				else
2917   E5C1             
2917   E5C1             
2917   E5C1 15          
2917   E5D5             
2917   E5D5 20 FE       
2917   E5D7             
2917   E5D7             
2917   E5D7             
2917   E5D7~            				else
2917   E5D7~            				else
2917   E5D7~            				else
2917   E5D7~            				else
2917   E5D7~            				else
2917   E5D7             
2917   E5D7~            				else
2917   E5D7~            				else
2917   E5D7             
2917   E5D7~            				else
2917   E5D7~            				else
2917   E5D7             
2918   E5D7 BD F1 3C    					jsr	lamp_on
2919   E5DA             				endif
2919   E5DA             
2919   E5DA             
2919   E5DA             
2919   E5DA             
2919   E5DA             
2919   E5DA~            				endif
2919   E5DA~            				endif
2919   E5DA             
2919   E5DA~            				endif
2919   E5DA~            				endif
2919   E5DA             
2919   E5D6             
2919   E5D6 03          
2919   E5D7             
2919   E5D7             
2919   E5D7~            				endif
2919   E5D7~            				endif
2919   E5D7~            				endif
2919   E5D7             
2919   E5DA             
2919   E5DA~            				endif
2919   E5DA~            				endif
2919   E5DA             
2920   E5DA 4C          				inca	                        ;Increment our solenoid number
2921   E5DB 08          				inx	
2922   E5DC 8C E5 87    				cpx	#target_data_end
2923   E5DF             			eqend
2923   E5DF             
2923   E5DF             
2923   E5DF~            			eqend
2923   E5DF~            			eqend
2923   E5DF~            			eqend
2923   E5DF             
2923   E5DF 26 D3       
2923   E5E1             
2923   E5E1~            			eqend
2923   E5E1~            			eqend
2923   E5E1             
2924   E5E1 BD F3 AB    			jsr	macro_start
2925   E5E4             			SLEEP_(48)
2925   E5E4~            			SLEEP_(48)
2925   E5E4~            			SLEEP_(48)
2925   E5E4             
2925   E5E4 53 30       
2925   E5E6             
2926   E5E6 5EA0A1A2A3A4			SWCLR_($A0,$A1,$A2,$A3,$A4,$25) ;Clear Sw#: $20(dt_u1) $21(dt_u2) $22(dt_u3) $23(dt_u4) $24(dt_u5) $25(upper_eject)
2926   E5EC 25
2927   E5ED             			BITOFF_($42)			;Turn OFF: Bit#02
2927   E5ED             
2927   E5ED 11 42       
2928   E5EF             			MRTS_					;Macro RTS, Save MRA,MRB
2928   E5EF 02          
2929   E5F0             
2930   E5F0             ;**********************************************************
2931   E5F0             ;* Select Random Target: Will return $20-24 in game_ram_2
2932   E5F0             ;*                       New target cannot be the same as
2933   E5F0             ;*                       last target.
2934   E5F0             ;**********************************************************
2935   E5F0             rand_dt		begin
2935   E5F0             
2936   E5F0                                     begin
2936   E5F0             
2937   E5F0 BD FB 80                                  jsr	get_random
2938   E5F3 84 07             			      anda	#$07
2939   E5F5 81 05             			      cmpa	#$05
2940   E5F7                   			csend
2940   E5F7             
2940   E5F7             
2940   E5F7~                  			csend
2940   E5F7~                  			csend
2940   E5F7~                  			csend
2940   E5F7             
2940   E5F7 24 F7       
2940   E5F9             
2940   E5F9~                  			csend
2940   E5F9~                  			csend
2940   E5F9             
2941   E5F9 8B 20             			adda	#$20
2942   E5FB 91 02             			cmpa	game_ram_2
2943   E5FD             			neend
2943   E5FD             
2943   E5FD             
2943   E5FD~            			neend
2943   E5FD~            			neend
2943   E5FD~            			neend
2943   E5FD             
2943   E5FD 27 F1       
2943   E5FF             
2943   E5FF~            			neend
2943   E5FF~            			neend
2943   E5FF             
2944   E5FF 97 02       			staa	game_ram_2
2945   E601 39          			rts	
2946   E602             
2947   E602             ;**********************************************************
2948   E602             ;* Will select a random target and reset it appropriately.
2949   E602             ;* The thread will run until the Double Trouble timer expires
2950   E602             ;* and will then drop the target and re-select another.
2951   E602             ;**********************************************************			
2952   E602 BD E5 F0    set_dt_target	jsr	rand_dt			;Select a random target, will return $20-$24
2953   E605 8B 28       			adda	#$28
2954   E607 BD EB 23    			jsr	solbuf
2955   E60A BD F3 AB    			jsr	macro_start
2956   E60D             			RCLR0_($0B)				;Effect: Range #0B
2956   E60D             
2956   E60D 19 0B       
2957   E60F             			PRI_($30)				;Priority=#30
2957   E60F 52 30       
2958   E611             			BITONP_($02)			;Turn ON Lamp/Bit @RAM:02
2958   E611             
2958   E611 14 02       
2959   E613             			SLEEP_(32)
2959   E613~            			SLEEP_(32)
2959   E613~            			SLEEP_(32)
2959   E613             
2959   E613 53 20       
2959   E615             
2960   E615             			BITOFF_($42)			;Turn OFF: Bit#02
2960   E615             
2960   E615 11 42       
2961   E617             			EXE_
2961   E617             
2961   E617 44          
2962   E618 BD EB 8E    			      jsr	hex2bitpos
2963   E61B 53          			      comb	
2964   E61C D4 65       			      andb	$65
2965   E61E D7 65       			      stab	$65
2966   E620 96 E0       			      ldaa	spare_ram			;Get DT Value, if 0, then no timer
2967   E622             			EXEEND_
2967   E622             
2967   E622             
2967   E622             
2967   E622             
2967   E622~            			EXEEND_
2967   E622~            			EXEEND_
2967   E622             
2967   E617             
2967   E617 4C          
2967   E618             
2967   E622             
2967   E622~            			EXEEND_
2967   E622~            			EXEEND_
2967   E622             
2968   E622             			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2968   E622             
2968   E622             
2968   E622             
2968   E622 5BFCE000FE  
2968   E627~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2968   E627~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2968   E627~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2968   E627~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2968   E627~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2968   E627~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2968   E627             
2969   E627             			      KILL_					;Remove This Thread
2969   E627 03          
2970   E628                               ENDIF_
2970   E628             
2970   E628             
2970   E628             
2970   E628             
2970   E628             
2970   E628~                              ENDIF_
2970   E628~                              ENDIF_
2970   E628             
2970   E628~                              ENDIF_
2970   E628~                              ENDIF_
2970   E628             
2970   E626             
2970   E626 01          
2970   E627             
2970   E627             
2970   E627~                              ENDIF_
2970   E627~                              ENDIF_
2970   E627~                              ENDIF_
2970   E627~                              ENDIF_
2970   E627~                              ENDIF_
2970   E627             
2970   E628             
2970   E628~                              ENDIF_
2970   E628~                              ENDIF_
2970   E628             
2971   E628                               ;fall through
2972   E628             ;*****************************************************************************
2973   E628             ;* Main Double Trouble Routines
2974   E628             ;*****************************************************************************
2975   E628             dbltrbl_timer	EXE_
2975   E628             
2975   E628 44          
2976   E629 F6 01 9A    			      ldab	adj_gameadjust3+1
2977   E62C C4 0F       			      andb	#$0F
2978   E62E             			EXEEND_
2978   E62E             
2978   E62E             
2978   E62E             
2978   E62E             
2978   E62E~            			EXEEND_
2978   E62E~            			EXEEND_
2978   E62E             
2978   E628             
2978   E628 47          
2978   E629             
2978   E62E             
2978   E62E~            			EXEEND_
2978   E62E~            			EXEEND_
2978   E62E             
2979   E62E             			ADDRAM_(regb,$12)			;RAM$01+=$12 - Get timer from adjustments and add 12
2979   E62E~            			ADDRAM_(regb,$12)			;RAM$01+=$12 - Get timer from adjustments and add 12
2979   E62E~            			ADDRAM_(regb,$12)			;RAM$01+=$12 - Get timer from adjustments and add 12
2979   E62E             
2979   E62E B1 12       
2980   E630             			SETRAM_(rega,$08)			;RAM$00=$08	 -
2980   E630~            			SETRAM_(rega,$08)			;RAM$00=$08	 -
2980   E630~            			SETRAM_(rega,$08)			;RAM$00=$08	 -
2980   E630             
2980   E630 C0 08       
2981   E632             			BEGIN_
2981   E632             
2982   E632             				ADDRAM_(regb,-1)			;RAM$01-=1
2982   E632~            				ADDRAM_(regb,-1)			;RAM$01-=1
2982   E632~            				ADDRAM_(regb,-1)			;RAM$01-=1
2982   E632             
2982   E632 B1 FF       
2983   E634 61          dt_fast_loop		SLEEPI_($1)				;Delay RAM$01
2984   E635             				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2984   E635             
2984   E635             
2984   E635             
2984   E635 5BFBFBFB5E66
2984   E63B FEF2F01040F7
2984   E641~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2984   E641~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2984   E641~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2984   E641~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2984   E641~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2984   E641~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2984   E641             
2985   E641             	      			;BNER_(BIT#00 || ((LAMP#10(1_target) P $F0,$10) || (BIT#26 || BIT#1E)))
2986   E641             	      			BITONP_($02)			;Turn ON Lamp/Bit @RAM:02
2986   E641             
2986   E641 14 02       
2987   E643             	      			BITOFFP2_($02)			;Turn OFF Lamp/Bit @RAM:02
2987   E643             
2987   E643 25 02       
2988   E645             	      			JMPR_(dt_fast_loop)
2988   E645~            	      			JMPR_(dt_fast_loop)
2988   E645~            	      			JMPR_(dt_fast_loop)
2988   E645             
2988   E645~            	      			JMPR_(dt_fast_loop)
2988   E645~            	      			JMPR_(dt_fast_loop)
2988   E645             
2988   E645             
2988   E645 8F          
2988   E646 ED          
2989   E647             	      		ENDIF_			
2989   E647             
2989   E647             
2989   E647             
2989   E647             
2989   E647             
2989   E647~            	      		ENDIF_			
2989   E647~            	      		ENDIF_			
2989   E647             
2989   E647~            	      		ENDIF_			
2989   E647~            	      		ENDIF_			
2989   E647             
2989   E640             
2989   E640 06          
2989   E641             
2989   E641             
2989   E641~            	      		ENDIF_			
2989   E641~            	      		ENDIF_			
2989   E641~            	      		ENDIF_			
2989   E641~            	      		ENDIF_			
2989   E641~            	      		ENDIF_			
2989   E641             
2989   E647             
2989   E647~            	      		ENDIF_			
2989   E647~            	      		ENDIF_			
2989   E647             
2990   E647             	      		IFNER_($E2)		      ;BEQR_RAM$02
2990   E647             
2990   E647             
2990   E647             
2990   E647 5A E2 00    
2990   E64A~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2990   E64A~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2990   E64A~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2990   E64A~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2990   E64A~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2990   E64A~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2990   E64A             
2991   E64A             				      SSND_($06)				;Sound #06
2991   E64A             
2991   E64A E6          
2991   E64B~            				      SSND_($06)				;Sound #06
2991   E64B~            				      SSND_($06)				;Sound #06
2991   E64B~            				      SSND_($06)				;Sound #06
2991   E64B             
2992   E64B             				ENDIF_
2992   E64B             
2992   E64B             
2992   E64B             
2992   E64B             
2992   E64B             
2992   E64B~            				ENDIF_
2992   E64B~            				ENDIF_
2992   E64B             
2992   E64B~            				ENDIF_
2992   E64B~            				ENDIF_
2992   E64B             
2992   E649             
2992   E649 01          
2992   E64A             
2992   E64A             
2992   E64A~            				ENDIF_
2992   E64A~            				ENDIF_
2992   E64A~            				ENDIF_
2992   E64A~            				ENDIF_
2992   E64A~            				ENDIF_
2992   E64A             
2992   E64B             
2992   E64B~            				ENDIF_
2992   E64B~            				ENDIF_
2992   E64B             
2993   E64B             	      		BITINVP_($02)			;Toggle Lamp/Bit @RAM:02
2993   E64B             
2993   E64B 16 02       
2994   E64D             			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E64D             
2994   E64D 5BFCE102FE  
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652             
2994   E652             
2994   E652             
2994   E652             
2994   E652             
2994   E652             
2994   E652             
2994   E651             
2994   E651 E0          
2994   E652             
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652             
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2994   E652             
2995   E652             			ADDRAM_(rega,-1)			;RAM$00-=1
2995   E652~            			ADDRAM_(rega,-1)			;RAM$00-=1
2995   E652~            			ADDRAM_(rega,-1)			;RAM$00-=1
2995   E652             
2995   E652 B0 FF       
2996   E654             			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2996   E654             
2996   E654 5BFCE000DB  
2996   E659~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2996   E659~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2996   E659~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2996   E659~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2996   E659~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2996   E659~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2996   E659             
2997   E659             			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2997   E659             
2997   E659 E7          
2997   E65A~            			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2997   E65A~            			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2997   E65A~            			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2997   E65A             
2998   E65A             			PRI_($30)				;Priority=#30
2998   E65A 52 30       
2999   E65C             			BITOFF_($2D)			;Turn OFF: Lamp#2D(double_trouble)
2999   E65C             
2999   E65C 11 2D       
3000   E65E             			BITON_($42)				;Turn ON: Bit#02
3000   E65E             
3000   E65E 10 42       
3001   E660             			SOL_(dtrelease_on)            ;Turn ON Sol#14:dt_release
3001   E660 31 6D       
3002   E662             			RCLR0_($0B)				;Effect: Range #0B
3002   E662             
3002   E662 19 0B       
3003   E664             			SLEEP_(32)
3003   E664~            			SLEEP_(32)
3003   E664~            			SLEEP_(32)
3003   E664             
3003   E664 53 20       
3003   E666             
3004   E666             			EXE_
3004   E666             
3004   E666 44          
3005   E667 CE 01 9B    			      ldx	#adj_gameadjust4		;Load delay until reset
3006   E66A BD EF 53    			      jsr	cmosinc_a
3007   E66D             			EXEEND_
3007   E66D             
3007   E66D             
3007   E66D             
3007   E66D             
3007   E66D~            			EXEEND_
3007   E66D~            			EXEEND_
3007   E66D             
3007   E666             
3007   E666 48          
3007   E667             
3007   E66D             
3007   E66D~            			EXEEND_
3007   E66D~            			EXEEND_
3007   E66D             
3008   E66D 60          			SLEEPI_(rega)				;Delay RAM$00
3009   E66E             udt_reset		EXE_
3009   E66E             
3009   E66E 44          
3010   E66F 7F 00 E0    			      clr	spare_ram			;Reset DT value
3011   E672             			EXEEND_
3011   E672             
3011   E672             
3011   E672             
3011   E672             
3011   E672~            			EXEEND_
3011   E672~            			EXEEND_
3011   E672             
3011   E66E             
3011   E66E 45          
3011   E66F             
3011   E672             
3011   E672~            			EXEEND_
3011   E672~            			EXEEND_
3011   E672             
3012   E672 5C          			JMPD_(set_dt_target)			
3012   E673 E6 02       
3013   E675             
3014   E675             start_dbltrbl	BNEA_($FC,$E2,$E0,udt_exit)	;BNER_RAM$02==#224 to udt_exit
3014   E675 59 FC E2 E0 
3014   E679 E7 92       
3015   E67B             			REMTHREADS_($F8,$30)		;Remove Multiple Threads Based on Priority
3015   E67B 55 F8 30    
3016   E67E             			BITON_($2D)				;Turn ON: Lamp#2D(double_trouble)
3016   E67E             
3016   E67E 10 2D       
3017   E680             			CPUX_					;Resume CPU Execution
3017   E680 04          
3018   E681             			NEWTHREAD(award_dt_score)
3018   E681 CE E6 8B    
3018   E684 BD EA C4    
3019   E687 7E E6 02    			jmp	set_dt_target
3020   E68A 03          			.db $03
3021   E68B             
3022   E68B BD F3 AB    award_dt_score	jsr	macro_start
3023   E68E             			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
3023   E68E             
3023   E68E             
3023   E68E             
3023   E68E 5BFEF2F240FD
3023   E694~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
3023   E694~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
3023   E694~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
3023   E694~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
3023   E694~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
3023   E694~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
3023   E694             
3024   E694             			      REMTHREADS_($FA,$40)		;Remove Multiple Threads Based on Priority
3024   E694 55 FA 40    
3025   E697             			      EXE_
3025   E697             
3025   E697 44          
3026   E698 BD E6 E6    			            jsr	gj_4A
3027   E69B             			      EXEEND_
3027   E69B             
3027   E69B             
3027   E69B             
3027   E69B             
3027   E69B~            			      EXEEND_
3027   E69B~            			      EXEEND_
3027   E69B             
3027   E697             
3027   E697 45          
3027   E698             
3027   E69B             
3027   E69B~            			      EXEEND_
3027   E69B~            			      EXEEND_
3027   E69B             
3028   E69B             			ENDIF_
3028   E69B             
3028   E69B             
3028   E69B             
3028   E69B             
3028   E69B             
3028   E69B~            			ENDIF_
3028   E69B~            			ENDIF_
3028   E69B             
3028   E69B~            			ENDIF_
3028   E69B~            			ENDIF_
3028   E69B             
3028   E693             
3028   E693 07          
3028   E694             
3028   E694             
3028   E694~            			ENDIF_
3028   E694~            			ENDIF_
3028   E694~            			ENDIF_
3028   E694~            			ENDIF_
3028   E694~            			ENDIF_
3028   E694             
3028   E69B             
3028   E69B~            			ENDIF_
3028   E69B~            			ENDIF_
3028   E69B             
3029   E69B             			PRI_($45)				;Priority=#45
3029   E69B 52 45       
3030   E69D             			CPUX_					;Resume CPU Execution
3030   E69D 04          
3031   E69E 96 E0       			ldaa	spare_ram
3032   E6A0             			ifeq
3032   E6A0             
3032   E6A0 26 FE       
3033   E6A2 4C          				inca	
3034   E6A3             			else
3034   E6A3             
3034   E6A3             
3034   E6A3             
3034   E6A3             
3034   E6A1             
3034   E6A1             
3034   E6A1             
3034   E6A1~            			else
3034   E6A1~            			else
3034   E6A1~            			else
3034   E6A1~            			else
3034   E6A1             
3034   E6A1~            			else
3034   E6A1~            			else
3034   E6A1~            			else
3034   E6A1~            			else
3034   E6A1             
3034   E6A1             
3034   E6A1 03          
3034   E6A3             
3034   E6A3 20 FE       
3034   E6A5             
3034   E6A5             
3034   E6A5             
3034   E6A5~            			else
3034   E6A5~            			else
3034   E6A5~            			else
3034   E6A5~            			else
3034   E6A5~            			else
3034   E6A5             
3034   E6A5~            			else
3034   E6A5~            			else
3034   E6A5             
3034   E6A5~            			else
3034   E6A5~            			else
3034   E6A5             
3035   E6A5 81 16       				cmpa	#$16
3036   E6A7             				ifne
3036   E6A7             
3036   E6A7 27 FE       
3037   E6A9 48          					asla	
3038   E6AA 81 10       					cmpa	#$10
3039   E6AC             					ifcc
3039   E6AC             
3039   E6AC 25 FE       
3040   E6AE 86 16       						ldaa	#$16
3041   E6B0             					endif
3041   E6B0             
3041   E6B0             
3041   E6B0             
3041   E6B0             
3041   E6B0             
3041   E6B0~            					endif
3041   E6B0~            					endif
3041   E6B0             
3041   E6B0~            					endif
3041   E6B0~            					endif
3041   E6B0             
3041   E6AD             
3041   E6AD 02          
3041   E6AE             
3041   E6AE             
3041   E6AE~            					endif
3041   E6AE~            					endif
3041   E6AE~            					endif
3041   E6AE             
3041   E6B0             
3041   E6B0~            					endif
3041   E6B0~            					endif
3041   E6B0             
3042   E6B0             				endif
3042   E6B0             
3042   E6B0             
3042   E6B0             
3042   E6B0             
3042   E6B0             
3042   E6B0~            				endif
3042   E6B0~            				endif
3042   E6B0             
3042   E6B0~            				endif
3042   E6B0~            				endif
3042   E6B0             
3042   E6A8             
3042   E6A8 07          
3042   E6A9             
3042   E6A9             
3042   E6A9~            				endif
3042   E6A9~            				endif
3042   E6A9~            				endif
3042   E6A9             
3042   E6B0             
3042   E6B0~            				endif
3042   E6B0~            				endif
3042   E6B0             
3043   E6B0             			endif
3043   E6B0             
3043   E6B0             
3043   E6B0             
3043   E6B0             
3043   E6B0             
3043   E6B0~            			endif
3043   E6B0~            			endif
3043   E6B0             
3043   E6B0~            			endif
3043   E6B0~            			endif
3043   E6B0             
3043   E6A4             
3043   E6A4 0B          
3043   E6A5             
3043   E6A5             
3043   E6A5~            			endif
3043   E6A5~            			endif
3043   E6A5~            			endif
3043   E6A5             
3043   E6B0             
3043   E6B0~            			endif
3043   E6B0~            			endif
3043   E6B0             
3044   E6B0 BD D9 13    			jsr	add_dt_audit
3045   E6B3 97 E0       			staa	spare_ram
3046   E6B5 48          			asla	
3047   E6B6 48          			asla	
3048   E6B7 48          			asla	
3049   E6B8 84 7F       			anda	#$7F
3050   E6BA 8B 04       			adda	#$04
3051   E6BC 97 E2       			staa	spare_ram+2
3052   E6BE 96 18       			ldaa	bitflags
3053   E6C0 46          			rora	
3054   E6C1             			ifcc
3054   E6C1             
3054   E6C1 25 FE       
3055   E6C3 8D 2F       				bsr	gb_9E
3056   E6C5 86 08       				ldaa	#$08
3057   E6C7             				begin
3057   E6C7             
3058   E6C7 8D 59       					bsr	gb_9F
3059   E6C9 BD EA 2F    					jsr	addthread
3060   E6CC 06          					.db $06
3061   E6CD             		
3062   E6CD 81 01       					cmpa	#$01
3063   E6CF             					ifeq
3063   E6CF             
3063   E6CF 26 FE       
3064   E6D1 BD EA 2F    						jsr	addthread
3065   E6D4 60          						.db $60
3066   E6D5             					endif
3066   E6D5             
3066   E6D5             
3066   E6D5             
3066   E6D5             
3066   E6D5             
3066   E6D5~            					endif
3066   E6D5~            					endif
3066   E6D5             
3066   E6D5~            					endif
3066   E6D5~            					endif
3066   E6D5             
3066   E6D0             
3066   E6D0 04          
3066   E6D1             
3066   E6D1             
3066   E6D1~            					endif
3066   E6D1~            					endif
3066   E6D1~            					endif
3066   E6D1             
3066   E6D5             
3066   E6D5~            					endif
3066   E6D5~            					endif
3066   E6D5             
3067   E6D5 BD E7 65    					jsr	gj_54
3068   E6D8 BD EA 2F    					jsr	addthread
3069   E6DB 06          					.db $06
3070   E6DC             		
3071   E6DC 4A          					deca	
3072   E6DD             				eqend
3072   E6DD             
3072   E6DD             
3072   E6DD~            				eqend
3072   E6DD~            				eqend
3072   E6DD~            				eqend
3072   E6DD             
3072   E6DD 26 E8       
3072   E6DF             
3072   E6DF~            				eqend
3072   E6DF~            				eqend
3072   E6DF             
3073   E6DF 8D 27       				bsr	gb_A2
3074   E6E1             			endif
3074   E6E1             
3074   E6E1             
3074   E6E1             
3074   E6E1             
3074   E6E1             
3074   E6E1~            			endif
3074   E6E1~            			endif
3074   E6E1             
3074   E6E1~            			endif
3074   E6E1~            			endif
3074   E6E1             
3074   E6C2             
3074   E6C2 1E          
3074   E6C3             
3074   E6C3             
3074   E6C3~            			endif
3074   E6C3~            			endif
3074   E6C3~            			endif
3074   E6C3             
3074   E6E1             
3074   E6E1~            			endif
3074   E6E1~            			endif
3074   E6E1             
3075   E6E1 8D 03       			bsr	gj_4A
3076   E6E3 7E EA 67    			jmp	killthread
3077   E6E6             			
3078   E6E6 96 E2       gj_4A			ldaa	spare_ram+2
3079   E6E8 BD EC 05    			jsr	score_main
3080   E6EB 81 34       			cmpa	#$34
3081   E6ED             			ifeq
3081   E6ED             
3081   E6ED 26 FE       
3082   E6EF 86 0D             			ldaa	#$0D
3083   E6F1 7E EC 05          			jmp	score_main
3084   E6F4 CE 00 5F    gb_9E 			ldx	#dmask_p4
3085   E6F7 C6 03             			ldab	#$03
3086   E6F9                   			begin
3086   E6F9             
3087   E6F9 D1 CD                   			cmpb	player_up
3088   E6FB                         			ifne
3088   E6FB             
3088   E6FB 27 FE       
3089   E6FD A6 00                   			      ldaa	$00,X
3090   E6FF 8A 7F                   			      oraa	#$7F
3091   E701 A7 00                   			      staa	$00,X
3092   E703                         			endif
3092   E703             
3092   E703             
3092   E703             
3092   E703             
3092   E703             
3092   E703~                        			endif
3092   E703~                        			endif
3092   E703             
3092   E703~                        			endif
3092   E703~                        			endif
3092   E703             
3092   E6FC             
3092   E6FC 06          
3092   E6FD             
3092   E6FD             
3092   E6FD~                        			endif
3092   E6FD~                        			endif
3092   E6FD~                        			endif
3092   E6FD             
3092   E703             
3092   E703~                        			endif
3092   E703~                        			endif
3092   E703             
3093   E703 09                      			dex	
3094   E704 5A                      			decb	
3095   E705                   			miend
3095   E705             
3095   E705             
3095   E705~                  			miend
3095   E705~                  			miend
3095   E705~                  			miend
3095   E705             
3095   E705 2A F2       
3095   E707             
3095   E707~                  			miend
3095   E707~                  			miend
3095   E707             
3096   E707 39          			rts
3097   E708             	
3098   E708 CE 00 5F    gb_A2			ldx	#dmask_p4
3099   E70B C6 03       			ldab	#$03
3100   E70D             			begin
3100   E70D             
3101   E70D D1 CD             			cmpb	player_up
3102   E70F                   			ifne
3102   E70F             
3102   E70F 27 FE       
3103   E711 A6 00             			      ldaa	$00,X
3104   E713 84 80             			      anda	#$80
3105   E715 A7 00             			      staa	$00,X
3106   E717                   			endif
3106   E717             
3106   E717             
3106   E717             
3106   E717             
3106   E717             
3106   E717~                  			endif
3106   E717~                  			endif
3106   E717             
3106   E717~                  			endif
3106   E717~                  			endif
3106   E717             
3106   E710             
3106   E710 06          
3106   E711             
3106   E711             
3106   E711~                  			endif
3106   E711~                  			endif
3106   E711~                  			endif
3106   E711             
3106   E717             
3106   E717~                  			endif
3106   E717~                  			endif
3106   E717             
3107   E717 09                			dex	
3108   E718 5A                			decb	
3109   E719             			miend
3109   E719             
3109   E719             
3109   E719~            			miend
3109   E719~            			miend
3109   E719~            			miend
3109   E719             
3109   E719 2A F2       
3109   E71B             
3109   E71B~            			miend
3109   E71B~            			miend
3109   E71B             
3110   E71B 96 E1       			ldaa	spare_ram+1
3111   E71D 97 60       			staa	comma_flags
3112   E71F 7E EB A1    			jmp	update_commas
3113   E722             			
3114   E722 36          gb_9F			psha	
3115   E723 81 06       			cmpa	#$06
3116   E725             			ifcc
3116   E725             
3116   E725 25 FE       
3117   E727 86 1F       			      ldaa	#$1F
3118   E729             			else
3118   E729             
3118   E729             
3118   E729             
3118   E729             
3118   E726             
3118   E726             
3118   E726             
3118   E726~            			else
3118   E726~            			else
3118   E726~            			else
3118   E726~            			else
3118   E726             
3118   E726~            			else
3118   E726~            			else
3118   E726~            			else
3118   E726~            			else
3118   E726             
3118   E726             
3118   E726 04          
3118   E729             
3118   E729 20 FE       
3118   E72B             
3118   E72B             
3118   E72B             
3118   E72B~            			else
3118   E72B~            			else
3118   E72B~            			else
3118   E72B~            			else
3118   E72B~            			else
3118   E72B             
3118   E72B~            			else
3118   E72B~            			else
3118   E72B             
3118   E72B~            			else
3118   E72B~            			else
3118   E72B             
3119   E72B 86 0C       			      ldaa	#$0C
3120   E72D                               endif
3120   E72D             
3120   E72D             
3120   E72D             
3120   E72D             
3120   E72D             
3120   E72D~                              endif
3120   E72D~                              endif
3120   E72D             
3120   E72D~                              endif
3120   E72D~                              endif
3120   E72D             
3120   E72A             
3120   E72A 02          
3120   E72B             
3120   E72B             
3120   E72B~                              endif
3120   E72B~                              endif
3120   E72B~                              endif
3120   E72B             
3120   E72D             
3120   E72D~                              endif
3120   E72D~                              endif
3120   E72D             
3121   E72D BD EC FC    			jsr	isnd_once
3122   E730 BD F9 19    			jsr	disp_mask
3123   E733 16          			tab	
3124   E734 43          			coma	
3125   E735 84 33       			anda	#$33
3126   E737 D4 60       			andb	comma_flags
3127   E739 1B          			aba	
3128   E73A 97 60       			staa	comma_flags
3129   E73C BD EB A1    			jsr	update_commas
3130   E73F CE 00 48    			ldx	#score_p1_b1
3131   E742 4F          			clra	
3132   E743             			begin
3132   E743             
3133   E743 91 CD             			cmpa	player_up
3134   E745                   			ifne
3134   E745             
3134   E745 27 FE       
3135   E747 6F 02                   			clr	$02,X
3136   E749 6F 03                   			clr	$03,X
3137   E74B D6 E0                   			ldab	spare_ram
3138   E74D C5 F0                   			bitb	#$F0
3139   E74F                         			ifeq
3139   E74F             
3139   E74F 26 FE       
3140   E751 CA F0                   			      orab	#$F0
3141   E753                         			endif
3141   E753             
3141   E753             
3141   E753             
3141   E753             
3141   E753             
3141   E753~                        			endif
3141   E753~                        			endif
3141   E753             
3141   E753~                        			endif
3141   E753~                        			endif
3141   E753             
3141   E750             
3141   E750 02          
3141   E751             
3141   E751             
3141   E751~                        			endif
3141   E751~                        			endif
3141   E751~                        			endif
3141   E751             
3141   E753             
3141   E753~                        			endif
3141   E753~                        			endif
3141   E753             
3142   E753 E7 01                   			stab	$01,X
3143   E755 C6 FF                   			ldab	#$FF
3144   E757 E7 00                   			stab	$00,X
3145   E759                         		endif
3145   E759             
3145   E759             
3145   E759             
3145   E759             
3145   E759             
3145   E759~                        		endif
3145   E759~                        		endif
3145   E759             
3145   E759~                        		endif
3145   E759~                        		endif
3145   E759             
3145   E746             
3145   E746 12          
3145   E747             
3145   E747             
3145   E747~                        		endif
3145   E747~                        		endif
3145   E747~                        		endif
3145   E747             
3145   E759             
3145   E759~                        		endif
3145   E759~                        		endif
3145   E759             
3146   E759 C6 04             			ldab	#$04
3147   E75B BD EF 4D          			jsr	xplusb
3148   E75E 4C                			inca	
3149   E75F 81 04             			cmpa	#$04
3150   E761             			eqend
3150   E761             
3150   E761             
3150   E761~            			eqend
3150   E761~            			eqend
3150   E761~            			eqend
3150   E761             
3150   E761 26 E0       
3150   E763             
3150   E763~            			eqend
3150   E763~            			eqend
3150   E763             
3151   E763 32          			pula	
3152   E764 39          			rts	
3153   E765             			
3154   E765 36          gj_54			psha	
3155   E766 BD F9 19    			jsr	disp_mask
3156   E769 94 60       			anda	comma_flags
3157   E76B 97 60       			staa	comma_flags
3158   E76D 86 FF       			ldaa	#$FF
3159   E76F C6 10       			ldab	#$10
3160   E771 CE 00 48    			ldx	#score_p1_b1
3161   E774 BD F8 40    			jsr	write_range
3162   E777 32          			pula	
3163   E778 39          			rts	
3164   E779             
3165   E779             ;********************************************************
3166   E779             ;* Upper Drop Target Switches:
3167   E779             ;********************************************************			
3168   E779             sw_dt_u1
3169   E779             sw_dt_u2
3170   E779             sw_dt_u3
3171   E779             sw_dt_u4
3172   E779             sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
3172   E779             
3172   E779             
3172   E779             
3172   E779 5A 42 00    
3172   E77C~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
3172   E77C~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
3172   E77C~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
3172   E77C~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
3172   E77C~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
3172   E77C~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
3172   E77C             
3173   E77C                   			BEQA_($52,start_dbltrbl)  	;BEQR_BIT#12 to start_dbltrbl
3173   E77C 58 52       
3173   E77E E6 75       
3174   E780                   			ADDRAM_(rega,$28)			;RAM$00+=$28
3174   E780~                  			ADDRAM_(rega,$28)			;RAM$00+=$28
3174   E780~                  			ADDRAM_(rega,$28)			;RAM$00+=$28
3174   E780             
3174   E780 B0 28       
3175   E782                   			IFNER_($E0)		;BEQR_RAM$00
3175   E782             
3175   E782             
3175   E782             
3175   E782 5A E0 00    
3175   E785~                  			IFNER_($E0)		;BEQR_RAM$00
3175   E785~                  			IFNER_($E0)		;BEQR_RAM$00
3175   E785~                  			IFNER_($E0)		;BEQR_RAM$00
3175   E785~                  			IFNER_($E0)		;BEQR_RAM$00
3175   E785~                  			IFNER_($E0)		;BEQR_RAM$00
3175   E785~                  			IFNER_($E0)		;BEQR_RAM$00
3175   E785             
3176   E785                         			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
3176   E785             
3176   E785 14 00       
3177   E787                         			JSRD_(add_bonus)			;1 bonus advance			
3177   E787 57          
3177   E788 D5 EB       
3178   E78A                         			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78A 43          
3178   E78B             
3178   E78B~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78B~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78B             
3178   E78B~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78B~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78B             
3178   E78B~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78B~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78B             
3178   E78B~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78B~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78B             
3178   E78B             
3178   E78B 0C          
3178   E78C~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78C~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78C~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78C~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78C~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78C~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
3178   E78C             
3178   E78C             
3178   E78C             
3178   E78C             
3178   E78C             
3179   E78C                         			IFEQR_($F6,$09)		      ;BNER_RangeON#09
3179   E78C             
3179   E78C             
3179   E78C             
3179   E78C 5B F6 09 FF 
3179   E790~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
3179   E790~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
3179   E790~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
3179   E790~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
3179   E790~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
3179   E790~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
3179   E790             
3180   E790                         			      JSRR_(double_trouble)
3180   E790~                        			      JSRR_(double_trouble)
3180   E790~                        			      JSRR_(double_trouble)
3180   E790             
3180   E790~                        			      JSRR_(double_trouble)
3180   E790~                        			      JSRR_(double_trouble)
3180   E790             
3180   E790             
3180   E790 9D          
3180   E791 F5          
3181   E792                         			ENDIF_
3181   E792             
3181   E792             
3181   E792             
3181   E792             
3181   E792             
3181   E792~                        			ENDIF_
3181   E792~                        			ENDIF_
3181   E792             
3181   E792~                        			ENDIF_
3181   E792~                        			ENDIF_
3181   E792             
3181   E78F             
3181   E78F 02          
3181   E790             
3181   E790             
3181   E790~                        			ENDIF_
3181   E790~                        			ENDIF_
3181   E790~                        			ENDIF_
3181   E790~                        			ENDIF_
3181   E790~                        			ENDIF_
3181   E790             
3181   E792             
3181   E792~                        			ENDIF_
3181   E792~                        			ENDIF_
3181   E792             
3182   E792                         	      ENDIF_
3182   E792             
3182   E792             
3182   E792             
3182   E792             
3182   E792             
3182   E792~                        	      ENDIF_
3182   E792~                        	      ENDIF_
3182   E792             
3182   E792~                        	      ENDIF_
3182   E792~                        	      ENDIF_
3182   E792             
3182   E784             
3182   E784 0D          
3182   E785             
3182   E785             
3182   E785~                        	      ENDIF_
3182   E785~                        	      ENDIF_
3182   E785~                        	      ENDIF_
3182   E785~                        	      ENDIF_
3182   E785~                        	      ENDIF_
3182   E785             
3182   E792             
3182   E792~                        	      ENDIF_
3182   E792~                        	      ENDIF_
3182   E792             
3183   E792                   	      ENDIF_			
3183   E792             
3183   E792             
3183   E792             
3183   E792             
3183   E792             
3183   E792~                  	      ENDIF_			
3183   E792~                  	      ENDIF_			
3183   E792             
3183   E792~                  	      ENDIF_			
3183   E792~                  	      ENDIF_			
3183   E792             
3183   E77B             
3183   E77B 16          
3183   E77C             
3183   E77C             
3183   E77C~                  	      ENDIF_			
3183   E77C~                  	      ENDIF_			
3183   E77C~                  	      ENDIF_			
3183   E77C~                  	      ENDIF_			
3183   E77C~                  	      ENDIF_			
3183   E77C             
3183   E792             
3183   E792~                  	      ENDIF_			
3183   E792~                  	      ENDIF_			
3183   E792             
3184   E792             udt_exit		KILL_					;Remove This Thread
3184   E792 03          
3185   E793             
3186   E793             gj_0E			SETRAM_(rega,$10)			;RAM$00=$10
3186   E793~            gj_0E			SETRAM_(rega,$10)			;RAM$00=$10
3186   E793~            gj_0E			SETRAM_(rega,$10)			;RAM$00=$10
3186   E793             
3186   E793 C0 10       
3187   E795             			BEGIN_
3187   E795             
3188   E795             				ADDRAM_(rega,-1)			;RAM$00-=1
3188   E795~            				ADDRAM_(rega,-1)			;RAM$00-=1
3188   E795~            				ADDRAM_(rega,-1)			;RAM$00-=1
3188   E795             
3188   E795 B0 FF       
3189   E797             			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E797             
3189   E797 5AFAE0F3FCE0
3189   E79D 0CFB
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F             
3189   E79F             
3189   E79F             
3189   E79F             
3189   E79F             
3189   E79F             
3189   E79F             
3189   E79E             
3189   E79E F6          
3189   E79F             
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F             
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
3189   E79F             
3190   E79F             			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
3190   E79F             
3190   E79F 14 00       
3191   E7A1             			IFEQR_($F6,$02)		      ;BNER_RangeON#02
3191   E7A1             
3191   E7A1             
3191   E7A1             
3191   E7A1 5B F6 02 FF 
3191   E7A5~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
3191   E7A5~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
3191   E7A5~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
3191   E7A5~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
3191   E7A5~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
3191   E7A5~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
3191   E7A5             
3192   E7A5                   			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
3192   E7A5             
3192   E7A5 5A 1B 1F    
3192   E7A8~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
3192   E7A8~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
3192   E7A8~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
3192   E7A8~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
3192   E7A8~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
3192   E7A8~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
3192   E7A8             
3193   E7A8                   			SSND_($17)				;Sound #17
3193   E7A8             
3193   E7A8 F7          
3193   E7A9~                  			SSND_($17)				;Sound #17
3193   E7A9~                  			SSND_($17)				;Sound #17
3193   E7A9~                  			SSND_($17)				;Sound #17
3193   E7A9             
3194   E7A9                   			BITON_($41)				;Turn ON: Bit#01
3194   E7A9             
3194   E7A9 10 41       
3195   E7AB                   			BITOFF_($D8,$5C)			;Turn OFF: Bit#18, Bit#1C
3195   E7AB             
3195   E7AB 11 D8 5C    
3196   E7AE                   			JSRD_(lock_thread)			
3196   E7AE 57          
3196   E7AF D7 0F       
3197   E7B1                   			EXE_
3197   E7B1             
3197   E7B1 44          
3198   E7B2                   			      NEWTHREAD(attract_1)
3198   E7B2 CE D7 AE    
3198   E7B5 BD EA C4    
3199   E7B8                   			EXEEND_
3199   E7B8             
3199   E7B8             
3199   E7B8             
3199   E7B8             
3199   E7B8~                  			EXEEND_
3199   E7B8~                  			EXEEND_
3199   E7B8             
3199   E7B1             
3199   E7B1 48          
3199   E7B2             
3199   E7B8             
3199   E7B8~                  			EXEEND_
3199   E7B8~                  			EXEEND_
3199   E7B8             
3200   E7B8                   			MRTS_					;Macro RTS, Save MRA,MRB
3200   E7B8 02          
3201   E7B9                               ENDIF_
3201   E7B9             
3201   E7B9             
3201   E7B9             
3201   E7B9             
3201   E7B9             
3201   E7B9~                              ENDIF_
3201   E7B9~                              ENDIF_
3201   E7B9             
3201   E7B9~                              ENDIF_
3201   E7B9~                              ENDIF_
3201   E7B9             
3201   E7A4             
3201   E7A4 14          
3201   E7A5             
3201   E7A5             
3201   E7A5~                              ENDIF_
3201   E7A5~                              ENDIF_
3201   E7A5~                              ENDIF_
3201   E7A5~                              ENDIF_
3201   E7A5~                              ENDIF_
3201   E7A5             
3201   E7B9             
3201   E7B9~                              ENDIF_
3201   E7B9~                              ENDIF_
3201   E7B9             
3202   E7B9             gb_4C			EXE_
3202   E7B9             
3202   E7B9 44          
3203   E7BA             			      NEWTHREAD(gj_3B)
3203   E7BA CE E7 C1    
3203   E7BD BD EA C4    
3204   E7C0             			EXEEND_
3204   E7C0             
3204   E7C0             
3204   E7C0             
3204   E7C0             
3204   E7C0~            			EXEEND_
3204   E7C0~            			EXEEND_
3204   E7C0             
3204   E7B9             
3204   E7B9 48          
3204   E7BA             
3204   E7C0             
3204   E7C0~            			EXEEND_
3204   E7C0~            			EXEEND_
3204   E7C0             
3205   E7C0             			MRTS_					;Macro RTS, Save MRA,MRB
3205   E7C0 02          
3206   E7C1             
3207   E7C1 BD F3 AB    gj_3B			jsr	macro_start
3208   E7C4             			JSRR_(gatlin_sound)			
3208   E7C4~            			JSRR_(gatlin_sound)			
3208   E7C4~            			JSRR_(gatlin_sound)			
3208   E7C4             
3208   E7C4~            			JSRR_(gatlin_sound)			
3208   E7C4~            			JSRR_(gatlin_sound)			
3208   E7C4             
3208   E7C4             
3208   E7C4 9C          
3208   E7C5 0A          
3209   E7C6             			KILL_					;Remove This Thread
3209   E7C6 03          
3210   E7C7             
3211   E7C7             award_spec		SPEC_					;Award Special
3211   E7C7 05          
3212   E7C8             			RCLR0_($02)				;Effect: Range #02
3212   E7C8             
3212   E7C8 19 02       
3213   E7CA             			MRTS_					;Macro RTS, Save MRA,MRB
3213   E7CA 02          
3214   E7CB             
3215   E7CB 49          gr_csum2		.db $49
3216   E7CC             
3217   E7CC~            #if $>$E800
3218   E7CC~            	.error "ROM Overflow at $E800, make sure your code is not too big."
3219   E7CC             #endif
3220   E7CC             	
3221   E7CC             	
3222   E7CC             ;*****************************************************************************
3223   E7CC             ;* Williams Level 7 Flipper Code
3224   E7CC             ;***************************************************************************
3225   E7CC             ;* Code copyright Williams Electronic Games Inc.
3226   E7CC             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
3227   E7CC             ;* For use with TASMx Assembler
3228   E7CC             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
3229   E7CC             ;* for more information.
3230   E7CC             ;* You may redistribute this file as long as this header remains intact.
3231   E7CC             ;***************************************************************************
3232   E7CC             
3233   E7CC             ;*****************************************************************************
3234   E7CC             ;* Some Global Equates
3235   E7CC             ;*****************************************************************************
3236   E7CC             
3237   E7CC             irq_per_minute =	$0EFF
3238   E7CC             
3239   E7CC             ;*****************************************************************************
3240   E7CC             ;*Program starts at $e800 for standard games... we can expand this later..
3241   E7CC             ;*****************************************************************************
3242   E800             	.org $E800
3243   E800             
3244   E800             ;**************************************
3245   E800             ;* Main Entry from Reset
3246   E800             ;**************************************
3247   E800 0F          reset			sei	
3248   E801 8E F1 0D    			lds	#pia_ddr_data-1		;Point stack to start of init data
3249   E804 C6 0A       			ldab	#$0A				;Number of PIA sections to initialize
3250   E806 CE 21 00    			ldx	#pia_sound_data		;Start with the lowest PIA
3251   E809 86 04       			ldaa	#$04
3252   E80B A7 01       			staa	pia_control,X		;Select control register
3253   E80D 86 7F       			ldaa	#$7F				
3254   E80F A7 00       			staa	pia_pir,X
3255   E811 DF 9A       			stx	temp1
3256   E813 9C 9A       			cpx	temp1
3257   E815             			ifeq
3257   E815             
3257   E815 26 FE       
3258   E817             				begin
3258   E817             
3259   E817 DE 9A       					ldx	temp1			;Get next PIA address base
3260   E819             					begin
3260   E819             
3261   E819 6F 01       						clr	pia_control,X	;Initialize all PIA data direction registers
3262   E81B 32          						pula				;Get DDR data
3263   E81C A7 00       						staa	pia_pir,X
3264   E81E 32          						pula	
3265   E81F A7 01       						staa	pia_control,X	;Get Control Data
3266   E821 8C 21 00    						cpx	#pia_sound_data	;This is the last PIA to do in Level 7 games
3267   E824             						ifne
3267   E824             
3267   E824 27 FE       
3268   E826 6F 00       							clr	pia_pir,X		;If we are on the sound PIA, then clear the
3269   E828             											;peripheral interface register 
3270   E828             						endif
3270   E828             
3270   E828             
3270   E828             
3270   E828             
3270   E828             
3270   E828~            						endif
3270   E828~            						endif
3270   E828             
3270   E828~            						endif
3270   E828~            						endif
3270   E828             
3270   E825             
3270   E825 02          
3270   E826             
3270   E826             
3270   E826~            						endif
3270   E826~            						endif
3270   E826~            						endif
3270   E826             
3270   E828             
3270   E828~            						endif
3270   E828~            						endif
3270   E828             
3271   E828 08          						inx	
3272   E829 08          						inx	
3273   E82A 5A          						decb	
3274   E82B 27 13       						beq	init_done
3275   E82D C5 01       						bitb	#$01
3276   E82F             					eqend
3276   E82F             
3276   E82F             
3276   E82F~            					eqend
3276   E82F~            					eqend
3276   E82F~            					eqend
3276   E82F             
3276   E82F 26 E8       
3276   E831             
3276   E831~            					eqend
3276   E831~            					eqend
3276   E831             
3277   E831 96 9A       					ldaa	temp1			;Get current PIA address MSB
3278   E833 48          					asla	
3279   E834 84 1F       					anda	#$1F			;Move to next PIA
3280   E836 8A 20       					oraa	#$20
3281   E838 97 9A       					staa	temp1			;Store it
3282   E83A             				loopend
3282   E83A             
3282   E83A             
3282   E83A~            				loopend
3282   E83A~            				loopend
3282   E83A~            				loopend
3282   E83A             
3282   E83A 20 DB       
3282   E83C             
3282   E83C~            				loopend
3282   E83C~            				loopend
3282   E83C             
3283   E83C             			endif
3283   E83C             
3283   E83C             
3283   E83C             
3283   E83C             
3283   E83C             
3283   E83C~            			endif
3283   E83C~            			endif
3283   E83C             
3283   E83C~            			endif
3283   E83C~            			endif
3283   E83C             
3283   E816             
3283   E816 25          
3283   E817             
3283   E817             
3283   E817~            			endif
3283   E817~            			endif
3283   E817~            			endif
3283   E817             
3283   E83C             
3283   E83C~            			endif
3283   E83C~            			endif
3283   E83C             
3284   E83C 7E FF 2B    			jmp	diag					;NMI Entry
3285   E83F             			
3286   E83F             ;***************************************************
3287   E83F             ;* System Checksum #1: Set to make ROM csum from
3288   E83F             ;*                     $E800-$EFFF equal to $00
3289   E83F             ;***************************************************		
3290   E83F             			
3291   E83F 0B          csum1			.db $0B
3292   E840             			
3293   E840             ;***************************************************************
3294   E840             ;* PIA initialization is done now, set up the vm etc.
3295   E840             ;***************************************************************			
3296   E840 CE 13 FF    init_done		ldx	#$13FF				;\
3297   E843 35          			txs						;|
3298   E844             			begin						;|
3298   E844             
3299   E844 6F 00       				clr	$00,X				;Clear RAM 1000-13FF
3300   E846 09          				dex					;|
3301   E847 8C 0F FF    				cpx	#$0FFF			;|
3302   E84A             			eqend						;/
3302   E84A             
3302   E84A             
3302   E84A~            			eqend						;/
3302   E84A~            			eqend						;/
3302   E84A~            			eqend						;/
3302   E84A             
3302   E84A 26 F8       
3302   E84C             
3302   E84C~            			eqend						;/
3302   E84C~            			eqend						;/
3302   E84C             
3303   E84C BD EF 22    			jsr	setup_vm_stack			;Initially Set up the VM
3304   E84F B6 E0 55    			ldaa	gr_lampflashrate			;Get Lamp Flash Rate
3305   E852 97 B5       			staa	lamp_flash_rate
3306   E854 CE 11 00    			ldx	#switch_queue
3307   E857 DF 96       			stx	switch_queue_pointer
3308   E859 CE 11 18    			ldx	#sol_queue				;Works from top down
3309   E85C DF 98       			stx	solenoid_queue_pointer		;Set up Solenoid Buffer Pointer
3310   E85E CE 01 7D    			ldx	#adj_cmoscsum			;CMOS Checksum
3311   E861 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3312   E864 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
3313   E867 1B          			aba	
3314   E868 81 57       			cmpa	#$57					;CSUM CMOS RAM
3315   E86A             			ifne
3315   E86A             
3315   E86A 27 FE       
3316   E86C BD EF 7D    clear_all			jsr	factory_zeroaudits		;Restore Factory Settings and Zero Audit Totals
3317   E86F             			endif
3317   E86F             
3317   E86F             
3317   E86F             
3317   E86F             
3317   E86F             
3317   E86F~            			endif
3317   E86F~            			endif
3317   E86F             
3317   E86F~            			endif
3317   E86F~            			endif
3317   E86F             
3317   E86B             
3317   E86B 03          
3317   E86C             
3317   E86C             
3317   E86C~            			endif
3317   E86C~            			endif
3317   E86C~            			endif
3317   E86C             
3317   E86F             
3317   E86F~            			endif
3317   E86F~            			endif
3317   E86F             
3318   E86F CE 01 6E    			ldx	#aud_currentcredits		;Current Credits
3319   E872 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3320   E875 97 5A       			staa	cred_b0
3321   E877 BD FE 1F    			jsr	cmos_a				;CMOS, X -> A Audit 50 Command
3322   E87A 6F 00       			clr	$00,X
3323   E87C 6F 01       			clr	$01,X
3324   E87E 81 15       			cmpa	#$15					;Auto-Cycle?
3325   E880             			ifeq
3325   E880             
3325   E880 26 FE       
3326   E882 CE FE AC    				ldx	#st_autocycle			;Set-Up Auto Cycle Mode
3327   E885 BD EA C4    				jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
3328   E888             			endif
3328   E888             
3328   E888             
3328   E888             
3328   E888             
3328   E888             
3328   E888~            			endif
3328   E888~            			endif
3328   E888             
3328   E888~            			endif
3328   E888~            			endif
3328   E888             
3328   E881             
3328   E881 06          
3328   E882             
3328   E882             
3328   E882~            			endif
3328   E882~            			endif
3328   E882~            			endif
3328   E882             
3328   E888             
3328   E888~            			endif
3328   E888~            			endif
3328   E888             
3329   E888 81 45       			cmpa	#$45
3330   E88A 27 E0       			beq	clear_all				;Restore Factory Setting/Zero Audits
3331   E88C 81 35       			cmpa	#$35
3332   E88E             			ifeq						;Zero Audits
3332   E88E             
3332   E88E 26 FE       
3333   E890 BD EF 6F    				jsr	reset_audits			;(Reset Audits 0100-0165)
3334   E893             			endif
3334   E893             
3334   E893             
3334   E893             
3334   E893             
3334   E893             
3334   E893~            			endif
3334   E893~            			endif
3334   E893             
3334   E893~            			endif
3334   E893~            			endif
3334   E893             
3334   E88F             
3334   E88F 03          
3334   E890             
3334   E890             
3334   E890~            			endif
3334   E890~            			endif
3334   E890~            			endif
3334   E890             
3334   E893             
3334   E893~            			endif
3334   E893~            			endif
3334   E893             
3335   E893 BD F7 2C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
3336   E896 7A 00 61    			dec	switch_debounced
3337   E899 BD F8 9A    			jsr	clear_displays			;Blank all Player Displays (buffer 0)
3338   E89C 97 3B       			staa	score_p1_b0+3			;Set player one score to '00'
3339   E89E 0E          			cli	
3340   E89F FE E0 B3    			ldx	gr_reset_hook_ptr
3341   E8A2 AD 00       			jsr	$00,X					;JSR GameROM
3342   E8A4 CE FA 34    			ldx	#powerup_init			;Jump to Game Over Mode
3343   E8A7 BD EA C4    			jsr	newthread_06			;Start the thread
3344   E8AA 7E E9 FC    			jmp	check_threads			;Run the loop
3345   E8AD             			
3346   E8AD             ;************************************************************************************
3347   E8AD             ;* Begin Main Loop - This is the end of all initialization and the start of the loop
3348   E8AD             ;*                   that runs consistently to support the VM.
3349   E8AD             ;************************************************************************************			
3350   E8AD CE 00 AD    main			ldx	#vm_base
3351   E8B0 DF B3       			stx	vm_tail_thread			;Current VM Routine being run
3352   E8B2 DF B1       			stx	current_thread			;Current VM Routine being run
3353   E8B4 FE E0 B5    			ldx	gr_main_hook_ptr
3354   E8B7 AD 00       			jsr	$00,X					;Game ROM:Main Loop Hook
3355   E8B9 0F          			sei	
3356   E8BA 96 95       			ldaa	irqcount16				;IRQ Counter, Incremented every 16 IRQ's
3357   E8BC 7F 00 95    			clr	irqcount16				;Reset the counter
3358   E8BF 0E          			cli	
3359   E8C0 97 AC       			staa	irqcount				;Put the data into counter holder, use later
3360   E8C2 96 CB       			ldaa	flags_selftest			;See if we are in test mode
3361   E8C4             			ifne
3361   E8C4             
3361   E8C4 27 FE       
3362   E8C6 7E E9 46    				jmp	vm_irqcheck				;If so, then skip a bunch of stuff...
3363   E8C9             			endif
3363   E8C9             
3363   E8C9             
3363   E8C9             
3363   E8C9             
3363   E8C9             
3363   E8C9~            			endif
3363   E8C9~            			endif
3363   E8C9             
3363   E8C9~            			endif
3363   E8C9~            			endif
3363   E8C9             
3363   E8C5             
3363   E8C5 03          
3363   E8C6             
3363   E8C6             
3363   E8C6~            			endif
3363   E8C6~            			endif
3363   E8C6~            			endif
3363   E8C6             
3363   E8C9             
3363   E8C9~            			endif
3363   E8C9~            			endif
3363   E8C9             
3364   E8C9 B6 28 01    			ldaa	pia_disp_digit_ctrl		;Check the Advance Switch
3365   E8CC             			ifmi
3365   E8CC             
3365   E8CC 2A FE       
3366   E8CE CE FC 23    				ldx	#selftest_entry
3367   E8D1 BD EA C4    				jsr	newthread_06			;Create the diagnostics thread
3368   E8D4             			endif
3368   E8D4             
3368   E8D4             
3368   E8D4             
3368   E8D4             
3368   E8D4             
3368   E8D4~            			endif
3368   E8D4~            			endif
3368   E8D4             
3368   E8D4~            			endif
3368   E8D4~            			endif
3368   E8D4             
3368   E8CD             
3368   E8CD 06          
3368   E8CE             
3368   E8CE             
3368   E8CE~            			endif
3368   E8CE~            			endif
3368   E8CE~            			endif
3368   E8CE             
3368   E8D4             
3368   E8D4~            			endif
3368   E8D4~            			endif
3368   E8D4             
3369   E8D4 CE 00 00    checkswitch		ldx	#ram_base
3370   E8D7             			begin
3370   E8D7             
3371   E8D7 A6 81       				ldaa	switch_b4,X
3372   E8D9 43          				coma	
3373   E8DA A4 71       				anda	switch_pending,X
3374   E8DC             				ifne
3374   E8DC             
3374   E8DC 27 FE       
3375   E8DE BD EE 61    					jsr	check_sw_close				;Switch Closed?
3376   E8E1             				endif
3376   E8E1             
3376   E8E1             
3376   E8E1             
3376   E8E1             
3376   E8E1             
3376   E8E1~            				endif
3376   E8E1~            				endif
3376   E8E1             
3376   E8E1~            				endif
3376   E8E1~            				endif
3376   E8E1             
3376   E8DD             
3376   E8DD 03          
3376   E8DE             
3376   E8DE             
3376   E8DE~            				endif
3376   E8DE~            				endif
3376   E8DE~            				endif
3376   E8DE             
3376   E8E1             
3376   E8E1~            				endif
3376   E8E1~            				endif
3376   E8E1             
3377   E8E1 A6 81       				ldaa	switch_b4,X
3378   E8E3 A4 79       				anda	switch_aux,X
3379   E8E5             				ifne
3379   E8E5             
3379   E8E5 27 FE       
3380   E8E7 BD EE BB    					jsr	check_sw_open				;Switch Open?
3381   E8EA             				endif
3381   E8EA             
3381   E8EA             
3381   E8EA             
3381   E8EA             
3381   E8EA             
3381   E8EA~            				endif
3381   E8EA~            				endif
3381   E8EA             
3381   E8EA~            				endif
3381   E8EA~            				endif
3381   E8EA             
3381   E8E6             
3381   E8E6 03          
3381   E8E7             
3381   E8E7             
3381   E8E7~            				endif
3381   E8E7~            				endif
3381   E8E7~            				endif
3381   E8E7             
3381   E8EA             
3381   E8EA~            				endif
3381   E8EA~            				endif
3381   E8EA             
3382   E8EA 08          				inx	
3383   E8EB 8C 00 08    				cpx	#$0008
3384   E8EE             			eqend
3384   E8EE             
3384   E8EE             
3384   E8EE~            			eqend
3384   E8EE~            			eqend
3384   E8EE~            			eqend
3384   E8EE             
3384   E8EE 26 E7       
3384   E8F0             
3384   E8F0~            			eqend
3384   E8F0~            			eqend
3384   E8F0             
3385   E8F0 D6 D6       time			ldab	flag_timer_bip			;Ball Timer Flag
3386   E8F2 27 19       			beq	switches
3387   E8F4 96 AC       			ldaa	irqcount				;Number of IRQ's since last
3388   E8F6 DE D4       			ldx	minutetimer
3389   E8F8 BD EE FF    			jsr	xplusa				;X = X + A
3390   E8FB DF D4       			stx	minutetimer
3391   E8FD 8C 0E FF    			cpx	#irq_per_minute
3392   E900 2B 0B       			bmi	switches				;Not 1 minute yet
3393   E902 5F          			clrb	
3394   E903 D7 D4       			stab	minutetimer				;Clear the Minute Timer
3395   E905 D7 D5       			stab	minutetimer+1
3396   E907 CE 01 26    			ldx	#aud_avgballtime			;AUD: Ball time in Minutes
3397   E90A BD F7 7F    			jsr	ptrx_plus_1				;Add 1 to data at X
3398   E90D             			
3399   E90D CE 11 00    switches		ldx	#switch_queue
3400   E910 9C 96       next_sw		cpx	switch_queue_pointer		;Check Buffer Pointer
3401   E912             			ifne
3401   E912             
3401   E912 27 FE       
3402   E914 A6 00       				ldaa	$00,X					;Command Timer
3403   E916 90 AC       				suba	irqcount				;Subtract our IRQ's
3404   E918             				iflo						;Ready to run?
3404   E918             
3404   E918 22 FE       
3405   E91A DF A8       					stx	sys_temp_w3				;Yes!
3406   E91C A6 01       					ldaa	$01,X					;Encoded Switch #
3407   E91E 97 A5       					staa	sw_encoded
3408   E920 7F 00 A0    					clr	sys_temp1
3409   E923 16          					tab	
3410   E924 57          					asrb	
3411   E925 57          					asrb	
3412   E926 57          					asrb	
3413   E927 D7 A1       					stab	sys_temp2
3414   E929 BD EB 8E    					jsr	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
3415   E92C D7 A2       					stab	sys_temp3
3416   E92E DE A0       					ldx	sys_temp1
3417   E930 A6 61       					ldaa	switch_debounced,X
3418   E932 97 A4       					staa	sys_temp5
3419   E934 BD EE 04    					jsr	sw_down
3420   E937 DE A8       					ldx	sys_temp_w3
3421   E939 24 07       					bcc	sw_break
3422   E93B BD EF 0F    					jsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
3423   E93E 20 D0       					bra	next_sw
3424   E940             				endif
3424   E940             
3424   E940             
3424   E940             
3424   E940             
3424   E940             
3424   E940~            				endif
3424   E940~            				endif
3424   E940             
3424   E940~            				endif
3424   E940~            				endif
3424   E940             
3424   E919             
3424   E919 26          
3424   E91A             
3424   E91A             
3424   E91A~            				endif
3424   E91A~            				endif
3424   E91A~            				endif
3424   E91A             
3424   E940             
3424   E940~            				endif
3424   E940~            				endif
3424   E940             
3425   E940 A7 00       				staa	$00,X
3426   E942 08          sw_break			inx	
3427   E943 08          				inx	
3428   E944 20 CA       				bra	next_sw
3429   E946             			endif
3429   E946             
3429   E946             
3429   E946             
3429   E946             
3429   E946             
3429   E946~            			endif
3429   E946~            			endif
3429   E946             
3429   E946~            			endif
3429   E946~            			endif
3429   E946             
3429   E913             
3429   E913 32          
3429   E914             
3429   E914             
3429   E914~            			endif
3429   E914~            			endif
3429   E914~            			endif
3429   E914             
3429   E946             
3429   E946~            			endif
3429   E946~            			endif
3429   E946             
3430   E946             
3431   E946             			;We come back in here if we are in auto-cycle mode...
3432   E946             						
3433   E946 DE AD       vm_irqcheck		ldx	vm_base				;Check the start of the vm loop
3434   E948             			begin
3434   E948             
3435   E948 27 0D       				beq	flashlamp
3436   E94A A6 02       				ldaa	$02,X
3437   E94C 90 AC       				suba	irqcount			;Subtract the number of IRQ loops completed
3438   E94E             				ifcs
3438   E94E             
3438   E94E 24 FE       
3439   E950 4F          					clra					;Clear it so it can be run next loop
3440   E951             				endif
3440   E951             
3440   E951             
3440   E951             
3440   E951             
3440   E951             
3440   E951~            				endif
3440   E951~            				endif
3440   E951             
3440   E951~            				endif
3440   E951~            				endif
3440   E951             
3440   E94F             
3440   E94F 01          
3440   E950             
3440   E950             
3440   E950~            				endif
3440   E950~            				endif
3440   E950~            				endif
3440   E950             
3440   E951             
3440   E951~            				endif
3440   E951~            				endif
3440   E951             
3441   E951 A7 02       				staa	$02,X
3442   E953 EE 00       				ldx	$00,X
3443   E955             			loopend
3443   E955             
3443   E955             
3443   E955~            			loopend
3443   E955~            			loopend
3443   E955~            			loopend
3443   E955             
3443   E955 20 F1       
3443   E957             
3443   E957~            			loopend
3443   E957~            			loopend
3443   E957             
3444   E957             			
3445   E957 96 B6       flashlamp		ldaa	lamp_flash_count		;Timer for Flashing Lamps
3446   E959 90 AC       			suba	irqcount			;Subtract the IRQ's
3447   E95B             			iflo
3447   E95B             
3447   E95B 22 FE       
3448   E95D CE 00 00    				ldx	#ram_base
3449   E960 C6 08       				ldab	#$08
3450   E962             				begin
3450   E962             
3451   E962 A6 10       					ldaa	lampbuffer0,X			;Invert Selected Lamps.
3452   E964 A8 30       					eora	lampflashflag,X
3453   E966 A7 10       					staa	lampbuffer0,X
3454   E968 08          					inx	
3455   E969 5A          					decb	
3456   E96A             				eqend
3456   E96A             
3456   E96A             
3456   E96A~            				eqend
3456   E96A~            				eqend
3456   E96A~            				eqend
3456   E96A             
3456   E96A 26 F6       
3456   E96C             
3456   E96C~            				eqend
3456   E96C~            				eqend
3456   E96C             
3457   E96C 96 B5       				ldaa	lamp_flash_rate		;Get Reset Value
3458   E96E             			endif
3458   E96E             
3458   E96E             
3458   E96E             
3458   E96E             
3458   E96E             
3458   E96E~            			endif
3458   E96E~            			endif
3458   E96E             
3458   E96E~            			endif
3458   E96E~            			endif
3458   E96E             
3458   E95C             
3458   E95C 11          
3458   E95D             
3458   E95D             
3458   E95D~            			endif
3458   E95D~            			endif
3458   E95D~            			endif
3458   E95D             
3458   E96E             
3458   E96E~            			endif
3458   E96E~            			endif
3458   E96E             
3459   E96E 97 B6       			staa	lamp_flash_count			;Reset the Lamp Timer
3460   E970             			
3461   E970 96 94       solq			ldaa	solenoid_counter			;Solenoid Counter
3462   E972             			ifeq						;Skip if Counter hasnt Expired
3462   E972             
3462   E972 26 FE       
3463   E974 CE 11 18    				ldx	#sol_queue				;Start at bottom of Queue
3464   E977 9C 98       				cpx	solenoid_queue_pointer		
3465   E979             				ifne						;Do we have any to do?
3465   E979             
3465   E979 27 FE       
3466   E97B A6 00       					ldaa	$00,X					;Takes lowest Solenoid # into A
3467   E97D             											;We only do 1 solenoid at a time
3468   E97D             					begin
3468   E97D             
3469   E97D E6 01       						ldab	$01,X					;Moves the rest down into place
3470   E97F E7 00       						stab	$00,X
3471   E981 08          						inx	
3472   E982 9C 98       						cpx	solenoid_queue_pointer
3473   E984             					eqend
3473   E984             
3473   E984             
3473   E984~            					eqend
3473   E984~            					eqend
3473   E984~            					eqend
3473   E984             
3473   E984 26 F7       
3473   E986             
3473   E986~            					eqend
3473   E986~            					eqend
3473   E986             
3474   E986 09          					dex	
3475   E987 DF 98       					stx	solenoid_queue_pointer		;Adjust Pointer to end of list
3476   E989 BD EB 47    					jsr	set_solenoid			;Turn On/Off Solenoid (Solenoid # in A)
3477   E98C             				endif
3477   E98C             
3477   E98C             
3477   E98C             
3477   E98C             
3477   E98C             
3477   E98C~            				endif
3477   E98C~            				endif
3477   E98C             
3477   E98C~            				endif
3477   E98C~            				endif
3477   E98C             
3477   E97A             
3477   E97A 11          
3477   E97B             
3477   E97B             
3477   E97B~            				endif
3477   E97B~            				endif
3477   E97B~            				endif
3477   E97B             
3477   E98C             
3477   E98C~            				endif
3477   E98C~            				endif
3477   E98C             
3478   E98C             			endif
3478   E98C             
3478   E98C             
3478   E98C             
3478   E98C             
3478   E98C             
3478   E98C~            			endif
3478   E98C~            			endif
3478   E98C             
3478   E98C~            			endif
3478   E98C~            			endif
3478   E98C             
3478   E973             
3478   E973 18          
3478   E974             
3478   E974             
3478   E974~            			endif
3478   E974~            			endif
3478   E974~            			endif
3478   E974             
3478   E98C             
3478   E98C~            			endif
3478   E98C~            			endif
3478   E98C             
3479   E98C             			
3480   E98C 96 C1       snd_queue		ldaa	sys_soundflags			;Sound Flag??
3481   E98E 27 55       			beq	doscoreq				;If zero, time to check for the score queue sound/pts
3482   E990 96 BA       			ldaa	cur_sndflags
3483   E992 85 10       			bita	#$10					;Is this an immediate or timed sound?
3484   E994             			ifne
3484   E994             
3484   E994 27 FE       
3485   E996 F6 21 02    				ldab	pia_comma_data			;Do immediate, but only if sound board is not busy.
3486   E999 C4 20       				andb	#$20
3487   E99B 27 5F       				beq	check_threads			;Get Outta Here
3488   E99D             			else
3488   E99D             
3488   E99D             
3488   E99D             
3488   E99D             
3488   E995             
3488   E995             
3488   E995             
3488   E995~            			else
3488   E995~            			else
3488   E995~            			else
3488   E995~            			else
3488   E995             
3488   E995~            			else
3488   E995~            			else
3488   E995~            			else
3488   E995~            			else
3488   E995             
3488   E995             
3488   E995 09          
3488   E99D             
3488   E99D 20 FE       
3488   E99F             
3488   E99F             
3488   E99F             
3488   E99F~            			else
3488   E99F~            			else
3488   E99F~            			else
3488   E99F~            			else
3488   E99F~            			else
3488   E99F             
3488   E99F~            			else
3488   E99F~            			else
3488   E99F             
3488   E99F~            			else
3488   E99F~            			else
3488   E99F             
3489   E99F 96 BE       				ldaa	soundirqcount+1			;LSB Sound IRQ Counter
3490   E9A1 90 AC       				suba	irqcount				;Subtract the number of IRQ's that have cycled
3491   E9A3 97 BE       				staa	soundirqcount+1
3492   E9A5 96 BD       				ldaa	soundirqcount			;Update the counter
3493   E9A7 82 00       				sbca	#$00
3494   E9A9 97 BD       				staa	soundirqcount			;Carry over to MSB of couter as well
3495   E9AB 24 4F       				bcc	check_threads			;Leave if counter has not gone under zero.
3496   E9AD             			endif
3496   E9AD             
3496   E9AD             
3496   E9AD             
3496   E9AD             
3496   E9AD             
3496   E9AD~            			endif
3496   E9AD~            			endif
3496   E9AD             
3496   E9AD~            			endif
3496   E9AD~            			endif
3496   E9AD             
3496   E99E             
3496   E99E 0E          
3496   E99F             
3496   E99F             
3496   E99F~            			endif
3496   E99F~            			endif
3496   E99F~            			endif
3496   E99F             
3496   E9AD             
3496   E9AD~            			endif
3496   E9AD~            			endif
3496   E9AD             
3497   E9AD 86 7F       			ldaa	#$7F
3498   E9AF BD ED A0    			jsr	send_snd			;Send A->Sound Board (mute?)
3499   E9B2 96 BA       			ldaa	cur_sndflags		;Is this a simple sound
3500   E9B4             			ifpl					;yes
3500   E9B4             
3500   E9B4 2B FE       
3501   E9B6 7A 00 B8    				dec	soundcount
3502   E9B9 27 1C       				beq	_sndnext			;Sound Repeat Counter
3503   E9BB D6 C1       				ldab	sys_soundflags		;
3504   E9BD             				ifpl
3504   E9BD             
3504   E9BD 2B FE       
3505   E9BF DE BF       					ldx	soundindex_com
3506   E9C1 DF BD       					stx	soundirqcount
3507   E9C3 96 B9       					ldaa	lastsound
3508   E9C5 BD ED 9E    					jsr	send_snd_save		;Send the Command, Save in 'lastsound'
3509   E9C8 20 32       					bra	check_threads		;Get Outta here.
3510   E9CA             				endif
3510   E9CA             
3510   E9CA             
3510   E9CA             
3510   E9CA             
3510   E9CA             
3510   E9CA~            				endif
3510   E9CA~            				endif
3510   E9CA             
3510   E9CA~            				endif
3510   E9CA~            				endif
3510   E9CA             
3510   E9BE             
3510   E9BE 0B          
3510   E9BF             
3510   E9BF             
3510   E9BF~            				endif
3510   E9BF~            				endif
3510   E9BF~            				endif
3510   E9BF             
3510   E9CA             
3510   E9CA~            				endif
3510   E9CA~            				endif
3510   E9CA             
3511   E9CA 8A 80       				oraa	#$80
3512   E9CC 97 BA       				staa	cur_sndflags		;make it a complex sound now.
3513   E9CE DE BF       				ldx	soundindex_com
3514   E9D0 DF BB       				stx	soundptr
3515   E9D2             			endif
3515   E9D2             
3515   E9D2             
3515   E9D2             
3515   E9D2             
3515   E9D2             
3515   E9D2~            			endif
3515   E9D2~            			endif
3515   E9D2             
3515   E9D2~            			endif
3515   E9D2~            			endif
3515   E9D2             
3515   E9B5             
3515   E9B5 1C          
3515   E9B6             
3515   E9B6             
3515   E9B6~            			endif
3515   E9B6~            			endif
3515   E9B6~            			endif
3515   E9B6             
3515   E9D2             
3515   E9D2~            			endif
3515   E9D2~            			endif
3515   E9D2             
3516   E9D2 BD ED A7    			jsr	do_complex_snd
3517   E9D5 20 25       			bra	check_threads		;Get Outta Here.
3518   E9D7 D6 C6       _sndnext		ldab	next_sndcnt			;Here if we are done iterating the sound command.
3519   E9D9 27 0A       			beq	doscoreq			;Check the scoring queue
3520   E9DB 96 C7       			ldaa	next_sndcmd
3521   E9DD BD ED 53    			jsr	isnd_mult			;Play Sound Index(A),(B)Times
3522   E9E0 7F 00 C6    			clr	next_sndcnt
3523   E9E3 20 17       			bra	check_threads		;Get Outta Here.
3524   E9E5             			
3525   E9E5 7F 00 C1    doscoreq		clr	sys_soundflags		;Reset the Sound Flag??
3526   E9E8 CE 11 27    			ldx	#$1127			;See if there is something in this stack
3527   E9EB 86 08       			ldaa	#$08
3528   E9ED             			begin
3528   E9ED             
3529   E9ED 08          				inx	
3530   E9EE 4A          				deca	
3531   E9EF 2B 0B       				bmi	check_threads		;Nuttin' Honey, Skip this Sound Crap!
3532   E9F1 E6 00       				ldab	$00,X
3533   E9F3             			neend					;Nuttin' Honey, Check next Entry!
3533   E9F3             
3533   E9F3             
3533   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
3533   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
3533   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
3533   E9F3             
3533   E9F3 27 F8       
3533   E9F5             
3533   E9F5~            			neend					;Nuttin' Honey, Check next Entry!
3533   E9F5~            			neend					;Nuttin' Honey, Check next Entry!
3533   E9F5             
3534   E9F5 6A 00       			dec	$00,X				;Re-Adjust the Sound Command So Sound #00 will still work!
3535   E9F7 8A 08       			oraa	#$08
3536   E9F9 BD EB FE    			jsr	dsnd_pts			;Add Points(A),Play Digit Sound
3537   E9FC             			
3538   E9FC CE 00 AD    check_threads	ldx	#vm_base
3539   E9FF             			begin
3539   E9FF             
3540   E9FF EE 00       nextthread			ldx	$00,X				;Check to see if we have a routine to do?
3541   EA01             				ifeq
3541   EA01             
3541   EA01 26 FE       
3542   EA03 7E E8 AD    					jmp main				;Back to the start of the main loop
3543   EA06             				endif
3543   EA06             
3543   EA06             
3543   EA06             
3543   EA06             
3543   EA06             
3543   EA06~            				endif
3543   EA06~            				endif
3543   EA06             
3543   EA06~            				endif
3543   EA06~            				endif
3543   EA06             
3543   EA02             
3543   EA02 03          
3543   EA03             
3543   EA03             
3543   EA03~            				endif
3543   EA03~            				endif
3543   EA03~            				endif
3543   EA03             
3543   EA06             
3543   EA06~            				endif
3543   EA06~            				endif
3543   EA06             
3544   EA06 A6 02       				ldaa	$02,X				;Timer expired?
3545   EA08             			eqend					;No, goto next one.
3545   EA08             
3545   EA08             
3545   EA08~            			eqend					;No, goto next one.
3545   EA08~            			eqend					;No, goto next one.
3545   EA08~            			eqend					;No, goto next one.
3545   EA08             
3545   EA08 26 F5       
3545   EA0A             
3545   EA0A~            			eqend					;No, goto next one.
3545   EA0A~            			eqend					;No, goto next one.
3545   EA0A             
3546   EA0A DF B1       			stx	current_thread		;Yes, lets do this one now.
3547   EA0C DF B3       			stx	vm_tail_thread		;Current VM Routine being run
3548   EA0E C6 08       			ldab	#$08
3549   EA10             			begin
3549   EA10             
3550   EA10 A6 03       				ldaa	$03,X
3551   EA12 36          				psha	
3552   EA13 08          				inx	
3553   EA14 5A          				decb	
3554   EA15             			eqend
3554   EA15             
3554   EA15             
3554   EA15~            			eqend
3554   EA15~            			eqend
3554   EA15~            			eqend
3554   EA15             
3554   EA15 26 F9       
3554   EA17             
3554   EA17~            			eqend
3554   EA17~            			eqend
3554   EA17             
3555   EA17 A6 04       			ldaa	$04,X
3556   EA19 36          			psha	
3557   EA1A A6 03       			ldaa	$03,X
3558   EA1C 36          			psha	
3559   EA1D A6 06       			ldaa	$06,X
3560   EA1F E6 07       			ldab	$07,X
3561   EA21 EE 08       			ldx	$08,X
3562   EA23 39          			rts					;Jump to the offending routine.
3563   EA24             
3564   EA24             ;**************************************************************************
3565   EA24             ;* This is similar to 'addthread' below but the timer data does not follow
3566   EA24             ;* the jsr. Instead, the timer data is pre-loaded into 'thread_timer_byte'.
3567   EA24             ;* The thread is started in the same manner as described below.
3568   EA24             ;**************************************************************************			
3569   EA24 97 9C       delaythread		staa	temp2				;Routine returns here when done
3570   EA26 DF 9A       			stx	temp1
3571   EA28 96 B7       			ldaa	thread_timer_byte
3572   EA2A 30          			tsx					;Get where we came from
3573   EA2B EE 00       			ldx	$00,X				;Get the address of the new thread
3574   EA2D 20 0A       			bra	dump_thread
3575   EA2F             
3576   EA2F             ;**************************************************************************
3577   EA2F             ;* Adds a new thread to the VM. The data for this routine is contained 
3578   EA2F             ;* directly after the jsr to this routine. A single byte follows the
3579   EA2F             ;* jsr and is the timer byte used for the delay until the thread starts.
3580   EA2F             ;* The actual address directly after the timer byte is where the thread
3581   EA2F             ;* will start running. Example:
3582   EA2F             ;*
3583   EA2F             ;* 	jsr addthread
3584   EA2F             ;*    .db 05		;This is the timer byte
3585   EA2F             ;*	lda #FF		;This code is executed as the thread.
3586   EA2F             ;***************************************************************************
3587   EA2F DF 9A       addthread		stx	temp1
3588   EA31 97 9C       			staa	temp2
3589   EA33 30          			tsx	
3590   EA34 EE 00       			ldx	$00,X				;Return Address from RTS to $EA2F
3591   EA36 A6 00       			ldaa	$00,X				;New Timer Value
3592   EA38 08          			inx	
3593   EA39             
3594   EA39             ;**************************************************************************
3595   EA39             ;* Will take all variables in RAM and dump them into the thread data 
3596   EA39             ;* structure for next time. This gives the thread memory over executions
3597   EA39             ;* until it is killed.
3598   EA39             ;**************************************************************************			
3599   EA39 DF 9E       dump_thread		stx	temp3				;Now X points the the replacement address
3600   EA3B DE B1       			ldx	current_thread		;Current VM Routine being run
3601   EA3D A7 02       			staa	$02,X				;Timer For next Time
3602   EA3F 96 9E       			ldaa	temp3
3603   EA41 A7 0B       			staa	$0B,X
3604   EA43 96 9F       			ldaa	temp3+1
3605   EA45 A7 0C       			staa	$0C,X
3606   EA47 E7 0F       			stab	$0F,X
3607   EA49 96 9C       			ldaa	temp2
3608   EA4B A7 0E       			staa	$0E,X
3609   EA4D 96 9A       			ldaa	temp1
3610   EA4F A7 10       			staa	$10,X
3611   EA51 96 9B       			ldaa	temp1+1
3612   EA53 A7 11       			staa	$11,X
3613   EA55 31          			ins	
3614   EA56 31          			ins	
3615   EA57 C6 08       			ldab	#$08
3616   EA59             			begin
3616   EA59             
3617   EA59 32          				pula	
3618   EA5A A7 0A       				staa	$0A,X
3619   EA5C 09          				dex	
3620   EA5D 5A          				decb	
3621   EA5E             			eqend
3621   EA5E             
3621   EA5E             
3621   EA5E~            			eqend
3621   EA5E~            			eqend
3621   EA5E~            			eqend
3621   EA5E             
3621   EA5E 26 F9       
3621   EA60             
3621   EA60~            			eqend
3621   EA60~            			eqend
3621   EA60             
3622   EA60 DE B1       			ldx	current_thread			;Current VM Routine being run
3623   EA62             			begin
3623   EA62             
3624   EA62 8E 13 F7    				lds	#$13F7			;Restore the stack.
3625   EA65 20 98       				bra	nextthread			;Go check the Control Routine for another job.
3626   EA67             				
3627   EA67 CE 00 AD    killthread			ldx	#vm_base
3628   EA6A             				begin
3628   EA6A             
3629   EA6A DF 9C       					stx	temp2					;Thread that points to killed thread
3630   EA6C EE 00       					ldx	$00,X
3631   EA6E 27 8C       					beq	check_threads			;Nothing on VM
3632   EA70 9C B1       					cpx	current_thread			;Current VM Routine being run
3633   EA72             				eqend						;If $B1 != *$00AD check next entry
3633   EA72             
3633   EA72             
3633   EA72~            				eqend						;If $B1 != *$00AD check next entry
3633   EA72~            				eqend						;If $B1 != *$00AD check next entry
3633   EA72~            				eqend						;If $B1 != *$00AD check next entry
3633   EA72             
3633   EA72 26 F6       
3633   EA74             
3633   EA74~            				eqend						;If $B1 != *$00AD check next entry
3633   EA74~            				eqend						;If $B1 != *$00AD check next entry
3633   EA74             
3634   EA74 8D 56       				bsr	killthread_sp			;Remove Entry (X)($B1) From VM
3635   EA76             			loopend
3635   EA76             
3635   EA76             
3635   EA76~            			loopend
3635   EA76~            			loopend
3635   EA76~            			loopend
3635   EA76             
3635   EA76 20 EA       
3635   EA78             
3635   EA78~            			loopend
3635   EA78~            			loopend
3635   EA78             
3636   EA78             ;****************************************************************************
3637   EA78             ;* This is the main routine in charge of adding new threads to the
3638   EA78             ;* virtual machine. The following variables are passed.
3639   EA78             ;*
3640   EA78             ;*	A: Pushed into VMregA
3641   EA78             ;* 	B: Pushed into VMregB
3642   EA78             ;*	X: Thread Initial Program Counter
3643   EA78             ;* 	
3644   EA78             ;* In addition, the following two variables contain data for the
3645   EA78             ;* thread.
3646   EA78             ;*	thread_priority:		Unique Identifier to classify thread
3647   EA78             ;*	system_temp_word2:	???
3648   EA78             ;*
3649   EA78             ;* See header definition file for specifics on thread class structure
3650   EA78             ;*
3651   EA78             ;* Returns: Carry Cleared if New Thread was added
3652   EA78             ;*          Carry Set if VM was full
3653   EA78             ;*
3654   EA78             ;****************************************************************************
3655   EA78 DF 9A       newthread_sp	stx	temp1
3656   EA7A 0D          			sec	
3657   EA7B DE AF       			ldx	vm_nextslot			;Get Next Available Slot Address
3658   EA7D             			ifne
3658   EA7D             
3658   EA7D 27 FE       
3659   EA7F 36          				psha	
3660   EA80 A6 00       				ldaa	$00,X				;\
3661   EA82 97 AF       				staa	vm_nextslot			;|---- Set New Next Available Slot Address
3662   EA84 A6 01       				ldaa	$01,X				;|
3663   EA86 97 B0       				staa	vm_nextslot+1		;/
3664   EA88 DF 9C       				stx	temp2				;Temp2 = New Thread Base Address
3665   EA8A DE B3       				ldx	vm_tail_thread		;This is the last thread in the vm, it has the tail
3666   EA8C A6 00       				ldaa	$00,X				;\
3667   EA8E 97 9E       				staa	temp3				;|
3668   EA90 A6 01       				ldaa	$01,X				;|---- Store the running threads next pointer in temp3
3669   EA92 97 9F       				staa	temp3+1			;/
3670   EA94 96 9C       				ldaa	temp2				;\
3671   EA96 A7 00       				staa	$00,X				;|
3672   EA98 96 9D       				ldaa	temp2+1			;|---- Put the new thread into the running threads next pointer
3673   EA9A A7 01       				staa	$01,X				;/
3674   EA9C EE 00       				ldx	$00,X
3675   EA9E DF B3       				stx	vm_tail_thread		;Make the new thread the last thread
3676   EAA0 96 9E       				ldaa	temp3				;\
3677   EAA2 A7 00       				staa	$00,X				;|
3678   EAA4 96 9F       				ldaa	temp3+1			;|---- Set the Next pointer of the new thread to the 
3679   EAA6 A7 01       				staa	$01,X				;/     previous threads next pointer.
3680   EAA8 96 9A       				ldaa	temp1
3681   EAAA A7 0B       				staa	$0B,X
3682   EAAC 96 9B       				ldaa	temp1+1
3683   EAAE A7 0C       				staa	$0C,X
3684   EAB0 96 AA       				ldaa	thread_priority		;Store the priority
3685   EAB2 A7 0D       				staa	$0D,X
3686   EAB4 96 A6       				ldaa	sys_temp_w2			;Push variables from sys_temp_w2
3687   EAB6 A7 10       				staa	$10,X
3688   EAB8 96 A7       				ldaa	sys_temp_w2+1
3689   EABA A7 11       				staa	$11,X
3690   EABC 32          				pula	
3691   EABD A7 0E       				staa	$0E,X				;Store reg A
3692   EABF E7 0F       				stab	$0F,X				;Store reg B
3693   EAC1 6F 02       				clr	$02,X				;Reset the counter
3694   EAC3             			endif
3694   EAC3             
3694   EAC3             
3694   EAC3             
3694   EAC3             
3694   EAC3             
3694   EAC3~            			endif
3694   EAC3~            			endif
3694   EAC3             
3694   EAC3~            			endif
3694   EAC3~            			endif
3694   EAC3             
3694   EA7E             
3694   EA7E 44          
3694   EA7F             
3694   EA7F             
3694   EA7F~            			endif
3694   EA7F~            			endif
3694   EA7F~            			endif
3694   EA7F             
3694   EAC3             
3694   EAC3~            			endif
3694   EAC3~            			endif
3694   EAC3             
3695   EAC3 39          			rts	
3696   EAC4             
3697   EAC4 36          newthread_06	psha	
3698   EAC5 86 06       			ldaa	#$06
3699   EAC7 97 AA       			staa	thread_priority
3700   EAC9 32          			pula	
3701   EACA 20 AC       			bra	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
3702   EACC             
3703   EACC             ;***************************************************************************
3704   EACC             ;* This will remove the current thread from the VM. 
3705   EACC             ;*
3706   EACC             ;* Requires: temp2 holds the thread that points to the thread to be killed	
3707   EACC             ;***************************************************************************		
3708   EACC 36          killthread_sp	psha	
3709   EACD A6 00       			ldaa	$00,X					;\
3710   EACF 97 9A       			staa	temp1					;|--  Get 'next'
3711   EAD1 A6 01       			ldaa	$01,X					;|
3712   EAD3 97 9B       			staa	temp1+1				;/
3713   EAD5 96 AF       			ldaa	vm_nextslot				;\
3714   EAD7 A7 00       			staa	$00,X					;|--  Kill this one by setting next to 0
3715   EAD9 96 B0       			ldaa	vm_nextslot+1			;|
3716   EADB A7 01       			staa	$01,X					;/
3717   EADD DF AF       			stx	vm_nextslot				;Make this new blank spot the next one
3718   EADF 9C B3       			cpx	vm_tail_thread			;Unless this was the tail thread
3719   EAE1             			ifeq
3719   EAE1             
3719   EAE1 26 FE       
3720   EAE3 DE B1       				ldx	current_thread			;Make the current thread the tail
3721   EAE5 DF B3       				stx	vm_tail_thread
3722   EAE7             			endif
3722   EAE7             
3722   EAE7             
3722   EAE7             
3722   EAE7             
3722   EAE7             
3722   EAE7~            			endif
3722   EAE7~            			endif
3722   EAE7             
3722   EAE7~            			endif
3722   EAE7~            			endif
3722   EAE7             
3722   EAE2             
3722   EAE2 04          
3722   EAE3             
3722   EAE3             
3722   EAE3~            			endif
3722   EAE3~            			endif
3722   EAE3~            			endif
3722   EAE3             
3722   EAE7             
3722   EAE7~            			endif
3722   EAE7~            			endif
3722   EAE7             
3723   EAE7 DE 9C       			ldx	temp2					;Get Parent Thread
3724   EAE9 96 9A       			ldaa	temp1					;Store killed thread 'next' into parents 'next'
3725   EAEB A7 00       			staa	$00,X
3726   EAED 96 9B       			ldaa	temp1+1
3727   EAEF A7 01       			staa	$01,X
3728   EAF1 32          			pula						;Save A
3729   EAF2 39          			rts	
3730   EAF3             
3731   EAF3             ;*************************************************
3732   EAF3             ;* Kill Single thread with the given ID
3733   EAF3             ;*
3734   EAF3             ;* Requires: 	A - Level Defintion
3735   EAF3             ;* 			B - Select Mask
3736   EAF3             ;* 
3737   EAF3             ;* If B is $00, then all threads are cleared
3738   EAF3             ;*************************************************			
3739   EAF3 8D 0B       kill_thread		bsr	check_threadid		;Test Thread ID Mask
3740   EAF5             			ifcc					;Return with Carry Set
3740   EAF5             
3740   EAF5 25 FE       
3741   EAF7 8D D3       				bsr	killthread_sp		;Remove Entry (X)($B1) From VM
3742   EAF9 0C          				clc	
3743   EAFA             			endif
3743   EAFA             
3743   EAFA             
3743   EAFA             
3743   EAFA             
3743   EAFA             
3743   EAFA~            			endif
3743   EAFA~            			endif
3743   EAFA             
3743   EAFA~            			endif
3743   EAFA~            			endif
3743   EAFA             
3743   EAF6             
3743   EAF6 03          
3743   EAF7             
3743   EAF7             
3743   EAF7~            			endif
3743   EAF7~            			endif
3743   EAF7~            			endif
3743   EAF7             
3743   EAFA             
3743   EAFA~            			endif
3743   EAFA~            			endif
3743   EAFA             
3744   EAFA 39          			rts	
3745   EAFB             
3746   EAFB             ;*************************************************
3747   EAFB             ;* Kill All threads with the given ID
3748   EAFB             ;*
3749   EAFB             ;* Requires: 	A - Level Definition
3750   EAFB             ;* 			B - Select Mask
3751   EAFB             ;* 
3752   EAFB             ;* If B is $00, then all threads are cleared
3753   EAFB             ;*************************************************
3754   EAFB             kill_threads	begin
3754   EAFB             
3755   EAFB 8D F6       				bsr	kill_thread		;Kill first One
3756   EAFD             			csend				;Repeat if Carry Clear
3756   EAFD             
3756   EAFD             
3756   EAFD~            			csend				;Repeat if Carry Clear
3756   EAFD~            			csend				;Repeat if Carry Clear
3756   EAFD~            			csend				;Repeat if Carry Clear
3756   EAFD             
3756   EAFD 24 FC       
3756   EAFF             
3756   EAFF~            			csend				;Repeat if Carry Clear
3756   EAFF~            			csend				;Repeat if Carry Clear
3756   EAFF             
3757   EAFF 39          			rts	
3758   EB00             
3759   EB00             ;*************************************************
3760   EB00             ;* Checks the VM thread list for threads that 
3761   EB00             ;* qualify agains the bitmasks defined in A and B.
3762   EB00             ;* If a thread qualifies, then this routine will
3763   EB00             ;* return with carry cleared.
3764   EB00             ;*************************************************		
3765   EB00 37          check_threadid	pshb	
3766   EB01 D7 9A       			stab	temp1
3767   EB03 CE 00 AD    			ldx	#vm_base		;Load Start Address
3768   EB06 DF 9C       			stx	temp2			;Store it
3769   EB08 DE AD       			ldx	vm_base		;Load End Address
3770   EB0A 0D          pri_next		sec	
3771   EB0B             			ifne				;Branch if we have reached the end of the VM (Next = 0000)
3771   EB0B             
3771   EB0B 27 FE       
3772   EB0D 16          				tab	
3773   EB0E E8 0D       				eorb	threadobj_id,X		;EOR with Type Code in Current Routine
3774   EB10 53          				comb	
3775   EB11 D4 9A       				andb	temp1
3776   EB13 D1 9A       				cmpb	temp1
3777   EB15             				ifne				;Branch if Bits Dont work
3777   EB15             
3777   EB15 27 FE       
3778   EB17 DF 9C       pri_skipme				stx	temp2
3779   EB19 EE 00       					ldx	threadobj_next,X
3780   EB1B 20 ED       					bra	pri_next		;Goto Next Thread ->
3781   EB1D             				endif
3781   EB1D             
3781   EB1D             
3781   EB1D             
3781   EB1D             
3781   EB1D             
3781   EB1D~            				endif
3781   EB1D~            				endif
3781   EB1D             
3781   EB1D~            				endif
3781   EB1D~            				endif
3781   EB1D             
3781   EB16             
3781   EB16 06          
3781   EB17             
3781   EB17             
3781   EB17~            				endif
3781   EB17~            				endif
3781   EB17~            				endif
3781   EB17             
3781   EB1D             
3781   EB1D~            				endif
3781   EB1D~            				endif
3781   EB1D             
3782   EB1D 9C B1       				cpx	current_thread	;Make sure it isn't this thread
3783   EB1F 27 F6       				beq	pri_skipme		;If it is this thread, skip it!
3784   EB21             			endif
3784   EB21             
3784   EB21             
3784   EB21             
3784   EB21             
3784   EB21             
3784   EB21~            			endif
3784   EB21~            			endif
3784   EB21             
3784   EB21~            			endif
3784   EB21~            			endif
3784   EB21             
3784   EB0C             
3784   EB0C 14          
3784   EB0D             
3784   EB0D             
3784   EB0D~            			endif
3784   EB0D~            			endif
3784   EB0D~            			endif
3784   EB0D             
3784   EB21             
3784   EB21~            			endif
3784   EB21~            			endif
3784   EB21             
3785   EB21 33          			pulb	
3786   EB22 39          			rts	
3787   EB23             			
3788   EB23             ;*****************************************************************	
3789   EB23             ;* Solenoid Queue Processing: This is the routine that is called
3790   EB23             ;* to fire a specific solenoid. It will add the solenoid to the 
3791   EB23             ;* queue. Works from top down. Solenoid Number is in A along with
3792   EB23             ;* data on how to handle solenoid. Format of A is ...
3793   EB23             ;*
3794   EB23             ;*  	XXXZZZZZ	Where: ZZZZZ is solenoid number 00-24
3795   EB23             ;*                       XXX is timer/command
3796   EB23             ;*
3797   EB23             ;*****************************************************************		
3798   EB23 36          solbuf		psha					;Push Solenoid #
3799   EB24 37          			pshb	
3800   EB25 DF 9A       			stx	temp1				;Put X into Temp1
3801   EB27 DE 98       			ldx	solenoid_queue_pointer	;Check Solenoid Buffer
3802   EB29 8C 11 18    			cpx	#sol_queue	
3803   EB2C             			ifne					;Buffer not full
3803   EB2C             
3803   EB2C 27 FE       
3804   EB2E 0D          				sec					;Carry Set if Buffer Full
3805   EB2F 8C 11 28    				cpx	#sol_queue_full		;Buffer Full
3806   EB32             				ifne
3806   EB32             
3806   EB32 27 FE       
3807   EB34 A7 00       _sb01					staa	$00,X				;Insert Solenoid Into Buffer
3808   EB36 08          					inx	
3809   EB37 DF 98       					stx	solenoid_queue_pointer	;Update Pointer
3810   EB39 0C          _sb02					clc					;Carry Cleared on Buffer Add
3811   EB3A             				endif
3811   EB3A             
3811   EB3A             
3811   EB3A             
3811   EB3A             
3811   EB3A             
3811   EB3A~            				endif
3811   EB3A~            				endif
3811   EB3A             
3811   EB3A~            				endif
3811   EB3A~            				endif
3811   EB3A             
3811   EB33             
3811   EB33 06          
3811   EB34             
3811   EB34             
3811   EB34~            				endif
3811   EB34~            				endif
3811   EB34~            				endif
3811   EB34             
3811   EB3A             
3811   EB3A~            				endif
3811   EB3A~            				endif
3811   EB3A             
3812   EB3A 33          				pulb	
3813   EB3B 32          				pula					;Pull Solenoid #
3814   EB3C DE 9A       				ldx	temp1				;Get Back X
3815   EB3E 39          				rts	
3816   EB3F             			endif
3816   EB3F             
3816   EB3F             
3816   EB3F             
3816   EB3F             
3816   EB3F             
3816   EB3F~            			endif
3816   EB3F~            			endif
3816   EB3F             
3816   EB3F~            			endif
3816   EB3F~            			endif
3816   EB3F             
3816   EB2D             
3816   EB2D 11          
3816   EB2E             
3816   EB2E             
3816   EB2E~            			endif
3816   EB2E~            			endif
3816   EB2E~            			endif
3816   EB2E             
3816   EB3F             
3816   EB3F~            			endif
3816   EB3F~            			endif
3816   EB3F             
3817   EB3F D6 94       			ldab	solenoid_counter		;Solenoid Counter
3818   EB41 26 F1       			bne	_sb01
3819   EB43 8D 02       			bsr	set_solenoid		;Turn On/Off Solenoid (Solenoid # in A)
3820   EB45 20 F2       			bra	_sb02
3821   EB47             
3822   EB47             ;***************************************************
3823   EB47             ;* Turns On/Off solenoid.
3824   EB47             ;*
3825   EB47             ;* Requires:	A - XXXZZZZZ
3826   EB47             ;*					
3827   EB47             ;* Where XXX 	= Solenoid Timer/Command
3828   EB47             ;*       ZZZZZ	= Solenoid Number
3829   EB47             ;*
3830   EB47             ;* Example: A = 20 turns on solenoid #00 for 1 IRQ
3831   EB47             ;*              F8 turns on solenoid #18 idefinitely
3832   EB47             ;*              C3 turns on solenoid #03 for 6 IRQ's
3833   EB47             ;*              03 turns off solenoid #03 indefinitely
3834   EB47             ;***************************************************
3835   EB47 37          set_solenoid	pshb	
3836   EB48 16          			tab	
3837   EB49 C4 E0       			andb	#$E0
3838   EB4B             			ifne
3838   EB4B             
3838   EB4B 27 FE       
3839   EB4D C1 E0       				cmpb	#$E0
3840   EB4F             				ifne
3840   EB4F             
3840   EB4F 27 FE       
3841   EB51             					;1-6 goes into counter
3842   EB51 D7 94       					stab	solenoid_counter		;Restore Solenoid Counter to #E0
3843   EB53 8D 1C       					bsr	soladdr			;Get Solenoid PIA address and bitpos
3844   EB55 DF 91       					stx	solenoid_address
3845   EB57 D7 93       					stab	solenoid_bitpos
3846   EB59             				else
3846   EB59             
3846   EB59             
3846   EB59             
3846   EB59             
3846   EB50             
3846   EB50             
3846   EB50             
3846   EB50~            				else
3846   EB50~            				else
3846   EB50~            				else
3846   EB50~            				else
3846   EB50             
3846   EB50~            				else
3846   EB50~            				else
3846   EB50~            				else
3846   EB50~            				else
3846   EB50             
3846   EB50             
3846   EB50 0A          
3846   EB59             
3846   EB59 20 FE       
3846   EB5B             
3846   EB5B             
3846   EB5B             
3846   EB5B~            				else
3846   EB5B~            				else
3846   EB5B~            				else
3846   EB5B~            				else
3846   EB5B~            				else
3846   EB5B             
3846   EB5B~            				else
3846   EB5B~            				else
3846   EB5B             
3846   EB5B~            				else
3846   EB5B~            				else
3846   EB5B             
3847   EB5B             					;Do it now... if at 7
3848   EB5B 8D 14       					bsr	soladdr			;Get Solenoid PIA address and bitpos
3849   EB5D             				endif
3849   EB5D             
3849   EB5D             
3849   EB5D             
3849   EB5D             
3849   EB5D             
3849   EB5D~            				endif
3849   EB5D~            				endif
3849   EB5D             
3849   EB5D~            				endif
3849   EB5D~            				endif
3849   EB5D             
3849   EB5A             
3849   EB5A 02          
3849   EB5B             
3849   EB5B             
3849   EB5B~            				endif
3849   EB5B~            				endif
3849   EB5B~            				endif
3849   EB5B             
3849   EB5D             
3849   EB5D~            				endif
3849   EB5D~            				endif
3849   EB5D             
3850   EB5D 25 0C       				bcs	set_ss_on			;Carry Set: Special Solenoid, these work in reverse
3851   EB5F             				;Here to turn solenoid ON
3852   EB5F 0F          set_ss_off			sei	
3853   EB60 EA 00       				orab	$00,X
3854   EB62 E7 00       set_s_pia			stab	$00,X			;Write Solenoid Data to PIA
3855   EB64 0E          				cli	
3856   EB65 33          				pulb	
3857   EB66 39          				rts					;Outta here!
3858   EB67             			endif
3858   EB67             
3858   EB67             
3858   EB67             
3858   EB67             
3858   EB67             
3858   EB67~            			endif
3858   EB67~            			endif
3858   EB67             
3858   EB67~            			endif
3858   EB67~            			endif
3858   EB67             
3858   EB4C             
3858   EB4C 1A          
3858   EB4D             
3858   EB4D             
3858   EB4D~            			endif
3858   EB4D~            			endif
3858   EB4D~            			endif
3858   EB4D             
3858   EB67             
3858   EB67~            			endif
3858   EB67~            			endif
3858   EB67             
3859   EB67 8D 08       			bsr	soladdr				;Get Solenoid PIA address and bitpos
3860   EB69 25 F4       			bcs	set_ss_off				;Special Solenoids work in reverse
3861   EB6B             			;Here to turn solenoid OFF			
3862   EB6B 53          set_ss_on		comb	
3863   EB6C 0F          			sei	
3864   EB6D E4 00       			andb	$00,X
3865   EB6F 20 F1       			bra	set_s_pia				;Store it now.
3866   EB71             
3867   EB71             ;*************************************************
3868   EB71             ;* Get Physical Address and Bitposition of 
3869   EB71             ;* solenoid number.
3870   EB71             ;*
3871   EB71             ;* Requires:	A - Solenoid Number
3872   EB71             ;* Output:		B - PIA bit position
3873   EB71             ;*			X - PIA address
3874   EB71             ;*************************************************	
3875   EB71 84 1F       soladdr		anda	#$1F				;Mask to under 32 Solenoids
3876   EB73 81 0F       			cmpa	#$0F
3877   EB75             			iflo					;Get Regular Solenoid Address (PIA)
3877   EB75             
3877   EB75 22 FE       
3878   EB77 CE 22 00    				ldx	#pia_sol_low_data		;Solenoid PIA Offset
3879   EB7A 81 07       				cmpa	#$07
3880   EB7C             				ifgt
3880   EB7C             
3880   EB7C 23 FE       
3881   EB7E 08          					inx	
3882   EB7F 08          					inx	
3883   EB80             				endif
3883   EB80             
3883   EB80             
3883   EB80             
3883   EB80             
3883   EB80             
3883   EB80~            				endif
3883   EB80~            				endif
3883   EB80             
3883   EB80~            				endif
3883   EB80~            				endif
3883   EB80             
3883   EB7D             
3883   EB7D 02          
3883   EB7E             
3883   EB7E             
3883   EB7E~            				endif
3883   EB7E~            				endif
3883   EB7E~            				endif
3883   EB7E             
3883   EB80             
3883   EB80~            				endif
3883   EB80~            				endif
3883   EB80             
3884   EB80 20 0C       				bra	hex2bitpos			;Convert Hex (A&07) into bitpos (B) and leave
3885   EB82             			endif
3885   EB82             
3885   EB82             
3885   EB82             
3885   EB82             
3885   EB82             
3885   EB82~            			endif
3885   EB82~            			endif
3885   EB82             
3885   EB82~            			endif
3885   EB82~            			endif
3885   EB82             
3885   EB76             
3885   EB76 0B          
3885   EB77             
3885   EB77             
3885   EB77~            			endif
3885   EB77~            			endif
3885   EB77~            			endif
3885   EB77             
3885   EB82             
3885   EB82~            			endif
3885   EB82~            			endif
3885   EB82             
3886   EB82 80 10       ssoladdr		suba	#$10
3887   EB84 CE F1 22    			ldx	#spec_sol_def			;Special Solenoid PIA Location Table
3888   EB87 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
3889   EB8A C6 08       			ldab	#$08
3890   EB8C 0D          			sec	
3891   EB8D 39          			rts	
3892   EB8E             
3893   EB8E             ;********************************************************
3894   EB8E             ;* Convert Hex value in A to a single bit positioned at
3895   EB8E             ;* the value of (A&7). Bitpos is returned in B
3896   EB8E             ;*
3897   EB8E             ;* Requires:	Data in A
3898   EB8E             ;* Protects:	A,X
3899   EB8E             ;* Destroys:	B
3900   EB8E             ;* Output:		Bitpos in B
3901   EB8E             ;********************************************************
3902   EB8E 36          hex2bitpos		psha	
3903   EB8F 84 07       			anda	#$07
3904   EB91 5F          			clrb	
3905   EB92 0D          			sec	
3906   EB93             			begin
3906   EB93             
3907   EB93 59          				rolb	
3908   EB94 4A          				deca	
3909   EB95             			miend
3909   EB95             
3909   EB95             
3909   EB95~            			miend
3909   EB95~            			miend
3909   EB95~            			miend
3909   EB95             
3909   EB95 2A FC       
3909   EB97             
3909   EB97~            			miend
3909   EB97~            			miend
3909   EB97             
3910   EB97 32          			pula	
3911   EB98 39          			rts	
3912   EB99             
3913   EB99             ;********************************************************
3914   EB99             ;* Checks the current score shown and updates the comma
3915   EB99             ;* flags accordingly to show the relavant ones.
3916   EB99             ;********************************************************			
3917   EB99 40 04 80 08 comma_million	.db $40,$04,$80,$08
3918   EB9D 10 01 20 02 comma_thousand	.db $10,$01,$20,$02
3919   EBA1             
3920   EBA1 C6 40       update_commas	ldab	#$40				;Million digit
3921   EBA3 8D 2B       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
3922   EBA5             			ifeq				;Branch if it is already set
3922   EBA5             
3922   EBA5 26 FE       
3923   EBA7 DE CE       				ldx	pscore_buf			;Start of Current Player Score Buffer
3924   EBA9 E6 00       				ldab	$00,X
3925   EBAB 5C          				incb	
3926   EBAC             				ifne					;Is MSD at FF (blank0?
3926   EBAC             
3926   EBAC 27 FE       
3927   EBAE CE EB 99    					ldx	#comma_million		;No.. we have a million digit.
3928   EBB1 8D 11       					bsr	set_comma_bit		;Set the appropriate bit
3929   EBB3             				endif
3929   EBB3             
3929   EBB3             
3929   EBB3             
3929   EBB3             
3929   EBB3             
3929   EBB3~            				endif
3929   EBB3~            				endif
3929   EBB3             
3929   EBB3~            				endif
3929   EBB3~            				endif
3929   EBB3             
3929   EBAD             
3929   EBAD 05          
3929   EBAE             
3929   EBAE             
3929   EBAE~            				endif
3929   EBAE~            				endif
3929   EBAE~            				endif
3929   EBAE             
3929   EBB3             
3929   EBB3~            				endif
3929   EBB3~            				endif
3929   EBB3             
3930   EBB3             			endif
3930   EBB3             
3930   EBB3             
3930   EBB3             
3930   EBB3             
3930   EBB3             
3930   EBB3~            			endif
3930   EBB3~            			endif
3930   EBB3             
3930   EBB3~            			endif
3930   EBB3~            			endif
3930   EBB3             
3930   EBA6             
3930   EBA6 0C          
3930   EBA7             
3930   EBA7             
3930   EBA7~            			endif
3930   EBA7~            			endif
3930   EBA7~            			endif
3930   EBA7             
3930   EBB3             
3930   EBB3~            			endif
3930   EBB3~            			endif
3930   EBB3             
3931   EBB3 C6 08       			ldab	#$08				;1000's Digit
3932   EBB5 8D 19       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
3933   EBB7             			ifeq
3933   EBB7             
3933   EBB7 26 FE       
3934   EBB9 DE CE       				ldx	pscore_buf			;Start of Current Player Score Buffer
3935   EBBB E6 02       				ldab	$02,X
3936   EBBD C1 F0       				cmpb	#$F0
3937   EBBF             				ifcs
3937   EBBF             
3937   EBBF 24 FE       
3938   EBC1 CE EB 9D    					ldx	#comma_thousand			;Get the appropriate bit for the thousand digit	
3939   EBC4 96 CD       set_comma_bit			ldaa	player_up				;Current Player Up (0-3)
3940   EBC6 BD EE FF    					jsr	xplusa				;X = X + A
3941   EBC9 A6 00       					ldaa	$00,X
3942   EBCB 9A 60       					oraa	comma_flags
3943   EBCD 97 60       					staa	comma_flags
3944   EBCF             				endif
3944   EBCF             
3944   EBCF             
3944   EBCF             
3944   EBCF             
3944   EBCF             
3944   EBCF~            				endif
3944   EBCF~            				endif
3944   EBCF             
3944   EBCF~            				endif
3944   EBCF~            				endif
3944   EBCF             
3944   EBC0             
3944   EBC0 0E          
3944   EBC1             
3944   EBC1             
3944   EBC1~            				endif
3944   EBC1~            				endif
3944   EBC1~            				endif
3944   EBC1             
3944   EBCF             
3944   EBCF~            				endif
3944   EBCF~            				endif
3944   EBCF             
3945   EBCF             			endif
3945   EBCF             
3945   EBCF             
3945   EBCF             
3945   EBCF             
3945   EBCF             
3945   EBCF~            			endif
3945   EBCF~            			endif
3945   EBCF             
3945   EBCF~            			endif
3945   EBCF~            			endif
3945   EBCF             
3945   EBB8             
3945   EBB8 16          
3945   EBB9             
3945   EBB9             
3945   EBB9~            			endif
3945   EBB9~            			endif
3945   EBB9~            			endif
3945   EBB9             
3945   EBCF             
3945   EBCF~            			endif
3945   EBCF~            			endif
3945   EBCF             
3946   EBCF 39          			rts	
3947   EBD0             
3948   EBD0 96 CD       test_mask_b		ldaa	player_up				;Current Player Up (0-3)
3949   EBD2 CE 00 5C    			ldx	#dmask_p1
3950   EBD5 BD EE FF    			jsr	xplusa				;X = X + A
3951   EBD8 E5 00       			bitb	$00,X
3952   EBDA 39          			rts	
3953   EBDB             
3954   EBDB             ;*********************************************************
3955   EBDB             ;* From the main scoring routine, this will update the
3956   EBDB             ;* extra ball lamp by removing a single extra ball. It 
3957   EBDB             ;* must be done here so that if an extra ball drains 
3958   EBDB             ;* without scoring, the extra ball will not be removed.
3959   EBDB             ;* Therefore all extra ball removals must be done on a
3960   EBDB             ;* scoring event.
3961   EBDB             ;*********************************************************			
3962   EBDB D6 CA       update_eb_count	ldab	flag_bonusball			;Are we in infinte ball mode?
3963   EBDD             			ifeq							;No
3963   EBDD             
3963   EBDD 26 FE       
3964   EBDF 73 00 CA    				com	flag_bonusball			;
3965   EBE2 D6 D0       				ldab	num_eb				;Number of Extra Balls Remaining
3966   EBE4             				ifne				
3966   EBE4             
3966   EBE4 27 FE       
3967   EBE6 7A 00 D0    					dec	num_eb				;EB = EB - 1
3968   EBE9             					ifeq
3968   EBE9             
3968   EBE9 26 FE       
3969   EBEB 36          						psha	
3970   EBEC B6 E0 5F    						ldaa	gr_eb_lamp_1			;Game ROM: Extra Ball Lamp1 Location
3971   EBEF BD F1 5B    						jsr	lamp_off				;Turn off Lamp A (encoded):
3972   EBF2 B6 E0 60    						ldaa	gr_eb_lamp_2			;Game ROM: Extra Ball Lamp2 Location
3973   EBF5 BD F1 5B    						jsr	lamp_off				;Turn off Lamp A (encoded):
3974   EBF8 32          						pula	
3975   EBF9             					endif
3975   EBF9             
3975   EBF9             
3975   EBF9             
3975   EBF9             
3975   EBF9             
3975   EBF9~            					endif
3975   EBF9~            					endif
3975   EBF9             
3975   EBF9~            					endif
3975   EBF9~            					endif
3975   EBF9             
3975   EBEA             
3975   EBEA 0E          
3975   EBEB             
3975   EBEB             
3975   EBEB~            					endif
3975   EBEB~            					endif
3975   EBEB~            					endif
3975   EBEB             
3975   EBF9             
3975   EBF9~            					endif
3975   EBF9~            					endif
3975   EBF9             
3976   EBF9             				endif
3976   EBF9             
3976   EBF9             
3976   EBF9             
3976   EBF9             
3976   EBF9             
3976   EBF9~            				endif
3976   EBF9~            				endif
3976   EBF9             
3976   EBF9~            				endif
3976   EBF9~            				endif
3976   EBF9             
3976   EBE5             
3976   EBE5 13          
3976   EBE6             
3976   EBE6             
3976   EBE6~            				endif
3976   EBE6~            				endif
3976   EBE6~            				endif
3976   EBE6             
3976   EBF9             
3976   EBF9~            				endif
3976   EBF9~            				endif
3976   EBF9             
3977   EBF9             			endif
3977   EBF9             
3977   EBF9             
3977   EBF9             
3977   EBF9             
3977   EBF9             
3977   EBF9~            			endif
3977   EBF9~            			endif
3977   EBF9             
3977   EBF9~            			endif
3977   EBF9~            			endif
3977   EBF9             
3977   EBDE             
3977   EBDE 1A          
3977   EBDF             
3977   EBDF             
3977   EBDF~            			endif
3977   EBDF~            			endif
3977   EBDF~            			endif
3977   EBDF             
3977   EBF9             
3977   EBF9~            			endif
3977   EBF9~            			endif
3977   EBF9             
3978   EBF9 39          			rts	
3979   EBFA             
3980   EBFA             ;**********************************************************
3981   EBFA             ;* Point based sounds (chime type).
3982   EBFA             ;**********************************************************			
3983   EBFA 36          isnd_pts		psha	
3984   EBFB 17          			tba	
3985   EBFC 20 03       			bra	snd_pts
3986   EBFE 36          dsnd_pts		psha	
3987   EBFF 84 07       			anda	#$07
3988   EC01 BD EC FC    snd_pts		jsr	isnd_once			;Play Sound Index(A) Once
3989   EC04 32          			pula
3990   EC05             			;Fall Through to points
3991   EC05             				
3992   EC05 36          score_main		psha	
3993   EC06 37          			pshb	
3994   EC07 7A 00 D7    			dec	randomseed			;Change the Random # seed
3995   EC0A DF D8       			stx	x_temp_1			;Store X for later
3996   EC0C BD E0 A3    			jsr	gr_score_event		;Check Game ROM Hook
3997   EC0F 8D CA       			bsr	update_eb_count		;Update extra balls
3998   EC11 8D 0A       			bsr	score_update		;Add Points to Current Score, Data in A:
3999   EC13 8D 8C       			bsr	update_commas		;Update Master Display Toggle From Current Player
4000   EC15 BD EC AC    			jsr	checkreplay			;Check Current Player Score against all Replay Levels
4001   EC18 DE D8       			ldx	x_temp_1			;Get it back
4002   EC1A 33          			pulb	
4003   EC1B 32          			pula	
4004   EC1C 39          			rts	
4005   EC1D             			
4006   EC1D             ;**********************************************
4007   EC1D             ; Update Score Routine: Score to add is in A
4008   EC1D             ;**********************************************
4009   EC1D DE CE       score_update	ldx	pscore_buf			;Start of Current Player Score Buffer
4010   EC1F EE 00       			ldx	$00,X				;Get XX,XX_,b__
4011   EC21 DF DE       			stx	x_temp_2			;Store it!
4012   EC23 DE CE       			ldx	pscore_buf			;Start of Current Player Score Buffer
4013   EC25 C6 04       			ldab	#$04
4014   EC27 D7 D6       			stab	flag_timer_bip		;Run Ball Play Timer (Audit)
4015   EC29 D7 A0       			stab	sys_temp1			;Number of Ram Location to iterate (4)
4016   EC2B 97 A2       			staa	sys_temp3
4017   EC2D 5F          			clrb	
4018   EC2E D7 A3       			stab	sys_temp4
4019   EC30 D7 A1       			stab	sys_temp2
4020   EC32 16          			tab					;Get Points data
4021   EC33 C4 07       			andb	#$07
4022   EC35 26 27       _su01			bne	_su04
4023   EC37 5C          			incb	
4024   EC38 D7 9E       			stab	temp3				;Store (data&07)+1
4025   EC3A D6 A2       _su02			ldab	sys_temp3
4026   EC3C 54          			lsrb	
4027   EC3D 54          			lsrb	
4028   EC3E 54          			lsrb	
4029   EC3F 8D 45       			bsr	score2hex			;Convert MSD Blanks to 0's on (X+03)
4030   EC41             			begin
4030   EC41             
4031   EC41 9B 9E       				adda	temp3				;(data&07)+1
4032   EC43 8D 3A       				bsr	hex2dec			;Decimal Adjust A, sys_temp2 incremented if A flipped
4033   EC45 5A          				decb					
4034   EC46             			eqend
4034   EC46             
4034   EC46             
4034   EC46~            			eqend
4034   EC46~            			eqend
4034   EC46~            			eqend
4034   EC46             
4034   EC46 26 F9       
4034   EC48             
4034   EC48~            			eqend
4034   EC48~            			eqend
4034   EC48             
4035   EC48 D6 A1       _su03			ldab	sys_temp2
4036   EC4A 27 26       			beq	_su05			;A didn't Flip, Branch.
4037   EC4C A7 03       			staa	$03,X			;Store this digit
4038   EC4E 09          			dex	
4039   EC4F 7A 00 A0    			dec	sys_temp1			;Do next set of digits
4040   EC52             			ifne
4040   EC52             
4040   EC52 27 FE       
4041   EC54 8D 30       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
4042   EC56 7F 00 A1    				clr	sys_temp2
4043   EC59 1B          				aba	
4044   EC5A 8D 23       				bsr	hex2dec				;Decimal Adjust A, sys_temp2 incremented if A flipped
4045   EC5C 20 EA       				bra	_su03
4046   EC5E 5A          _su04				decb	
4047   EC5F             				ifeq
4047   EC5F             
4047   EC5F 26 FE       
4048   EC61 C6 10       					ldab	#$10
4049   EC63 D7 9E       					stab	temp3
4050   EC65 20 D3       					bra	_su02
4051   EC67             				endif
4051   EC67             
4051   EC67             
4051   EC67             
4051   EC67             
4051   EC67             
4051   EC67~            				endif
4051   EC67~            				endif
4051   EC67             
4051   EC67~            				endif
4051   EC67~            				endif
4051   EC67             
4051   EC60             
4051   EC60 06          
4051   EC61             
4051   EC61             
4051   EC61~            				endif
4051   EC61~            				endif
4051   EC61~            				endif
4051   EC61             
4051   EC67             
4051   EC67~            				endif
4051   EC67~            				endif
4051   EC67             
4052   EC67 8D 1D       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
4053   EC69 A7 03       				staa	$03,X
4054   EC6B 7A 00 A0    				dec	sys_temp1
4055   EC6E 09          				dex	
4056   EC6F 5A          				decb	
4057   EC70 20 C3       				bra	_su01
4058   EC72 D6 A3       _su05				ldab	sys_temp4
4059   EC74             				ifne
4059   EC74             
4059   EC74 27 FE       
4060   EC76 81 10       					cmpa	#$10
4061   EC78             					ifcs
4061   EC78             
4061   EC78 24 FE       
4062   EC7A 8B F0       						adda	#$F0
4063   EC7C             					endif
4063   EC7C             
4063   EC7C             
4063   EC7C             
4063   EC7C             
4063   EC7C             
4063   EC7C~            					endif
4063   EC7C~            					endif
4063   EC7C             
4063   EC7C~            					endif
4063   EC7C~            					endif
4063   EC7C             
4063   EC79             
4063   EC79 02          
4063   EC7A             
4063   EC7A             
4063   EC7A~            					endif
4063   EC7A~            					endif
4063   EC7A~            					endif
4063   EC7A             
4063   EC7C             
4063   EC7C~            					endif
4063   EC7C~            					endif
4063   EC7C             
4064   EC7C             				endif
4064   EC7C             
4064   EC7C             
4064   EC7C             
4064   EC7C             
4064   EC7C             
4064   EC7C~            				endif
4064   EC7C~            				endif
4064   EC7C             
4064   EC7C~            				endif
4064   EC7C~            				endif
4064   EC7C             
4064   EC75             
4064   EC75 06          
4064   EC76             
4064   EC76             
4064   EC76~            				endif
4064   EC76~            				endif
4064   EC76~            				endif
4064   EC76             
4064   EC7C             
4064   EC7C~            				endif
4064   EC7C~            				endif
4064   EC7C             
4065   EC7C A7 03       				staa	$03,X
4066   EC7E             			endif
4066   EC7E             
4066   EC7E             
4066   EC7E             
4066   EC7E             
4066   EC7E             
4066   EC7E~            			endif
4066   EC7E~            			endif
4066   EC7E             
4066   EC7E~            			endif
4066   EC7E~            			endif
4066   EC7E             
4066   EC53             
4066   EC53 2A          
4066   EC54             
4066   EC54             
4066   EC54~            			endif
4066   EC54~            			endif
4066   EC54~            			endif
4066   EC54             
4066   EC7E             
4066   EC7E~            			endif
4066   EC7E~            			endif
4066   EC7E             
4067   EC7E 39          			rts	
4068   EC7F             
4069   EC7F             ;******************************************************************************
4070   EC7F             ; Convert Hex to Decimal: If value was above 9 then sys_temp2 is incremented 
4071   EC7F             ;******************************************************************************
4072   EC7F 19          hex2dec		daa	
4073   EC80             			ifcs
4073   EC80             
4073   EC80 24 FE       
4074   EC82 7C 00 A1    				inc	sys_temp2
4075   EC85             			endif
4075   EC85             
4075   EC85             
4075   EC85             
4075   EC85             
4075   EC85             
4075   EC85~            			endif
4075   EC85~            			endif
4075   EC85             
4075   EC85~            			endif
4075   EC85~            			endif
4075   EC85             
4075   EC81             
4075   EC81 03          
4075   EC82             
4075   EC82             
4075   EC82~            			endif
4075   EC82~            			endif
4075   EC82~            			endif
4075   EC82             
4075   EC85             
4075   EC85~            			endif
4075   EC85~            			endif
4075   EC85             
4076   EC85 39          			rts	
4077   EC86             
4078   EC86 A6 03       score2hex		ldaa	$03,X
4079   EC88 4C          			inca	
4080   EC89             			ifne					;Leave if both digits are blanked
4080   EC89             
4080   EC89 27 FE       
4081   EC8B 4A          				deca	
4082   EC8C 81 F0       				cmpa	#$F0
4083   EC8E 25 05       				bcs	sh_exit			;if A was less than #F0
4084   EC90 8B 10       				adda	#$10				;Set High Digit to a 0
4085   EC92             			endif
4085   EC92             
4085   EC92             
4085   EC92             
4085   EC92             
4085   EC92             
4085   EC92~            			endif
4085   EC92~            			endif
4085   EC92             
4085   EC92~            			endif
4085   EC92~            			endif
4085   EC92             
4085   EC8A             
4085   EC8A 07          
4085   EC8B             
4085   EC8B             
4085   EC8B~            			endif
4085   EC8B~            			endif
4085   EC8B~            			endif
4085   EC8B             
4085   EC92             
4085   EC92~            			endif
4085   EC92~            			endif
4085   EC92             
4086   EC92 7C 00 A3    			inc	sys_temp4			;Digit was cleared
4087   EC95 39          sh_exit		rts
4088   EC96             	
4089   EC96             ;**************************************************************
4090   EC96             ;* Add points to Scoring Queue
4091   EC96             ;**************************************************************	
4092   EC96 36          add_points		psha	
4093   EC97 37          			pshb	
4094   EC98 16          			tab	
4095   EC99 C4 07       			andb	#$07
4096   EC9B CE 11 30    			ldx	#score_queue_full	
4097   EC9E             			begin
4097   EC9E             
4098   EC9E 09          				dex	
4099   EC9F 5A          				decb	
4100   ECA0             			miend
4100   ECA0             
4100   ECA0             
4100   ECA0~            			miend
4100   ECA0~            			miend
4100   ECA0~            			miend
4100   ECA0             
4100   ECA0 2A FC       
4100   ECA2             
4100   ECA2~            			miend
4100   ECA2~            			miend
4100   ECA2             
4101   ECA2 44          			lsra	
4102   ECA3 44          			lsra	
4103   ECA4 44          			lsra	
4104   ECA5 AB 00       			adda	$00,X
4105   ECA7 A7 00       			staa	$00,X
4106   ECA9 33          			pulb	
4107   ECAA 32          			pula	
4108   ECAB 39          			rts	
4109   ECAC             ;**********************************************************
4110   ECAC             ;* Checks the current player score against each replay 
4111   ECAC             ;* level. Award Replay if passed.
4112   ECAC             ;**********************************************************
4113   ECAC CE 00 DE    checkreplay		ldx	#x_temp_2
4114   ECAF 8D 33       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
4115   ECB1 D7 DE       			stab	x_temp_2
4116   ECB3 DE CE       			ldx	pscore_buf			;Current Player Score Buffer Pointer
4117   ECB5 8D 2D       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
4118   ECB7 86 04       			ldaa	#$04
4119   ECB9 97 DF       			staa	x_temp_2+1			;Check All 4 Replay Levels
4120   ECBB CE 01 83    			ldx	#adj_replay1		;ADJ: Replay 1 Score
4121   ECBE             			begin
4121   ECBE             
4122   ECBE BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
4123   ECC1 11          				cba	
4124   ECC2             				iflo						;Not High Enough, goto next score level
4124   ECC2             
4124   ECC2 22 FE       
4125   ECC4 91 DE       					cmpa	x_temp_2
4126   ECC6             					ifgt
4126   ECC6             
4126   ECC6 23 FE       
4127   ECC8 DF AA       						stx	thread_priority		;Store our Score Buffer Pointer
4128   ECCA 86 04       						ldaa	#$04
4129   ECCC 90 DF       						suba	x_temp_2+1			;See which Replay Level we are at
4130   ECCE 48          						asla					;X2
4131   ECCF 48          						asla					;X2
4132   ECD0 CE 01 52    						ldx	#aud_replay1times+2	;Base of Replay Score Exceeded Audits
4133   ECD3 BD EE FF    						jsr	xplusa			;X = X + A
4134   ECD6 BD F7 7F    						jsr	ptrx_plus_1			;Add 1 to data at X
4135   ECD9 DE AA       						ldx	thread_priority
4136   ECDB BD F6 BF    						jsr	award_replay		;Replay Score Level Exceeded: Give award, sound bell.
4137   ECDE             					endif
4137   ECDE             
4137   ECDE             
4137   ECDE             
4137   ECDE             
4137   ECDE             
4137   ECDE~            					endif
4137   ECDE~            					endif
4137   ECDE             
4137   ECDE~            					endif
4137   ECDE~            					endif
4137   ECDE             
4137   ECC7             
4137   ECC7 16          
4137   ECC8             
4137   ECC8             
4137   ECC8~            					endif
4137   ECC8~            					endif
4137   ECC8~            					endif
4137   ECC8             
4137   ECDE             
4137   ECDE~            					endif
4137   ECDE~            					endif
4137   ECDE             
4138   ECDE             				endif
4138   ECDE             
4138   ECDE             
4138   ECDE             
4138   ECDE             
4138   ECDE             
4138   ECDE~            				endif
4138   ECDE~            				endif
4138   ECDE             
4138   ECDE~            				endif
4138   ECDE~            				endif
4138   ECDE             
4138   ECC3             
4138   ECC3 1A          
4138   ECC4             
4138   ECC4             
4138   ECC4~            				endif
4138   ECC4~            				endif
4138   ECC4~            				endif
4138   ECC4             
4138   ECDE             
4138   ECDE~            				endif
4138   ECDE~            				endif
4138   ECDE             
4139   ECDE 7A 00 DF    				dec	x_temp_2+1				;Goto Next Score Level
4140   ECE1             			eqend
4140   ECE1             
4140   ECE1             
4140   ECE1~            			eqend
4140   ECE1~            			eqend
4140   ECE1~            			eqend
4140   ECE1             
4140   ECE1 26 DB       
4140   ECE3             
4140   ECE3~            			eqend
4140   ECE3~            			eqend
4140   ECE3             
4141   ECE3 39          			rts
4142   ECE4             ;*********************************************************
4143   ECE4             ;* Load Million and Hundred Thousand Score digits into
4144   ECE4             ;* A and B. Player score buffer pointer is in X. Routine
4145   ECE4             ;* will convert blanks($ff) into 0's
4146   ECE4             ;*********************************************************			
4147   ECE4 A6 00       get_hs_digits	ldaa	$00,X
4148   ECE6 E6 01       			ldab	$01,X
4149   ECE8 8D 04       			bsr	b_plus10		;If B minus then B = B + 0x10
4150   ECEA 8D 07       			bsr	split_ab		;Shift A<<4 B>>4
4151   ECEC 1B          			aba	
4152   ECED 16          			tab	
4153   ECEE             b_plus10		ifmi
4153   ECEE             
4153   ECEE 2A FE       
4154   ECF0 CB 10       				addb	#$10
4155   ECF2             			endif
4155   ECF2             
4155   ECF2             
4155   ECF2             
4155   ECF2             
4155   ECF2             
4155   ECF2~            			endif
4155   ECF2~            			endif
4155   ECF2             
4155   ECF2~            			endif
4155   ECF2~            			endif
4155   ECF2             
4155   ECEF             
4155   ECEF 02          
4155   ECF0             
4155   ECF0             
4155   ECF0~            			endif
4155   ECF0~            			endif
4155   ECF0~            			endif
4155   ECF0             
4155   ECF2             
4155   ECF2~            			endif
4155   ECF2~            			endif
4155   ECF2             
4156   ECF2 39          			rts	
4157   ECF3             ;*********************************************************
4158   ECF3             ;* Shifts A and B to convert million and hundred thousand
4159   ECF3             ;* score digits into a single byte.
4160   ECF3             ;*********************************************************
4161   ECF3 48          split_ab		asla	
4162   ECF4 48          			asla	
4163   ECF5 48          			asla	
4164   ECF6 48          			asla	
4165   ECF7 54          			lsrb	
4166   ECF8 54          			lsrb	
4167   ECF9 54          			lsrb	
4168   ECFA 54          			lsrb	
4169   ECFB 39          			rts	
4170   ECFC             ;*********************************************************
4171   ECFC             ;* Sound Routines 
4172   ECFC             ;*********************************************************
4173   ECFC             ;* isnd_once - will play index sound in A one time by 
4174   ECFC             ;*             loading B with 01 and calling the main
4175   ECFC             ;*             sound subroutine.
4176   ECFC             ;*********************************************************			
4177   ECFC 37          isnd_once		pshb	
4178   ECFD C6 01       			ldab	#$01
4179   ECFF 8D 02       			bsr	sound_sub
4180   ED01 33          			pulb	
4181   ED02 39          			rts
4182   ED03             ;*********************************************************
4183   ED03             ;* This is the main sound subroutine. It will play index
4184   ED03             ;* sound contained in A, B times.
4185   ED03             ;*********************************************************				
4186   ED03 DF AA       sound_sub		stx	thread_priority
4187   ED05 36          			psha	
4188   ED06 37          			pshb	
4189   ED07 D6 C1       			ldab	sys_soundflags			;Sound Status
4190   ED09 27 1C       			beq	b_04E					;Goto Sound Routine #2
4191   ED0B 16          			tab						
4192   ED0C 48          			asla	
4193   ED0D 1B          			aba	                              ;A=A*3
4194   ED0E FE E0 53    			ldx	gr_soundtable_ptr			;Game ROM Table: Sounds
4195   ED11 BD EE FF    			jsr	xplusa				;X = X + A
4196   ED14 A6 02       			ldaa	$02,X                         ;get the actual sound command that will be sent
4197   ED16 4C          			inca	
4198   ED17             			ifeq						;If value is $FF, then this is complex sound
4198   ED17             
4198   ED17 26 FE       
4199   ED19 EE 00       				ldx	$00,X
4200   ED1B             			endif
4200   ED1B             
4200   ED1B             
4200   ED1B             
4200   ED1B             
4200   ED1B             
4200   ED1B~            			endif
4200   ED1B~            			endif
4200   ED1B             
4200   ED1B~            			endif
4200   ED1B~            			endif
4200   ED1B             
4200   ED18             
4200   ED18 02          
4200   ED19             
4200   ED19             
4200   ED19~            			endif
4200   ED19~            			endif
4200   ED19~            			endif
4200   ED19             
4200   ED1B             
4200   ED1B~            			endif
4200   ED1B~            			endif
4200   ED1B             
4201   ED1B A6 00       			ldaa	$00,X
4202   ED1D D6 BA       			ldab	cur_sndflags
4203   ED1F C5 40       			bitb	#$40
4204   ED21             			ifeq
4204   ED21             
4204   ED21 26 FE       
4205   ED23 8D 1D       				bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
4206   ED25             				ifcc
4206   ED25             
4206   ED25 25 FE       
4207   ED27 33          b_04E					pulb	
4208   ED28 32          					pula	
4209   ED29 20 2A       					bra	b_051
4210   ED2B             				endif
4210   ED2B             
4210   ED2B             
4210   ED2B             
4210   ED2B             
4210   ED2B             
4210   ED2B~            				endif
4210   ED2B~            				endif
4210   ED2B             
4210   ED2B~            				endif
4210   ED2B~            				endif
4210   ED2B             
4210   ED26             
4210   ED26 04          
4210   ED27             
4210   ED27             
4210   ED27~            				endif
4210   ED27~            				endif
4210   ED27~            				endif
4210   ED27             
4210   ED2B             
4210   ED2B~            				endif
4210   ED2B~            				endif
4210   ED2B             
4211   ED2B             			endif
4211   ED2B             
4211   ED2B             
4211   ED2B             
4211   ED2B             
4211   ED2B             
4211   ED2B~            			endif
4211   ED2B~            			endif
4211   ED2B             
4211   ED2B~            			endif
4211   ED2B~            			endif
4211   ED2B             
4211   ED22             
4211   ED22 08          
4211   ED23             
4211   ED23             
4211   ED23~            			endif
4211   ED23~            			endif
4211   ED23~            			endif
4211   ED23             
4211   ED2B             
4211   ED2B~            			endif
4211   ED2B~            			endif
4211   ED2B             
4212   ED2B 4D          b_050			tsta	
4213   ED2C 2A 6B       			bpl	snd_exit_pull			;pula,pulb,rts.
4214   ED2E D6 C6       			ldab	next_sndcnt
4215   ED30             			ifne
4215   ED30             
4215   ED30 27 FE       
4216   ED32 D6 C5             			ldab	next_sndflags
4217   ED34 8D 0C             			bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
4218   ED36 25 61             			bcs	snd_exit_pull			;pula,pulb,rts.
4219   ED38                   		endif
4219   ED38             
4219   ED38             
4219   ED38             
4219   ED38             
4219   ED38             
4219   ED38~                  		endif
4219   ED38~                  		endif
4219   ED38             
4219   ED38~                  		endif
4219   ED38~                  		endif
4219   ED38             
4219   ED31             
4219   ED31 06          
4219   ED32             
4219   ED32             
4219   ED32~                  		endif
4219   ED32~                  		endif
4219   ED32~                  		endif
4219   ED32             
4219   ED38             
4219   ED38~                  		endif
4219   ED38~                  		endif
4219   ED38             
4220   ED38 97 C5       			staa	next_sndflags
4221   ED3A 33          			pulb	
4222   ED3B 32          			pula	
4223   ED3C 97 C7       			staa	next_sndcmd
4224   ED3E D7 C6       			stab	next_sndcnt
4225   ED40 20 59       			bra	snd_exit					;rts
4226   ED42             			
4227   ED42 36          isnd_test		psha	
4228   ED43 37          			pshb	
4229   ED44 84 0F       			anda	#$0F
4230   ED46 C4 0F       			andb	#$0F
4231   ED48 11          			cba	
4232   ED49 33          			pulb	
4233   ED4A 32          			pula	
4234   ED4B             			ifeq
4234   ED4B             
4234   ED4B 26 FE       
4235   ED4D C5 20       				bitb	#$20
4236   ED4F             				ifeq
4236   ED4F             
4236   ED4F 26 FE       
4237   ED51 0D          					sec
4238   ED52             				endif
4238   ED52             
4238   ED52             
4238   ED52             
4238   ED52             
4238   ED52             
4238   ED52~            				endif
4238   ED52~            				endif
4238   ED52             
4238   ED52~            				endif
4238   ED52~            				endif
4238   ED52             
4238   ED50             
4238   ED50 01          
4238   ED51             
4238   ED51             
4238   ED51~            				endif
4238   ED51~            				endif
4238   ED51~            				endif
4238   ED51             
4238   ED52             
4238   ED52~            				endif
4238   ED52~            				endif
4238   ED52             
4239   ED52             			endif
4239   ED52             
4239   ED52             
4239   ED52             
4239   ED52             
4239   ED52             
4239   ED52~            			endif
4239   ED52~            			endif
4239   ED52             
4239   ED52~            			endif
4239   ED52~            			endif
4239   ED52             
4239   ED4C             
4239   ED4C 05          
4239   ED4D             
4239   ED4D             
4239   ED4D~            			endif
4239   ED4D~            			endif
4239   ED4D~            			endif
4239   ED4D             
4239   ED52             
4239   ED52~            			endif
4239   ED52~            			endif
4239   ED52             
4240   ED52 39          			rts	
4241   ED53             
4242   ED53             ;A=sound command
4243   ED53             ;B=count
4244   ED53 DF AA       isnd_mult		stx	thread_priority
4245   ED55 36          b_051			psha	
4246   ED56 37          			pshb	
4247   ED57 D7 B8       			stab	soundcount
4248   ED59 16          			tab	                              ;store our sound in B temporarily
4249   ED5A 86 7F       			ldaa	#$7F
4250   ED5C 8D 42       			bsr	send_snd				;Send Sound Stop Command
4251   ED5E 17          			tba	                              ;get it back
4252   ED5F 97 C2       			staa	soundindex				;Sound Command Table Index
4253   ED61 48          			asla	
4254   ED62 1B          			aba						;Index * 3
4255   ED63 FE E0 53    			ldx	gr_soundtable_ptr			;Game ROM: Sound Table Pointer
4256   ED66 BD EE FF    isnd_mult_x		jsr	xplusa				;X = X + A
4257   ED69 A6 02       			ldaa	$02,X					;Sound Command
4258   ED6B 81 FF       			cmpa	#$FF
4259   ED6D             			ifne						;Simple Sound
4259   ED6D             
4259   ED6D 27 FE       
4260   ED6F E6 00       				ldab	$00,X
4261   ED71 C4 7F       				andb	#$7F
4262   ED73 D7 BA       				stab	cur_sndflags			
4263   ED75 E6 01       				ldab	$01,X
4264   ED77 D7 BE       				stab	soundirqcount+1			
4265   ED79 7F 00 BD    				clr	soundirqcount
4266   ED7C DE BD       				ldx	soundirqcount			;Clear the MSB of the word counter ($BD,$BE)
4267   ED7E DF BF       				stx	soundindex_com			;Store the whole counter in the Common Sound Index
4268   ED80 C6 40       				ldab	#$40
4269   ED82 D7 C1       				stab	sys_soundflags			;Sound Flag?
4270   ED84 8D 18       				bsr	send_snd_save			;Send the Command, Save in 'lastsound'
4271   ED86             			else						;Complex Sound
4271   ED86             
4271   ED86             
4271   ED86             
4271   ED86             
4271   ED6E             
4271   ED6E             
4271   ED6E             
4271   ED6E~            			else						;Complex Sound
4271   ED6E~            			else						;Complex Sound
4271   ED6E~            			else						;Complex Sound
4271   ED6E~            			else						;Complex Sound
4271   ED6E             
4271   ED6E~            			else						;Complex Sound
4271   ED6E~            			else						;Complex Sound
4271   ED6E~            			else						;Complex Sound
4271   ED6E~            			else						;Complex Sound
4271   ED6E             
4271   ED6E             
4271   ED6E 19          
4271   ED86             
4271   ED86 20 FE       
4271   ED88             
4271   ED88             
4271   ED88             
4271   ED88~            			else						;Complex Sound
4271   ED88~            			else						;Complex Sound
4271   ED88~            			else						;Complex Sound
4271   ED88~            			else						;Complex Sound
4271   ED88~            			else						;Complex Sound
4271   ED88             
4271   ED88~            			else						;Complex Sound
4271   ED88~            			else						;Complex Sound
4271   ED88             
4271   ED88~            			else						;Complex Sound
4271   ED88~            			else						;Complex Sound
4271   ED88             
4272   ED88 EE 00       				ldx	$00,X					;Here if Complex Sound Command
4273   ED8A C6 80       				ldab	#$80
4274   ED8C D7 C1       				stab	sys_soundflags			;Set Status Flag
4275   ED8E EA 00       				orab	$00,X
4276   ED90 D7 BA       				stab	cur_sndflags
4277   ED92 08          				inx	
4278   ED93 DF BF       				stx	soundindex_com
4279   ED95 DF BB       				stx	soundptr
4280   ED97 8D 0E       				bsr	do_complex_snd			;Process it and send
4281   ED99             			endif
4281   ED99             
4281   ED99             
4281   ED99             
4281   ED99             
4281   ED99             
4281   ED99~            			endif
4281   ED99~            			endif
4281   ED99             
4281   ED99~            			endif
4281   ED99~            			endif
4281   ED99             
4281   ED87             
4281   ED87 11          
4281   ED88             
4281   ED88             
4281   ED88~            			endif
4281   ED88~            			endif
4281   ED88~            			endif
4281   ED88             
4281   ED99             
4281   ED99~            			endif
4281   ED99~            			endif
4281   ED99             
4282   ED99 33          snd_exit_pull	pulb	
4283   ED9A 32          			pula	
4284   ED9B DE AA       snd_exit		ldx	thread_priority
4285   ED9D 39          			rts	
4286   ED9E             
4287   ED9E             ;*****************************************************************
4288   ED9E             ;* Send the command to the sound board, stores the command sent
4289   ED9E             ;* in 'lastsound' for reference.
4290   ED9E             ;*****************************************************************			
4291   ED9E 97 B9       send_snd_save	staa	lastsound
4292   EDA0 BD E0 A1    send_snd		jsr	gr_sound_event			
4293   EDA3 B7 21 00    			staa	pia_sound_data
4294   EDA6 39          			rts	
4295   EDA7             
4296   EDA7             ;*****************************************************************
4297   EDA7             ;* This routine will send the next item in a complex sound
4298   EDA7             ;* index to the Sound board PIA.
4299   EDA7             ;*****************************************************************			
4300   EDA7 DE BB       do_complex_snd	ldx	soundptr
4301   EDA9 A6 00       _csnd_loop		ldaa	$00,X				;Load the first byte of this sequence
4302   EDAB 16          			tab	
4303   EDAC C4 C0       			andb	#$C0
4304   EDAE             			ifne					;Check bits $80 or $40
4304   EDAE             
4304   EDAE 27 FE       
4305   EDB0             				ifpl				;If bit $80 is set, then sound is immediate
4305   EDB0             
4305   EDB0 2B FE       
4306   EDB2 84 3F       					anda	#$3F
4307   EDB4 97 C3       					staa	csound_timer
4308   EDB6 08          					inx	
4309   EDB7 A6 00       					ldaa	$00,X
4310   EDB9 97 C4       b_05B					staa	csound_timer+1
4311   EDBB 96 BA       					ldaa	cur_sndflags
4312   EDBD 84 EF       					anda	#$EF			;Flag this sound as non-immediate (timer based)
4313   EDBF 97 BA       store_csndflg			staa	cur_sndflags	;Store Flag
4314   EDC1 08          					inx	
4315   EDC2 20 E5       					bra	_csnd_loop
4316   EDC4             				endif
4316   EDC4             
4316   EDC4             
4316   EDC4             
4316   EDC4             
4316   EDC4             
4316   EDC4~            				endif
4316   EDC4~            				endif
4316   EDC4             
4316   EDC4~            				endif
4316   EDC4~            				endif
4316   EDC4             
4316   EDB1             
4316   EDB1 12          
4316   EDB2             
4316   EDB2             
4316   EDB2~            				endif
4316   EDB2~            				endif
4316   EDB2~            				endif
4316   EDB2             
4316   EDC4             
4316   EDC4~            				endif
4316   EDC4~            				endif
4316   EDC4             
4317   EDC4 7F 00 C3    				clr	csound_timer
4318   EDC7 84 7F       				anda	#$7F
4319   EDC9 26 EE       				bne	b_05B			;If the timer is not zero, then flag this sound as non-immediate
4320   EDCB 96 BA       				ldaa	cur_sndflags
4321   EDCD 8A 10       				oraa	#$10			;Flag as non-immediate
4322   EDCF 20 EE       				bra	store_csndflg
4323   EDD1             			endif
4323   EDD1             
4323   EDD1             
4323   EDD1             
4323   EDD1             
4323   EDD1             
4323   EDD1~            			endif
4323   EDD1~            			endif
4323   EDD1             
4323   EDD1~            			endif
4323   EDD1~            			endif
4323   EDD1             
4323   EDAF             
4323   EDAF 21          
4323   EDB0             
4323   EDB0             
4323   EDB0~            			endif
4323   EDB0~            			endif
4323   EDB0~            			endif
4323   EDB0             
4323   EDD1             
4323   EDD1~            			endif
4323   EDD1~            			endif
4323   EDD1             
4324   EDD1 8D CB       			bsr	send_snd_save		;Send the Command, Save in 'lastsound'
4325   EDD3 08          			inx	
4326   EDD4 DF BB       			stx	soundptr			;Move pointer to next byte
4327   EDD6 A6 00       			ldaa	$00,X
4328   EDD8 81 3F       			cmpa	#$3F				;Are we done?
4329   EDDA             			ifeq
4329   EDDA             
4329   EDDA 26 FE       
4330   EDDC 96 BA       				ldaa	cur_sndflags		;Yes 
4331   EDDE 84 7F       				anda	#$7F				;Mark it as a simple sound now
4332   EDE0 97 BA       				staa	cur_sndflags
4333   EDE2             			endif
4333   EDE2             
4333   EDE2             
4333   EDE2             
4333   EDE2             
4333   EDE2             
4333   EDE2~            			endif
4333   EDE2~            			endif
4333   EDE2             
4333   EDE2~            			endif
4333   EDE2~            			endif
4333   EDE2             
4333   EDDB             
4333   EDDB 06          
4333   EDDC             
4333   EDDC             
4333   EDDC~            			endif
4333   EDDC~            			endif
4333   EDDC~            			endif
4333   EDDC             
4333   EDE2             
4333   EDE2~            			endif
4333   EDE2~            			endif
4333   EDE2             
4334   EDE2 DE C3       			ldx	csound_timer
4335   EDE4 DF BD       			stx	soundirqcount
4336   EDE6 39          			rts	
4337   EDE7             
4338   EDE7             ;**********************************************************
4339   EDE7             ;* This routine will check two of the switch flags in the
4340   EDE7             ;* B register (byte 1 of switch table). If the switch 
4341   EDE7             ;* is disabled for either flag (tilt and gameover) then
4342   EDE7             ;* the routine returns with the carry flag set.
4343   EDE7             ;**********************************************************			
4344   EDE7 36          check_sw_mask	psha	
4345   EDE8 B6 E0 4D    			ldaa	gr_lastswitch			;Last Switch # for Game
4346   EDEB 91 A5       			cmpa	sw_encoded				;Switch #
4347   EDED             			ifgt						;Out of Range!
4347   EDED             
4347   EDED 23 FE       
4348   EDEF C5 40       				bitb	#$40					;Flag 40: Active on Game Tilt
4349   EDF1             				ifeq
4349   EDF1             
4349   EDF1 26 FE       
4350   EDF3 7D 00 C8    					tst	flag_tilt				;Tilt Flag
4351   EDF6 26 09       					bne	sw_ignore
4352   EDF8             				endif
4352   EDF8             
4352   EDF8             
4352   EDF8             
4352   EDF8             
4352   EDF8             
4352   EDF8~            				endif
4352   EDF8~            				endif
4352   EDF8             
4352   EDF8~            				endif
4352   EDF8~            				endif
4352   EDF8             
4352   EDF2             
4352   EDF2 05          
4352   EDF3             
4352   EDF3             
4352   EDF3~            				endif
4352   EDF3~            				endif
4352   EDF3~            				endif
4352   EDF3             
4352   EDF8             
4352   EDF8~            				endif
4352   EDF8~            				endif
4352   EDF8             
4353   EDF8 C5 20       				bitb	#$20					;Flag 20: Active on Game Over
4354   EDFA 26 06       				bne	sw_active
4355   EDFC 7D 00 C9    				tst	flag_gameover			;Game Over?
4356   EDFF 27 01       				beq	sw_active
4357   EE01             			endif
4357   EE01             
4357   EE01             
4357   EE01             
4357   EE01             
4357   EE01             
4357   EE01~            			endif
4357   EE01~            			endif
4357   EE01             
4357   EE01~            			endif
4357   EE01~            			endif
4357   EE01             
4357   EDEE             
4357   EDEE 12          
4357   EDEF             
4357   EDEF             
4357   EDEF~            			endif
4357   EDEF~            			endif
4357   EDEF~            			endif
4357   EDEF             
4357   EE01             
4357   EE01~            			endif
4357   EE01~            			endif
4357   EE01             
4358   EE01 0D          sw_ignore		sec						;Ignore this switch when carry is set
4359   EE02 32          sw_active		pula	
4360   EE03 39          			rts	
4361   EE04             
4362   EE04             ;**********************************************************
4363   EE04             ;* Switch is in down position, see if we should run it.
4364   EE04             ;**********************************************************			
4365   EE04 BD EE F7    sw_down		jsr	sw_tbl_lookup		;Loads X with pointer to switch table entry
4366   EE07 E6 00       			ldab	$00,X				;GAME ROM Switch Data 1(Flags,etc)
4367   EE09 96 A4       			ldaa	sys_temp5
4368   EE0B 95 A2       			bita	sys_temp3
4369   EE0D 27 06       			beq	sw_dtime			;Is switch still down?
4370   EE0F C5 08       			bitb	#$08				;No, but check Flag 08 which is Instant Trigger
4371   EE11             			ifne					;Not instant,.. leave now.
4371   EE11             
4371   EE11 27 FE       
4372   EE13 20 04       				bra	sw_trig_yes			;Must have been instant, do it now.	
4373   EE15 C5 10       sw_dtime			bitb	#$10				;Switch has been down enough, but is it enabled?
4374   EE17             				ifne					;no.. leave now.
4374   EE17             
4374   EE17 27 FE       
4375   EE19 8D CC       sw_trig_yes				bsr	check_sw_mask		;Checks Switch Flags for Tilt and Gameover and if switch is in range
4376   EE1B             					ifcc					;If not okay to run... leave
4376   EE1B             
4376   EE1B 25 FE       
4377   EE1D 4F          						clra	
4378   EE1E C5 40       						bitb	#$40				;Is it Active on Game Tilt?
4379   EE20             						ifne					
4379   EE20             
4379   EE20 27 FE       
4380   EE22 8A 04       							oraa	#$04				;Give this thread a different priority then
4381   EE24             						endif
4381   EE24             
4381   EE24             
4381   EE24             
4381   EE24             
4381   EE24             
4381   EE24~            						endif
4381   EE24~            						endif
4381   EE24             
4381   EE24~            						endif
4381   EE24~            						endif
4381   EE24             
4381   EE21             
4381   EE21 02          
4381   EE22             
4381   EE22             
4381   EE22~            						endif
4381   EE22~            						endif
4381   EE22~            						endif
4381   EE22             
4381   EE24             
4381   EE24~            						endif
4381   EE24~            						endif
4381   EE24             
4382   EE24 97 AA       						staa	thread_priority
4383   EE26 96 A5       						ldaa	sw_encoded			;Switch # (encoded)
4384   EE28 EE 01       						ldx	$01,X
4385   EE2A C5 07       						bitb	#$07				;Was this a inline defined switch type? Type = 0
4386   EE2C             						ifeq					;Always?
4386   EE2C             
4386   EE2C 26 FE       
4387   EE2E EE 02       							ldx	$02,X				;Get handler address at base pointer + 2
4388   EE30             						endif
4388   EE30             
4388   EE30             
4388   EE30             
4388   EE30             
4388   EE30             
4388   EE30~            						endif
4388   EE30~            						endif
4388   EE30             
4388   EE30~            						endif
4388   EE30~            						endif
4388   EE30             
4388   EE2D             
4388   EE2D 02          
4388   EE2E             
4388   EE2E             
4388   EE2E~            						endif
4388   EE2E~            						endif
4388   EE2E~            						endif
4388   EE2E             
4388   EE30             
4388   EE30~            						endif
4388   EE30~            						endif
4388   EE30             
4389   EE30 5D          						tstb					;Is the handler code WML7 or Native?
4390   EE31             						ifmi					;Minus = WML7
4390   EE31             
4390   EE31 2A FE       
4391   EE33 DF A6       							stx	sys_temp_w2			;X = Handler Address
4392   EE35 CE F3 CB    							ldx	#switch_entry		;Will put this routine into VM.
4393   EE38             						endif
4393   EE38             
4393   EE38             
4393   EE38             
4393   EE38             
4393   EE38             
4393   EE38~            						endif
4393   EE38~            						endif
4393   EE38             
4393   EE38~            						endif
4393   EE38~            						endif
4393   EE38             
4393   EE32             
4393   EE32 05          
4393   EE33             
4393   EE33             
4393   EE33~            						endif
4393   EE33~            						endif
4393   EE33~            						endif
4393   EE33             
4393   EE38             
4393   EE38~            						endif
4393   EE38~            						endif
4393   EE38             
4394   EE38 BD E0 9F    						jsr	gr_switch_event		;Game ROM switch event hook
4395   EE3B BD EA 78    						jsr	newthread_sp		;Push VM: Data in A,B,X,threadpriority,$A6,$A7
4396   EE3E 25 69       						bcs	_clc_rts			;Carry set if VM was full and thread not added
4397   EE40             											;Exit now and don't mark switch as attended too.
4398   EE40             					endif
4398   EE40             
4398   EE40             
4398   EE40             
4398   EE40             
4398   EE40             
4398   EE40~            					endif
4398   EE40~            					endif
4398   EE40             
4398   EE40~            					endif
4398   EE40~            					endif
4398   EE40             
4398   EE1C             
4398   EE1C 23          
4398   EE1D             
4398   EE1D             
4398   EE1D~            					endif
4398   EE1D~            					endif
4398   EE1D~            					endif
4398   EE1D             
4398   EE40             
4398   EE40~            					endif
4398   EE40~            					endif
4398   EE40             
4399   EE40             				endif
4399   EE40             
4399   EE40             
4399   EE40             
4399   EE40             
4399   EE40             
4399   EE40~            				endif
4399   EE40~            				endif
4399   EE40             
4399   EE40~            				endif
4399   EE40~            				endif
4399   EE40             
4399   EE18             
4399   EE18 27          
4399   EE19             
4399   EE19             
4399   EE19~            				endif
4399   EE19~            				endif
4399   EE19~            				endif
4399   EE19             
4399   EE40             
4399   EE40~            				endif
4399   EE40~            				endif
4399   EE40             
4400   EE40             			endif
4400   EE40             
4400   EE40             
4400   EE40             
4400   EE40             
4400   EE40             
4400   EE40~            			endif
4400   EE40~            			endif
4400   EE40             
4400   EE40~            			endif
4400   EE40~            			endif
4400   EE40             
4400   EE12             
4400   EE12 2D          
4400   EE13             
4400   EE13             
4400   EE13~            			endif
4400   EE13~            			endif
4400   EE13~            			endif
4400   EE13             
4400   EE40             
4400   EE40~            			endif
4400   EE40~            			endif
4400   EE40             
4401   EE40 DE A0       			ldx	sys_temp1
4402   EE42 96 A2       			ldaa	sys_temp3
4403   EE44 A8 61       			eora	switch_debounced,X		;Clear Switch Matrix Flag (switch attended too)
4404   EE46 A7 61       			staa	switch_debounced,X
4405   EE48 DE A0       sw_proc		ldx	sys_temp1
4406   EE4A D6 A2       			ldab	sys_temp3
4407   EE4C 53          			comb	
4408   EE4D 17          			tba	
4409   EE4E E4 69       			andb	switch_masked,X
4410   EE50 E7 69       			stab	switch_masked,X
4411   EE52 16          			tab	
4412   EE53 E4 71       			andb	switch_pending,X
4413   EE55 E7 71       			stab	switch_pending,X
4414   EE57 16          			tab	
4415   EE58 A4 79       			anda	switch_aux,X
4416   EE5A A7 79       			staa	switch_aux,X
4417   EE5C E4 81       			andb	switch_b4,X
4418   EE5E E7 81       			stab	switch_b4,X
4419   EE60 39          			rts	
4420   EE61             
4421   EE61             ;****************************************************************************
4422   EE61             ;*
4423   EE61             ;****************************************************************************			
4424   EE61 DF A0       check_sw_close	stx	sys_temp1
4425   EE63 E6 61       			ldab	switch_debounced,X
4426   EE65 D7 A4       			stab	sys_temp5				;Store 
4427   EE67 97 A3       			staa	sys_temp4
4428   EE69 8D 2D       _sc01			bsr	getswitch				;Clear Carry if Switch Active or Done
4429   EE6B 25 28       			bcs	to_ldx_rts				;get outta here!
4430   EE6D 8D 3C       			bsr	sw_pack				;$A5 = ($A1<<3)+BitPos($A2)
4431   EE6F 8D 6A       			bsr	sw_get_time				;Gets Switch Trigger Data
4432   EE71             			ifne						;If it is not 0 then we must time it
4432   EE71             
4432   EE71 27 FE       
4433   EE73 9B AC       				adda	irqcount				;Number of IRQ's since last loop
4434   EE75 DE 96       				ldx	switch_queue_pointer
4435   EE77 8C 11 18    				cpx	#switch_queue_full
4436   EE7A 27 ED       				beq	_sc01
4437   EE7C A7 00       				staa	$00,X
4438   EE7E 96 A5       				ldaa	sw_encoded				;Encoded Switch Number
4439   EE80 A7 01       				staa	$01,X
4440   EE82 08          				inx	
4441   EE83 08          				inx	
4442   EE84 DF 96       				stx	switch_queue_pointer
4443   EE86 DE A0       				ldx	sys_temp1
4444   EE88 A6 81       				ldaa	switch_b4,X
4445   EE8A 9A A2       				oraa	sys_temp3
4446   EE8C A7 81       				staa	switch_b4,X
4447   EE8E 20 D9       				bra	_sc01
4448   EE90             			endif
4448   EE90             
4448   EE90             
4448   EE90             
4448   EE90             
4448   EE90             
4448   EE90~            			endif
4448   EE90~            			endif
4448   EE90             
4448   EE90~            			endif
4448   EE90~            			endif
4448   EE90             
4448   EE72             
4448   EE72 1D          
4448   EE73             
4448   EE73             
4448   EE73~            			endif
4448   EE73~            			endif
4448   EE73~            			endif
4448   EE73             
4448   EE90             
4448   EE90~            			endif
4448   EE90~            			endif
4448   EE90             
4449   EE90 BD EE 04    			jsr	sw_down				;Ready to do switch now!
4450   EE93 20 D4       			bra	_sc01
4451   EE95 DE A0       to_ldx_rts		ldx	sys_temp1
4452   EE97 39          			rts	
4453   EE98             
4454   EE98             ;****************************************************************************
4455   EE98             ;*
4456   EE98             ;****************************************************************************				
4457   EE98 4F          getswitch		clra	
4458   EE99 0D          			sec	
4459   EE9A D6 A3       			ldab	sys_temp4			;Switch Data
4460   EE9C             			ifne
4460   EE9C             
4460   EE9C 27 FE       
4461   EE9E             				begin
4461   EE9E             
4462   EE9E 49          					rola	
4463   EE9F 95 A3       					bita	sys_temp4
4464   EEA1             				neend
4464   EEA1             
4464   EEA1             
4464   EEA1~            				neend
4464   EEA1~            				neend
4464   EEA1~            				neend
4464   EEA1             
4464   EEA1 27 FB       
4464   EEA3             
4464   EEA3~            				neend
4464   EEA3~            				neend
4464   EEA3             
4465   EEA3 97 A2       				staa	sys_temp3
4466   EEA5 98 A3       				eora	sys_temp4
4467   EEA7 97 A3       				staa	sys_temp4
4468   EEA9 0C          _clc_rts			clc	
4469   EEAA             			endif
4469   EEAA             
4469   EEAA             
4469   EEAA             
4469   EEAA             
4469   EEAA             
4469   EEAA~            			endif
4469   EEAA~            			endif
4469   EEAA             
4469   EEAA~            			endif
4469   EEAA~            			endif
4469   EEAA             
4469   EE9D             
4469   EE9D 0C          
4469   EE9E             
4469   EE9E             
4469   EE9E~            			endif
4469   EE9E~            			endif
4469   EE9E~            			endif
4469   EE9E             
4469   EEAA             
4469   EEAA~            			endif
4469   EEAA~            			endif
4469   EEAA             
4470   EEAA 39          			rts	
4471   EEAB             
4472   EEAB             ;****************************************************************************
4473   EEAB             ;* Takes the decimal representation of the switch number contained in 
4474   EEAB             ;* sys_temp2 and sys_temp3 and converts it into a more compact form of 
4475   EEAB             ;* 	
4476   EEAB             ;* AAAAABBB
4477   EEAB             ;* 
4478   EEAB             ;* where AAAAA is the column number of the switch (sw 17 = 2)
4479   EEAB             ;*       BBB   is the bit position of the current switch (sw 17 = $01)
4480   EEAB             ;****************************************************************************	
4481   EEAB 96 A1       sw_pack		ldaa	sys_temp2
4482   EEAD 48          			asla	
4483   EEAE 48          			asla	
4484   EEAF 48          			asla	
4485   EEB0 D6 A2       			ldab	sys_temp3
4486   EEB2             			begin
4486   EEB2             
4487   EEB2 56          				rorb	
4488   EEB3 25 03       				bcs	pack_done
4489   EEB5 4C          				inca	
4490   EEB6             			loopend
4490   EEB6             
4490   EEB6             
4490   EEB6~            			loopend
4490   EEB6~            			loopend
4490   EEB6~            			loopend
4490   EEB6             
4490   EEB6 20 FA       
4490   EEB8             
4490   EEB8~            			loopend
4490   EEB8~            			loopend
4490   EEB8             
4491   EEB8 97 A5       pack_done		staa	sw_encoded
4492   EEBA 39          			rts	
4493   EEBB             
4494   EEBB             ;****************************************************************************
4495   EEBB             ;*
4496   EEBB             ;****************************************************************************				
4497   EEBB 97 A3       check_sw_open	staa	sys_temp4
4498   EEBD DF A0       			stx	sys_temp1
4499   EEBF 8D D7       b_06F			bsr	getswitch				;Clear Carry if Switch Activated
4500   EEC1 25 D2       			bcs	to_ldx_rts				;ldx $A0, rts.
4501   EEC3 8D E6       			bsr	sw_pack				;$A5(A) = ($A1<<3)+BitPos($A2) Encode Matrix Position
4502   EEC5 CE 11 00    			ldx	#switch_queue
4503   EEC8 9C 96       b_071			cpx	switch_queue_pointer
4504   EECA 27 F3       			beq	b_06F
4505   EECC A1 01       			cmpa	$01,X					;Is this switch in the buffer?
4506   EECE 26 07       			bne	b_070
4507   EED0 8D 3D       			bsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
4508   EED2 BD EE 48    			jsr	sw_proc
4509   EED5 20 E8       			bra	b_06F
4510   EED7 08          b_070			inx	
4511   EED8 08          			inx	
4512   EED9 20 ED       			bra	b_071
4513   EEDB             			
4514   EEDB             ;****************************************************************************
4515   EEDB             ;* Looks up the trigger data (time up and time down requirements) for the
4516   EEDB             ;* switch contained in 'sw_encoded'. If the switch table lists the trigger
4517   EEDB             ;* type as 0, then the trigger data is pulled from the location in bytes
4518   EEDB             ;* 2 and 3 of the switch table entry.
4519   EEDB             ;****************************************************************************				
4520   EEDB 8D 1A       sw_get_time		bsr	sw_tbl_lookup		;X = Data@ (E051 + $A5*3)
4521   EEDD A6 00       			ldaa	$00,X
4522   EEDF 84 07       			anda	#$07				;Get the trigger type for this switch
4523   EEE1             			ifne					;If 1-7, then look up data in switch type table
4523   EEE1             
4523   EEE1 27 FE       
4524   EEE3 48          				asla						
4525   EEE4 CE E0 67    				ldx	#gr_switchtypetable-2		;Game ROM Table: Switch Trigger Table
4526   EEE7 8D 16       				bsr	xplusa				;X = X + A
4527   EEE9             			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE9             
4527   EEE9             
4527   EEE9             
4527   EEE9             
4527   EEE2             
4527   EEE2             
4527   EEE2             
4527   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE2             
4527   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEE2             
4527   EEE2             
4527   EEE2 08          
4527   EEE9             
4527   EEE9 20 FE       
4527   EEEB             
4527   EEEB             
4527   EEEB             
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB             
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB             
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4527   EEEB             
4528   EEEB EE 01       				ldx	$01,X
4529   EEED             			endif
4529   EEED             
4529   EEED             
4529   EEED             
4529   EEED             
4529   EEED             
4529   EEED~            			endif
4529   EEED~            			endif
4529   EEED             
4529   EEED~            			endif
4529   EEED~            			endif
4529   EEED             
4529   EEEA             
4529   EEEA 02          
4529   EEEB             
4529   EEEB             
4529   EEEB~            			endif
4529   EEEB~            			endif
4529   EEEB~            			endif
4529   EEEB             
4529   EEED             
4529   EEED~            			endif
4529   EEED~            			endif
4529   EEED             
4530   EEED 96 A4       			ldaa	sys_temp5			;Matrix Data
4531   EEEF 94 A2       			anda	sys_temp3			;Bit Position
4532   EEF1             			ifne
4532   EEF1             
4532   EEF1 27 FE       
4533   EEF3 08          				inx					;Point to Switch Close Trigger data instead
4534   EEF4             			endif
4534   EEF4             
4534   EEF4             
4534   EEF4             
4534   EEF4             
4534   EEF4             
4534   EEF4~            			endif
4534   EEF4~            			endif
4534   EEF4             
4534   EEF4~            			endif
4534   EEF4~            			endif
4534   EEF4             
4534   EEF2             
4534   EEF2 01          
4534   EEF3             
4534   EEF3             
4534   EEF3~            			endif
4534   EEF3~            			endif
4534   EEF3~            			endif
4534   EEF3             
4534   EEF4             
4534   EEF4~            			endif
4534   EEF4~            			endif
4534   EEF4             
4535   EEF4 A6 00       			ldaa	$00,X				;Load Trigger Data
4536   EEF6 39          			rts	
4537   EEF7             			
4538   EEF7 96 A5       sw_tbl_lookup	ldaa	sw_encoded
4539   EEF9 16          			tab	
4540   EEFA 48          			asla					;Times 3 for switch table entry length
4541   EEFB 1B          			aba	
4542   EEFC FE E0 51    			ldx	gr_switchtable_ptr		;*** Table Pointer ***
4543   EEFF 36          xplusa		psha	
4544   EF00 DF A6       			stx	sys_temp_w2
4545   EF02 9B A7       			adda	sys_temp_w2+1
4546   EF04 97 A7       			staa	sys_temp_w2+1
4547   EF06             			ifcs
4547   EF06             
4547   EF06 24 FE       
4548   EF08 7C 00 A6    				inc	sys_temp_w2
4549   EF0B             			endif 
4549   EF0B             
4549   EF0B             
4549   EF0B             
4549   EF0B             
4549   EF0B             
4549   EF0B~            			endif 
4549   EF0B~            			endif 
4549   EF0B             
4549   EF0B~            			endif 
4549   EF0B~            			endif 
4549   EF0B             
4549   EF07             
4549   EF07 03          
4549   EF08             
4549   EF08             
4549   EF08~            			endif 
4549   EF08~            			endif 
4549   EF08~            			endif 
4549   EF08             
4549   EF0B             
4549   EF0B~            			endif 
4549   EF0B~            			endif 
4549   EF0B             
4550   EF0B DE A6       			ldx	sys_temp_w2
4551   EF0D 32          			pula	
4552   EF0E 39          			rts	
4553   EF0F             			
4554   EF0F DF A6       copy_word		stx	sys_temp_w2
4555   EF11 DE 96       			ldx	switch_queue_pointer
4556   EF13 09          			dex	
4557   EF14 09          			dex	
4558   EF15 DF 96       			stx	switch_queue_pointer
4559   EF17 A6 00       			ldaa	$00,X
4560   EF19 E6 01       			ldab	$01,X
4561   EF1B DE A6       			ldx	sys_temp_w2
4562   EF1D A7 00       			staa	$00,X
4563   EF1F E7 01       			stab	$01,X
4564   EF21 39          			rts	
4565   EF22             ;**************************************************
4566   EF22             ;* Initializes the Virtual Machine stack. Routine
4567   EF22             ;* will set up all 'next' pointers for each thread
4568   EF22             ;* placeholder. The VM size is determined by the 
4569   EF22             ;* settings in the game ROM. This must be balanced
4570   EF22             ;* properly for each game so that the created
4571   EF22             ;* threads do not clobber the cpu stack since they
4572   EF22             ;* grow towards each other.
4573   EF22             ;**************************************************
4574   EF22 F6 E0 4B    setup_vm_stack	ldab	gr_maxthreads		;Max Size of VM
4575   EF25 CE 11 A8    			ldx	#$11A8
4576   EF28 DF AF       			stx	vm_nextslot
4577   EF2A             			begin
4577   EF2A             
4578   EF2A DF 9C       				stx	temp2
4579   EF2C 96 9D       				ldaa	temp2+1
4580   EF2E 8B 12       				adda	#$12
4581   EF30 A7 01       				staa	$01,X
4582   EF32 86 00       				ldaa	#$00
4583   EF34 99 9C       				adca	temp2
4584   EF36 A7 00       				staa	$00,X
4585   EF38 5A          				decb	
4586   EF39 27 04       				beq	stack_done
4587   EF3B EE 00       				ldx	$00,X
4588   EF3D             			loopend
4588   EF3D             
4588   EF3D             
4588   EF3D~            			loopend
4588   EF3D~            			loopend
4588   EF3D~            			loopend
4588   EF3D             
4588   EF3D 20 EB       
4588   EF3F             
4588   EF3F~            			loopend
4588   EF3F~            			loopend
4588   EF3F             
4589   EF3F E7 00       stack_done		stab	$00,X
4590   EF41 E7 01       			stab	$01,X
4591   EF43 D7 AD       			stab	vm_base
4592   EF45 D7 AE       			stab	vm_base+1
4593   EF47 CE 00 AD    			ldx	#vm_base
4594   EF4A DF B3       			stx	vm_tail_thread
4595   EF4C 39          			rts
4596   EF4D             ;**************************************************
4597   EF4D             ;* Adds B to X, Protects A
4598   EF4D             ;**************************************************				
4599   EF4D 36          xplusb		psha	
4600   EF4E 17          			tba	
4601   EF4F 8D AE       			bsr	xplusa		;X = X + A
4602   EF51 32          			pula	
4603   EF52 39          			rts	
4604   EF53             ;**************************************************
4605   EF53             ;* Pulls data from CMOS location in X and X+1
4606   EF53             ;* and puts it in A. X is double incremented.
4607   EF53             ;*
4608   EF53             ;* Requires:	X
4609   EF53             ;* Protects:	B
4610   EF53             ;* Output:		A
4611   EF53             ;**************************************************		
4612   EF53 37          cmosinc_a		pshb	
4613   EF54 A6 00       			ldaa	$00,X
4614   EF56 E6 01       			ldab	$01,X
4615   EF58 08          			inx	
4616   EF59 08          			inx	
4617   EF5A C4 0F       			andb	#$0F
4618   EF5C 48          			asla	
4619   EF5D 48          			asla	
4620   EF5E 48          			asla	
4621   EF5F 48          			asla	
4622   EF60 1B          			aba	
4623   EF61 33          			pulb	
4624   EF62 39          			rts	
4625   EF63             ;**************************************************
4626   EF63             ;* Pulls data from CMOS location in X and X+1
4627   EF63             ;* and puts it in B. X is double incremented.
4628   EF63             ;*
4629   EF63             ;* Requires:	X
4630   EF63             ;* Protects:	A
4631   EF63             ;* Output:		B
4632   EF63             ;**************************************************				
4633   EF63 36          cmosinc_b		psha	
4634   EF64 8D ED       			bsr	cmosinc_a
4635   EF66 16          			tab	
4636   EF67 32          			pula	
4637   EF68 39          			rts	
4638   EF69             ;**************************************************
4639   EF69             ;* Transfers the byte value in B to the CMOS RAM
4640   EF69             ;* location contained in X. The byte is stored in
4641   EF69             ;* two consecutive nybbles in CMOS. X is double 
4642   EF69             ;* incremented.
4643   EF69             ;*
4644   EF69             ;* Requires: 	B,X
4645   EF69             ;* Protects:	A
4646   EF69             ;**************************************************
4647   EF69 36          b_cmosinc		psha	
4648   EF6A 17          			tba	
4649   EF6B 8D 42       			bsr	a_cmosinc		;A -> CMOS,X++
4650   EF6D 32          			pula	
4651   EF6E 39          			rts	
4652   EF6F             ;**************************************************
4653   EF6F             ;* Reset Game Audits only
4654   EF6F             ;**************************************************			
4655   EF6F CE 00 66    reset_audits	ldx	#$0066		;Clear RAM from 0100-0165
4656   EF72 20 03       			bra	clr_ram
4657   EF74 CE 01 00    clr_ram_100		ldx	#cmos_base
4658   EF77             clr_ram		begin
4658   EF77             
4659   EF77 6F FF       				clr	$FF,X
4660   EF79 09          				dex	
4661   EF7A             			eqend
4661   EF7A             
4661   EF7A             
4661   EF7A~            			eqend
4661   EF7A~            			eqend
4661   EF7A~            			eqend
4661   EF7A             
4661   EF7A 26 FB       
4661   EF7C             
4661   EF7C~            			eqend
4661   EF7C~            			eqend
4661   EF7C             
4662   EF7C 39          			rts	
4663   EF7D             ;**************************************************
4664   EF7D             ;* Restores Factory Settings and resets all audit 
4665   EF7D             ;* information, reloads pricing data and restores 
4666   EF7D             ;* the backup high score.
4667   EF7D             ;**************************************************			
4668   EF7D             factory_zeroaudits	
4669   EF7D 8D F5       			bsr	clr_ram_100				;Clear RAM 0100-01FF
4670   EF7F CE 01 7D    			ldx	#adj_base
4671   EF82 DF 9A       			stx	temp1
4672   EF84 CE E0 03    			ldx	#gr_cmoscsum			;Begining of Default Audit Data
4673   EF87 C6 18       			ldab	#$18
4674   EF89 8D 59       			bsr	copyblock2				;Transfer Audit Data
4675   EF8B C6 01       			ldab	#$01
4676   EF8D B6 21 00    			ldaa	pia_sound_data			;Read W29 Jumper Setting
4677   EF90             			ifmi
4677   EF90             
4677   EF90 2A FE       
4678   EF92 5C          				incb
4679   EF93             			endif
4679   EF93             
4679   EF93             
4679   EF93             
4679   EF93             
4679   EF93             
4679   EF93~            			endif
4679   EF93~            			endif
4679   EF93             
4679   EF93~            			endif
4679   EF93~            			endif
4679   EF93             
4679   EF91             
4679   EF91 01          
4679   EF92             
4679   EF92             
4679   EF92~            			endif
4679   EF92~            			endif
4679   EF92~            			endif
4679   EF92             
4679   EF93             
4679   EF93~            			endif
4679   EF93~            			endif
4679   EF93             
4680   EF93 8D 3B       			bsr	loadpricing				;Load Pricing Data
4681   EF95 8D 06       			bsr	restore_hstd			;Restore Backup High Score
4682   EF97 CE FC A3    			ldx	#to_audadj
4683   EF9A 7E EA C4    			jmp	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
4684   EF9D             			
4685   EF9D             ;**************************************************
4686   EF9D             ;* Clears the CMOS High Score RAM then copies
4687   EF9D             ;* the backup high score.
4688   EF9D             ;**************************************************			
4689   EF9D 4F          restore_hstd	clra	
4690   EF9E BD FB 24    			jsr	fill_hstd_digits			;Fill HSTD Digits with A
4691   EFA1 CE 01 81    			ldx	#adj_backuphstd
4692   EFA4 8D AD       			bsr	cmosinc_a				;CMOS,X++ -> A
4693   EFA6 16          			tab	
4694   EFA7 BD EC F3    			jsr	split_ab				;Shift A<<4 B>>4
4695   EFAA CE 01 66    			ldx	#aud_currenthstd			;CMOS: Current HSTD
4696   EFAD 8D BA       			bsr	b_cmosinc				;B -> CMOS,X++
4697   EFAF             
4698   EFAF             ;**************************************************
4699   EFAF             ;* Transfers the byte value in A to the CMOS RAM
4700   EFAF             ;* location contained in X. The byte is stored in
4701   EFAF             ;* two consecutive nybbles in CMOS. X is double 
4702   EFAF             ;* incremented.
4703   EFAF             ;*
4704   EFAF             ;* Requires: 	A,X
4705   EFAF             ;* Protects:	B
4706   EFAF             ;**************************************************			
4707   EFAF 36          a_cmosinc		psha	
4708   EFB0 A7 01       			staa	$01,X
4709   EFB2 44          			lsra	
4710   EFB3 44          			lsra	
4711   EFB4 44          			lsra	
4712   EFB5 44          			lsra	
4713   EFB6 A7 00       			staa	$00,X
4714   EFB8 08          			inx	
4715   EFB9 08          			inx	
4716   EFBA 32          			pula	
4717   EFBB 39          			rts	
4718   EFBC             
4719   EFBC             ;********************************************************
4720   EFBC             ;* Copies B bytes of data from address in X(temp2) to 
4721   EFBC             ;* address in temp1
4722   EFBC             ;*
4723   EFBC             ;* Requires:	B,X,temp1
4724   EFBC             ;* Protects:	A
4725   EFBC             ;* Destroys:	B,X,temp1,temp2
4726   EFBC             ;* Output:		B = 0
4727   EFBC             ;******************************************************** 			
4728   EFBC 36          copyblock		psha	
4729   EFBD             			begin
4729   EFBD             
4730   EFBD A6 00       				ldaa	$00,X
4731   EFBF 08          				inx	
4732   EFC0 DF 9C       				stx	temp2
4733   EFC2 DE 9A       				ldx	temp1
4734   EFC4 A7 00       				staa	$00,X
4735   EFC6 08          				inx	
4736   EFC7 DF 9A       				stx	temp1
4737   EFC9 DE 9C       				ldx	temp2
4738   EFCB 5A          				decb	
4739   EFCC             			eqend
4739   EFCC             
4739   EFCC             
4739   EFCC~            			eqend
4739   EFCC~            			eqend
4739   EFCC~            			eqend
4739   EFCC             
4739   EFCC 26 EF       
4739   EFCE             
4739   EFCE~            			eqend
4739   EFCE~            			eqend
4739   EFCE             
4740   EFCE 32          			pula	
4741   EFCF 39          			rts
4742   EFD0             
4743   EFD0             ;************************************************
4744   EFD0             ;* Copies the default pricing data block from
4745   EFD0             ;* the game ROM to CMOS RAM. Register B contains
4746   EFD0             ;* either $01 or $02 which specifies which 
4747   EFD0             ;* default table to copy based on MPU jumper W29
4748   EFD0             ;*
4749   EFD0             ;* Requires: B
4750   EFD0             ;************************************************				
4751   EFD0 F7 01 AE    loadpricing		stab	adj_pricecontrol+1		;Get the LSB of the pricing index
4752   EFD3 CE 01 AF    			ldx	#cmos_pricingbase   
4753   EFD6 DF 9A       			stx	temp1
4754   EFD8 58          			aslb						
4755   EFD9 17          			tba	
4756   EFDA 48          			asla	
4757   EFDB 1B          			aba	
4758   EFDC CE E0 15    			ldx	#gr_gameadjust7			;*** Table Pointer ***
4759   EFDF BD EE FF    			jsr	xplusa				;X = X + A
4760   EFE2 C6 06       			ldab	#$06
4761   EFE4 36          copyblock2		psha
4762   EFE5             			begin	
4762   EFE5             
4763   EFE5 A6 00       				ldaa	$00,X
4764   EFE7 08          				inx	
4765   EFE8 DF 9C       				stx	temp2
4766   EFEA DE 9A       				ldx	temp1
4767   EFEC 8D C1       				bsr	a_cmosinc				;A -> CMOS,X++
4768   EFEE DF 9A       				stx	temp1
4769   EFF0 DE 9C       				ldx	temp2
4770   EFF2 5A          				decb	
4771   EFF3             			eqend
4771   EFF3             
4771   EFF3             
4771   EFF3~            			eqend
4771   EFF3~            			eqend
4771   EFF3~            			eqend
4771   EFF3             
4771   EFF3 26 F0       
4771   EFF5             
4771   EFF5~            			eqend
4771   EFF5~            			eqend
4771   EFF5             
4772   EFF5 32          			pula	
4773   EFF6 39          			rts
4774   EFF7             			
4775   EFF7             ;******************************************************
4776   EFF7             ;* IRQ Routine
4777   EFF7             ;*
4778   EFF7             ;* This is the main timekeeping section of the code. 
4779   EFF7             ;* All events are kept track of by couting the IRQ's
4780   EFF7             ;* that have run.
4781   EFF7             ;*
4782   EFF7             ;* Tasks processed in the IRQ:
4783   EFF7             ;*		
4784   EFF7             ;*		Update Next Lamp
4785   EFF7             ;******************************************************			
4786   EFF7             sys_irq			
4787   EFF7             			;***********************************
4788   EFF7             			;* Start IRQ with Lamps...
4789   EFF7             			;***********************************
4790   EFF7 86 FF       			ldaa	#$FF
4791   EFF9 D6 89       			ldab	irq_counter
4792   EFFB 56          			rorb	
4793   EFFC             			ifcc						;Do Lamps every other IRQ
4793   EFFC             
4793   EFFC 25 FE       
4794   EFFE 7C 00 8B    				inc	lamp_index_word+1
4795   F001 CE 24 00    				ldx	#pia_lamp_row_data			;Lamp PIA Offset
4796   F004 A7 00       				staa	$00,X					;Blank Lamp Rows with an $FF
4797   F006 E6 03       				ldab	$03,X
4798   F008 6F 03       				clr	$03,X
4799   F00A A7 02       				staa	$02,X					;Blank Lamp Columns with $FF
4800   F00C E7 03       				stab	$03,X
4801   F00E 96 8C       				ldaa	lamp_bit				;Which strobe are we on
4802   F010 48          				asla						;Shift to next one
4803   F011             				ifeq						;Did it shift off end?			
4803   F011             
4803   F011 26 FE       
4804   F013 97 8B       					staa	lamp_index_word+1			;Yes, Reset lamp strobe count
4805   F015 97 89       					staa	irq_counter				;And Reset IRQ counter
4806   F017 4C          					inca						;Make it a 1
4807   F018             				endif
4807   F018             
4807   F018             
4807   F018             
4807   F018             
4807   F018             
4807   F018~            				endif
4807   F018~            				endif
4807   F018             
4807   F018~            				endif
4807   F018~            				endif
4807   F018             
4807   F012             
4807   F012 05          
4807   F013             
4807   F013             
4807   F013~            				endif
4807   F013~            				endif
4807   F013~            				endif
4807   F013             
4807   F018             
4807   F018~            				endif
4807   F018~            				endif
4807   F018             
4808   F018 97 8C       				staa	lamp_bit			;Store new lamp strobe bit position
4809   F01A A7 02       				staa	$02,X				;Put the strobe out there
4810   F01C A1 02       				cmpa	$02,X				;Did it take?
4811   F01E             				ifeq
4811   F01E             
4811   F01E 26 FE       
4812   F020 DE 8A       					ldx	lamp_index_word			;This will always be $0001-$0080, it is
4813   F022             											;used to index the lamp buffer bit positions.			
4814   F022 A6 20       					ldaa	lampbufferselect,X		;0=buffer_0 1=buffer_1
4815   F024 16          					tab	
4816   F025 53          					comb	
4817   F026 E4 10       					andb	lampbuffer0,X
4818   F028 A4 28       					anda	lampbuffer1,X
4819   F02A 1B          					aba	
4820   F02B 43          					coma	
4821   F02C B7 24 00    					staa	pia_lamp_row_data			;Store Lamp Row Data
4822   F02F             				endif
4822   F02F             
4822   F02F             
4822   F02F             
4822   F02F             
4822   F02F             
4822   F02F~            				endif
4822   F02F~            				endif
4822   F02F             
4822   F02F~            				endif
4822   F02F~            				endif
4822   F02F             
4822   F01F             
4822   F01F 0F          
4822   F020             
4822   F020             
4822   F020~            				endif
4822   F020~            				endif
4822   F020~            				endif
4822   F020             
4822   F02F             
4822   F02F~            				endif
4822   F02F~            				endif
4822   F02F             
4823   F02F             			endif
4823   F02F             
4823   F02F             
4823   F02F             
4823   F02F             
4823   F02F             
4823   F02F~            			endif
4823   F02F~            			endif
4823   F02F             
4823   F02F~            			endif
4823   F02F~            			endif
4823   F02F             
4823   EFFD             
4823   EFFD 31          
4823   EFFE             
4823   EFFE             
4823   EFFE~            			endif
4823   EFFE~            			endif
4823   EFFE~            			endif
4823   EFFE             
4823   F02F             
4823   F02F~            			endif
4823   F02F~            			endif
4823   F02F             
4824   F02F             			;***********************************
4825   F02F             			;* Now we will do the displays
4826   F02F             			;***********************************
4827   F02F DE 8A       			ldx	lamp_index_word		;Reset X back to $0000
4828   F031 D6 89       			ldab	irq_counter
4829   F033 C4 07       			andb	#$07
4830   F035             			ifeq				;Branch on Digits 2-8 or 10-16 (scores)
4830   F035             
4830   F035 26 FE       
4831   F037 86 FF       				ldaa	#$FF
4832   F039 B7 28 02    				staa	pia_disp_seg_data			;Display PIA Port B
4833   F03C D6 89       				ldab	irq_counter
4834   F03E F7 28 00    				stab	pia_disp_digit_data		;Display PIA Port A
4835   F041 26 6A       				bne	b_081
4836   F043 7C 00 95    				inc	irqcount16
4837   F046 96 60       				ldaa	comma_flags
4838   F048 97 8D       				staa	comma_data_temp
4839   F04A 96 5C       				ldaa	dmask_p1
4840   F04C 97 8E       				staa	credp1p2_bufferselect
4841   F04E 96 5E       				ldaa	dmask_p3
4842   F050 97 8F       				staa	mbipp3p4_bufferselect
4843   F052 D6 5A       				ldab	cred_b0
4844   F054 79 00 8E    				rol	credp1p2_bufferselect
4845   F057             				ifcs
4845   F057             
4845   F057 24 FE       
4846   F059 D6 5B       					ldab	cred_b1
4847   F05B             				endif
4847   F05B             
4847   F05B             
4847   F05B             
4847   F05B             
4847   F05B             
4847   F05B~            				endif
4847   F05B~            				endif
4847   F05B             
4847   F05B~            				endif
4847   F05B~            				endif
4847   F05B             
4847   F058             
4847   F058 02          
4847   F059             
4847   F059             
4847   F059~            				endif
4847   F059~            				endif
4847   F059~            				endif
4847   F059             
4847   F05B             
4847   F05B~            				endif
4847   F05B~            				endif
4847   F05B             
4848   F05B 96 58       				ldaa	mbip_b0
4849   F05D 79 00 8F    				rol	mbipp3p4_bufferselect
4850   F060 24 43       				bcc	b_083
4851   F062 96 59       				ldaa	mbip_b1
4852   F064 20 3F       				bra	b_083
4853   F066             			endif
4853   F066             
4853   F066             
4853   F066             
4853   F066             
4853   F066             
4853   F066~            			endif
4853   F066~            			endif
4853   F066             
4853   F066~            			endif
4853   F066~            			endif
4853   F066             
4853   F036             
4853   F036 2F          
4853   F037             
4853   F037             
4853   F037~            			endif
4853   F037~            			endif
4853   F037~            			endif
4853   F037             
4853   F066             
4853   F066~            			endif
4853   F066~            			endif
4853   F066             
4854   F066 D7 90       			stab	swap_player_displays
4855   F068 5A          			decb	
4856   F069 27 04       			beq	b_084
4857   F06B C0 03       			subb	#$03
4858   F06D             			ifeq
4858   F06D             
4858   F06D 26 FE       
4859   F06F 79 00 8D    b_084				rol	comma_data_temp			;Commas...
4860   F072 56          				rorb	
4861   F073 79 00 8D    				rol	comma_data_temp
4862   F076 56          				rorb	
4863   F077 FA 21 02    				orab	pia_comma_data			;Store Commas
4864   F07A             			else
4864   F07A             
4864   F07A             
4864   F07A             
4864   F07A             
4864   F06E             
4864   F06E             
4864   F06E             
4864   F06E~            			else
4864   F06E~            			else
4864   F06E~            			else
4864   F06E~            			else
4864   F06E             
4864   F06E~            			else
4864   F06E~            			else
4864   F06E~            			else
4864   F06E~            			else
4864   F06E             
4864   F06E             
4864   F06E 0D          
4864   F07A             
4864   F07A 20 FE       
4864   F07C             
4864   F07C             
4864   F07C             
4864   F07C~            			else
4864   F07C~            			else
4864   F07C~            			else
4864   F07C~            			else
4864   F07C~            			else
4864   F07C             
4864   F07C~            			else
4864   F07C~            			else
4864   F07C             
4864   F07C~            			else
4864   F07C~            			else
4864   F07C             
4865   F07C F6 21 02    				ldab	pia_comma_data			;Get Comma Data
4866   F07F C4 3F       				andb	#$3F
4867   F081             			endif						;Blank them out.
4867   F081             
4867   F081             
4867   F081             
4867   F081             
4867   F081             
4867   F081~            			endif						;Blank them out.
4867   F081~            			endif						;Blank them out.
4867   F081             
4867   F081~            			endif						;Blank them out.
4867   F081~            			endif						;Blank them out.
4867   F081             
4867   F07B             
4867   F07B 05          
4867   F07C             
4867   F07C             
4867   F07C~            			endif						;Blank them out.
4867   F07C~            			endif						;Blank them out.
4867   F07C~            			endif						;Blank them out.
4867   F07C             
4867   F081             
4867   F081~            			endif						;Blank them out.
4867   F081~            			endif						;Blank them out.
4867   F081             
4868   F081 F7 21 02    			stab	pia_comma_data			;Store the data.
4869   F084 86 FF       			ldaa	#$FF
4870   F086 B7 28 02    			staa	pia_disp_seg_data			;Blank the Display Digits
4871   F089 96 89       			ldaa	irq_counter
4872   F08B B7 28 00    			staa	pia_disp_digit_data		;Send Display Strobe
4873   F08E A6 38       			ldaa	score_p1_b0,X			;Buffer 0
4874   F090 79 00 8E    			rol	credp1p2_bufferselect
4875   F093             			ifcs
4875   F093             
4875   F093 24 FE       
4876   F095 A6 48       				ldaa	score_p1_b1,X			;Buffer 1
4877   F097             			endif
4877   F097             
4877   F097             
4877   F097             
4877   F097             
4877   F097             
4877   F097~            			endif
4877   F097~            			endif
4877   F097             
4877   F097~            			endif
4877   F097~            			endif
4877   F097             
4877   F094             
4877   F094 02          
4877   F095             
4877   F095             
4877   F095~            			endif
4877   F095~            			endif
4877   F095~            			endif
4877   F095             
4877   F097             
4877   F097~            			endif
4877   F097~            			endif
4877   F097             
4878   F097 E6 40       			ldab	score_p3_b0,X			;Buffer 0
4879   F099 79 00 8F    			rol	mbipp3p4_bufferselect
4880   F09C             			ifcs
4880   F09C             
4880   F09C 24 FE       
4881   F09E E6 50       				ldab	score_p3_b1,X			;Buffer 1
4882   F0A0             			endif
4882   F0A0             
4882   F0A0             
4882   F0A0             
4882   F0A0             
4882   F0A0             
4882   F0A0~            			endif
4882   F0A0~            			endif
4882   F0A0             
4882   F0A0~            			endif
4882   F0A0~            			endif
4882   F0A0             
4882   F09D             
4882   F09D 02          
4882   F09E             
4882   F09E             
4882   F09E~            			endif
4882   F09E~            			endif
4882   F09E~            			endif
4882   F09E             
4882   F0A0             
4882   F0A0~            			endif
4882   F0A0~            			endif
4882   F0A0             
4883   F0A0 76 00 90    			ror	swap_player_displays
4884   F0A3             			ifcc
4884   F0A3             
4884   F0A3 25 FE       
4885   F0A5 54          b_083				lsrb						;Show BA
4886   F0A6 54          				lsrb	
4887   F0A7 54          				lsrb	
4888   F0A8 54          				lsrb	
4889   F0A9 84 F0       				anda	#$F0
4890   F0AB 20 20       				bra	b_08A					;Goto Display End
4891   F0AD 96 5D       b_081				ldaa	dmask_p2
4892   F0AF 97 8E       				staa	credp1p2_bufferselect
4893   F0B1 96 5F       				ldaa	dmask_p4
4894   F0B3 97 8F       				staa	mbipp3p4_bufferselect
4895   F0B5 D6 5A       				ldab	cred_b0
4896   F0B7 79 00 8E    				rol	credp1p2_bufferselect
4897   F0BA             				ifcs
4897   F0BA             
4897   F0BA 24 FE       
4898   F0BC D6 5B       					ldab	cred_b1
4899   F0BE             				endif
4899   F0BE             
4899   F0BE             
4899   F0BE             
4899   F0BE             
4899   F0BE             
4899   F0BE~            				endif
4899   F0BE~            				endif
4899   F0BE             
4899   F0BE~            				endif
4899   F0BE~            				endif
4899   F0BE             
4899   F0BB             
4899   F0BB 02          
4899   F0BC             
4899   F0BC             
4899   F0BC~            				endif
4899   F0BC~            				endif
4899   F0BC~            				endif
4899   F0BC             
4899   F0BE             
4899   F0BE~            				endif
4899   F0BE~            				endif
4899   F0BE             
4900   F0BE 96 58       				ldaa	mbip_b0
4901   F0C0 79 00 8F    				rol	mbipp3p4_bufferselect
4902   F0C3             				ifcs
4902   F0C3             
4902   F0C3 24 FE       
4903   F0C5 96 59       					ldaa	mbip_b1
4904   F0C7             				endif
4904   F0C7             
4904   F0C7             
4904   F0C7             
4904   F0C7             
4904   F0C7             
4904   F0C7~            				endif
4904   F0C7~            				endif
4904   F0C7             
4904   F0C7~            				endif
4904   F0C7~            				endif
4904   F0C7             
4904   F0C4             
4904   F0C4 02          
4904   F0C5             
4904   F0C5             
4904   F0C5~            				endif
4904   F0C5~            				endif
4904   F0C5~            				endif
4904   F0C5             
4904   F0C7             
4904   F0C7~            				endif
4904   F0C7~            				endif
4904   F0C7             
4905   F0C7             			endif
4905   F0C7             
4905   F0C7             
4905   F0C7             
4905   F0C7             
4905   F0C7             
4905   F0C7~            			endif
4905   F0C7~            			endif
4905   F0C7             
4905   F0C7~            			endif
4905   F0C7~            			endif
4905   F0C7             
4905   F0A4             
4905   F0A4 22          
4905   F0A5             
4905   F0A5             
4905   F0A5~            			endif
4905   F0A5~            			endif
4905   F0A5~            			endif
4905   F0A5             
4905   F0C7             
4905   F0C7~            			endif
4905   F0C7~            			endif
4905   F0C7             
4906   F0C7 48          			asla						;Show AB
4907   F0C8 48          			asla	
4908   F0C9 48          			asla	
4909   F0CA 48          			asla	
4910   F0CB C4 0F       			andb	#$0F					;Fall through to end
4911   F0CD 1B          b_08A			aba	
4912   F0CE B7 28 02    			staa	pia_disp_seg_data			;Store Digit BCD Data
4913   F0D1             			;***********************************
4914   F0D1             			;* Done with Displays
4915   F0D1             			;* Increment the IRQ counter
4916   F0D1             			;***********************************
4917   F0D1 96 89       			ldaa	irq_counter				;We need to increment this every time.
4918   F0D3 4C          			inca	
4919   F0D4 97 89       			staa	irq_counter
4920   F0D6             			;***********************************
4921   F0D6             			;* Now do switches, The switch logic
4922   F0D6             			;* has a total of 5 data buffers.
4923   F0D6             			;* These are used for debouncing the
4924   F0D6             			;* switch through software.
4925   F0D6             			;***********************************
4926   F0D6 46          			rora	
4927   F0D7             			ifcc						;Every other IRQ, do all switches
4927   F0D7             
4927   F0D7 25 FE       
4928   F0D9 86 01       				ldaa	#$01
4929   F0DB B7 30 02    				staa	pia_switch_strobe_data		;Store Switch Column Drives
4930   F0DE CE 00 00    				ldx	#ram_base
4931   F0E1             				begin
4931   F0E1             
4932   F0E1 A6 61       					ldaa	switch_debounced,X
4933   F0E3 B8 30 00    					eora	pia_switch_return_data		;Switch Row Return Data
4934   F0E6 16          					tab	
4935   F0E7 A4 69       					anda	switch_masked,X
4936   F0E9 AA 71       					oraa	switch_pending,X
4937   F0EB A7 71       					staa	switch_pending,X
4938   F0ED E7 69       					stab	switch_masked,X
4939   F0EF 53          					comb	
4940   F0F0 E4 71       					andb	switch_pending,X
4941   F0F2 EA 79       					orab	switch_aux,X
4942   F0F4 E7 79       					stab	switch_aux,X
4943   F0F6 08          					inx	
4944   F0F7 78 30 02    					asl	pia_switch_strobe_data		;Shift to Next Column Drive
4945   F0FA             				csend
4945   F0FA             
4945   F0FA             
4945   F0FA~            				csend
4945   F0FA~            				csend
4945   F0FA~            				csend
4945   F0FA             
4945   F0FA 24 E5       
4945   F0FC             
4945   F0FC~            				csend
4945   F0FC~            				csend
4945   F0FC             
4946   F0FC             			endif
4946   F0FC             
4946   F0FC             
4946   F0FC             
4946   F0FC             
4946   F0FC             
4946   F0FC~            			endif
4946   F0FC~            			endif
4946   F0FC             
4946   F0FC~            			endif
4946   F0FC~            			endif
4946   F0FC             
4946   F0D8             
4946   F0D8 23          
4946   F0D9             
4946   F0D9             
4946   F0D9~            			endif
4946   F0D9~            			endif
4946   F0D9~            			endif
4946   F0D9             
4946   F0FC             
4946   F0FC~            			endif
4946   F0FC~            			endif
4946   F0FC             
4947   F0FC             			;***********************************
4948   F0FC             			;* Now do solenoids
4949   F0FC             			;***********************************
4950   F0FC 96 94       			ldaa	solenoid_counter			;Solenoid Counter
4951   F0FE             			ifne
4951   F0FE             
4951   F0FE 27 FE       
4952   F100 7A 00 94    				dec	solenoid_counter			;Solenoid Counter
4953   F103             				ifeq
4953   F103             
4953   F103 26 FE       
4954   F105 DE 91       					ldx	solenoid_address
4955   F107 A6 00       					ldaa	$00,X
4956   F109 98 93       					eora	solenoid_bitpos
4957   F10B A7 00       					staa	$00,X
4958   F10D             				endif
4958   F10D             
4958   F10D             
4958   F10D             
4958   F10D             
4958   F10D             
4958   F10D~            				endif
4958   F10D~            				endif
4958   F10D             
4958   F10D~            				endif
4958   F10D~            				endif
4958   F10D             
4958   F104             
4958   F104 08          
4958   F105             
4958   F105             
4958   F105~            				endif
4958   F105~            				endif
4958   F105~            				endif
4958   F105             
4958   F10D             
4958   F10D~            				endif
4958   F10D~            				endif
4958   F10D             
4959   F10D             			endif
4959   F10D             
4959   F10D             
4959   F10D             
4959   F10D             
4959   F10D             
4959   F10D~            			endif
4959   F10D~            			endif
4959   F10D             
4959   F10D~            			endif
4959   F10D~            			endif
4959   F10D             
4959   F0FF             
4959   F0FF 0D          
4959   F100             
4959   F100             
4959   F100~            			endif
4959   F100~            			endif
4959   F100~            			endif
4959   F100             
4959   F10D             
4959   F10D~            			endif
4959   F10D~            			endif
4959   F10D             
4960   F10D 3B          			rti
4961   F10E             ;*************************************************************************
4962   F10E             ;* End IRQ
4963   F10E             ;*************************************************************************
4964   F10E             
4965   F10E             ;*************************************************************************
4966   F10E             ;* PIA Data Direction Register Data - Loaded on Initialization
4967   F10E             ;*************************************************************************
4968   F10E 7F 3E C0 3E pia_ddr_data	.db $7F,$3E,$C0,$3E	;$2100 - Sound PIA
4969   F112 FF 3C FF 34 			.db $FF,$3C,$FF,$34	;$2200 - Solenoid PIA
4970   F116 FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2400 - Lamp PIA
4971   F11A FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2800 - Display PIA
4972   F11E 00 3C FF 3C 			.db $00,$3C,$FF,$3C	;$3000 - Switch PIA
4973   F122             
4974   F122             ;*************************************************************************
4975   F122             ;* Special Solenoid Locations	- Defines the addresses for each PIA	
4976   F122             ;*************************************************************************	
4977   F122 24 03       spec_sol_def	.dw pia_lamp_col_ctrl		;Solenoid $10
4978   F124 24 01       			.dw pia_lamp_row_ctrl		;Solenoid $11
4979   F126 30 03       			.dw pia_switch_strobe_ctrl	;Solenoid $12
4980   F128 30 01       			.dw pia_switch_return_ctrl	;Solenoid $13
4981   F12A 22 01       			.dw pia_sol_low_ctrl		;Solenoid $14
4982   F12C 28 03       			.dw pia_disp_seg_ctrl		;Solenoid $15
4983   F12E 21 03       			.dw pia_comma_ctrl		;Solenoid $16-ST7
4984   F130 21 01       			.dw pia_sound_ctrl		;Solenoid $17-ST8
4985   F132 22 03       			.dw pia_sol_high_ctrl		;Solenoid $18-Flipper/Solenoid Enable
4986   F134             
4987   F134             ;*************************************************************************
4988   F134             ;* Lamp Buffer Locations		
4989   F134             ;*************************************************************************	
4990   F134 00 10       lampbuffers		.dw lampbuffer0
4991   F136 00 30       			.dw lampflashflag
4992   F138 00 28       			.dw lampbuffer1	
4993   F13A 00 20       			.dw lampbufferselect
4994   F13C             			
4995   F13C             ;*************************************************************************
4996   F13C             ;* Turn On Lamp: Lamp number is in A (packed format). This can also be 
4997   F13C             ;*               used to set a bitflag.
4998   F13C             ;*************************************************************************
4999   F13C DF 9E       lamp_on		stx	temp3
5000   F13E CE 00 10    			ldx	#lampbuffer0			;Set up correct index to lampbuffer
5001   F141 37          lamp_or		pshb	
5002   F142 8D 58       			bsr	unpack_byte				
5003   F144 37          			pshb						;B now contains the bitpos
5004   F145 EA 00       			orab	$00,X
5005   F147 E7 00       lamp_commit		stab	$00,X					;turn it on
5006   F149 DF 9C       			stx	temp2
5007   F14B D6 9D       			ldab	temp2+1				;was item worked on within lampbuffer0
5008   F14D C1 18       			cmpb	#(bitflags)&$FF			;compare index against start of bitflags
5009   F14F 33          			pulb	
5010   F150 24 05       			bcc	lamp_done
5011   F152 53          			comb						;If we are here, then we must switch buffers.
5012   F153 E4 20       			andb	lampbufferselect,X		;We are now on buffer 0
5013   F155 E7 20       			stab	lampbufferselect,X
5014   F157 33          lamp_done		pulb	
5015   F158 DE 9E       			ldx	temp3
5016   F15A 39          			rts	
5017   F15B             
5018   F15B             ;*************************************************************************
5019   F15B             ;* Turn Off Lamp: Lamp number is in A (packed format). This can also be 
5020   F15B             ;*               used to clear a bitflag.
5021   F15B             ;*************************************************************************			
5022   F15B DF 9E       lamp_off		stx	temp3
5023   F15D CE 00 10    			ldx	#lampbuffer0
5024   F160 37          lamp_and		pshb	
5025   F161 8D 39       			bsr	unpack_byte				;seperate into X and B
5026   F163 37          			pshb	
5027   F164 53          			comb	
5028   F165 E4 00       			andb	$00,X
5029   F167 20 DE       			bra	lamp_commit
5030   F169             
5031   F169             ;*************************************************************************
5032   F169             ;* Sets a Lamp to 'flashing' state
5033   F169             ;*************************************************************************			
5034   F169 DF 9E       lamp_flash		stx	temp3
5035   F16B CE 00 30    			ldx	#lampflashflag
5036   F16E 20 D1       			bra	lamp_or
5037   F170             
5038   F170             ;*************************************************************************
5039   F170             ;* Toggle Lamp from existing state. This may be used on bitflags as well.
5040   F170             ;*************************************************************************			
5041   F170 DF 9E       lamp_invert		stx	temp3
5042   F172 CE 00 10    			ldx	#lampbuffer0
5043   F175 37          lamp_eor		pshb	
5044   F176 8D 24       			bsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5045   F178 E8 00       			eorb	$00,X
5046   F17A E7 00       			stab	$00,X
5047   F17C 20 D9       			bra	lamp_done				;Leave now
5048   F17E             			
5049   F17E             			
5050   F17E CE 00 20    lamp_on_b		ldx	#lampbufferselect
5051   F181 20 BE       			bra	lamp_or
5052   F183             
5053   F183 CE 00 20    lamp_off_b		ldx	#lampbufferselect
5054   F186 20 D8       			bra	lamp_and
5055   F188             
5056   F188 CE 00 20    lamp_invert_b	ldx	#lampbufferselect
5057   F18B 20 E8       			bra	lamp_eor
5058   F18D             
5059   F18D CE 00 28    lamp_on_1		ldx	#lampbuffer1
5060   F190 20 AF       			bra	lamp_or
5061   F192             
5062   F192 CE 00 28    lamp_off_1		ldx	#lampbuffer1
5063   F195 20 C9       			bra	lamp_and
5064   F197             
5065   F197 CE 00 28    lamp_invert_1	ldx	#lampbuffer1
5066   F19A 20 D9       			bra	lamp_eor
5067   F19C             
5068   F19C             ;*********************************************************
5069   F19C             ;* Converts Packed Byte data into an Index in X and a
5070   F19C             ;* bitpos in B
5071   F19C             ;*
5072   F19C             ;* Packed Data Format: IIII IBBB
5073   F19C             ;*
5074   F19C             ;*	Where IIIII is the index to the lamp buffers.
5075   F19C             ;*    Values between 
5076   F19C             ;*      0-7		lampbuffer0
5077   F19C             ;*      7-15	
5078   F19C             ;*********************************************************	
5079   F19C 36          unpack_byte		psha	
5080   F19D 44          			lsra	
5081   F19E 44          			lsra	
5082   F19F 44          			lsra	
5083   F1A0 BD EE FF    			jsr	xplusa				;X = X + A
5084   F1A3 32          			pula	
5085   F1A4 7E EB 8E    			jmp	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
5086   F1A7             
5087   F1A7             ;**********************************************************
5088   F1A7             ;* Lamp Range Manipulation Code Start Here
5089   F1A7             ;**********************************************************			
5090   F1A7 8D 71       lampm_off		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5091   F1A9             			begin
5091   F1A9             
5092   F1A9 17          				tba	
5093   F1AA 43          				coma	
5094   F1AB A4 00       				anda	$00,X
5095   F1AD 8D 07       				bsr	lampm_noflash			;Turn off Flashing State for this lamp
5096   F1AF BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5097   F1B2             			csend						;Loop it!
5097   F1B2             
5097   F1B2             
5097   F1B2~            			csend						;Loop it!
5097   F1B2~            			csend						;Loop it!
5097   F1B2~            			csend						;Loop it!
5097   F1B2             
5097   F1B2 24 F5       
5097   F1B4             
5097   F1B4~            			csend						;Loop it!
5097   F1B4~            			csend						;Loop it!
5097   F1B4             
5098   F1B4 20 5D       			bra	abx_ret
5099   F1B6             			
5100   F1B6 A7 00       lampm_noflash	staa	$00,X
5101   F1B8 DF 9C       			stx	temp2
5102   F1BA 96 9D       			ldaa	temp2+1
5103   F1BC 81 18       			cmpa	#$18					;If we are not using Buffer $0010 then skip this
5104   F1BE             			ifcs
5104   F1BE             
5104   F1BE 24 FE       
5105   F1C0 17          				tba	
5106   F1C1 43          				coma	
5107   F1C2 A4 20       				anda	lampbufferselect,X
5108   F1C4 A7 20       				staa	lampbufferselect,X
5109   F1C6             			endif
5109   F1C6             
5109   F1C6             
5109   F1C6             
5109   F1C6             
5109   F1C6             
5109   F1C6~            			endif
5109   F1C6~            			endif
5109   F1C6             
5109   F1C6~            			endif
5109   F1C6~            			endif
5109   F1C6             
5109   F1BF             
5109   F1BF 06          
5109   F1C0             
5109   F1C0             
5109   F1C0~            			endif
5109   F1C0~            			endif
5109   F1C0~            			endif
5109   F1C0             
5109   F1C6             
5109   F1C6~            			endif
5109   F1C6~            			endif
5109   F1C6             
5110   F1C6 39          			rts	
5111   F1C7             
5112   F1C7             
5113   F1C7 8D 51       lampm_f		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5114   F1C9             			begin
5114   F1C9             
5115   F1C9 17          				tba	
5116   F1CA A8 00       				eora	$00,X
5117   F1CC A7 00       				staa	$00,X
5118   F1CE BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5119   F1D1             			csend
5119   F1D1             
5119   F1D1             
5119   F1D1~            			csend
5119   F1D1~            			csend
5119   F1D1~            			csend
5119   F1D1             
5119   F1D1 24 F6       
5119   F1D3             
5119   F1D3~            			csend
5119   F1D3~            			csend
5119   F1D3             
5120   F1D3 20 3E       			bra	abx_ret
5121   F1D5             
5122   F1D5             ;This is unused in the macros. You must call it directly at $F1D5
5123   F1D5             ;The behavior of this command is probably the most complex. It 
5124   F1D5             ;starts at the last lamp in the range. If it is already set, then
5125   F1D5             ;the routine simply exits. If the last lamp is not set, the routine
5126   F1D5             ;goes down through each lamp in the range. If if finds a lamp on,
5127   F1D5             ;then it turns off that lamp, then goes back up to the next lamp
5128   F1D5             ;and turns it on. If no lamps are on in the range, then the first
5129   F1D5             ;lamp in the range is turned on.
5130   F1D5             ;The best example of this routine is for the 10-20-30 lamps on 
5131   F1D5             ;Jungle Lord. It will simply incrment the 10-20-30 lamps sequentially
5132   F1D5             ;and then stop at 30. If none are on, then it will turn on 10.
5133   F1D5             lampm_g			
5134   F1D5 8D 4F       			bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
5135   F1D7 26 3A       			bne	abx_ret
5136   F1D9             			begin
5136   F1D9             
5137   F1D9 BD F2 64    				jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5138   F1DC 25 08       				bcs	b_098					;Branch if on first lamp in range
5139   F1DE             			neend
5139   F1DE             
5139   F1DE             
5139   F1DE~            			neend
5139   F1DE~            			neend
5139   F1DE~            			neend
5139   F1DE             
5139   F1DE 27 F9       
5139   F1E0             
5139   F1E0~            			neend
5139   F1E0~            			neend
5139   F1E0             
5140   F1E0 17          			tba	
5141   F1E1 43          			coma	
5142   F1E2 A4 00       			anda	$00,X
5143   F1E4 A7 00       			staa	$00,X
5144   F1E6 8D 6D       b_098			bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5145   F1E8 EA 00       b_09A			orab	$00,X
5146   F1EA E7 00       			stab	$00,X
5147   F1EC 20 25       			bra	abx_ret
5148   F1EE             			
5149   F1EE 8D 2A       lampm_a		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5150   F1F0             			begin
5150   F1F0             
5151   F1F0 27 F6       				beq	b_09A
5152   F1F2 8D 61       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5153   F1F4 25 1D       				bcs	abx_ret
5154   F1F6             			loopend
5154   F1F6             
5154   F1F6             
5154   F1F6~            			loopend
5154   F1F6~            			loopend
5154   F1F6~            			loopend
5154   F1F6             
5154   F1F6 20 F8       
5154   F1F8             
5154   F1F8~            			loopend
5154   F1F8~            			loopend
5154   F1F8             
5155   F1F8             			
5156   F1F8 8D 20       lampm_b		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5157   F1FA             			begin
5157   F1FA             
5158   F1FA 27 EC       				beq	b_09A
5159   F1FC 8D 57       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5160   F1FE             			csend
5160   F1FE             
5160   F1FE             
5160   F1FE~            			csend
5160   F1FE~            			csend
5160   F1FE~            			csend
5160   F1FE             
5160   F1FE 24 FA       
5160   F200             
5160   F200~            			csend
5160   F200~            			csend
5160   F200             
5161   F200 DE 9E       			ldx	temp3
5162   F202 96 A0       			ldaa	sys_temp1
5163   F204 D6 A1       			ldab	sys_temp2
5164   F206 20 9F       			bra	lampm_off				;Turn OFF All lamps in Range
5165   F208             			
5166   F208 8D 10       lampm_8		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5167   F20A             			begin
5167   F20A             
5168   F20A 17          				tba	
5169   F20B AA 00       				oraa	$00,X
5170   F20D 8D A7       				bsr	lampm_noflash			;Turn off Flashing State for this lamp
5171   F20F 8D 44       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5172   F211             			csend
5172   F211             
5172   F211             
5172   F211~            			csend
5172   F211~            			csend
5172   F211~            			csend
5172   F211             
5172   F211 24 F7       
5172   F213             
5172   F213~            			csend
5172   F213~            			csend
5172   F213             
5173   F213 96 A0       abx_ret		ldaa	sys_temp1
5174   F215 D6 A1       			ldab	sys_temp2
5175   F217 DE 9E       			ldx	temp3
5176   F219 39          			rts	
5177   F21A             			
5178   F21A             ;************************************************************
5179   F21A             ;* Lamp Range Routines: This take care of manipulating
5180   F21A             ;*                      a collection of sequential lamps
5181   F21A             ;*                      to create various lighting effects.
5182   F21A             ;************************************************************			
5183   F21A BD F2 2C    lampr_start		jsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Number Of lamps X=Buffer
5184   F21D 96 A2       			ldaa	sys_temp3				;Starting lamp in range
5185   F21F BD F1 9C    lr_ret		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5186   F222 17          			tba	
5187   F223 A4 00       			anda	$00,X
5188   F225 39          			rts						;Buffer now contains byte pos for start lamp
5189   F226             			
5190   F226 8D 04       lampr_end		bsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Number Of lamps X=Buffer
5191   F228 96 A3       			ldaa	sys_temp4				;End Lamp In range
5192   F22A 20 F3       			bra	lr_ret
5193   F22C             			
5194   F22C DF 9E       lampr_setup		stx	temp3
5195   F22E 97 A0       			staa	sys_temp1
5196   F230 D7 A1       			stab	sys_temp2
5197   F232 FE E0 4F    			ldx	gr_lamptable_ptr			;Game ROM: Lamp Range Table
5198   F235 16          			tab	
5199   F236 58          			aslb	
5200   F237 C4 7F       			andb	#$7F
5201   F239 BD EF 4D    			jsr	xplusb
5202   F23C EE 00       			ldx	$00,X
5203   F23E DF A2       			stx	sys_temp3				;Save Lamp Range
5204   F240 CE F1 34    			ldx	#lampbuffers			;Lamp Buffer Locations
5205   F243 49          			rola	
5206   F244 49          			rola	
5207   F245 49          			rola	
5208   F246 48          			asla	
5209   F247 84 07       			anda	#$07
5210   F249 BD EE FF    			jsr	xplusa				;X = X + A
5211   F24C EE 00       			ldx	$00,X					;Get the Buffer Pointer Specified
5212   F24E D6 A3       			ldab	sys_temp4
5213   F250 D0 A2       			subb	sys_temp3
5214   F252 D7 9A       			stab	temp1					;Store how many lamps affected
5215   F254 39          			rts	
5216   F255             
5217   F255             			
5218   F255 58          lamp_left		aslb	
5219   F256             			ifcs
5219   F256             
5219   F256 24 FE       
5220   F258 59          				rolb	
5221   F259 08          				inx	
5222   F25A             			endif
5222   F25A             
5222   F25A             
5222   F25A             
5222   F25A             
5222   F25A             
5222   F25A~            			endif
5222   F25A~            			endif
5222   F25A             
5222   F25A~            			endif
5222   F25A~            			endif
5222   F25A             
5222   F257             
5222   F257 02          
5222   F258             
5222   F258             
5222   F258~            			endif
5222   F258~            			endif
5222   F258~            			endif
5222   F258             
5222   F25A             
5222   F25A~            			endif
5222   F25A~            			endif
5222   F25A             
5223   F25A 96 9A       ls_ret		ldaa	temp1
5224   F25C 80 01       			suba	#$01
5225   F25E 97 9A       			staa	temp1
5226   F260 17          			tba	
5227   F261 A4 00       			anda	$00,X
5228   F263 39          			rts	
5229   F264             			
5230   F264 54          lamp_right		lsrb	
5231   F265 24 F3       			bcc	ls_ret
5232   F267 56          			rorb	
5233   F268 09          			dex	
5234   F269 20 EF       			bra	ls_ret
5235   F26B             			
5236   F26B             			
5237   F26B 8D B9       lampm_c		bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
5238   F26D             lm_test		ifeq
5238   F26D             
5238   F26D 26 FE       
5239   F26F 8D F3       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5240   F271 24 FA       				bcc	lm_test
5241   F273 20 9E       				bra	abx_ret
5242   F275             			endif
5242   F275             
5242   F275             
5242   F275             
5242   F275             
5242   F275             
5242   F275~            			endif
5242   F275~            			endif
5242   F275             
5242   F275~            			endif
5242   F275~            			endif
5242   F275             
5242   F26E             
5242   F26E 06          
5242   F26F             
5242   F26F             
5242   F26F~            			endif
5242   F26F~            			endif
5242   F26F~            			endif
5242   F26F             
5242   F275             
5242   F275~            			endif
5242   F275~            			endif
5242   F275             
5243   F275 53          			comb	
5244   F276 E4 00       			andb	$00,X
5245   F278 E7 00       			stab	$00,X
5246   F27A 20 97       			bra	abx_ret
5247   F27C             			
5248   F27C 8D 9C       lampm_e		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5249   F27E DF 9C       			stx	temp2
5250   F280 D7 9B       			stab	temp1+1
5251   F282             			begin
5251   F282             
5252   F282 97 A4       				staa	sys_temp5
5253   F284 8D CF       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5254   F286 25 04       				bcs	b_0A2
5255   F288 8D 1A       				bsr	b_0A3
5256   F28A             			loopend
5256   F28A             
5256   F28A             
5256   F28A~            			loopend
5256   F28A~            			loopend
5256   F28A~            			loopend
5256   F28A             
5256   F28A 20 F6       
5256   F28C             
5256   F28C~            			loopend
5256   F28C~            			loopend
5256   F28C             
5257   F28C             			
5258   F28C DE 9C       b_0A2			ldx	temp2
5259   F28E D6 9B       			ldab	temp1+1
5260   F290 8D 12       			bsr	b_0A3
5261   F292 20 38       			bra	b_0A5
5262   F294             			
5263   F294 8D 90       lampm_d		bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
5264   F296 DF 9C       			stx	temp2
5265   F298 D7 9B       			stab	temp1+1
5266   F29A             			begin
5266   F29A             
5267   F29A 97 A4       				staa	sys_temp5
5268   F29C 8D C6       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5269   F29E 25 EC       				bcs	b_0A2
5270   F2A0 8D 02       				bsr	b_0A3
5271   F2A2             			loopend
5271   F2A2             
5271   F2A2             
5271   F2A2~            			loopend
5271   F2A2~            			loopend
5271   F2A2~            			loopend
5271   F2A2             
5271   F2A2 20 F6       
5271   F2A4             
5271   F2A4~            			loopend
5271   F2A4~            			loopend
5271   F2A4             
5272   F2A4             			
5273   F2A4 36          b_0A3			psha	
5274   F2A5 17          			tba	
5275   F2A6 43          			coma	
5276   F2A7 A4 00       			anda	$00,X
5277   F2A9 7D 00 A4    			tst	sys_temp5
5278   F2AC             			ifne
5278   F2AC             
5278   F2AC 27 FE       
5279   F2AE 1B          				aba
5280   F2AF             			endif
5280   F2AF             
5280   F2AF             
5280   F2AF             
5280   F2AF             
5280   F2AF             
5280   F2AF~            			endif
5280   F2AF~            			endif
5280   F2AF             
5280   F2AF~            			endif
5280   F2AF~            			endif
5280   F2AF             
5280   F2AD             
5280   F2AD 01          
5280   F2AE             
5280   F2AE             
5280   F2AE~            			endif
5280   F2AE~            			endif
5280   F2AE~            			endif
5280   F2AE             
5280   F2AF             
5280   F2AF~            			endif
5280   F2AF~            			endif
5280   F2AF             
5281   F2AF A7 00       			staa	$00,X
5282   F2B1 32          			pula	
5283   F2B2 39          			rts	
5284   F2B3             			
5285   F2B3 BD F2 26    lampm_z		jsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
5286   F2B6             			ifeq
5286   F2B6             
5286   F2B6 26 FE       
5287   F2B8             				begin
5287   F2B8             
5288   F2B8 8D AA       					bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5289   F2BA 25 10       					bcs	b_0A5
5290   F2BC             				neend
5290   F2BC             
5290   F2BC             
5290   F2BC~            				neend
5290   F2BC~            				neend
5290   F2BC~            				neend
5290   F2BC             
5290   F2BC 27 FA       
5290   F2BE             
5290   F2BE~            				neend
5290   F2BE~            				neend
5290   F2BE             
5291   F2BE             			endif
5291   F2BE             
5291   F2BE             
5291   F2BE             
5291   F2BE             
5291   F2BE             
5291   F2BE~            			endif
5291   F2BE~            			endif
5291   F2BE             
5291   F2BE~            			endif
5291   F2BE~            			endif
5291   F2BE             
5291   F2B7             
5291   F2B7 06          
5291   F2B8             
5291   F2B8             
5291   F2B8~            			endif
5291   F2B8~            			endif
5291   F2B8~            			endif
5291   F2B8             
5291   F2BE             
5291   F2BE~            			endif
5291   F2BE~            			endif
5291   F2BE             
5292   F2BE 17          			tba	
5293   F2BF A8 00       			eora	$00,X
5294   F2C1 A7 00       			staa	$00,X
5295   F2C3 BD F2 64    			jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5296   F2C6 25 04       			bcs	b_0A5
5297   F2C8 EA 00       			orab	$00,X
5298   F2CA E7 00       			stab	$00,X
5299   F2CC 7E F2 13    b_0A5			jmp	abx_ret
5300   F2CF             
5301   F2CF BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5302   F2D2             b_0AB			ifne
5302   F2D2             
5302   F2D2 27 FE       
5303   F2D4 BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5304   F2D7 24 F9       				bcc	b_0AB
5305   F2D9 20 F1       				bra	b_0A5
5306   F2DB             			endif
5306   F2DB             
5306   F2DB             
5306   F2DB             
5306   F2DB             
5306   F2DB             
5306   F2DB~            			endif
5306   F2DB~            			endif
5306   F2DB             
5306   F2DB~            			endif
5306   F2DB~            			endif
5306   F2DB             
5306   F2D3             
5306   F2D3 07          
5306   F2D4             
5306   F2D4             
5306   F2D4~            			endif
5306   F2D4~            			endif
5306   F2D4~            			endif
5306   F2D4             
5306   F2DB             
5306   F2DB~            			endif
5306   F2DB~            			endif
5306   F2DB             
5307   F2DB 0C          b_0AA			clc	
5308   F2DC 20 EE       			bra	b_0A5
5309   F2DE BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5310   F2E1 26 F8       b_0AC			bne	b_0AA
5311   F2E3 BD F2 55    			jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5312   F2E6 24 F9       			bcc	b_0AC
5313   F2E8 20 E2       			bra	b_0A5
5314   F2EA             
5315   F2EA             		
5316   F2EA CE 00 61    bit_switch		ldx	#switch_debounced
5317   F2ED 20 0D       			bra	bit_main
5318   F2EF CE 00 30    bit_lamp_flash	ldx	#lampflashflag
5319   F2F2 20 08       			bra	bit_main
5320   F2F4 CE 00 28    bit_lamp_buf_1	ldx	#lampbuffer1
5321   F2F7 20 03       			bra	bit_main
5322   F2F9 CE 00 10    bit_lamp_buf_0	ldx	#lampbuffer0
5323   F2FC BD F1 9C    bit_main		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5324   F2FF E5 00       			bitb	$00,X
5325   F301 39          			rts	
5326   F302             			
5327   F302             			
5328   F302 84 3F       lampm_x		anda	#$3F
5329   F304 BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
5330   F307             			begin
5330   F307             
5331   F307 97 AA       				staa	thread_priority			;This is probably just a temp location?
5332   F309 17          				tba	
5333   F30A 43          				coma	
5334   F30B A4 18       				anda	bitflags,X
5335   F30D 9A AA       				oraa	thread_priority			;Recall temp
5336   F30F A7 18       				staa	bitflags,X
5337   F311 BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5338   F314             			csend
5338   F314             
5338   F314             
5338   F314~            			csend
5338   F314~            			csend
5338   F314~            			csend
5338   F314             
5338   F314 24 F1       
5338   F316             
5338   F316~            			csend
5338   F316~            			csend
5338   F316             
5339   F316 20 B4       			bra	b_0A5
5340   F318             			
5341   F318             ;***************************************************
5342   F318             ;* System Checksum #2: Set to make ROM csum from
5343   F318             ;*                     $F000-F7FF equal to $00
5344   F318             ;***************************************************
5345   F318             	
5346   F318 EF          csum2			.db $EF
5347   F319             			
5348   F319             ;***************************************************
5349   F319             ;* VM Macro Pointers: Master Lookup Table
5350   F319             ;***************************************************
5351   F319             				
5352   F319 F3 D3       master_vm_lookup	.dw vm_control_0x		;Misc Functions
5353   F31B F3 F4       			.dw vm_control_1x		;Lamp Functions
5354   F31D F4 36       			.dw vm_control_2x		;Lamp Functions
5355   F31F F4 42       			.dw vm_control_3x		;Solenoid Functions
5356   F321 F4 4F       			.dw vm_control_4x		;Sound, Immediate Exe Functions
5357   F323 F4 A1       			.dw vm_control_5x		;RAM,Delay,Jump,SimpleBransh Functions
5358   F325 F5 40       			.dw vm_control_6x		;Indexed Delay Functions
5359   F327 F5 44       			.dw vm_control_7x		;Immediate Delay Functions
5360   F329 F5 48       			.dw vm_control_8x		;Jump Relative 
5361   F32B F5 58       			.dw vm_control_9x		;JSR Relative
5362   F32D F5 62       			.dw vm_control_ax		;JSR to Code Relative
5363   F32F F5 6B       			.dw vm_control_bx		;Add RAM
5364   F331 F5 78       			.dw vm_control_cx		;Set RAM
5365   F333 F5 7D       			.dw vm_control_dx		;Play Sound Multiple
5366   F335 F5 87       			.dw vm_control_ex		;Play Sound Once
5367   F337 F5 87       			.dw vm_control_fx		;Play Sound Once
5368   F339             			
5369   F339             			
5370   F339 F3 DB       vm_lookup_0x	.dw macro_pcminus100
5371   F33B F3 B5       			.dw macro_go
5372   F33D F3 AF       			.dw macro_rts
5373   F33F EA 67       			.dw killthread
5374   F341 F3 E2       			.dw macro_code_start
5375   F343 F3 EA       			.dw macro_special
5376   F345 F3 EF       			.dw macro_extraball
5377   F347             			
5378   F347 F2 08       vm_lookup_1x_a	.dw lampm_8
5379   F349 F1 A7       			.dw lampm_off
5380   F34B F1 EE       			.dw lampm_a
5381   F34D F1 F8       			.dw lampm_b
5382   F34F F2 6B       			.dw lampm_c
5383   F351 F2 94       			.dw lampm_d
5384   F353 F2 7C       			.dw lampm_e
5385   F355 F1 C7       			.dw lampm_f
5386   F357             			
5387   F357 F1 3C       vm_lookup_1x_b	.dw lamp_on
5388   F359 F1 5B       			.dw lamp_off
5389   F35B F1 70       			.dw lamp_invert
5390   F35D F1 69       			.dw lamp_flash
5391   F35F             			
5392   F35F F1 7E       vm_lookup_2x	.dw lamp_on_b
5393   F361 F1 83       			.dw lamp_off_b
5394   F363 F1 88       			.dw lamp_invert_b
5395   F365             			
5396   F365 EC 96       vm_lookup_4x	.dw add_points
5397   F367 EC 05       			.dw score_main
5398   F369 EB FE       			.dw dsnd_pts
5399   F36B             			
5400   F36B F4 AA       vm_lookup_5x	.dw macro_ramadd
5401   F36D F4 BF       			.dw macro_ramcopy
5402   F36F F4 CA       			.dw macro_set_pri
5403   F371 F4 D2       			.dw macro_delay_imm_b
5404   F373 F4 EF       			.dw macro_rem_th_s
5405   F375 F4 F6       			.dw macro_rem_th_m
5406   F377 F4 FD       			.dw macro_jsr_noreturn
5407   F379 F5 27       			.dw macro_jsr_return
5408   F37B F5 CD       			.dw macro_branch
5409   F37D F5 CD       			.dw macro_branch
5410   F37F F5 CD       			.dw macro_branch
5411   F381 F5 CD       			.dw macro_branch
5412   F383 F5 4F       			.dw macro_jmp_cpu
5413   F385 F5 A4       			.dw macro_setswitch
5414   F387 F5 BC       			.dw macro_clearswitch
5415   F389 F5 66       			.dw macro_jmp_abs
5416   F38B             
5417   F38B             ;***************************************************************
5418   F38B             ;* Pointers to routines for complex branch tests
5419   F38B             ;***************************************************************			
5420   F38B F6 53       branch_lookup	.dw branch_tilt		;Tilt Flag				
5421   F38D F6 5A       			.dw branch_gameover     ;Game Over Flag			
5422   F38F F4 95       			.dw macro_getnextbyte	;NextByte = Straight Data		
5423   F391 F6 36       			.dw branch_invert		;Invert Result			
5424   F393 F6 3B       			.dw branch_lamp_on	;Check if Lamp is On or Flashing
5425   F395 F6 47       			.dw branch_lamprangeoff	;Lamp Range All Off			
5426   F397 F6 4E       			.dw branch_lamprangeon	;Lamp Range All On			
5427   F399 F6 61       			.dw branch_lampbuf1	;RAM Matrix $0028			
5428   F39B F6 66       			.dw branch_switch		;Check Encoded Switch		
5429   F39D F6 70       			.dw branch_add		;A = A + B				
5430   F39F F6 6B       			.dw branch_and		;Logical AND 				
5431   F3A1 F6 72       			.dw branch_or		;Logical OR 				
5432   F3A3 F6 77       			.dw branch_equal		;A = B ??				
5433   F3A5 F6 7C       			.dw branch_ge		;A >= B ??				
5434   F3A7 F6 7F       			.dw branch_threadpri	;Check for Priority Thread??	
5435   F3A9 F6 86       			.dw branch_bitwise	;A && B				
5436   F3AB             
5437   F3AB             ;*************************************************************
5438   F3AB             ;* Virtual Machine Routines:
5439   F3AB             ;*
5440   F3AB             ;* These are the main routines that are called to interpret
5441   F3AB             ;* the commands written in WML7.
5442   F3AB             ;*************************************************************
5443   F3AB 97 00       macro_start		staa	ram_base
5444   F3AD D7 01       			stab	ram_base+1
5445   F3AF 32          macro_rts		pula	
5446   F3B0 97 D1       			staa	vm_pc
5447   F3B2 32          			pula	
5448   F3B3 97 D2       			staa	vm_pc+1
5449   F3B5 BD E0 A9    macro_go		jsr	gr_macro_event
5450   F3B8 BD F4 95    			jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5451   F3BB 16          			tab	
5452   F3BC 54          			lsrb	
5453   F3BD 54          			lsrb	
5454   F3BE 54          			lsrb	
5455   F3BF C4 1E       			andb	#$1E
5456   F3C1 CE F3 19    			ldx	#master_vm_lookup
5457   F3C4 BD EF 4D    			jsr	xplusb
5458   F3C7 EE 00       			ldx	$00,X
5459   F3C9 6E 00       			jmp	$00,X
5460   F3CB             			
5461   F3CB DF D1       switch_entry	stx	vm_pc
5462   F3CD 97 00       			staa	ram_base
5463   F3CF D7 01       breg_sto		stab	ram_base+1
5464   F3D1 20 E2       			bra	macro_go
5465   F3D3             			
5466   F3D3 CE F3 39    vm_control_0x	ldx	#vm_lookup_0x
5467   F3D6 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
5468   F3D9 6E 00       			jmp	$00,X
5469   F3DB             			
5470   F3DB DE D1       macro_pcminus100	ldx	vm_pc
5471   F3DD 09          			dex	
5472   F3DE DF D1       			stx	vm_pc
5473   F3E0 20 D3       			bra	macro_go
5474   F3E2             			
5475   F3E2 DE D1       macro_code_start	ldx	vm_pc
5476   F3E4 96 00       			ldaa	ram_base
5477   F3E6 D6 01       			ldab	ram_base+1
5478   F3E8 6E 00       			jmp	$00,X
5479   F3EA             			
5480   F3EA BD F6 A5    macro_special	jsr	award_special			;Award Special
5481   F3ED 20 C6       			bra	macro_go
5482   F3EF             			
5483   F3EF BD F6 D5    macro_extraball	jsr	extraball				;Award Extra Ball
5484   F3F2 20 C1       			bra	macro_go
5485   F3F4             			
5486   F3F4 16          vm_control_1x	tab	
5487   F3F5 C4 0F       			andb	#$0F
5488   F3F7 C0 08       			subb	#$08
5489   F3F9 25 1D       			bcs	macro_17				;Branch for Macros 10-17
5490   F3FB 58          macro_x8f		aslb	
5491   F3FC CE F3 47    			ldx	#vm_lookup_1x_a
5492   F3FF BD EF 4D    			jsr	xplusb				;X = X + B)
5493   F402 EE 00       			ldx	$00,X
5494   F404 16          			tab						;Original Command #
5495   F405 58          			aslb	
5496   F406 58          			aslb	
5497   F407 C4 80       			andb	#$80
5498   F409             b_0AF			begin
5498   F409             
5499   F409 BD F4 95    				jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5500   F40C 36          				psha	
5501   F40D 84 7F       				anda	#$7F
5502   F40F 1B          				aba	
5503   F410 AD 00       				jsr	$00,X
5504   F412 32          				pula	
5505   F413 4D          				tsta	
5506   F414             			plend
5506   F414             
5506   F414             
5506   F414~            			plend
5506   F414~            			plend
5506   F414~            			plend
5506   F414             
5506   F414 2B F3       
5506   F416             
5506   F416~            			plend
5506   F416~            			plend
5506   F416             
5507   F416 20 9D       			bra	macro_go
5508   F418             			
5509   F418 CE F3 57    macro_17		ldx	#vm_lookup_1x_b
5510   F41B 16          macro_x17		tab						;A = still instruction #
5511   F41C 84 03       			anda	#$03
5512   F41E BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
5513   F421 C5 04       			bitb	#$04
5514   F423             			ifeq					;Branch on 14-17
5514   F423             
5514   F423 26 FE       
5515   F425 5F          				clrb	
5516   F426 20 E1       				bra	b_0AF
5517   F428             			endif
5517   F428             
5517   F428             
5517   F428             
5517   F428             
5517   F428             
5517   F428~            			endif
5517   F428~            			endif
5517   F428             
5517   F428~            			endif
5517   F428~            			endif
5517   F428             
5517   F424             
5517   F424 03          
5517   F425             
5517   F425             
5517   F425~            			endif
5517   F425~            			endif
5517   F425~            			endif
5517   F425             
5517   F428             
5517   F428~            			endif
5517   F428~            			endif
5517   F428             
5518   F428             			begin
5518   F428             
5519   F428 8D 6B       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5520   F42A 16          				tab	
5521   F42B BD F5 18    				jsr	macro_b_ram				;$00,LSD(A)->A
5522   F42E AD 00       				jsr	$00,X
5523   F430 5D          				tstb	
5524   F431             			plend
5524   F431             
5524   F431             
5524   F431~            			plend
5524   F431~            			plend
5524   F431~            			plend
5524   F431             
5524   F431 2B F5       
5524   F433             
5524   F433~            			plend
5524   F433~            			plend
5524   F433             
5525   F433 7E F3 B5    to_macro_go1	jmp	macro_go
5526   F436             
5527   F436 16          vm_control_2x	tab						;A= macro
5528   F437 C4 0F       			andb	#$0F
5529   F439 C0 08       			subb	#$08
5530   F43B 24 BE       			bcc	macro_x8f				;Branch for Macros 28-2F
5531   F43D CE F3 5F    			ldx	#vm_lookup_2x
5532   F440 20 D9       			bra	macro_x17
5533   F442             			
5534   F442 16          vm_control_3x	tab	
5535   F443 C4 0F       			andb	#$0F					;16 Solenoids Max 
5536   F445             			begin
5536   F445             
5537   F445 8D 4E       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5538   F447 BD EB 23    				jsr	solbuf				;Turn On/Off Solenoid
5539   F44A 5A          				decb	
5540   F44B             			eqend
5540   F44B             
5540   F44B             
5540   F44B~            			eqend
5540   F44B~            			eqend
5540   F44B~            			eqend
5540   F44B             
5540   F44B 26 F8       
5540   F44D             
5540   F44D~            			eqend
5540   F44D~            			eqend
5540   F44D             
5541   F44D 20 E4       			bra	to_macro_go1
5542   F44F             			
5543   F44F 84 0F       vm_control_4x	anda	#$0F
5544   F451             			ifeq
5544   F451             
5544   F451 26 FE       
5545   F453 BD F4 EA    				jsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5546   F456 BD EB FA    				jsr	isnd_pts				;Play Sound Index(B)Once, Add Points(A)
5547   F459 20 D8       				bra	to_macro_go1
5548   F45B             			endif
5548   F45B             
5548   F45B             
5548   F45B             
5548   F45B             
5548   F45B             
5548   F45B~            			endif
5548   F45B~            			endif
5548   F45B             
5548   F45B~            			endif
5548   F45B~            			endif
5548   F45B             
5548   F452             
5548   F452 08          
5548   F453             
5548   F453             
5548   F453~            			endif
5548   F453~            			endif
5548   F453~            			endif
5548   F453             
5548   F45B             
5548   F45B~            			endif
5548   F45B~            			endif
5548   F45B             
5549   F45B 81 04       			cmpa	#$04
5550   F45D 24 0C       			bcc	macro_exec				;Branch for Macros 44-4F (execute cpu)
5551   F45F CE F3 63    			ldx	#vm_lookup_4x-2
5552   F462 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
5553   F465 8D 2E       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5554   F467 AD 00       			jsr	$00,X
5555   F469 20 C8       			bra	to_macro_go1			;Continue Executing Macros
5556   F46B             			
5557   F46B 16          macro_exec		tab	
5558   F46C C0 02       			subb	#$02
5559   F46E CE 11 30    			ldx	#exe_buffer
5560   F471             			begin
5560   F471             
5561   F471 8D 22       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5562   F473 A7 00       				staa	$00,X
5563   F475 08          				inx	
5564   F476 5A          				decb	
5565   F477             			eqend					;Add B bytes to Buffer at #1130
5565   F477             
5565   F477             
5565   F477~            			eqend					;Add B bytes to Buffer at #1130
5565   F477~            			eqend					;Add B bytes to Buffer at #1130
5565   F477~            			eqend					;Add B bytes to Buffer at #1130
5565   F477             
5565   F477 26 F8       
5565   F479             
5565   F479~            			eqend					;Add B bytes to Buffer at #1130
5565   F479~            			eqend					;Add B bytes to Buffer at #1130
5565   F479             
5566   F479 86 7E       			ldaa	#$7E
5567   F47B A7 00       			staa	$00,X
5568   F47D 86 F3       			ldaa	#$F3
5569   F47F A7 01       			staa	$01,X
5570   F481 86 CD       			ldaa	#$CD					;Tack a JMP $F3CD at the end of the routine
5571   F483 A7 02       			staa	$02,X
5572   F485 96 00       			ldaa	ram_base
5573   F487 D6 01       			ldab	ram_base+1
5574   F489 7E 11 30    			jmp	exe_buffer				;Go there Now, put return A and B into RAM $00 and $01
5575   F48C             			
5576   F48C 84 0F       gettabledata_w	anda	#$0F
5577   F48E 48          gettabledata_b	asla	
5578   F48F BD EE FF    			jsr	xplusa
5579   F492 EE 00       			ldx	$00,X
5580   F494 39          			rts
5581   F495             			
5582   F495             macro_getnextbyte	
5583   F495 DF 9A       			stx	temp1
5584   F497 DE D1       			ldx	vm_pc
5585   F499 A6 00       			ldaa	$00,X
5586   F49B 08          			inx	
5587   F49C DF D1       			stx	vm_pc
5588   F49E DE 9A       getx_rts		ldx	temp1
5589   F4A0 39          			rts	
5590   F4A1             			
5591   F4A1 CE F3 6B    vm_control_5x	ldx	#vm_lookup_5x
5592   F4A4 16          			tab						;Move our Data into B
5593   F4A5 BD F4 8C    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
5594   F4A8 6E 00       			jmp	$00,X
5595   F4AA             			
5596   F4AA 8D E9       macro_ramadd	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5597   F4AC 16          			tab	
5598   F4AD 8D 69       			bsr	macro_b_ram				;$00,LSD(A)->A
5599   F4AF 97 9E       			staa	temp3
5600   F4B1 54          			lsrb	
5601   F4B2 54          			lsrb	
5602   F4B3 54          			lsrb	
5603   F4B4 54          			lsrb	
5604   F4B5 17          			tba	
5605   F4B6 8D 60       			bsr	macro_b_ram				;$00,LSD(A)->A
5606   F4B8 9B 9E       			adda	temp3
5607   F4BA 8D 4D       ram_sto2		bsr	macro_a_ram				;A->$00,LSD(B)
5608   F4BC 7E F3 B5    to_macro_go2	jmp	macro_go
5609   F4BF             
5610   F4BF 8D D4       macro_ramcopy	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5611   F4C1 16          			tab	
5612   F4C2 8D 54       			bsr	macro_b_ram				;$00,LSD(A)->A
5613   F4C4 54          			lsrb	
5614   F4C5 54          			lsrb	
5615   F4C6 54          			lsrb	
5616   F4C7 54          			lsrb	
5617   F4C8 20 F0       			bra	ram_sto2				;A->$00,LSD(B),jmp $F3B5
5618   F4CA             			
5619   F4CA 8D C9       macro_set_pri	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5620   F4CC DE B1       			ldx	current_thread			;Current VM Routine being run
5621   F4CE A7 0D       			staa	threadobj_id,X
5622   F4D0 20 EA       			bra	to_macro_go2			;Continue Executing Macros
5623   F4D2             			
5624   F4D2             macro_delay_imm_b	
5625   F4D2 8D C1       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5626   F4D4 97 B7       dly_sto		staa	thread_timer_byte
5627   F4D6 DE D1       			ldx	vm_pc
5628   F4D8 96 00       			ldaa	ram_base
5629   F4DA D6 01       			ldab	ram_base+1
5630   F4DC BD EA 24    			jsr	delaythread				;Push Next Address onto VM, Timer at thread_timer_byte
5631   F4DF 7E F3 CB    			jmp	switch_entry
5632   F4E2             			
5633   F4E2             macro_getnextword		
5634   F4E2 8D 06       			bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5635   F4E4 D7 9A       			stab	temp1
5636   F4E6 97 9B       			staa	temp1+1
5637   F4E8 20 B4       			bra	getx_rts
5638   F4EA             			
5639   F4EA 8D A9       macro_get2bytes	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5640   F4EC 16          			tab	
5641   F4ED 20 A6       			bra	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5642   F4EF             			
5643   F4EF 8D F9       macro_rem_th_s	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5644   F4F1 BD EA F3    			jsr	kill_thread
5645   F4F4 20 C6       			bra	to_macro_go2			;Continue Executing Macros
5646   F4F6             			
5647   F4F6 8D F2       macro_rem_th_m	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5648   F4F8 BD EA FB    			jsr	kill_threads
5649   F4FB 20 BF       			bra	to_macro_go2			;Continue Executing Macros
5650   F4FD             			
5651   F4FD             macro_jsr_noreturn	
5652   F4FD 8D E3       			bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5653   F4FF 96 D2       			ldaa	vm_pc+1
5654   F501 36          			psha	
5655   F502 96 D1       			ldaa	vm_pc
5656   F504 36          			psha	
5657   F505 DF D1       pc_sto2		stx	vm_pc
5658   F507 20 B3       			bra	to_macro_go2			;jContinue Executing Macros
5659   F509             			
5660   F509 DF 9A       macro_a_ram		stx	temp1
5661   F50B C4 0F       			andb	#$0F
5662   F50D D7 9D       			stab	temp2+1
5663   F50F 7F 00 9C    			clr	temp2
5664   F512 DE 9C       			ldx	temp2
5665   F514 A7 00       			staa	$00,X
5666   F516 20 86       to_getx_rts		bra	getx_rts
5667   F518             
5668   F518 DF 9A       macro_b_ram		stx	temp1
5669   F51A 84 0F       			anda	#$0F
5670   F51C 97 9D       			staa	temp2+1
5671   F51E 7F 00 9C    			clr	temp2
5672   F521 DE 9C       			ldx	temp2
5673   F523 A6 00       			ldaa	$00,X
5674   F525 20 EF       			bra	to_getx_rts				;ldx temp1, rts.
5675   F527             			
5676   F527 8D B9       macro_jsr_return	bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5677   F529 96 D2       ret_sto		ldaa	vm_pc+1
5678   F52B 36          			psha	
5679   F52C 96 D1       			ldaa	vm_pc
5680   F52E 36          			psha						;Push Macro PC
5681   F52F 96 00       			ldaa	ram_base
5682   F531 D6 01       			ldab	ram_base+1
5683   F533 AD 00       			jsr	$00,X
5684   F535 97 00       			staa	ram_base
5685   F537 32          			pula	
5686   F538 97 D1       			staa	vm_pc					;Pull Macro PC
5687   F53A 32          			pula	
5688   F53B 97 D2       			staa	vm_pc+1
5689   F53D 7E F3 CF    			jmp	breg_sto
5690   F540             			
5691   F540 8D D6       vm_control_6x	bsr	macro_b_ram				;Load RAM Data
5692   F542 20 90       			bra	dly_sto				;Delay it
5693   F544             			
5694   F544 84 0F       vm_control_7x	anda	#$0F
5695   F546 20 8C       			bra	dly_sto				;Delay it
5696   F548             			
5697   F548 8D 44       vm_control_8x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5698   F54A DF D1       pc_sto		stx	vm_pc					;Store X into VMPC
5699   F54C 7E F3 B5    to_macro_go4	jmp	macro_go
5700   F54F             
5701   F54F BD F4 E2    macro_jmp_cpu	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5702   F552 96 00       			ldaa	ram_base
5703   F554 D6 01       			ldab	ram_base+1
5704   F556 6E 00       			jmp	$00,X
5705   F558             			
5706   F558 8D 34       vm_control_9x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5707   F55A D6 D2       			ldab	vm_pc+1
5708   F55C 37          			pshb	
5709   F55D D6 D1       			ldab	vm_pc
5710   F55F 37          			pshb	
5711   F560 20 E8       			bra	pc_sto				;Store X into VMPC, continue
5712   F562             			
5713   F562 8D 2A       vm_control_ax	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5714   F564 20 C3       			bra	ret_sto
5715   F566             			
5716   F566 BD F4 E2    macro_jmp_abs	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5717   F569 20 DF       			bra	pc_sto
5718   F56B             			
5719   F56B 16          vm_control_bx	tab	
5720   F56C 8D AA       			bsr	macro_b_ram				;RAM Data (A&0f)->A
5721   F56E 97 9C       			staa	temp2
5722   F570 8D 58       			bsr	to_macro_getnextbyte
5723   F572 9B 9C       			adda	temp2
5724   F574 8D 93       ram_sto		bsr	macro_a_ram				;A->RAM(B&0f)
5725   F576 20 D4       			bra	to_macro_go4
5726   F578             			
5727   F578 16          vm_control_cx	tab	
5728   F579 8D 4F       			bsr	to_macro_getnextbyte
5729   F57B 20 F7       			bra	ram_sto				;Save to RAM and continue
5730   F57D             			
5731   F57D 84 0F       vm_control_dx	anda	#$0F
5732   F57F 16          			tab	
5733   F580 8D 48       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5734   F582 BD ED 03    			jsr	sound_sub
5735   F585 20 C5       			bra	to_macro_go4			;jmp  $F3B5
5736   F587             			
5737   F587             vm_control_ex
5738   F587 84 1F       vm_control_fx	anda	#$1F
5739   F589 BD EC FC    			jsr	isnd_once				;Play Sound Index(A) Once
5740   F58C 20 BE       			bra	to_macro_go4
5741   F58E             			
5742   F58E 84 0F       macro_pcadd		anda	#$0F
5743   F590 85 08       			bita	#$08
5744   F592             			ifne
5744   F592             
5744   F592 27 FE       
5745   F594 8A F0       				oraa	#$F0
5746   F596             			endif
5746   F596             
5746   F596             
5746   F596             
5746   F596             
5746   F596             
5746   F596~            			endif
5746   F596~            			endif
5746   F596             
5746   F596~            			endif
5746   F596~            			endif
5746   F596             
5746   F593             
5746   F593 02          
5746   F594             
5746   F594             
5746   F594~            			endif
5746   F594~            			endif
5746   F594~            			endif
5746   F594             
5746   F596             
5746   F596~            			endif
5746   F596~            			endif
5746   F596             
5747   F596 16          			tab	
5748   F597 8D 31       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5749   F599 9B D2       			adda	vm_pc+1
5750   F59B 97 9B       			staa	temp1+1
5751   F59D D9 D1       			adcb	vm_pc
5752   F59F D7 9A       			stab	temp1
5753   F5A1 DE 9A       			ldx	temp1
5754   F5A3 39          			rts	
5755   F5A4             			
5756   F5A4 8D 0A       macro_setswitch	bsr	load_sw_no				;Get switch number from the data
5757   F5A6 EA 00       			orab	$00,X
5758   F5A8 E7 00       			stab	$00,X
5759   F5AA 96 A8       			ldaa	sys_temp_w3
5760   F5AC 2B F6       			bmi	macro_setswitch
5761   F5AE 20 17       			bra	to_macro_go3			;jmp  $F3B5
5762   F5B0             			
5763   F5B0 8D 18       load_sw_no		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5764   F5B2 97 A8       			staa	sys_temp_w3
5765   F5B4 84 3F       			anda	#$3F
5766   F5B6 CE 00 61    			ldx	#switch_debounced
5767   F5B9 7E F1 9C    			jmp	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5768   F5BC             			
5769   F5BC 8D F2       macro_clearswitch	bsr	load_sw_no				;Get switch number from the data
5770   F5BE 53          			comb	
5771   F5BF E4 00       			andb	$00,X
5772   F5C1 E7 00       			stab	$00,X
5773   F5C3 96 A8       			ldaa	sys_temp_w3
5774   F5C5 2B F5       			bmi	macro_clearswitch
5775   F5C7 7E F3 B5    to_macro_go3	jmp	macro_go
5776   F5CA             
5777   F5CA             to_macro_getnextbyte			
5778   F5CA 7E F4 95    			jmp	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5779   F5CD             
5780   F5CD 37          macro_branch	pshb	
5781   F5CE 8D 28       			bsr	branchdata				;Gets Main Result
5782   F5D0 BD F6 92    			jsr	test_a				;Returns #80 or #81 in (A) based on Test of A
5783   F5D3 33          			pulb						;Get Back Command in B
5784   F5D4 1B          			aba	
5785   F5D5 36          			psha	
5786   F5D6 C5 02       			bitb	#$02					;Relative or Absolute Branch Flag
5787   F5D8             			ifeq
5787   F5D8             
5787   F5D8 26 FE       
5788   F5DA BD F4 E2    				jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5789   F5DD             			else
5789   F5DD             
5789   F5DD             
5789   F5DD             
5789   F5DD             
5789   F5D9             
5789   F5D9             
5789   F5D9             
5789   F5D9~            			else
5789   F5D9~            			else
5789   F5D9~            			else
5789   F5D9~            			else
5789   F5D9             
5789   F5D9~            			else
5789   F5D9~            			else
5789   F5D9~            			else
5789   F5D9~            			else
5789   F5D9             
5789   F5D9             
5789   F5D9 05          
5789   F5DD             
5789   F5DD 20 FE       
5789   F5DF             
5789   F5DF             
5789   F5DF             
5789   F5DF~            			else
5789   F5DF~            			else
5789   F5DF~            			else
5789   F5DF~            			else
5789   F5DF~            			else
5789   F5DF             
5789   F5DF~            			else
5789   F5DF~            			else
5789   F5DF             
5789   F5DF~            			else
5789   F5DF~            			else
5789   F5DF             
5790   F5DF 8D E9       				bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5791   F5E1 C6 FF       				ldab	#$FF
5792   F5E3 81 80       				cmpa	#$80
5793   F5E5 C9 00       				adcb	#$00
5794   F5E7 9B D2       				adda	vm_pc+1
5795   F5E9 D9 D1       				adcb	vm_pc
5796   F5EB 97 9B       				staa	temp1+1
5797   F5ED D7 9A       				stab	temp1
5798   F5EF DE 9A       				ldx	temp1
5799   F5F1             			endif
5799   F5F1             
5799   F5F1             
5799   F5F1             
5799   F5F1             
5799   F5F1             
5799   F5F1~            			endif
5799   F5F1~            			endif
5799   F5F1             
5799   F5F1~            			endif
5799   F5F1~            			endif
5799   F5F1             
5799   F5DE             
5799   F5DE 12          
5799   F5DF             
5799   F5DF             
5799   F5DF~            			endif
5799   F5DF~            			endif
5799   F5DF~            			endif
5799   F5DF             
5799   F5F1             
5799   F5F1~            			endif
5799   F5F1~            			endif
5799   F5F1             
5800   F5F1 32          			pula						;Get our result from above push
5801   F5F2 46          			rora						;Test LSB
5802   F5F3 24 D2       			bcc	to_macro_go3			;If result was #80, then ignore this branch (jmp  $F3B5)
5803   F5F5 7E F5 05    			jmp	pc_sto2				;Else, we will branch now. (stx  $D1, jmp $F3B5)
5804   F5F8             			
5805   F5F8 8D D0       branchdata		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5806   F5FA 81 D0       			cmpa	#$D0
5807   F5FC 25 3C       			bcs	to_rts3				;(rts) if data is below #D0
5808   F5FE 81 F0       			cmpa	#$F0
5809   F600 24 13       			bcc	complexbranch			;Branch if #F0 or above (Complex)
5810   F602 81 E0       			cmpa	#$E0
5811   F604             			ifcc						;Branch if less than #E0
5811   F604             
5811   F604 25 FE       
5812   F606 7E F5 18    				jmp	macro_b_ram				;RAM Data (A&0f)->A (Data is E_)
5813   F609             			endif
5813   F609             
5813   F609             
5813   F609             
5813   F609             
5813   F609             
5813   F609~            			endif
5813   F609~            			endif
5813   F609             
5813   F609~            			endif
5813   F609~            			endif
5813   F609             
5813   F605             
5813   F605 03          
5813   F606             
5813   F606             
5813   F606~            			endif
5813   F606~            			endif
5813   F606~            			endif
5813   F606             
5813   F609             
5813   F609~            			endif
5813   F609~            			endif
5813   F609             
5814   F609 CE 01 93    			ldx	#adj_gameadjust1-2		;Pointer to Bottom of Game Adjustments
5815   F60C 84 0F       			anda	#$0F					;A = Index for Game Adjustment Lookup
5816   F60E 48          			asla	
5817   F60F BD EE FF    			jsr	xplusa				;X = X + A
5818   F612 7E EF 53    			jmp	cmosinc_a				;CMOS,X++ -> A
5819   F615             			
5820   F615 81 F3       complexbranch	cmpa	#$F3
5821   F617             			ifcc							;data is below #F3 (not complex)
5821   F617             
5821   F617 25 FE       
5822   F619 36          				psha						;Push Current Branch Inst.
5823   F61A 8D DC       				bsr	branchdata				;Gets Encoded Data Type
5824   F61C 16          				tab	
5825   F61D D7 9A       				stab	temp1
5826   F61F 32          				pula	
5827   F620 81 F9       				cmpa	#$F9
5828   F622             				ifcc						;Branch if below #F9 (Lamp or Bit Test)
5828   F622             
5828   F622 25 FE       
5829   F624 36          					psha	
5830   F625 37          					pshb	
5831   F626 8D D0       					bsr	branchdata				;Gets Encoded Data Type
5832   F628 97 9A       					staa	temp1
5833   F62A 33          					pulb	
5834   F62B 32          					pula	
5835   F62C             				endif
5835   F62C             
5835   F62C             
5835   F62C             
5835   F62C             
5835   F62C             
5835   F62C~            				endif
5835   F62C~            				endif
5835   F62C             
5835   F62C~            				endif
5835   F62C~            				endif
5835   F62C             
5835   F623             
5835   F623 08          
5835   F624             
5835   F624             
5835   F624~            				endif
5835   F624~            				endif
5835   F624~            				endif
5835   F624             
5835   F62C             
5835   F62C~            				endif
5835   F62C~            				endif
5835   F62C             
5836   F62C             			endif
5836   F62C             
5836   F62C             
5836   F62C             
5836   F62C             
5836   F62C             
5836   F62C~            			endif
5836   F62C~            			endif
5836   F62C             
5836   F62C~            			endif
5836   F62C~            			endif
5836   F62C             
5836   F618             
5836   F618 13          
5836   F619             
5836   F619             
5836   F619~            			endif
5836   F619~            			endif
5836   F619~            			endif
5836   F619             
5836   F62C             
5836   F62C~            			endif
5836   F62C~            			endif
5836   F62C             
5837   F62C CE F3 8B    			ldx	#branch_lookup
5838   F62F BD F4 8C    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
5839   F632 96 9A       			ldaa	temp1
5840   F634 6E 00       			jmp	$00,X
5841   F636             			
5842   F636 8D 5A       branch_invert	bsr	test_a
5843   F638 88 01       			eora	#$01
5844   F63A 39          to_rts3		rts	
5845   F63B             
5846   F63B BD F2 F9    branch_lamp_on	jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
5847   F63E 26 1E       			bne	ret_true				;return true
5848   F640 BD F2 EF    			jsr	bit_lamp_flash			;Check Encoded #(A) with $0030
5849   F643 26 19       test_z		bne	ret_true				;return true
5850   F645 20 10       			bra	ret_false				;return false
5851   F647             			
5852   F647             branch_lamprangeoff	
5853   F647 BD F2 DE    			jsr	$F2DE
5854   F64A 25 12       test_c		bcs	ret_true				;return true
5855   F64C 20 09       			bra	ret_false				;return false
5856   F64E             			
5857   F64E             branch_lamprangeon	
5858   F64E BD F2 CF    			jsr	$F2CF
5859   F651 20 F7       			bra	test_c
5860   F653             			
5861   F653 96 C8       branch_tilt		ldaa	flag_tilt				;tilt flag?
5862   F655 26 07       			bne	ret_true				;return true
5863   F657 86 80       ret_false		ldaa	#$80					;return false
5864   F659 39          			rts	
5865   F65A             			
5866   F65A 96 C9       branch_gameover	ldaa	flag_gameover			;game over?
5867   F65C 27 F9       			beq	ret_false				;return false
5868   F65E 86 81       ret_true		ldaa	#$81
5869   F660 39          			rts	
5870   F661             			
5871   F661 BD F2 F4    branch_lampbuf1	jsr	bit_lamp_buf_1			;Check Encoded #(A) with $0028
5872   F664 20 DD       			bra	test_z				;Return Bool based on Z
5873   F666             									
5874   F666 BD F2 EA    branch_switch	jsr	bit_switch				;Check Encoded #(A) with $0061:
5875   F669 20 D8       			bra	test_z				;Return Boolean based on Z
5876   F66B             			
5877   F66B 8D 1E       branch_and		bsr	set_logic
5878   F66D 94 9A       			anda	temp1
5879   F66F 39          			rts	
5880   F670             			
5881   F670 1B          branch_add		aba	
5882   F671 39          			rts	
5883   F672             			
5884   F672 8D 17       branch_or		bsr	set_logic
5885   F674 9A 9A       			oraa	temp1
5886   F676 39          			rts	
5887   F677             			
5888   F677 11          branch_equal	cba	
5889   F678 27 E4       			beq	ret_true				;lda  #$81, rts
5890   F67A 20 DB       			bra	ret_false				;lda  #$80, rts
5891   F67C             			
5892   F67C 11          branch_ge		cba	
5893   F67D 20 CB       			bra	test_c
5894   F67F             			
5895   F67F BD EB 00    branch_threadpri	jsr	check_threadid
5896   F682 24 DA       			bcc	ret_true				;lda  #$81, rts
5897   F684 20 D1       			bra	ret_false				;lda  #$80, rts
5898   F686             			
5899   F686 D7 9A       branch_bitwise	stab	temp1
5900   F688 94 9A       			anda	temp1
5901   F68A 39          to_rts4		rts	
5902   F68B             
5903   F68B 36          set_logic		psha	
5904   F68C 17          			tba	
5905   F68D 8D 03       			bsr	test_a
5906   F68F 97 9A       			staa	temp1
5907   F691 32          			pula	
5908   F692 4D          test_a		tsta	
5909   F693 2B F5       			bmi	to_rts4				;rts
5910   F695 BD F2 F9    			jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
5911   F698 27 BD       			beq	ret_false				;return false
5912   F69A 81 40       			cmpa	#$40					;Check Encoded Lamp #
5913   F69C 24 C0       			bcc	ret_true				;return true
5914   F69E BD F2 EF    			jsr	bit_lamp_flash			;Bittest with $0030
5915   F6A1 26 B4       			bne	ret_false				;return false
5916   F6A3 20 B9       			bra	ret_true				;return true
5917   F6A5             			
5918   F6A5             ;*******************************************************
5919   F6A5             ;* End VM Code Section
5920   F6A5             ;*******************************************************			
5921   F6A5             
5922   F6A5             ;*******************************************************
5923   F6A5             ;* This is the main special award routine that decides 
5924   F6A5             ;* what type of award is to be given and jumps to the 
5925   F6A5             ;* appropriate place.
5926   F6A5             ;*******************************************************			
5927   F6A5 36          award_special	psha	
5928   F6A6 B6 01 8E    			ldaa	adj_specialaward+1		;ADJ: LSD Special Award-00=Credit 01=EB 02=Points
5929   F6A9 84 0F       			anda	#$0F
5930   F6AB 27 0B       			beq	credit_special			;Special award is credits
5931   F6AD 46          			rora	
5932   F6AE 25 26       			bcs	do_eb					;Extra Ball
5933   F6B0 B6 E0 56    			ldaa	gr_specialawardsound		;*Here if Points* Data byte from Game ROM
5934   F6B3 BD EB FE    			jsr	dsnd_pts				;Add Points(A),Play Digit Sound
5935   F6B6 32          			pula	
5936   F6B7 39          			rts	
5937   F6B8             			
5938   F6B8 DF DC       credit_special	stx	credit_x_temp			;Save X for later
5939   F6BA CE 01 12    			ldx	#aud_specialcredits		;AUD: Special Credits
5940   F6BD 20 0C       			bra	give_credit
5941   F6BF             ;*******************************************************
5942   F6BF             ;* Main entry for replays... score or matching
5943   F6BF             ;*******************************************************			
5944   F6BF 36          award_replay	psha	
5945   F6C0 B6 01 90    			ldaa	adj_replayaward+1			;ADJ: LSD Replay Award-00=Credit 01=Extra Ball
5946   F6C3 46          			rora	
5947   F6C4 25 10       			bcs	do_eb					;Extra Ball
5948   F6C6 DF DC       			stx	credit_x_temp			;Save X for later
5949   F6C8 CE 01 16    			ldx	#aud_replaycredits		;AUD: Replay Score Credits
5950   F6CB BD F7 7F    give_credit		jsr	ptrx_plus_1				;Add 1 to data at X
5951   F6CE BD E0 A7    			jsr	gr_special_event			;Game ROM Hook
5952   F6D1 86 01       			ldaa	#$01
5953   F6D3 20 2C       			bra	addcredit2
5954   F6D5             			
5955   F6D5 36          extraball		psha	
5956   F6D6 DF DA       do_eb			stx	eb_x_temp				;Save X for later
5957   F6D8 CE 01 A9    			ldx	#adj_max_extraballs		;ADJ: Max Extra Balls
5958   F6DB BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
5959   F6DE 91 D0       			cmpa	num_eb				;Number of Extra Balls Remaining
5960   F6E0             			ifgt
5960   F6E0             
5960   F6E0 23 FE       
5961   F6E2 BD E0 A5    				jsr	gr_eb_event
5962   F6E5 B6 E0 5F    				ldaa	gr_eb_lamp_1			;*** Game ROM data ***
5963   F6E8 BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
5964   F6EB B6 E0 60    				ldaa	gr_eb_lamp_2			;*** Game ROM data ***
5965   F6EE BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
5966   F6F1 7C 00 D0    				inc	num_eb
5967   F6F4 CE 01 22    				ldx	#aud_extraballs			;AUD: Total Extra Balls
5968   F6F7 BD F7 7F    				jsr	ptrx_plus_1				;Add 1 to data at X
5969   F6FA             			endif
5969   F6FA             
5969   F6FA             
5969   F6FA             
5969   F6FA             
5969   F6FA             
5969   F6FA~            			endif
5969   F6FA~            			endif
5969   F6FA             
5969   F6FA~            			endif
5969   F6FA~            			endif
5969   F6FA             
5969   F6E1             
5969   F6E1 18          
5969   F6E2             
5969   F6E2             
5969   F6E2~            			endif
5969   F6E2~            			endif
5969   F6E2~            			endif
5969   F6E2             
5969   F6FA             
5969   F6FA~            			endif
5969   F6FA~            			endif
5969   F6FA             
5970   F6FA DE DA       			ldx	eb_x_temp				;Restore X
5971   F6FC 32          			pula	
5972   F6FD 39          			rts	
5973   F6FE             			
5974   F6FE DF DC       addcredits		stx	credit_x_temp			;Save X
5975   F700 36          			psha	
5976   F701 37          addcredit2		pshb	
5977   F702 8D 45       			bsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
5978   F704             			ifcs						;No more if Carry Clear.
5978   F704             
5978   F704 24 FE       
5979   F706 BD EF 63    				jsr	cmosinc_b				;CMOS,X++ -> B
5980   F709 09          				dex	
5981   F70A 09          				dex	
5982   F70B 1B          				aba						;Add the new credits.
5983   F70C 19          				daa						;Adjust
5984   F70D             				ifcs
5984   F70D             
5984   F70D 24 FE       
5985   F70F 86 99       					ldaa	#$99					;If it rolled, set it to 99
5986   F711             				endif
5986   F711             
5986   F711             
5986   F711             
5986   F711             
5986   F711             
5986   F711~            				endif
5986   F711~            				endif
5986   F711             
5986   F711~            				endif
5986   F711~            				endif
5986   F711             
5986   F70E             
5986   F70E 02          
5986   F70F             
5986   F70F             
5986   F70F~            				endif
5986   F70F~            				endif
5986   F70F~            				endif
5986   F70F             
5986   F711             
5986   F711~            				endif
5986   F711~            				endif
5986   F711             
5987   F711 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++
5988   F714 D1 5A       				cmpb	cred_b0				;Actual Credits
5989   F716             				ifeq						;Check against shown credits
5989   F716             
5989   F716 26 FE       
5990   F718 C6 0E       					ldab	#$0E
5991   F71A D7 AA       					stab	thread_priority
5992   F71C CE F7 5F    					ldx	#creditq				;Thread: Add on Queued Credits
5993   F71F BD EA 78    					jsr	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
5994   F722             					ifcs						;If Carry is set, thread was not added
5994   F722             
5994   F722 24 FE       
5995   F724 97 5A       						staa	cred_b0				;Actual Credits
5996   F726             					endif
5996   F726             
5996   F726             
5996   F726             
5996   F726             
5996   F726             
5996   F726~            					endif
5996   F726~            					endif
5996   F726             
5996   F726~            					endif
5996   F726~            					endif
5996   F726             
5996   F723             
5996   F723 02          
5996   F724             
5996   F724             
5996   F724~            					endif
5996   F724~            					endif
5996   F724~            					endif
5996   F724             
5996   F726             
5996   F726~            					endif
5996   F726~            					endif
5996   F726             
5997   F726             				endif
5997   F726             
5997   F726             
5997   F726             
5997   F726             
5997   F726             
5997   F726~            				endif
5997   F726~            				endif
5997   F726             
5997   F726~            				endif
5997   F726~            				endif
5997   F726             
5997   F717             
5997   F717 0E          
5997   F718             
5997   F718             
5997   F718~            				endif
5997   F718~            				endif
5997   F718~            				endif
5997   F718             
5997   F726             
5997   F726~            				endif
5997   F726~            				endif
5997   F726             
5998   F726 8D 04       				bsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
5999   F728             			endif
5999   F728             
5999   F728             
5999   F728             
5999   F728             
5999   F728             
5999   F728~            			endif
5999   F728~            			endif
5999   F728             
5999   F728~            			endif
5999   F728~            			endif
5999   F728             
5999   F705             
5999   F705 22          
5999   F706             
5999   F706             
5999   F706~            			endif
5999   F706~            			endif
5999   F706~            			endif
5999   F706             
5999   F728             
5999   F728~            			endif
5999   F728~            			endif
5999   F728             
6000   F728 DE DC       			ldx	credit_x_temp			;Restore X
6001   F72A 20 30       			bra	pull_ba_rts				;pulb,pula,rts
6002   F72C             
6003   F72C             ;**********************************************
6004   F72C             ;* Adjust the coin lockout solenoid and the 
6005   F72C             ;* credit lamp on playfield if installed.
6006   F72C             ;**********************************************			
6007   F72C 36          coinlockout		psha	
6008   F72D BD F7 49    			jsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
6009   F730 86 EF       			ldaa	#$EF					;Lockout Coils On
6010   F732             			ifcc
6010   F732             
6010   F732 25 FE       
6011   F734 86 0F       				ldaa	#$0F					;Lockout Coils Off
6012   F736             			endif
6012   F736             
6012   F736             
6012   F736             
6012   F736             
6012   F736             
6012   F736~            			endif
6012   F736~            			endif
6012   F736             
6012   F736~            			endif
6012   F736~            			endif
6012   F736             
6012   F733             
6012   F733 02          
6012   F734             
6012   F734             
6012   F734~            			endif
6012   F734~            			endif
6012   F734~            			endif
6012   F734             
6012   F736             
6012   F736~            			endif
6012   F736~            			endif
6012   F736             
6013   F736 BD EB 23    			jsr	solbuf				;Turn Off Lockout Coils
6014   F739 B6 E0 61    			ldaa	gr_lastlamp				;Game ROM: Last Lamp Used
6015   F73C BD F1 5B    			jsr	lamp_off				;Turn off Lamp A (encoded):
6016   F73F BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
6017   F742             			ifne
6017   F742             
6017   F742 27 FE       
6018   F744 BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
6019   F747             			endif
6019   F747             
6019   F747             
6019   F747             
6019   F747             
6019   F747             
6019   F747~            			endif
6019   F747~            			endif
6019   F747             
6019   F747~            			endif
6019   F747~            			endif
6019   F747             
6019   F743             
6019   F743 03          
6019   F744             
6019   F744             
6019   F744~            			endif
6019   F744~            			endif
6019   F744~            			endif
6019   F744             
6019   F747             
6019   F747~            			endif
6019   F747~            			endif
6019   F747             
6020   F747 32          			pula	
6021   F748 39          			rts	
6022   F749             ;**********************************************
6023   F749             ;* See if we are at the adjustable maximum 
6024   F749             ;* credits allowed. If we are at max then
6025   F749             ;* carry flag is cleared, if we are not at
6026   F749             ;* max then the carry flag is set.
6027   F749             ;**********************************************			
6028   F749 36          checkmaxcredits	psha	
6029   F74A 37          			pshb	
6030   F74B CE 01 AB    			ldx	#adj_max_credits			;ADJ: Max Credits
6031   F74E BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
6032   F751 CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
6033   F754 5D          			tstb						;Max Credits allowed
6034   F755 0D          			sec	
6035   F756             			ifne
6035   F756             
6035   F756 27 FE       
6036   F758 BD FE 1F    				jsr	cmos_a				;CMOS, X -> A
6037   F75B 11          				cba	
6038   F75C             			endif
6038   F75C             
6038   F75C             
6038   F75C             
6038   F75C             
6038   F75C             
6038   F75C~            			endif
6038   F75C~            			endif
6038   F75C             
6038   F75C~            			endif
6038   F75C~            			endif
6038   F75C             
6038   F757             
6038   F757 04          
6038   F758             
6038   F758             
6038   F758~            			endif
6038   F758~            			endif
6038   F758~            			endif
6038   F758             
6038   F75C             
6038   F75C~            			endif
6038   F75C~            			endif
6038   F75C             
6039   F75C 33          pull_ba_rts		pulb	
6040   F75D 32          			pula	
6041   F75E 39          			rts	
6042   F75F             
6043   F75F             ;***********************************************
6044   F75F             ;* This routine is spawned as a thread when the
6045   F75F             ;* credits showing on the display do not match
6046   F75F             ;* the number of credits in the CMOS RAM. It 
6047   F75F             ;* Takes care of bringing them equal in a timely
6048   F75F             ;* fashion and calling the game ROM hook each
6049   F75F             ;* time a credit is added to the display. With
6050   F75F             ;* this, the game ROM can control the credit 
6051   F75F             ;* award process.
6052   F75F             ;***********************************************			
6053   F75F CE 01 6E    creditq		ldx	#aud_currentcredits		;CMOS: Current Credits
6054   F762 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
6055   F765 D1 5A       			cmpb	cred_b0
6056   F767             			ifne
6056   F767             
6056   F767 27 FE       
6057   F769 96 5A       				ldaa	cred_b0
6058   F76B 8B 01       				adda	#$01
6059   F76D 19          				daa	
6060   F76E 97 5A       				staa	cred_b0
6061   F770 FE E0 B7    				ldx	gr_coin_hook_ptr			;Game ROM:
6062   F773 11          				cba	
6063   F774             				ifne
6063   F774             
6063   F774 27 FE       
6064   F776 AD 00       					jsr	$00,X					;JSR to Game ROM Credit Hook
6065   F778 20 E5       					bra	creditq				;Loop it.
6066   F77A             				endif
6066   F77A             
6066   F77A             
6066   F77A             
6066   F77A             
6066   F77A             
6066   F77A~            				endif
6066   F77A~            				endif
6066   F77A             
6066   F77A~            				endif
6066   F77A~            				endif
6066   F77A             
6066   F775             
6066   F775 04          
6066   F776             
6066   F776             
6066   F776~            				endif
6066   F776~            				endif
6066   F776~            				endif
6066   F776             
6066   F77A             
6066   F77A~            				endif
6066   F77A~            				endif
6066   F77A             
6067   F77A AD 00       				jsr	$00,X					;JSR to Game ROM/bell?
6068   F77C             			endif
6068   F77C             
6068   F77C             
6068   F77C             
6068   F77C             
6068   F77C             
6068   F77C~            			endif
6068   F77C~            			endif
6068   F77C             
6068   F77C~            			endif
6068   F77C~            			endif
6068   F77C             
6068   F768             
6068   F768 13          
6068   F769             
6068   F769             
6068   F769~            			endif
6068   F769~            			endif
6068   F769~            			endif
6068   F769             
6068   F77C             
6068   F77C~            			endif
6068   F77C~            			endif
6068   F77C             
6069   F77C 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
6070   F77F             
6071   F77F             ;*************************************************
6072   F77F             ;* Some utility routines for getting data from
6073   F77F             ;* the CMOS RAM areas.
6074   F77F             ;*************************************************
6075   F77F 36          ptrx_plus_1		psha	
6076   F780 86 01       			ldaa	#$01
6077   F782 20 01       			bra	ptrx_plus
6078   F784 36          ptrx_plus_a		psha	
6079   F785 37          ptrx_plus		pshb	
6080   F786 DF 9A       			stx	temp1
6081   F788 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
6082   F78B 37          			pshb	
6083   F78C BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
6084   F78F 1B          			aba	
6085   F790 19          			daa	
6086   F791 16          			tab	
6087   F792 32          			pula	
6088   F793 89 00       			adca	#$00
6089   F795 19          			daa	
6090   F796 DE 9A       			ldx	temp1
6091   F798 BD EF AF    			jsr	a_cmosinc				;A -> CMOS,X++
6092   F79B BD EF 69    			jsr	b_cmosinc				;B -> CMOS,X++
6093   F79E DE 9A       			ldx	temp1
6094   F7A0 20 BA       			bra	pull_ba_rts				;pula, pulb, rts.
6095   F7A2             			
6096   F7A2             ;*********************************************************************************
6097   F7A2             ;* Main Coin Switch Routine - Called from each coin switch in the Switch Table.
6098   F7A2             ;*                            This takes care of all bonus coins, multipliers,etc.
6099   F7A2             ;*********************************************************************************
6100   F7A2             coin_accepted	
6101   F7A2             			;Starts with Macros
6102   F7A2 90 03       			.db $90,$03 	;MJSR $F7A7
6103   F7A4 7E EA 67    			.db $7E,$EA,$67  	;Push $EA67 into Control Loop with delay of #0E
6104   F7A7             			PRI_($0E) 		;Set this loops priority to #0E
6104   F7A7 52 0E       
6105   F7A9             			SLEEP_($20) 	;Delay $20
6105   F7A9~            			SLEEP_($20) 	;Delay $20
6105   F7A9~            			SLEEP_($20) 	;Delay $20
6105   F7A9             
6105   F7A9 53 20       
6105   F7AB             
6106   F7AB             			CPUX_			;Resume CPU execution
6106   F7AB 04          
6107   F7AC             			
6108   F7AC 43          			coma 
6109   F7AD 8B 06       			adda	#$06
6110   F7AF 48          			asla 
6111   F7B0 16          			tab  					;A is 0,2,4  
6112   F7B1 58          			aslb 					;B is 0,4,8
6113   F7B2 CE 01 02    			ldx  	#aud_leftcoins		;AUD: Coins Left/Center/Right Chute Base for counter
6114   F7B5 BD EF 4D    			jsr  	xplusb			;Adjust Pointer
6115   F7B8 BD F7 7F    			jsr  	ptrx_plus_1   		;Add 1 click to the counter
6116   F7BB CE 01 AF    			ldx  	#cmos_pricingbase		;AUD: Coin Slot Multiplier Base
6117   F7BE BD EE FF    			jsr  	xplusa   			;Adjust Pointer
6118   F7C1 BD EF 63    			jsr  	cmosinc_b    		;Get Multiplier into B
6119   F7C4 8D 6E       			bsr  	dec2hex    			;Make it hex
6120   F7C6 CE 01 62    			ldx  	#cmos_bonusunits	
6121   F7C9 8D 44       			bsr  	cmos_a_plus_b_cmos    	;Load Previous Coin Count, Add B, Save it in CMOS++
6122   F7CB 8D 42       			bsr  	cmos_a_plus_b_cmos    	;Load A with CMOS $0164, add B, Save in CMOS++
6123   F7CD CE 01 B9    			ldx  	#cmos_minimumcoins	;ADJ: Minimum Coin Units
6124   F7D0 BD EF 63    			jsr  	cmosinc_b    		;Get Minimum Coin Amount into B
6125   F7D3 11          			cba  
6126   F7D4             			ifcc					;Have we met inserted minimum coins?
6126   F7D4             
6126   F7D4 25 FE       
6127   F7D6             									;Yes!
6128   F7D6 CE 01 B5    				ldx  	#cmos_coinsforcredit	;ADJ: Coin Units required for Credit
6129   F7D9 BD EF 63    				jsr  	cmosinc_b    		;Get Value
6130   F7DC 8D 56       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
6131   F7DE 8D 36       				bsr  	divide_ab
6132   F7E0 97 9A       				staa  temp1
6133   F7E2 CE 01 64    				ldx  	#cmos_coinunits		;Save remainder coin units for next time
6134   F7E5 BD EF 69    				jsr  	b_cmosinc   		;( B -> CMOS,X++)
6135   F7E8 CE 01 B7    				ldx  	#cmos_bonuscoins		;ADJ: Coin Unit Bonus Point
6136   F7EB BD EF 63    				jsr  	cmosinc_b    		;( CMOS,X++ -> B )
6137   F7EE CE 01 62    				ldx  	#cmos_bonusunits	
6138   F7F1 BD EF 53    				jsr  	cmosinc_a 			;( CMOS,X++ -> A )
6139   F7F4 8D 3E       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
6140   F7F6 8D 1E       				bsr  	divide_ab
6141   F7F8 4D          				tsta 
6142   F7F9             				ifne
6142   F7F9             
6142   F7F9 27 FE       
6143   F7FB 8D 2C       					bsr	clr_bonus_coins
6144   F7FD             				endif
6144   F7FD             
6144   F7FD             
6144   F7FD             
6144   F7FD             
6144   F7FD             
6144   F7FD~            				endif
6144   F7FD~            				endif
6144   F7FD             
6144   F7FD~            				endif
6144   F7FD~            				endif
6144   F7FD             
6144   F7FA             
6144   F7FA 02          
6144   F7FB             
6144   F7FB             
6144   F7FB~            				endif
6144   F7FB~            				endif
6144   F7FB~            				endif
6144   F7FB             
6144   F7FD             
6144   F7FD~            				endif
6144   F7FD~            				endif
6144   F7FD             
6145   F7FD 9B 9A       				adda 	temp1
6146   F7FF 19          				daa  
6147   F800 CE 01 0E    				ldx  	#aud_paidcredits		;AUD: Total Paid Credits
6148   F803 BD F7 84    				jsr  	ptrx_plus_a    		;Add A to data at X:
6149   F806 7E F6 FE    				jmp  	addcredits    		;Add Credits if Possible
6150   F809             			endif
6150   F809             
6150   F809             
6150   F809             
6150   F809             
6150   F809             
6150   F809~            			endif
6150   F809~            			endif
6150   F809             
6150   F809~            			endif
6150   F809~            			endif
6150   F809             
6150   F7D5             
6150   F7D5 33          
6150   F7D6             
6150   F7D6             
6150   F7D6~            			endif
6150   F7D6~            			endif
6150   F7D6~            			endif
6150   F7D6             
6150   F809             
6150   F809~            			endif
6150   F809~            			endif
6150   F809             
6151   F809 B6 E0 5E    			ldaa 	gr_creditsound		;Game ROM Data: Credit Sound
6152   F80C 7E EC FC    			jmp  	isnd_once			;Play Sound Index(A) Once
6153   F80F             
6154   F80F             ;*********************************************************
6155   F80F             ;* Load A with value in X, Add B, Save to CMOS and 
6156   F80F             ;* post increment
6157   F80F             ;*********************************************************
6158   F80F             cmos_a_plus_b_cmos	
6159   F80F BD FE 1F    			jsr	cmos_a			;CMOS, X -> A 
6160   F812 1B          			aba	
6161   F813 7E EF AF    			jmp	a_cmosinc			;A -> CMOS,X++
6162   F816             			
6163   F816             ;********************************************************
6164   F816             ;* Divides A by B, returns result in A and remainder in
6165   F816             ;* B. Input values are in Hex and not decimal.
6166   F816             ;********************************************************			
6167   F816 D7 9D       divide_ab		stab	temp2+1
6168   F818             			ifne
6168   F818             
6168   F818 27 FE       
6169   F81A 16          				tab	
6170   F81B 86 99       				ldaa	#$99	
6171   F81D             				begin
6171   F81D             
6172   F81D 8B 01       					adda	#$01
6173   F81F 19          					daa	
6174   F820 D0 9D       					subb	temp2+1
6175   F822             				csend
6175   F822             
6175   F822             
6175   F822~            				csend
6175   F822~            				csend
6175   F822~            				csend
6175   F822             
6175   F822 24 F9       
6175   F824             
6175   F824~            				csend
6175   F824~            				csend
6175   F824             
6176   F824 DB 9D       				addb	temp2+1
6177   F826 39          				rts	
6178   F827             			endif
6178   F827             
6178   F827             
6178   F827             
6178   F827             
6178   F827             
6178   F827~            			endif
6178   F827~            			endif
6178   F827             
6178   F827~            			endif
6178   F827~            			endif
6178   F827             
6178   F819             
6178   F819 0D          
6178   F81A             
6178   F81A             
6178   F81A~            			endif
6178   F81A~            			endif
6178   F81A~            			endif
6178   F81A             
6178   F827             
6178   F827~            			endif
6178   F827~            			endif
6178   F827             
6179   F827 17          			tba	
6180   F828 39          			rts	
6181   F829             
6182   F829             ;********************************************************
6183   F829             ;* Cleans out any half credits and bonus coins
6184   F829             ;********************************************************			
6185   F829 CE 00 00    clr_bonus_coins	ldx	#0000
6186   F82C FF 01 64    			stx	cmos_coinunits
6187   F82F FF 01 62    			stx	cmos_bonusunits
6188   F832 39          			rts	
6189   F833             
6190   F833             ;********************************************************
6191   F833             ;* System Checksum #3: Set to make ROM csum from
6192   F833             ;*                     $F800-$FFFF equal to $00
6193   F833             ;********************************************************
6194   F833 42          csum3			.db $42
6195   F834             
6196   F834             ;********************************************************
6197   F834             ;* Convert 2 digit decimal value into a hex number
6198   F834             ;*
6199   F834             ;* Requires:	Decimal Number in B
6200   F834             ;* Protects:	A
6201   F834             ;* Destroys:	
6202   F834             ;* Output:		Hex Number in B
6203   F834             ;********************************************************
6204   F834 36          dec2hex		psha	
6205   F835 17          			tba	
6206   F836 5F          			clrb	
6207   F837             			begin
6207   F837             
6208   F837 4D          				tsta	
6209   F838 27 5E       				beq	to_pula_rts		;done
6210   F83A 8B 99       				adda	#$99
6211   F83C 19          				daa	
6212   F83D 5C          				incb	
6213   F83E             			loopend			;Loop forever
6213   F83E             
6213   F83E             
6213   F83E~            			loopend			;Loop forever
6213   F83E~            			loopend			;Loop forever
6213   F83E~            			loopend			;Loop forever
6213   F83E             
6213   F83E 20 F7       
6213   F840             
6213   F840~            			loopend			;Loop forever
6213   F840~            			loopend			;Loop forever
6213   F840             
6214   F840             
6215   F840             ;*********************************************************
6216   F840             ;* Stores A from X to X+B
6217   F840             ;* 
6218   F840             ;* Requires:	A,B,X
6219   F840             ;* Destroys:	B
6220   F840             ;********************************************************			
6221   F840             write_range		
6222   F840             			begin
6222   F840             
6223   F840 A7 00       				staa	$00,X
6224   F842 08          				inx	
6225   F843 5A          				decb	
6226   F844             			eqend
6226   F844             
6226   F844             
6226   F844~            			eqend
6226   F844~            			eqend
6226   F844~            			eqend
6226   F844             
6226   F844 26 FA       
6226   F846             
6226   F846~            			eqend
6226   F846~            			eqend
6226   F846             
6227   F846 39          			rts	
6228   F847             
6229   F847             ;*********************************************************
6230   F847             ;* Initialzes a new game.
6231   F847             ;*********************************************************			
6232   F847 FE E0 B9    do_game_init	ldx	gr_game_hook_ptr			;Game Start Hook
6233   F84A AD 00       			jsr	$00,X					;JSR to Game ROM Hook
6234   F84C BD F9 94    			jsr	dump_score_queue			;Clean the score queue
6235   F84F 8D 49       			bsr	clear_displays			;Blank all Player Displays (buffer 0)
6236   F851 8D 25       			bsr	initialize_game			;Remove one Credit, init some game variables
6237   F853 8D 03       			bsr	add_player				;Add one Player
6238   F855 7E F8 D2    			jmp	init_player_up
6239   F858             		
6240   F858             ;****************************************************
6241   F858             ;* Add Player: Increments player count and loads    
6242   F858             ;*             default game data for that player.  
6243   F858             ;*             Plays start sound and inits display.
6244   F858             ;*
6245   F858             ;* Requires:   No Variables
6246   F858             ;****************************************************			
6247   F858 BD E0 AD    add_player		jsr	gr_addplayer_event		;(RTS)
6248   F85B 7C 00 CC    			inc	num_players				;Add One Player
6249   F85E D6 CC       			ldab	num_players
6250   F860 8D 4B       			bsr	init_player_game			;Put the Default(game start) data into Current Players Game Data Buffer
6251   F862 CE E0 57    			ldx	#gr_p1_startsound			;Game ROM Table: Player Start Sounds
6252   F865 BD EF 4D    			jsr	xplusb				;X = X + B)
6253   F868 A6 00       			ldaa	$00,X
6254   F86A BD EC FC    			jsr	isnd_once				;Play Player Start Sound From Game ROM Table
6255   F86D 58          			aslb	
6256   F86E 58          			aslb	
6257   F86F CE 00 38    			ldx	#score_p1_b0
6258   F872 BD EF 4D    			jsr	xplusb				;X = X + B)
6259   F875 6F 03       			clr	$03,X				;Put in "00" onto new player display
6260   F877 39          			rts	
6261   F878             
6262   F878             ;****************************************************	
6263   F878             ;* Sets up all gameplay variables for a new game.
6264   F878             ;****************************************************		
6265   F878 4F          initialize_game	clra	
6266   F879 97 D6       			staa	flag_timer_bip			;Ball in Play Flag
6267   F87B 97 D0       			staa	num_eb				;Number of Extra Balls Remaining
6268   F87D 97 CD       			staa	player_up				;Current Player Up (0-3)
6269   F87F 97 C9       			staa	flag_gameover			;Game Play On
6270   F881 97 60       			staa	comma_flags
6271   F883 C6 08       			ldab	#$08
6272   F885 BD EA FB    			jsr	kill_threads
6273   F888 4A          			deca	
6274   F889 97 CC       			staa	num_players				;Subtract one Credit
6275   F88B 86 F1       			ldaa	#$F1
6276   F88D 97 58       			staa	mbip_b0				;Set Display to Ball 1
6277   F88F C6 0C       			ldab	#$0C
6278   F891 CE 00 1C    			ldx	#$001C				;Clear RAM $001C-0027
6279   F894 36          clear_range		psha	
6280   F895 4F          			clra	
6281   F896 8D A8       			bsr	write_range				;Store A from X to X+B
6282   F898 32          to_pula_rts		pula	
6283   F899 39          			rts	
6284   F89A             
6285   F89A             ;******************************************************
6286   F89A             ;* Resets all player display scores to Blank 'FFFFFFFF'
6287   F89A             ;******************************************************			
6288   F89A 86 FF       clear_displays	ldaa	#$FF
6289   F89C C6 10       			ldab	#$10
6290   F89E CE 00 38    			ldx	#score_p1_b0
6291   F8A1 8D 9D       			bsr	write_range				;Store A from X to X+B
6292   F8A3 4F          			clra	
6293   F8A4             			
6294   F8A4             store_display_mask	
6295   F8A4 97 5C       			staa	dmask_p1				;These are the Display Buffer Toggles
6296   F8A6 97 5D       			staa	dmask_p2
6297   F8A8 97 5E       			staa	dmask_p3
6298   F8AA 97 5F       			staa	dmask_p4
6299   F8AC 39          			rts	
6300   F8AD             
6301   F8AD             ;**********************************************************
6302   F8AD             ;* Loads the default game data into the player number 
6303   F8AD             ;* passed in B.
6304   F8AD             ;*
6305   F8AD             ;* Requires:    	Player Number to init in B
6306   F8AD             ;* Destroys:    	X
6307   F8AD             ;* Protects:	A,B
6308   F8AD             ;**********************************************************			
6309   F8AD 36          init_player_game	psha	
6310   F8AE 37          			pshb	
6311   F8AF 8D 0B       			bsr	setplayerbuffer			;Set up the Pointer to the Players Buffer
6312   F8B1 8D 15       			bsr	copyplayerdata			;Copy Default Player Data into Player Buffer (X)
6313   F8B3 DE 9A       			ldx	temp1
6314   F8B5 C6 06       			ldab	#$06
6315   F8B7 8D DB       			bsr	clear_range				;Clear Remaining Part of Player Game Data Buffer
6316   F8B9 33          			pulb	
6317   F8BA 32          			pula	
6318   F8BB 39          			rts	
6319   F8BC             
6320   F8BC             ;**********************************************************
6321   F8BC             ;* Will set up X to point at the start of the player 
6322   F8BC             ;* specified in B.
6323   F8BC             ;*
6324   F8BC             ;* Requires:   	Player Number in B
6325   F8BC             ;* Destroys:	A,B
6326   F8BC             ;* Protects:	None
6327   F8BC             ;* Output:		X
6328   F8BC             ;**********************************************************			
6329   F8BC 86 1A       setplayerbuffer	ldaa	#$1A		;Length of Player Buffer
6330   F8BE CE 11 26    			ldx	#$1126	;Player 1 base
6331   F8C1             			begin
6331   F8C1             
6332   F8C1 BD EE FF    				jsr	xplusa	;X = X + A
6333   F8C4 5A          				decb	
6334   F8C5             			miend
6334   F8C5             
6334   F8C5             
6334   F8C5~            			miend
6334   F8C5~            			miend
6334   F8C5~            			miend
6334   F8C5             
6334   F8C5 2A FA       
6334   F8C7             
6334   F8C7~            			miend
6334   F8C7~            			miend
6334   F8C7             
6335   F8C7 39          			rts	
6336   F8C8             
6337   F8C8             ;***********************************************************
6338   F8C8             ;* Copies Player default data from game ROM to the player 
6339   F8C8             ;* buffer specified by X.
6340   F8C8             ;*
6341   F8C8             ;* Requires: Player Buffer to Fill in X
6342   F8C8             ;***********************************************************			
6343   F8C8 DF 9A       copyplayerdata	stx	temp1
6344   F8CA CE E0 77    			ldx	#gr_playerstartdata		;*** Table Pointer ***
6345   F8CD C6 14       			ldab	#$14
6346   F8CF 7E EF BC    			jmp	copyblock				;Copy Block: X -> temp1 B=Length
6347   F8D2             
6348   F8D2             ;***********************************************************
6349   F8D2             ;			
6350   F8D2 8D 5F       init_player_up	bsr	init_player_sys			;Initialize System for New Player Up
6351   F8D4 D6 CD       			ldab	player_up				;Current Player Up (0-3)
6352   F8D6 8D 7A       			bsr	resetplayerdata			;Reset Player Game Data:
6353   F8D8 FE E0 BB    			ldx	gr_player_hook_ptr		;Game ROM hook Location
6354   F8DB AD 00       			jsr	$00,X					;JSR to Game ROM
6355   F8DD             			;This following loop makes the current players
6356   F8DD             			;score flash until any score is made.
6357   F8DD             			begin
6357   F8DD             
6358   F8DD BD EA 2F    player_ready		jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6359   F8E0 05          				.db 	$05
6360   F8E1 8D 36       				bsr	disp_mask				;Get Active Player Display Toggle Data
6361   F8E3 43          				coma	
6362   F8E4 94 60       				anda	comma_flags
6363   F8E6 97 60       				staa	comma_flags
6364   F8E8 8D 3C       				bsr	disp_clear				;Blank Current Player Score Display (Buffer 1)
6365   F8EA DE B1       				ldx	current_thread			;Current VM Routine being run
6366   F8EC 86 07       				ldaa	#$07
6367   F8EE A7 0D       				staa	threadobj_id,X			;Set thread ID
6368   F8F0 CE 00 5C    				ldx	#dmask_p1				;Start of Display Toggles
6369   F8F3 BD EF 4D    				jsr	xplusb				;X = X + B
6370   F8F6 A6 00       				ldaa	$00,X
6371   F8F8 8A 7F       				oraa	#$7F
6372   F8FA A7 00       				staa	$00,X
6373   F8FC BD EA 2F    				jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6374   F8FF 05          				.db	$05
6375   F900 BD E0 AB    				jsr	gr_ready_event			;Game ROM Hook
6376   F903 A6 00       				ldaa	$00,X
6377   F905 84 80       				anda	#$80
6378   F907 A7 00       				staa	$00,X
6379   F909 BD EB A1    				jsr	update_commas			;Update Master Display Toggle From Current Player
6380   F90C DE B1       				ldx	current_thread			;Current VM Routine being run
6381   F90E 86 04       				ldaa	#$04
6382   F910 A7 0D       				staa	threadobj_id,X
6383   F912 96 D6       				ldaa	flag_timer_bip			;Ball in Play Flag
6384   F914             			neend					
6384   F914             
6384   F914             
6384   F914~            			neend					
6384   F914~            			neend					
6384   F914~            			neend					
6384   F914             
6384   F914 27 C7       
6384   F916             
6384   F916~            			neend					
6384   F916~            			neend					
6384   F916             
6385   F916 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
6386   F919             			
6387   F919 D6 CD       disp_mask		ldab	player_up				;Current Player Up (0-3)
6388   F91B CE EB 99    			ldx	#comma_million			;Comma Tables
6389   F91E BD EF 4D    			jsr	xplusb				;X = X + B)
6390   F921 A6 00       			ldaa	$00,X					;comma_million: 40 04 80 08
6391   F923 AA 04       			oraa	$04,X					;comma_thousand: 10 01 20 02
6392   F925 39          			rts	
6393   F926             			
6394   F926 DE CE       disp_clear		ldx	pscore_buf				;Start of Current Player Score Buffer
6395   F928 86 FF       			ldaa	#$FF
6396   F92A A7 10       			staa	lampbuffer0,X
6397   F92C A7 11       			staa	$11,X
6398   F92E A7 12       			staa	$12,X
6399   F930 A7 13       			staa	$13,X
6400   F932 39          			rts	
6401   F933             
6402   F933             ;********************************************************
6403   F933             ;* Initializes new player. Clears tilt counter, reset 
6404   F933             ;* bonus ball enable, enables flippers, Loads Plater 
6405   F933             ;* score buffer pointer.
6406   F933             ;********************************************************			
6407   F933 96 61       init_player_sys	ldaa	switch_debounced
6408   F935 84 FC       			anda	#$FC
6409   F937 97 61       			staa	switch_debounced				;Blank the Tilt Lines?
6410   F939 4F          			clra	
6411   F93A 97 C8       			staa	flag_tilt				;Clear Tilt Flag
6412   F93C 97 D3       			staa	num_tilt				;Clear Plumb Bob Tilts
6413   F93E 97 CA       			staa	flag_bonusball			;Enable Bonus Ball
6414   F940 86 18       			ldaa	#$18
6415   F942 BD EB 23    			jsr	solbuf				;Turn on Solenoid $18 (Flipper Enable?)
6416   F945 96 CD       			ldaa	player_up				;Current Player Up (0-3)
6417   F947 48          			asla	
6418   F948 48          			asla	
6419   F949 CE 00 38    			ldx	#score_p1_b0
6420   F94C BD EE FF    			jsr	xplusa				;X= P1:0038 P2:003C P3:0040 P4:0044
6421   F94F DF CE       			stx	pscore_buf				;Pointer to Start of Score Buffer 0
6422   F951 39          			rts	
6423   F952             
6424   F952             ;*********************************************************
6425   F952             ;* Applies Game ROM mask to player game data to reset 
6426   F952             ;* specific bits of data. Loads the flashing lamp data
6427   F952             ;* Resets Player game data at start of RAM.
6428   F952             ;*********************************************************	
6429   F952 CE 00 10    resetplayerdata	ldx	#lampbuffer0
6430   F955 DF 9A       			stx	temp1					;temp1 Points to Base of Lamp Matrix Data
6431   F957 BD F8 BC    			jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
6432   F95A DF 9C       			stx	temp2					;$9C Points to Base of Player Game Data Buffer
6433   F95C CE E0 77    			ldx	#gr_playerstartdata		;X points to base of default player data
6434   F95F             			begin
6434   F95F             
6435   F95F A6 14       				ldaa	$14,X					;Get Game Data Reset Data
6436   F961 16          				tab	
6437   F962 53          				comb	
6438   F963 E4 00       				andb	$00,X					;AND !B with Players Last Lamps
6439   F965 08          				inx	
6440   F966 DF 9E       				stx	temp3					;X points to base of default player data +1
6441   F968 DE 9C       				ldx	temp2					;Player Game Data Buffer
6442   F96A A4 00       				anda	$00,X
6443   F96C 08          				inx	
6444   F96D DF 9C       				stx	temp2
6445   F96F 1B          				aba	
6446   F970 DE 9A       				ldx	temp1
6447   F972 A7 00       				staa	$00,X
6448   F974 08          				inx	
6449   F975 8C 00 1C    				cpx	#lampbuffer0+$0C
6450   F978             				ifeq
6450   F978             
6450   F978 26 FE       
6451   F97A CE 00 30    					ldx	#lampflashflag
6452   F97D             				endif
6452   F97D             
6452   F97D             
6452   F97D             
6452   F97D             
6452   F97D             
6452   F97D~            				endif
6452   F97D~            				endif
6452   F97D             
6452   F97D~            				endif
6452   F97D~            				endif
6452   F97D             
6452   F979             
6452   F979 03          
6452   F97A             
6452   F97A             
6452   F97A~            				endif
6452   F97A~            				endif
6452   F97A~            				endif
6452   F97A             
6452   F97D             
6452   F97D~            				endif
6452   F97D~            				endif
6452   F97D             
6453   F97D DF 9A       				stx	temp1
6454   F97F DE 9E       				ldx	temp3
6455   F981 8C E0 8B    				cpx	#gr_playerresetdata		;End of Default Player Game Data
6456   F984             			eqend						;Loop it!
6456   F984             
6456   F984             
6456   F984~            			eqend						;Loop it!
6456   F984~            			eqend						;Loop it!
6456   F984~            			eqend						;Loop it!
6456   F984             
6456   F984 26 D9       
6456   F986             
6456   F986~            			eqend						;Loop it!
6456   F986~            			eqend						;Loop it!
6456   F986             
6457   F986 CE 00 02    			ldx	#$0002
6458   F989 DF 9A       			stx	temp1
6459   F98B DE 9C       			ldx	temp2
6460   F98D C6 06       			ldab	#$06
6461   F98F 8D 52       			bsr	to_copyblock			;Copy Data Block: Current Game Data 0-6 -> Player Game Data 0-6
6462   F991 7E F7 2C    			jmp	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
6463   F994             
6464   F994             ;*********************************************************************
6465   F994             ;* Scoring Queue: This will bring all scores up to date with current *
6466   F994             ;*                scores waiting to be applied.                      *
6467   F994             ;*********************************************************************			
6468   F994 CE 11 28    dump_score_queue	ldx	#score_queue
6469   F997 86 0F       			ldaa	#$0F
6470   F999             			begin
6470   F999             
6471   F999 E6 00       				ldab	$00,X
6472   F99B             				ifne
6472   F99B             
6472   F99B 27 FE       
6473   F99D             					begin
6473   F99D             
6474   F99D BD EC 05    						jsr	score_main				;Main Add Points Routine
6475   F9A0 6A 00       						dec	$00,X
6476   F9A2             					eqend
6476   F9A2             
6476   F9A2             
6476   F9A2~            					eqend
6476   F9A2~            					eqend
6476   F9A2~            					eqend
6476   F9A2             
6476   F9A2 26 F9       
6476   F9A4             
6476   F9A4~            					eqend
6476   F9A4~            					eqend
6476   F9A4             
6477   F9A4             				endif
6477   F9A4             
6477   F9A4             
6477   F9A4             
6477   F9A4             
6477   F9A4             
6477   F9A4~            				endif
6477   F9A4~            				endif
6477   F9A4             
6477   F9A4~            				endif
6477   F9A4~            				endif
6477   F9A4             
6477   F99C             
6477   F99C 07          
6477   F99D             
6477   F99D             
6477   F99D~            				endif
6477   F99D~            				endif
6477   F99D~            				endif
6477   F99D             
6477   F9A4             
6477   F9A4~            				endif
6477   F9A4~            				endif
6477   F9A4             
6478   F9A4 08          				inx	
6479   F9A5 4A          				deca	
6480   F9A6 85 08       				bita	#$08
6481   F9A8             			eqend
6481   F9A8             
6481   F9A8             
6481   F9A8~            			eqend
6481   F9A8~            			eqend
6481   F9A8~            			eqend
6481   F9A8             
6481   F9A8 26 EF       
6481   F9AA             
6481   F9AA~            			eqend
6481   F9AA~            			eqend
6481   F9AA             
6482   F9AA 39          			rts	
6483   F9AB             
6484   F9AB             ;*********************************************************************
6485   F9AB             ;* Main Outhole Routine: The outhole switch will jump here on closure
6486   F9AB             ;*********************************************************************			
6487   F9AB 8D E7       outhole_main	bsr	dump_score_queue			
6488   F9AD BD F3 AB    			jsr	macro_start				;Start Executing Macros
6489   F9B0             			
6490   F9B0 71          			.db $71          			;Delay 1
6491   F9B1 5AFE0101FA  			.db $5A,$FE,$01,$01,$FA 	;Branch if Priority #01 to $F9B0
6492   F9B6 55 0A 00    			.db $55,$0A,$00  			;Reset Threads Based on Priority #0A	
6493   F9B9             			CPUX_ 				;Resume CPU Execution
6493   F9B9 04          
6494   F9BA             
6495   F9BA FE E0 BD    			ldx  	gr_outhole_hook_ptr		;Game ROM: Pointer
6496   F9BD AD 00       			jsr  	$00,X  				;JSR to GameROM
6497   F9BF 7F 00 D6    			clr  	flag_timer_bip			;Ball in Play Flag (Stop Timer)
6498   F9C2 D6 CD       			ldab  player_up     			;Current Player Up (0-3)
6499   F9C4 8D 05       			bsr  	saveplayertobuffer    		;Save Player Data to Buffer
6500   F9C6 8D 1E       			bsr  	balladjust				;Do Outhole Processing (EB, Bonus Ball)
6501   F9C8 7E F8 D2    			jmp  	init_player_up			;Init New Player Up
6502   F9CB             
6503   F9CB             ;*********************************************************************
6504   F9CB             ;* Save Player Data: This will save lamp and game specific data to   
6505   F9CB             ;*                   the holding area so information can carrry from 
6506   F9CB             ;*                   ball to ball.            
6507   F9CB             ;*********************************************************************
6508   F9CB             saveplayertobuffer	
6509   F9CB BD F8 BC    			jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
6510   F9CE DF 9A       			stx	temp1
6511   F9D0 CE 00 10    			ldx	#lampbuffer0
6512   F9D3 C6 0C       			ldab	#$0C
6513   F9D5 8D 0C       			bsr	to_copyblock			;Save current lamp settings
6514   F9D7 CE 00 30    			ldx	#lampflashflag
6515   F9DA C6 08       			ldab	#$08
6516   F9DC 8D 05       			bsr	to_copyblock			;Save Flashing lamps too!
6517   F9DE CE 00 02    			ldx	#$0002
6518   F9E1 C6 06       			ldab	#$06
6519   F9E3 7E EF BC    to_copyblock	jmp	copyblock				;Finally, save player game data.
6520   F9E6             
6521   F9E6             ;*********************************************************************
6522   F9E6             ;* Ball Update: This will increment to next player if there is one   
6523   F9E6             ;*              or will increment to next ball. If we are on the last
6524   F9E6             ;*              ball then it jumps to the gameover handler.
6525   F9E6             ;*********************************************************************
6526   F9E6 96 CA       balladjust		ldaa	flag_bonusball			;Check the Bonus Ball Flag (00=free balls)
6527   F9E8             			ifne
6527   F9E8             
6527   F9E8 27 FE       
6528   F9EA CE 01 2A    				ldx	#aud_totalballs			;AUD: Total Balls Played
6529   F9ED BD F7 7F    				jsr	ptrx_plus_1				;Add 1 to data at X
6530   F9F0 96 D0       				ldaa	num_eb				;Number of Extra Balls Remaining
6531   F9F2             				ifeq
6531   F9F2             
6531   F9F2 26 FE       
6532   F9F4 96 CD       					ldaa	player_up				;Current Player Up (0-3)
6533   F9F6 91 CC       					cmpa	num_players				;Number of Players Playing
6534   F9F8 4C          					inca	
6535   F9F9             					ifcc
6535   F9F9             
6535   F9F9 25 FE       
6536   F9FB B6 01 94    						ldaa	adj_numberofballs+1		;ADJ: LSD Balls per game
6537   F9FE 98 58       						eora	mbip_b0
6538   FA00 84 0F       						anda	#$0F
6539   FA02 27 1A       						beq	gameover				;End of Game
6540   FA04 7C 00 58    						inc	mbip_b0				;Increment Ball #
6541   FA07 4F          						clra	
6542   FA08             					endif
6542   FA08             
6542   FA08             
6542   FA08             
6542   FA08             
6542   FA08             
6542   FA08~            					endif
6542   FA08~            					endif
6542   FA08             
6542   FA08~            					endif
6542   FA08~            					endif
6542   FA08             
6542   F9FA             
6542   F9FA 0D          
6542   F9FB             
6542   F9FB             
6542   F9FB~            					endif
6542   F9FB~            					endif
6542   F9FB~            					endif
6542   F9FB             
6542   FA08             
6542   FA08~            					endif
6542   FA08~            					endif
6542   FA08             
6543   FA08 97 CD       					staa	player_up				;Current Player Up (0-3)
6544   FA0A             				endif
6544   FA0A             
6544   FA0A             
6544   FA0A             
6544   FA0A             
6544   FA0A             
6544   FA0A~            				endif
6544   FA0A~            				endif
6544   FA0A             
6544   FA0A~            				endif
6544   FA0A~            				endif
6544   FA0A             
6544   F9F3             
6544   F9F3 16          
6544   F9F4             
6544   F9F4             
6544   F9F4~            				endif
6544   F9F4~            				endif
6544   F9F4~            				endif
6544   F9F4             
6544   FA0A             
6544   FA0A~            				endif
6544   FA0A~            				endif
6544   FA0A             
6545   FA0A             			endif
6545   FA0A             
6545   FA0A             
6545   FA0A             
6545   FA0A             
6545   FA0A             
6545   FA0A~            			endif
6545   FA0A~            			endif
6545   FA0A             
6545   FA0A~            			endif
6545   FA0A~            			endif
6545   FA0A             
6545   F9E9             
6545   F9E9 20          
6545   F9EA             
6545   F9EA             
6545   F9EA~            			endif
6545   F9EA~            			endif
6545   F9EA~            			endif
6545   F9EA             
6545   FA0A             
6545   FA0A~            			endif
6545   FA0A~            			endif
6545   FA0A             
6546   FA0A 39          			rts	
6547   FA0B             
6548   FA0B CE 00 48    show_hstd		ldx	#score_p1_b1				;Score Buffer 1 Base Index
6549   FA0E DF 9A       			stx	temp1
6550   FA10 86 04       			ldaa	#$04
6551   FA12             			begin
6551   FA12             
6552   FA12 C6 04       				ldab	#$04
6553   FA14 CE 01 66    				ldx	#aud_currenthstd				;CMOS: Current HSTD
6554   FA17 BD FF D1    				jsr	block_copy					;Copy Block from X -> temp1, Length = B
6555   FA1A 4A          				deca
6556   FA1B             			eqend
6556   FA1B             
6556   FA1B             
6556   FA1B~            			eqend
6556   FA1B~            			eqend
6556   FA1B~            			eqend
6556   FA1B             
6556   FA1B 26 F5       
6556   FA1D             
6556   FA1D~            			eqend
6556   FA1D~            			eqend
6556   FA1D             
6557   FA1D 39          			rts
6558   FA1E             
6559   FA1E             ;*********************************************************************
6560   FA1E             ;* Game Over Handler: This will do the basic events run at gameover.
6561   FA1E             ;*                    CheckHSTD and Match.
6562   FA1E             ;*********************************************************************				
6563   FA1E BD E0 AF    gameover		jsr	gr_gameover_event
6564   FA21 CE 00 30    			ldx	#lampflashflag
6565   FA24 C6 08       			ldab	#$08
6566   FA26 BD F8 94    			jsr	clear_range				;Clear RAM $30-37 (Lamp Inverts)
6567   FA29 8D 67       			bsr	check_hstd				;Check HSTD
6568   FA2B BD FB 39    			jsr	do_match				;Match Routine
6569   FA2E B6 E0 5D    			ldaa	gr_gameoversound			;Game ROM: Game Over Sound
6570   FA31 BD EC FC    			jsr	isnd_once				;Play Sound Index(A) Once
6571   FA34 B6 E0 65    powerup_init	ldaa	gr_gameover_lamp			;Game ROM: Game Over Lamp Location
6572   FA37 F6 E0 64    			ldab	gr_bip_lamp				;Game ROM: Ball in Play Lamp Location
6573   FA3A BD F3 AB    			jsr	macro_start				;Start Macro Execution
6574   FA3D             			
6575   FA3D             			SOL_($F8)				;Turn Off Solenoid: Flippers Disabled
6575   FA3D 31 F8       
6576   FA3F 17 00       			.db $17,$00 			;Flash Lamp: Lamp Locatation at RAM $00
6577   FA41 15 01       			.db $15,$01 			;Turn off Lamp: Lamp Location is at RAM $01
6578   FA43             			CPUX_ 				;Resume CPU execution
6578   FA43 04          
6579   FA44             
6580   FA44 7C 00 C9    set_gameover	inc	flag_gameover			;Set Game Over
6581   FA47 FE E0 67    			ldx	gr_gameoverthread_ptr		;Game ROM: Init Pointer
6582   FA4A BD EA C4    			jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
6583   FA4D CE 01 81    			ldx	#adj_backuphstd			;CMOS: Backup HSTD
6584   FA50 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6585   FA53 26 03       			bne	show_all_scores			;If there is a HSTD, Show it now.
6586   FA55 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
6587   FA58             			
6588   FA58             show_all_scores	begin
6588   FA58             
6589   FA58 4F          				clra
6590   FA59 BD F8 A4    				jsr	store_display_mask		;A -> Display Buffer Toggle )
6591   FA5C B6 E0 62    				ldaa	gr_hs_lamp				;Game ROM: High Score Lamp Location
6592   FA5F BD F1 5B    				jsr	lamp_off				;Turn off Lamp A (encoded):
6593   FA62 BD EA 2F    				jsr	addthread				;Delay Thread
6594   FA65 90          				.db	$90
6595   FA66 8D A3       				bsr  	show_hstd   			;Puts HSTD in All Player Displays(Buffer 1) 
6596   FA68 D6 60       				ldab  comma_flags
6597   FA6A 43          				coma 
6598   FA6B 7D 00 48    				tst  	score_p1_b1
6599   FA6E             				ifeq
6599   FA6E             
6599   FA6E 26 FE       
6600   FA70 97 48       					staa  score_p1_b1
6601   FA72 97 4C       					staa  score_p2_b1
6602   FA74 97 50       					staa  score_p3_b1
6603   FA76 97 54       					staa  score_p4_b1
6604   FA78 86 33       					ldaa  #$33
6605   FA7A             				endif
6605   FA7A             
6605   FA7A             
6605   FA7A             
6605   FA7A             
6605   FA7A             
6605   FA7A~            				endif
6605   FA7A~            				endif
6605   FA7A             
6605   FA7A~            				endif
6605   FA7A~            				endif
6605   FA7A             
6605   FA6F             
6605   FA6F 0A          
6605   FA70             
6605   FA70             
6605   FA70~            				endif
6605   FA70~            				endif
6605   FA70~            				endif
6605   FA70             
6605   FA7A             
6605   FA7A~            				endif
6605   FA7A~            				endif
6605   FA7A             
6606   FA7A 97 60       				staa 	comma_flags
6607   FA7C 86 7F       				ldaa 	#$7F
6608   FA7E BD F8 A4    				jsr  	store_display_mask				
6609   FA81 B6 E0 62    				ldaa 	gr_hs_lamp				;Game ROM: High Score Lamp Location
6610   FA84 BD F1 69    				jsr  	lamp_flash				;Flash Lamp A(encoded)
6611   FA87 BD EA 2F    				jsr  	addthread   			;Delay Thread
6612   FA8A 70          				.db 	$70
6613   FA8B BD E0 B1    				jsr	gr_hstdtoggle_event		;Check the hook
6614   FA8E D7 60       				stab  comma_flags
6615   FA90             			loopend
6615   FA90             
6615   FA90             
6615   FA90~            			loopend
6615   FA90~            			loopend
6615   FA90~            			loopend
6615   FA90             
6615   FA90 20 C6       
6615   FA92             
6615   FA92~            			loopend
6615   FA92~            			loopend
6615   FA92             
6616   FA92             
6617   FA92             ;************************************************************************
6618   FA92             ;* High Score Check Routine: Will iterate through each player to see if
6619   FA92             ;*                           they beat the high score.
6620   FA92             ;************************************************************************
6621   FA92 CE 01 81    check_hstd		ldx	#adj_backuphstd			;CMOS: Backup HSTD
6622   FA95 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6623   FA98             			ifne						;No award if backup HSTD is 0,000,000
6623   FA98             
6623   FA98 27 FE       
6624   FA9A 7F 00 A1    				clr	sys_temp2
6625   FA9D C6 04       				ldab	#$04
6626   FA9F D7 A0       				stab	sys_temp1
6627   FAA1 CE 00 35    				ldx	#score_p1_b0-3			;Start High and work down low on the digits
6628   FAA4 DF A4       				stx	sys_temp5
6629   FAA6             				begin
6629   FAA6             
6630   FAA6 C6 04       					ldab	#$04
6631   FAA8 D7 A8       					stab	sys_temp_w3				;Number of score Bytes Per Player
6632   FAAA CE 01 66    					ldx	#aud_currenthstd			;CMOS: Current HSTD
6633   FAAD             					begin
6633   FAAD             
6634   FAAD BD EF 63    						jsr	cmosinc_b				;CMOS,X++ -> B
6635   FAB0 DF A6       						stx	sys_temp_w2
6636   FAB2 DE A4       						ldx	sys_temp5
6637   FAB4 BD EC 86    						jsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
6638   FAB7 11          						cba	
6639   FAB8 22 3B       						bhi	update_hstd				;HSTD beat by this digit, adjust HSTD so we dont have multiple awards by each player beating HSTD.
6640   FABA 26 57       						bne	hstd_adddig				;$A4=$A4+$A8
6641   FABC 08          						inx						;Next Digit
6642   FABD DF A4       						stx	sys_temp5				;Store it
6643   FABF DE A6       						ldx	sys_temp_w2				;Next HSDT Digit (pointer)
6644   FAC1 7A 00 A8    						dec	sys_temp_w3				;Goto Next Set of Digits
6645   FAC4             					eqend						;Loop for all (4)2 digits
6645   FAC4             
6645   FAC4             
6645   FAC4~            					eqend						;Loop for all (4)2 digits
6645   FAC4~            					eqend						;Loop for all (4)2 digits
6645   FAC4~            					eqend						;Loop for all (4)2 digits
6645   FAC4             
6645   FAC4 26 E7       
6645   FAC6             
6645   FAC6~            					eqend						;Loop for all (4)2 digits
6645   FAC6~            					eqend						;Loop for all (4)2 digits
6645   FAC6             
6646   FAC6 7A 00 A0    hstd_nextp			dec	sys_temp1				;Goto Next Player
6647   FAC9             				eqend						;Loop for all 4 Players
6647   FAC9             
6647   FAC9             
6647   FAC9~            				eqend						;Loop for all 4 Players
6647   FAC9~            				eqend						;Loop for all 4 Players
6647   FAC9~            				eqend						;Loop for all 4 Players
6647   FAC9             
6647   FAC9 26 DB       
6647   FACB             
6647   FACB~            				eqend						;Loop for all 4 Players
6647   FACB~            				eqend						;Loop for all 4 Players
6647   FACB             
6648   FACB 96 A1       				ldaa	sys_temp2
6649   FACD             				ifne
6649   FACD             
6649   FACD 27 FE       
6650   FACF B6 E0 5C    					ldaa	gr_highscoresound			;Game ROM Data: High Score Sound
6651   FAD2 BD EC FC    					jsr	isnd_once				;Play Sound Index(A) Once
6652   FAD5 8D 59       					bsr	send_sound					;time delay
6653   FAD7 CE 01 A7    set_hstd				ldx	#adj_hstdcredits			;Adjustment: HSTD Award
6654   FADA BD EF 53    					jsr	cmosinc_a				;CMOS,X++ -> A
6655   FADD CE 01 4E    					ldx	#aud_hstdcredits			;Audit: HSTD Credits Awarded
6656   FAE0 BD F7 84    					jsr	ptrx_plus_a				;Add A to data at X:
6657   FAE3 BD F6 FE    					jsr	addcredits				;Add Credits if Possible
6658   FAE6 B6 01 66    					ldaa	aud_currenthstd			;HSTD High Digit
6659   FAE9 84 0F       					anda	#$0F
6660   FAEB             					ifne					;Branch if Score is under 10 million
6660   FAEB             
6660   FAEB 27 FE       
6661   FAED 86 99       						ldaa	#$99
6662   FAEF 8D 33       						bsr	fill_hstd_digits			;Set HSTD to 9,999,999
6663   FAF1 7F 01 66    						clr	aud_currenthstd			;Clear 10 Million Digit
6664   FAF4             					endif
6664   FAF4             
6664   FAF4             
6664   FAF4             
6664   FAF4             
6664   FAF4             
6664   FAF4~            					endif
6664   FAF4~            					endif
6664   FAF4             
6664   FAF4~            					endif
6664   FAF4~            					endif
6664   FAF4             
6664   FAEC             
6664   FAEC 07          
6664   FAED             
6664   FAED             
6664   FAED~            					endif
6664   FAED~            					endif
6664   FAED~            					endif
6664   FAED             
6664   FAF4             
6664   FAF4~            					endif
6664   FAF4~            					endif
6664   FAF4             
6665   FAF4             				endif
6665   FAF4             
6665   FAF4             
6665   FAF4             
6665   FAF4             
6665   FAF4             
6665   FAF4~            				endif
6665   FAF4~            				endif
6665   FAF4             
6665   FAF4~            				endif
6665   FAF4~            				endif
6665   FAF4             
6665   FACE             
6665   FACE 25          
6665   FACF             
6665   FACF             
6665   FACF~            				endif
6665   FACF~            				endif
6665   FACF~            				endif
6665   FACF             
6665   FAF4             
6665   FAF4~            				endif
6665   FAF4~            				endif
6665   FAF4             
6666   FAF4             			endif
6666   FAF4             
6666   FAF4             
6666   FAF4             
6666   FAF4             
6666   FAF4             
6666   FAF4~            			endif
6666   FAF4~            			endif
6666   FAF4             
6666   FAF4~            			endif
6666   FAF4~            			endif
6666   FAF4             
6666   FA99             
6666   FA99 5A          
6666   FA9A             
6666   FA9A             
6666   FA9A~            			endif
6666   FA9A~            			endif
6666   FA9A~            			endif
6666   FA9A             
6666   FAF4             
6666   FAF4~            			endif
6666   FAF4~            			endif
6666   FAF4             
6667   FAF4 39          			rts	
6668   FAF5             
6669   FAF5 CE 01 66    update_hstd		ldx	#aud_currenthstd			;Current HSTD
6670   FAF8 7C 00 A1    			inc	sys_temp2
6671   FAFB DF 9A       			stx	temp1
6672   FAFD 8D 18       			bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
6673   FAFF C6 04       			ldab	#$04
6674   FB01 09          			dex	
6675   FB02 BD EF E4    			jsr	copyblock2				;Transfer Data Block at X to temp1, Length B
6676   FB05 7C 01 66    			inc	aud_currenthstd			;Adjust HSTD to new player score
6677   FB08 B6 01 67    			ldaa	aud_currenthstd+1
6678   FB0B 4C          			inca	
6679   FB0C 84 0F       			anda	#$0F
6680   FB0E 26 B6       			bne	hstd_nextp				;Go Check Next Player Score
6681   FB10 7F 01 67    			clr	aud_currenthstd+1
6682   FB13 8D 02       hstd_adddig		bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
6683   FB15 20 AF       			bra	hstd_nextp				;Go Check Next Player Score
6684   FB17             			
6685   FB17             ;*************************************************
6686   FB17             ;* Add LSB of sys_temp_w3 to sys_temp5
6687   FB17             ;*************************************************
6688   FB17 DE A4       wordplusbyte	ldx	sys_temp5
6689   FB19 96 A8       			ldaa	sys_temp_w3
6690   FB1B 7F 00 A8    			clr	sys_temp_w3
6691   FB1E BD EE FF    			jsr	xplusa				;X = X + A
6692   FB21 DF A4       			stx	sys_temp5
6693   FB23 39          to_rts1		rts	
6694   FB24             
6695   FB24             ;**************************************************
6696   FB24             ;* This routine will fill the value of A into all
6697   FB24             ;* high score digit data.
6698   FB24             ;**************************************************
6699   FB24 CE 01 66    fill_hstd_digits	ldx	#aud_currenthstd			;CMOS: Current HSTD
6700   FB27 C6 04       			ldab	#$04
6701   FB29             			begin
6701   FB29             
6702   FB29 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++)
6703   FB2C 5A          				decb	
6704   FB2D             			eqend
6704   FB2D             
6704   FB2D             
6704   FB2D~            			eqend
6704   FB2D~            			eqend
6704   FB2D~            			eqend
6704   FB2D             
6704   FB2D 26 FA       
6704   FB2F             
6704   FB2F~            			eqend
6704   FB2F~            			eqend
6704   FB2F             
6705   FB2F 39          			rts
6706   FB30             				
6707   FB30             send_sound		begin
6707   FB30             
6708   FB30 BD EA 2F    				jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6709   FB33 02          				.db 	$02
6710   FB34 96 C1       				ldaa  $C1					;Sound Flag?
6711   FB36             		      eqend
6711   FB36             
6711   FB36             
6711   FB36~            		      eqend
6711   FB36~            		      eqend
6711   FB36~            		      eqend
6711   FB36             
6711   FB36 26 F8       
6711   FB38             
6711   FB38~            		      eqend
6711   FB38~            		      eqend
6711   FB38             
6712   FB38 39          		      rts
6713   FB39             
6714   FB39             ;*************************************************************
6715   FB39             ;* Match Routine: Will generate a random number and put in in
6716   FB39             ;*                the match display. Then it will compare each
6717   FB39             ;*                player score too see if we have a match.    
6718   FB39             ;*                If so, it will increment temp1 for each. 
6719   FB39             ;*************************************************************
6720   FB39 B6 01 8C    do_match		ldaa	adj_matchenable+1			;Adjustment: LSD Match 00=on 01=off
6721   FB3C 46          			rora	
6722   FB3D 25 E4       			bcs	to_rts1				;If match is off, get out of here.
6723   FB3F             			begin
6723   FB3F             
6724   FB3F 8D 3F       				bsr	get_random				;Get Random Number??
6725   FB41 48          				asla	
6726   FB42 48          				asla	
6727   FB43 48          				asla	
6728   FB44 48          				asla	
6729   FB45 81 A0       				cmpa	#$A0
6730   FB47             			csend						;If A>= 0xA0 then try again.
6730   FB47             
6730   FB47             
6730   FB47~            			csend						;If A>= 0xA0 then try again.
6730   FB47~            			csend						;If A>= 0xA0 then try again.
6730   FB47~            			csend						;If A>= 0xA0 then try again.
6730   FB47             
6730   FB47 24 F6       
6730   FB49             
6730   FB49~            			csend						;If A>= 0xA0 then try again.
6730   FB49~            			csend						;If A>= 0xA0 then try again.
6730   FB49             
6731   FB49 97 58       			staa	mbip_b0				;Store Match # in Match/BallinPlay
6732   FB4B 7F 00 9A    			clr	temp1
6733   FB4E C6 04       			ldab	#$04
6734   FB50 D7 9B       			stab	temp1+1
6735   FB52 CE 00 38    			ldx	#score_p1_b0			;Player Score Buffers, do each one
6736   FB55             			begin
6736   FB55             
6737   FB55 A1 03       				cmpa	$03,X
6738   FB57             				ifeq
6738   FB57             
6738   FB57 26 FE       
6739   FB59 7C 00 9A    					inc	temp1					;Yes, a Match!
6740   FB5C             				endif
6740   FB5C             
6740   FB5C             
6740   FB5C             
6740   FB5C             
6740   FB5C             
6740   FB5C~            				endif
6740   FB5C~            				endif
6740   FB5C             
6740   FB5C~            				endif
6740   FB5C~            				endif
6740   FB5C             
6740   FB58             
6740   FB58 03          
6740   FB59             
6740   FB59             
6740   FB59~            				endif
6740   FB59~            				endif
6740   FB59~            				endif
6740   FB59             
6740   FB5C             
6740   FB5C~            				endif
6740   FB5C~            				endif
6740   FB5C             
6741   FB5C BD EF 4D    				jsr	xplusb				;X = X + B)
6742   FB5F 7A 00 9B    				dec	temp1+1
6743   FB62             			eqend						;Do it 4 Times.
6743   FB62             
6743   FB62             
6743   FB62~            			eqend						;Do it 4 Times.
6743   FB62~            			eqend						;Do it 4 Times.
6743   FB62~            			eqend						;Do it 4 Times.
6743   FB62             
6743   FB62 26 F1       
6743   FB64             
6743   FB64~            			eqend						;Do it 4 Times.
6743   FB64~            			eqend						;Do it 4 Times.
6743   FB64             
6744   FB64 D6 9A       			ldab	temp1					;Number of Matches
6745   FB66             			ifne						;None, Get outta here.
6745   FB66             
6745   FB66 27 FE       
6746   FB68 B6 E0 5B    				ldaa	gr_matchsound			;Game ROM Data: Match Sound
6747   FB6B BD EC FC    				jsr	isnd_once				;Play Sound Index(A) Once
6748   FB6E 8D C0       				bsr	send_sound
6749   FB70 17          				tba	
6750   FB71 CE 01 1A    				ldx	#aud_matchcredits			;Audit: Match Credits
6751   FB74 BD F7 84    				jsr	ptrx_plus_a				;Add Matches to Audit
6752   FB77 BD F6 FE    				jsr	addcredits				;Add Credits if Possible
6753   FB7A             			endif
6753   FB7A             
6753   FB7A             
6753   FB7A             
6753   FB7A             
6753   FB7A             
6753   FB7A~            			endif
6753   FB7A~            			endif
6753   FB7A             
6753   FB7A~            			endif
6753   FB7A~            			endif
6753   FB7A             
6753   FB67             
6753   FB67 12          
6753   FB68             
6753   FB68             
6753   FB68~            			endif
6753   FB68~            			endif
6753   FB68~            			endif
6753   FB68             
6753   FB7A             
6753   FB7A~            			endif
6753   FB7A~            			endif
6753   FB7A             
6754   FB7A B6 E0 63    			ldaa	gr_match_lamp			;Game ROM: Match Lamp Location
6755   FB7D 7E F1 3C    			jmp	lamp_on				;Turn on Lamp A (encoded):
6756   FB80             
6757   FB80             ;******************************************************
6758   FB80             ;* Get Random: Will pull various system variables and
6759   FB80             ;*             calculate a pseudo-random number.
6760   FB80             ;******************************************************			
6761   FB80 37          get_random		pshb	
6762   FB81 96 D7       			ldaa	randomseed				;This is changed by Switch Closures
6763   FB83 16          			tab	
6764   FB84 56          			rorb	
6765   FB85 56          			rorb	
6766   FB86 97 9A       			staa	temp1					;Use some Temp variables for data
6767   FB88 D8 9A       			eorb	temp1
6768   FB8A 59          			rolb	
6769   FB8B 49          			rola	
6770   FB8C 97 D7       			staa	randomseed
6771   FB8E 9B 89       			adda	irq_counter					;Throw in some switch matrix stuff
6772   FB90 33          			pulb	
6773   FB91 39          to_rts2		rts	
6774   FB92             
6775   FB92             ;********************************************************
6776   FB92             ;* Credit Button Press: 
6777   FB92             ;********************************************************
6778   FB92 CE 01 AB    credit_button	ldx	#adj_max_credits			;CMOS: Max. Credits
6779   FB95 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
6780   FB98 CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
6781   FB9B BD FE 1F    			jsr	cmos_a				;CMOS, X -> A )
6782   FB9E 26 03       			bne	has_credit
6783   FBA0 5D          			tstb						;No credits, check for free play
6784   FBA1             			ifeq						;No Free Play, get outta here.
6784   FBA1             
6784   FBA1 26 FE       
6785   FBA3 D6 C9       has_credit			ldab	flag_gameover			;Has valid credit or freeplay, is Game Over?
6786   FBA5 26 15       				bne	start_new_game			;No, goto Start New Game
6787   FBA7 D6 58       				ldab	mbip_b0				;Ball #
6788   FBA9 C1 F1       				cmpb	#$F1					;First Ball?
6789   FBAB 26 0F       				bne	start_new_game			;Start New Game
6790   FBAD D6 CC       				ldab	num_players				;Current # of Players
6791   FBAF F1 E0 4E    				cmpb	gr_numplayers			;Max # of Players (Game ROM data)
6792   FBB2             				ifcs						;Already 4 players, outta here.
6792   FBB2             
6792   FBB2 24 FE       
6793   FBB4 8D 0B       					bsr	lesscredit				;Subtract a credit
6794   FBB6 BD F8 58    					jsr	add_player				;Add a player.
6795   FBB9             				endif
6795   FBB9             
6795   FBB9             
6795   FBB9             
6795   FBB9             
6795   FBB9             
6795   FBB9~            				endif
6795   FBB9~            				endif
6795   FBB9             
6795   FBB9~            				endif
6795   FBB9~            				endif
6795   FBB9             
6795   FBB3             
6795   FBB3 05          
6795   FBB4             
6795   FBB4             
6795   FBB4~            				endif
6795   FBB4~            				endif
6795   FBB4~            				endif
6795   FBB4             
6795   FBB9             
6795   FBB9~            				endif
6795   FBB9~            				endif
6795   FBB9             
6796   FBB9             			endif
6796   FBB9             
6796   FBB9             
6796   FBB9             
6796   FBB9             
6796   FBB9             
6796   FBB9~            			endif
6796   FBB9~            			endif
6796   FBB9             
6796   FBB9~            			endif
6796   FBB9~            			endif
6796   FBB9             
6796   FBA2             
6796   FBA2 16          
6796   FBA3             
6796   FBA3             
6796   FBA3~            			endif
6796   FBA3~            			endif
6796   FBA3~            			endif
6796   FBA3             
6796   FBB9             
6796   FBB9~            			endif
6796   FBB9~            			endif
6796   FBB9             
6797   FBB9 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
6798   FBBC             
6799   FBBC             ;*********************************************************
6800   FBBC             ;* Resets Games and Starts Anew
6801   FBBC             ;*********************************************************
6802   FBBC 8D 03       start_new_game	bsr	lesscredit				;Subtract a credit
6803   FBBE 7E F8 47    			jmp	do_game_init			;Init Player 1
6804   FBC1             			
6805   FBC1             ;*********************************************************
6806   FBC1             ;* Removes a credit and adjusts coin lockout and credit 
6807   FBC1             ;* lamp appropriately. Also updates audits.
6808   FBC1             ;*
6809   FBC1             ;* 	Current Credits in A.
6810   FBC1             ;*********************************************************
6811   FBC1 4D          lesscredit		tsta	
6812   FBC2             			ifne						;Is it Zero?
6812   FBC2             
6812   FBC2 27 FE       
6813   FBC4 8B 99       				adda	#$99					;Subtract 1 credit
6814   FBC6 19          				daa						;dont' forget to adjust
6815   FBC7 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++)
6816   FBCA 96 5A       				ldaa	cred_b0				;Current Credits
6817   FBCC 8B 99       				adda	#$99					;Subtract 1
6818   FBCE 19          				daa	
6819   FBCF 97 5A       				staa	cred_b0				;Store Credits
6820   FBD1             			endif
6820   FBD1             
6820   FBD1             
6820   FBD1             
6820   FBD1             
6820   FBD1             
6820   FBD1~            			endif
6820   FBD1~            			endif
6820   FBD1             
6820   FBD1~            			endif
6820   FBD1~            			endif
6820   FBD1             
6820   FBC3             
6820   FBC3 0D          
6820   FBC4             
6820   FBC4             
6820   FBC4~            			endif
6820   FBC4~            			endif
6820   FBC4~            			endif
6820   FBC4             
6820   FBD1             
6820   FBD1~            			endif
6820   FBD1~            			endif
6820   FBD1             
6821   FBD1 BD F7 2C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
6822   FBD4 BD F8 29    			jsr	clr_bonus_coins			;Reset Any Bonus Coins... too bad!
6823   FBD7 CE 01 1E    			ldx	#aud_totalcredits			;Audit: Total Credits
6824   FBDA 7E F7 7F    			jmp	ptrx_plus_1				;Add 1 to data at X
6825   FBDD             
6826   FBDD             ;*********************************************************
6827   FBDD             ;* Tilt Contacts
6828   FBDD             ;*********************************************************			
6829   FBDD 7C 00 D3    tilt_warning	inc	num_tilt				;Add 1 Tilt
6830   FBE0 B6 01 92    			ldaa	adj_maxplumbbobtilts+1		;ADJ: LSD Max Plumb Bob Tilts
6831   FBE3 84 0F       			anda	#$0F
6832   FBE5 91 D3       			cmpa	num_tilt				;Current # of Plumb Bob Tilts
6833   FBE7 22 A8       			bhi	to_rts2				;Not enough warnings yet.. Leave now!
6834   FBE9 B6 E0 66    do_tilt		ldaa	gr_tilt_lamp			;Game ROM: Tilt Lamp Location
6835   FBEC 97 C8       			staa	flag_tilt				;Tilt Flag
6836   FBEE BD F3 AB    			jsr	macro_start				;Start Macro Execution-
6837   FBF1             			
6838   FBF1 14 00       			.db $14,$00 		;Turn on Tilt Lamp
6839   FBF3             			REMTHREADS_($0C,$00)	;.db $55,$0C,$00  	;Get Rid of non-tilt threads
6839   FBF3 55 0C 00    
6840   FBF6             			SOL_($F8)			;.db $31,$F8 		;Disable Flippers
6840   FBF6 31 F8       
6841   FBF8             			CPUX_				;Return to Program Execution 
6841   FBF8 04          
6842   FBF9             
6843   FBF9 39          			rts
6844   FBFA             
6845   FBFA             ;***********************************************************
6846   FBFA             ;* Self Test Routines Begin Here, first some data tables
6847   FBFA             ;***********************************************************
6848   FBFA             ;* Define our test entry points
6849   FBFA             ;***********************************************
6850   FBFA FE 43       testdata		.dw st_display
6851   FBFC FE 62       			.dw st_sound
6852   FBFE FE 8D       			.dw st_lamp
6853   FC00 FE CB       			.dw st_solenoid
6854   FC02 FE F0       			.dw st_switch
6855   FC04             
6856   FC04             ;***********************************************
6857   FC04             ;* This table defines which routines
6858   FC04             ;* handel the various adjustment displays.
6859   FC04             ;***********************************************			
6860   FC04 00          testlists		.db $00		;Function 00:    Game Identification
6861   FC05 FD 23       			.dw fn_gameid	;$FD,$23
6862   FC07 01          			.db $01		;Function 01-11: System Audits
6863   FC08 FD 30       			.dw fn_sysaud	;$FD,$30
6864   FC0A 0C          			.db $0C		;Function 12:    Current HSTD
6865   FC0B FD A9       			.dw fn_hstd		;$FD,$A9
6866   FC0D 0D          			.db $0D		;Function 13-17: Backup HSTD and Replays
6867   FC0E FD B1       			.dw fn_replay	;$FD,$B1
6868   FC10 12          			.db $12		;Function 18:    Max Credits
6869   FC11 FE 26       			.dw fn_credit	;$FE,$26
6870   FC13 13          			.db $13		;Function 19:    Pricing Control
6871   FC14 FD EF       			.dw fn_pricec	;$FD,$EF
6872   FC16 14          			.db $14		;Function 20-25: Pricing Settings
6873   FC17 FE 09       			.dw fn_prices	;$FE,$09
6874   FC19 1A          			.db $1A		;Function 26-41: System and Game Adjustments
6875   FC1A FE 33       			.dw fn_adj		;$FE,$33
6876   FC1C 2A          			.db $2A		;Function 42-49: Game Audits
6877   FC1D FD 2E       			.dw fn_gameaud	;$FD,$2E
6878   FC1F 32          			.db $32		;Function 50:    Command Mode
6879   FC20 FE 3E       			.dw fn_command	;$FE,$3E
6880   FC22 33          			.db $33
6881   FC23             
6882   FC23             ;************************************************
6883   FC23             ;* Main Self-Test Routine
6884   FC23             ;************************************************
6885   FC23             test_number =	$000e			;RAM Location to store where we are...
6886   FC23             test_lamptimer =	$000f			;Timer for Lamp test loop
6887   FC23             
6888   FC23             
6889   FC23 8D 45       selftest_entry	bsr	check_adv				;Advance: - if Triggered
6890   FC25             			ifpl
6890   FC25             
6890   FC25 2B FE       
6891   FC27 7E EA 67    				jmp	killthread				;Kill Current Thread
6892   FC2A             			endif
6892   FC2A             
6892   FC2A             
6892   FC2A             
6892   FC2A             
6892   FC2A             
6892   FC2A~            			endif
6892   FC2A~            			endif
6892   FC2A             
6892   FC2A~            			endif
6892   FC2A~            			endif
6892   FC2A             
6892   FC26             
6892   FC26 03          
6892   FC27             
6892   FC27             
6892   FC27~            			endif
6892   FC27~            			endif
6892   FC27~            			endif
6892   FC27             
6892   FC2A             
6892   FC2A~            			endif
6892   FC2A~            			endif
6892   FC2A             
6893   FC2A 8D 54       			bsr	st_init				;Set up self test
6894   FC2C 8D 47       			bsr	check_aumd				;AUMD: + if Manual-Down
6895   FC2E 2B 75       			bmi	do_audadj				;Auto-Up, go do audits and adjustments instead
6896   FC30 4F          			clra	
6897   FC31 7F 00 0E    st_diagnostics	clr	test_number				;Start at 0
6898   FC34 CE FB FA    			ldx	#testdata				;Macro Pointer
6899   FC37 36          			psha	
6900   FC38 BD F4 8E    			jsr	gettabledata_b			;Load up the pointer to our test routine in X
6901   FC3B 32          			pula	
6902   FC3C 16          			tab	
6903   FC3D 5A          			decb						;Adjust back down to where it was before table lookup incremented it
6904   FC3E D7 5A       			stab	cred_b0				;Show the test number in display
6905   FC40 BD EA C4    			jsr	newthread_06			;Start a new thread with our test routine
6906   FC43 BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6907   FC46 10          			.db	$10	
6908   FC47             			;This is the Advance button handler, it runs as a seperate thread to the test routine
6909   FC47             			begin
6909   FC47             
6910   FC47             				begin
6910   FC47             
6911   FC47 8D 21       					bsr	check_adv			;Advance: Stay here forever until pressed			   
6912   FC49             				miend
6912   FC49             
6912   FC49             
6912   FC49~            				miend
6912   FC49~            				miend
6912   FC49~            				miend
6912   FC49             
6912   FC49 2A FC       
6912   FC4B             
6912   FC4B~            				miend
6912   FC4B~            				miend
6912   FC4B             
6913   FC4B 8D 28       				bsr	check_aumd				;AUMD: + if Manual-Down
6914   FC4D 2B 45       				bmi	st_nexttest				;Do next test...
6915   FC4F D7 0E       				stab	test_number
6916   FC51             				begin
6916   FC51             
6917   FC51 8D 17       					bsr	check_adv			;Advance: Stay here forever until released
6918   FC53             				plend
6918   FC53             
6918   FC53             
6918   FC53~            				plend
6918   FC53~            				plend
6918   FC53~            				plend
6918   FC53             
6918   FC53 2B FC       
6918   FC55             
6918   FC55~            				plend
6918   FC55~            				plend
6918   FC55             
6919   FC55             			loopend
6919   FC55             
6919   FC55             
6919   FC55~            			loopend
6919   FC55~            			loopend
6919   FC55~            			loopend
6919   FC55             
6919   FC55 20 F0       
6919   FC57             
6919   FC57~            			loopend
6919   FC57~            			loopend
6919   FC57             
6920   FC57             
6921   FC57             ;*******************************************************
6922   FC57             ;*
6923   FC57             ;*******************************************************			
6924   FC57 36          do_aumd		psha	
6925   FC58 96 CB       			ldaa	flags_selftest
6926   FC5A             			ifpl
6926   FC5A             
6926   FC5A 2B FE       
6927   FC5C 8D 17       				bsr	check_aumd					;AUMD: + if Manual-Down
6928   FC5E             				ifpl
6928   FC5E             
6928   FC5E 2B FE       
6929   FC60 96 0E       					ldaa	test_number
6930   FC62             					ifne
6930   FC62             
6930   FC62 27 FE       
6931   FC64 4F          						clra	
6932   FC65 97 0E       						staa	test_number
6933   FC67 4A          						deca	
6934   FC68             					endif
6934   FC68             
6934   FC68             
6934   FC68             
6934   FC68             
6934   FC68             
6934   FC68~            					endif
6934   FC68~            					endif
6934   FC68             
6934   FC68~            					endif
6934   FC68~            					endif
6934   FC68             
6934   FC63             
6934   FC63 04          
6934   FC64             
6934   FC64             
6934   FC64~            					endif
6934   FC64~            					endif
6934   FC64~            					endif
6934   FC64             
6934   FC68             
6934   FC68~            					endif
6934   FC68~            					endif
6934   FC68             
6935   FC68             				endif
6935   FC68             
6935   FC68             
6935   FC68             
6935   FC68             
6935   FC68             
6935   FC68~            				endif
6935   FC68~            				endif
6935   FC68             
6935   FC68~            				endif
6935   FC68~            				endif
6935   FC68             
6935   FC5F             
6935   FC5F 08          
6935   FC60             
6935   FC60             
6935   FC60~            				endif
6935   FC60~            				endif
6935   FC60~            				endif
6935   FC60             
6935   FC68             
6935   FC68~            				endif
6935   FC68~            				endif
6935   FC68             
6936   FC68             			endif
6936   FC68             
6936   FC68             
6936   FC68             
6936   FC68             
6936   FC68             
6936   FC68~            			endif
6936   FC68~            			endif
6936   FC68             
6936   FC68~            			endif
6936   FC68~            			endif
6936   FC68             
6936   FC5B             
6936   FC5B 0C          
6936   FC5C             
6936   FC5C             
6936   FC5C~            			endif
6936   FC5C~            			endif
6936   FC5C~            			endif
6936   FC5C             
6936   FC68             
6936   FC68~            			endif
6936   FC68~            			endif
6936   FC68             
6937   FC68 32          			pula	
6938   FC69 39          			rts
6939   FC6A             
6940   FC6A             ;*********************************************************
6941   FC6A             ;* This will check the state of the advance switch and
6942   FC6A             ;* return the control register results
6943   FC6A             ;*********************************************************				
6944   FC6A F6 28 00    check_adv		ldab	pia_disp_digit_data		;Dummy read to clear previous results
6945   FC6D BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6946   FC70 02          			.db	$02
6947   FC71 F6 28 01    			ldab	pia_disp_digit_ctrl
6948   FC74 39          			rts
6949   FC75             
6950   FC75             ;*********************************************************
6951   FC75             ;* This routine will check the state of the Up/Down toggle
6952   FC75             ;* switch. First do a dummy read to clear previous results
6953   FC75             ;*********************************************************
6954   FC75 F6 28 02    check_aumd		ldab	pia_disp_seg_data			;Dummy read to clear previous results
6955   FC78 BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6956   FC7B 02          			.db	$02
6957   FC7C F6 28 03    			ldab	pia_disp_seg_ctrl
6958   FC7F 39          			rts
6959   FC80             
6960   FC80             ;**************************************************
6961   FC80             ;* Self Test Initializations:
6962   FC80             ;*	Remove all VM Threads
6963   FC80             ;*	Disable Solenoids
6964   FC80             ;*	Clear RAM
6965   FC80             ;**************************************************
6966   FC80 5F          st_init		clrb	
6967   FC81 BD EA FB    			jsr	kill_threads			;Remove All VM Threads 
6968   FC84 86 18       			ldaa	#$18
6969   FC86 BD EB 23    			jsr	solbuf				;Turn Off Solenoid 24 (Flipper Enable)
6970   FC89 7C 00 CB    			inc	flags_selftest			;Set Test Flag
6971   FC8C CE 00 00    			ldx	#ram_base
6972   FC8F C6 89       			ldab	#$89
6973   FC91 7E F8 94    to_clear_range	jmp	clear_range				;Clear RAM from $0000-0089
6974   FC94             
6975   FC94             ;**************************************************
6976   FC94             ;* Next Test: Will advance diagnostics to next
6977   FC94             ;*            test in sequence, if done, then fall
6978   FC94             ;*            through to audits/adjustments
6979   FC94             ;**************************************************
6980   FC94 C6 28       st_nexttest		ldab	#$28
6981   FC96 CE 00 10    			ldx	#lampbuffer0
6982   FC99 8D F6       			bsr	to_clear_range			;Clear RAM from $0010-0038
6983   FC9B BD EA FB    			jsr	kill_threads			;Remove all VM Threads
6984   FC9E 4C          			inca	
6985   FC9F 81 05       			cmpa	#$05					;are we done yet?
6986   FCA1 26 8E       			bne	st_diagnostics			;Goto back to Self-Test Diagnostics routine
6987   FCA3             			;Fall through if finished
6988   FCA3             			
6989   FCA3             ;**************************************************
6990   FCA3             ;* Main Audit/Adjustments Process Entry
6991   FCA3             ;**************************************************			
6992   FCA3 8D DB       to_audadj		bsr	st_init				;Clear all RAM and set up self testing
6993   FCA5 7F 00 58    do_audadj		clr	mbip_b0
6994   FCA8 86 04       			ldaa	#$04					;Show test 04 by default
6995   FCAA 97 5A       			staa	cred_b0
6996   FCAC BD EA 2F    			jsr	addthread				;Wait $10
6997   FCAF 10          			.db 	$10	
6998   FCB0             			begin
6998   FCB0             
6999   FCB0 BD F8 9A    				jsr	clear_displays			;Blank all Player Displays (buffer 0)
7000   FCB3 8D 36       				bsr	b_129					;#08 -> $0F
7001   FCB5 D6 58       				ldab	mbip_b0
7002   FCB7 BD F8 34    				jsr	dec2hex				;Convert Decimal(B) to Hex(B)
7003   FCBA CE FC 01    				ldx	#testlists-3
7004   FCBD             				begin
7004   FCBD             
7005   FCBD 08          					inx	
7006   FCBE 08          					inx	
7007   FCBF 08          					inx	
7008   FCC0 E1 03       					cmpb	$03,X					;Are we at next handler?
7009   FCC2             				csend
7009   FCC2             
7009   FCC2             
7009   FCC2~            				csend
7009   FCC2~            				csend
7009   FCC2~            				csend
7009   FCC2             
7009   FCC2 24 F9       
7009   FCC4             
7009   FCC4~            				csend
7009   FCC4~            				csend
7009   FCC4             
7010   FCC4 EE 01       				ldx	$01,X					;Load the routine
7011   FCC6 AD 00       				jsr	$00,X					;Do the routine to load up data into displays
7012   FCC8             				begin
7012   FCC8             
7013   FCC8 BD FC 6A    					jsr	check_adv			;Advance: - if Triggered
7014   FCCB             				miend
7014   FCCB             
7014   FCCB             
7014   FCCB~            				miend
7014   FCCB~            				miend
7014   FCCB~            				miend
7014   FCCB             
7014   FCCB 2A FB       
7014   FCCD             
7014   FCCD~            				miend
7014   FCCD~            				miend
7014   FCCD             
7015   FCCD 8D 1C       b_133				bsr	b_129					;#08 -> $0F
7016   FCCF BD FC 6A    show_func			jsr	check_adv				;Advance: - if Triggered
7017   FCD2             			miend
7017   FCD2             
7017   FCD2             
7017   FCD2~            			miend
7017   FCD2~            			miend
7017   FCD2~            			miend
7017   FCD2             
7017   FCD2 2A DC       
7017   FCD4             
7017   FCD4~            			miend
7017   FCD4~            			miend
7017   FCD4             
7018   FCD4 8D 1A       			bsr	b_12D
7019   FCD6 26 F7       			bne	show_func				;Look at the buttons again
7020   FCD8 8D 31       			bsr	adjust_func				;Add or subtract the function number?
7021   FCDA 9B 58       			adda	mbip_b0				;Change it
7022   FCDC 19          			daa	
7023   FCDD 81 51       			cmpa	#$51					;Are we now on audit 51??
7024   FCDF 27 35       			beq	st_reset				;Yes, Blank displays, reboot game
7025   FCE1 81 99       			cmpa	#$99					;Going down, are we minus now??
7026   FCE3             			ifeq
7026   FCE3             
7026   FCE3 26 FE       
7027   FCE5 86 50       				ldaa	#$50					;Yes, wrap around to 50
7028   FCE7             			endif
7028   FCE7             
7028   FCE7             
7028   FCE7             
7028   FCE7             
7028   FCE7             
7028   FCE7~            			endif
7028   FCE7~            			endif
7028   FCE7             
7028   FCE7~            			endif
7028   FCE7~            			endif
7028   FCE7             
7028   FCE4             
7028   FCE4 02          
7028   FCE5             
7028   FCE5             
7028   FCE5~            			endif
7028   FCE5~            			endif
7028   FCE5~            			endif
7028   FCE5             
7028   FCE7             
7028   FCE7~            			endif
7028   FCE7~            			endif
7028   FCE7             
7029   FCE7 97 58       			staa	mbip_b0				;Store new value
7030   FCE9 20 E4       			bra	show_func				;Look at the buttons again
7031   FCEB             			
7032   FCEB 86 08       b_129			ldaa	#$08
7033   FCED 97 0F       			staa	$000F
7034   FCEF 39          			rts	
7035   FCF0             			
7036   FCF0 96 0F       b_12D			ldaa	$000F
7037   FCF2             			ifne
7037   FCF2             
7037   FCF2 27 FE       
7038   FCF4 7A 00 0F    				dec	$000F
7039   FCF7 81 08       				cmpa	#$08
7040   FCF9             			endif
7040   FCF9             
7040   FCF9             
7040   FCF9             
7040   FCF9             
7040   FCF9             
7040   FCF9~            			endif
7040   FCF9~            			endif
7040   FCF9             
7040   FCF9~            			endif
7040   FCF9~            			endif
7040   FCF9             
7040   FCF3             
7040   FCF3 05          
7040   FCF4             
7040   FCF4             
7040   FCF4~            			endif
7040   FCF4~            			endif
7040   FCF4~            			endif
7040   FCF4             
7040   FCF9             
7040   FCF9~            			endif
7040   FCF9~            			endif
7040   FCF9             
7041   FCF9 39          			rts
7042   FCFA             	
7043   FCFA             			begin
7043   FCFA             
7044   FCFA 8D EF       				bsr	b_129					;#08 -> $0F
7045   FCFC BD FC 6A    b_135				jsr	check_adv				;Advance: - if Triggered
7046   FCFF 2B CC       				bmi	b_133
7047   FD01 96 69       				ldaa	switch_masked
7048   FD03 85 04       				bita	#$04
7049   FD05             			neend
7049   FD05             
7049   FD05             
7049   FD05~            			neend
7049   FD05~            			neend
7049   FD05~            			neend
7049   FD05             
7049   FD05 27 F3       
7049   FD07             
7049   FD07~            			neend
7049   FD07~            			neend
7049   FD07             
7050   FD07 8D E7       			bsr	b_12D
7051   FD09 26 F1       			bne	b_135
7052   FD0B 86 99       adjust_func		ldaa	#$99
7053   FD0D BD FC 75    			jsr	check_aumd				;AUMD: + if Manual-Down
7054   FD10             			ifmi
7054   FD10             
7054   FD10 2A FE       
7055   FD12 86 01       				ldaa	#$01
7056   FD14             			endif
7056   FD14             
7056   FD14             
7056   FD14             
7056   FD14             
7056   FD14             
7056   FD14~            			endif
7056   FD14~            			endif
7056   FD14             
7056   FD14~            			endif
7056   FD14~            			endif
7056   FD14             
7056   FD11             
7056   FD11 02          
7056   FD12             
7056   FD12             
7056   FD12~            			endif
7056   FD12~            			endif
7056   FD12~            			endif
7056   FD12             
7056   FD14             
7056   FD14~            			endif
7056   FD14~            			endif
7056   FD14             
7057   FD14 16          			tab	
7058   FD15 39          			rts
7059   FD16             				
7060   FD16 86 FF       st_reset		ldaa	#$FF
7061   FD18 97 58       			staa	mbip_b0
7062   FD1A 97 5A       			staa	cred_b0
7063   FD1C BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
7064   FD1F 50          			.db 	$50
7065   FD20 7E E8 00    			jmp	reset					;Goto Reset Entry
7066   FD23             
7067   FD23             ;************************************************************
7068   FD23             ;* Self Test Audit and Adjustment Handlers:
7069   FD23             ;* 	These routines are in charge of the functions shown
7070   FD23             ;* 	in the self test routines. Each one handles one or
7071   FD23             ;*    more functions to retrieve and display the proper 
7072   FD23             ;*    data on the various displays.
7073   FD23             ;************************************************************			
7074   FD23 FE E0 00    fn_gameid		ldx	gr_gamenumber
7075   FD26 DF 39       			stx	score_p1_b0+1			;Game # -> Player 1 Display
7076   FD28 B6 E0 02    			ldaa	gr_romrevision
7077   FD2B 97 3B       			staa	score_p1_b0+3			;ROM Rev -> Player Display
7078   FD2D 39          			rts	
7079   FD2E             			
7080   FD2E C0 1E       fn_gameaud		subb	#$1E
7081   FD30 58          fn_sysaud		aslb	
7082   FD31 58          			aslb	
7083   FD32 CE 00 FE    			ldx	#$00FE
7084   FD35 BD EF 4D    			jsr	xplusb				;X = X + B)
7085   FD38 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
7086   FD3B 97 3A       			staa	score_p1_b0+2
7087   FD3D BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
7088   FD40 97 3B       			staa	score_p1_b0+3			;Show Data in Player 1 Display
7089   FD42 C1 20       			cmpb	#$20
7090   FD44             			ifne						;If on Audit 08, Keep Going
7090   FD44             
7090   FD44 27 FE       
7091   FD46 39          				rts						;Else... get outta here!
7092   FD47             			endif
7092   FD47             
7092   FD47             
7092   FD47             
7092   FD47             
7092   FD47             
7092   FD47~            			endif
7092   FD47~            			endif
7092   FD47             
7092   FD47~            			endif
7092   FD47~            			endif
7092   FD47             
7092   FD45             
7092   FD45 01          
7092   FD46             
7092   FD46             
7092   FD46~            			endif
7092   FD46~            			endif
7092   FD46~            			endif
7092   FD46             
7092   FD47             
7092   FD47~            			endif
7092   FD47~            			endif
7092   FD47             
7093   FD47 CE 01 4E    			ldx	#aud_hstdcredits			;Audit: HSTD Credits Awarded
7094   FD4A BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
7095   FD4D 97 3E       			staa	score_p2_b0+2
7096   FD4F BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
7097   FD52 97 3F       			staa	score_p2_b0+3
7098   FD54 CE 01 12    			ldx	#aud_specialcredits		;Audit: Special Credits
7099   FD57 C6 03       			ldab	#$03
7100   FD59 D7 9A       			stab	temp1
7101   FD5B             			begin
7101   FD5B             
7102   FD5B BD EF 63    				jsr	cmosinc_b				;CMOS,X++ -> B
7103   FD5E BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
7104   FD61 9B 3F       				adda	score_p2_b0+3
7105   FD63 19          				daa						;\
7106   FD64 97 3F       				staa	score_p2_b0+3			;|
7107   FD66 17          				tba						;|--  Add up HSTD,Special,Replay,Match Credits
7108   FD67 99 3E       				adca	score_p2_b0+2			;|
7109   FD69 19          				daa						;/
7110   FD6A 97 3E       				staa	score_p2_b0+2			;Store Result (Player 2 Display)
7111   FD6C 7A 00 9A    				dec	temp1
7112   FD6F             			eqend
7112   FD6F             
7112   FD6F             
7112   FD6F~            			eqend
7112   FD6F~            			eqend
7112   FD6F~            			eqend
7112   FD6F             
7112   FD6F 26 EA       
7112   FD71             
7112   FD71~            			eqend
7112   FD71~            			eqend
7112   FD71             
7113   FD71 CE 00 46    			ldx	#score_p4_b0+2
7114   FD74 C6 07       			ldab	#$07
7115   FD76 BD F8 94    			jsr	clear_range				;Clear RAM from X to X+B
7116   FD79 DE 3E       			ldx	score_p2_b0+2
7117   FD7B DF 48       			stx	score_p1_b1				;RAM $48 = Total Free Credits (Player 1 Display)
7118   FD7D 86 99       			ldaa	#$99
7119   FD7F 97 4D       			staa	score_p2_b1+1			;RAM $4D = #99 (Player 2 Display)
7120   FD81 16          			tab	
7121   FD82 90 3B       			suba	score_p1_b0+3
7122   FD84 D0 3A       			subb	score_p1_b0+2
7123   FD86 8B 01       			adda	#$01
7124   FD88 19          			daa	
7125   FD89 97 4F       			staa	score_p2_b1+3
7126   FD8B 17          			tba	
7127   FD8C 89 00       			adca	#$00
7128   FD8E 19          			daa	
7129   FD8F 97 4E       			staa	score_p2_b1+2
7130   FD91             			begin
7130   FD91             
7131   FD91 D6 47       				ldab	score_p4_b0+3
7132   FD93 CE 00 46    				ldx	#score_p4_b0+2
7133   FD96 0C          				clc
7134   FD97             				begin	
7134   FD97             
7135   FD97 A6 04       					ldaa	$04,X
7136   FD99 A9 09       					adca	$09,X
7137   FD9B 19          					daa	
7138   FD9C A7 04       					staa	$04,X
7139   FD9E 09          					dex	
7140   FD9F 8C 00 41    					cpx	#score_p3_b0+1
7141   FDA2             				eqend
7141   FDA2             
7141   FDA2             
7141   FDA2~            				eqend
7141   FDA2~            				eqend
7141   FDA2~            				eqend
7141   FDA2             
7141   FDA2 26 F3       
7141   FDA4             
7141   FDA4~            				eqend
7141   FDA4~            				eqend
7141   FDA4             
7142   FDA4 D1 47       				cmpb	score_p4_b0+3
7143   FDA6             			eqend
7143   FDA6             
7143   FDA6             
7143   FDA6~            			eqend
7143   FDA6~            			eqend
7143   FDA6~            			eqend
7143   FDA6             
7143   FDA6 26 E9       
7143   FDA8             
7143   FDA8~            			eqend
7143   FDA8~            			eqend
7143   FDA8             
7144   FDA8 39          			rts
7145   FDA9             				
7146   FDA9 BD FA 0B    fn_hstd		jsr	show_hstd				;Puts HSTD in All Player Displays(Buffer 1)
7147   FDAC 86 7F       			ldaa	#$7F
7148   FDAE 97 5C       			staa	dmask_p1
7149   FDB0 39          			rts
7150   FDB1             				
7151   FDB1 CE 01 81    fn_replay		ldx	#adj_backuphstd			;Offset to Replay Levels
7152   FDB4 C0 0D       			subb	#$0D					;Subtract 13 to get correct base
7153   FDB6 58          			aslb						;*2  2 bytes data per level(replay score)
7154   FDB7 BD EF 4D    			jsr	xplusb				;X = X + B)
7155   FDBA DF D1       			stx	vm_pc					;Pointer to Current Replay Level Data
7156   FDBC 58          			aslb						;*2  4 bytes data per level(times exceeded)
7157   FDBD CE 01 4E    			ldx	#aud_hstdcredits			;Offset to Replay Level Times Exceeded
7158   FDC0 BD EF 4D    			jsr	xplusb				;X = X + B)
7159   FDC3 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
7160   FDC6 97 3E       			staa	score_p2_b0+2			;Show Times Exceeded MSD's in Player 2 Display
7161   FDC8 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
7162   FDCB 97 3F       			staa	score_p2_b0+3			;Show Times Exceeded LSD's in Player 2 Display
7163   FDCD 5F          			clrb	
7164   FDCE             			begin
7164   FDCE             
7165   FDCE DE D1       				ldx	vm_pc					;reload current offset * 2
7166   FDD0 8D 14       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
7167   FDD2 16          				tab	
7168   FDD3 BD EC F3    				jsr	split_ab				;Shift the digits around for display
7169   FDD6 84 F0       				anda	#$F0					;Blank MSD (10,000,000 digit)
7170   FDD8 D7 38       				stab	score_p1_b0				;Show it.
7171   FDDA 97 39       				staa	score_p1_b0+1			;Player 1 Display
7172   FDDC 5F          				clrb	
7173   FDDD D7 3A       				stab	score_p1_b0+2			;Lay down some Zero's
7174   FDDF D7 3B       				stab	score_p1_b0+3			
7175   FDE1 BD FC FC    				jsr	b_135
7176   FDE4             			loopend
7176   FDE4             
7176   FDE4             
7176   FDE4~            			loopend
7176   FDE4~            			loopend
7176   FDE4~            			loopend
7176   FDE4             
7176   FDE4 20 E8       
7176   FDE6             
7176   FDE6~            			loopend
7176   FDE6~            			loopend
7176   FDE6             
7177   FDE6             			
7178   FDE6 8D 37       cmos_add_d		bsr	cmos_a				;CMOS, X -> A )
7179   FDE8 1B          			aba	
7180   FDE9 19          			daa	
7181   FDEA BD EF AF    			jsr	a_cmosinc				;A -> CMOS,X++)
7182   FDED 20 33       			bra	fn_ret				;dex,dex,tsta,rts.
7183   FDEF             			
7184   FDEF 5F          fn_pricec		clrb	
7185   FDF0             			begin
7185   FDF0             
7186   FDF0             				begin
7186   FDF0             
7187   FDF0 CE 01 AD    					ldx	#adj_pricecontrol			;Standard/Custom Pricing Control
7188   FDF3 BD FD E6    					jsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
7189   FDF6 C6 99       					ldab	#$99
7190   FDF8 81 09       					cmpa	#$09
7191   FDFA             				csend					;Custom Pricing = 09?
7191   FDFA             
7191   FDFA             
7191   FDFA~            				csend					;Custom Pricing = 09?
7191   FDFA~            				csend					;Custom Pricing = 09?
7191   FDFA~            				csend					;Custom Pricing = 09?
7191   FDFA             
7191   FDFA 24 F4       
7191   FDFC             
7191   FDFC~            				csend					;Custom Pricing = 09?
7191   FDFC~            				csend					;Custom Pricing = 09?
7191   FDFC             
7192   FDFC 97 3B       				staa	score_p1_b0+3			;Player 1 Display
7193   FDFE 16          				tab	
7194   FDFF             				ifne
7194   FDFF             
7194   FDFF 27 FE       
7195   FE01 BD EF D0    					jsr	loadpricing
7196   FE04             				endif
7196   FE04             
7196   FE04             
7196   FE04             
7196   FE04             
7196   FE04             
7196   FE04~            				endif
7196   FE04~            				endif
7196   FE04             
7196   FE04~            				endif
7196   FE04~            				endif
7196   FE04             
7196   FE00             
7196   FE00 03          
7196   FE01             
7196   FE01             
7196   FE01~            				endif
7196   FE01~            				endif
7196   FE01~            				endif
7196   FE01             
7196   FE04             
7196   FE04~            				endif
7196   FE04~            				endif
7196   FE04             
7197   FE04 BD FC FC    				jsr	b_135
7198   FE07             			loopend
7198   FE07             
7198   FE07             
7198   FE07~            			loopend
7198   FE07~            			loopend
7198   FE07~            			loopend
7198   FE07             
7198   FE07 20 E7       
7198   FE09             
7198   FE09~            			loopend
7198   FE09~            			loopend
7198   FE09             
7199   FE09             			
7200   FE09 CE 01 AF    fn_prices		ldx	#cmos_leftcoinmult		;Left Coin Slot Multiplier
7201   FE0C C0 14       			subb	#$14
7202   FE0E 58          			aslb	
7203   FE0F BD EF 4D    			jsr	xplusb				;X = X + B)
7204   FE12 BD FE 1F    			jsr	cmos_a				;CMOS, X -> A )
7205   FE15 97 3B       			staa	score_p1_b0+3			;Player 1 Display
7206   FE17 B6 01 AE    			ldaa	adj_pricecontrol+1		;Standard/Custom Pricing Control LSD
7207   FE1A 84 0F       			anda	#$0F
7208   FE1C 27 0B       			beq	fn_cdtbtn
7209   FE1E 39          			rts	
7210   FE1F             			
7211   FE1F BD EF 53    cmos_a		jsr	cmosinc_a				;CMOS,X++ -> A
7212   FE22 09          fn_ret		dex	
7213   FE23 09          			dex	
7214   FE24 4D          			tsta	
7215   FE25 39          			rts	
7216   FE26             			
7217   FE26 CE 01 AB    fn_credit		ldx	#adj_max_credits			;RAM Pointer Base
7218   FE29 5F          fn_cdtbtn		clrb
7219   FE2A             			begin
7219   FE2A             
7220   FE2A 8D BA       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
7221   FE2C 97 3B       				staa	score_p1_b0+3			;Player 1 Display
7222   FE2E BD FC FC    				jsr	b_135
7223   FE31             			loopend
7223   FE31             
7223   FE31             
7223   FE31~            			loopend
7223   FE31~            			loopend
7223   FE31~            			loopend
7223   FE31             
7223   FE31 20 F7       
7223   FE33             
7223   FE33~            			loopend
7223   FE33~            			loopend
7223   FE33             
7224   FE33             			
7225   FE33 CE 01 8B    fn_adj		ldx	#adj_matchenable			;RAM Pointer Base
7226   FE36 C0 1A       			subb	#$1A
7227   FE38 58          			aslb	
7228   FE39 BD EF 4D    			jsr	xplusb				;X = X + B)
7229   FE3C 20 EB       			bra	fn_cdtbtn
7230   FE3E             			
7231   FE3E CE 01 70    fn_command		ldx	#aud_command			;RAM Pointer Base
7232   FE41 20 E6       			bra	fn_cdtbtn
7233   FE43             
7234   FE43             ;****************************************************
7235   FE43             ;* Main Display Test Routine - Cycles all score 
7236   FE43             ;*                             displays through 0-9
7237   FE43             ;****************************************************			
7238   FE43 4F          st_display		clra
7239   FE44             			begin	
7239   FE44             
7240   FE44             				begin
7240   FE44             
7241   FE44 CE 00 38    					ldx	#score_p1_b0
7242   FE47 C6 24       					ldab	#$24
7243   FE49 BD F8 40    					jsr	write_range				;RAM $38-$5B = A: Clear all Displays
7244   FE4C BD EA 2F    					jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
7245   FE4F 18          					.db	$18
7246   FE50 BD FC 57    					jsr	do_aumd				;Check Auto/Manual, return + if Manual
7247   FE53             				miend
7247   FE53             
7247   FE53             
7247   FE53~            				miend
7247   FE53~            				miend
7247   FE53~            				miend
7247   FE53             
7247   FE53 2A EF       
7247   FE55             
7247   FE55~            				miend
7247   FE55~            				miend
7247   FE55             
7248   FE55 73 00 60    				com	comma_flags				;Toggle commas on each count
7249   FE58 8B 11       				adda	#$11					;Add one to each digit
7250   FE5A 19          				daa	
7251   FE5B             			csend
7251   FE5B             
7251   FE5B             
7251   FE5B~            			csend
7251   FE5B~            			csend
7251   FE5B~            			csend
7251   FE5B             
7251   FE5B 24 E7       
7251   FE5D             
7251   FE5D~            			csend
7251   FE5D~            			csend
7251   FE5D             
7252   FE5D D6 CB       			ldab	flags_selftest
7253   FE5F 2A E2       			bpl	st_display				;Clear All Displays
7254   FE61 39          			rts	
7255   FE62             
7256   FE62             ;****************************************************
7257   FE62             ;* Main Sound Routine - Toggles each of the sound 
7258   FE62             ;*                      command line individually.
7259   FE62             ;****************************************************			
7260   FE62 BD F8 9A    st_sound		jsr	clear_displays			;Blank all Player Displays (buffer 0)
7261   FE65             			begin
7261   FE65             
7262   FE65 4F          				clra	
7263   FE66 97 60       				staa	comma_flags				;Turn off commas
7264   FE68 97 58       				staa	mbip_b0				;Match/Ball in Play Display = 00
7265   FE6A 86 FE       				ldaa	#$FE					;Initial Sound Command $1E
7266   FE6C             				begin
7266   FE6C             
7267   FE6C             					begin
7267   FE6C             
7268   FE6C C6 FF       						ldab	#$FF
7269   FE6E F7 21 00    						stab	pia_sound_data			;Sound Blanking
7270   FE71 BD EA 2F    						jsr	addthread				;Delay enough for sound board to stop
7271   FE74 00          						.db	$00	
7272   FE75 B7 21 00    						staa	pia_sound_data			;Commands.. $1E,$1D,$1B,$17,$0F
7273   FE78 BD EA 2F    						jsr	addthread				;Delay $40 IRQ's
7274   FE7B 40          						.db	$40
7275   FE7C BD FC 57    						jsr	do_aumd				;Either repeat same sound or move on to next
7276   FE7F             					miend
7276   FE7F             
7276   FE7F             
7276   FE7F~            					miend
7276   FE7F~            					miend
7276   FE7F~            					miend
7276   FE7F             
7276   FE7F 2A EB       
7276   FE81             
7276   FE81~            					miend
7276   FE81~            					miend
7276   FE81             
7277   FE81 7C 00 58    					inc	mbip_b0				;Increment Match/Ball in Play Display
7278   FE84 48          					asla	
7279   FE85 4C          					inca	
7280   FE86             				plend
7280   FE86             
7280   FE86             
7280   FE86~            				plend
7280   FE86~            				plend
7280   FE86~            				plend
7280   FE86             
7280   FE86 2B E4       
7280   FE88             
7280   FE88~            				plend
7280   FE88~            				plend
7280   FE88             
7281   FE88 D6 CB       				ldab	flags_selftest
7282   FE8A             			miend					;Start Over
7282   FE8A             
7282   FE8A             
7282   FE8A~            			miend					;Start Over
7282   FE8A~            			miend					;Start Over
7282   FE8A~            			miend					;Start Over
7282   FE8A             
7282   FE8A 2A D9       
7282   FE8C             
7282   FE8C~            			miend					;Start Over
7282   FE8C~            			miend					;Start Over
7282   FE8C             
7283   FE8C 39          			rts	
7284   FE8D             			
7285   FE8D             ;****************************************************
7286   FE8D             ;* Main Lamp Routine - Flashes all lamps 
7287   FE8D             ;****************************************************			
7288   FE8D C6 AA       st_lamp		ldab	#$AA
7289   FE8F D7 58       			stab	mbip_b0				;Match/Ball in Play Display Buffer 0
7290   FE91 D7 0F       			stab	test_lamptimer
7291   FE93             			begin
7291   FE93             
7292   FE93             				begin
7292   FE93             
7293   FE93 96 10       					ldaa	lampbuffer0
7294   FE95 43          					coma	
7295   FE96 CE 00 10    					ldx	#lampbuffer0
7296   FE99 C6 08       					ldab	#$08
7297   FE9B BD F8 40    					jsr	write_range				;Store A from $0010-0017
7298   FE9E BD EA 2F    					jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
7299   FEA1 1B          					.db	$1B
7300   FEA2 7A 00 0F    					dec  	test_lamptimer
7301   FEA5             				eqend
7301   FEA5             
7301   FEA5             
7301   FEA5~            				eqend
7301   FEA5~            				eqend
7301   FEA5~            				eqend
7301   FEA5             
7301   FEA5 26 EC       
7301   FEA7             
7301   FEA7~            				eqend
7301   FEA7~            				eqend
7301   FEA7             
7302   FEA7 D6 CB       				ldab  flags_selftest			;Auto-Cycle??
7303   FEA9             			miend
7303   FEA9             
7303   FEA9             
7303   FEA9~            			miend
7303   FEA9~            			miend
7303   FEA9~            			miend
7303   FEA9             
7303   FEA9 2A E8       
7303   FEAB             
7303   FEAB~            			miend
7303   FEAB~            			miend
7303   FEAB             
7304   FEAB 39          			rts 
7305   FEAC             
7306   FEAC             ;****************************************************
7307   FEAC             ;* Auto-Cycle Routine - This is the timing thread to
7308   FEAC             ;*                      allow each test routine to 
7309   FEAC             ;*                      repeat indefinitely.
7310   FEAC             ;****************************************************			
7311   FEAC BD FC 80    st_autocycle	jsr  	st_init
7312   FEAF 5A          			decb 
7313   FEB0 D7 CB       			stab  flags_selftest
7314   FEB2             			begin
7314   FEB2             
7315   FEB2 8D 8F       				bsr  	st_display    		;Clear All Displays
7316   FEB4 7F 00 5A    				clr  	cred_b0
7317   FEB7 8D A9       				bsr  	st_sound
7318   FEB9 7C 00 5A    				inc  	cred_b0
7319   FEBC 8D CF       				bsr  	st_lamp
7320   FEBE 7C 00 5A    				inc  	cred_b0
7321   FEC1 8D 08       				bsr  	st_solenoid
7322   FEC3 CE 01 4A    				ldx  	#aud_autocycles		;Audit: Auto-Cycles
7323   FEC6 BD F7 7F    				jsr  	ptrx_plus_1 		;Add 1 to data at X
7324   FEC9             			loopend
7324   FEC9             
7324   FEC9             
7324   FEC9~            			loopend
7324   FEC9~            			loopend
7324   FEC9~            			loopend
7324   FEC9             
7324   FEC9 20 E7       
7324   FECB             
7324   FECB~            			loopend
7324   FECB~            			loopend
7324   FECB             
7325   FECB             
7326   FECB             ;****************************************************
7327   FECB             ;* Main Solenoid Routine - Steps through each solenoid 
7328   FECB             ;****************************************************			
7329   FECB             st_solenoid		begin
7329   FECB             
7330   FECB C6 01       				ldab  #$01
7331   FECD D7 58       				stab 	mbip_b0	 
7332   FECF 86 20       				ldaa 	#$20	
7333   FED1             				begin
7333   FED1             
7334   FED1             					begin
7334   FED1             
7335   FED1 BD EB 23    						jsr  	solbuf			;Turn On Outhole Solenoid
7336   FED4 BD EA 2F    						jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
7337   FED7 40          						.db	$40
7338   FED8 BD FC 57    						jsr  	do_aumd			;AUMD: + if Manual-Down
7339   FEDB             					miend
7339   FEDB             
7339   FEDB             
7339   FEDB~            					miend
7339   FEDB~            					miend
7339   FEDB~            					miend
7339   FEDB             
7339   FEDB 2A F4       
7339   FEDD             
7339   FEDD~            					miend
7339   FEDD~            					miend
7339   FEDD             
7340   FEDD 16          					tab  
7341   FEDE 96 58       					ldaa  mbip_b0
7342   FEE0 8B 01       					adda 	#$01
7343   FEE2 19          					daa  
7344   FEE3 97 58       					staa  mbip_b0
7345   FEE5 17          					tba  
7346   FEE6 4C          					inca 
7347   FEE7 81 39       					cmpa  #$39
7348   FEE9             				ccend
7348   FEE9             
7348   FEE9             
7348   FEE9~            				ccend
7348   FEE9~            				ccend
7348   FEE9~            				ccend
7348   FEE9             
7348   FEE9 25 E6       
7348   FEEB             
7348   FEEB~            				ccend
7348   FEEB~            				ccend
7348   FEEB             
7349   FEEB D6 CB       				ldab  flags_selftest			;Auto-Cycle??
7350   FEED             			miend
7350   FEED             
7350   FEED             
7350   FEED~            			miend
7350   FEED~            			miend
7350   FEED~            			miend
7350   FEED             
7350   FEED 2A DC       
7350   FEEF             
7350   FEEF~            			miend
7350   FEEF~            			miend
7350   FEEF             
7351   FEEF 39          			rts  
7352   FEF0             
7353   FEF0             ;****************************************************
7354   FEF0             ;* Main Switch Routine - Scans for closed switches
7355   FEF0             ;****************************************************			
7356   FEF0             st_switch		begin
7356   FEF0             
7357   FEF0 86 FF       				ldaa	#$FF
7358   FEF2 97 58       				staa  mbip_b0
7359   FEF4 BD EA 2F    				jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
7360   FEF7 00          				.db	$00
7361   FEF8 B6 E0 4D    				ldaa 	gr_lastswitch		;Game ROM: Last Switch Used
7362   FEFB 4A          				deca 
7363   FEFC CE 00 69    st_swnext			ldx  	#switch_masked
7364   FEFF BD F1 9C    				jsr  	unpack_byte    		;Unpack Switch
7365   FF02 E5 00       				bitb 	$00,X
7366   FF04             				ifne
7366   FF04             
7366   FF04 27 FE       
7367   FF06 36          					psha 
7368   FF07 4C          					inca 
7369   FF08 C6 01       					ldab  #$01
7370   FF0A BD F8 16    					jsr  	divide_ab
7371   FF0D 97 58       					staa 	mbip_b0
7372   FF0F 4F          					clra 
7373   FF10 C6 01       					ldab  #$01
7374   FF12 BD ED 53    					jsr  	isnd_mult			;Play Sound Command A, B Times:
7375   FF15 32          					pula 
7376   FF16 BD EA 2F    					jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
7377   FF19 40          					.db	$40
7378   FF1A             				endif
7378   FF1A             
7378   FF1A             
7378   FF1A             
7378   FF1A             
7378   FF1A             
7378   FF1A~            				endif
7378   FF1A~            				endif
7378   FF1A             
7378   FF1A~            				endif
7378   FF1A~            				endif
7378   FF1A             
7378   FF05             
7378   FF05 14          
7378   FF06             
7378   FF06             
7378   FF06~            				endif
7378   FF06~            				endif
7378   FF06~            				endif
7378   FF06             
7378   FF1A             
7378   FF1A~            				endif
7378   FF1A~            				endif
7378   FF1A             
7379   FF1A 4A          				deca 
7380   FF1B             			plend					;Start Back at the top switch
7380   FF1B             
7380   FF1B             
7380   FF1B~            			plend					;Start Back at the top switch
7380   FF1B~            			plend					;Start Back at the top switch
7380   FF1B~            			plend					;Start Back at the top switch
7380   FF1B             
7380   FF1B 2B D3       
7380   FF1D             
7380   FF1D~            			plend					;Start Back at the top switch
7380   FF1D~            			plend					;Start Back at the top switch
7380   FF1D             
7381   FF1D 20 DD       			bra  st_swnext			;Do Next Switch
7382   FF1F             
7383   FF1F             ;**********************************************************************************
7384   FF1F             ;* NMI Routines - This section of code is run only when the 
7385   FF1F             ;*                diagnostic switch on the CPU board is pressed.
7386   FF1F             ;*                It will test the hardware and report any errors
7387   FF1F             ;*                via the LED display on the CPU board. If all tests
7388   FF1F             ;*                are passed, the LED display will show '0' and
7389   FF1F             ;*                the code jumps to the normal power-up routines.
7390   FF1F             ;*
7391   FF1F             ;* Errors are as Follows:
7392   FF1F             ;*
7393   FF1F             ;*      0 - Test Passed
7394   FF1F             ;*      1 - IC13 RAM Fault (Most Significant Nybble)
7395   FF1F             ;*      2 - IC16 RAM Fault (Least Significant Nybble)
7396   FF1F             ;*      3 - IC17 ROM Lower Half (Location $F000-$F7FF)
7397   FF1F             ;*      4 - IC17 ROM Upper Half (Location $F800-$FFFF)
7398   FF1F             ;*      5 - IC20 ROM Fault (Location $E800-$EFFF)
7399   FF1F             ;*      6 - IC14 GAME ROM Fault (Location $E000-$E7FF)
7400   FF1F             ;*      7 - IC15 GAME ROM Fault (Location $D800-$DFFF)
7401   FF1F             ;*      8 - IC19 CMOS RAM Fault or Memory Protect Failure
7402   FF1F             ;*      9 - Coin Door Closed or Memory Protect Failure or IC19 CMOS RAM Fault
7403   FF1F             ;**********************************************************************************
7404   FF1F C6 20       rambad		ldab	#$20
7405   FF21 A8 00       			eora	$00,X
7406   FF23 84 F0       			anda	#$F0
7407   FF25 27 54       			beq	diag_showerror
7408   FF27 C6 10       			ldab	#$10
7409   FF29 20 50       			bra	diag_showerror
7410   FF2B             			
7411   FF2B             ;*******************************************************************
7412   FF2B             ;* Main NMI Entry 
7413   FF2B             ;*******************************************************************
7414   FF2B 0F          diag			sei	
7415   FF2C CE 28 00    			ldx	#pia_disp_digit_data
7416   FF2F 6F 01       			clr	$01,X
7417   FF31 86 F0       			ldaa	#$F0
7418   FF33 A7 00       			staa	$00,X
7419   FF35 C6 3C       			ldab	#$3C
7420   FF37 E7 01       			stab	$01,X
7421   FF39 A7 00       			staa	$00,X			;Blank Diagnostic Display
7422   FF3B 4F          			clra	
7423   FF3C             			begin
7423   FF3C             
7424   FF3C CE 10 00    				ldx	#$1000
7425   FF3F             				begin					;\
7425   FF3F             
7426   FF3F A7 00       					staa	$00,X			;|
7427   FF41 08          					inx				;| Clear RAM $1000-13FF
7428   FF42 8C 14 00    					cpx	#$1400		;|
7429   FF45             				eqend					;/
7429   FF45             
7429   FF45             
7429   FF45~            				eqend					;/
7429   FF45~            				eqend					;/
7429   FF45~            				eqend					;/
7429   FF45             
7429   FF45 26 F8       
7429   FF47             
7429   FF47~            				eqend					;/
7429   FF47~            				eqend					;/
7429   FF47             
7430   FF47 35          				txs	
7431   FF48             				begin
7431   FF48             
7432   FF48 09          					dex	
7433   FF49 A1 00       					cmpa	$00,X			;Test
7434   FF4B 26 D2       					bne	rambad		;Bad RAM
7435   FF4D 8C 10 00    					cpx	#$1000
7436   FF50             				eqend
7436   FF50             
7436   FF50             
7436   FF50~            				eqend
7436   FF50~            				eqend
7436   FF50~            				eqend
7436   FF50             
7436   FF50 26 F6       
7436   FF52             
7436   FF52~            				eqend
7436   FF52~            				eqend
7436   FF52             
7437   FF52 43          				coma					;Test with #FF
7438   FF53             			eqend
7438   FF53             
7438   FF53             
7438   FF53~            			eqend
7438   FF53~            			eqend
7438   FF53~            			eqend
7438   FF53             
7438   FF53 26 E7       
7438   FF55             
7438   FF55~            			eqend
7438   FF55~            			eqend
7438   FF55             
7439   FF55 C6 20       			ldab	#$20					;Begin ROM Test
7440   FF57 CE FF FF    			ldx	#$FFFF
7441   FF5A             			begin
7441   FF5A             
7442   FF5A DF 9A       				stx	temp1
7443   FF5C CB 10       				addb	#$10
7444   FF5E C1 70       				cmpb	#$70
7445   FF60 22 1F       				bhi	diag_ramtest
7446   FF62             				ifeq
7446   FF62             
7446   FF62 26 FE       
7447   FF64 B6 E0 4C    					ldaa	gr_extendedromtest		;Check to see if we need to test additional ROM
7448   FF67 2B 18       					bmi	diag_ramtest
7449   FF69             				endif
7449   FF69             
7449   FF69             
7449   FF69             
7449   FF69             
7449   FF69             
7449   FF69~            				endif
7449   FF69~            				endif
7449   FF69             
7449   FF69~            				endif
7449   FF69~            				endif
7449   FF69             
7449   FF63             
7449   FF63 05          
7449   FF64             
7449   FF64             
7449   FF64~            				endif
7449   FF64~            				endif
7449   FF64~            				endif
7449   FF64             
7449   FF69             
7449   FF69~            				endif
7449   FF69~            				endif
7449   FF69             
7450   FF69 96 9A       				ldaa	temp1					
7451   FF6B 80 08       				suba	#$08
7452   FF6D 97 9A       				staa	temp1					;Set our stopping address
7453   FF6F 4F          				clra	
7454   FF70             				begin
7454   FF70             
7455   FF70 A9 00       					adca	$00,X					;Add with carry!!
7456   FF72 09          					dex	
7457   FF73 9C 9A       					cpx	temp1
7458   FF75             				eqend
7458   FF75             
7458   FF75             
7458   FF75~            				eqend
7458   FF75~            				eqend
7458   FF75~            				eqend
7458   FF75             
7458   FF75 26 F9       
7458   FF77             
7458   FF77~            				eqend
7458   FF77~            				eqend
7458   FF77             
7459   FF77 81 80       				cmpa	#$80					;Done changing data?
7460   FF79             			neend						;CSUM must be = #00
7460   FF79             
7460   FF79             
7460   FF79~            			neend						;CSUM must be = #00
7460   FF79~            			neend						;CSUM must be = #00
7460   FF79~            			neend						;CSUM must be = #00
7460   FF79             
7460   FF79 27 DF       
7460   FF7B             
7460   FF7B~            			neend						;CSUM must be = #00
7460   FF7B~            			neend						;CSUM must be = #00
7460   FF7B             
7461   FF7B             			;fall through on error, B contains error code
7462   FF7B             			
7463   FF7B 53          diag_showerror	comb	
7464   FF7C F7 28 00    			stab	pia_disp_digit_data		;Dump Error to Display
7465   FF7F 20 FE       tightloop		bra	tightloop				;Stay Here forever
7466   FF81             
7467   FF81             ;Define a single CMOS location to write test
7468   FF81             cmos_byteloc	=	$01BB
7469   FF81             
7470   FF81 C6 90       diag_ramtest	ldab	#$90					;Begin CMOS RAM Test
7471   FF83 B6 01 BB    			ldaa	cmos_byteloc			;Test a single byte
7472   FF86 7C 01 BB    			inc	cmos_byteloc
7473   FF89 B1 01 BB    			cmpa	cmos_byteloc
7474   FF8C 27 ED       			beq	diag_showerror			;Wrong
7475   FF8E C6 80       			ldab	#$80					;Backup CMOS data now
7476   FF90 CE 12 00    			ldx	#$1200
7477   FF93 DF 9A       			stx	temp1
7478   FF95 CE 01 00    			ldx	#cmos_base
7479   FF98 8D 37       			bsr	block_copy					;Copy Block from X -> temp1, Length = B
7480   FF9A 86 F1       			ldaa	#$F1
7481   FF9C 97 9E       			staa	temp3
7482   FF9E             			begin
7482   FF9E             
7483   FF9E CE 01 00    				ldx	#cmos_base
7484   FFA1 96 9E       				ldaa	temp3
7485   FFA3             				begin
7485   FFA3             
7486   FFA3 A7 00       					staa	$00,X
7487   FFA5 8D 4B       					bsr	adjust_a
7488   FFA7 08          					inx	
7489   FFA8 8C 02 00    					cpx	#cmos_base+$100
7490   FFAB             				eqend
7490   FFAB             
7490   FFAB             
7490   FFAB~            				eqend
7490   FFAB~            				eqend
7490   FFAB~            				eqend
7490   FFAB             
7490   FFAB 26 F6       
7490   FFAD             
7490   FFAD~            				eqend
7490   FFAD~            				eqend
7490   FFAD             
7491   FFAD CE 01 00    				ldx	#cmos_base
7492   FFB0 96 9E       				ldaa	temp3
7493   FFB2             				begin
7493   FFB2             
7494   FFB2 16          					tab	
7495   FFB3 E8 00       					eorb	$00,X
7496   FFB5 C4 0F       					andb	#$0F
7497   FFB7 26 12       					bne	cmos_error
7498   FFB9 8D 37       					bsr	adjust_a
7499   FFBB 08          					inx	
7500   FFBC 8C 02 00    					cpx	#cmos_base+$100
7501   FFBF             				eqend
7501   FFBF             
7501   FFBF             
7501   FFBF~            				eqend
7501   FFBF~            				eqend
7501   FFBF~            				eqend
7501   FFBF             
7501   FFBF 26 F1       
7501   FFC1             
7501   FFC1~            				eqend
7501   FFC1~            				eqend
7501   FFC1             
7502   FFC1 7C 00 9E    				inc	temp3
7503   FFC4             			eqend
7503   FFC4             
7503   FFC4             
7503   FFC4~            			eqend
7503   FFC4~            			eqend
7503   FFC4~            			eqend
7503   FFC4             
7503   FFC4 26 D8       
7503   FFC6             
7503   FFC6~            			eqend
7503   FFC6~            			eqend
7503   FFC6             
7504   FFC6 8D 1D       			bsr	cmos_restore			;Put back original CMOS data
7505   FFC8 7E E8 00    			jmp	reset					;Goto Reset Entry, Everything OK.
7506   FFCB             			
7507   FFCB 8D 18       cmos_error		bsr	cmos_restore
7508   FFCD C6 80       			ldab	#$80
7509   FFCF 20 AA       			bra	diag_showerror
7510   FFD1             			
7511   FFD1 36          block_copy		psha	
7512   FFD2             			begin
7512   FFD2             
7513   FFD2 BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
7514   FFD5 DF 9C       				stx	temp2
7515   FFD7 DE 9A       				ldx	temp1
7516   FFD9 A7 00       				staa	$00,X
7517   FFDB 08          				inx	
7518   FFDC DF 9A       				stx	temp1
7519   FFDE DE 9C       				ldx	temp2
7520   FFE0 5A          				decb	
7521   FFE1             			eqend
7521   FFE1             
7521   FFE1             
7521   FFE1~            			eqend
7521   FFE1~            			eqend
7521   FFE1~            			eqend
7521   FFE1             
7521   FFE1 26 EF       
7521   FFE3             
7521   FFE3~            			eqend
7521   FFE3~            			eqend
7521   FFE3             
7522   FFE3 32          			pula	
7523   FFE4 39          			rts	
7524   FFE5             			
7525   FFE5 CE 01 00    cmos_restore	ldx	#$0100
7526   FFE8 DF 9A       			stx	temp1
7527   FFEA CE 12 00    			ldx	#$1200
7528   FFED C6 80       			ldab	#$80
7529   FFEF 7E EF E4    			jmp	copyblock2				;Transfer Data Block at X to temp1, Length B
7530   FFF2             			
7531   FFF2 4C          adjust_a		inca	
7532   FFF3             			ifeq
7532   FFF3             
7532   FFF3 26 FE       
7533   FFF5 86 F1       				ldaa	#$F1
7534   FFF7             			endif
7534   FFF7             
7534   FFF7             
7534   FFF7             
7534   FFF7             
7534   FFF7             
7534   FFF7~            			endif
7534   FFF7~            			endif
7534   FFF7             
7534   FFF7~            			endif
7534   FFF7~            			endif
7534   FFF7             
7534   FFF4             
7534   FFF4 02          
7534   FFF5             
7534   FFF5             
7534   FFF5~            			endif
7534   FFF5~            			endif
7534   FFF5~            			endif
7534   FFF5             
7534   FFF7             
7534   FFF7~            			endif
7534   FFF7~            			endif
7534   FFF7             
7535   FFF7 39          			rts	
7536   FFF8             
7537   FFF8             ;*******************************************
7538   FFF8             ;* CPU Startup/Interrupt Vectors go here.
7539   FFF8             ;*******************************************
7540   FFF8             	
7541   FFF8 E0 BF       irq_entry		.dw gr_irq_entry	;Goes to Game ROM
7542   FFFA E0 BF       swi_entry		.dw gr_swi_entry	;Goes to Game ROM 
7543   FFFC FF 2B       nmi_entry		.dw diag
7544   FFFE E8 00       res_entry		.dw reset
7545   10000             
7546   10000             	.end
7547   10000             
7548   10000             
7549   10000             	.end
7550   10000             
tasm: Number of errors = 0
