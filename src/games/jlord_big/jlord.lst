0001   0000             ;--------------------------------------------------------------
0002   0000             ;Jungle Lord Game ROM Disassembly
0003   0000             ;Dumped by Pinbuilder ©2000-2005 Jess M. Askey
0004   0000             ;--------------------------------------------------------------
0005   0000             #include  "68logic.asm"	;680X logic definitions
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin		      logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ y	*+5
0050+  0000             #defcont						\ jmp	var2_
0051+  0000             #defcont					\#else
0052+  0000             #defcont						\ x	var2_
0053+  0000             #defcont					\#endif
0054+  0000             #defcont				\#else
0055+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0056+  0000             #defcont				\#endif
0057+  0000             
0058+  0000             ;*******************************************************************
0059+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0060+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0061+  0000             ;*             at that address to point to the current address.    *
0062+  0000             ;*******************************************************************
0063+  0000             #define logic_end \var1_ .set *
0064+  0000             #defcont		\ .pop var3_, var4_
0065+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0066+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0067+  0000             #defcont  				\var2_ .set var1_-var4_-2
0068+  0000             #defcont				\#if var2_+127 < 0
0069+  0000             #defcont					\ .error "Branch Range < -127"
0070+  0000             #defcont				\#else
0071+  0000             #defcont					\#if var2_-128 > 0
0072+  0000             #defcont						\ .error "Branch Range > 128"
0073+  0000             #defcont					\#else
0074+  0000             #defcont    					\ .org var4_+1
0075+  0000             #defcont						\ .byte var2_
0076+  0000             #defcont					\#endif
0077+  0000             #defcont				\#endif
0078+  0000             #defcont			\#else	
0079+  0000             #defcont    			\ .org  var4_-2	
0080+  0000             #defcont				\ .word var1_
0081+  0000             #defcont			\#endif
0082+  0000             #defcont			\ .org	var1_
0083+  0000             #defcont		\#else
0084+  0000             #defcont			\.error "Wrong Endtype for IF block"
0085+  0000             #defcont		\#endif
0086+  0000             
0087+  0000             ;*******************************************************************
0088+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0089+  0000             ;*             (ie. with additional logic as defined below). The   *
0090+  0000             ;*             ELSE block will resove how to terminate the current *
0091+  0000             ;*             code and then set the owning IF statement's data    *
0092+  0000             ;*             byte.                                               *
0093+  0000             ;*******************************************************************
0094+  0000             #define	logic_else(x,y)	\var1_ .set $
0095+  0000             #defcont		\ .pop var3_, var4_
0096+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0097+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0098+  0000             #defcont				\ .org var4_+1
0099+  0000             #defcont	      		\#if x==0
0100+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0101+  0000             #defcont					\#if var2_+127 < 0
0102+  0000             #defcont						\ .org var1_
0103+  0000             #defcont						\.push $+3, 1
0104+  0000             #defcont						\ jmp $
0105+  0000             #defcont					\#else
0106+  0000             #defcont						\#if var2_-128>0
0107+  0000             #defcont							\ .org var1_
0108+  0000             #defcont							\.push $+3, 1
0109+  0000             #defcont							\ jmp $
0110+  0000             #defcont						\#else
0111+  0000             #defcont							\.push var1_, 0
0112+  0000             #defcont							\ .byte var2_
0113+  0000             #defcont							\ .org var1_
0114+  0000             #defcont							\ BRA $
0115+  0000             #defcont							\ .org var1_+2
0116+  0000             #defcont						\#endif
0117+  0000             #defcont					\#endif
0118+  0000             #defcont				\#else
0119+  0000             #defcont					\ .byte var1_-var4_-2+2
0120+  0000             #defcont					\ .org var1_
0121+  0000             #defcont					\.push $, 0
0122+  0000             #defcont					\ y $		
0123+  0000             #defcont				\#endif
0124+  0000             #defcont			\#else
0125+  0000             #defcont				\.error "Duplicate ELSE Statement"
0126+  0000             #defcont			\#endif
0127+  0000             #defcont		\#else
0128+  0000             #defcont			\ .error "Misplaced Else"
0129+  0000             #defcont		\#endif
0130+  0000             
0131+  0000             
0132+  0000             ;*******************************************************************
0133+  0000             ;* Defines how to use the various logic macros defined above.      *
0134+  0000             ;*******************************************************************
0135+  0000             #define	ifeq	logic_ifxx(BNE)		
0136+  0000             #define	ifne	logic_ifxx(BEQ)
0137+  0000             #define	ifpl	logic_ifxx(BMI)
0138+  0000             #define	ifhi	logic_ifxx(BLO)
0139+  0000             #define	ifmi	logic_ifxx(BPL)
0140+  0000             #define	iflo	logic_ifxx(BHI)
0141+  0000             #define	ifcs	logic_ifxx(BCC)
0142+  0000             #define	ifcc	logic_ifxx(BCS)
0143+  0000             #define 	ifvc	logic_ifxx(BVS)
0144+  0000             #define 	ifvs	logic_ifxx(BVC)
0145+  0000             #define	ifge	logic_ifxx(BLO)
0146+  0000             #define	ifgt	logic_ifxx(BLS)
0147+  0000             
0148+  0000             #define	else  	logic_else(0,0)
0149+  0000             #define	else_eq	logic_else(1,BEQ)
0150+  0000             #define	else_ne	logic_else(1,BNE)
0151+  0000             #define	else_pl	logic_else(1,BPL)
0152+  0000             #define	else_mi	logic_else(1,BMI)
0153+  0000             #define	else_cc	logic_else(1,BCC)
0154+  0000             #define	else_cs	logic_else(1,BCS)
0155+  0000             
0156+  0000             #define 	endif		logic_end
0157+  0000             
0158+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0159+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0160+  0000             #define	plend	logic_loopend(BMI,BPL)
0161+  0000             #define	miend	logic_loopend(BPL,BMI)
0162+  0000             #define	csend	logic_loopend(BCC,BCS)
0163+  0000             #define	ccend	logic_loopend(BCS,BCC)
0164+  0000             #define	vcend	logic_loopend(BVS,BVC)
0165+  0000             #define	vsend	logic_loopend(BVC,BVS)
0166+  0000             #define     hiend logic_loopend(BLS,BHI)
0167+  0000             #define     lsend logic_loopend(BHI,BLS)
0168+  0000             
0169+  0000             #define	loopend	logic_loopend(BRA,BRA)
0170+  0000             
0171+  0000             #define	lsb(x)	x&$FF
0172+  0000             
0173+  0000             #define	msb(x)	(x>>8)&$FF0006   0000             #include "7hard.asm"	;Level 7 Hardware Definitions
0001+  0000             ;***********************************************************
0002+  0000             ;* Level 7 Hardware Definitions                            *
0003+  0000             ;* 1999-2001 Jess M. Askey                                 *
0004+  0000             ;***********************************************************
0005+  0000             ;* This file defines the RAM structure and the actual      *
0006+  0000             ;* hardware contained on the Level 7 CPU board.            *
0007+  0000             ;***********************************************************
0008+  0000             	.org $0000
0009+  0000             
0010+  0000             ram_base	
0011+  0000             vm_reg_a			.block	1		;Virtual Machine Register A
0012+  0001             vm_reg_b			.block	1		;Virtual Machine Register B
0013+  0002             game_ram_2			.block	1
0014+  0003             game_ram_3			.block	1
0015+  0004             game_ram_4			.block	1
0016+  0005             game_ram_5			.block	1
0017+  0006             game_ram_6			.block	1
0018+  0007             game_ram_7			.block	1
0019+  0008             game_ram_8			.block	1
0020+  0009             game_ram_9			.block	1
0021+  000A             game_ram_a			.block	1
0022+  000B             game_ram_b			.block	1
0023+  000C             game_ram_c			.block	1
0024+  000D             game_ram_d			.block	1
0025+  000E             game_ram_e			.block	1
0026+  000F             game_ram_f			.block	1
0027+  0010             lampbuffer0			.block	8		;Lamp Buffer 0
0028+  0018             bitflags			.block	8
0029+  0020             lampbufferselect		.block	8		;Lamp Buffer Selection Bit
0030+  0028             lampbuffer1			.block	8		;Lamp Buffer 1
0031+  0030             lampflashflag		.block	8		;Lamp Flashing Bits
0032+  0038             score_p1_b0			.block	4
0033+  003C             score_p2_b0			.block	4
0034+  0040             score_p3_b0			.block	4
0035+  0044             score_p4_b0			.block	4
0036+  0048             score_p1_b1			.block	4
0037+  004C             score_p2_b1			.block	4
0038+  0050             score_p3_b1			.block	4
0039+  0054             score_p4_b1			.block	4
0040+  0058             mbip_b0			.block	1
0041+  0059             mbip_b1			.block	1
0042+  005A             cred_b0			.block	1
0043+  005B             cred_b1			.block	1
0044+  005C             dmask_p1			.block	1
0045+  005D             dmask_p2			.block	1
0046+  005E             dmask_p3			.block	1
0047+  005F             dmask_p4			.block	1
0048+  0060             comma_flags			.block	1
0049+  0061             switch_debounced		.block	8
0050+  0069             switch_masked		.block	8
0051+  0071             switch_pending		.block	8
0052+  0079             switch_aux			.block	8
0053+  0081             switch_b4			.block	8
0054+  0089             irq_counter			.block	1
0055+  008A             lamp_index_word		.block	2		;This will always be $00 in the MSB, will be a rotating bit in LSB
0056+  008C             lamp_bit			.block	1		;$008C
0057+  008D             comma_data_temp		.block	1
0058+  008E             credp1p2_bufferselect	.block	1
0059+  008F             mbipp3p4_bufferselect	.block	1
0060+  0090             swap_player_displays	.block	1
0061+  0091             solenoid_address		.block	2
0062+  0093             solenoid_bitpos		.block	1
0063+  0094             solenoid_counter		.block	1
0064+  0095             irqcount16			.block	1
0065+  0096             switch_queue_pointer	.block	2
0066+  0098             solenoid_queue_pointer	.block	2
0067+  009A             temp1				.block	2
0068+  009C             temp2				.block	2
0069+  009E             temp3				.block	2
0070+  00A0             sys_temp1			.block	1
0071+  00A1             sys_temp2			.block	1
0072+  00A2             sys_temp3			.block	1
0073+  00A3             sys_temp4			.block	1
0074+  00A4             sys_temp5			.block	1
0075+  00A5             sw_encoded			.block	1
0076+  00A6             sys_temp_w2			.block	2
0077+  00A8             sys_temp_w3			.block	2
0078+  00AA             thread_priority		.block	1
0079+  00AB             unused_ram1			.block	1		;$00AB
0080+  00AC             irqcount			.block	1
0081+  00AD             vm_base			.block	2
0082+  00AF             vm_nextslot			.block	2
0083+  00B1             current_thread		.block	2
0084+  00B3             vm_tail_thread		.block	2
0085+  00B5             lamp_flash_rate		.block	1
0086+  00B6             lamp_flash_count		.block	1
0087+  00B7             thread_timer_byte		.block	1
0088+  00B8             soundcount			.block	1
0089+  00B9             lastsound			.block	1
0090+  00BA             cur_sndflags		.block	1		;$00BA
0091+  00BB             soundptr			.block	2
0092+  00BD             soundirqcount		.block	2
0093+  00BF             soundindex_com		.block	2
0094+  00C1             sys_soundflags		.block	1
0095+  00C2             soundindex			.block	1
0096+  00C3             csound_timer		.block	2		;$00C3
0097+  00C5             next_sndflags		.block	1		;$00C5
0098+  00C6             next_sndcnt		      .block	1		;$00C6
0099+  00C7             next_sndcmd		      .block	1		;$00C7
0100+  00C8             flag_tilt			.block	1
0101+  00C9             flag_gameover		.block	1
0102+  00CA             flag_bonusball		.block	1
0103+  00CB             flags_selftest		.block	1
0104+  00CC             num_players			.block	1
0105+  00CD             player_up			.block	1
0106+  00CE             pscore_buf			.block	2
0107+  00D0             num_eb			.block	1
0108+  00D1             vm_pc				.block	2
0109+  00D3             num_tilt			.block	1
0110+  00D4             minutetimer			.block	2
0111+  00D6             flag_timer_bip		.block	1
0112+  00D7             randomseed			.block	1
0113+  00D8             x_temp_1			.block	2		;$00D8-D9
0114+  00DA             eb_x_temp			.block	2		;$00DA-DB
0115+  00DC             credit_x_temp		.block	2		;$00DC-DD
0116+  00DE             x_temp_2			.block	2
0117+  00E0             
0118+  00E0             ;***************************************************************
0119+  00E0             ;* Spare RAM: The last 32 bytes are available to the GAME ROM
0120+  00E0             ;*            if needed. Only the first 8 are defined by name.
0121+  00E0             ;***************************************************************
0122+  00E0             spare_ram			.block	1
0123+  00E1             spare_ram+1			.block	1
0124+  00E2             spare_ram+2			.block	1
0125+  00E3             spare_ram+3			.block	1
0126+  00E4             spare_ram+4			.block	1
0127+  00E5             spare_ram+5			.block	1
0128+  00E6             spare_ram+6			.block	1
0129+  00E7             spare_ram+7			.block	1
0130+  00E8             
0131+  00E8             ;***************************************************************
0132+  00E8             ;* CMOS RAM - The cmos RAM data bus is only 4-bits wide, so
0133+  00E8             ;*            each byte of data takes two consecutive address
0134+  00E8             ;*            locations. The lower address is the most 
0135+  00E8             ;*            significant nibble in the byte.
0136+  00E8             ;***************************************************************
0137+  0100             	.org $0100
0138+  0100             
0139+  0100             cmos_base
0140+  0100             cmos_csum			.block	2
0141+  0102             
0142+  0102             ;* First section is game audits
0143+  0102             aud_base
0144+  0102             aud_leftcoins		.block	4	;0102-0105	"Coins, Left Chute"
0145+  0106             aud_centercoins		.block	4	;0106-0109	"Coins, Center Chute"
0146+  010A             aud_rightcoins		.block	4	;010A-010D	"Coins, Right Chute"
0147+  010E             aud_paidcredits		.block	4	;010E-0111	Total Paid Credits
0148+  0112             aud_specialcredits	.block	4	;0112-0115	Special Credits
0149+  0116             aud_replaycredits		.block	4	;0116-0119	Replay Score Credits
0150+  011A             aud_matchcredits		.block	4	;011A-011D	Match Credits
0151+  011E             aud_totalcredits		.block	4	;011E-0121	Total Credits
0152+  0122             aud_extraballs		.block	4	;0122-0125	Total Extra Balls
0153+  0126             aud_avgballtime		.block	4	;0126-0129	Ball Time in Minutes
0154+  012A             aud_totalballs		.block	4	;012A-012D	Total Balls Played
0155+  012E             aud_game1			.block	4	;012E-0131	Game Specific Audit#1
0156+  0132             aud_game2			.block	4	;0132-0135	Game Specific Audit#2
0157+  0136             aud_game3			.block	4	;0136-0139	Game Specific Audit#3
0158+  013A             aud_game4			.block	4	;013A-013D	Game Specific Audit#4
0159+  013E             aud_game5			.block	4	;013E-0141	Game Specific Audit#5
0160+  0142             aud_game6			.block	4	;0142-0145	Game Specific Audit#6
0161+  0146             aud_game7			.block	4	;0146-0149	Game Specific Audit#7
0162+  014A             aud_autocycles		.block	4	;014A-014D	Number of Auto Cycles Completed
0163+  014E             aud_hstdcredits		.block	2	;014E-014F	2 -HSTD Credits Awarded
0164+  0150             aud_replay1times		.block	4	;0150-0153	2 -Times Exceeded
0165+  0154             aud_replay2times		.block	4	;0154-0157	2 -Times Exceeded
0166+  0158             aud_replay3times		.block	4	;0158-015B	2 -Times Exceeded
0167+  015C             aud_replay4times		.block	4	;015C-015F	2 -Times Exceeded
0168+  0160             
0169+  0160             				.block	2	;0160-0161	Unknown
0170+  0162             cmos_bonusunits		.block	2	;0162-1063	Hold Over Bonus Coin Units
0171+  0164             cmos_coinunits		.block	2	;0164-0165	Hold Over Total Coin Units
0172+  0166             				
0173+  0166             aud_currenthstd		.block	8	;0166-016D	Current HSTD
0174+  016E             aud_currentcredits	.block	2	;016D-016F  Current Credits			
0175+  0170             aud_command			.block	2	;0170-0171	Command Entry
0176+  0172             
0177+  0172             				.block	11
0178+  017D             
0179+  017D             
0180+  017D             
0181+  017D             
0182+  017D             ;* Then adjustments
0183+  017D             adj_base
0184+  017D             adj_cmoscsum			.block	4	;017D-0180	"Game #, ROM Revision"                                     
0185+  0181             adj_backuphstd			.block	2     ;0181-0182	Backup HSTD                                                
0186+  0183             adj_replay1				.block	2     ;0183-0184	Replay 1 Score                                             
0187+  0185             adj_replay2				.block	2     ;0185-0186	Replay 2 Score                                             
0188+  0187             adj_replay3				.block	2     ;0187-0188	Replay 3 Score                                             
0189+  0189             adj_replay4				.block	2     ;0189-018A	Replay 4 Score                                             
0190+  018B             adj_matchenable			.block	2     ;018B-018C	Match: 00=On 01=OFF                                        
0191+  018D             adj_specialaward			.block	2     ;018D-018E	Special:00=Awards Credit 01=Extra Ball 02=Awards Points    
0192+  018F             adj_replayaward			.block	2     ;018F-0190	Replay Scores: 00=Awards Credit 01=Extra Ball              
0193+  0191             adj_maxplumbbobtilts		.block	2     ;0191-0192	Max Plumb Bob Tilts                                        
0194+  0193             adj_numberofballs			.block	2     ;0193-0194	Number of Balls (3 or 5)                                   
0195+  0195             adj_gameadjust1			.block	2     ;0195-0196	Game Specific Adjustment#1                                 
0196+  0197             adj_gameadjust2			.block	2     ;0197-0198	Game Specific Adjustment#2                                 
0197+  0199             adj_gameadjust3			.block	2     ;0199-019A	Game Specific Adjustment#3                                 
0198+  019B             adj_gameadjust4			.block	2     ;019B-019C	Game Specific Adjustment#4                                 
0199+  019D             adj_gameadjust5			.block	2     ;019D-019E	Game Specific Adjustment#5                                 
0200+  019F             adj_gameadjust6			.block	2     ;019F-01A0	Game Specific Adjustment#6                                 
0201+  01A1             adj_gameadjust7			.block	2     ;01A1-01A2	Game Specific Adjustment#7                                 
0202+  01A3             adj_gameadjust8			.block	2     ;01A3-01A4	Game Specific Adjustment#8                                 
0203+  01A5             adj_gameadjust9			.block	2     ;01A5-01A6	Game Specific Adjustment#9                                 
0204+  01A7             adj_hstdcredits			.block	2     ;01A7-01A8	High Score Credit Award                                    
0205+  01A9             adj_max_extraballs		.block	2     ;01A9-019A	Maximum Extra Balls 00=No Extra Balls                      
0206+  01AB             adj_max_credits			.block	2     ;01AB-01AC	Maximum Credits                                            
0207+  01AD             adj_pricecontrol			.block	2     ;01AD-01AE	Standard/Custom Pricing Control   
0208+  01AF             
0209+  01AF             cmos_pricingbase                         
0210+  01AF             cmos_leftcoinmult			.block	2     ;01AF-01B0	Left Coin Slot Multiplier                                  
0211+  01B1             cmos_centercoinmult		.block	2     ;01B1-01B2	Center Coin Slot Multiplier    
0212+  01B3             cmos_rightcoinmult		.block	2     ;01B3-01B4	Right Coin Slot Multiplier     
0213+  01B5             cmos_coinsforcredit		.block	2     ;01B5-01B6	Coin Units Required for Credit 
0214+  01B7             cmos_bonuscoins			.block	2     ;01B7-01B8	Coin Units Bonus Point         
0215+  01B9             cmos_minimumcoins			.block	2     ;01B9-01BA	Minimum Coin Units             
0216+  01BB             
0217+  01BB             
0218+  01BB             
0219+  01BB             ;***************************************************************
0220+  01BB             ;* Extended RAM area. This RAM space was added in Level 7 games
0221+  01BB             ;* for extended flexibility.
0222+  01BB             ;***************************************************************
0223+  1100             	.org $1100
0224+  1100             
0225+  1100             switch_queue		.block	24
0226+  1118             
0227+  1118             switch_queue_full
0228+  1118             sol_queue			.block	16
0229+  1128             
0230+  1128             sol_queue_full
0231+  1128             score_queue			.block	8
0232+  1130             
0233+  1130             score_queue_full
0234+  1130             exe_buffer			.block	16		;Temp code buffer for exe macro
0235+  1140             p1_gamedata			.block	25
0236+  1159             p2_gamedata			.block	25
0237+  1172             p3_gamedata			.block	25
0238+  118B             p4_gamedata			.block	25
0239+  11A4             
0240+  11A4             
0241+  11A4             ;***************************************************************
0242+  11A4             ;* PIA Input/Output hardware
0243+  11A4             ;***************************************************************
0244+  11A4             ;* Some equates for indexing
0245+  11A4             pia_pir			.equ		0
0246+  11A4             pia_control			.equ		1
0247+  11A4             pia_pir_a			.equ		0
0248+  11A4             pia_control_a		.equ		1
0249+  11A4             pia_pir_b			.equ		2
0250+  11A4             pia_control_b		.equ		3
0251+  11A4             
0252+  11A4             
0253+  11A4             pia_sound_data		.equ		$2100
0254+  11A4             pia_sound_ctrl		.equ		$2101
0255+  11A4             pia_comma_data		.equ		$2102
0256+  11A4             pia_comma_ctrl		.equ		$2103
0257+  11A4             
0258+  11A4             pia_sol_low_data		.equ		$2200
0259+  11A4             pia_sol_low_ctrl		.equ		$2201
0260+  11A4             pia_sol_high_data		.equ		$2202
0261+  11A4             pia_sol_high_ctrl		.equ		$2203
0262+  11A4             
0263+  11A4             pia_lamp_row_data		.equ		$2400
0264+  11A4             pia_lamp_row_ctrl		.equ		$2401
0265+  11A4             pia_lamp_col_data		.equ		$2402
0266+  11A4             pia_lamp_col_ctrl		.equ		$2403
0267+  11A4             
0268+  11A4             pia_disp_digit_data	.equ		$2800
0269+  11A4             pia_disp_digit_ctrl	.equ		$2801
0270+  11A4             pia_disp_seg_data		.equ		$2802
0271+  11A4             pia_disp_seg_ctrl		.equ		$2803
0272+  11A4             
0273+  11A4             pia_switch_return_data	.equ		$3000
0274+  11A4             pia_switch_return_ctrl	.equ		$3001
0275+  11A4             pia_switch_strobe_data	.equ		$3002
0276+  11A4             pia_switch_strobe_ctrl	.equ		$3003
0277+  11A4             
0278+  11A4             
0279+  11A4             ;*******************************************
0280+  11A4             ;* Special PIA for Hyperball Driver Boards *
0281+  11A4             ;* Controls the Alpha-Numeric Display      *
0282+  11A4             ;*******************************************
0283+  11A4             pia_alphanum_digit_data	.equ		$4000
0284+  11A4             pia_alphanum_digit_ctrl	.equ		$4001
0285+  11A4             pia_alphanum_seg_data	.equ		$4002
0286+  11A4             pia_alphanum_seg_ctrl	.equ		$4003
0007   11A4             #include  "wvm7.asm"	;Level 7 macro defines
0001+  11A4             ;*****************************************************************************
0002+  11A4             ;* Williams Level 7 Virtual Machine Macro Definitions
0003+  11A4             ;*****************************************************************************
0004+  11A4             ;* Code copyright Williams Electronic Games Inc.
0005+  11A4             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  11A4             ;* For use with TASMx Assembler
0007+  11A4             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  11A4             ;* for more information.
0009+  11A4             ;* You may redistribute this file as long as this header remains intact.
0010+  11A4             ;*****************************************************************************
0011+  11A4             .module wml7
0012+  11A4             .msfirst
0013+  11A4             
0014+  11A4             wml1_       .equ  $00
0015+  11A4             wml2_       .equ  $00
0016+  11A4             wml3_       .equ  $00
0017+  11A4             wml4_       .equ  $00
0018+  11A4             wml5_       .equ  $00
0019+  11A4             wml6_       .equ  $00
0020+  11A4             
0021+  11A4             #define     FLAG_WML_IF       $10
0022+  11A4             #define     FLAG_WML_ELSE     $20
0023+  11A4             #define	FLAG_WML_BEGIN 	$40
0024+  11A4             #define     FLAG_WML_EXE      $80
0025+  11A4             
0026+  11A4             ;********************************************************
0027+  11A4             ;* First Define the Thread Structure used in the virtual 
0028+  11A4             ;* machine linked list.
0029+  11A4             ;********************************************************
0030+  11A4             ;* Next:	This is the pointer to the next thread in 
0031+  11A4             ;* 		the linked list. The VM requires this to 
0032+  11A4             ;*		move about the list of threads. This is 
0033+  11A4             ;* 		set by the VM thread handlers and does not
0034+  11A4             ;*          need to be manually fiddled with by the 
0035+  11A4             ;*          game program as it is automatic.
0036+  11A4             ;*
0037+  11A4             ;* Timer:	This is a byte timer (0-255) that holds the 
0038+  11A4             ;*          number of IRQ's counts required before the 
0039+  11A4             ;*          thread is executed. This is set by the 
0040+  11A4             ;*          programmer for delays between executions.	
0041+  11A4             ;*
0042+  11A4             ;* Vars:	When a thread is created, the originating
0043+  11A4             ;*          program may push up to 8 additional bytes
0044+  11A4             ;* 		of data onto the stack which will then be
0045+  11A4             ;*          placed into these 8 byte holders.
0046+  11A4             ;*
0047+  11A4             ;* PC:	This is the address of the program entry 
0048+  11A4             ;*          point that will be executed when the thread
0049+  11A4             ;*       	timer expires.
0050+  11A4             ;*
0051+  11A4             ;* ID:	The thread ID is a number that identifies 
0052+  11A4             ;* 		the thread type. The ID defintions are all
0053+  11A4             ;*		decided by the programmer except for thread
0054+  11A4             ;*		ID #06 which is a general 'end-of-ball' terminated
0055+  11A4             ;*		thread. Because the VM can destroy groups of 
0056+  11A4             ;* 		threads by ID and branch on existence of threads
0057+  11A4             ;*    	with certain ID's, this is a very important
0058+  11A4             ;*		design consideration. See the programming 
0059+  11A4             ;*  		manual for more information.
0060+  11A4             ;*	
0061+  11A4             ;* RegA:	This holds the value that was contained in 
0062+  11A4             ;*		the CPU register A when the Thread was created.
0063+  11A4             ;*
0064+  11A4             ;* RegB:	Similar to above, holds the value of CPU reg B.
0065+  11A4             ;*
0066+  11A4             ;* RegX:	Again, holds the value of the X register upon
0067+  11A4             ;*		thread creation.
0068+  11A4             ;*
0069+  11A4             ;************************************************************
0070+  11A4             
0071+  11A4             threadobj_next	.equ	$00
0072+  11A4             threadobj_timer	.equ	$02
0073+  11A4             threadobj_var1	.equ	$03
0074+  11A4             threadobj_var2	.equ	$04
0075+  11A4             threadobj_var3	.equ	$05
0076+  11A4             threadobj_var4	.equ	$06
0077+  11A4             threadobj_var5	.equ	$07
0078+  11A4             threadobj_var6	.equ	$09
0079+  11A4             threadobj_var7	.equ	$09
0080+  11A4             threadobj_var8	.equ	$0a
0081+  11A4             threadobj_pc	.equ	$0b
0082+  11A4             threadobj_id	.equ	$0d
0083+  11A4             threadobj_rega	.equ	$0e
0084+  11A4             threadobj_regb	.equ	$0f
0085+  11A4             threadobj_regx	.equ	$10
0086+  11A4             
0087+  11A4             ;********************************************************
0088+  11A4             ;* Now define some standard RAM locations etc...
0089+  11A4             ;********************************************************
0090+  11A4             rega	.equ	$00
0091+  11A4             regb	.equ	$01
0092+  11A4             
0093+  11A4             ;********************************************************
0094+  11A4             ;* Switch Table Equates
0095+  11A4             ;********************************************************
0096+  11A4             #define	SWITCHENTRY(a,b)	\.db a \.dw b
0097+  11A4             
0098+  11A4             sf_wml7	      .equ	$80
0099+  11A4             sf_code 	      .equ 	$00
0100+  11A4             sf_tilt	      .equ	$40
0101+  11A4             sf_notilt         .equ  $00
0102+  11A4             sf_gameover	      .equ	$20
0103+  11A4             sf_nogameover     .equ  $00
0104+  11A4             sf_enabled	      .equ	$10
0105+  11A4             sf_disabled       .equ  $00
0106+  11A4             sf_instant	      .equ	$08
0107+  11A4             sf_delayed        .equ  $00
0108+  11A4             
0109+  11A4             ;********************************************************
0110+  11A4             ;* Test for our current execution mode, CODE or WML7
0111+  11A4             ;* If we think the programmer has their code wrong, 
0112+  11A4             ;* then throw an error.
0113+  11A4             ;********************************************************
0114+  11A4             ;_MODECPU_         .equ  $00
0115+  11A4             ;_MODEWML_         .equ  $80
0116+  11A4             ;_CURRENTMODE_     .equ  _MODECPU_
0117+  11A4             ;
0118+  11A4             ;#define     _SETMODECPU_      \_CURRENTMODE_     .set  _MODECPU_
0119+  11A4             ;#define     _SETMODEWML_      \_CURRENTMODE_     .set  _MODEWML_
0120+  11A4             ;
0121+  11A4             ;#define     _CHECKWML_        \#if _CURRENTMODE_ != _MODEWML_
0122+  11A4             ;#defcont                      \     .error "WML7: Execution mode does not expect WML codes now, are you sure your code is structured properly?"
0123+  11A4             ;#defcont                      \#endif
0124+  11A4             ;
0125+  11A4             ;#define     _CHECKCPU_        \#if _CURRENTMODE_ != _MODECPU_
0126+  11A4             ;#defcont                      \     .error "WML7: Execution mode does not expect CPU codes now, are you sure your code is structured properly?"
0127+  11A4             ;#defcont                      \#endif
0128+  11A4             ;********************************************************
0129+  11A4             ;* Define our Level 7 macros.
0130+  11A4             ;********************************************************
0131+  11A4             
0132+  11A4             #define 	PC100_	\.db $00	
0133+  11A4             #define 	NOP_		\.db $01	
0134+  11A4             #define	MRTS_		\.db $02
0135+  11A4             #define	KILL_		\.db $03	
0136+  11A4             #define 	CPUX_		\.db $04
0137+  11A4             #define	SPEC_		\.db $05	
0138+  11A4             #define	EB_		\.db $06	
0139+  11A4             
0140+  11A4             ;********************************************************
0141+  11A4             ;* Lamp Macro Definition: These take care of turning lamps
0142+  11A4             ;*                        on/off and doing the basic lamp
0143+  11A4             ;*                        effects.
0144+  11A4             ;********************************************************
0145+  11A4             #define	BITX_(x,a)		      \.db x,a
0146+  11A4             #define	BITX_(x,a,b)		\.db x,((a&$7F)+$80),b
0147+  11A4             #define	BITX_(x,a,b,c)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),c
0148+  11A4             #define	BITX_(x,a,b,c,d)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0149+  11A4             #define	BITX_(x,a,b,c,d,e)	\.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0150+  11A4             #define	BITX_(x,a,b,c,d,e,f)    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
0151+  11A4             #define	BITX_(x,a,b,c,d,e,f,g)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
0152+  11A4             
0153+  11A4             #define	BITON_(a)		      \BITX_($10,a)
0154+  11A4             #define	BITON_(a,b)		      \BITX_($10,a,b)
0155+  11A4             #define	BITON_(a,b,c)	      \BITX_($10,a,b,c)
0156+  11A4             #define	BITON_(a,b,c,d)	      \BITX_($10,a,b,c,d)
0157+  11A4             #define	BITON_(a,b,c,d,e)	      \BITX_($10,a,b,c,d,e)
0158+  11A4             #define	BITON_(a,b,c,d,e,f)     \BITX_($10,a,b,c,d,e,f)
0159+  11A4             #define	BITON_(a,b,c,d,e,f,g)   \BITX_($10,a,b,c,d,e,f,g)
0160+  11A4             
0161+  11A4             #define	BITOFF_(a)		      \BITX_($11,a)            
0162+  11A4             #define	BITOFF_(a,b)		\BITX_($11,a,b)          
0163+  11A4             #define	BITOFF_(a,b,c)	      \BITX_($11,a,b,c)        
0164+  11A4             #define	BITOFF_(a,b,c,d)	      \BITX_($11,a,b,c,d)      
0165+  11A4             #define	BITOFF_(a,b,c,d,e)	\BITX_($11,a,b,c,d,e)    
0166+  11A4             #define	BITOFF_(a,b,c,d,e,f)    \BITX_($11,a,b,c,d,e,f)  
0167+  11A4             #define	BITOFF_(a,b,c,d,e,f,g)  \BITX_($11,a,b,c,d,e,f,g)
0168+  11A4                                                 
0169+  11A4             #define	BITINV_(a)		      \BITX_($12,a)            
0170+  11A4             #define	BITINV_(a,b)		\BITX_($12,a,b)          
0171+  11A4             #define	BITINV_(a,b,c)	      \BITX_($12,a,b,c)        
0172+  11A4             #define	BITINV_(a,b,c,d)	      \BITX_($12,a,b,c,d)      
0173+  11A4             #define	BITINV_(a,b,c,d,e)	\BITX_($12,a,b,c,d,e)    
0174+  11A4             #define	BITINV_(a,b,c,d,e,f)    \BITX_($12,a,b,c,d,e,f)  
0175+  11A4             #define	BITINV_(a,b,c,d,e,f,g)  \BITX_($12,a,b,c,d,e,f,g)
0176+  11A4             
0177+  11A4             #define	BITFL_(a)		      \BITX_($13,a)            
0178+  11A4             #define	BITFL_(a,b)			\BITX_($13,a,b)          
0179+  11A4             #define	BITFL_(a,b,c)	      \BITX_($13,a,b,c)        
0180+  11A4             #define	BITFL_(a,b,c,d)	      \BITX_($13,a,b,c,d)      
0181+  11A4             #define	BITFL_(a,b,c,d,e)		\BITX_($13,a,b,c,d,e)    
0182+  11A4             #define	BITFL_(a,b,c,d,e,f)    	\BITX_($13,a,b,c,d,e,f)  
0183+  11A4             #define	BITFL_(a,b,c,d,e,f,g)  	\BITX_($13,a,b,c,d,e,f,g)
0184+  11A4              
0185+  11A4             #define	BITONP_(a)		      \BITX_($14,a)            
0186+  11A4             #define	BITONP_(a,b)		\BITX_($14,a,b)          
0187+  11A4             #define	BITONP_(a,b,c)	      \BITX_($14,a,b,c)        
0188+  11A4             #define	BITONP_(a,b,c,d)	      \BITX_($14,a,b,c,d)      
0189+  11A4             #define	BITONP_(a,b,c,d,e)	\BITX_($14,a,b,c,d,e)    
0190+  11A4             #define	BITONP_(a,b,c,d,e,f)    \BITX_($14,a,b,c,d,e,f)  
0191+  11A4             #define	BITONP_(a,b,c,d,e,f,g)  \BITX_($14,a,b,c,d,e,f,g)
0192+  11A4             
0193+  11A4             #define	BITOFFP_(a)		      \BITX_($15,a)            
0194+  11A4             #define	BITOFFP_(a,b)		\BITX_($15,a,b)          
0195+  11A4             #define	BITOFFP_(a,b,c)	      \BITX_($15,a,b,c)        
0196+  11A4             #define	BITOFFP_(a,b,c,d)	      \BITX_($15,a,b,c,d)      
0197+  11A4             #define	BITOFFP_(a,b,c,d,e)	\BITX_($15,a,b,c,d,e)    
0198+  11A4             #define	BITOFFP_(a,b,c,d,e,f)   \BITX_($15,a,b,c,d,e,f)  
0199+  11A4             #define	BITOFFP_(a,b,c,d,e,f,g) \BITX_($15,a,b,c,d,e,f,g)
0200+  11A4             
0201+  11A4             #define	BITINVP_(a)		      \BITX_($16,a)            
0202+  11A4             #define	BITINVP_(a,b)		\BITX_($16,a,b)          
0203+  11A4             #define	BITINVP_(a,b,c)	      \BITX_($16,a,b,c)        
0204+  11A4             #define	BITINVP_(a,b,c,d)	      \BITX_($16,a,b,c,d)      
0205+  11A4             #define	BITINVP_(a,b,c,d,e)	\BITX_($16,a,b,c,d,e)    
0206+  11A4             #define	BITINVP_(a,b,c,d,e,f)   \BITX_($16,a,b,c,d,e,f)  
0207+  11A4             #define	BITINVP_(a,b,c,d,e,f,g) \BITX_($16,a,b,c,d,e,f,g)
0208+  11A4             
0209+  11A4             #define	BITFLP_(a)		      \BITX_($17,a)            
0210+  11A4             #define	BITFLP_(a,b)		\BITX_($17,a,b)          
0211+  11A4             #define	BITFLP_(a,b,c)	      \BITX_($17,a,b,c)        
0212+  11A4             #define	BITFLP_(a,b,c,d)	      \BITX_($17,a,b,c,d)      
0213+  11A4             #define	BITFLP_(a,b,c,d,e)	\BITX_($17,a,b,c,d,e)    
0214+  11A4             #define	BITFLP_(a,b,c,d,e,f)   	\BITX_($17,a,b,c,d,e,f)  
0215+  11A4             #define	BITFLP_(a,b,c,d,e,f,g) 	\BITX_($17,a,b,c,d,e,f,g)
0216+  11A4             
0217+  11A4             ;************************
0218+  11A4             ;* Lamp/Bit Effects
0219+  11A4             ;************************
0220+  11A4             #define	BE18_(a)		      \BITX_($18,a)            
0221+  11A4             #define	BE18_(a,b)			\BITX_($18,a,b)          
0222+  11A4             #define	BE18_(a,b,c)	      \BITX_($18,a,b,c)        
0223+  11A4             #define	BE18_(a,b,c,d)	      \BITX_($18,a,b,c,d)      
0224+  11A4             #define	BE18_(a,b,c,d,e)		\BITX_($18,a,b,c,d,e)    
0225+  11A4             #define	BE18_(a,b,c,d,e,f)   	\BITX_($18,a,b,c,d,e,f)  
0226+  11A4             #define	BE18_(a,b,c,d,e,f,g) 	\BITX_($18,a,b,c,d,e,f,g)
0227+  11A4             
0228+  11A4             #define	BE19_(a)		      \BITX_($19,a)            
0229+  11A4             #define	BE19_(a,b)			\BITX_($19,a,b)          
0230+  11A4             #define	BE19_(a,b,c)	      \BITX_($19,a,b,c)        
0231+  11A4             #define	BE19_(a,b,c,d)	      \BITX_($19,a,b,c,d)      
0232+  11A4             #define	BE19_(a,b,c,d,e)		\BITX_($19,a,b,c,d,e)    
0233+  11A4             #define	BE19_(a,b,c,d,e,f)   	\BITX_($19,a,b,c,d,e,f)  
0234+  11A4             #define	BE19_(a,b,c,d,e,f,g) 	\BITX_($19,a,b,c,d,e,f,g)
0235+  11A4             
0236+  11A4             #define	BE1A_(a)		      \BITX_($1A,a)            
0237+  11A4             #define	BE1A_(a,b)			\BITX_($1A,a,b)          
0238+  11A4             #define	BE1A_(a,b,c)	      \BITX_($1A,a,b,c)        
0239+  11A4             #define	BE1A_(a,b,c,d)	      \BITX_($1A,a,b,c,d)      
0240+  11A4             #define	BE1A_(a,b,c,d,e)		\BITX_($1A,a,b,c,d,e)    
0241+  11A4             #define	BE1A_(a,b,c,d,e,f)   	\BITX_($1A,a,b,c,d,e,f)  
0242+  11A4             #define	BE1A_(a,b,c,d,e,f,g) 	\BITX_($1A,a,b,c,d,e,f,g)
0243+  11A4             
0244+  11A4             #define	BE1B_(a)		      \BITX_($1B,a)            
0245+  11A4             #define	BE1B_(a,b)			\BITX_($1B,a,b)          
0246+  11A4             #define	BE1B_(a,b,c)	      \BITX_($1B,a,b,c)        
0247+  11A4             #define	BE1B_(a,b,c,d)	      \BITX_($1B,a,b,c,d)      
0248+  11A4             #define	BE1B_(a,b,c,d,e)		\BITX_($1B,a,b,c,d,e)    
0249+  11A4             #define	BE1B_(a,b,c,d,e,f)   	\BITX_($1B,a,b,c,d,e,f)  
0250+  11A4             #define	BE1B_(a,b,c,d,e,f,g) 	\BITX_($1B,a,b,c,d,e,f,g)
0251+  11A4             
0252+  11A4             #define	BE1C_(a)		      \BITX_($1C,a)            
0253+  11A4             #define	BE1C_(a,b)			\BITX_($1C,a,b)          
0254+  11A4             #define	BE1C_(a,b,c)	      \BITX_($1C,a,b,c)        
0255+  11A4             #define	BE1C_(a,b,c,d)	      \BITX_($1C,a,b,c,d)      
0256+  11A4             #define	BE1C_(a,b,c,d,e)		\BITX_($1C,a,b,c,d,e)    
0257+  11A4             #define	BE1C_(a,b,c,d,e,f)   	\BITX_($1C,a,b,c,d,e,f)  
0258+  11A4             #define	BE1C_(a,b,c,d,e,f,g) 	\BITX_($1C,a,b,c,d,e,f,g)
0259+  11A4             
0260+  11A4             #define	BE1D_(a)		      \BITX_($1D,a)            
0261+  11A4             #define	BE1D_(a,b)			\BITX_($1D,a,b)          
0262+  11A4             #define	BE1D_(a,b,c)	      \BITX_($1D,a,b,c)        
0263+  11A4             #define	BE1D_(a,b,c,d)	      \BITX_($1D,a,b,c,d)      
0264+  11A4             #define	BE1D_(a,b,c,d,e)		\BITX_($1D,a,b,c,d,e)    
0265+  11A4             #define	BE1D_(a,b,c,d,e,f)   	\BITX_($1D,a,b,c,d,e,f)  
0266+  11A4             #define	BE1D_(a,b,c,d,e,f,g) 	\BITX_($1D,a,b,c,d,e,f,g)
0267+  11A4             
0268+  11A4             #define	BE1E_(a)		      \BITX_($1E,a)            
0269+  11A4             #define	BE1E_(a,b)			\BITX_($1E,a,b)          
0270+  11A4             #define	BE1E_(a,b,c)	      \BITX_($1E,a,b,c)        
0271+  11A4             #define	BE1E_(a,b,c,d)	      \BITX_($1E,a,b,c,d)      
0272+  11A4             #define	BE1E_(a,b,c,d,e)		\BITX_($1E,a,b,c,d,e)    
0273+  11A4             #define	BE1E_(a,b,c,d,e,f)   	\BITX_($1E,a,b,c,d,e,f)  
0274+  11A4             #define	BE1E_(a,b,c,d,e,f,g) 	\BITX_($1E,a,b,c,d,e,f,g)
0275+  11A4             
0276+  11A4             #define	BE1F_(a)		      \BITX_($1F,a)            
0277+  11A4             #define	BE1F_(a,b)			\BITX_($1F,a,b)          
0278+  11A4             #define	BE1F_(a,b,c)	      \BITX_($1F,a,b,c)        
0279+  11A4             #define	BE1F_(a,b,c,d)	      \BITX_($1F,a,b,c,d)      
0280+  11A4             #define	BE1F_(a,b,c,d,e)		\BITX_($1F,a,b,c,d,e)    
0281+  11A4             #define	BE1F_(a,b,c,d,e,f)   	\BITX_($1F,a,b,c,d,e,f)  
0282+  11A4             #define	BE1F_(a,b,c,d,e,f,g) 	\BITX_($1F,a,b,c,d,e,f,g)
0283+  11A4             
0284+  11A4             ;BUFFER 2
0285+  11A4             
0286+  11A4             #define	BITON2_(a)		      	\BITX_($20,a)
0287+  11A4             #define	BITON2_(a,b)			\BITX_($20,a,b)
0288+  11A4             #define	BITON2_(a,b,c)	      	\BITX_($20,a,b,c)
0289+  11A4             #define	BITON2_(a,b,c,d)	      	\BITX_($20,a,b,c,d)
0290+  11A4             #define	BITON2_(a,b,c,d,e)		\BITX_($20,a,b,c,d,e)
0291+  11A4             #define	BITON2_(a,b,c,d,e,f)    	\BITX_($20,a,b,c,d,e,f)
0292+  11A4             #define	BITON2_(a,b,c,d,e,f,g)  	\BITX_($20,a,b,c,d,e,f,g)
0293+  11A4             
0294+  11A4             #define	BITOFF2_(a)		      	\BITX_($21,a)            
0295+  11A4             #define	BITOFF2_(a,b)			\BITX_($21,a,b)          
0296+  11A4             #define	BITOFF2_(a,b,c)	      	\BITX_($21,a,b,c)        
0297+  11A4             #define	BITOFF2_(a,b,c,d)	      	\BITX_($21,a,b,c,d)      
0298+  11A4             #define	BITOFF2_(a,b,c,d,e)		\BITX_($21,a,b,c,d,e)    
0299+  11A4             #define	BITOFF2_(a,b,c,d,e,f)   	\BITX_($21,a,b,c,d,e,f)  
0300+  11A4             #define	BITOFF2_(a,b,c,d,e,f,g) 	\BITX_($21,a,b,c,d,e,f,g)
0301+  11A4                                                 
0302+  11A4             #define	BITINV2_(a)		      	\BITX_($22,a)            
0303+  11A4             #define	BITINV2_(a,b)			\BITX_($22,a,b)          
0304+  11A4             #define	BITINV2_(a,b,c)	      	\BITX_($22,a,b,c)        
0305+  11A4             #define	BITINV2_(a,b,c,d)	      	\BITX_($22,a,b,c,d)      
0306+  11A4             #define	BITINV2_(a,b,c,d,e)		\BITX_($22,a,b,c,d,e)    
0307+  11A4             #define	BITINV2_(a,b,c,d,e,f)   	\BITX_($22,a,b,c,d,e,f)  
0308+  11A4             #define	BITINV2_(a,b,c,d,e,f,g) 	\BITX_($22,a,b,c,d,e,f,g)
0309+  11A4             
0310+  11A4             #define	BITFL2_(a)		      	\BITX_($23,a)            
0311+  11A4             #define	BITFL2_(a,b)			\BITX_($23,a,b)          
0312+  11A4             #define	BITFL2_(a,b,c)	      	\BITX_($23,a,b,c)        
0313+  11A4             #define	BITFL2_(a,b,c,d)	      	\BITX_($23,a,b,c,d)      
0314+  11A4             #define	BITFL2_(a,b,c,d,e)		\BITX_($23,a,b,c,d,e)    
0315+  11A4             #define	BITFL2_(a,b,c,d,e,f)    	\BITX_($23,a,b,c,d,e,f)  
0316+  11A4             #define	BITFL2_(a,b,c,d,e,f,g)  	\BITX_($23,a,b,c,d,e,f,g)
0317+  11A4              
0318+  11A4             #define	BITONP2_(a)		      	\BITX_($24,a)            
0319+  11A4             #define	BITONP2_(a,b)			\BITX_($24,a,b)          
0320+  11A4             #define	BITONP2_(a,b,c)	      	\BITX_($24,a,b,c)        
0321+  11A4             #define	BITONP2_(a,b,c,d)	      	\BITX_($24,a,b,c,d)      
0322+  11A4             #define	BITONP2_(a,b,c,d,e)		\BITX_($24,a,b,c,d,e)    
0323+  11A4             #define	BITONP2_(a,b,c,d,e,f)   	\BITX_($24,a,b,c,d,e,f)  
0324+  11A4             #define	BITONP2_(a,b,c,d,e,f,g) 	\BITX_($24,a,b,c,d,e,f,g)
0325+  11A4             
0326+  11A4             #define	BITOFFP2_(a)			\BITX_($25,a)            
0327+  11A4             #define	BITOFFP2_(a,b)			\BITX_($25,a,b)          
0328+  11A4             #define	BITOFFP2_(a,b,c)	      	\BITX_($25,a,b,c)        
0329+  11A4             #define	BITOFFP2_(a,b,c,d)		\BITX_($25,a,b,c,d)      
0330+  11A4             #define	BITOFFP2_(a,b,c,d,e)		\BITX_($25,a,b,c,d,e)    
0331+  11A4             #define	BITOFFP2_(a,b,c,d,e,f)  	\BITX_($25,a,b,c,d,e,f)  
0332+  11A4             #define	BITOFFP2_(a,b,c,d,e,f,g)	\BITX_($25,a,b,c,d,e,f,g)
0333+  11A4             
0334+  11A4             #define	BITINVP2_(a)			\BITX_($26,a)            
0335+  11A4             #define	BITINVP2_(a,b)			\BITX_($26,a,b)          
0336+  11A4             #define	BITINVP2_(a,b,c)	      	\BITX_($26,a,b,c)        
0337+  11A4             #define	BITINVP2_(a,b,c,d)		\BITX_($26,a,b,c,d)      
0338+  11A4             #define	BITINVP2_(a,b,c,d,e)		\BITX_($26,a,b,c,d,e)    
0339+  11A4             #define	BITINVP2_(a,b,c,d,e,f)   	\BITX_($26,a,b,c,d,e,f)  
0340+  11A4             #define	BITINVP2_(a,b,c,d,e,f,g) 	\BITX_($26,a,b,c,d,e,f,g)
0341+  11A4             
0342+  11A4             #define	BITFLP2_(a)		      	\BITX_($27,a)            
0343+  11A4             #define	BITFLP2_(a,b)			\BITX_($27,a,b)          
0344+  11A4             #define	BITFLP2_(a,b,c)	      	\BITX_($27,a,b,c)        
0345+  11A4             #define	BITFLP2_(a,b,c,d)	      	\BITX_($27,a,b,c,d)      
0346+  11A4             #define	BITFLP2_(a,b,c,d,e)		\BITX_($27,a,b,c,d,e)    
0347+  11A4             #define	BITFLP2_(a,b,c,d,e,f)   	\BITX_($27,a,b,c,d,e,f)  
0348+  11A4             #define	BITFLP2_(a,b,c,d,e,f,g) 	\BITX_($27,a,b,c,d,e,f,g)
0349+  11A4             
0350+  11A4             ;************************
0351+  11A4             ;* Lamp/Bit Effects
0352+  11A4             ;************************
0353+  11A4             #define	BE28_(a)		      \BITX_($28,a)            
0354+  11A4             #define	BE28_(a,b)			\BITX_($28,a,b)          
0355+  11A4             #define	BE28_(a,b,c)	      \BITX_($28,a,b,c)        
0356+  11A4             #define	BE28_(a,b,c,d)	      \BITX_($28,a,b,c,d)      
0357+  11A4             #define	BE28_(a,b,c,d,e)		\BITX_($28,a,b,c,d,e)    
0358+  11A4             #define	BE28_(a,b,c,d,e,f)   	\BITX_($28,a,b,c,d,e,f)  
0359+  11A4             #define	BE28_(a,b,c,d,e,f,g) 	\BITX_($28,a,b,c,d,e,f,g)
0360+  11A4             
0361+  11A4             #define	BE29_(a)		      \BITX_($29,a)            
0362+  11A4             #define	BE29_(a,b)			\BITX_($29,a,b)          
0363+  11A4             #define	BE29_(a,b,c)	      \BITX_($29,a,b,c)        
0364+  11A4             #define	BE29_(a,b,c,d)	      \BITX_($29,a,b,c,d)      
0365+  11A4             #define	BE29_(a,b,c,d,e)		\BITX_($29,a,b,c,d,e)    
0366+  11A4             #define	BE29_(a,b,c,d,e,f)   	\BITX_($29,a,b,c,d,e,f)  
0367+  11A4             #define	BE29_(a,b,c,d,e,f,g) 	\BITX_($29,a,b,c,d,e,f,g)
0368+  11A4             
0369+  11A4             #define	BE2A_(a)		      \BITX_($2A,a)            
0370+  11A4             #define	BE2A_(a,b)			\BITX_($2A,a,b)          
0371+  11A4             #define	BE2A_(a,b,c)	      \BITX_($2A,a,b,c)        
0372+  11A4             #define	BE2A_(a,b,c,d)	      \BITX_($2A,a,b,c,d)      
0373+  11A4             #define	BE2A_(a,b,c,d,e)		\BITX_($2A,a,b,c,d,e)    
0374+  11A4             #define	BE2A_(a,b,c,d,e,f)   	\BITX_($2A,a,b,c,d,e,f)  
0375+  11A4             #define	BE2A_(a,b,c,d,e,f,g) 	\BITX_($2A,a,b,c,d,e,f,g)
0376+  11A4             
0377+  11A4             #define	BE2B_(a)		      \BITX_($2B,a)            
0378+  11A4             #define	BE2B_(a,b)			\BITX_($2B,a,b)          
0379+  11A4             #define	BE2B_(a,b,c)	      \BITX_($2B,a,b,c)        
0380+  11A4             #define	BE2B_(a,b,c,d)	      \BITX_($2B,a,b,c,d)      
0381+  11A4             #define	BE2B_(a,b,c,d,e)		\BITX_($2B,a,b,c,d,e)    
0382+  11A4             #define	BE2B_(a,b,c,d,e,f)   	\BITX_($2B,a,b,c,d,e,f)  
0383+  11A4             #define	BE2B_(a,b,c,d,e,f,g) 	\BITX_($2B,a,b,c,d,e,f,g)
0384+  11A4             
0385+  11A4             #define	BE2C_(a)		      \BITX_($2C,a)            
0386+  11A4             #define	BE2C_(a,b)			\BITX_($2C,a,b)          
0387+  11A4             #define	BE2C_(a,b,c)	      \BITX_($2C,a,b,c)        
0388+  11A4             #define	BE2C_(a,b,c,d)	      \BITX_($2C,a,b,c,d)      
0389+  11A4             #define	BE2C_(a,b,c,d,e)		\BITX_($2C,a,b,c,d,e)    
0390+  11A4             #define	BE2C_(a,b,c,d,e,f)   	\BITX_($2C,a,b,c,d,e,f)  
0391+  11A4             #define	BE2C_(a,b,c,d,e,f,g) 	\BITX_($2C,a,b,c,d,e,f,g)
0392+  11A4             
0393+  11A4             #define	BE2D_(a)		      \BITX_($2D,a)            
0394+  11A4             #define	BE2D_(a,b)			\BITX_($2D,a,b)          
0395+  11A4             #define	BE2D_(a,b,c)	      \BITX_($2D,a,b,c)        
0396+  11A4             #define	BE2D_(a,b,c,d)	      \BITX_($2D,a,b,c,d)      
0397+  11A4             #define	BE2D_(a,b,c,d,e)		\BITX_($2D,a,b,c,d,e)    
0398+  11A4             #define	BE2D_(a,b,c,d,e,f)   	\BITX_($2D,a,b,c,d,e,f)  
0399+  11A4             #define	BE2D_(a,b,c,d,e,f,g) 	\BITX_($2D,a,b,c,d,e,f,g)
0400+  11A4             
0401+  11A4             #define	BE2E_(a)		      \BITX_($2E,a)            
0402+  11A4             #define	BE2E_(a,b)			\BITX_($2E,a,b)          
0403+  11A4             #define	BE2E_(a,b,c)	      \BITX_($2E,a,b,c)        
0404+  11A4             #define	BE2E_(a,b,c,d)	      \BITX_($2E,a,b,c,d)      
0405+  11A4             #define	BE2E_(a,b,c,d,e)		\BITX_($2E,a,b,c,d,e)    
0406+  11A4             #define	BE2E_(a,b,c,d,e,f)   	\BITX_($2E,a,b,c,d,e,f)  
0407+  11A4             #define	BE2E_(a,b,c,d,e,f,g) 	\BITX_($2E,a,b,c,d,e,f,g)
0408+  11A4             
0409+  11A4             #define	BE2F_(a)		      \BITX_($2F,a)            
0410+  11A4             #define	BE2F_(a,b)			\BITX_($2F,a,b)          
0411+  11A4             #define	BE2F_(a,b,c)	      \BITX_($2F,a,b,c)        
0412+  11A4             #define	BE2F_(a,b,c,d)	      \BITX_($2F,a,b,c,d)      
0413+  11A4             #define	BE2F_(a,b,c,d,e)		\BITX_($2F,a,b,c,d,e)    
0414+  11A4             #define	BE2F_(a,b,c,d,e,f)   	\BITX_($2F,a,b,c,d,e,f)  
0415+  11A4             #define	BE2F_(a,b,c,d,e,f,g) 	\BITX_($2F,a,b,c,d,e,f,g)
0416+  11A4             
0417+  11A4             ;********************************************************
0418+  11A4             ;* Solenoid Macro Definition: Up to 15 Solenoids are Supported
0419+  11A4             ;* 
0420+  11A4             ;* The macro takes a coded value of the solenoid number 
0421+  11A4             ;* and the number of IRQ's to leave the solenoid on.
0422+  11A4             ;* You can define the solenoid number plus the time by using
0423+  11A4             ;* the equates following this macro definition...
0424+  11A4             ;* 
0425+  11A4             ;* Example #1:  Turn on Solenoid #1 for 4 IRQ cycles
0426+  11A4             ;*
0427+  11A4             ;*          sol_1_on    .equ  $00+SOLENOID_ON_4_CYCLES
0428+  11A4             ;*          sol_1_off   .equ  $00+SOLENOID_OFF
0429+  11A4             ;* 
0430+  11A4             ;* Then use the SOL_ macro...
0431+  11A4             ;*
0432+  11A4             ;*    Turn it on:       SOL_(sol_1_on)
0433+  11A4             ;*    Turn it off:      SOL_(sol_1_off)
0434+  11A4             ;*
0435+  11A4             ;* Example #2:  Turn on Solenoid #15 indefinitely, and Solenoid #6 for 2 IRQ cycles
0436+  11A4             ;*
0437+  11A4             ;*          sol_15_on   .equ  $0E+SOLENOID_ON_LATCH
0438+  11A4             ;*          sol_15_off  .equ  $0E+SOLENOID_OFF
0439+  11A4             ;*
0440+  11A4             ;*          sol_2_on    .equ  $01+SOLENOID_ON_2_CYCLES
0441+  11A4             ;*          sol_2_off   .equ  $01+SOLENOID_OFF
0442+  11A4             ;* 
0443+  11A4             ;* Then use the SOL_ macro...
0444+  11A4             ;*
0445+  11A4             ;*    Turn them on:       SOL_(sol_15_on,sol_2_on)
0446+  11A4             ;*    Turn them off:      SOL_(sol_15_off,sol_2_off)
0447+  11A4             ;********************************************************
0448+  11A4             #define	SOL_(a)		                  \.db $31,a
0449+  11A4             #define	SOL_(a,b)		                  \.db $32,a,b
0450+  11A4             #define 	SOL_(a,b,c)		                  \.db $33,a,b,c
0451+  11A4             #define	SOL_(a,b,c,d)	                  \.db $34,a,b,c,d
0452+  11A4             #define	SOL_(a,b,c,d,e)	                  \.db $35,a,b,c,d,e
0453+  11A4             #define	SOL_(a,b,c,d,e,f)	                  \.db $36,a,b,c,d,e,f
0454+  11A4             #define	SOL_(a,b,c,d,e,f,g)	            \.db $37,a,b,c,d,e,f,g
0455+  11A4             #define	SOL_(a,b,c,d,e,f,g,h)	            \.db $38,a,b,c,d,e,f,g,h
0456+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i)	            \.db $39,a,b,c,d,e,f,g,h,i
0457+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j)	      \.db $3A,a,b,c,d,e,f,g,h,i,j
0458+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k)	      \.db $3B,a,b,c,d,e,f,g,h,i,j,k
0459+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l)	      \.db $3C,a,b,c,d,e,f,g,h,i,j,k,l
0460+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m)	\.db $3D,a,b,c,d,e,f,g,h,i,j,k,l,m
0461+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n)	\.db $3E,a,b,c,d,e,f,g,h,i,j,k,l,m,n
0462+  11A4             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)	\.db $3F,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o
0463+  11A4             
0464+  11A4             ;********************************************************
0465+  11A4             ;* some additional solenoid defines for timing
0466+  11A4             ;* Use these in the top of your game definition to specify 
0467+  11A4             ;* static lables for each solenoid
0468+  11A4             ;********************************************************
0469+  11A4             SOLENOID_ON_1_CYCLES       .equ  $20
0470+  11A4             SOLENOID_ON_2_CYCLES       .equ  $40
0471+  11A4             SOLENOID_ON_3_CYCLES       .equ  $60
0472+  11A4             SOLENOID_ON_4_CYCLES       .equ  $80
0473+  11A4             SOLENOID_ON_5_CYCLES       .equ  $A0
0474+  11A4             SOLENOID_ON_6_CYCLES       .equ  $C0
0475+  11A4             SOLENOID_ON_LATCH          .equ  $E0
0476+  11A4             SOLENOID_OFF               .equ  $00
0477+  11A4             
0478+  11A4             ;********************************************************
0479+  11A4             ;* Macros 40-43: Static Length, easy
0480+  11A4             ;********************************************************
0481+  11A4             #define	PTSND_(snd,count,unit)	\.db $40,snd      \ ADDPOINTS_(count,unit)
0482+  11A4             
0483+  11A4             #define	PTCHIME_(count,unit)	\.db $41    \ ADDPOINTS_(count,unit)
0484+  11A4             
0485+  11A4             #define	POINTS_(count,unit)	\.db $42    \ ADDPOINTS_(count,unit)
0486+  11A4             
0487+  11A4             #define	PTSDIG_(count,unit)	\.db $43    \ ADDPOINTS_(count,unit)
0488+  11A4             
0489+  11A4             #define     ADDPOINTS_(count,unit)  \#if ((unit < 10) & (count <= 32))
0490+  11A4             #defcont				      \	.error "Point unit must be multples of 10 and count must be less than 33"
0491+  11A4             #defcont				      \#else
0492+  11A4             #defcont					      \#if (unit == 10)
0493+  11A4             #defcont					      \	.db (((count)<<3)&$F8)+1
0494+  11A4             #defcont					      \#else 
0495+  11A4             #defcont					      	\#if (unit == 100)
0496+  11A4             #defcont						      \	.db (((count)<<3)&$F8)+2
0497+  11A4             #defcont						      \#else 
0498+  11A4             #defcont							      \#if (unit == 1000)
0499+  11A4             #defcont							      \	.db (((count)<<3)&$F8)+3
0500+  11A4             #defcont							      \#else 
0501+  11A4             #defcont								      \#if (unit == 10000)
0502+  11A4             #defcont								      \	.db (((count)<<3)&$F8)+4
0503+  11A4             #defcont								      \#else 
0504+  11A4             #defcont									      \#if (unit == 100000)
0505+  11A4             #defcont									      \	.db (((count)<<3)&$F8)+5
0506+  11A4             #defcont									      \#else 
0507+  11A4             #defcont									      \	.error "Macros only support points under 1,000,000 points"
0508+  11A4             #defcont									      \#endif
0509+  11A4             #defcont								      \#endif
0510+  11A4             #defcont							      \#endif
0511+  11A4             #defcont						      \#endif
0512+  11A4             #defcont					      \#endif
0513+  11A4             #defcont				      \#endif
0514+  11A4             
0515+  11A4             
0516+  11A4             
0517+  11A4             ;********************************************************
0518+  11A4             ;* Macros 44-4F: Define temporary execution of CPU code.
0519+  11A4             ;*               The length of bytes to execute is in 
0520+  11A4             ;*               the lower nibble and must be between
0521+  11A4             ;*               4-f. Therefore, number of bytes to 
0522+  11A4             ;*               execute must be between 2 and 13.
0523+  11A4             :*
0524+  11A4             ;* There are two macros defined here, the first is the
0525+  11A4             ;* new style macro where it will automatically calculate
0526+  11A4             ;* the number of opcode bytes that are executed. This 
0527+  11A4             ;* style requires and end tag for the macro called EXEEND_
0528+  11A4             ;* that marks where execution returns to WML7.
0529+  11A4             ;*
0530+  11A4             ;* The old style macro does not require an end tag but
0531+  11A4             ;* does require you to calcuate the number of bytes that
0532+  11A4             ;* will be executed as native 680X code. This is obviously
0533+  11A4             ;* more tedious but I left it here for some reason. 
0534+  11A4             ;********************************************************
0535+  11A4             #define     EXE_              \.push *,FLAG_WML_EXE
0536+  11A4             #defcont                      \.db $44
0537+  11A4             
0538+  11A4             #define     EXEEND_           \wml4_ .set *
0539+  11A4             #defcont                      \.pop wml1_,wml2_
0540+  11A4             #defcont                      \#if wml1_ == FLAG_WML_EXE
0541+  11A4             #defcont                            \wml3_ .set wml4_-wml2_
0542+  11A4             #defcont                            \#if (wml3_>14)|(wml3_<3)
0543+  11A4             #defcont                            \     .error "Macro EXE_: Number of executed bytes must be between 2 and 15"
0544+  11A4             #defcont                            \#else
0545+  11A4             #defcont                            \     .org wml2_
0546+  11A4             #defcont                            \     .db $44+wml3_-3
0547+  11A4             #defcont                            \#endif
0548+  11A4             #defcont                            \.org wml4_
0549+  11A4             #defcont                      \#else
0550+  11A4             #defcont                            \.error "EXEEND_ did not have a starting EXE_ code"
0551+  11A4             #defcont                      \#endif
0552+  11A4             
0553+  11A4                
0554+  11A4             #define	EXE_(a)		\#if (a>13)|(a<2)
0555+  11A4             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0556+  11A4             #defcont				\#else
0557+  11A4             #defcont				\    .db ($44+a-2)
0558+  11A4             #defcont				\#endif
0559+  11A4             
0560+  11A4             ;********************************************************
0561+  11A4             ;* Macros 50-57:
0562+  11A4             ;********************************************************
0563+  11A4             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0564+  11A4             #defcont				\	.db $50,((a*16)+b) 
0565+  11A4             #defcont				\#else
0566+  11A4             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0567+  11A4             #defcont				\#endif
0568+  11A4             
0569+  11A4             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0570+  11A4             #defcont				\	.db $51,((a*16)+b) 
0571+  11A4             #defcont				\#else
0572+  11A4             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0573+  11A4             #defcont				\#endif
0574+  11A4             
0575+  11A4             #define	PRI_(a)		\.db $52,a
0576+  11A4             
0577+  11A4             #define	SLEEP_(a)		\#if (a<16)
0578+  11A4             #defcont				\	.db ($70+a)
0579+  11A4             #defcont				\#else
0580+  11A4             #defcont				\	.db $53,a
0581+  11A4             #defcont				\#endif
0582+  11A4             
0583+  11A4             #define	REMTHREAD_(a,b)	\.db $54,a,b
0584+  11A4             
0585+  11A4             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0586+  11A4             
0587+  11A4             #define 	JSR_(a)		\.db $56 \.dw a
0588+  11A4             #define	JSRD_(a)		\.db $57 \.dw a
0589+  11A4             
0590+  11A4             ;*******************************************************************
0591+  11A4             ;* Branch Macros: 58-5B
0592+  11A4             ;*******************************************************************
0593+  11A4             #define     IFLOC_(type,vars)    \ .push  *, vars, type        
0594+  11A4             
0595+  11A4             ;*******************************************************************
0596+  11A4             ;* Begin: The start marker for logical loops, must terminate with  *
0597+  11A4             ;*        an 'XXEND_' statement.                                    *
0598+  11A4             ;******************************************************************* 
0599+  11A4             #define     BEGIN_	      IFLOC_(FLAG_WML_BEGIN,0)
0600+  11A4             
0601+  11A4             ;*******************************************************************
0602+  11A4             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0603+  11A4             ;*            pulls the pc location of the beginning of the loop   *
0604+  11A4             ;*            and verifies that the 'type' is correct.             *
0605+  11A4             ;*******************************************************************
0606+  11A4             #define 	LOGIC_LOOPEND_(vars)	\ .pop wml1_, wml2_, wml3_
0607+  11A4             #defcont						\wml2_ .set vars
0608+  11A4             #defcont						\wml4_ .set *
0609+  11A4             #defcont						\#if (wml1_ & FLAG_WML_BEGIN)
0610+  11A4             #defcont							\#if ((wml4_-wml3_) <= 127)
0611+  11A4             #defcont								\ .org wml4_-1
0612+  11A4             #defcont								\ .db wml3_-wml4_
0613+  11A4             #defcont								\ .org wml4_
0614+  11A4             #defcont							\#else
0615+  11A4             #defcont								\ .error "Loop Branch out of Range."
0616+  11A4             #defcont							\#endif
0617+  11A4             #defcont						\#else
0618+  11A4             #defcont							\ .error "Inappropriate End for BEGIN Loop."
0619+  11A4             #defcont						\#endif
0620+  11A4             
0621+  11A4             ;*******************************************************************
0622+  11A4             ;* Basic Loop
0623+  11A4             ;*******************************************************************
0624+  11A4             #define	LOOP_		\ .pop wml1_, wml2_, wml3_ \ JMPR_(wml3_)
0625+  11A4             
0626+  11A4             ;*******************************************************************
0627+  11A4             ;* Conditional Looping
0628+  11A4             ;*******************************************************************
0629+  11A4             #define	EQEND_(z)						BNER_(z,*+3) \ LOGIC_LOOPEND_(1)		
0630+  11A4             #define	EQEND_(z,y)						BNER_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0631+  11A4             #define	EQEND_(z,y,x)					BNER_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0632+  11A4             #define	EQEND_(z,y,x,w)					BNER_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0633+  11A4             #define	EQEND_(z,y,x,w,v)					BNER_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0634+  11A4             #define     EQEND_(z,y,x,w,v,u)				BNER_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0635+  11A4             #define     EQEND_(z,y,x,w,v,u,t)			     	BNER_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0636+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s)     			BNER_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0637+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r)     		BNER_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0638+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q)     		BNER_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0639+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p)     		BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0640+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0641+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0642+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0643+  11A4             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0644+  11A4             
0645+  11A4             #define	NEEND_(z)						BEQR_(z,*+3) \ LOGIC_LOOPEND_(1)		
0646+  11A4             #define	NEEND_(z,y)						BEQR_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0647+  11A4             #define	NEEND_(z,y,x)					BEQR_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0648+  11A4             #define	NEEND_(z,y,x,w)					BEQR_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0649+  11A4             #define	NEEND_(z,y,x,w,v)					BEQR_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0650+  11A4             #define     NEEND_(z,y,x,w,v,u)				BEQR_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0651+  11A4             #define     NEEND_(z,y,x,w,v,u,t)			     	BEQR_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0652+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s)     			BEQR_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0653+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r)     		BEQR_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0654+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q)     		BEQR_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0655+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p)     		BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0656+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0657+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0658+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0659+  11A4             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0660+  11A4             ;*******************************************************************
0661+  11A4             ;* IFxxx: These are the standard 'if' statements, they will always  
0662+  11A4             ;*        be of type FLAG_WML_IF                                           
0663+  11A4             ;*******************************************************************
0664+  11A4             #define     IFEQR_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BNER_(z,*+3)     
0665+  11A4             #define     IFEQR_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BNER_(z,y,*+3)   
0666+  11A4             #define     IFEQR_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BNER_(z,y,x,*+3) 
0667+  11A4             #define     IFEQR_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BNER_(z,y,x,w,*+3)   
0668+  11A4             #define     IFEQR_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BNER_(z,y,x,w,v,*+3) 
0669+  11A4             #define     IFEQR_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BNER_(z,y,x,w,v,u,*+3) 
0670+  11A4             #define     IFEQR_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BNER_(z,y,x,w,v,u,t,*+3) 
0671+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BNER_(z,y,x,w,v,u,t,s,*+3) 
0672+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BNER_(z,y,x,w,v,u,t,s,r,*+3)
0673+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BNER_(z,y,x,w,v,u,t,s,r,q,*+3)
0674+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0675+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0676+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0677+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0678+  11A4             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0679+  11A4             
0680+  11A4             #define     IFNER_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BEQR_(z,*+3)     
0681+  11A4             #define     IFNER_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BEQR_(z,y,*+3)   
0682+  11A4             #define     IFNER_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BEQR_(z,y,x,*+3) 
0683+  11A4             #define     IFNER_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BEQR_(z,y,x,w,*+3) 
0684+  11A4             #define     IFNER_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BEQR_(z,y,x,w,v,*+3) 
0685+  11A4             #define     IFNER_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BEQR_(z,y,x,w,v,u,*+3) 
0686+  11A4             #define     IFNER_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BEQR_(z,y,x,w,v,u,t,*+3) 
0687+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BEQR_(z,y,x,w,v,u,t,s,*+3) 
0688+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BEQR_(z,y,x,w,v,u,t,s,r,*+3)
0689+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BEQR_(z,y,x,w,v,u,t,s,r,q,*+3)
0690+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0691+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0692+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0693+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0694+  11A4             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0695+  11A4             
0696+  11A4             #define     ENDIF_ \wml1_ .set *
0697+  11A4             #defcont		 \ .pop wml3_, wml5_, wml4_
0698+  11A4             #defcont		 \#if (wml3_ & FLAG_WML_BEGIN)==0
0699+  11A4             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0700+  11A4             #defcont  			      \wml2_ .set wml1_-wml4_-wml5_-2
0701+  11A4             #defcont			      \#if wml2_+127 < 0
0702+  11A4             #defcont				      \ .error "Branch Range < -127"
0703+  11A4             #defcont			      \#else
0704+  11A4             #defcont				      \#if wml2_-128 > 0
0705+  11A4             #defcont					      \ .error "Branch Range > 128"
0706+  11A4             #defcont				      \#else
0707+  11A4             #defcont    				      \ .org wml4_+wml5_+1
0708+  11A4             #defcont					      \ .byte wml2_
0709+  11A4             #defcont				      \#endif
0710+  11A4             #defcont			      \#endif
0711+  11A4             #defcont                \#else
0712+  11A4             #defcont                      \ .org  wml4_-2	
0713+  11A4             #defcont				\ JMP_(wml1_)
0714+  11A4             #defcont                      \ .error "123: Not Tested"
0715+  11A4             #defcont                \#endif
0716+  11A4             #defcont			\ .org	wml1_
0717+  11A4             #defcont		 \#else
0718+  11A4             #defcont			\.error "Wrong Endtype for IFXXR_ block"
0719+  11A4             #defcont		 \#endif
0720+  11A4             
0721+  11A4             #define	ELSE_	\wml1_ .set $
0722+  11A4             #defcont		\ .pop wml3_, wml5_, wml4_
0723+  11A4             #defcont		\#if (wml3_ & FLAG_WML_BEGIN)==0
0724+  11A4             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0725+  11A4             #defcont				\ .org wml4_+wml5_+1
0726+  11A4             #defcont				\wml2_ .set wml1_-wml4_
0727+  11A4             #defcont					\#if wml2_+127 < 0
0728+  11A4             #defcont						\ .org wml1_
0729+  11A4             #defcont						\.push wml1_+3, wml5_, FLAG_WML_ELSE
0730+  11A4             #defcont						\ JMP_($)
0731+  11A4             #defcont                                  \ .error "(124)ELSE_: Not Tested with long JMP"
0732+  11A4             #defcont					\#else
0733+  11A4             #defcont						\#if wml2_-128>0
0734+  11A4             #defcont							\ .org wml1_
0735+  11A4             #defcont							\.push wml1_+3, wml5_, FLAG_WML_ELSE
0736+  11A4             #defcont							\ JMP_($)
0737+  11A4             #defcont                                  \ .error "(125)ELSE_: Not Tested with long JMP"
0738+  11A4             #defcont						\#else
0739+  11A4             #defcont							\.push wml1_-wml5_, wml5_, FLAG_WML_IF
0740+  11A4             #defcont							\ .byte wml2_-wml5_
0741+  11A4             #defcont							\ .org wml1_
0742+  11A4             #defcont							\ JMPR_($+1)
0743+  11A4             #defcont							\ .org wml1_+2
0744+  11A4             #defcont						\#endif
0745+  11A4             #defcont					\#endif
0746+  11A4             #defcont			\#else
0747+  11A4             #defcont				\.error "Duplicate ELSE Statement"
0748+  11A4             #defcont			\#endif
0749+  11A4             #defcont		\#else
0750+  11A4             #defcont			\ .error "Misplaced Else"
0751+  11A4             #defcont		\#endif
0752+  11A4             
0753+  11A4             #define     BEQR_(p1__,ba__)     \#if $+3-ba__ < 128
0754+  11A4             #defcont                                 \.db $5A,p1__,ba__-$-3
0755+  11A4             #defcont				\#else
0756+  11A4             #defcont					\#if ba__-$+3 < 127
0757+  11A4             #defcont                                 \.db $5A,p1__,$+3-ba__
0758+  11A4             #defcont					\#else
0759+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0760+  11A4             #defcont					\#endif
0761+  11A4             #defcont				\#endif
0762+  11A4             
0763+  11A4             #define     BEQR_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0764+  11A4             #defcont                                 \.db $5A,p1__,p2__,ba__-$-4
0765+  11A4             #defcont				\#else
0766+  11A4             #defcont					\#if ba__-$+4 < 127
0767+  11A4             #defcont                                 \.db $5A,p1__,p2__,$+4-ba__
0768+  11A4             #defcont					\#else
0769+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0770+  11A4             #defcont					\#endif
0771+  11A4             #defcont				\#endif
0772+  11A4             
0773+  11A4             #define     BEQR_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0774+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,ba__-$-5
0775+  11A4             #defcont				\#else
0776+  11A4             #defcont					\#if ba__-$+5 < 127
0777+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,$+5-ba__
0778+  11A4             #defcont					\#else
0779+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0780+  11A4             #defcont					\#endif
0781+  11A4             #defcont				\#endif
0782+  11A4             
0783+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0784+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,ba__-$-6
0785+  11A4             #defcont				\#else
0786+  11A4             #defcont					\#if ba__-$+6 < 127
0787+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,$+6-ba__
0788+  11A4             #defcont					\#else
0789+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0790+  11A4             #defcont					\#endif
0791+  11A4             #defcont				\#endif
0792+  11A4             
0793+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0794+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0795+  11A4             #defcont				\#else
0796+  11A4             #defcont					\#if ba__-$+7 < 127
0797+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0798+  11A4             #defcont					\#else
0799+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0800+  11A4             #defcont					\#endif
0801+  11A4             #defcont				\#endif
0802+  11A4             
0803+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0804+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0805+  11A4             #defcont				\#else
0806+  11A4             #defcont					\#if ba__-$+8 < 127
0807+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0808+  11A4             #defcont					\#else
0809+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0810+  11A4             #defcont					\#endif
0811+  11A4             #defcont				\#endif
0812+  11A4             
0813+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0814+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0815+  11A4             #defcont				\#else
0816+  11A4             #defcont					\#if ba__-$+9 < 127
0817+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0818+  11A4             #defcont					\#else
0819+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0820+  11A4             #defcont					\#endif
0821+  11A4             #defcont				\#endif
0822+  11A4             
0823+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0824+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0825+  11A4             #defcont				\#else
0826+  11A4             #defcont					\#if ba__-$+10 < 127
0827+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0828+  11A4             #defcont					\#else
0829+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0830+  11A4             #defcont					\#endif
0831+  11A4             #defcont				\#endif
0832+  11A4             
0833+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0834+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0835+  11A4             #defcont				\#else
0836+  11A4             #defcont					\#if ba__-$+11 < 127
0837+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0838+  11A4             #defcont					\#else
0839+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0840+  11A4             #defcont					\#endif
0841+  11A4             #defcont				\#endif
0842+  11A4             
0843+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0844+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0845+  11A4             #defcont				\#else
0846+  11A4             #defcont					\#if ba__-$+12 < 127
0847+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0848+  11A4             #defcont					\#else
0849+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0850+  11A4             #defcont					\#endif
0851+  11A4             #defcont				\#endif
0852+  11A4             
0853+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0854+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0855+  11A4             #defcont				\#else
0856+  11A4             #defcont					\#if ba__-$+13 < 127
0857+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0858+  11A4             #defcont					\#else
0859+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0860+  11A4             #defcont					\#endif
0861+  11A4             #defcont				\#endif
0862+  11A4             
0863+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0864+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0865+  11A4             #defcont				\#else
0866+  11A4             #defcont					\#if ba__-$+14 < 127
0867+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0868+  11A4             #defcont					\#else
0869+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0870+  11A4             #defcont					\#endif
0871+  11A4             #defcont				\#endif
0872+  11A4             
0873+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0874+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0875+  11A4             #defcont				\#else
0876+  11A4             #defcont					\#if ba__-$+15 < 127
0877+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0878+  11A4             #defcont					\#else
0879+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0880+  11A4             #defcont					\#endif
0881+  11A4             #defcont				\#endif
0882+  11A4             
0883+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0884+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0885+  11A4             #defcont				\#else
0886+  11A4             #defcont					\#if ba__-$+16 < 127
0887+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0888+  11A4             #defcont					\#else
0889+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0890+  11A4             #defcont					\#endif
0891+  11A4             #defcont				\#endif
0892+  11A4             
0893+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
0894+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
0895+  11A4             #defcont				\#else
0896+  11A4             #defcont					\#if ba__-$+17 < 127
0897+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
0898+  11A4             #defcont					\#else
0899+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0900+  11A4             #defcont					\#endif
0901+  11A4             #defcont				\#endif
0902+  11A4             
0903+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
0904+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
0905+  11A4             #defcont				\#else
0906+  11A4             #defcont					\#if ba__-$+18 < 127
0907+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
0908+  11A4             #defcont					\#else
0909+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0910+  11A4             #defcont					\#endif
0911+  11A4             #defcont				\#endif
0912+  11A4             
0913+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
0914+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
0915+  11A4             #defcont				\#else
0916+  11A4             #defcont					\#if ba__-$+19 < 127
0917+  11A4             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
0918+  11A4             #defcont					\#else
0919+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0920+  11A4             #defcont					\#endif
0921+  11A4             #defcont				\#endif
0922+  11A4             
0923+  11A4             #define     BEQA_(p1__,ba__)     \.db $58,p1__ \.dw ba__
0924+  11A4             #define     BEQA_(p1__,p2__,ba__)     \.db $58,p1__,p2__ \.dw ba__
0925+  11A4             #define     BEQA_(p1__,p2__,p3__,ba__)     \.db $58,p1__,p2__,p3__ \.dw ba__
0926+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,ba__)     \.db $58,p1__,p2__,p3__,p4__ \.dw ba__
0927+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__ \.dw ba__
0928+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
0929+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
0930+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
0931+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
0932+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
0933+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
0934+  11A4             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
0935+  11A4             
0936+  11A4             #define     BNER_(p1__,ba__)     \#if $+3-ba__ < 128
0937+  11A4             #defcont                                 \.db $5B,p1__,ba__-$-3
0938+  11A4             #defcont				\#else
0939+  11A4             #defcont					\#if ba__-$+3 < 127
0940+  11A4             #defcont                                 \.db $5B,p1__,$+3-ba__
0941+  11A4             #defcont					\#else
0942+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0943+  11A4             #defcont					\#endif
0944+  11A4             #defcont				\#endif
0945+  11A4             
0946+  11A4             #define     BNER_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0947+  11A4             #defcont                                 \.db $5B,p1__,p2__,ba__-$-4
0948+  11A4             #defcont				\#else
0949+  11A4             #defcont					\#if ba__-$+4 < 127
0950+  11A4             #defcont                                 \.db $5B,p1__,p2__,$+4-ba__
0951+  11A4             #defcont					\#else
0952+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0953+  11A4             #defcont					\#endif
0954+  11A4             #defcont				\#endif
0955+  11A4             
0956+  11A4             #define     BNER_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0957+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,ba__-$-5
0958+  11A4             #defcont				\#else
0959+  11A4             #defcont					\#if ba__-$+5 < 127
0960+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,$+5-ba__
0961+  11A4             #defcont					\#else
0962+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0963+  11A4             #defcont					\#endif
0964+  11A4             #defcont				\#endif
0965+  11A4             
0966+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0967+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,ba__-$-6
0968+  11A4             #defcont				\#else
0969+  11A4             #defcont					\#if ba__-$+6 < 127
0970+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,$+6-ba__
0971+  11A4             #defcont					\#else
0972+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0973+  11A4             #defcont					\#endif
0974+  11A4             #defcont				\#endif
0975+  11A4             
0976+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0977+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0978+  11A4             #defcont				\#else
0979+  11A4             #defcont					\#if ba__-$+7 < 127
0980+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0981+  11A4             #defcont					\#else
0982+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0983+  11A4             #defcont					\#endif
0984+  11A4             #defcont				\#endif
0985+  11A4             
0986+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0987+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0988+  11A4             #defcont				\#else
0989+  11A4             #defcont					\#if ba__-$+8 < 127
0990+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0991+  11A4             #defcont					\#else
0992+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0993+  11A4             #defcont					\#endif
0994+  11A4             #defcont				\#endif
0995+  11A4             
0996+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0997+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0998+  11A4             #defcont				\#else
0999+  11A4             #defcont					\#if ba__-$+9 < 127
1000+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
1001+  11A4             #defcont					\#else
1002+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1003+  11A4             #defcont					\#endif
1004+  11A4             #defcont				\#endif
1005+  11A4             
1006+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
1007+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
1008+  11A4             #defcont				\#else
1009+  11A4             #defcont					\#if ba__-$+10 < 127
1010+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
1011+  11A4             #defcont					\#else
1012+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1013+  11A4             #defcont					\#endif
1014+  11A4             #defcont				\#endif
1015+  11A4             
1016+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
1017+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
1018+  11A4             #defcont				\#else
1019+  11A4             #defcont					\#if ba__-$+11 < 127
1020+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
1021+  11A4             #defcont					\#else
1022+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1023+  11A4             #defcont					\#endif
1024+  11A4             #defcont				\#endif
1025+  11A4             
1026+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
1027+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
1028+  11A4             #defcont				\#else
1029+  11A4             #defcont					\#if ba__-$+12 < 127
1030+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
1031+  11A4             #defcont					\#else
1032+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1033+  11A4             #defcont					\#endif
1034+  11A4             #defcont				\#endif
1035+  11A4             
1036+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
1037+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
1038+  11A4             #defcont				\#else
1039+  11A4             #defcont					\#if ba__-$+13 < 127
1040+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
1041+  11A4             #defcont					\#else
1042+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1043+  11A4             #defcont					\#endif
1044+  11A4             #defcont				\#endif
1045+  11A4             
1046+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
1047+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
1048+  11A4             #defcont				\#else
1049+  11A4             #defcont					\#if ba__-$+14 < 127
1050+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
1051+  11A4             #defcont					\#else
1052+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1053+  11A4             #defcont					\#endif
1054+  11A4             #defcont				\#endif
1055+  11A4             
1056+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
1057+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
1058+  11A4             #defcont				\#else
1059+  11A4             #defcont					\#if ba__-$+15 < 127
1060+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
1061+  11A4             #defcont					\#else
1062+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1063+  11A4             #defcont					\#endif
1064+  11A4             #defcont				\#endif
1065+  11A4             
1066+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
1067+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
1068+  11A4             #defcont				\#else
1069+  11A4             #defcont					\#if ba__-$+16 < 127
1070+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
1071+  11A4             #defcont					\#else
1072+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1073+  11A4             #defcont					\#endif
1074+  11A4             #defcont				\#endif
1075+  11A4             
1076+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
1077+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
1078+  11A4             #defcont				\#else
1079+  11A4             #defcont					\#if ba__-$+17 < 127
1080+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
1081+  11A4             #defcont					\#else
1082+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1083+  11A4             #defcont					\#endif
1084+  11A4             #defcont				\#endif
1085+  11A4             
1086+  11A4             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
1087+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
1088+  11A4             #defcont				\#else
1089+  11A4             #defcont					\#if ba__-$+18 < 127
1090+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
1091+  11A4             #defcont					\#else
1092+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1093+  11A4             #defcont					\#endif
1094+  11A4             #defcont				\#endif
1095+  11A4             
1096+  11A4             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
1097+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
1098+  11A4             #defcont				\#else
1099+  11A4             #defcont					\#if ba__-$+19 < 127
1100+  11A4             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
1101+  11A4             #defcont					\#else
1102+  11A4             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1103+  11A4             #defcont					\#endif
1104+  11A4             #defcont				\#endif
1105+  11A4             
1106+  11A4             #define     BNEA_(p1__,ba__)     \.db $59,p1__ \.dw ba__
1107+  11A4             #define     BNEA_(p1__,p2__,ba__)     \.db $59,p1__,p2__ \.dw ba__
1108+  11A4             #define     BNEA_(p1__,p2__,p3__,ba__)     \.db $59,p1__,p2__,p3__ \.dw ba__
1109+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,ba__)     \.db $59,p1__,p2__,p3__,p4__ \.dw ba__
1110+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__ \.dw ba__
1111+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
1112+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
1113+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
1114+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
1115+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
1116+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
1117+  11A4             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
1118+  11A4             ;**********************************************************
1119+  11A4             ;* Macros 5C-5F
1120+  11A4             ;**********************************************************
1121+  11A4             #define	JMPD_(a)		.db $5c \.dw a
1122+  11A4             
1123+  11A4             #define	SWSET_(a)		      .db $5d,a
1124+  11A4             #define	SWSET_(a,b)		      .db $5d,((a&$7F)+$80),b
1125+  11A4             #define	SWSET_(a,b,c)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),c
1126+  11A4             #define	SWSET_(a,b,c,d)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
1127+  11A4             #define	SWSET_(a,b,c,d,e)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
1128+  11A4             #define	SWSET_(a,b,c,d,e,f)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
1129+  11A4             #define	SWSET_(a,b,c,d,e,f,g)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
1130+  11A4             #define	SWSET_(a,b,c,d,e,f,g,h)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7F)+$80),h
1131+  11A4             
1132+  11A4             #define	SWCLR_(a)		      .db $5e,a
1133+  11A4             #define	SWCLR_(a,b)		      .db $5e,((a&$7F)+$80),b
1134+  11A4             #define	SWCLR_(a,b,c)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),c
1135+  11A4             #define	SWCLR_(a,b,c,d)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
1136+  11A4             #define	SWCLR_(a,b,c,d,e)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
1137+  11A4             #define	SWCLR_(a,b,c,d,e,f)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
1138+  11A4             #define	SWCLR_(a,b,c,d,e,f,g)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
1139+  11A4             #define	SWCLR_(a,b,c,d,e,f,g,h)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7F)+$80),h
1140+  11A4             
1141+  11A4             #define	JMP_(a)		.db $5f \.dw a
1142+  11A4             
1143+  11A4             ;**********************************************************
1144+  11A4             ;* Macro 6X:
1145+  11A4             ;**********************************************************
1146+  11A4             #define	SLEEPI_(a)		.db ($60+(a&$0f))
1147+  11A4             
1148+  11A4             ;**********************************************************
1149+  11A4             ;* Macro 7X: 
1150+  11A4             ;**********************************************************
1151+  11A4             ;See SLEEP macro previous...
1152+  11A4             
1153+  11A4             ;**********************************************************
1154+  11A4             ;* Macro 8X:
1155+  11A4             ;**********************************************************
1156+  11A4             #define 	JMPR_(a)		\#if a-$ > $7ff
1157+  11A4             #defcont				\	.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1158+  11A4             #defcont				\#else
1159+  11A4             #defcont				\	#if $-a > $7ff
1160+  11A4             #defcont				\		.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1161+  11A4             #defcont				\	#endif
1162+  11A4             #defcont				\#endif
1163+  11A4             #defcont				\	.db ($80+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1164+  11A4             
1165+  11A4             ;**********************************************************
1166+  11A4             ;* Macro 9X:
1167+  11A4             ;**********************************************************
1168+  11A4             #define 	JSRR_(a)		\#if a-$ > $7ff
1169+  11A4             #defcont				\	.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1170+  11A4             #defcont				\#else
1171+  11A4             #defcont				\	#if $-a > $7ff
1172+  11A4             #defcont				\		.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1173+  11A4             #defcont				\	#endif
1174+  11A4             #defcont				\#endif
1175+  11A4             #defcont				\	.db ($90+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1176+  11A4             ;**********************************************************
1177+  11A4             ;* Macro AX:
1178+  11A4             ;**********************************************************
1179+  11A4             #define 	JSRDR_(a)		\#if a-$ > $7ff
1180+  11A4             #defcont				\	.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1181+  11A4             #defcont				\#else
1182+  11A4             #defcont				\	#if $-a > $7ff
1183+  11A4             #defcont				\		.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1184+  11A4             #defcont				\	#endif
1185+  11A4             #defcont				\#endif
1186+  11A4             #defcont				\	.db ($a0+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1187+  11A4             
1188+  11A4             
1189+  11A4             ;**********************************************************
1190+  11A4             ;* Macro BX: Add NextByte to RAM LSD(command) 
1191+  11A4             ;**********************************************************
1192+  11A4             #define 	ADDRAM_(ramloc,data)	\#if ramloc > $0f
1193+  11A4             #defcont					\	.error "Macro ADDRAM_: RAM Location must be between $00-$0F"
1194+  11A4             #defcont					\#endif
1195+  11A4             #defcont					\	.db ($b0+(ramloc&$0f)),data
1196+  11A4             
1197+  11A4             ;**********************************************************
1198+  11A4             ;* Macro CX: Set NextByte to RAM LSD(command) 
1199+  11A4             ;**********************************************************
1200+  11A4             #define 	SETRAM_(ramloc,data)	\#if ramloc > $0f
1201+  11A4             #defcont					\	.error "Macro SETRAM_: RAM Location must be between $00-$0F"
1202+  11A4             #defcont					\#endif
1203+  11A4             #defcont					\	.db ($c0+ramloc),data
1204+  11A4             
1205+  11A4             ;**********************************************************
1206+  11A4             ;* Macro DX: Play Index Sound (NextByte)Times  
1207+  11A4             ;**********************************************************
1208+  11A4             #define	RSND_(snd,times)		.db $d0+(snd&0F),times
1209+  11A4             
1210+  11A4             ;**********************************************************
1211+  11A4             ;* Macro EX,FX: Play Index Sound (NextByte)Times  
1212+  11A4             ;**********************************************************
1213+  11A4             #define	SSND_(a)		\#if (a<$20)
1214+  11A4             #defcont				\	.db $e0+a
1215+  11A4             #defcont				\#else
1216+  11A4             #defcont				\	.db $e0
1217+  11A4             #defcont				\	.error "Macro SSND_: Parameters must be less than $20"
1218+  11A4             #defcont				\#endif
0008   11A4             #include  "7gen.asm"	;Level 7 general defines
0001+  11A4             ;*****************************************************************************
0002+  11A4             ;* Williams Level 7 General Macros
0003+  11A4             ;*****************************************************************************
0004+  11A4             ;* Code copyright Williams Electronic Games Inc.
0005+  11A4             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  11A4             ;* For use with TASMx Assembler
0007+  11A4             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  11A4             ;* for more information.
0009+  11A4             ;* You may redistribute this file as long as this header remains intact.
0010+  11A4             ;*****************************************************************************
0011+  11A4             .module 7gen
0012+  11A4             .msfirst
0013+  11A4             ;*****************************************************************************
0014+  11A4             ;* This is where you should put general timesaving macros above and beyond
0015+  11A4             ;* the base logic and WML7 macros...
0016+  11A4             ;*
0017+  11A4             ;* An example is repetitive code such as...
0018+  11A4             ;*
0019+  11A4             ;* ldx	#gj_2B
0020+  11A4             ;* jsr	newthread_06
0021+  11A4             ;*
0022+  11A4             ;* Is both long and it is easy to forget to reference the label properly, it
0023+  11A4             ;* can be replaced with..
0024+  11A4             ;*
0025+  11A4             ;* NEWTHREAD(gj_2B) 
0026+  11A4             ;* 
0027+  11A4             ;* By using the macro defined below...
0028+  11A4             ;*****************************************************************************
0029+  11A4             
0030+  11A4             #define	NEWTHREAD(x)	\ ldx #x	\ jsr newthread_06
0031+  11A4             #define     NEWTHREAD_JMP(x)	\ ldx #x	\ jmp newthread_06
0009   11A4             
0010   11A4             ;*************************************************************
0011   11A4             ;* Set the emulation flag to make our file on the $8000 boundary
0012   11A4             ;* in order for the eprom emulator to work correctly. The 
0013   11A4             ;* emulator will cover the block from $8000-$ffff. 
0014   11A4             ;*************************************************************
0015   11A4             emulate .equ 1
0016   11A4             
0017   11A4             ;--------------------------------------------------------------
0018   11A4             ; GAME RAM Locations:
0019   11A4             ;
0020   11A4             ; $02 - Last Random Drop Target
0021   11A4             ; $03 - Not Used?
0022   11A4             ; $04 - Not Used?
0023   11A4             ; $05 - Not Used?
0024   11A4             ; $06 - Not Used?
0025   11A4             ; $07 - Not Used?
0026   11A4             ; $08 - Outhole Bonus Delay Value
0027   11A4             ; $09 - Not Used?
0028   11A4             ; $0a - Current Timer Value for display
0029   11A4             ; $0b - Background Sound Flag (00=constant,01=increment)
0030   11A4             ; $0c - GI Counter
0031   11A4             ; $0d - Temp holder for Multiball timer animation
0032   11A4             ; $0e	- Bell Counter
0033   11A4             ; $0f - Buzzer Counter
0034   11A4             ;--------------------------------------------------
0035   11A4             ; Extra RAM Locations Used:
0036   11A4             ; 
0037   11A4             ; $00E0: Double Trouble Value ($00,$01,$02,$04,$08,$16)
0038   11A4             ; $00E1: Comma Flags Temp Holder
0039   11A4             ;
0040   11A4             ;
0041   11A4             ;--------------------------------------------------
0042   11A4             ; Game Bit Definitions:
0043   11A4             ; 1.1(00) - Set when game is in multiball fancy display
0044   11A4             ; 1.2(01) - Set when lock is lit?
0045   11A4             ; 1.3(02)
0046   11A4             ; 1.4(03)
0047   11A4             ; 1.5(04) - Not Used?
0048   11A4             ; 1.6(05) - Not Used?
0049   11A4             ; 1.7(06) - Not Used?
0050   11A4             ; 1.8(07) - Not Used?
0051   11A4             ; 2.1(08) - Not Used?
0052   11A4             ; 2.2(09) - Not Used?
0053   11A4             ; 2.3(0A) - Not Used?
0054   11A4             ; 2.4(0B) - Not Used?
0055   11A4             ; 2.5(0C) - Not Used?
0056   11A4             ; 2.6(0D) - Not Used?
0057   11A4             ; 2.7(0E) - Not Used?
0058   11A4             ; 2.8(0F) - Game Play Disable: This is set when a player is being initialized
0059   11A4             ; 3.1(10)
0060   11A4             ; 3.2(11) - Tilt Timer: Set for 2.5 seconds after a plumb bob tilt
0061   11A4             ; 3.3(12) - Double Trouble: Set when player has double trouble lit
0062   11A4             ; 3.4(13) - Mini Playfied: Set when the Mini-PF is active
0063   11A4             ; 3.5(14) - Eject Hole Bit: Set for upper eject, clear for lower eject
0064   11A4             ; 3.6(15) - Outhole: Set when ball enters outhole, cleared when ejected to shooter
0065   11A4             ; 3.7(16)
0066   11A4             ; 3.8(17)
0067   11A4             ; 4.1(18)
0068   11A4             ; 4.2(19)
0069   11A4             ; 4.3(1A) - Lower Loop Switch: This bit is set for a number of cycles looking for the upper loop
0070   11A4             ; 4.4(1B) - Upper Loop Switch: This bit is set for a number of cycles looking for the lower loop
0071   11A4             ; 4.5(1C)
0072   11A4             ; 4.6(1D)
0073   11A4             ; 4.7(1E) - Playfield Entry Flag
0074   11A4             ; 4.8(1F) - Multiball Flag: Set when two balls are in play?
0075   11A4             ; 5.1(20) - Replay has been awarded if set
0076   11A4             ; 5.2(21)
0077   11A4             ; 5.3(22) - Fancy Bell Active
0078   11A4             ; 5.4(23)
0079   11A4             ; 5.5(24)
0080   11A4             ; 5.6(25)
0081   11A4             ; 5.7(26)
0082   11A4             ; 5.8(27) - Set when timer counting down
0083   11A4             ; 6.1(28)
0084   11A4             ; 6.2(29)
0085   11A4             ; 6.3(2A)
0086   11A4             ; 6.4(2B)
0087   11A4             ; 6.5(2C)
0088   11A4             ; 6.6(2D) - Left Magnet Active
0089   11A4             ; 6.7(2E) - Right Magnet Active
0090   11A4             ; 6.8(2F)
0091   11A4             ; 7.1(30)
0092   11A4             ; 7.2(31)
0093   11A4             ; 7.3(32)
0094   11A4             ; 7.4(33)
0095   11A4             ; 7.5(34)
0096   11A4             ; 7.6(35)
0097   11A4             ; 7.7(36)
0098   11A4             ; 7.8(37)
0099   11A4             ; 8.1(38)
0100   11A4             ; 8.2(39)
0101   11A4             ; 8.3(3A)
0102   11A4             ; 8.4(3B)
0103   11A4             ; 8.5(3C)
0104   11A4             ; 8.6(3D)
0105   11A4             ; 8.7(3E)
0106   11A4             ; 8.8(3F)
0107   11A4             ;
0108   11A4             ;*************************************
0109   11A4             ;* Thread ID's
0110   11A4             ;*************************************
0111   11A4             ;* $05 - Fancy Bell, DT Switches
0112   11A4             ;* $09 - Magnet Threads
0113   11A4             ;* $30 - Upper Drop Target
0114   11A4             ;* $43 - Attract Mode
0115   11A4             ;* $60 - Lock Lit
0116   11A4             ;* $E0 - Backgroud Sound
0117   11A4             ;*
0118   11A4             ;*
0119   11A4             ;*
0120   11A4             ;*************************************
0121   11A4             ;* Define Our Solenoids and the
0122   11A4             ;* time they should be on for each
0123   11A4             ;* trigger.
0124   11A4             ;*************************************
0125   11A4             outhole_on        .equ	$00+SOLENOID_ON_2_CYCLES
0126   11A4             outhole_off       .equ	$00+SOLENOID_OFF
0127   11A4             trough_on         .equ	$01+SOLENOID_ON_2_CYCLES
0128   11A4             trough_off        .equ	$01+SOLENOID_OFF
0129   11A4             gi_on	            .equ	$02+SOLENOID_ON_LATCH
0130   11A4             gi_off            .equ  $02+SOLENOID_OFF
0131   11A4             dtleft_on         .equ	$03+SOLENOID_ON_3_CYCLES
0132   11A4             dtleft_off        .equ	$03+SOLENOID_OFF
0133   11A4             dtright_on        .equ	$04+SOLENOID_ON_3_CYCLES
0134   11A4             dtright_off       .equ	$04+SOLENOID_OFF
0135   11A4             buzzer_on         .equ	$05+SOLENOID_ON_LATCH
0136   11A4             buzzer_off        .equ	$05+SOLENOID_OFF
0137   11A4             lowereject_on     .equ	$06+SOLENOID_ON_2_CYCLES
0138   11A4             lowereject_off    .equ	$06+SOLENOID_OFF
0139   11A4             uppereject_on     .equ	$07+SOLENOID_ON_2_CYCLES
0140   11A4             uppereject_off    .equ	$07+SOLENOID_OFF
0141   11A4             dt1_on	      .equ	$08+SOLENOID_ON_2_CYCLES
0142   11A4             dt1_off 	      .equ	$08+SOLENOID_OFF
0143   11A4             dt2_on            .equ	$09+SOLENOID_ON_2_CYCLES
0144   11A4             dt2_off           .equ	$09+SOLENOID_OFF
0145   11A4             dt3_on            .equ	$0A+SOLENOID_ON_2_CYCLES
0146   11A4             dt3_off    	      .equ	$0A+SOLENOID_OFF
0147   11A4             dt4_on	      .equ	$0B+SOLENOID_ON_2_CYCLES
0148   11A4             dt4_off	      .equ	$0B+SOLENOID_OFF
0149   11A4             dt5_on	      .equ	$0C+SOLENOID_ON_2_CYCLES
0150   11A4             dt5_off	      .equ	$0C+SOLENOID_OFF
0151   11A4             dtrelease_on	.equ	$0D+SOLENOID_ON_3_CYCLES
0152   11A4             dtrelease_off     .equ	$0D+SOLENOID_OFF
0153   11A4             bell_on_short     .equ	$0E+SOLENOID_ON_6_CYCLES
0154   11A4             bell_on	      .equ	$0E+SOLENOID_ON_LATCH
0155   11A4             bell_off	      .equ	$0E+SOLENOID_OFF
0156   11A4             minikick_on       .equ	$13+SOLENOID_ON_1_CYCLES
0157   11A4             minikick_on_hard  .equ	$13+SOLENOID_ON_2_CYCLES
0158   11A4             minikick_off      .equ	$13+SOLENOID_OFF
0159   11A4             leftmag_on        .equ	$14+SOLENOID_ON_LATCH
0160   11A4             leftmag_off       .equ	$14+SOLENOID_OFF
0161   11A4             rightmag_on       .equ	$15+SOLENOID_ON_LATCH
0162   11A4             rightmag_off      .equ	$15+SOLENOID_OFF
0163   11A4             flippers_on       .equ	$18+SOLENOID_ON_LATCH
0164   11A4             flippers_off      .equ	$18+SOLENOID_OFF
0165   11A4             ;******************************************************
0166   11A4             
0167   11A4             #IF emulate
0168   8000             	.org	$8000
0169   8000             #ENDIF
0170   8000 55          	.db $55
0171   8001             	
0172   D800             	.org $d800
0173   D800             
0174   D800             ;******************************************************
0175   D800             ;* FancyBell - This is the ring pattern that jungle 
0176   D800             ;*             Lord plays on replays. It is the standard
0177   D800             ;*             
0178   D800             ;*             Shave-and-a-hair-cut
0179   D800             ;*
0180   D800             ;*             pattern...
0181   D800             ;******************************************************
0182   D800 BD F3 AB    fancybell		jsr	macro_start
0183   D803             			PRI_($05)				;Priority=#05
0183   D803 52 05       
0184   D805             			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0184   D805             
0184   D805             
0184   D805             
0184   D805 5AFCFFD8F2F0
0184   D80B 00FB
0184   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0184   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0184   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0184   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0184   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0184   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0184   D80D             
0185   D80D             				SOL_(bell_on_short)	      ;Turn ON Sol#15:bell
0185   D80D 31 CE       
0186   D80F             			ENDIF_
0186   D80F             
0186   D80F             
0186   D80F             
0186   D80F             
0186   D80F             
0186   D80F~            			ENDIF_
0186   D80F~            			ENDIF_
0186   D80F             
0186   D80F~            			ENDIF_
0186   D80F~            			ENDIF_
0186   D80F             
0186   D80C             
0186   D80C 02          
0186   D80D             
0186   D80D             
0186   D80D~            			ENDIF_
0186   D80D~            			ENDIF_
0186   D80D~            			ENDIF_
0186   D80D~            			ENDIF_
0186   D80D~            			ENDIF_
0186   D80D             
0186   D80F             
0186   D80F~            			ENDIF_
0186   D80F~            			ENDIF_
0186   D80F             
0187   D80F             			BITON_($E0,$62)			;Turn ON: Bit#20, Bit#22
0187   D80F             
0187   D80F 10 E0 62    
0188   D812             			JSRR_(gi_bell_long)		
0188   D812~            			JSRR_(gi_bell_long)		
0188   D812~            			JSRR_(gi_bell_long)		
0188   D812             
0188   D812~            			JSRR_(gi_bell_long)		
0188   D812~            			JSRR_(gi_bell_long)		
0188   D812             
0188   D812             
0188   D812 90          
0188   D813 19          
0189   D814             			JSRR_(gi_bell_long)		
0189   D814~            			JSRR_(gi_bell_long)		
0189   D814~            			JSRR_(gi_bell_long)		
0189   D814             
0189   D814~            			JSRR_(gi_bell_long)		
0189   D814~            			JSRR_(gi_bell_long)		
0189   D814             
0189   D814             
0189   D814 90          
0189   D815 17          
0190   D816             			JSRR_(gi_bell_short)		
0190   D816~            			JSRR_(gi_bell_short)		
0190   D816~            			JSRR_(gi_bell_short)		
0190   D816             
0190   D816~            			JSRR_(gi_bell_short)		
0190   D816~            			JSRR_(gi_bell_short)		
0190   D816             
0190   D816             
0190   D816 90          
0190   D817 20          
0191   D818             			JSRR_(gi_bell_long)		
0191   D818~            			JSRR_(gi_bell_long)		
0191   D818~            			JSRR_(gi_bell_long)		
0191   D818             
0191   D818~            			JSRR_(gi_bell_long)		
0191   D818~            			JSRR_(gi_bell_long)		
0191   D818             
0191   D818             
0191   D818 90          
0191   D819 13          
0192   D81A             			JSRR_(gi_bell_long)		
0192   D81A~            			JSRR_(gi_bell_long)		
0192   D81A~            			JSRR_(gi_bell_long)		
0192   D81A             
0192   D81A~            			JSRR_(gi_bell_long)		
0192   D81A~            			JSRR_(gi_bell_long)		
0192   D81A             
0192   D81A             
0192   D81A 90          
0192   D81B 11          
0193   D81C             			SLEEP_(24)
0193   D81C~            			SLEEP_(24)
0193   D81C~            			SLEEP_(24)
0193   D81C             
0193   D81C 53 18       
0193   D81E             
0194   D81E             			JSRR_(buzz_on_inc)			
0194   D81E~            			JSRR_(buzz_on_inc)			
0194   D81E~            			JSRR_(buzz_on_inc)			
0194   D81E             
0194   D81E~            			JSRR_(buzz_on_inc)			
0194   D81E~            			JSRR_(buzz_on_inc)			
0194   D81E             
0194   D81E             
0194   D81E 94          
0194   D81F A1          
0195   D820             			SLEEP_(12)
0195   D820             
0195   D820 7C          
0195   D821~            			SLEEP_(12)
0195   D821~            			SLEEP_(12)
0195   D821             
0196   D821             			JSRR_(buzz_off_dec)			
0196   D821~            			JSRR_(buzz_off_dec)			
0196   D821~            			JSRR_(buzz_off_dec)			
0196   D821             
0196   D821~            			JSRR_(buzz_off_dec)			
0196   D821~            			JSRR_(buzz_off_dec)			
0196   D821             
0196   D821             
0196   D821 94          
0196   D822 AA          
0197   D823             			SLEEP_(8)
0197   D823             
0197   D823 78          
0197   D824~            			SLEEP_(8)
0197   D824~            			SLEEP_(8)
0197   D824             
0198   D824             			JSRR_(buzz_on_inc)			
0198   D824~            			JSRR_(buzz_on_inc)			
0198   D824~            			JSRR_(buzz_on_inc)			
0198   D824             
0198   D824~            			JSRR_(buzz_on_inc)			
0198   D824~            			JSRR_(buzz_on_inc)			
0198   D824             
0198   D824             
0198   D824 94          
0198   D825 9B          
0199   D826             			SLEEP_(12)
0199   D826             
0199   D826 7C          
0199   D827~            			SLEEP_(12)
0199   D827~            			SLEEP_(12)
0199   D827             
0200   D827             			JSRR_(buzz_off_dec)			
0200   D827~            			JSRR_(buzz_off_dec)			
0200   D827~            			JSRR_(buzz_off_dec)			
0200   D827             
0200   D827~            			JSRR_(buzz_off_dec)			
0200   D827~            			JSRR_(buzz_off_dec)			
0200   D827             
0200   D827             
0200   D827 94          
0200   D828 A4          
0201   D829             			BITOFF_($62)			;Turn OFF: Bit#22
0201   D829             
0201   D829 11 62       
0202   D82B             			SSND_($11)				;Sound #11
0202   D82B             
0202   D82B F1          
0202   D82C~            			SSND_($11)				;Sound #11
0202   D82C~            			SSND_($11)				;Sound #11
0202   D82C~            			SSND_($11)				;Sound #11
0202   D82C             
0203   D82C             			KILL_					;Remove This Thread
0203   D82C 03          
0204   D82D             
0205   D82D             gi_bell_long	JSRR_(gi_off_inc)			
0205   D82D~            gi_bell_long	JSRR_(gi_off_inc)			
0205   D82D~            gi_bell_long	JSRR_(gi_off_inc)			
0205   D82D             
0205   D82D~            gi_bell_long	JSRR_(gi_off_inc)			
0205   D82D~            gi_bell_long	JSRR_(gi_off_inc)			
0205   D82D             
0205   D82D             
0205   D82D 92          
0205   D82E 6E          
0206   D82F             			JSRR_(bell_on_inc)		
0206   D82F~            			JSRR_(bell_on_inc)		
0206   D82F~            			JSRR_(bell_on_inc)		
0206   D82F             
0206   D82F~            			JSRR_(bell_on_inc)		
0206   D82F~            			JSRR_(bell_on_inc)		
0206   D82F             
0206   D82F             
0206   D82F 94          
0206   D830 74          
0207   D831             			SLEEP_(12)
0207   D831             
0207   D831 7C          
0207   D832~            			SLEEP_(12)
0207   D832~            			SLEEP_(12)
0207   D832             
0208   D832             gi_bell_com		JSRR_(bell_off_dec)		
0208   D832~            gi_bell_com		JSRR_(bell_off_dec)		
0208   D832~            gi_bell_com		JSRR_(bell_off_dec)		
0208   D832             
0208   D832~            gi_bell_com		JSRR_(bell_off_dec)		
0208   D832~            gi_bell_com		JSRR_(bell_off_dec)		
0208   D832             
0208   D832             
0208   D832 94          
0208   D833 7E          
0209   D834             			JSRR_(gi_on_dec)			
0209   D834~            			JSRR_(gi_on_dec)			
0209   D834~            			JSRR_(gi_on_dec)			
0209   D834             
0209   D834~            			JSRR_(gi_on_dec)			
0209   D834~            			JSRR_(gi_on_dec)			
0209   D834             
0209   D834             
0209   D834 92          
0209   D835 58          
0210   D836             			SLEEP_(6)
0210   D836             
0210   D836 76          
0210   D837~            			SLEEP_(6)
0210   D837~            			SLEEP_(6)
0210   D837             
0211   D837             			MRTS_					;Macro RTS, Save MRA,MRB
0211   D837 02          
0212   D838             
0213   D838             gi_bell_short	JSRR_(gi_off_inc)			
0213   D838~            gi_bell_short	JSRR_(gi_off_inc)			
0213   D838~            gi_bell_short	JSRR_(gi_off_inc)			
0213   D838             
0213   D838~            gi_bell_short	JSRR_(gi_off_inc)			
0213   D838~            gi_bell_short	JSRR_(gi_off_inc)			
0213   D838             
0213   D838             
0213   D838 92          
0213   D839 63          
0214   D83A             			JSRR_(bell_on_inc)		
0214   D83A~            			JSRR_(bell_on_inc)		
0214   D83A~            			JSRR_(bell_on_inc)		
0214   D83A             
0214   D83A~            			JSRR_(bell_on_inc)		
0214   D83A~            			JSRR_(bell_on_inc)		
0214   D83A             
0214   D83A             
0214   D83A 94          
0214   D83B 69          
0215   D83C             			SLEEP_(6)
0215   D83C             
0215   D83C 76          
0215   D83D~            			SLEEP_(6)
0215   D83D~            			SLEEP_(6)
0215   D83D             
0216   D83D             			JMPR_(gi_bell_com)
0216   D83D~            			JMPR_(gi_bell_com)
0216   D83D~            			JMPR_(gi_bell_com)
0216   D83D             
0216   D83D~            			JMPR_(gi_bell_com)
0216   D83D~            			JMPR_(gi_bell_com)
0216   D83D             
0216   D83D             
0216   D83D 8F          
0216   D83E F3          
0217   D83F             
0218   D83F             ;******************************************************
0219   D83F             ;* System Coin Accepted Hook - This will ring the bell
0220   D83F             ;*                             if bit29 is 0
0221   D83F             ;******************************************************					
0222   D83F BD F3 AB    hook_coin		jsr	macro_start		
0223   D842             			IFEQR_($69)                   ;BNER_BIT#29
0223   D842             
0223   D842             
0223   D842             
0223   D842 5B 69 00    
0223   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0223   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0223   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0223   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0223   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0223   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0223   D845             
0224   D845             			      SOL_(bell_on_short)		;Turn ON Sol#15:bell
0224   D845 31 CE       
0225   D847             			      SLEEP_(20)
0225   D847~            			      SLEEP_(20)
0225   D847~            			      SLEEP_(20)
0225   D847             
0225   D847 53 14       
0225   D849             
0226   D849             			ENDIF_			
0226   D849             
0226   D849             
0226   D849             
0226   D849             
0226   D849             
0226   D849~            			ENDIF_			
0226   D849~            			ENDIF_			
0226   D849             
0226   D849~            			ENDIF_			
0226   D849~            			ENDIF_			
0226   D849             
0226   D844             
0226   D844 04          
0226   D845             
0226   D845             
0226   D845~            			ENDIF_			
0226   D845~            			ENDIF_			
0226   D845~            			ENDIF_			
0226   D845~            			ENDIF_			
0226   D845~            			ENDIF_			
0226   D845             
0226   D849             
0226   D849~            			ENDIF_			
0226   D849~            			ENDIF_			
0226   D849             
0227   D849                               CPUX_					;Resume CPU Execution
0227   D849 04          
0228   D84A 39          			rts	
0229   D84B             
0230   D84B             ;********************************************************
0231   D84B             ;* Outlane Switches:
0232   D84B             ;********************************************************			
0233   D84B             sw_leftdrain
0234   D84B             sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84B 43          
0234   D84C             
0234   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84C             
0234   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84C             
0234   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84C             
0234   D84C             
0234   D84C 2B          
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0234   D84D             
0234   D84D             
0234   D84D             
0234   D84D             
0235   D84D             			SETRAM_(regb,$02)			;RAM$01=$02
0235   D84D~            			SETRAM_(regb,$02)			;RAM$01=$02
0235   D84D~            			SETRAM_(regb,$02)			;RAM$01=$02
0235   D84D             
0235   D84D C1 02       
0236   D84F             			JSRR_(add_bonus_dly)			
0236   D84F~            			JSRR_(add_bonus_dly)			
0236   D84F~            			JSRR_(add_bonus_dly)			
0236   D84F             
0236   D84F~            			JSRR_(add_bonus_dly)			
0236   D84F~            			JSRR_(add_bonus_dly)			
0236   D84F             
0236   D84F             
0236   D84F 94          
0236   D850 A4          
0237   D851             			IFEQR_($E0)			      ;BNER_RAM$00
0237   D851             
0237   D851             
0237   D851             
0237   D851 5B E0 00    
0237   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0237   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0237   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0237   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0237   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0237   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0237   D854             
0238   D854                   			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
0238   D854             
0238   D854 15 00       
0239   D856                   			EXE_
0239   D856             
0239   D856 44          
0240   D857 CE 01 36          			      ldx	#aud_game3			;Increment Drain Shield Counter
0241   D85A BD F7 7F          			      jsr	ptrx_plus_1
0242   D85D                   			EXEEND_
0242   D85D             
0242   D85D             
0242   D85D             
0242   D85D             
0242   D85D~                  			EXEEND_
0242   D85D~                  			EXEEND_
0242   D85D             
0242   D856             
0242   D856 48          
0242   D857             
0242   D85D             
0242   D85D~                  			EXEEND_
0242   D85D~                  			EXEEND_
0242   D85D             
0243   D85D                   			SSND_($13)				;Sound #13
0243   D85D             
0243   D85D F3          
0243   D85E~                  			SSND_($13)				;Sound #13
0243   D85E~                  			SSND_($13)				;Sound #13
0243   D85E~                  			SSND_($13)				;Sound #13
0243   D85E             
0244   D85E                   			BE29_($08)				;Effect: Range #08
0244   D85E             
0244   D85E 29 08       
0245   D860                   			JSRDR_(timer_inc)		
0245   D860~                  			JSRDR_(timer_inc)		
0245   D860~                  			JSRDR_(timer_inc)		
0245   D860             
0245   D860~                  			JSRDR_(timer_inc)		
0245   D860~                  			JSRDR_(timer_inc)		
0245   D860             
0245   D860             
0245   D860 A4          
0245   D861 25          
0246   D862                   			ADDRAM_(rega,$40)			;RAM$00+=$40
0246   D862~                  			ADDRAM_(rega,$40)			;RAM$00+=$40
0246   D862~                  			ADDRAM_(rega,$40)			;RAM$00+=$40
0246   D862             
0246   D862 B0 40       
0247   D864                   			BITONP2_(rega)			;Turn ON Lamp/Bit @RAM:00
0247   D864             
0247   D864 24 00       
0248   D866                   			ADDRAM_(rega,$F8)			;RAM$00+=$F8
0248   D866~                  			ADDRAM_(rega,$F8)			;RAM$00+=$F8
0248   D866~                  			ADDRAM_(rega,$F8)			;RAM$00+=$F8
0248   D866             
0248   D866 B0 F8       
0249   D868                   			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
0249   D868             
0249   D868 15 00       
0250   D86A                   			BITOFF2_($1A)			;Turn OFF: Lamp#1A(keepshooting)
0250   D86A             
0250   D86A 21 1A       
0251   D86C                   			BITFL_($1A)				;Flash: Lamp#1A(keepshooting)
0251   D86C             
0251   D86C 13 1A       
0252   D86E                   			BITON_($66)				;Turn ON: Bit#26
0252   D86E             
0252   D86E 10 66       
0253   D870                   			SOL_(flippers_on)             ;Turn ON Sol#25:flippers?
0253   D870 31 F8       
0254   D872                   			JSRR_(gi_off_inc)			
0254   D872~                  			JSRR_(gi_off_inc)			
0254   D872~                  			JSRR_(gi_off_inc)			
0254   D872             
0254   D872~                  			JSRR_(gi_off_inc)			
0254   D872~                  			JSRR_(gi_off_inc)			
0254   D872             
0254   D872             
0254   D872 92          
0254   D873 29          
0255   D874                   			EXE_				      
0255   D874             
0255   D874 44          
0256   D875 7C 00 C8          			      inc	flag_tilt
0257   D878                   			EXEEND_
0257   D878             
0257   D878             
0257   D878             
0257   D878             
0257   D878~                  			EXEEND_
0257   D878~                  			EXEEND_
0257   D878             
0257   D874             
0257   D874 45          
0257   D875             
0257   D878             
0257   D878~                  			EXEEND_
0257   D878~                  			EXEEND_
0257   D878             
0258   D878             			ENDIF_
0258   D878             
0258   D878             
0258   D878             
0258   D878             
0258   D878             
0258   D878~            			ENDIF_
0258   D878~            			ENDIF_
0258   D878             
0258   D878~            			ENDIF_
0258   D878~            			ENDIF_
0258   D878             
0258   D853             
0258   D853 24          
0258   D854             
0258   D854             
0258   D854~            			ENDIF_
0258   D854~            			ENDIF_
0258   D854~            			ENDIF_
0258   D854~            			ENDIF_
0258   D854~            			ENDIF_
0258   D854             
0258   D878             
0258   D878~            			ENDIF_
0258   D878~            			ENDIF_
0258   D878             
0259   D878             			KILL_					;Remove This Thread
0259   D878 03          
0260   D879             
0261   D879             ;***********************************************************
0262   D879             ;* Attract Mode Lamps 1:
0263   D879             ;***********************************************************
0264   D879 BD F3 AB    attract_1		jsr	macro_start
0265   D87C             			PRI_($43)				;Priority=#43
0265   D87C 52 43       
0266   D87E             			REMTHREADS_($FA,$42)		;Remove Multiple Threads Based on Priority
0266   D87E 55 FA 42    
0267   D881             			BEGIN_
0267   D881             
0268   D881             				SETRAM_(regb,$0B)			;RAM$01=$0B
0268   D881~            				SETRAM_(regb,$0B)			;RAM$01=$0B
0268   D881~            				SETRAM_(regb,$0B)			;RAM$01=$0B
0268   D881             
0268   D881 C1 0B       
0269   D883             				BE28_($02)				;Effect: Range #02
0269   D883             
0269   D883 28 02       
0270   D885             				BEGIN_
0270   D885             
0271   D885             					BEGIN_
0271   D885             
0272   D885             						BE28_($42)				;Effect: Range #02
0272   D885             
0272   D885 28 42       
0273   D887             						BITOFF2_($4F)			;Turn OFF: Lamp#0F(D)
0273   D887             
0273   D887 21 4F       
0274   D889             						BE2E_($02)				;Effect: Range #02
0274   D889             
0274   D889 2E 02       
0275   D88B             						SLEEP_(3)
0275   D88B             
0275   D88B 73          
0275   D88C~            						SLEEP_(3)
0275   D88C~            						SLEEP_(3)
0275   D88C             
0276   D88C             					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D88C             
0276   D88C 5B F5 82 FF 
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890             
0276   D890             
0276   D890             
0276   D890             
0276   D890             
0276   D890             
0276   D890             
0276   D88F             
0276   D88F F5          
0276   D890             
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890             
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0276   D890             
0277   D890             					BEGIN_
0277   D890             
0278   D890             						BE2A_($02)				;Effect: Range #02
0278   D890             
0278   D890 2A 02       
0279   D892             						SLEEP_(3)
0279   D892             
0279   D892 73          
0279   D893~            						SLEEP_(3)
0279   D893~            						SLEEP_(3)
0279   D893             
0280   D893             					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D893             
0280   D893 5B F6 82 FF 
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897             
0280   D897             
0280   D897             
0280   D897             
0280   D897             
0280   D897             
0280   D897             
0280   D896             
0280   D896 F9          
0280   D897             
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897             
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0280   D897             
0281   D897             					ADDRAM_(regb,-1)			;RAM$01-=1
0281   D897~            					ADDRAM_(regb,-1)			;RAM$01-=1
0281   D897~            					ADDRAM_(regb,-1)			;RAM$01-=1
0281   D897             
0281   D897 B1 FF       
0282   D899             				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D899             
0282   D899 5BFCE100FE  
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E             
0282   D89E             
0282   D89E             
0282   D89E             
0282   D89E             
0282   D89E             
0282   D89E             
0282   D89D             
0282   D89D E7          
0282   D89E             
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E             
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0282   D89E             
0283   D89E             			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D89E             
0283   D89E 5AFB40F1FE  
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3             
0283   D8A3             
0283   D8A3             
0283   D8A3             
0283   D8A3             
0283   D8A3             
0283   D8A3             
0283   D8A2             
0283   D8A2 DE          
0283   D8A3             
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3             
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0283   D8A3             
0284   D8A3             			BE29_($42)				;Effect: Range #02
0284   D8A3             
0284   D8A3 29 42       
0285   D8A5             			KILL_					;Remove This Thread
0285   D8A5 03          
0286   D8A6             
0287   D8A6             ;************************************************************************
0288   D8A6             ;* Left Drop Target Timer Thread:
0289   D8A6             ;************************************************************************
0290   D8A6 BD F3 AB    left_timer		jsr	macro_start
0291   D8A9             			EXE_				
0291   D8A9             
0291   D8A9 44          
0292   D8AA BD E5 9F    			      jsr	get_lord			;Get Number of L-O-R-D lamps to go
0293   D8AD 48          			      asla	
0294   D8AE 8B 0D       			      adda	#$0D
0295   D8B0 C6 08       			      ldab	#$08
0296   D8B2             			EXEEND_
0296   D8B2             
0296   D8B2             
0296   D8B2             
0296   D8B2             
0296   D8B2~            			EXEEND_
0296   D8B2~            			EXEEND_
0296   D8B2             
0296   D8A9             
0296   D8A9 4A          
0296   D8AA             
0296   D8B2             
0296   D8B2~            			EXEEND_
0296   D8B2~            			EXEEND_
0296   D8B2             
0297   D8B2             			BEGIN_
0297   D8B2             
0298   D8B2             				ADDRAM_(rega,-1)			;RAM$00-=1
0298   D8B2~            				ADDRAM_(rega,-1)			;RAM$00-=1
0298   D8B2~            				ADDRAM_(rega,-1)			;RAM$00-=1
0298   D8B2             
0298   D8B2 B0 FF       
0299   D8B4             lt_outer_loop		BITON_($1C)		            ;Turn ON: Lamp#1C(dt_left)
0299   D8B4             
0299   D8B4 10 1C       
0300   D8B6             				SSND_($09)				;Sound #09
0300   D8B6             
0300   D8B6 E9          
0300   D8B7~            				SSND_($09)				;Sound #09
0300   D8B7~            				SSND_($09)				;Sound #09
0300   D8B7~            				SSND_($09)				;Sound #09
0300   D8B7             
0301   D8B7 60          				SLEEPI_(rega)				;Delay RAM$00
0302   D8B8             				BITOFF_($1C)			;Turn OFF: Lamp#1C(dt_left)
0302   D8B8             
0302   D8B8 11 1C       
0303   D8BA             				BEGIN_
0303   D8BA             
0304   D8BA 60          					SLEEPI_(rega)			;Delay RAM$00
0305   D8BB             				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8BB             
0305   D8BB 5AFEF2F010FD
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1             
0305   D8C1             
0305   D8C1             
0305   D8C1             
0305   D8C1             
0305   D8C1             
0305   D8C1             
0305   D8C0             
0305   D8C0 F9          
0305   D8C1             
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1             
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0305   D8C1             
0306   D8C1             			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C1             
0306   D8C1 5BFCE003FE  
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6             
0306   D8C6             
0306   D8C6             
0306   D8C6             
0306   D8C6             
0306   D8C6             
0306   D8C6             
0306   D8C5             
0306   D8C5 EC          
0306   D8C6             
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6             
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0306   D8C6             
0307   D8C6             			ADDRAM_(regb,-1)			;RAM$01-=1
0307   D8C6~            			ADDRAM_(regb,-1)			;RAM$01-=1
0307   D8C6~            			ADDRAM_(regb,-1)			;RAM$01-=1
0307   D8C6             
0307   D8C6 B1 FF       
0308   D8C8             			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0308   D8C8             
0308   D8C8 5BFCE100E7  
0308   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0308   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0308   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0308   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0308   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0308   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0308   D8CD             
0309   D8CD             			BITON_($5D)				;Turn ON: Bit#1D
0309   D8CD             
0309   D8CD 10 5D       
0310   D8CF             			SOL_(dtleft_on)               ;Turn ON Sol#4:dt_left
0310   D8CF 31 63       
0311   D8D1             			SLEEP_(48)
0311   D8D1~            			SLEEP_(48)
0311   D8D1~            			SLEEP_(48)
0311   D8D1             
0311   D8D1 53 30       
0311   D8D3             
0312   D8D3             			BITOFF_($DC,$DD,$1C)		;Turn OFF: Bit#1C, Bit#1D, Lamp#1C(dt_left)
0312   D8D3             
0312   D8D3 11 DC DD 1C 
0313   D8D7             			KILL_					;Remove This Thread
0313   D8D7 03          
0314   D8D8             
0315   D8D8             ;************************************************************************
0316   D8D8             ;* Right Drop Target Timer Thread:
0317   D8D8             ;************************************************************************
0318   D8D8 BD F3 AB    right_timer		jsr	macro_start
0319   D8DB             			PRI_($70)				;Priority=#70
0319   D8DB 52 70       
0320   D8DD             			EXE_				
0320   D8DD             
0320   D8DD 44          
0321   D8DE BD E5 9F    			      jsr	get_lord
0322   D8E1 48          			      asla	
0323   D8E2 8B 0D       			      adda	#$0D
0324   D8E4 C6 08       			      ldab	#$08
0325   D8E6             			EXEEND_
0325   D8E6             
0325   D8E6             
0325   D8E6             
0325   D8E6             
0325   D8E6~            			EXEEND_
0325   D8E6~            			EXEEND_
0325   D8E6             
0325   D8DD             
0325   D8DD 4A          
0325   D8DE             
0325   D8E6             
0325   D8E6~            			EXEEND_
0325   D8E6~            			EXEEND_
0325   D8E6             
0326   D8E6             			BEGIN_
0326   D8E6             
0327   D8E6             				ADDRAM_(rega,-1)			;RAM$00-=1
0327   D8E6~            				ADDRAM_(rega,-1)			;RAM$00-=1
0327   D8E6~            				ADDRAM_(rega,-1)			;RAM$00-=1
0327   D8E6             
0327   D8E6 B0 FF       
0328   D8E8             rt_outer_loop		BITON_($18)				;Turn ON: Lamp#18(dt_right)
0328   D8E8             
0328   D8E8 10 18       
0329   D8EA             				SSND_($09)				;Sound #09
0329   D8EA             
0329   D8EA E9          
0329   D8EB~            				SSND_($09)				;Sound #09
0329   D8EB~            				SSND_($09)				;Sound #09
0329   D8EB~            				SSND_($09)				;Sound #09
0329   D8EB             
0330   D8EB 60          				SLEEPI_(rega)			;Delay RAM$00
0331   D8EC             				BITOFF_($18)			;Turn OFF: Lamp#18(dt_right)
0331   D8EC             
0331   D8EC 11 18       
0332   D8EE             				BEGIN_
0332   D8EE             
0333   D8EE 60          					SLEEPI_(rega)			;Delay RAM$00
0334   D8EF             				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8EF             
0334   D8EF 5AFEF2F010FD
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5             
0334   D8F5             
0334   D8F5             
0334   D8F5             
0334   D8F5             
0334   D8F5             
0334   D8F5             
0334   D8F4             
0334   D8F4 F9          
0334   D8F5             
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5             
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0334   D8F5             
0335   D8F5             			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8F5             
0335   D8F5 5BFCE003FE  
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA             
0335   D8FA             
0335   D8FA             
0335   D8FA             
0335   D8FA             
0335   D8FA             
0335   D8FA             
0335   D8F9             
0335   D8F9 EC          
0335   D8FA             
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA             
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0335   D8FA             
0336   D8FA             			ADDRAM_(regb,-1)			;RAM$01-=1
0336   D8FA~            			ADDRAM_(regb,-1)			;RAM$01-=1
0336   D8FA~            			ADDRAM_(regb,-1)			;RAM$01-=1
0336   D8FA             
0336   D8FA B1 FF       
0337   D8FC             			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0337   D8FC             
0337   D8FC 5BFCE100E7  
0337   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0337   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0337   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0337   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0337   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0337   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0337   D901             
0338   D901             			BITON_($59)				;Turn ON: Bit#19
0338   D901             
0338   D901 10 59       
0339   D903             			SOL_(dtright_on)              ;Turn ON Sol#5:dt_right
0339   D903 31 64       
0340   D905             			SLEEP_(48)
0340   D905~            			SLEEP_(48)
0340   D905~            			SLEEP_(48)
0340   D905             
0340   D905 53 30       
0340   D907             
0341   D907             			BITOFF_($D8,$D9,$18)		;Turn OFF: Bit#18, Bit#19, Lamp#18(dt_right)
0341   D907             
0341   D907 11 D8 D9 18 
0342   D90B             			KILL_					;Remove This Thread
0342   D90B 03          
0343   D90C             
0344   D90C             ;**********************************************************
0345   D90C             ;* Plunger Thread
0346   D90C             ;**********************************************************
0347   D90C             sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0347   D90C             
0347   D90C             
0347   D90C             
0347   D90C 5B F8 E0 FF 
0347   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0347   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0347   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0347   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0347   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0347   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0347   D910             
0348   D910             			      REMTHREADS_($F8,$C0)		;Remove Multiple Threads Based on Priority
0348   D910 55 F8 C0    
0349   D913             			      KILL_					;Remove This Thread
0349   D913 03          
0350   D914                               ENDIF_
0350   D914             
0350   D914             
0350   D914             
0350   D914             
0350   D914             
0350   D914~                              ENDIF_
0350   D914~                              ENDIF_
0350   D914             
0350   D914~                              ENDIF_
0350   D914~                              ENDIF_
0350   D914             
0350   D90F             
0350   D90F 04          
0350   D910             
0350   D910             
0350   D910~                              ENDIF_
0350   D910~                              ENDIF_
0350   D910~                              ENDIF_
0350   D910~                              ENDIF_
0350   D910~                              ENDIF_
0350   D910             
0350   D914             
0350   D914~                              ENDIF_
0350   D914~                              ENDIF_
0350   D914             
0351   D914 D9 1E       			RSND_($09,$1E)			;Sound #09(x30)
0352   D916             			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0352   D916             
0352   D916             
0352   D916             
0352   D916 5BFB505EFE  
0352   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0352   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0352   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0352   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0352   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0352   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0352   D91B             
0353   D91B             			      PRI_($C0)				;Priority=#C0
0353   D91B 52 C0       
0354   D91D             			      SLEEP_(255)
0354   D91D~            			      SLEEP_(255)
0354   D91D~            			      SLEEP_(255)
0354   D91D             
0354   D91D 53 FF       
0354   D91F             
0355   D91F             			      SLEEP_(129)
0355   D91F~            			      SLEEP_(129)
0355   D91F~            			      SLEEP_(129)
0355   D91F             
0355   D91F 53 81       
0355   D921             
0356   D921             			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0356   D921             
0356   D921 5A 5E 0B    
0356   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0356   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0356   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0356   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0356   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0356   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0356   D924             
0357   D924             			ENDIF_
0357   D924             
0357   D924             
0357   D924             
0357   D924             
0357   D924             
0357   D924~            			ENDIF_
0357   D924~            			ENDIF_
0357   D924             
0357   D924~            			ENDIF_
0357   D924~            			ENDIF_
0357   D924             
0357   D91A             
0357   D91A 09          
0357   D91B             
0357   D91B             
0357   D91B~            			ENDIF_
0357   D91B~            			ENDIF_
0357   D91B~            			ENDIF_
0357   D91B~            			ENDIF_
0357   D91B~            			ENDIF_
0357   D91B             
0357   D924             
0357   D924~            			ENDIF_
0357   D924~            			ENDIF_
0357   D924             
0358   D924             kill_1		KILL_					;Remove This Thread
0358   D924 03          
0359   D925             
0360   D925             ;**************************************************************
0361   D925             ;* Playfield Entry Switch - Always scores 10 points
0362   D925             ;**************************************************************
0363   D925 BD F3 AB    pf_entry_cpu	jsr	macro_start
0364   D928             sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D928 43          
0364   D929             
0364   D929~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D929~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D929             
0364   D929             
0364   D929 09          
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0364   D92A             
0364   D92A             
0365   D92A             			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0365   D92A             
0365   D92A 5BFB505EF5  
0365   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0365   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0365   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0365   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0365   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0365   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0365   D92F             
0366   D92F             gb_56			BITOFF_($DE,$50)			;Turn OFF: Bit#1E, Bit#10
0366   D92F             
0366   D92F 11 DE 50    
0367   D932             			REMTHREADS_($F8,$C0)		;Remove Multiple Threads Based on Priority
0367   D932 55 F8 C0    
0368   D935             			BNEA_($57,gb_24)        	;BNEA_BIT#17 to gb_24
0368   D935 59 57       
0368   D937 E3 56       
0369   D939             			BITOFF_($57)			;Turn OFF: Bit#17
0369   D939             
0369   D939 11 57       
0370   D93B             			KILL_					;Remove This Thread
0370   D93B 03          
0371   D93C             
0372   D93C             ;***************************************************************
0373   D93C             ;* Outhole Thread
0374   D93C             ;***************************************************************
0375   D93C             sw_outhole		SOL_(outhole_on)              ;Turn ON Sol#1:outhole
0375   D93C 31 40       
0376   D93E             			BITON_($55)				;Turn ON: Bit#15
0376   D93E             
0376   D93E 10 55       
0377   D940             			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0377   D940             
0377   D940             
0377   D940             
0377   D940 5BFB505EFE  
0377   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0377   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0377   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0377   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0377   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0377   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0377   D945             
0378   D945             			      EXE_	
0378   D945             
0378   D945 44          
0379   D946             			      	NEWTHREAD(gj_2B)			
0379   D946 CE D9 51    
0379   D949 BD EA C4    
0380   D94C             			      EXEEND_
0380   D94C             
0380   D94C             
0380   D94C             
0380   D94C             
0380   D94C~            			      EXEEND_
0380   D94C~            			      EXEEND_
0380   D94C             
0380   D945             
0380   D945 48          
0380   D946             
0380   D94C             
0380   D94C~            			      EXEEND_
0380   D94C~            			      EXEEND_
0380   D94C             
0381   D94C             			ENDIF_
0381   D94C             
0381   D94C             
0381   D94C             
0381   D94C             
0381   D94C             
0381   D94C~            			ENDIF_
0381   D94C~            			ENDIF_
0381   D94C             
0381   D94C~            			ENDIF_
0381   D94C~            			ENDIF_
0381   D94C             
0381   D944             
0381   D944 07          
0381   D945             
0381   D945             
0381   D945~            			ENDIF_
0381   D945~            			ENDIF_
0381   D945~            			ENDIF_
0381   D945~            			ENDIF_
0381   D945~            			ENDIF_
0381   D945             
0381   D94C             
0381   D94C~            			ENDIF_
0381   D94C~            			ENDIF_
0381   D94C             
0382   D94C             			SLEEP_(192)
0382   D94C~            			SLEEP_(192)
0382   D94C~            			SLEEP_(192)
0382   D94C             
0382   D94C 53 C0       
0382   D94E             
0383   D94E 5E 29       			SWCLR_($29)				;Clear Sw#: $29(outhole)
0384   D950             			KILL_					;Remove This Thread
0384   D950 03          
0385   D951             
0386   D951             ;***************************************************************
0387   D951             ;*
0388   D951             ;***************************************************************
0389   D951 BD F3 AB    gj_2B			jsr	macro_start
0390   D954             			JMPR_(gb_56)	
0390   D954~            			JMPR_(gb_56)	
0390   D954~            			JMPR_(gb_56)	
0390   D954             
0390   D954~            			JMPR_(gb_56)	
0390   D954~            			JMPR_(gb_56)	
0390   D954             
0390   D954             
0390   D954 8F          
0390   D955 D9          
0391   D956             			
0392   D956             ;***************************************************************
0393   D956             ;* Multiball counter: This routine is responsible for incrementing
0394   D956             ;* the count in the player 1 score display at the start of the
0395   D956             ;* multiball animation process. It resets game_ram_d and increments
0396   D956             ;* it until it matches the value of game_ram_a
0397   D956             ;***************************************************************					
0398   D956 4F          mb_countup		clra	
0399   D957 97 0D       			staa	game_ram_d
0400   D959             			begin
0400   D959             
0401   D959 16          				tab	
0402   D95A BD EC F3    				jsr	split_ab
0403   D95D 8A 0F       				oraa	#$0F
0404   D95F CA F0       				orab	#$F0
0405   D961 97 49       				staa	$49
0406   D963 D7 48       				stab	score_p1_b1
0407   D965 86 0C       				ldaa	#$0C
0408   D967 BD EC FC    				jsr	isnd_once
0409   D96A BD EA 2F    				jsr	addthread
0410   D96D 05          				.db $05
0411   D96E 96 0D       				ldaa	game_ram_d
0412   D970 8B 01       				adda	#$01
0413   D972 19          				daa	
0414   D973 25 06       				bcs	countup_end
0415   D975 97 0D       				staa	game_ram_d
0416   D977 91 0A       				cmpa	game_ram_a
0417   D979             			hiend
0417   D979             
0417   D979             
0417   D979~            			hiend
0417   D979~            			hiend
0417   D979~            			hiend
0417   D979             
0417   D979 23 DE       
0417   D97B             
0417   D97B~            			hiend
0417   D97B~            			hiend
0417   D97B             
0418   D97B 39          countup_end		rts	
0419   D97C             
0420   D97C             ;******************************************************
0421   D97C             ;* This will show the current timer value in the digit
0422   D97C             ;* specified in X.
0423   D97C             ;******************************************************
0424   D97C D6 0A       show_timer		ldab	game_ram_a			;Get timer value
0425   D97E 96 E3       time_disp		ldaa	spare_ram+3			;If spare_ram+3 != zero then numbers span digit bytes
0426   D980             			ifne
0426   D980             
0426   D980 27 FE       
0427   D982 17          				tba	
0428   D983 BD EC F3    				jsr	split_ab
0429   D986 8A 0F       				oraa	#$0F
0430   D988 CA F0       				orab	#$F0
0431   D98A A7 01       				staa	$01,X				;Split them up
0432   D98C             			endif
0432   D98C             
0432   D98C             
0432   D98C             
0432   D98C             
0432   D98C             
0432   D98C~            			endif
0432   D98C~            			endif
0432   D98C             
0432   D98C~            			endif
0432   D98C~            			endif
0432   D98C             
0432   D981             
0432   D981 0A          
0432   D982             
0432   D982             
0432   D982~            			endif
0432   D982~            			endif
0432   D982~            			endif
0432   D982             
0432   D98C             
0432   D98C~            			endif
0432   D98C~            			endif
0432   D98C             
0433   D98C E7 00       			stab	$00,X				;Store them...
0434   D98E 8C 00 4B    			cpx	#score_p2_b1-1		;Are we at the right side of player 2?
0435   D991             			ifeq
0435   D991             
0435   D991 26 FE       
0436   D993 96 E3       				ldaa	spare_ram+3
0437   D995             				ifne
0437   D995             
0437   D995 27 FE       
0438   D997 96 0A       					ldaa	game_ram_a
0439   D999 97 4C       					staa	score_p2_b1
0440   D99B             				endif
0440   D99B             
0440   D99B             
0440   D99B             
0440   D99B             
0440   D99B             
0440   D99B~            				endif
0440   D99B~            				endif
0440   D99B             
0440   D99B~            				endif
0440   D99B~            				endif
0440   D99B             
0440   D996             
0440   D996 04          
0440   D997             
0440   D997             
0440   D997~            				endif
0440   D997~            				endif
0440   D997~            				endif
0440   D997             
0440   D99B             
0440   D99B~            				endif
0440   D99B~            				endif
0440   D99B             
0441   D99B             			endif
0441   D99B             
0441   D99B             
0441   D99B             
0441   D99B             
0441   D99B             
0441   D99B~            			endif
0441   D99B~            			endif
0441   D99B             
0441   D99B~            			endif
0441   D99B~            			endif
0441   D99B             
0441   D992             
0441   D992 08          
0441   D993             
0441   D993             
0441   D993~            			endif
0441   D993~            			endif
0441   D993~            			endif
0441   D993             
0441   D99B             
0441   D99B~            			endif
0441   D99B~            			endif
0441   D99B             
0442   D99B 39          			rts	
0443   D99C             
0444   D99C             ;*******************************************************
0445   D99C             ;* This thread follows behind and erases the previous
0446   D99C             ;* displayed value.
0447   D99C             ;*******************************************************
0448   D99C C6 FF       erase_timer		ldab	#$FF
0449   D99E 20 DE       			bra	time_disp
0450   D9A0             
0451   D9A0             ;*******************************************************
0452   D9A0             ;* Fix edges
0453   D9A0             ;*******************************************************			
0454   D9A0 96 E4       fix_edges		ldaa	spare_ram+4		;Moving Right or Left?
0455   D9A2             			ifne				;Left
0455   D9A2             
0455   D9A2 27 FE       
0456   D9A4 96 E3       				ldaa	spare_ram+3		;Spanning digit
0457   D9A6             				ifeq
0457   D9A6             
0457   D9A6 26 FE       
0458   D9A8 09          					dex	
0459   D9A9 8C 00 53    					cpx	#score_p4_b1-1
0460   D9AC 26 11       					bne	fix_end
0461   D9AE 0D          					sec	
0462   D9AF 39          					rts				;We are done	
0463   D9B0             				endif
0463   D9B0             
0463   D9B0             
0463   D9B0             
0463   D9B0             
0463   D9B0             
0463   D9B0~            				endif
0463   D9B0~            				endif
0463   D9B0             
0463   D9B0~            				endif
0463   D9B0~            				endif
0463   D9B0             
0463   D9A7             
0463   D9A7 08          
0463   D9A8             
0463   D9A8             
0463   D9A8~            				endif
0463   D9A8~            				endif
0463   D9A8~            				endif
0463   D9A8             
0463   D9B0             
0463   D9B0~            				endif
0463   D9B0~            				endif
0463   D9B0             
0464   D9B0 8C 00 54    				cpx	#score_p4_b1
0465   D9B3             				ifeq				;Put half in MBIP 
0465   D9B3             
0465   D9B3 26 FE       
0466   D9B5 96 0A       					ldaa	game_ram_a
0467   D9B7 44          					lsra	
0468   D9B8 44          					lsra	
0469   D9B9 44          					lsra	
0470   D9BA 44          					lsra	
0471   D9BB 8A F0       					oraa	#$F0
0472   D9BD 97 59       					staa	mbip_b1
0473   D9BF             				endif
0473   D9BF             
0473   D9BF             
0473   D9BF             
0473   D9BF             
0473   D9BF             
0473   D9BF~            				endif
0473   D9BF~            				endif
0473   D9BF             
0473   D9BF~            				endif
0473   D9BF~            				endif
0473   D9BF             
0473   D9B4             
0473   D9B4 0A          
0473   D9B5             
0473   D9B5             
0473   D9B5~            				endif
0473   D9B5~            				endif
0473   D9B5~            				endif
0473   D9B5             
0473   D9BF             
0473   D9BF~            				endif
0473   D9BF~            				endif
0473   D9BF             
0474   D9BF 73 00 E3    fix_end			com	spare_ram+3
0475   D9C2 0C          				clc	
0476   D9C3 39          				rts
0477   D9C4             			endif	
0477   D9C4             
0477   D9C4             
0477   D9C4             
0477   D9C4             
0477   D9C4             
0477   D9C4~            			endif	
0477   D9C4~            			endif	
0477   D9C4             
0477   D9C4~            			endif	
0477   D9C4~            			endif	
0477   D9C4             
0477   D9A3             
0477   D9A3 20          
0477   D9A4             
0477   D9A4             
0477   D9A4~            			endif	
0477   D9A4~            			endif	
0477   D9A4~            			endif	
0477   D9A4             
0477   D9C4             
0477   D9C4~            			endif	
0477   D9C4~            			endif	
0477   D9C4             
0478   D9C4             			;Here if was moving right
0479   D9C4 96 E3       			ldaa	spare_ram+3
0480   D9C6 27 F7       			beq	fix_end
0481   D9C8 08          			inx	
0482   D9C9 20 F4       			bra	fix_end
0483   D9CB             
0484   D9CB             ;*******************************************************
0485   D9CB             ;* Adjusts X value for display animation
0486   D9CB             ;*******************************************************			
0487   D9CB 8C 00 4F    adj_anix		cpx	#score_p3_b1-1		;Are we at the end of Player 2
0488   D9CE             			ifeq					;yes
0488   D9CE             
0488   D9CE 26 FE       
0489   D9D0 CE 00 53    				ldx	#score_p4_b1-1		;then, adjust to the end of Player 3
0490   D9D3 73 00 E4    chng_dir			com	spare_ram+4			;Chage direction
0491   D9D6 0D          				sec	
0492   D9D7 39          				rts	
0493   D9D8             			endif			
0493   D9D8             
0493   D9D8             
0493   D9D8             
0493   D9D8             
0493   D9D8             
0493   D9D8~            			endif			
0493   D9D8~            			endif			
0493   D9D8             
0493   D9D8~            			endif			
0493   D9D8~            			endif			
0493   D9D8             
0493   D9CF             
0493   D9CF 08          
0493   D9D0             
0493   D9D0             
0493   D9D0~            			endif			
0493   D9D0~            			endif			
0493   D9D0~            			endif			
0493   D9D0             
0493   D9D8             
0493   D9D8~            			endif			
0493   D9D8~            			endif			
0493   D9D8             
0494   D9D8 8C 00 50    			cpx	#score_p3_b1		;Are we at the start of Player 3
0495   D9DB             			ifeq					;yes
0495   D9DB             
0495   D9DB 26 FE       
0496   D9DD CE 00 54    				ldx	#score_p4_b1		;then, adjust to the start of Player 4
0497   D9E0 20 F1       				bra	chng_dir
0498   D9E2             			endif
0498   D9E2             
0498   D9E2             
0498   D9E2             
0498   D9E2             
0498   D9E2             
0498   D9E2~            			endif
0498   D9E2~            			endif
0498   D9E2             
0498   D9E2~            			endif
0498   D9E2~            			endif
0498   D9E2             
0498   D9DC             
0498   D9DC 05          
0498   D9DD             
0498   D9DD             
0498   D9DD~            			endif
0498   D9DD~            			endif
0498   D9DD~            			endif
0498   D9DD             
0498   D9E2             
0498   D9E2~            			endif
0498   D9E2~            			endif
0498   D9E2             
0499   D9E2 8C 00 4B    			cpx	#score_p2_b1-1		;Are we at the end of Player 1
0500   D9E5             			ifeq					;Yes
0500   D9E5             
0500   D9E5 26 FE       
0501   D9E7 96 E3       				ldaa	spare_ram+3			
0502   D9E9 27 0B       				beq	ret_clr
0503   D9EB 08          				inx	
0504   D9EC 0D          				sec	
0505   D9ED 39          				rts
0506   D9EE             			endif	
0506   D9EE             
0506   D9EE             
0506   D9EE             
0506   D9EE             
0506   D9EE             
0506   D9EE~            			endif	
0506   D9EE~            			endif	
0506   D9EE             
0506   D9EE~            			endif	
0506   D9EE~            			endif	
0506   D9EE             
0506   D9E6             
0506   D9E6 07          
0506   D9E7             
0506   D9E7             
0506   D9E7~            			endif	
0506   D9E7~            			endif	
0506   D9E7~            			endif	
0506   D9E7             
0506   D9EE             
0506   D9EE~            			endif	
0506   D9EE~            			endif	
0506   D9EE             
0507   D9EE 8C 00 57    			cpx	#mbip_b0-1			;Are we at the end of Player 4
0508   D9F1             			ifeq					;Yes...
0508   D9F1             
0508   D9F1 26 FE       
0509   D9F3 73 00 E4    				com	spare_ram+4			;change direction
0510   D9F6             			endif
0510   D9F6             
0510   D9F6             
0510   D9F6             
0510   D9F6             
0510   D9F6             
0510   D9F6~            			endif
0510   D9F6~            			endif
0510   D9F6             
0510   D9F6~            			endif
0510   D9F6~            			endif
0510   D9F6             
0510   D9F2             
0510   D9F2 03          
0510   D9F3             
0510   D9F3             
0510   D9F3~            			endif
0510   D9F3~            			endif
0510   D9F3~            			endif
0510   D9F3             
0510   D9F6             
0510   D9F6~            			endif
0510   D9F6~            			endif
0510   D9F6             
0511   D9F6 0C          ret_clr		clc	
0512   D9F7 39          			rts
0513   D9F8             			
0514   D9F8             ;***********************************************************
0515   D9F8             ;* This routine takes care of the fancy display during the
0516   D9F8             ;* start of multiball.
0517   D9F8             ;***********************************************************			
0518   D9F8             mb_fancy		BITON_($40)				;Turn ON: Bit#00
0518   D9F8             
0518   D9F8 10 40       
0519   D9FA             			PRI_($B5)				;Priority=#B5
0519   D9FA 52 B5       
0520   D9FC             			BEGIN_
0520   D9FC             
0521   D9FC             				SLEEP_(11)
0521   D9FC             
0521   D9FC 7B          
0521   D9FD~            				SLEEP_(11)
0521   D9FD~            				SLEEP_(11)
0521   D9FD             
0522   D9FD             			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   D9FD             
0522   D9FD 5AFEF2F240FD
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03             
0522   DA03             
0522   DA03             
0522   DA03             
0522   DA03             
0522   DA03             
0522   DA03             
0522   DA02             
0522   DA02 F9          
0522   DA03             
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03             
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0522   DA03             
0523   DA03             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
0523   DA03 55 F8 D0    
0524   DA06             			JSRDR_(cpdisp_show)		
0524   DA06~            			JSRDR_(cpdisp_show)		
0524   DA06~            			JSRDR_(cpdisp_show)		
0524   DA06             
0524   DA06~            			JSRDR_(cpdisp_show)		
0524   DA06~            			JSRDR_(cpdisp_show)		
0524   DA06             
0524   DA06             
0524   DA06 A4          
0524   DA07 03          
0525   DA08             			JSRR_(gi_off_inc)			
0525   DA08~            			JSRR_(gi_off_inc)			
0525   DA08~            			JSRR_(gi_off_inc)			
0525   DA08             
0525   DA08~            			JSRR_(gi_off_inc)			
0525   DA08~            			JSRR_(gi_off_inc)			
0525   DA08             
0525   DA08             
0525   DA08 90          
0525   DA09 93          
0526   DA0A             			BE29_($08)				;Effect: Range #08
0526   DA0A             
0526   DA0A 29 08       
0527   DA0C             			JSRDR_(timer_inc)		
0527   DA0C~            			JSRDR_(timer_inc)		
0527   DA0C~            			JSRDR_(timer_inc)		
0527   DA0C             
0527   DA0C~            			JSRDR_(timer_inc)		
0527   DA0C~            			JSRDR_(timer_inc)		
0527   DA0C             
0527   DA0C             
0527   DA0C A2          
0527   DA0D 79          
0528   DA0E             			CPUX_					;Resume CPU Execution
0528   DA0E 04          
0529   DA0F             			NEWTHREAD(attract_1)
0529   DA0F CE D8 79    
0529   DA12 BD EA C4    
0530   DA15             			NEWTHREAD(attract_2)
0530   DA15 CE DA A2    
0530   DA18 BD EA C4    
0531   DA1B 7F 00 60    			clr	comma_flags
0532   DA1E CE 00 48    			ldx	#score_p1_b1
0533   DA21 C6 10       			ldab	#$10
0534   DA23 86 FF       			ldaa	#$FF
0535   DA25 97 59       			staa	mbip_b1
0536   DA27 97 5B       			staa	cred_b1
0537   DA29 BD F8 40    			jsr	write_range			;Blank all displays in Buffer 1
0538   DA2C 86 FF       			ldaa	#$FF
0539   DA2E BD F8 A4    			jsr	store_display_mask
0540   DA31 BD D9 56    			jsr	mb_countup			;Increment counter in Player 1 score display
0541   DA34 BD F3 AB    			jsr	macro_start
0542   DA37             			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0542   DA37~            			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0542   DA37~            			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0542   DA37             
0542   DA37~            			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0542   DA37~            			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0542   DA37             
0542   DA37             
0542   DA37 92          
0542   DA38 6C          
0543   DA39             			CPUX_					;Resume CPU Execution
0543   DA39 04          
0544   DA3A CE 00 48    			ldx	#score_p1_b1
0545   DA3D 4F          			clra	
0546   DA3E 97 E4       			staa	spare_ram+4			;Store direction: 00=right ff=left
0547   DA40 43          			coma	
0548   DA41 97 E3       			staa	spare_ram+3			;Store Digit Span info: 00=normal ff=split
0549   DA43             			begin
0549   DA43             
0550   DA43             				begin
0550   DA43             
0551   DA43 BD D9 7C    					jsr	show_timer			;Show the digit
0552   DA46 BD EA 2F    					jsr	addthread			;Wait a bit
0553   DA49 08          					.db $08
0554   DA4A BD D9 9C    					jsr	erase_timer			;Erase trailing digits
0555   DA4D BD D9 CB    					jsr	adj_anix			;Adjust X value
0556   DA50             				ccend
0556   DA50             
0556   DA50             
0556   DA50~            				ccend
0556   DA50~            				ccend
0556   DA50~            				ccend
0556   DA50             
0556   DA50 25 F1       
0556   DA52             
0556   DA52~            				ccend
0556   DA52~            				ccend
0556   DA52             
0557   DA52 BD D9 A0    				jsr	fix_edges			;Fix transistions
0558   DA55             			csend
0558   DA55             
0558   DA55             
0558   DA55~            			csend
0558   DA55~            			csend
0558   DA55~            			csend
0558   DA55             
0558   DA55 24 EC       
0558   DA57             
0558   DA57~            			csend
0558   DA57~            			csend
0558   DA57             
0559   DA57             			;Now we are done with the walking animation
0560   DA57 96 0A       			ldaa	game_ram_a
0561   DA59 97 59       			staa	mbip_b1			;Put timer back in MBIP
0562   DA5B BD F3 AB    			jsr	macro_start
0563   DA5E             			;This next section will flash the time in the MBIP display 4 times...
0564   DA5E             			SETRAM_(regb,$04)			;RAM$01=$04
0564   DA5E~            			SETRAM_(regb,$04)			;RAM$01=$04
0564   DA5E~            			SETRAM_(regb,$04)			;RAM$01=$04
0564   DA5E             
0564   DA5E C1 04       
0565   DA60             			BEGIN_
0565   DA60             
0566   DA60             				SLEEP_(16)
0566   DA60~            				SLEEP_(16)
0566   DA60~            				SLEEP_(16)
0566   DA60             
0566   DA60 53 10       
0566   DA62             
0567   DA62             				EXE_
0567   DA62             
0567   DA62 44          
0568   DA63 86 FF       				      ldaa	#$FF
0569   DA65 97 59       				      staa	mbip_b1
0570   DA67             				EXEEND_
0570   DA67             
0570   DA67             
0570   DA67             
0570   DA67             
0570   DA67~            				EXEEND_
0570   DA67~            				EXEEND_
0570   DA67             
0570   DA62             
0570   DA62 46          
0570   DA63             
0570   DA67             
0570   DA67~            				EXEEND_
0570   DA67~            				EXEEND_
0570   DA67             
0571   DA67             				SLEEP_(16)
0571   DA67~            				SLEEP_(16)
0571   DA67~            				SLEEP_(16)
0571   DA67             
0571   DA67 53 10       
0571   DA69             
0572   DA69             				EXE_
0572   DA69             
0572   DA69 44          
0573   DA6A 96 0A       				      ldaa	game_ram_a
0574   DA6C 97 59       				      staa	mbip_b1
0575   DA6E             				EXEEND_
0575   DA6E             
0575   DA6E             
0575   DA6E             
0575   DA6E             
0575   DA6E~            				EXEEND_
0575   DA6E~            				EXEEND_
0575   DA6E             
0575   DA69             
0575   DA69 46          
0575   DA6A             
0575   DA6E             
0575   DA6E~            				EXEEND_
0575   DA6E~            				EXEEND_
0575   DA6E             
0576   DA6E             				ADDRAM_(regb,-1)			;RAM$01-=1
0576   DA6E~            				ADDRAM_(regb,-1)			;RAM$01-=1
0576   DA6E~            				ADDRAM_(regb,-1)			;RAM$01-=1
0576   DA6E             
0576   DA6E B1 FF       
0577   DA70             			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA70             
0577   DA70 5BFCE100FE  
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75             
0577   DA75             
0577   DA75             
0577   DA75             
0577   DA75             
0577   DA75             
0577   DA75             
0577   DA74             
0577   DA74 EB          
0577   DA75             
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75             
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0577   DA75             
0578   DA75             			EXE_
0578   DA75             
0578   DA75 44          
0579   DA76             			      ;Put back all the scores
0580   DA76 CE 00 00    			      ldx	#vm_reg_a
0581   DA79 DF 5C       			      stx	dmask_p1
0582   DA7B DF 5E       			      stx	dmask_p3
0583   DA7D 96 E1       			      ldaa	spare_ram+1
0584   DA7F 97 60       			      staa	comma_flags
0585   DA81             			EXEEND_
0585   DA81             
0585   DA81             
0585   DA81             
0585   DA81             
0585   DA81~            			EXEEND_
0585   DA81~            			EXEEND_
0585   DA81             
0585   DA75             
0585   DA75 4D          
0585   DA76             
0585   DA81             
0585   DA81~            			EXEEND_
0585   DA81~            			EXEEND_
0585   DA81             
0586   DA81             			JSRD_(update_commas)		
0586   DA81 57          
0586   DA82 EB A1       
0587   DA84             			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0587   DA84~            			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0587   DA84~            			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0587   DA84             
0587   DA84~            			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0587   DA84~            			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0587   DA84             
0587   DA84             
0587   DA84 92          
0587   DA85 2C          
0588   DA86             			SSND_($12)				;Sound #12
0588   DA86             
0588   DA86 F2          
0588   DA87~            			SSND_($12)				;Sound #12
0588   DA87~            			SSND_($12)				;Sound #12
0588   DA87~            			SSND_($12)				;Sound #12
0588   DA87             
0589   DA87             			BITOFF_($40)			;Turn OFF: Bit#00
0589   DA87             
0589   DA87 11 40       
0590   DA89             			JSRDR_(timer_dec)		
0590   DA89~            			JSRDR_(timer_dec)		
0590   DA89~            			JSRDR_(timer_dec)		
0590   DA89             
0590   DA89~            			JSRDR_(timer_dec)		
0590   DA89~            			JSRDR_(timer_dec)		
0590   DA89             
0590   DA89             
0590   DA89 A2          
0590   DA8A 09          
0591   DA8B             			REMTHREADS_($F8,$42)		;Remove Multiple Threads Based on Priority
0591   DA8B 55 F8 42    
0592   DA8E             ;************************************************************
0593   DA8E             ;* NOTE: This falls through from above!
0594   DA8E             ;* General Illumination Routines
0595   DA8E             ;************************************************************
0596   DA8E             gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0596   DA8E             
0596   DA8E             
0596   DA8E             
0596   DA8E 5AFCEC00FE  
0596   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0596   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0596   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0596   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0596   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0596   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0596   DA93             
0597   DA93             			      ADDRAM_($0C,-1)			;RAM$0C-=1
0597   DA93~            			      ADDRAM_($0C,-1)			;RAM$0C-=1
0597   DA93~            			      ADDRAM_($0C,-1)			;RAM$0C-=1
0597   DA93             
0597   DA93 BC FF       
0598   DA95             			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0598   DA95             
0598   DA95 5BFCEC0002  
0598   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0598   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0598   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0598   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0598   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0598   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0598   DA9A             
0599   DA9A             			ENDIF_
0599   DA9A             
0599   DA9A             
0599   DA9A             
0599   DA9A             
0599   DA9A             
0599   DA9A~            			ENDIF_
0599   DA9A~            			ENDIF_
0599   DA9A             
0599   DA9A~            			ENDIF_
0599   DA9A~            			ENDIF_
0599   DA9A             
0599   DA92             
0599   DA92 07          
0599   DA93             
0599   DA93             
0599   DA93~            			ENDIF_
0599   DA93~            			ENDIF_
0599   DA93~            			ENDIF_
0599   DA93~            			ENDIF_
0599   DA93~            			ENDIF_
0599   DA93             
0599   DA9A             
0599   DA9A~            			ENDIF_
0599   DA9A~            			ENDIF_
0599   DA9A             
0600   DA9A             			SOL_(gi_off)			;Turn OFF Sol#3:gi
0600   DA9A 31 02       
0601   DA9C             gi_on_dec_end	MRTS_					;Macro RTS, Save MRA,MRB
0601   DA9C 02          
0602   DA9D             
0603   DA9D             
0604   DA9D             gi_off_inc		ADDRAM_($0C,$01)			;RAM$0C+=$01
0604   DA9D~            gi_off_inc		ADDRAM_($0C,$01)			;RAM$0C+=$01
0604   DA9D~            gi_off_inc		ADDRAM_($0C,$01)			;RAM$0C+=$01
0604   DA9D             
0604   DA9D BC 01       
0605   DA9F             			SOL_(gi_on)			      ;Turn ON Sol#3:gi
0605   DA9F 31 E2       
0606   DAA1             			MRTS_					;Macro RTS, Save MRA,MRB
0606   DAA1 02          
0607   DAA2             
0608   DAA2             ;********************************************************
0609   DAA2             ;* Attract Mode Lamps 2
0610   DAA2             ;*
0611   DAA2             ;* This is a ping-pong effect on the left and right
0612   DAA2             ;* magna save lamps. One lamp is one and it bounces 
0613   DAA2             ;* from end to end in the group.
0614   DAA2             ;********************************************************
0615   DAA2             attract_2		NEWTHREAD(attract_2a)
0615   DAA2 CE DA D1    
0615   DAA5 BD EA C4    
0616   DAA8 BD F3 AB    			jsr	macro_start
0617   DAAB             			PRI_($43)				;Priority=#43
0617   DAAB 52 43       
0618   DAAD             			BITON2_($66)			;Turn ON: Lamp#26(lmag1)
0618   DAAD             
0618   DAAD 20 66       
0619   DAAF             			BITON2_($47)			;Turn ON: Lamp#07(rmag1)
0619   DAAF             
0619   DAAF 20 47       
0620   DAB1             			BITON2_($60)			;Turn ON: Lamp#20(dt1)
0620   DAB1             
0620   DAB1 20 60       
0621   DAB3             			BEGIN_
0621   DAB3             
0622   DAB3             				BEGIN_
0622   DAB3             
0623   DAB3             					ADDRAM_(rega,$01)			;RAM$00+=$01
0623   DAB3~            					ADDRAM_(rega,$01)			;RAM$00+=$01
0623   DAB3~            					ADDRAM_(rega,$01)			;RAM$00+=$01
0623   DAB3             
0623   DAB3 B0 01       
0624   DAB5             at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0624   DAB5             
0624   DAB5 5AFCFFE00100
0624   DABB 09
0624   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0624   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0624   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0624   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0624   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0624   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0624   DABC             
0625   DABC             				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DABC             
0625   DABC 5A F7 26 FF 
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0             
0625   DAC0             
0625   DAC0             
0625   DAC0             
0625   DAC0             
0625   DAC0             
0625   DAC0             
0625   DABF             
0625   DABF F3          
0625   DAC0             
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0             
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0625   DAC0             
0626   DAC0             				BE2D_($06,$05)			;Effect: Range #06 Range #05
0626   DAC0             
0626   DAC0 2D 86 05    
0627   DAC3             				JMPR_(at2_2)			
0627   DAC3~            				JMPR_(at2_2)			
0627   DAC3~            				JMPR_(at2_2)			
0627   DAC3             
0627   DAC3~            				JMPR_(at2_2)			
0627   DAC3~            				JMPR_(at2_2)			
0627   DAC3             
0627   DAC3             
0627   DAC3 80          
0627   DAC4 07          
0628   DAC5             at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC5             
0628   DAC5 5A F7 2A FF 
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9             
0628   DAC9             
0628   DAC9             
0628   DAC9             
0628   DAC9             
0628   DAC9             
0628   DAC9             
0628   DAC8             
0628   DAC8 EA          
0628   DAC9             
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9             
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0628   DAC9             
0629   DAC9             			BE2E_($06,$05)			;Effect: Range #06 Range #05
0629   DAC9             
0629   DAC9 2E 86 05    
0630   DACC             at2_2			BE2D_($0B)				;Effect: Range #0B
0630   DACC             
0630   DACC 2D 0B       
0631   DACE             			SLEEP_(4)
0631   DACE             
0631   DACE 74          
0631   DACF~            			SLEEP_(4)
0631   DACF~            			SLEEP_(4)
0631   DACF             
0632   DACF             			JMPR_(at2_loop)			
0632   DACF~            			JMPR_(at2_loop)			
0632   DACF~            			JMPR_(at2_loop)			
0632   DACF             
0632   DACF~            			JMPR_(at2_loop)			
0632   DACF~            			JMPR_(at2_loop)			
0632   DACF             
0632   DACF             
0632   DACF 8F          
0632   DAD0 E4          
0633   DAD1             			
0634   DAD1             ;********************************************************
0635   DAD1             ;* Attract Mode Lamps 2a
0636   DAD1             ;*
0637   DAD1             ;* This effect is the center lamps of the PF that include
0638   DAD1             ;* the double-score lamp, the multiplier lamps and the 
0639   DAD1             ;* bonus lamps from 1-30.  It is a sweep effect that 
0640   DAD1             ;* starts with the bottom (double-score) lamp and the 
0641   DAD1             ;* multiplier lamps turning on, then the bonus lamps 
0642   DAD1             ;* starting at 1 turning on and sequentially turning on
0643   DAD1             ;* up through 9. Once all lamps are on, the effect repeats
0644   DAD1             ;* but with the lamps turning off.
0645   DAD1             ;********************************************************			
0646   DAD1 BD F3 AB    attract_2a		jsr	macro_start
0647   DAD4             			PRI_($43)				;Priority=#43
0647   DAD4 52 43       
0648   DAD6             			BEGIN_
0648   DAD6             
0649   DAD6             				BITINV2_($59)			;Toggle: Lamp#19(double_score)
0649   DAD6             
0649   DAD6 22 59       
0650   DAD8             				BITINV2_($7C)			;Toggle: Lamp#3C(2x)
0650   DAD8             
0650   DAD8 22 7C       
0651   DADA             				BITINV2_($7F)			;Toggle: Lamp#3F(5x)
0651   DADA             
0651   DADA 22 7F       
0652   DADC             				SLEEP_(3)
0652   DADC             
0652   DADC 73          
0652   DADD~            				SLEEP_(3)
0652   DADD~            				SLEEP_(3)
0652   DADD             
0653   DADD             				BITINV2_($7D)			;Toggle: Lamp#3D(3x)
0653   DADD             
0653   DADD 22 7D       
0654   DADF             				BITINV2_($7E)			;Toggle: Lamp#3E(4x)
0654   DADF             
0654   DADF 22 7E       
0655   DAE1             				SETRAM_(rega,$6F)			;RAM$00=$6F
0655   DAE1~            				SETRAM_(rega,$6F)			;RAM$00=$6F
0655   DAE1~            				SETRAM_(rega,$6F)			;RAM$00=$6F
0655   DAE1             
0655   DAE1 C0 6F       
0656   DAE3             				BEGIN_
0656   DAE3             
0657   DAE3             					SLEEP_(3)
0657   DAE3             
0657   DAE3 73          
0657   DAE4~            					SLEEP_(3)
0657   DAE4~            					SLEEP_(3)
0657   DAE4             
0658   DAE4             					ADDRAM_(rega,$01)			;RAM$00+=$01
0658   DAE4~            					ADDRAM_(rega,$01)			;RAM$00+=$01
0658   DAE4~            					ADDRAM_(rega,$01)			;RAM$00+=$01
0658   DAE4             
0658   DAE4 B0 01       
0659   DAE6             					BITINVP2_(rega)			;Toggle Lamp/Bit @RAM:00
0659   DAE6             
0659   DAE6 26 00       
0660   DAE8             				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAE8             
0660   DAE8 5BFCE078FE  
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED             
0660   DAED             
0660   DAED             
0660   DAED             
0660   DAED             
0660   DAED             
0660   DAED             
0660   DAEC             
0660   DAEC F6          
0660   DAED             
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED             
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0660   DAED             
0661   DAED             				BITINV2_($7A)			;Toggle: Lamp#3A(bonus_20)
0661   DAED             
0661   DAED 22 7A       
0662   DAEF             				BITINV2_($7B)			;Toggle: Lamp#3B(bonus_30)
0662   DAEF             
0662   DAEF 22 7B       
0663   DAF1             				SLEEP_(3)
0663   DAF1             
0663   DAF1 73          
0663   DAF2~            				SLEEP_(3)
0663   DAF2~            				SLEEP_(3)
0663   DAF2             
0664   DAF2             				BITINV2_($79)			;Toggle: Lamp#39(bonus_10)
0664   DAF2             
0664   DAF2 22 79       
0665   DAF4             				SLEEP_(3)
0665   DAF4             
0665   DAF4 73          
0665   DAF5~            				SLEEP_(3)
0665   DAF5~            				SLEEP_(3)
0665   DAF5             
0666   DAF5             			LOOP_
0666   DAF5             
0666   DAF5             
0666   DAF5~            			LOOP_
0666   DAF5~            			LOOP_
0666   DAF5             
0666   DAF5~            			LOOP_
0666   DAF5~            			LOOP_
0666   DAF5             
0666   DAF5             
0666   DAF5 8F          
0666   DAF6 DF          
0667   DAF7             
0668   DAF7             ;***************************************************************
0669   DAF7             ;* Left Return Lane Code:
0670   DAF7             ;***************************************************************						
0671   DAF7             sw_4_rollover	EXE_
0671   DAF7             
0671   DAF7 44          
0672   DAF8             			      NEWTHREAD(sw_12345_com)		;Spawn the new thread for 12345 logic
0672   DAF8 CE E1 96    
0672   DAFB BD EA C4    
0673   DAFE             			EXEEND_
0673   DAFE             
0673   DAFE             
0673   DAFE             
0673   DAFE             
0673   DAFE~            			EXEEND_
0673   DAFE~            			EXEEND_
0673   DAFE             
0673   DAF7             
0673   DAF7 48          
0673   DAF8             
0673   DAFE             
0673   DAFE~            			EXEEND_
0673   DAFE~            			EXEEND_
0673   DAFE             
0674   DAFE             			JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp		
0674   DAFE~            			JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp		
0674   DAFE~            			JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp		
0674   DAFE             
0674   DAFE~            			JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp		
0674   DAFE~            			JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp		
0674   DAFE             
0674   DAFE             
0674   DAFE A0          
0674   DAFF 12          
0675   DB00             			JSRR_(inc_bonus)			;1 bonus advance		
0675   DB00~            			JSRR_(inc_bonus)			;1 bonus advance		
0675   DB00~            			JSRR_(inc_bonus)			;1 bonus advance		
0675   DB00             
0675   DB00~            			JSRR_(inc_bonus)			;1 bonus advance		
0675   DB00~            			JSRR_(inc_bonus)			;1 bonus advance		
0675   DB00             
0675   DB00             
0675   DB00 91          
0675   DB01 FD          
0676   DB02             			IFNER_($41)			      ;BEQR_BIT#01
0676   DB02             
0676   DB02             
0676   DB02             
0676   DB02 5A 41 00    
0676   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0676   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0676   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0676   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0676   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0676   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0676   DB05             
0677   DB05                   			BITFL_($2B)				;Flash: Lamp#2B(extra_kick)
0677   DB05             
0677   DB05 13 2B       
0678   DB07                   			PRI_($20)				;Priority=#20
0678   DB07 52 20       
0679   DB09                   			JSRD_(get_lord_num)			
0679   DB09 57          
0679   DB0A E5 95       
0680   DB0C 60                			SLEEPI_(rega)			;Delay RAM$00
0681   DB0D                   			SLEEP_(160)
0681   DB0D~                  			SLEEP_(160)
0681   DB0D~                  			SLEEP_(160)
0681   DB0D             
0681   DB0D 53 A0       
0681   DB0F             
0682   DB0F                   			BITOFF_($2B)			;Turn OFF: Lamp#2B(extra_kick)
0682   DB0F             
0682   DB0F 11 2B       
0683   DB11                   	      ENDIF_
0683   DB11             
0683   DB11             
0683   DB11             
0683   DB11             
0683   DB11             
0683   DB11~                  	      ENDIF_
0683   DB11~                  	      ENDIF_
0683   DB11             
0683   DB11~                  	      ENDIF_
0683   DB11~                  	      ENDIF_
0683   DB11             
0683   DB04             
0683   DB04 0C          
0683   DB05             
0683   DB05             
0683   DB05~                  	      ENDIF_
0683   DB05~                  	      ENDIF_
0683   DB05~                  	      ENDIF_
0683   DB05~                  	      ENDIF_
0683   DB05~                  	      ENDIF_
0683   DB05             
0683   DB11             
0683   DB11~                  	      ENDIF_
0683   DB11~                  	      ENDIF_
0683   DB11             
0684   DB11             			KILL_					;Remove This Thread
0684   DB11 03          
0685   DB12             
0686   DB12             spawn_loop		NEWTHREAD_JMP(activate_loop)
0686   DB12 CE DB 18    
0686   DB15 7E EA C4    
0687   DB18             			
0688   DB18 BD F3 AB    activate_loop	jsr	macro_start
0689   DB1B             			REMTHREADS_($F8,$50)		;Remove Multiple Threads Based on Priority
0689   DB1B 55 F8 50    
0690   DB1E             			PRI_($50)				;Priority=#50
0690   DB1E 52 50       
0691   DB20             			IFEQR_($F6,$01)			;BNER_RangeON#01
0691   DB20             
0691   DB20             
0691   DB20             
0691   DB20 5B F6 01 FF 
0691   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0691   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0691   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0691   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0691   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0691   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0691   DB24             
0692   DB24             				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0692   DB24             
0692   DB24             
0692   DB24             
0692   DB24 5AFCD601FE  
0692   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0692   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0692   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0692   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0692   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0692   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0692   DB29             
0693   DB29             	      			BITFL_($1D)				;Flash: Lamp#1D(loop_dshield)
0693   DB29             
0693   DB29 13 1D       
0694   DB2B             	      			SLEEP_(160)
0694   DB2B~            	      			SLEEP_(160)
0694   DB2B~            	      			SLEEP_(160)
0694   DB2B             
0694   DB2B 53 A0       
0694   DB2D             
0695   DB2D             	      			BITOFF_($1D)			;Turn OFF: Lamp#1D(loop_dshield)
0695   DB2D             
0695   DB2D 11 1D       
0696   DB2F             	      	      ENDIF_
0696   DB2F             
0696   DB2F             
0696   DB2F             
0696   DB2F             
0696   DB2F             
0696   DB2F~            	      	      ENDIF_
0696   DB2F~            	      	      ENDIF_
0696   DB2F             
0696   DB2F~            	      	      ENDIF_
0696   DB2F~            	      	      ENDIF_
0696   DB2F             
0696   DB28             
0696   DB28 06          
0696   DB29             
0696   DB29             
0696   DB29~            	      	      ENDIF_
0696   DB29~            	      	      ENDIF_
0696   DB29~            	      	      ENDIF_
0696   DB29~            	      	      ENDIF_
0696   DB29~            	      	      ENDIF_
0696   DB29             
0696   DB2F             
0696   DB2F~            	      	      ENDIF_
0696   DB2F~            	      	      ENDIF_
0696   DB2F             
0697   DB2F             	      		KILL_	
0697   DB2F 03          
0698   DB30             	      	ENDIF_				;Remove This Thread
0698   DB30             
0698   DB30             
0698   DB30             
0698   DB30             
0698   DB30             
0698   DB30~            	      	ENDIF_				;Remove This Thread
0698   DB30~            	      	ENDIF_				;Remove This Thread
0698   DB30             
0698   DB30~            	      	ENDIF_				;Remove This Thread
0698   DB30~            	      	ENDIF_				;Remove This Thread
0698   DB30             
0698   DB23             
0698   DB23 0C          
0698   DB24             
0698   DB24             
0698   DB24~            	      	ENDIF_				;Remove This Thread
0698   DB24~            	      	ENDIF_				;Remove This Thread
0698   DB24~            	      	ENDIF_				;Remove This Thread
0698   DB24~            	      	ENDIF_				;Remove This Thread
0698   DB24~            	      	ENDIF_				;Remove This Thread
0698   DB24             
0698   DB30             
0698   DB30~            	      	ENDIF_				;Remove This Thread
0698   DB30~            	      	ENDIF_				;Remove This Thread
0698   DB30             
0699   DB30             			;fall through
0700   DB30             ;***************************************************************
0701   DB30             ;* Will light the loop to award a bonus multiplier for a time
0702   DB30             ;* period determined by the number of multipliers already lit.
0703   DB30             ;***************************************************************
0704   DB30             light_x		BITFL_($1E)				;Flash: Lamp#1E(loop_x)
0704   DB30             
0704   DB30 13 1E       
0705   DB32             			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
0705   DB32             
0705   DB32 21 1E       
0706   DB34             			SLEEP_(96)
0706   DB34~            			SLEEP_(96)
0706   DB34~            			SLEEP_(96)
0706   DB34             
0706   DB34 53 60       
0706   DB36             
0707   DB36             			EXE_
0707   DB36             
0707   DB36 44          
0708   DB37 D6 17       			      ldab	$17
0709   DB39 C4 F0       			      andb	#$F0
0710   DB3B BD E5 A9    			      jsr	bits_to_int
0711   DB3E             			EXEEND_
0711   DB3E             
0711   DB3E             
0711   DB3E             
0711   DB3E             
0711   DB3E~            			EXEEND_
0711   DB3E~            			EXEEND_
0711   DB3E             
0711   DB36             
0711   DB36 49          
0711   DB37             
0711   DB3E             
0711   DB3E~            			EXEEND_
0711   DB3E~            			EXEEND_
0711   DB3E             
0712   DB3E             			EXE_
0712   DB3E             
0712   DB3E 44          
0713   DB3F 40          			      nega	
0714   DB40 48          			      asla	
0715   DB41 48          			      asla	
0716   DB42 48          			      asla	
0717   DB43 48          			      asla	
0718   DB44 48          			      asla	
0719   DB45 48          			      asla	
0720   DB46 4A          			      deca	
0721   DB47             			EXEEND_
0721   DB47             
0721   DB47             
0721   DB47             
0721   DB47             
0721   DB47~            			EXEEND_
0721   DB47~            			EXEEND_
0721   DB47             
0721   DB3E             
0721   DB3E 4A          
0721   DB3F             
0721   DB47             
0721   DB47~            			EXEEND_
0721   DB47~            			EXEEND_
0721   DB47             
0722   DB47 60          			SLEEPI_(rega)			;Delay RAM$00
0723   DB48             			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0723   DB48             
0723   DB48             
0723   DB48             
0723   DB48 5A 3E 00    
0723   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0723   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0723   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0723   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0723   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0723   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0723   DB4B             
0724   DB4B             			      SLEEP_(64)
0724   DB4B~            			      SLEEP_(64)
0724   DB4B~            			      SLEEP_(64)
0724   DB4B             
0724   DB4B 53 40       
0724   DB4D             
0725   DB4D             			ENDIF_
0725   DB4D             
0725   DB4D             
0725   DB4D             
0725   DB4D             
0725   DB4D             
0725   DB4D~            			ENDIF_
0725   DB4D~            			ENDIF_
0725   DB4D             
0725   DB4D~            			ENDIF_
0725   DB4D~            			ENDIF_
0725   DB4D             
0725   DB4A             
0725   DB4A 02          
0725   DB4B             
0725   DB4B             
0725   DB4B~            			ENDIF_
0725   DB4B~            			ENDIF_
0725   DB4B~            			ENDIF_
0725   DB4B~            			ENDIF_
0725   DB4B~            			ENDIF_
0725   DB4B             
0725   DB4D             
0725   DB4D~            			ENDIF_
0725   DB4D~            			ENDIF_
0725   DB4D             
0726   DB4D                   		BITOFF2_($5E)			;Turn OFF: Lamp#1E(loop_x)
0726   DB4D             
0726   DB4D 21 5E       
0727   DB4F             			BITON2_($1E)			;Turn ON: Lamp#1E(loop_x)
0727   DB4F             
0727   DB4F 20 1E       
0728   DB51             			SLEEP_(64)
0728   DB51~            			SLEEP_(64)
0728   DB51~            			SLEEP_(64)
0728   DB51             
0728   DB51 53 40       
0728   DB53             
0729   DB53             			BITOFF_($1E)			;Turn OFF: Lamp#1E(loop_x)
0729   DB53             
0729   DB53 11 1E       
0730   DB55             			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
0730   DB55             
0730   DB55 21 1E       
0731   DB57             			KILL_					;Remove This Thread
0731   DB57 03          
0732   DB58             
0733   DB58             ;**********************************************************************
0734   DB58             ;* Left Magnet Button
0735   DB58             ;**********************************************************************
0736   DB58             sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0736   DB58             
0736   DB58             
0736   DB58             
0736   DB58 5AFBFBF5066D
0736   DB5E 4FFB
0736   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0736   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0736   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0736   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0736   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0736   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0736   DB60             
0737   DB60             				PRI_($09)				;Priority=#09
0737   DB60 52 09       
0738   DB62             				SETRAM_(regb,$2B)			;RAM$01=$2B
0738   DB62~            				SETRAM_(regb,$2B)			;RAM$01=$2B
0738   DB62~            				SETRAM_(regb,$2B)			;RAM$01=$2B
0738   DB62             
0738   DB62 C1 2B       
0739   DB64             				JSRR_(gj_15)			
0739   DB64~            				JSRR_(gj_15)			
0739   DB64~            				JSRR_(gj_15)			
0739   DB64             
0739   DB64~            				JSRR_(gj_15)			
0739   DB64~            				JSRR_(gj_15)			
0739   DB64             
0739   DB64             
0739   DB64 90          
0739   DB65 2A          
0740   DB66             				BITON_($6D)				;Turn ON: Bit#2D - this will protect us from reentering here again
0740   DB66             
0740   DB66 10 6D       
0741   DB68             				SOL_(leftmag_on)		      ;Turn ON Sol#21:left_magnet
0741   DB68 31 F4       
0742   DB6A             				BEGIN_
0742   DB6A             
0743   DB6A             					SETRAM_(regb,$2B)			;RAM$01=$2B
0743   DB6A~            					SETRAM_(regb,$2B)			;RAM$01=$2B
0743   DB6A~            					SETRAM_(regb,$2B)			;RAM$01=$2B
0743   DB6A             
0743   DB6A C1 2B       
0744   DB6C             					JSRR_(gj_15)			
0744   DB6C~            					JSRR_(gj_15)			
0744   DB6C~            					JSRR_(gj_15)			
0744   DB6C             
0744   DB6C~            					JSRR_(gj_15)			
0744   DB6C~            					JSRR_(gj_15)			
0744   DB6C             
0744   DB6C             
0744   DB6C 90          
0744   DB6D 22          
0745   DB6E             					BE1C_($06)				;Effect: Range #06
0745   DB6E             
0745   DB6E 1C 06       
0746   DB70             					SETRAM_(rega,$20)			;RAM$00=$20
0746   DB70~            					SETRAM_(rega,$20)			;RAM$00=$20
0746   DB70~            					SETRAM_(rega,$20)			;RAM$00=$20
0746   DB70             
0746   DB70 C0 20       
0747   DB72             					BEGIN_
0747   DB72             
0748   DB72             						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0748   DB72~            						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0748   DB72~            						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0748   DB72             
0748   DB72~            						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0748   DB72~            						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0748   DB72             
0748   DB72             
0748   DB72 90          
0748   DB73 26          
0749   DB74             											;magnet on time is 20 ticks.		
0750   DB74             						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0750   DB74             
0750   DB74 5B F8 31 0F 
0750   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0750   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0750   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0750   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0750   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0750   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0750   DB78             
0751   DB78             					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB78             
0751   DB78 5BFCE000FE  
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D             
0751   DB7D             
0751   DB7D             
0751   DB7D             
0751   DB7D             
0751   DB7D             
0751   DB7D             
0751   DB7C             
0751   DB7C F5          
0751   DB7D             
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D             
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0751   DB7D             
0752   DB7D             					ADDRAM_(regb,$C0)			;RAM$01+=$C0
0752   DB7D~            					ADDRAM_(regb,$C0)			;RAM$01+=$C0
0752   DB7D~            					ADDRAM_(regb,$C0)			;RAM$01+=$C0
0752   DB7D             
0752   DB7D B1 C0       
0753   DB7F             					BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0753   DB7F             
0753   DB7F 25 01       
0754   DB81             				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB81             
0754   DB81 5B F5 06 FF 
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85             
0754   DB85             
0754   DB85             
0754   DB85             
0754   DB85             
0754   DB85             
0754   DB85             
0754   DB84             
0754   DB84 E5          
0754   DB85             
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85             
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0754   DB85             
0755   DB85             				;Here if we are out of magna-saves
0756   DB85             				ADDRAM_(regb,$40)			;RAM$01+=$40
0756   DB85~            				ADDRAM_(regb,$40)			;RAM$01+=$40
0756   DB85~            				ADDRAM_(regb,$40)			;RAM$01+=$40
0756   DB85             
0756   DB85 B1 40       
0757   DB87             lmag_off			SOL_(leftmag_off)             ;Turn OFF Sol#21:left_magnet
0757   DB87 31 14       
0758   DB89             				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0758   DB89~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0758   DB89~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0758   DB89             
0758   DB89 B1 C0       
0759   DB8B             				BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0759   DB8B             
0759   DB8B 25 01       
0760   DB8D             				BITOFF_($6D)			;Turn OFF: Bit#2D
0760   DB8D             
0760   DB8D 11 6D       
0761   DB8F             			ENDIF_
0761   DB8F             
0761   DB8F             
0761   DB8F             
0761   DB8F             
0761   DB8F             
0761   DB8F~            			ENDIF_
0761   DB8F~            			ENDIF_
0761   DB8F             
0761   DB8F~            			ENDIF_
0761   DB8F~            			ENDIF_
0761   DB8F             
0761   DB5F             
0761   DB5F 2F          
0761   DB60             
0761   DB60             
0761   DB60~            			ENDIF_
0761   DB60~            			ENDIF_
0761   DB60~            			ENDIF_
0761   DB60~            			ENDIF_
0761   DB60~            			ENDIF_
0761   DB60             
0761   DB8F             
0761   DB8F~            			ENDIF_
0761   DB8F~            			ENDIF_
0761   DB8F             
0762   DB8F             kill_2		KILL_					;Remove This Thread
0762   DB8F 03          
0763   DB90             
0764   DB90             
0765   DB90             gj_15			BEGIN_
0765   DB90             
0766   DB90             				ADDRAM_(regb,-1)			;RAM$01-=1
0766   DB90~            				ADDRAM_(regb,-1)			;RAM$01-=1
0766   DB90~            				ADDRAM_(regb,-1)			;RAM$01-=1
0766   DB90             
0766   DB90 B1 FF       
0767   DB92             			EQEND_($E1)				;BNER_RAM$01
0767   DB92             
0767   DB92 5B E1 00    
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95             
0767   DB95             
0767   DB95             
0767   DB95             
0767   DB95             
0767   DB95             
0767   DB95             
0767   DB94             
0767   DB94 FB          
0767   DB95             
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95             
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95~            			EQEND_($E1)				;BNER_RAM$01
0767   DB95             
0768   DB95             			BITONP2_(regb)			;Turn ON Lamp/Bit @RAM:01
0768   DB95             
0768   DB95 24 01       
0769   DB97             			ADDRAM_(regb,$40)			;RAM$01+=$40
0769   DB97~            			ADDRAM_(regb,$40)			;RAM$01+=$40
0769   DB97~            			ADDRAM_(regb,$40)			;RAM$01+=$40
0769   DB97             
0769   DB97 B1 40       
0770   DB99             			MRTS_					;Macro RTS, Save MRA,MRB
0770   DB99 02          
0771   DB9A             
0772   DB9A             ;**********************************************************************
0773   DB9A             ;* Routine to do the lamp effect for the magna-save. It will also
0774   DB9A             ;* decrement RAM $00 which is the minimum magnet on time counter and 
0775   DB9A             ;* create the magna-save sound.
0776   DB9A             ;**********************************************************************
0777   DB9A             mag_tick		SLEEP_(2)
0777   DB9A             
0777   DB9A 72          
0777   DB9B~            mag_tick		SLEEP_(2)
0777   DB9B~            mag_tick		SLEEP_(2)
0777   DB9B             
0778   DB9B             			BITINVP2_(regb)			;Toggle Lamp/Bit @RAM:01
0778   DB9B             
0778   DB9B 26 01       
0779   DB9D             			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0779   DB9D             
0779   DB9D             
0779   DB9D             
0779   DB9D 5BFAF9C0E1F3
0779   DBA3 FBFCE16AFCE14BF5
0779   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0779   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0779   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0779   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0779   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0779   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0779   DBAB             
0780   DBAB             				;BNER_((!(RAM$01==#75 || RAM$01==#106)) && (RAM$01 + BIT#80)) 
0781   DBAB             				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0781   DBAB~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0781   DBAB~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0781   DBAB             
0781   DBAB B1 C0       
0782   DBAD             				BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0782   DBAD             
0782   DBAD 25 01       
0783   DBAF             				ADDRAM_(regb,$01)			;RAM$01+=$01
0783   DBAF~            				ADDRAM_(regb,$01)			;RAM$01+=$01
0783   DBAF~            				ADDRAM_(regb,$01)			;RAM$01+=$01
0783   DBAF             
0783   DBAF B1 01       
0784   DBB1             				BITONP2_(regb)			;Turn ON Lamp/Bit @RAM:01
0784   DBB1             
0784   DBB1 24 01       
0785   DBB3             				ADDRAM_(regb,$40)			;RAM$01+=$40
0785   DBB3~            				ADDRAM_(regb,$40)			;RAM$01+=$40
0785   DBB3~            				ADDRAM_(regb,$40)			;RAM$01+=$40
0785   DBB3             
0785   DBB3 B1 40       
0786   DBB5             			ENDIF_
0786   DBB5             
0786   DBB5             
0786   DBB5             
0786   DBB5             
0786   DBB5             
0786   DBB5~            			ENDIF_
0786   DBB5~            			ENDIF_
0786   DBB5             
0786   DBB5~            			ENDIF_
0786   DBB5~            			ENDIF_
0786   DBB5             
0786   DBAA             
0786   DBAA 0A          
0786   DBAB             
0786   DBAB             
0786   DBAB~            			ENDIF_
0786   DBAB~            			ENDIF_
0786   DBAB~            			ENDIF_
0786   DBAB~            			ENDIF_
0786   DBAB~            			ENDIF_
0786   DBAB             
0786   DBB5             
0786   DBB5~            			ENDIF_
0786   DBB5~            			ENDIF_
0786   DBB5             
0787   DBB5             			ADDRAM_(rega,-1)			;RAM$00-=1
0787   DBB5~            			ADDRAM_(rega,-1)			;RAM$00-=1
0787   DBB5~            			ADDRAM_(rega,-1)			;RAM$00-=1
0787   DBB5             
0787   DBB5 B0 FF       
0788   DBB7             			SSND_($1A)				;Sound #1A
0788   DBB7             
0788   DBB7 FA          
0788   DBB8~            			SSND_($1A)				;Sound #1A
0788   DBB8~            			SSND_($1A)				;Sound #1A
0788   DBB8~            			SSND_($1A)				;Sound #1A
0788   DBB8             
0789   DBB8             			MRTS_					;Macro RTS, Save MRA,MRB
0789   DBB8 02          
0790   DBB9             ;**********************************************************************
0791   DBB9             ;* Right Magnet Button
0792   DBB9             ;**********************************************************************
0793   DBB9             sw_right_magnet	IFNER_($FB,$FB,$F5,$05,$6E,$4F)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0793   DBB9             
0793   DBB9             
0793   DBB9             
0793   DBB9 5AFBFBF5056E
0793   DBBF 4FFB
0793   DBC1~            sw_right_magnet	IFNER_($FB,$FB,$F5,$05,$6E,$4F)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0793   DBC1~            sw_right_magnet	IFNER_($FB,$FB,$F5,$05,$6E,$4F)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0793   DBC1~            sw_right_magnet	IFNER_($FB,$FB,$F5,$05,$6E,$4F)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0793   DBC1~            sw_right_magnet	IFNER_($FB,$FB,$F5,$05,$6E,$4F)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0793   DBC1~            sw_right_magnet	IFNER_($FB,$FB,$F5,$05,$6E,$4F)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0793   DBC1~            sw_right_magnet	IFNER_($FB,$FB,$F5,$05,$6E,$4F)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0793   DBC1             
0794   DBC1             				;BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	
0795   DBC1             				PRI_($09)				;Priority=#09
0795   DBC1 52 09       
0796   DBC3             				BITON_($6E)				;Bit#2E=1 - this will protect us from reentering here again
0796   DBC3             
0796   DBC3 10 6E       
0797   DBC5             				SOL_(rightmag_on)            	;Turn ON Sol#6:right_magnet
0797   DBC5 31 F5       
0798   DBC7             				BEGIN_
0798   DBC7             
0799   DBC7             					SETRAM_(regb,$0C)			;RAM$01=$0C
0799   DBC7~            					SETRAM_(regb,$0C)			;RAM$01=$0C
0799   DBC7~            					SETRAM_(regb,$0C)			;RAM$01=$0C
0799   DBC7             
0799   DBC7 C1 0C       
0800   DBC9             					JSRR_(gj_15)			
0800   DBC9~            					JSRR_(gj_15)			
0800   DBC9~            					JSRR_(gj_15)			
0800   DBC9             
0800   DBC9~            					JSRR_(gj_15)			
0800   DBC9~            					JSRR_(gj_15)			
0800   DBC9             
0800   DBC9             
0800   DBC9 9F          
0800   DBCA C5          
0801   DBCB             					BE1C_($05)				;Effect: Range #05
0801   DBCB             
0801   DBCB 1C 05       
0802   DBCD             					SETRAM_(rega,$20)			;RAM$00=$20
0802   DBCD~            					SETRAM_(rega,$20)			;RAM$00=$20
0802   DBCD~            					SETRAM_(rega,$20)			;RAM$00=$20
0802   DBCD             
0802   DBCD C0 20       
0803   DBCF             					BEGIN_
0803   DBCF             
0804   DBCF             						JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0804   DBCF~            						JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0804   DBCF~            						JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0804   DBCF             
0804   DBCF~            						JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0804   DBCF~            						JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0804   DBCF             
0804   DBCF             
0804   DBCF 9F          
0804   DBD0 C9          
0805   DBD1             												;magnet on time is $20 ticks.		
0806   DBD1             						BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0806   DBD1             
0806   DBD1 5B F8 30 0F 
0806   DBD5~            						BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0806   DBD5~            						BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0806   DBD5~            						BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0806   DBD5~            						BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0806   DBD5~            						BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0806   DBD5~            						BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0806   DBD5             
0807   DBD5             		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBD5             
0807   DBD5 5BFCE000FE  
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA             
0807   DBDA             
0807   DBDA             
0807   DBDA             
0807   DBDA             
0807   DBDA             
0807   DBDA             
0807   DBD9             
0807   DBD9 F5          
0807   DBDA             
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA             
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA~            		      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0807   DBDA             
0808   DBDA             		      		ADDRAM_(regb,$C0)			;RAM$01+=$C0
0808   DBDA~            		      		ADDRAM_(regb,$C0)			;RAM$01+=$C0
0808   DBDA~            		      		ADDRAM_(regb,$C0)			;RAM$01+=$C0
0808   DBDA             
0808   DBDA B1 C0       
0809   DBDC             		      		BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0809   DBDC             
0809   DBDC 25 01       
0810   DBDE             	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBDE             
0810   DBDE 5B F5 05 FF 
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2             
0810   DBE2             
0810   DBE2             
0810   DBE2             
0810   DBE2             
0810   DBE2             
0810   DBE2             
0810   DBE1             
0810   DBE1 E5          
0810   DBE2             
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2             
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2~            	      		EQEND_($F5,$05)			;BNER_RangeOFF#05
0810   DBE2             
0811   DBE2             	      		;Here if we are out of magna-saves
0812   DBE2             	      		ADDRAM_(regb,$40)			;RAM$01+=$40
0812   DBE2~            	      		ADDRAM_(regb,$40)			;RAM$01+=$40
0812   DBE2~            	      		ADDRAM_(regb,$40)			;RAM$01+=$40
0812   DBE2             
0812   DBE2 B1 40       
0813   DBE4             rmag_off			SOL_(rightmag_off)            ;Turn OFF Sol#6:right_magnet
0813   DBE4 31 15       
0814   DBE6             				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0814   DBE6~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0814   DBE6~            				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0814   DBE6             
0814   DBE6 B1 C0       
0815   DBE8             				BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0815   DBE8             
0815   DBE8 25 01       
0816   DBEA             				BITOFF_($6E)			;Bit#2E=0 Set the magnet status bit
0816   DBEA             
0816   DBEA 11 6E       
0817   DBEC             			ENDIF_
0817   DBEC             
0817   DBEC             
0817   DBEC             
0817   DBEC             
0817   DBEC             
0817   DBEC~            			ENDIF_
0817   DBEC~            			ENDIF_
0817   DBEC             
0817   DBEC~            			ENDIF_
0817   DBEC~            			ENDIF_
0817   DBEC             
0817   DBC0             
0817   DBC0 2B          
0817   DBC1             
0817   DBC1             
0817   DBC1~            			ENDIF_
0817   DBC1~            			ENDIF_
0817   DBC1~            			ENDIF_
0817   DBC1~            			ENDIF_
0817   DBC1~            			ENDIF_
0817   DBC1             
0817   DBEC             
0817   DBEC~            			ENDIF_
0817   DBEC~            			ENDIF_
0817   DBEC             
0818   DBEC             			KILL_					;Remove This Thread
0818   DBEC 03          
0819   DBED             
0820   DBED             ;**********************************************************************
0821   DBED             ;* Player Initialization: Called from System at start of each ball. 
0822   DBED             ;*                        This will flash the high score between balls.
0823   DBED             ;**********************************************************************
0824   DBED 96 60       hook_playerinit	ldaa	comma_flags
0825   DBEF 97 E1       			staa	spare_ram+1
0826   DBF1 7F 00 E5    			clr	spare_ram+5
0827   DBF4 BD F3 AB    			jsr	macro_start
0828   DBF7             			PRI_($05)				;Priority=#05
0828   DBF7 52 05       
0829   DBF9             			BITON_($4F)				;Turn ON: Bit#0F
0829   DBF9             
0829   DBF9 10 4F       
0830   DBFB             			CPUX_					;Resume CPU Execution
0830   DBFB 04          
0831   DBFC CE 01 81    			ldx	#adj_backuphstd
0832   DBFF BD EF 53    			jsr	cmosinc_a
0833   DC02             			ifne
0833   DC02             
0833   DC02 27 FE       
0834   DC04 DE CE       				ldx	pscore_buf
0835   DC06 A6 00       				ldaa	$00,X
0836   DC08 4C          				inca	
0837   DC09             				ifne
0837   DC09             
0837   DC09 27 FE       
0838   DC0B BD FA 0B    					jsr	show_hstd
0839   DC0E 86 7F       					ldaa	#$7F
0840   DC10 BD F8 A4    					jsr	store_display_mask
0841   DC13 86 FF       					ldaa	#$FF
0842   DC15 97 60       					staa	comma_flags
0843   DC17 86 1D       					ldaa	#$1D
0844   DC19 BD EC FC    					jsr	isnd_once
0845   DC1C 86 05       					ldaa	#$05
0846   DC1E BD F1 69    					jsr	lamp_flash
0847   DC21 BD EA 2F    					jsr	addthread
0848   DC24 80          					.db $80
0849   DC25             		
0850   DC25 BD F1 5B    					jsr	lamp_off
0851   DC28 96 E1       					ldaa	spare_ram+1
0852   DC2A 97 60       					staa	comma_flags
0853   DC2C 4F          					clra	
0854   DC2D BD F8 A4    					jsr	store_display_mask
0855   DC30             				endif
0855   DC30             
0855   DC30             
0855   DC30             
0855   DC30             
0855   DC30             
0855   DC30~            				endif
0855   DC30~            				endif
0855   DC30             
0855   DC30~            				endif
0855   DC30~            				endif
0855   DC30             
0855   DC0A             
0855   DC0A 25          
0855   DC0B             
0855   DC0B             
0855   DC0B~            				endif
0855   DC0B~            				endif
0855   DC0B~            				endif
0855   DC0B             
0855   DC30             
0855   DC30~            				endif
0855   DC30~            				endif
0855   DC30             
0856   DC30             			endif
0856   DC30             
0856   DC30             
0856   DC30             
0856   DC30             
0856   DC30             
0856   DC30~            			endif
0856   DC30~            			endif
0856   DC30             
0856   DC30~            			endif
0856   DC30~            			endif
0856   DC30             
0856   DC03             
0856   DC03 2C          
0856   DC04             
0856   DC04             
0856   DC04~            			endif
0856   DC04~            			endif
0856   DC04~            			endif
0856   DC04             
0856   DC30             
0856   DC30~            			endif
0856   DC30~            			endif
0856   DC30             
0857   DC30 BD F3 AB    			jsr	macro_start
0858   DC33             			IFNER_($61)			      ;BEQR_BIT#21
0858   DC33             
0858   DC33             
0858   DC33             
0858   DC33 5A 61 00    
0858   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0858   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0858   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0858   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0858   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0858   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0858   DC36             
0859   DC36                   			SLEEP_(96)
0859   DC36~                  			SLEEP_(96)
0859   DC36~                  			SLEEP_(96)
0859   DC36             
0859   DC36 53 60       
0859   DC38             
0860   DC38                   			BITON_($61)				;Turn ON: Bit#21
0860   DC38             
0860   DC38 10 61       
0861   DC3A                   		ENDIF_
0861   DC3A             
0861   DC3A             
0861   DC3A             
0861   DC3A             
0861   DC3A             
0861   DC3A~                  		ENDIF_
0861   DC3A~                  		ENDIF_
0861   DC3A             
0861   DC3A~                  		ENDIF_
0861   DC3A~                  		ENDIF_
0861   DC3A             
0861   DC35             
0861   DC35 04          
0861   DC36             
0861   DC36             
0861   DC36~                  		ENDIF_
0861   DC36~                  		ENDIF_
0861   DC36~                  		ENDIF_
0861   DC36~                  		ENDIF_
0861   DC36~                  		ENDIF_
0861   DC36             
0861   DC3A             
0861   DC3A~                  		ENDIF_
0861   DC3A~                  		ENDIF_
0861   DC3A             
0862   DC3A             			BE29_($47)				;Effect: Range #07
0862   DC3A             
0862   DC3A 29 47       
0863   DC3C             			JSRR_(add_drainshield)			
0863   DC3C~            			JSRR_(add_drainshield)			
0863   DC3C~            			JSRR_(add_drainshield)			
0863   DC3C             
0863   DC3C~            			JSRR_(add_drainshield)			
0863   DC3C~            			JSRR_(add_drainshield)			
0863   DC3C             
0863   DC3C             
0863   DC3C 95          
0863   DC3D E5          
0864   DC3E             			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0864   DC3E             
0864   DC3E             
0864   DC3E             
0864   DC3E 5BFCFF0FD701
0864   DC44 FC
0864   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0864   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0864   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0864   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0864   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0864   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0864   DC45             
0865   DC45             				BE19_($06,$05)			;Effect: Range #06 Range #05
0865   DC45             
0865   DC45 19 86 05    
0866   DC48             			ENDIF_
0866   DC48             
0866   DC48             
0866   DC48             
0866   DC48             
0866   DC48             
0866   DC48~            			ENDIF_
0866   DC48~            			ENDIF_
0866   DC48             
0866   DC48~            			ENDIF_
0866   DC48~            			ENDIF_
0866   DC48             
0866   DC44             
0866   DC44 03          
0866   DC45             
0866   DC45             
0866   DC45~            			ENDIF_
0866   DC45~            			ENDIF_
0866   DC45~            			ENDIF_
0866   DC45~            			ENDIF_
0866   DC45~            			ENDIF_
0866   DC45             
0866   DC48             
0866   DC48~            			ENDIF_
0866   DC48~            			ENDIF_
0866   DC48             
0867   DC48             			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0867   DC48             
0867   DC48             
0867   DC48             
0867   DC48 5AFCD901FE  
0867   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0867   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0867   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0867   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0867   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0867   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0867   DC4D             
0868   DC4D                   			EXE_
0868   DC4D             
0868   DC4D 44          
0869   DC4E                   			      NEWTHREAD(bg_snd)			;Start the BG Sound
0869   DC4E CE DC DF    
0869   DC51 BD EA C4    
0870   DC54                   			EXEEND_
0870   DC54             
0870   DC54             
0870   DC54             
0870   DC54             
0870   DC54~                  			EXEEND_
0870   DC54~                  			EXEEND_
0870   DC54             
0870   DC4D             
0870   DC4D 48          
0870   DC4E             
0870   DC54             
0870   DC54~                  			EXEEND_
0870   DC54~                  			EXEEND_
0870   DC54             
0871   DC54                   		ENDIF_
0871   DC54             
0871   DC54             
0871   DC54             
0871   DC54             
0871   DC54             
0871   DC54~                  		ENDIF_
0871   DC54~                  		ENDIF_
0871   DC54             
0871   DC54~                  		ENDIF_
0871   DC54~                  		ENDIF_
0871   DC54             
0871   DC4C             
0871   DC4C 07          
0871   DC4D             
0871   DC4D             
0871   DC4D~                  		ENDIF_
0871   DC4D~                  		ENDIF_
0871   DC4D~                  		ENDIF_
0871   DC4D~                  		ENDIF_
0871   DC4D~                  		ENDIF_
0871   DC4D             
0871   DC54             
0871   DC54~                  		ENDIF_
0871   DC54~                  		ENDIF_
0871   DC54             
0872   DC54             			IFEQR_($52)			;BNER_BIT#12
0872   DC54             
0872   DC54             
0872   DC54             
0872   DC54 5B 52 00    
0872   DC57~            			IFEQR_($52)			;BNER_BIT#12
0872   DC57~            			IFEQR_($52)			;BNER_BIT#12
0872   DC57~            			IFEQR_($52)			;BNER_BIT#12
0872   DC57~            			IFEQR_($52)			;BNER_BIT#12
0872   DC57~            			IFEQR_($52)			;BNER_BIT#12
0872   DC57~            			IFEQR_($52)			;BNER_BIT#12
0872   DC57             
0873   DC57                   			EXE_
0873   DC57             
0873   DC57 44          
0874   DC58                   			      NEWTHREAD(udt_init)		;Set up the Upper drop Targets
0874   DC58 CE DD 92    
0874   DC5B BD EA C4    
0875   DC5E                   			EXEEND_
0875   DC5E             
0875   DC5E             
0875   DC5E             
0875   DC5E             
0875   DC5E~                  			EXEEND_
0875   DC5E~                  			EXEEND_
0875   DC5E             
0875   DC57             
0875   DC57 48          
0875   DC58             
0875   DC5E             
0875   DC5E~                  			EXEEND_
0875   DC5E~                  			EXEEND_
0875   DC5E             
0876   DC5E                   	      ELSE_			
0876   DC5E             
0876   DC5E             
0876   DC5E             
0876   DC5E             
0876   DC56             
0876   DC56             
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56             
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56~                  	      ELSE_			
0876   DC56             
0876   DC56             
0876   DC56 09          
0876   DC5E             
0876   DC5E             
0876   DC5E~                  	      ELSE_			
0876   DC5E~                  	      ELSE_			
0876   DC5E             
0876   DC5E~                  	      ELSE_			
0876   DC5E~                  	      ELSE_			
0876   DC5E             
0876   DC5E             
0876   DC5E 80          
0876   DC5F 00          
0876   DC60             
0876   DC60             
0876   DC60             
0876   DC60~                  	      ELSE_			
0876   DC60~                  	      ELSE_			
0876   DC60             
0876   DC60~                  	      ELSE_			
0876   DC60~                  	      ELSE_			
0876   DC60             
0877   DC60             			      JSR_(udt_setup)
0877   DC60 56          
0877   DC61 E5 DA       
0878   DC63             			ENDIF_				
0878   DC63             
0878   DC63             
0878   DC63             
0878   DC63             
0878   DC63             
0878   DC63~            			ENDIF_				
0878   DC63~            			ENDIF_				
0878   DC63             
0878   DC63~            			ENDIF_				
0878   DC63~            			ENDIF_				
0878   DC63             
0878   DC5F             
0878   DC5F 03          
0878   DC60             
0878   DC60             
0878   DC60~            			ENDIF_				
0878   DC60~            			ENDIF_				
0878   DC60~            			ENDIF_				
0878   DC60~            			ENDIF_				
0878   DC60~            			ENDIF_				
0878   DC60             
0878   DC63             
0878   DC63~            			ENDIF_				
0878   DC63~            			ENDIF_				
0878   DC63             
0879   DC63             			SOL_(dtleft_on,dtright_on,gi_off,buzzer_off,bell_off)	
0879   DC63 35636402050E
0880   DC69                                                             ;Sol#4:dt_left ON  
0881   DC69             								;Sol#5:dt_right ON  
0882   DC69             								;Sol#3:GI OFF  
0883   DC69             								;Sol#6:buzzer OFF  
0884   DC69             								;Sol#15:bell OFF
0885   DC69             			SETRAM_($0C,$00)			;RAM$0C=$00	Reset GI counter
0885   DC69~            			SETRAM_($0C,$00)			;RAM$0C=$00	Reset GI counter
0885   DC69~            			SETRAM_($0C,$00)			;RAM$0C=$00	Reset GI counter
0885   DC69             
0885   DC69 CC 00       
0886   DC6B             			SETRAM_($0E,$00)			;RAM$0E=$00	Reset Bell counter
0886   DC6B~            			SETRAM_($0E,$00)			;RAM$0E=$00	Reset Bell counter
0886   DC6B~            			SETRAM_($0E,$00)			;RAM$0E=$00	Reset Bell counter
0886   DC6B             
0886   DC6B CE 00       
0887   DC6D             			SETRAM_($0F,$00)			;RAM$0F=$00 Reset Buzzer counter
0887   DC6D~            			SETRAM_($0F,$00)			;RAM$0F=$00 Reset Buzzer counter
0887   DC6D~            			SETRAM_($0F,$00)			;RAM$0F=$00 Reset Buzzer counter
0887   DC6D             
0887   DC6D CF 00       
0888   DC6F             			IFEQR_($41)			      ;BNER_BIT#01 
0888   DC6F             
0888   DC6F             
0888   DC6F             
0888   DC6F 5B 41 00    
0888   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0888   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0888   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0888   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0888   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0888   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0888   DC72             
0889   DC72             			      JSRD_(lock_thread)
0889   DC72 57          
0889   DC73 DD 82       
0890   DC75             			ENDIF_			
0890   DC75             
0890   DC75             
0890   DC75             
0890   DC75             
0890   DC75             
0890   DC75~            			ENDIF_			
0890   DC75~            			ENDIF_			
0890   DC75             
0890   DC75~            			ENDIF_			
0890   DC75~            			ENDIF_			
0890   DC75             
0890   DC71             
0890   DC71 03          
0890   DC72             
0890   DC72             
0890   DC72~            			ENDIF_			
0890   DC72~            			ENDIF_			
0890   DC72~            			ENDIF_			
0890   DC72~            			ENDIF_			
0890   DC72~            			ENDIF_			
0890   DC72             
0890   DC75             
0890   DC75~            			ENDIF_			
0890   DC75~            			ENDIF_			
0890   DC75             
0891   DC75             			JSRR_(do_trough)			
0891   DC75~            			JSRR_(do_trough)			
0891   DC75~            			JSRR_(do_trough)			
0891   DC75             
0891   DC75~            			JSRR_(do_trough)			
0891   DC75~            			JSRR_(do_trough)			
0891   DC75             
0891   DC75             
0891   DC75 92          
0891   DC76 76          
0892   DC77             			BITOFF_($55)			;Turn OFF: Bit#15
0892   DC77             
0892   DC77 11 55       
0893   DC79             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
0893   DC79 55 F8 D0    
0894   DC7C             			JSRDR_(cpdisp_show)		
0894   DC7C~            			JSRDR_(cpdisp_show)		
0894   DC7C~            			JSRDR_(cpdisp_show)		
0894   DC7C             
0894   DC7C~            			JSRDR_(cpdisp_show)		
0894   DC7C~            			JSRDR_(cpdisp_show)		
0894   DC7C             
0894   DC7C             
0894   DC7C A1          
0894   DC7D 8D          
0895   DC7E             			BITOFF_($4F)			;Turn OFF: Bit#0F
0895   DC7E             
0895   DC7E 11 4F       
0896   DC80 5EA5A6981C  			SWCLR_($A5,$A6,$98,$1C)		;Clear Sw#: $25(upper_eject) $26(lower_eject) $18(dt_rb) $1C(dt_ll)
0897   DC85             			CPUX_					;Resume CPU Execution
0897   DC85 04          
0898   DC86 39          			rts	
0899   DC87             			
0900   DC87 36          timer_inc		psha	
0901   DC88 96 E5       			ldaa	spare_ram+5
0902   DC8A 4C          			inca	
0903   DC8B 97 E5       			staa	spare_ram+5
0904   DC8D 86 C8       			ldaa	#$C8
0905   DC8F BD F2 08    			jsr	lampm_8
0906   DC92 32          			pula	
0907   DC93 39          			rts
0908   DC94             				
0909   DC94 36          timer_dec		psha	
0910   DC95 96 E5       			ldaa	spare_ram+5
0911   DC97             			ifne
0911   DC97             
0911   DC97 27 FE       
0912   DC99 4A          				deca	
0913   DC9A 97 E5       				staa	spare_ram+5
0914   DC9C 26 05       				bne	timer_dec_end
0915   DC9E             			endif
0915   DC9E             
0915   DC9E             
0915   DC9E             
0915   DC9E             
0915   DC9E             
0915   DC9E~            			endif
0915   DC9E~            			endif
0915   DC9E             
0915   DC9E~            			endif
0915   DC9E~            			endif
0915   DC9E             
0915   DC98             
0915   DC98 05          
0915   DC99             
0915   DC99             
0915   DC99~            			endif
0915   DC99~            			endif
0915   DC99~            			endif
0915   DC99             
0915   DC9E             
0915   DC9E~            			endif
0915   DC9E~            			endif
0915   DC9E             
0916   DC9E 86 C8       			ldaa	#$C8
0917   DCA0 BD F1 A7    			jsr	lampm_off
0918   DCA3 32          timer_dec_end	pula	
0919   DCA4 39          			rts	
0920   DCA5             
0921   DCA5             ;**********************************************************
0922   DCA5             ;* Bell Routines
0923   DCA5             ;**********************************************************			
0924   DCA5             bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0924   DCA5             
0924   DCA5             
0924   DCA5             
0924   DCA5 5BFCFFD8F2F0
0924   DCAB 00FB
0924   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0924   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0924   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0924   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0924   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0924   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0924   DCAD             
0925   DCAD             				ADDRAM_($0E,$01)			;RAM$0E+=$01
0925   DCAD~            				ADDRAM_($0E,$01)			;RAM$0E+=$01
0925   DCAD~            				ADDRAM_($0E,$01)			;RAM$0E+=$01
0925   DCAD             
0925   DCAD BE 01       
0926   DCAF             				SOL_(bell_on)			;Turn ON Sol#15:bell
0926   DCAF 31 EE       
0927   DCB1             			ENDIF_
0927   DCB1             
0927   DCB1             
0927   DCB1             
0927   DCB1             
0927   DCB1             
0927   DCB1~            			ENDIF_
0927   DCB1~            			ENDIF_
0927   DCB1             
0927   DCB1~            			ENDIF_
0927   DCB1~            			ENDIF_
0927   DCB1             
0927   DCAC             
0927   DCAC 04          
0927   DCAD             
0927   DCAD             
0927   DCAD~            			ENDIF_
0927   DCAD~            			ENDIF_
0927   DCAD~            			ENDIF_
0927   DCAD~            			ENDIF_
0927   DCAD~            			ENDIF_
0927   DCAD             
0927   DCB1             
0927   DCB1~            			ENDIF_
0927   DCB1~            			ENDIF_
0927   DCB1             
0928   DCB1             mrts_1		MRTS_					;Macro RTS, Save MRA,MRB
0928   DCB1 02          
0929   DCB2             
0930   DCB2             bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0930   DCB2             
0930   DCB2             
0930   DCB2             
0930   DCB2 5AFCEE00FE  
0930   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0930   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0930   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0930   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0930   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0930   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0930   DCB7             
0931   DCB7             			      ADDRAM_($0E,-1)			;RAM$0E-=1
0931   DCB7~            			      ADDRAM_($0E,-1)			;RAM$0E-=1
0931   DCB7~            			      ADDRAM_($0E,-1)			;RAM$0E-=1
0931   DCB7             
0931   DCB7 BE FF       
0932   DCB9             			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0932   DCB9             
0932   DCB9 5BFCEE00F3  
0932   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0932   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0932   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0932   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0932   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0932   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0932   DCBE             
0933   DCBE             			ENDIF_
0933   DCBE             
0933   DCBE             
0933   DCBE             
0933   DCBE             
0933   DCBE             
0933   DCBE~            			ENDIF_
0933   DCBE~            			ENDIF_
0933   DCBE             
0933   DCBE~            			ENDIF_
0933   DCBE~            			ENDIF_
0933   DCBE             
0933   DCB6             
0933   DCB6 07          
0933   DCB7             
0933   DCB7             
0933   DCB7~            			ENDIF_
0933   DCB7~            			ENDIF_
0933   DCB7~            			ENDIF_
0933   DCB7~            			ENDIF_
0933   DCB7~            			ENDIF_
0933   DCB7             
0933   DCBE             
0933   DCBE~            			ENDIF_
0933   DCBE~            			ENDIF_
0933   DCBE             
0934   DCBE             			SOL_(bell_off)    		;Turn OFF Sol#15:bell
0934   DCBE 31 0E       
0935   DCC0             			MRTS_					;Macro RTS, Save MRA,MRB
0935   DCC0 02          
0936   DCC1             
0937   DCC1             ;**********************************************************
0938   DCC1             ;* Buzzer Routines
0939   DCC1             ;**********************************************************
0940   DCC1             buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0940   DCC1             
0940   DCC1 5BFCFFD80F00
0940   DCC7 E9
0940   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0940   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0940   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0940   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0940   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0940   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0940   DCC8             
0941   DCC8             			ADDRAM_($0F,$01)			;RAM$0F+=$01
0941   DCC8~            			ADDRAM_($0F,$01)			;RAM$0F+=$01
0941   DCC8~            			ADDRAM_($0F,$01)			;RAM$0F+=$01
0941   DCC8             
0941   DCC8 BF 01       
0942   DCCA             			SOL_(buzzer_on)              	;Turn ON Sol#6:buzzer
0942   DCCA 31 E5       
0943   DCCC             			MRTS_					;Macro RTS, Save MRA,MRB
0943   DCCC 02          
0944   DCCD             
0945   DCCD             buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0945   DCCD             
0945   DCCD             
0945   DCCD             
0945   DCCD 5AFCEF00FE  
0945   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0945   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0945   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0945   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0945   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0945   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0945   DCD2             
0946   DCD2             			      ADDRAM_($0F,-1)			;RAM$0F-=1
0946   DCD2~            			      ADDRAM_($0F,-1)			;RAM$0F-=1
0946   DCD2~            			      ADDRAM_($0F,-1)			;RAM$0F-=1
0946   DCD2             
0946   DCD2 BF FF       
0947   DCD4             			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0947   DCD4             
0947   DCD4 5BFCEF00D8  
0947   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0947   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0947   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0947   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0947   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0947   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0947   DCD9             
0948   DCD9             			ENDIF_
0948   DCD9             
0948   DCD9             
0948   DCD9             
0948   DCD9             
0948   DCD9             
0948   DCD9~            			ENDIF_
0948   DCD9~            			ENDIF_
0948   DCD9             
0948   DCD9~            			ENDIF_
0948   DCD9~            			ENDIF_
0948   DCD9             
0948   DCD1             
0948   DCD1 07          
0948   DCD2             
0948   DCD2             
0948   DCD2~            			ENDIF_
0948   DCD2~            			ENDIF_
0948   DCD2~            			ENDIF_
0948   DCD2~            			ENDIF_
0948   DCD2~            			ENDIF_
0948   DCD2             
0948   DCD9             
0948   DCD9~            			ENDIF_
0948   DCD9~            			ENDIF_
0948   DCD9             
0949   DCD9             			SOL_(buzzer_off)            	;Turn OFF Sol#6:buzzer
0949   DCD9 31 05       
0950   DCDB             			MRTS_					;Macro RTS, Save MRA,MRB
0950   DCDB 02          
0951   DCDC             
0952   DCDC             
0953   DCDC             
0954   DCDC             
0955   DCDC             trough_kill		JSRR_(do_trough)			
0955   DCDC~            trough_kill		JSRR_(do_trough)			
0955   DCDC~            trough_kill		JSRR_(do_trough)			
0955   DCDC             
0955   DCDC~            trough_kill		JSRR_(do_trough)			
0955   DCDC~            trough_kill		JSRR_(do_trough)			
0955   DCDC             
0955   DCDC             
0955   DCDC 92          
0955   DCDD 0F          
0956   DCDE             			KILL_					;Remove This Thread
0956   DCDE 03          
0957   DCDF             
0958   DCDF             ;**********************************************************
0959   DCDF             ;* Background Sound Thread
0960   DCDF             ;**********************************************************
0961   DCDF BD F3 AB    bg_snd		jsr	macro_start
0962   DCE2             			PRI_($E0)				;Priority=#E0
0962   DCE2 52 E0       
0963   DCE4             			BEGIN_
0963   DCE4             
0964   DCE4             				SSND_($1B)				;Sound #1B
0964   DCE4             
0964   DCE4 FB          
0964   DCE5~            				SSND_($1B)				;Sound #1B
0964   DCE5~            				SSND_($1B)				;Sound #1B
0964   DCE5~            				SSND_($1B)				;Sound #1B
0964   DCE5             
0965   DCE5             				SETRAM_($0B,$00)			;RAM$0B=$00
0965   DCE5~            				SETRAM_($0B,$00)			;RAM$0B=$00
0965   DCE5~            				SETRAM_($0B,$00)			;RAM$0B=$00
0965   DCE5             
0965   DCE5 CB 00       
0966   DCE7             				BEGIN_
0966   DCE7             
0967   DCE7             					SLEEP_(255)
0967   DCE7~            					SLEEP_(255)
0967   DCE7~            					SLEEP_(255)
0967   DCE7             
0967   DCE7 53 FF       
0967   DCE9             
0968   DCE9             					SLEEP_(192)
0968   DCE9~            					SLEEP_(192)
0968   DCE9~            					SLEEP_(192)
0968   DCE9             
0968   DCE9 53 C0       
0968   DCEB             
0969   DCEB             				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCEB             
0969   DCEB 5AFCEB00FE  
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0             
0969   DCF0             
0969   DCF0             
0969   DCF0             
0969   DCF0             
0969   DCF0             
0969   DCF0             
0969   DCEF             
0969   DCEF F7          
0969   DCF0             
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0             
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0969   DCF0             
0970   DCF0             				JSRD_(send_sound)			
0970   DCF0 57          
0970   DCF1 FB 30       
0971   DCF3             			LOOP_
0971   DCF3             
0971   DCF3             
0971   DCF3~            			LOOP_
0971   DCF3~            			LOOP_
0971   DCF3             
0971   DCF3~            			LOOP_
0971   DCF3~            			LOOP_
0971   DCF3             
0971   DCF3             
0971   DCF3 8F          
0971   DCF4 EF          
0972   DCF5             
0973   DCF5             ;**************************************************************
0974   DCF5             ;* Add Bonus: This routine will add onto the running bonus, the
0975   DCF5             ;* 		  amount passed in B (RAM $01)
0976   DCF5             ;**************************************************************						
0977   DCF5             add_bonus_dly	BEGIN_
0977   DCF5             
0978   DCF5             				JSRR_(inc_bonus)			
0978   DCF5~            				JSRR_(inc_bonus)			
0978   DCF5~            				JSRR_(inc_bonus)			
0978   DCF5             
0978   DCF5~            				JSRR_(inc_bonus)			
0978   DCF5~            				JSRR_(inc_bonus)			
0978   DCF5             
0978   DCF5             
0978   DCF5 90          
0978   DCF6 08          
0979   DCF7             				ADDRAM_(regb,-1)			;RAM$01-=1
0979   DCF7~            				ADDRAM_(regb,-1)			;RAM$01-=1
0979   DCF7~            				ADDRAM_(regb,-1)			;RAM$01-=1
0979   DCF7             
0979   DCF7 B1 FF       
0980   DCF9             			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCF9             
0980   DCF9 5BFCE100FE  
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE             
0980   DCFE             
0980   DCFE             
0980   DCFE             
0980   DCFE             
0980   DCFE             
0980   DCFE             
0980   DCFD             
0980   DCFD F7          
0980   DCFE             
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE             
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0980   DCFE             
0981   DCFE             			MRTS_					;Macro RTS, Save MRA,MRB
0981   DCFE 02          
0982   DCFF             
0983   DCFF             inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0983   DCFF             
0983   DCFF             
0983   DCFF             
0983   DCFF 5AFBFA3BF600
0983   DD05 4FFB
0983   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0983   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0983   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0983   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0983   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0983   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0983   DD07             
0984   DD07             				BE1B_($00)				;Effect: Range #00
0984   DD07             
0984   DD07 1B 00       
0985   DD09             				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0985   DD09             
0985   DD09             
0985   DD09             
0985   DD09 5B F5 00 FF 
0985   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0985   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0985   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0985   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0985   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0985   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0985   DD0D             
0986   DD0D             	      			EXE_
0986   DD0D             
0986   DD0D 44          
0987   DD0E 36          	      			      psha	
0988   DD0F 86 03       	      			      ldaa	#$03
0989   DD11 BD F1 D5    	      			      jsr	$F1D5
0990   DD14 32          	      			      pula
0991   DD15             	      			EXEEND_	
0991   DD15             
0991   DD15             
0991   DD15             
0991   DD15             
0991   DD15~            	      			EXEEND_	
0991   DD15~            	      			EXEEND_	
0991   DD15             
0991   DD0D             
0991   DD0D 49          
0991   DD0E             
0991   DD15             
0991   DD15~            	      			EXEEND_	
0991   DD15~            	      			EXEEND_	
0991   DD15             
0992   DD15             	      	      ENDIF_
0992   DD15             
0992   DD15             
0992   DD15             
0992   DD15             
0992   DD15             
0992   DD15~            	      	      ENDIF_
0992   DD15~            	      	      ENDIF_
0992   DD15             
0992   DD15~            	      	      ENDIF_
0992   DD15~            	      	      ENDIF_
0992   DD15             
0992   DD0C             
0992   DD0C 08          
0992   DD0D             
0992   DD0D             
0992   DD0D~            	      	      ENDIF_
0992   DD0D~            	      	      ENDIF_
0992   DD0D~            	      	      ENDIF_
0992   DD0D~            	      	      ENDIF_
0992   DD0D~            	      	      ENDIF_
0992   DD0D             
0992   DD15             
0992   DD15~            	      	      ENDIF_
0992   DD15~            	      	      ENDIF_
0992   DD15             
0993   DD15             	      	ENDIF_
0993   DD15             
0993   DD15             
0993   DD15             
0993   DD15             
0993   DD15             
0993   DD15~            	      	ENDIF_
0993   DD15~            	      	ENDIF_
0993   DD15             
0993   DD15~            	      	ENDIF_
0993   DD15~            	      	ENDIF_
0993   DD15             
0993   DD06             
0993   DD06 0E          
0993   DD07             
0993   DD07             
0993   DD07~            	      	ENDIF_
0993   DD07~            	      	ENDIF_
0993   DD07~            	      	ENDIF_
0993   DD07~            	      	ENDIF_
0993   DD07~            	      	ENDIF_
0993   DD07             
0993   DD15             
0993   DD15~            	      	ENDIF_
0993   DD15~            	      	ENDIF_
0993   DD15             
0994   DD15             			MRTS_					;Macro RTS, Save MRA,MRB
0994   DD15 02          
0995   DD16             
0996   DD16             ;**************************************************************
0997   DD16             ;* Outhole Routine Called from System
0998   DD16             ;**************************************************************
0999   DD16 BD DE 0B    hook_outhole	jsr	cpdisp_show
1000   DD19 D6 CA       			ldab	flag_bonusball
1001   DD1B BD F3 AB    			jsr	macro_start
1002   DD1E             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
1002   DD1E 55 F8 D0    
1003   DD21             			JSRD_(send_sound)			
1003   DD21 57          
1003   DD22 FB 30       
1004   DD24             			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1004   DD24             
1004   DD24             
1004   DD24             
1004   DD24 5AFCE100FE  
1004   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1004   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1004   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1004   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1004   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1004   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
1004   DD29             
1005   DD29                   			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1005   DD29             
1005   DD29             
1005   DD29             
1005   DD29 5B 19 00    
1005   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1005   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1005   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1005   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1005   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1005   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1005   DD2C             
1006   DD2C                   			      BITFL_($19)				;Flash: Lamp#19(double_score)
1006   DD2C             
1006   DD2C 13 19       
1007   DD2E                   			ENDIF_
1007   DD2E             
1007   DD2E             
1007   DD2E             
1007   DD2E             
1007   DD2E             
1007   DD2E~                  			ENDIF_
1007   DD2E~                  			ENDIF_
1007   DD2E             
1007   DD2E~                  			ENDIF_
1007   DD2E~                  			ENDIF_
1007   DD2E             
1007   DD2B             
1007   DD2B 02          
1007   DD2C             
1007   DD2C             
1007   DD2C~                  			ENDIF_
1007   DD2C~                  			ENDIF_
1007   DD2C~                  			ENDIF_
1007   DD2C~                  			ENDIF_
1007   DD2C~                  			ENDIF_
1007   DD2C             
1007   DD2E             
1007   DD2E~                  			ENDIF_
1007   DD2E~                  			ENDIF_
1007   DD2E             
1008   DD2E                   			SETRAM_($08,$10)			;RAM$08=$10
1008   DD2E~                  			SETRAM_($08,$10)			;RAM$08=$10
1008   DD2E~                  			SETRAM_($08,$10)			;RAM$08=$10
1008   DD2E             
1008   DD2E C8 10       
1009   DD30                   			BE28_($4D)				;Effect: Range #0D (Bounus 1-30)
1009   DD30             
1009   DD30 28 4D       
1010   DD32             mult_loop		      SETRAM_(regb,$01)			;RAM$01=$01
1010   DD32~            mult_loop		      SETRAM_(regb,$01)			;RAM$01=$01
1010   DD32~            mult_loop		      SETRAM_(regb,$01)			;RAM$01=$01
1010   DD32             
1010   DD32 C1 01       
1011   DD34                   			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1011   DD34             
1011   DD34             
1011   DD34             
1011   DD34 5B 3E 00    
1011   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1011   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1011   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1011   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1011   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1011   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
1011   DD37             
1012   DD37                   			      SETRAM_(regb,$02)			;RAM$01=$02
1012   DD37~                  			      SETRAM_(regb,$02)			;RAM$01=$02
1012   DD37~                  			      SETRAM_(regb,$02)			;RAM$01=$02
1012   DD37             
1012   DD37 C1 02       
1013   DD39                   			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1013   DD39             
1013   DD39             
1013   DD39             
1013   DD39 5B 3F 00    
1013   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1013   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1013   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1013   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1013   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1013   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
1013   DD3C             
1014   DD3C                   			            SETRAM_(regb,$05)			;RAM$01=$05
1014   DD3C~                  			            SETRAM_(regb,$05)			;RAM$01=$05
1014   DD3C~                  			            SETRAM_(regb,$05)			;RAM$01=$05
1014   DD3C             
1014   DD3C C1 05       
1015   DD3E                   			      ENDIF_
1015   DD3E             
1015   DD3E             
1015   DD3E             
1015   DD3E             
1015   DD3E             
1015   DD3E~                  			      ENDIF_
1015   DD3E~                  			      ENDIF_
1015   DD3E             
1015   DD3E~                  			      ENDIF_
1015   DD3E~                  			      ENDIF_
1015   DD3E             
1015   DD3B             
1015   DD3B 02          
1015   DD3C             
1015   DD3C             
1015   DD3C~                  			      ENDIF_
1015   DD3C~                  			      ENDIF_
1015   DD3C~                  			      ENDIF_
1015   DD3C~                  			      ENDIF_
1015   DD3C~                  			      ENDIF_
1015   DD3C             
1015   DD3E             
1015   DD3E~                  			      ENDIF_
1015   DD3E~                  			      ENDIF_
1015   DD3E             
1016   DD3E                   			ENDIF_
1016   DD3E             
1016   DD3E             
1016   DD3E             
1016   DD3E             
1016   DD3E             
1016   DD3E~                  			ENDIF_
1016   DD3E~                  			ENDIF_
1016   DD3E             
1016   DD3E~                  			ENDIF_
1016   DD3E~                  			ENDIF_
1016   DD3E             
1016   DD36             
1016   DD36 07          
1016   DD37             
1016   DD37             
1016   DD37~                  			ENDIF_
1016   DD37~                  			ENDIF_
1016   DD37~                  			ENDIF_
1016   DD37~                  			ENDIF_
1016   DD37~                  			ENDIF_
1016   DD37             
1016   DD3E             
1016   DD3E~                  			ENDIF_
1016   DD3E~                  			ENDIF_
1016   DD3E             
1017   DD3E                   			BEGIN_
1017   DD3E             
1018   DD3E             		 			SETRAM_(rega,$0D)			;RAM$00=$0D
1018   DD3E~            		 			SETRAM_(rega,$0D)			;RAM$00=$0D
1018   DD3E~            		 			SETRAM_(rega,$0D)			;RAM$00=$0D
1018   DD3E             
1018   DD3E C0 0D       
1019   DD40             	      			JSRD_(lampm_x)
1019   DD40 57          
1019   DD41 F3 02       
1020   DD43             	      			;Do our bonus countdown here...			
1021   DD43             bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1021   DD43             
1021   DD43             
1021   DD43             
1021   DD43 5AFBF0F58DFD
1021   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1021   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1021   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1021   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1021   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1021   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1021   DD49             
1022   DD49             	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD49 40 1E       
1022   DD4B             
1022   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4B             
1022   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4B             
1022   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4B             
1022   DD4B             
1022   DD4B 0B          
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1022   DD4C             
1022   DD4C             
1022   DD4C             
1022   DD4C             
1023   DD4C             	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1023   DD4C             
1023   DD4C             
1023   DD4C             
1023   DD4C 5A F5 80 FF 
1023   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1023   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1023   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1023   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1023   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1023   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1023   DD50             
1024   DD50             	            			      BE2C_($00)				;Effect: Range #00
1024   DD50             
1024   DD50 2C 00       
1025   DD52             	            			ELSE_			
1025   DD52             
1025   DD52             
1025   DD52             
1025   DD52             
1025   DD4F             
1025   DD4F             
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F             
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F~            	            			ELSE_			
1025   DD4F             
1025   DD4F             
1025   DD4F 04          
1025   DD52             
1025   DD52             
1025   DD52~            	            			ELSE_			
1025   DD52~            	            			ELSE_			
1025   DD52             
1025   DD52~            	            			ELSE_			
1025   DD52~            	            			ELSE_			
1025   DD52             
1025   DD52             
1025   DD52 80          
1025   DD53 00          
1025   DD54             
1025   DD54             
1025   DD54             
1025   DD54~            	            			ELSE_			
1025   DD54~            	            			ELSE_			
1025   DD54             
1025   DD54~            	            			ELSE_			
1025   DD54~            	            			ELSE_			
1025   DD54             
1026   DD54             	                                    BE28_($00)				;Effect: Range #00
1026   DD54             
1026   DD54 28 00       
1027   DD56             	            			      SETRAM_(rega,$83)			;RAM$00=$83
1027   DD56~            	            			      SETRAM_(rega,$83)			;RAM$00=$83
1027   DD56~            	            			      SETRAM_(rega,$83)			;RAM$00=$83
1027   DD56             
1027   DD56 C0 83       
1028   DD58             	            			      JSRD_(lampm_z)
1028   DD58 57          
1028   DD59 F2 B3       
1029   DD5B             	            			ENDIF_			
1029   DD5B             
1029   DD5B             
1029   DD5B             
1029   DD5B             
1029   DD5B             
1029   DD5B~            	            			ENDIF_			
1029   DD5B~            	            			ENDIF_			
1029   DD5B             
1029   DD5B~            	            			ENDIF_			
1029   DD5B~            	            			ENDIF_			
1029   DD5B             
1029   DD53             
1029   DD53 07          
1029   DD54             
1029   DD54             
1029   DD54~            	            			ENDIF_			
1029   DD54~            	            			ENDIF_			
1029   DD54~            	            			ENDIF_			
1029   DD54~            	            			ENDIF_			
1029   DD54~            	            			ENDIF_			
1029   DD54             
1029   DD5B             
1029   DD5B~            	            			ENDIF_			
1029   DD5B~            	            			ENDIF_			
1029   DD5B             
1030   DD5B             				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1030   DD5B             
1030   DD5B             
1030   DD5B             
1030   DD5B 5AFCE802FE  
1030   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1030   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1030   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1030   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1030   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1030   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1030   DD60             
1031   DD60             	            			      ADDRAM_($08,-1)			;RAM$08-=1
1031   DD60~            	            			      ADDRAM_($08,-1)			;RAM$08-=1
1031   DD60~            	            			      ADDRAM_($08,-1)			;RAM$08-=1
1031   DD60             
1031   DD60 B8 FF       
1032   DD62             	            			ENDIF_
1032   DD62             
1032   DD62             
1032   DD62             
1032   DD62             
1032   DD62             
1032   DD62~            	            			ENDIF_
1032   DD62~            	            			ENDIF_
1032   DD62             
1032   DD62~            	            			ENDIF_
1032   DD62~            	            			ENDIF_
1032   DD62             
1032   DD5F             
1032   DD5F 02          
1032   DD60             
1032   DD60             
1032   DD60~            	            			ENDIF_
1032   DD60~            	            			ENDIF_
1032   DD60~            	            			ENDIF_
1032   DD60~            	            			ENDIF_
1032   DD60~            	            			ENDIF_
1032   DD60             
1032   DD62             
1032   DD62~            	            			ENDIF_
1032   DD62~            	            			ENDIF_
1032   DD62             
1033   DD62 68          				            SLEEPI_($8)				;Delay RAM$08
1034   DD63             	            			JMPR_(bonus_loop)
1034   DD63~            	            			JMPR_(bonus_loop)
1034   DD63~            	            			JMPR_(bonus_loop)
1034   DD63             
1034   DD63~            	            			JMPR_(bonus_loop)
1034   DD63~            	            			JMPR_(bonus_loop)
1034   DD63             
1034   DD63             
1034   DD63 8F          
1034   DD64 DE          
1035   DD65             	      			ENDIF_	
1035   DD65             
1035   DD65             
1035   DD65             
1035   DD65             
1035   DD65             
1035   DD65~            	      			ENDIF_	
1035   DD65~            	      			ENDIF_	
1035   DD65             
1035   DD65~            	      			ENDIF_	
1035   DD65~            	      			ENDIF_	
1035   DD65             
1035   DD48             
1035   DD48 1C          
1035   DD49             
1035   DD49             
1035   DD49~            	      			ENDIF_	
1035   DD49~            	      			ENDIF_	
1035   DD49~            	      			ENDIF_	
1035   DD49~            	      			ENDIF_	
1035   DD49~            	      			ENDIF_	
1035   DD49             
1035   DD65             
1035   DD65~            	      			ENDIF_	
1035   DD65~            	      			ENDIF_	
1035   DD65             
1036   DD65             				      ADDRAM_(regb,-1)			;RAM$01-=1
1036   DD65~            				      ADDRAM_(regb,-1)			;RAM$01-=1
1036   DD65~            				      ADDRAM_(regb,-1)			;RAM$01-=1
1036   DD65             
1036   DD65 B1 FF       
1037   DD67                   			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD67             
1037   DD67 5BFCE100FE  
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C             
1037   DD6C             
1037   DD6C             
1037   DD6C             
1037   DD6C             
1037   DD6C             
1037   DD6C             
1037   DD6B             
1037   DD6B D2          
1037   DD6C             
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C             
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1037   DD6C             
1038   DD6C                   			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1038   DD6C             
1038   DD6C             
1038   DD6C             
1038   DD6C 5A F5 01 FF 
1038   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1038   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1038   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1038   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1038   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1038   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1038   DD70             
1039   DD70                   			      BE1C_($01)				;Effect: Range #01
1039   DD70             
1039   DD70 1C 01       
1040   DD72                   			      JMPR_(mult_loop)
1040   DD72~                  			      JMPR_(mult_loop)
1040   DD72~                  			      JMPR_(mult_loop)
1040   DD72             
1040   DD72~                  			      JMPR_(mult_loop)
1040   DD72~                  			      JMPR_(mult_loop)
1040   DD72             
1040   DD72             
1040   DD72 8F          
1040   DD73 BE          
1041   DD74                   			ENDIF_	
1041   DD74             
1041   DD74             
1041   DD74             
1041   DD74             
1041   DD74             
1041   DD74~                  			ENDIF_	
1041   DD74~                  			ENDIF_	
1041   DD74             
1041   DD74~                  			ENDIF_	
1041   DD74~                  			ENDIF_	
1041   DD74             
1041   DD6F             
1041   DD6F 04          
1041   DD70             
1041   DD70             
1041   DD70~                  			ENDIF_	
1041   DD70~                  			ENDIF_	
1041   DD70~                  			ENDIF_	
1041   DD70~                  			ENDIF_	
1041   DD70~                  			ENDIF_	
1041   DD70             
1041   DD74             
1041   DD74~                  			ENDIF_	
1041   DD74~                  			ENDIF_	
1041   DD74             
1042   DD74                   	      ENDIF_	
1042   DD74             
1042   DD74             
1042   DD74             
1042   DD74             
1042   DD74             
1042   DD74~                  	      ENDIF_	
1042   DD74~                  	      ENDIF_	
1042   DD74             
1042   DD74~                  	      ENDIF_	
1042   DD74~                  	      ENDIF_	
1042   DD74             
1042   DD28             
1042   DD28 4B          
1042   DD29             
1042   DD29             
1042   DD29~                  	      ENDIF_	
1042   DD29~                  	      ENDIF_	
1042   DD29~                  	      ENDIF_	
1042   DD29~                  	      ENDIF_	
1042   DD29~                  	      ENDIF_	
1042   DD29             
1042   DD74             
1042   DD74~                  	      ENDIF_	
1042   DD74~                  	      ENDIF_	
1042   DD74             
1043   DD74             			BEGIN_
1043   DD74             
1044   DD74             				SSND_($1C)				;Sound #1C
1044   DD74             
1044   DD74 FC          
1044   DD75~            				SSND_($1C)				;Sound #1C
1044   DD75~            				SSND_($1C)				;Sound #1C
1044   DD75~            				SSND_($1C)				;Sound #1C
1044   DD75             
1045   DD75             				JSRDR_(cpdisp_show)		
1045   DD75~            				JSRDR_(cpdisp_show)		
1045   DD75~            				JSRDR_(cpdisp_show)		
1045   DD75             
1045   DD75~            				JSRDR_(cpdisp_show)		
1045   DD75~            				JSRDR_(cpdisp_show)		
1045   DD75             
1045   DD75             
1045   DD75 A0          
1045   DD76 94          
1046   DD77             				REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
1046   DD77 55 F8 D0    
1047   DD7A             				SLEEP_(2)
1047   DD7A             
1047   DD7A 72          
1047   DD7B~            				SLEEP_(2)
1047   DD7B~            				SLEEP_(2)
1047   DD7B             
1048   DD7B             			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD7B             
1048   DD7B 5AFB5162FE  
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80             
1048   DD80             
1048   DD80             
1048   DD80             
1048   DD80             
1048   DD80             
1048   DD80             
1048   DD7F             
1048   DD7F F4          
1048   DD80             
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80             
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1048   DD80             
1049   DD80             			CPUX_					;Resume CPU Execution
1049   DD80 04          
1050   DD81 39          			rts	
1051   DD82             
1052   DD82             ;**********************************************************
1053   DD82             ;* Lock Thread Enable: Creates a thread with ID = $60 that
1054   DD82             ;*                     flashes the lock lamp.
1055   DD82             ;**********************************************************			
1056   DD82             lock_thread		NEWTHREAD_JMP(lock_enable)
1056   DD82 CE DD 88    
1056   DD85 7E EA C4    
1057   DD88             			
1058   DD88 BD F3 AB    lock_enable		jsr	macro_start
1059   DD8B             			PRI_($60)				;Priority=#60
1059   DD8B 52 60       
1060   DD8D             lock_loop		BITINV_($2C)			;Toggle: Lamp#2C(lock)
1060   DD8D             
1060   DD8D 12 2C       
1061   DD8F             			SLEEP_(3)
1061   DD8F             
1061   DD8F 73          
1061   DD90~            			SLEEP_(3)
1061   DD90~            			SLEEP_(3)
1061   DD90             
1062   DD90             			JMPR_(lock_loop)
1062   DD90~            			JMPR_(lock_loop)
1062   DD90~            			JMPR_(lock_loop)
1062   DD90             
1062   DD90~            			JMPR_(lock_loop)
1062   DD90~            			JMPR_(lock_loop)
1062   DD90             
1062   DD90             
1062   DD90 8F          
1062   DD91 FB          
1063   DD92             
1064   DD92             ;**********************************************************
1065   DD92             ;* Upper drop target init thread
1066   DD92             ;**********************************************************						
1067   DD92 BD F3 AB    udt_init		jsr	macro_start
1068   DD95             			PRI_($30)				;Priority=#30
1068   DD95 52 30       
1069   DD97             			BITON_($42)				;Turn ON: Bit#02
1069   DD97             
1069   DD97 10 42       
1070   DD99             			SOL_(dtrelease_on)		;Turn ON Sol#14:dt_release
1070   DD99 31 6D       
1071   DD9B             			BEGIN_
1071   DD9B             
1072   DD9B             				SLEEP_(32)
1072   DD9B~            				SLEEP_(32)
1072   DD9B~            				SLEEP_(32)
1072   DD9B             
1072   DD9B 53 20       
1072   DD9D             
1073   DD9D             				EXE_
1073   DD9D             
1073   DD9D 44          
1074   DD9E 96 D6       				      ldaa	flag_timer_bip
1075   DDA0             				EXEEND_
1075   DDA0             
1075   DDA0             
1075   DDA0             
1075   DDA0             
1075   DDA0~            				EXEEND_
1075   DDA0~            				EXEEND_
1075   DDA0             
1075   DD9D             
1075   DD9D 44          
1075   DD9E             
1075   DDA0             
1075   DDA0~            				EXEEND_
1075   DDA0~            				EXEEND_
1075   DDA0             
1076   DDA0             			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA0             
1076   DDA0 5AFCE000FE  
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5             
1076   DDA5             
1076   DDA5             
1076   DDA5             
1076   DDA5             
1076   DDA5             
1076   DDA5             
1076   DDA4             
1076   DDA4 F6          
1076   DDA5             
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5             
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1076   DDA5             
1077   DDA5 5F          			JMP_(udt_reset)				
1077   DDA6 E6 A2       
1078   DDA8             
1079   DDA8             ;**********************************************************
1080   DDA8             ;* Main Reset Hook
1081   DDA8             ;**********************************************************
1082   DDA8 86 1C       hook_reset		ldaa	#$1C
1083   DDAA 7E EC FC    			jmp	isnd_once			;Kill Background Sounds
1084   DDAD             			begin
1084   DDAD             
1085   DDAD 7E EA 67    				jmp	killthread
1086   DDB0 96 18       disp_animation		ldaa	bitflags			;See if bit#01 is set
1087   DDB2 46          				rora					;If so, we had score, stop the flashing
1088   DDB3             			ccend
1088   DDB3             
1088   DDB3             
1088   DDB3~            			ccend
1088   DDB3~            			ccend
1088   DDB3~            			ccend
1088   DDB3             
1088   DDB3 25 F8       
1088   DDB5             
1088   DDB5~            			ccend
1088   DDB5~            			ccend
1088   DDB5             
1089   DDB5 86 D0       			ldaa	#$D0
1090   DDB7 C6 F8       			ldab	#$F8
1091   DDB9 BD EA FB    			jsr	kill_threads
1092   DDBC CE 00 48    			ldx	#score_p1_b1
1093   DDBF 96 CD       			ldaa	player_up
1094   DDC1 48          			asla	
1095   DDC2 48          			asla	
1096   DDC3 BD EE FF    			jsr	xplusa
1097   DDC6 86 FF       			ldaa	#$FF
1098   DDC8 A7 00       			staa	$00,X
1099   DDCA A7 01       			staa	$01,X
1100   DDCC A7 02       			staa	$02,X
1101   DDCE A7 03       			staa	$03,X
1102   DDD0 BD DE 0B    			jsr	cpdisp_show
1103   DDD3 5F          			clrb	
1104   DDD4 4F          			clra	
1105   DDD5 BD EA 2F    			jsr	addthread
1106   DDD8 58          			.db $58
1107   DDD9             			begin
1107   DDD9             
1108   DDD9             				begin
1108   DDD9             
1109   DDD9 88 80       					eora	#$80
1110   DDDB C8 01       					eorb	#$01
1111   DDDD             					begin
1111   DDDD             
1112   DDDD 47          						asra	
1113   DDDE 36          						psha	
1114   DDDF 84 7F       						anda	#$7F
1115   DDE1 8D 33       						bsr	plyrmask_x
1116   DDE3 37          						pshb	
1117   DDE4 E6 00       						ldab	$00,X
1118   DDE6 C4 80       						andb	#$80
1119   DDE8 1B          						aba	
1120   DDE9 A7 00       						staa	$00,X
1121   DDEB BD F9 19    						jsr	disp_mask
1122   DDEE 43          						coma	
1123   DDEF 94 60       						anda	comma_flags
1124   DDF1 97 60       						staa	comma_flags
1125   DDF3 8D 1E       						bsr	to_update_commas
1126   DDF5 33          						pulb	
1127   DDF6 BD EA 2F    						jsr	addthread
1128   DDF9 03          						.db $03
1129   DDFA 32          						pula	
1130   DDFB 36          						psha	
1131   DDFC 84 01       						anda	#$01
1132   DDFE 11          						cba	
1133   DDFF 32          						pula	
1134   DE00             					eqend
1134   DE00             
1134   DE00             
1134   DE00~            					eqend
1134   DE00~            					eqend
1134   DE00~            					eqend
1134   DE00             
1134   DE00 26 DB       
1134   DE02             
1134   DE02~            					eqend
1134   DE02~            					eqend
1134   DE02             
1135   DE02 5D          					tstb	
1136   DE03             				eqend
1136   DE03             
1136   DE03             
1136   DE03~            				eqend
1136   DE03~            				eqend
1136   DE03~            				eqend
1136   DE03             
1136   DE03 26 D4       
1136   DE05             
1136   DE05~            				eqend
1136   DE05~            				eqend
1136   DE05             
1137   DE05 BD EA 2F    				jsr	addthread
1138   DE08 20          				.db $20
1139   DE09             			loopend
1139   DE09             
1139   DE09             
1139   DE09~            			loopend
1139   DE09~            			loopend
1139   DE09~            			loopend
1139   DE09             
1139   DE09 20 CE       
1139   DE0B             
1139   DE0B~            			loopend
1139   DE0B~            			loopend
1139   DE0B             
1140   DE0B             
1141   DE0B             ;***********************************************************
1142   DE0B             ;* Will show buffer 0 of current player
1143   DE0B             ;***********************************************************			
1144   DE0B 8D 09       cpdisp_show		bsr	plyrmask_x
1145   DE0D A6 00       			ldaa	$00,X
1146   DE0F 84 80       			anda	#$80
1147   DE11 A7 00       			staa	$00,X
1148   DE13 7E EB A1    to_update_commas	jmp	update_commas
1149   DE16             
1150   DE16             ;***********************************************************
1151   DE16             ;* Loads X with pointer to current players display mask
1152   DE16             ;***********************************************************
1153   DE16 36          plyrmask_x		psha	
1154   DE17 96 CD       			ldaa	player_up
1155   DE19 CE 00 5C    			ldx	#dmask_p1
1156   DE1C BD EE FF    			jsr	xplusa
1157   DE1F 32          			pula	
1158   DE20 39          			rts
1159   DE21             			
1160   DE21             ;*********************************************************
1161   DE21             ; Main System Game Over Entry:
1162   DE21             ;*********************************************************	
1163   DE21 BD F3 AB    gameover_entry	jsr	macro_start
1164   DE24             			IFEQR_($69)			      ;BNER_BIT#29
1164   DE24             
1164   DE24             
1164   DE24             
1164   DE24 5B 69 00    
1164   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1164   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1164   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1164   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1164   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1164   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1164   DE27             
1165   DE27                   			SOL_(gi_off)  		      ;Turn OFF Sol#3:gi
1165   DE27 31 02       
1166   DE29                   			SETRAM_($0C,$00)			;RAM$0C=$00
1166   DE29~                  			SETRAM_($0C,$00)			;RAM$0C=$00
1166   DE29~                  			SETRAM_($0C,$00)			;RAM$0C=$00
1166   DE29             
1166   DE29 CC 00       
1167   DE2B                   			JSRD_(send_sound)			
1167   DE2B 57          
1167   DE2C FB 30       
1168   DE2E                   			SSND_($1C)				;Stop Background Sound
1168   DE2E             
1168   DE2E FC          
1168   DE2F~                  			SSND_($1C)				;Stop Background Sound
1168   DE2F~                  			SSND_($1C)				;Stop Background Sound
1168   DE2F~                  			SSND_($1C)				;Stop Background Sound
1168   DE2F             
1169   DE2F                   			IFNER_($60)			      ;BEQR_BIT#20
1169   DE2F             
1169   DE2F             
1169   DE2F             
1169   DE2F 5A 60 00    
1169   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1169   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1169   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1169   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1169   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1169   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1169   DE32             
1170   DE32                   			      SSND_($0F)				;Sound #0F
1170   DE32             
1170   DE32 EF          
1170   DE33~                  			      SSND_($0F)				;Sound #0F
1170   DE33~                  			      SSND_($0F)				;Sound #0F
1170   DE33~                  			      SSND_($0F)				;Sound #0F
1170   DE33             
1171   DE33                   			ELSE_			
1171   DE33             
1171   DE33             
1171   DE33             
1171   DE33             
1171   DE31             
1171   DE31             
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31             
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31~                  			ELSE_			
1171   DE31             
1171   DE31             
1171   DE31 03          
1171   DE33             
1171   DE33             
1171   DE33~                  			ELSE_			
1171   DE33~                  			ELSE_			
1171   DE33             
1171   DE33~                  			ELSE_			
1171   DE33~                  			ELSE_			
1171   DE33             
1171   DE33             
1171   DE33 80          
1171   DE34 00          
1171   DE35             
1171   DE35             
1171   DE35             
1171   DE35~                  			ELSE_			
1171   DE35~                  			ELSE_			
1171   DE35             
1171   DE35~                  			ELSE_			
1171   DE35~                  			ELSE_			
1171   DE35             
1172   DE35             			            SSND_($10)				;Sound #10
1172   DE35             
1172   DE35 F0          
1172   DE36~            			            SSND_($10)				;Sound #10
1172   DE36~            			            SSND_($10)				;Sound #10
1172   DE36~            			            SSND_($10)				;Sound #10
1172   DE36             
1173   DE36                   			      BITOFF_($60)			;Turn OFF: Bit#20
1173   DE36             
1173   DE36 11 60       
1174   DE38                   			ENDIF_
1174   DE38             
1174   DE38             
1174   DE38             
1174   DE38             
1174   DE38             
1174   DE38~                  			ENDIF_
1174   DE38~                  			ENDIF_
1174   DE38             
1174   DE38~                  			ENDIF_
1174   DE38~                  			ENDIF_
1174   DE38             
1174   DE34             
1174   DE34 03          
1174   DE35             
1174   DE35             
1174   DE35~                  			ENDIF_
1174   DE35~                  			ENDIF_
1174   DE35~                  			ENDIF_
1174   DE35~                  			ENDIF_
1174   DE35~                  			ENDIF_
1174   DE35             
1174   DE38             
1174   DE38~                  			ENDIF_
1174   DE38~                  			ENDIF_
1174   DE38             
1175   DE38             			      SLEEP_(192)
1175   DE38~            			      SLEEP_(192)
1175   DE38~            			      SLEEP_(192)
1175   DE38             
1175   DE38 53 C0       
1175   DE3A             
1176   DE3A                   			BITOFF_($69)			;Turn OFF: Bit#29
1176   DE3A             
1176   DE3A 11 69       
1177   DE3C                               ENDIF_
1177   DE3C             
1177   DE3C             
1177   DE3C             
1177   DE3C             
1177   DE3C             
1177   DE3C~                              ENDIF_
1177   DE3C~                              ENDIF_
1177   DE3C             
1177   DE3C~                              ENDIF_
1177   DE3C~                              ENDIF_
1177   DE3C             
1177   DE26             
1177   DE26 15          
1177   DE27             
1177   DE27             
1177   DE27~                              ENDIF_
1177   DE27~                              ENDIF_
1177   DE27~                              ENDIF_
1177   DE27~                              ENDIF_
1177   DE27~                              ENDIF_
1177   DE27             
1177   DE3C             
1177   DE3C~                              ENDIF_
1177   DE3C~                              ENDIF_
1177   DE3C             
1178   DE3C             			;Here are the attract mode threads
1179   DE3C             			BE29_($08)				;Effect: Range #08
1179   DE3C             
1179   DE3C 29 08       
1180   DE3E             			BE28_($48)				;Effect: Range #08
1180   DE3E             
1180   DE3E 28 48       
1181   DE40             			CPUX_					;Resume CPU Execution
1181   DE40 04          
1182   DE41             			NEWTHREAD(attract_1)
1182   DE41 CE D8 79    
1182   DE44 BD EA C4    
1183   DE47             			NEWTHREAD(attract_2)
1183   DE47 CE DA A2    
1183   DE4A BD EA C4    
1184   DE4D             			NEWTHREAD(attract_3)
1184   DE4D CE DE 71    
1184   DE50 BD EA C4    
1185   DE53             			NEWTHREAD(attract_4)
1185   DE53 CE DE 99    
1185   DE56 BD EA C4    
1186   DE59             			;fall through to start attract_5
1187   DE59             			
1188   DE59 BD F3 AB    			jsr	macro_start
1189   DE5C             attract_5	      BEGIN_
1189   DE5C             
1190   DE5C             				BITINV2_($57)			;Toggle: Lamp#17(mini_pf)
1190   DE5C             
1190   DE5C 22 57       
1191   DE5E             				BITINV2_($5F)			;Toggle: Lamp#1F(mini_pf)
1191   DE5E             
1191   DE5E 22 5F       
1192   DE60             				BITINV2_($65)			;Toggle: Lamp#25(mini_pf)
1192   DE60             
1192   DE60 22 65       
1193   DE62             				BITINV2_($6E)			;Toggle: Lamp#2E(mini_pf)
1193   DE62             
1193   DE62 22 6E       
1194   DE64             				BITINV2_($6F)			;Toggle: Lamp#2F(mini_pf)
1194   DE64             
1194   DE64 22 6F       
1195   DE66             				BITINV2_($5B)			;Toggle: Lamp#1B(special)
1195   DE66             
1195   DE66 22 5B       
1196   DE68             				BITINV2_($50)			;Toggle: Lamp#10(1_target)
1196   DE68             
1196   DE68 22 50       
1197   DE6A             				BITINV2_($6D)			;Toggle: Lamp#2D(double_trouble)
1197   DE6A             
1197   DE6A 22 6D       
1198   DE6C             				BITINV2_($6C)			;Toggle: Lamp#2C(lock)
1198   DE6C             
1198   DE6C 22 6C       
1199   DE6E             				SLEEP_(3)
1199   DE6E             
1199   DE6E 73          
1199   DE6F~            				SLEEP_(3)
1199   DE6F~            				SLEEP_(3)
1199   DE6F             
1200   DE6F             			LOOP_	
1200   DE6F             
1200   DE6F             
1200   DE6F~            			LOOP_	
1200   DE6F~            			LOOP_	
1200   DE6F             
1200   DE6F~            			LOOP_	
1200   DE6F~            			LOOP_	
1200   DE6F             
1200   DE6F             
1200   DE6F 8F          
1200   DE70 EB          
1201   DE71             
1202   DE71             ;**********************************************************
1203   DE71             ;* Attract Mode Lamps 3
1204   DE71             ;*
1205   DE71             ;* This effect sets up two large groups of lamps and toggles
1206   DE71             ;* between the two groups being on with a 15 cycle pause.
1207   DE71             ;**********************************************************					
1208   DE71 BD F3 AB    attract_3		jsr	macro_start
1209   DE74             			BITON2_($54)			;Turn ON: Lamp#14(5_rollover)
1209   DE74             
1209   DE74 20 54       
1210   DE76             			BITON2_($56)			;Turn ON: Lamp#16(drainshield_r)
1210   DE76             
1210   DE76 20 56       
1211   DE78             			BITON2_($6B)			;Turn ON: Lamp#2B(extra_kick)
1211   DE78             
1211   DE78 20 6B       
1212   DE7A             			BITON2_($52)			;Turn ON: Lamp#12(3_target)
1212   DE7A             
1212   DE7A 20 52       
1213   DE7C             			BITON2_($58)			;Turn ON: Lamp#18(dt_right)
1213   DE7C             
1213   DE7C 20 58       
1214   DE7E             			BEGIN_
1214   DE7E             
1215   DE7E             				BITINV2_($54)			;Toggle: Lamp#14(5_rollover)
1215   DE7E             
1215   DE7E 22 54       
1216   DE80             				BITINV2_($56)			;Toggle: Lamp#16(drainshield_r)
1216   DE80             
1216   DE80 22 56       
1217   DE82             				BITINV2_($6B)			;Toggle: Lamp#2B(extra_kick)
1217   DE82             
1217   DE82 22 6B       
1218   DE84             				BITINV2_($52)			;Toggle: Lamp#12(3_target)
1218   DE84             
1218   DE84 22 52       
1219   DE86             				BITINV2_($58)			;Toggle: Lamp#18(dt_right)
1219   DE86             
1219   DE86 22 58       
1220   DE88             				BITINV2_($55)			;Toggle: Lamp#15(drainshield_l)
1220   DE88             
1220   DE88 22 55       
1221   DE8A             				BITINV2_($53)			;Toggle: Lamp#13(4_rollover)
1221   DE8A             
1221   DE8A 22 53       
1222   DE8C             				BITINV2_($5C)			;Toggle: Lamp#1C(dt_left)
1222   DE8C             
1222   DE8C 22 5C       
1223   DE8E             				BITINV2_($51)			;Toggle: Lamp#11(2_target)
1223   DE8E             
1223   DE8E 22 51       
1224   DE90             				BITINV2_($5E)			;Toggle: Lamp#1E(loop_x)
1224   DE90             
1224   DE90 22 5E       
1225   DE92             				BITINV2_($5D)			;Toggle: Lamp#1D(loop_dshield)
1225   DE92             
1225   DE92 22 5D       
1226   DE94             				BITINV2_($5A)			;Toggle: Lamp#1A(keepshooting)
1226   DE94             
1226   DE94 22 5A       
1227   DE96             				SLEEP_(15)
1227   DE96             
1227   DE96 7F          
1227   DE97~            				SLEEP_(15)
1227   DE97~            				SLEEP_(15)
1227   DE97             
1228   DE97             			LOOP_	
1228   DE97             
1228   DE97             
1228   DE97~            			LOOP_	
1228   DE97~            			LOOP_	
1228   DE97             
1228   DE97~            			LOOP_	
1228   DE97~            			LOOP_	
1228   DE97             
1228   DE97             
1228   DE97 8F          
1228   DE98 E5          
1229   DE99             
1230   DE99             ;***************************************************************
1231   DE99             ;* Attract Mode Speech/GI Timer
1232   DE99             ;***************************************************************					
1233   DE99 BD F3 AB    attract_4		jsr	macro_start
1234   DE9C             			BEGIN_
1234   DE9C             
1235   DE9C             				SETRAM_(rega,$3C)			;RAM$00=$3C: 60 times
1235   DE9C~            				SETRAM_(rega,$3C)			;RAM$00=$3C: 60 times
1235   DE9C~            				SETRAM_(rega,$3C)			;RAM$00=$3C: 60 times
1235   DE9C             
1235   DE9C C0 3C       
1236   DE9E             				BEGIN_
1236   DE9E             
1237   DE9E             					SLEEP_(255)				;255 is about 4 seconds
1237   DE9E~            					SLEEP_(255)				;255 is about 4 seconds
1237   DE9E~            					SLEEP_(255)				;255 is about 4 seconds
1237   DE9E             
1237   DE9E 53 FF       
1237   DEA0             
1238   DEA0             					ADDRAM_(rega,-1)			;RAM$00-=1
1238   DEA0~            					ADDRAM_(rega,-1)			;RAM$00-=1
1238   DEA0~            					ADDRAM_(rega,-1)			;RAM$00-=1
1238   DEA0             
1238   DEA0 B0 FF       
1239   DEA2             				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA2             
1239   DEA2 5BFCE000FE  
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7             
1239   DEA7             
1239   DEA7             
1239   DEA7             
1239   DEA7             
1239   DEA7             
1239   DEA7             
1239   DEA6             
1239   DEA6 F7          
1239   DEA7             
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7             
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1239   DEA7             
1240   DEA7             				SETRAM_(rega,$10)			;RAM$00=$10
1240   DEA7~            				SETRAM_(rega,$10)			;RAM$00=$10
1240   DEA7~            				SETRAM_(rega,$10)			;RAM$00=$10
1240   DEA7             
1240   DEA7 C0 10       
1241   DEA9             				;Here when timer runs out, flash our GI
1242   DEA9             				BEGIN_
1242   DEA9             
1243   DEA9             					JSRR_(gi_off_inc)			
1243   DEA9~            					JSRR_(gi_off_inc)			
1243   DEA9~            					JSRR_(gi_off_inc)			
1243   DEA9             
1243   DEA9~            					JSRR_(gi_off_inc)			
1243   DEA9~            					JSRR_(gi_off_inc)			
1243   DEA9             
1243   DEA9             
1243   DEA9 9B          
1243   DEAA F2          
1244   DEAB             					SLEEP_(4)
1244   DEAB             
1244   DEAB 74          
1244   DEAC~            					SLEEP_(4)
1244   DEAC~            					SLEEP_(4)
1244   DEAC             
1245   DEAC             					JSRR_(gi_on_dec)			
1245   DEAC~            					JSRR_(gi_on_dec)			
1245   DEAC~            					JSRR_(gi_on_dec)			
1245   DEAC             
1245   DEAC~            					JSRR_(gi_on_dec)			
1245   DEAC~            					JSRR_(gi_on_dec)			
1245   DEAC             
1245   DEAC             
1245   DEAC 9B          
1245   DEAD E0          
1246   DEAE             					SLEEP_(4)
1246   DEAE             
1246   DEAE 74          
1246   DEAF~            					SLEEP_(4)
1246   DEAF~            					SLEEP_(4)
1246   DEAF             
1247   DEAF             					ADDRAM_(rega,-1)			;RAM$00-=1
1247   DEAF~            					ADDRAM_(rega,-1)			;RAM$00-=1
1247   DEAF~            					ADDRAM_(rega,-1)			;RAM$00-=1
1247   DEAF             
1247   DEAF B0 FF       
1248   DEB1             				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB1             
1248   DEB1 5BFCE000FE  
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6             
1248   DEB6             
1248   DEB6             
1248   DEB6             
1248   DEB6             
1248   DEB6             
1248   DEB6             
1248   DEB5             
1248   DEB5 F3          
1248   DEB6             
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6             
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1248   DEB6             
1249   DEB6             				JSRR_(gi_off_inc)			
1249   DEB6~            				JSRR_(gi_off_inc)			
1249   DEB6~            				JSRR_(gi_off_inc)			
1249   DEB6             
1249   DEB6~            				JSRR_(gi_off_inc)			
1249   DEB6~            				JSRR_(gi_off_inc)			
1249   DEB6             
1249   DEB6             
1249   DEB6 9B          
1249   DEB7 E5          
1250   DEB8             				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1250   DEB8             
1250   DEB8             
1250   DEB8             
1250   DEB8 5AFCFFD7F2F0
1250   DEBE 10FB
1250   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1250   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1250   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1250   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1250   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1250   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1250   DEC0             
1251   DEC0             					SSND_($0E)				;Sound #0E
1251   DEC0             
1251   DEC0 EE          
1251   DEC1~            					SSND_($0E)				;Sound #0E
1251   DEC1~            					SSND_($0E)				;Sound #0E
1251   DEC1~            					SSND_($0E)				;Sound #0E
1251   DEC1             
1252   DEC1             					JSRD_(send_sound)	
1252   DEC1 57          
1252   DEC2 FB 30       
1253   DEC4             				ENDIF_		
1253   DEC4             
1253   DEC4             
1253   DEC4             
1253   DEC4             
1253   DEC4             
1253   DEC4~            				ENDIF_		
1253   DEC4~            				ENDIF_		
1253   DEC4             
1253   DEC4~            				ENDIF_		
1253   DEC4~            				ENDIF_		
1253   DEC4             
1253   DEBF             
1253   DEBF 04          
1253   DEC0             
1253   DEC0             
1253   DEC0~            				ENDIF_		
1253   DEC0~            				ENDIF_		
1253   DEC0~            				ENDIF_		
1253   DEC0~            				ENDIF_		
1253   DEC0~            				ENDIF_		
1253   DEC0             
1253   DEC4             
1253   DEC4~            				ENDIF_		
1253   DEC4~            				ENDIF_		
1253   DEC4             
1254   DEC4             				JSRR_(gi_on_dec)			
1254   DEC4~            				JSRR_(gi_on_dec)			
1254   DEC4~            				JSRR_(gi_on_dec)			
1254   DEC4             
1254   DEC4~            				JSRR_(gi_on_dec)			
1254   DEC4~            				JSRR_(gi_on_dec)			
1254   DEC4             
1254   DEC4             
1254   DEC4 9B          
1254   DEC5 C8          
1255   DEC6             				SSND_($1C)				;Sound #1C
1255   DEC6             
1255   DEC6 FC          
1255   DEC7~            				SSND_($1C)				;Sound #1C
1255   DEC7~            				SSND_($1C)				;Sound #1C
1255   DEC7~            				SSND_($1C)				;Sound #1C
1255   DEC7             
1256   DEC7             			LOOP_
1256   DEC7             
1256   DEC7             
1256   DEC7~            			LOOP_
1256   DEC7~            			LOOP_
1256   DEC7             
1256   DEC7~            			LOOP_
1256   DEC7~            			LOOP_
1256   DEC7             
1256   DEC7             
1256   DEC7 8F          
1256   DEC8 D3          
1257   DEC9             					
1258   DEC9 DF A2       add_dt_audit	stx	sys_temp3
1259   DECB CE 01 3A    			ldx	#aud_game4			;Total 20,000 Double Trouble Scores
1260   DECE 81 02       			cmpa	#$02
1261   DED0             			ifne
1261   DED0             
1261   DED0 27 FE       
1262   DED2 CE 01 3E          			ldx	#aud_game5			;Total 40,000 Double Trouble Scores
1263   DED5 81 04             			cmpa	#$04
1264   DED7                   			ifne
1264   DED7             
1264   DED7 27 FE       
1265   DED9 CE 01 42                			ldx	#aud_game6			;Total 80,000 Double Trouble Scores
1266   DEDC 81 08                   			cmpa	#$08
1267   DEDE                         			ifne
1267   DEDE             
1267   DEDE 27 FE       
1268   DEE0 CE 01 46                			      ldx	#aud_game7			;Total 160,000 Double Trouble Scores
1269   DEE3 81 16                   			      cmpa	#$16
1270   DEE5 26 03                   			bne	aud_noadd               ;didn't find an audit for this, bad, exit
1271   DEE7                         			endif
1271   DEE7             
1271   DEE7             
1271   DEE7             
1271   DEE7             
1271   DEE7             
1271   DEE7~                        			endif
1271   DEE7~                        			endif
1271   DEE7             
1271   DEE7~                        			endif
1271   DEE7~                        			endif
1271   DEE7             
1271   DEDF             
1271   DEDF 07          
1271   DEE0             
1271   DEE0             
1271   DEE0~                        			endif
1271   DEE0~                        			endif
1271   DEE0~                        			endif
1271   DEE0             
1271   DEE7             
1271   DEE7~                        			endif
1271   DEE7~                        			endif
1271   DEE7             
1272   DEE7                         		endif
1272   DEE7             
1272   DEE7             
1272   DEE7             
1272   DEE7             
1272   DEE7             
1272   DEE7~                        		endif
1272   DEE7~                        		endif
1272   DEE7             
1272   DEE7~                        		endif
1272   DEE7~                        		endif
1272   DEE7             
1272   DED8             
1272   DED8 0E          
1272   DED9             
1272   DED9             
1272   DED9~                        		endif
1272   DED9~                        		endif
1272   DED9~                        		endif
1272   DED9             
1272   DEE7             
1272   DEE7~                        		endif
1272   DEE7~                        		endif
1272   DEE7             
1273   DEE7                         	endif
1273   DEE7             
1273   DEE7             
1273   DEE7             
1273   DEE7             
1273   DEE7             
1273   DEE7~                        	endif
1273   DEE7~                        	endif
1273   DEE7             
1273   DEE7~                        	endif
1273   DEE7~                        	endif
1273   DEE7             
1273   DED1             
1273   DED1 15          
1273   DED2             
1273   DED2             
1273   DED2~                        	endif
1273   DED2~                        	endif
1273   DED2~                        	endif
1273   DED2             
1273   DEE7             
1273   DEE7~                        	endif
1273   DEE7~                        	endif
1273   DEE7             
1274   DEE7 BD F7 7F    			jsr	ptrx_plus_1
1275   DEEA DE A2       aud_noadd		ldx	sys_temp3
1276   DEEC 39          			rts	
1277   DEED             
1278   DEED             ;****************************************************
1279   DEED             ; Check status of ball trough switches, if they are
1280   DEED             ; both down, then eject a ball.
1281   DEED             ;****************************************************			
1282   DEED             do_trough		EXE_
1282   DEED             
1282   DEED 44          
1283   DEEE 7F 00 D6    			      clr	flag_timer_bip
1284   DEF1 96 62       			      ldaa	$62
1285   DEF3 84 03       			      anda	#$03
1286   DEF5             			EXEEND_
1286   DEF5             
1286   DEF5             
1286   DEF5             
1286   DEF5             
1286   DEF5~            			EXEEND_
1286   DEF5~            			EXEEND_
1286   DEF5             
1286   DEED             
1286   DEED 49          
1286   DEEE             
1286   DEF5             
1286   DEF5~            			EXEEND_
1286   DEF5~            			EXEEND_
1286   DEF5             
1287   DEF5             			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1287   DEF5             
1287   DEF5             
1287   DEF5             
1287   DEF5 5BFCE003FE  
1287   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1287   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1287   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1287   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1287   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1287   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1287   DEFA             
1288   DEFA             			      SOL_(trough_on)   		;Turn ON Sol#2:trough
1288   DEFA 31 41       
1289   DEFC             			      BITOFF_($55)			;Turn OFF: Bit#15
1289   DEFC             
1289   DEFC 11 55       
1290   DEFE             			ENDIF_
1290   DEFE             
1290   DEFE             
1290   DEFE             
1290   DEFE             
1290   DEFE             
1290   DEFE~            			ENDIF_
1290   DEFE~            			ENDIF_
1290   DEFE             
1290   DEFE~            			ENDIF_
1290   DEFE~            			ENDIF_
1290   DEFE             
1290   DEF9             
1290   DEF9 04          
1290   DEFA             
1290   DEFA             
1290   DEFA~            			ENDIF_
1290   DEFA~            			ENDIF_
1290   DEFA~            			ENDIF_
1290   DEFA~            			ENDIF_
1290   DEFA~            			ENDIF_
1290   DEFA             
1290   DEFE             
1290   DEFE~            			ENDIF_
1290   DEFE~            			ENDIF_
1290   DEFE             
1291   DEFE                   		SLEEP_(96)
1291   DEFE~                  		SLEEP_(96)
1291   DEFE~                  		SLEEP_(96)
1291   DEFE             
1291   DEFE 53 60       
1291   DF00             
1292   DF00 5E 09       			SWCLR_($09)				;Clear Sw#: $09(left_trough)
1293   DF02             			MRTS_					;Macro RTS, Save MRA,MRB
1293   DF02 02          
1294   DF03             
1295   DF03             ;*****************************************************
1296   DF03             ;* Sound Lookup Table:
1297   DF03             ;*****************************************************
1298   DF03 23 06 3A    soundtable		.db $23, $06,	$3A;(05)	;(00) Credit Sound
1299   DF06 A0 04 2F    			.db $A0, $04,	$2F;(10)	;(01) Pop Bumper Thud
1300   DF09 28 06 3A    			.db $28, $06,	$3A;(05)	;(02) Credit Sound
1301   DF0C A0 04 38    			.db $A0, $04,	$38;(07)	;(03) Thud
1302   DF0F 22 40 32    			.db $22, $40,	$32;(0D)	;(04) UDT Bank Down
1303   DF12 28 02 2D    			.db $28, $02,	$2D;(12)	;(05) Mini-PF
1304   DF15 24 22 3D    			.db $24, $22,	$3D;(02)	;(06) 
1305   DF18 24 50 39    			.db $24, $50,	$39;(06)	;(07) Double Trouble Target Timeout
1306   DF1B C9 10 3E    			.db $C9, $10,	$3E;(01)	;(08) Tilt
1307   DF1E 23 20 34    			.db $23, $20,	$34;(0D)	;(09) 
1308   DF21 DF 63       			.dw c_sound1\	.db $FF	;(0A) 
1308   DF23 FF          
1309   DF24 27 20 33    			.db $27, $20,	$33;(0C)	;(0B) Gatlin Sound
1310   DF27 28 2C 23    			.db $28, $2C,	$23;(1C)	;(0C) 
1311   DF2A 27 40 2B    			.db $27, $40,	$2B;(14)	;(0D) Special
1312   DF2D CC F0 26    			.db $CC, $F0,	$26;(19)	;(0E) Add Player - Random Speech
1313   DF30 CE D0 29    			.db $CE, $D0,	$29;(16)	;(0F) "Me Jungle Lord"
1314   DF33 CE FF 27    			.db $CE, $FF,	$27;(18)	;(10) "You Win! Fight in Jungle Again"
1315   DF36 CE 88 2E    			.db $CE, $88,	$2E;(11)	;(11) "You Jungle Lord"
1316   DF39 4E FF 30    			.db $4E, $FF,	$30;(0F)	;(12) "Stampede, (trumpet)"
1317   DF3C CE FF 31    			.db $CE, $FF,	$31;(0E)	;(13) "Fight Tiger Again"
1318   DF3F CE D8 35    			.db $CE, $D8,	$35;(0A)	;(14) "Jungle Lord in Double Trouble" OR "You in Double Trouble"
1319   DF42 CE C8 3C    			.db $CE, $C8,	$3C;(03)	;(15) High Score - "You  Win! You Jungle Lord"
1320   DF45 8C 80 24    			.db $8C, $80,	$24;(1D)	;(16) Match - "Me Jungle Lord"
1321   DF48 CE A8 3B    			.db $CE, $A8,	$3B;(02)	;(17) Drop Target Timer
1322   DF4B 05 50 21    			.db $05, $50,	$21;(1E)	;(18) Trumpet
1323   DF4E 05 60 20    			.db $05, $60,	$20;(1F)	;(19) Trumpet
1324   DF51 24 02 36    			.db $24, $02,	$36;(09)	;(1A) 
1325   DF54 BE 40 2A    			.db $BE, $40,	$2A;(15)	;(1B) 
1326   DF57 9F 40 2C    			.db $9F, $40,	$2C;(13)	;(1C) Game Over
1327   DF5A A9 60 22    			.db $A9, $60,	$22;(1D)	;(1D) 
1328   DF5D 04 04 36    			.db $04, $04,	$36;(09)	;(1E) 
1329   DF60 28 40 28    			.db $28, $40,	$28;(17)	;(1F) 
1330   DF63             
1331   DF63 26822D803A3Fc_sound1		.db $26,$82,$2D,$80,$3A,$3F	;(19)(12)(02)
1332   DF69             
1333   DF69             
1334   DF69 D3          switchtable		.db %11010011	\.dw sw_plumbtilt		;(1) plumbtilt
1334   DF6A E1 51       
1335   DF6C 91          			.db %10010001	\.dw sw_balltilt		;(2) balltilt
1335   DF6D E1 6A       
1336   DF6F 71          			.db %01110001	\.dw credit_button	;(3) credit_button
1336   DF70 FB 92       
1337   DF72 F2          			.db %11110010	\.dw sw_coin_r		;(4) coin_r
1337   DF73 E1 4D       
1338   DF75 F2          			.db %11110010	\.dw sw_coin_c		;(5) coin_c
1338   DF76 E1 4D       
1339   DF78 F2          			.db %11110010	\.dw sw_coin_l		;(6) coin_l
1339   DF79 E1 4D       
1340   DF7B 71          			.db %01110001	\.dw reset			;(7) slam
1340   DF7C E8 00       
1341   DF7E F1          			.db %11110001	\.dw sw_hstd_res		;(8) hstd_res
1341   DF7F E1 92       
1342   DF81 D4          			.db %11010100	\.dw sw_right_trough	;(9) right_trough
1342   DF82 E5 1E       
1343   DF84 D4          			.db %11010100	\.dw sw_left_trough	;(10) left_trough
1343   DF85 E5 37       
1344   DF87 D4          			.db %11010100	\.dw sw_notused		;(11) notused
1344   DF88 E1 CF       
1345   DF8A 91          			.db %10010001	\.dw sw_leftsling		;(12) leftsling
1345   DF8B E1 C2       
1346   DF8D 93          			.db %10010011	\.dw sw_L_rollover	;(13) L_rollover
1346   DF8E E3 AC       
1347   DF90 93          			.db %10010011	\.dw sw_O_rollover	;(14) O_rollover
1347   DF91 E3 AC       
1348   DF93 93          			.db %10010011	\.dw sw_R_rollover	;(15) R_rollover
1348   DF94 E3 AC       
1349   DF96 93          			.db %10010011	\.dw sw_D_rollover	;(16) D_rollover
1349   DF97 E3 AC       
1350   DF99 92          			.db %10010010	\.dw sw_1_target		;(17) 1_target
1350   DF9A E1 99       
1351   DF9C 92          			.db %10010010	\.dw sw_2_target		;(18) 2_target
1351   DF9D E1 99       
1352   DF9F 92          			.db %10010010	\.dw sw_3_target		;(19) 3_target
1352   DFA0 E1 99       
1353   DFA2 93          			.db %10010011	\.dw sw_4_rollover	;(20) 4_rollover
1353   DFA3 DA F7       
1354   DFA5 93          			.db %10010011	\.dw sw_5_rollover	;(21) 5_rollover
1354   DFA6 E2 EA       
1355   DFA8 93          			.db %10010011	\.dw sw_leftdrain		;(22) leftdrain
1355   DFA9 D8 4B       
1356   DFAB 93          			.db %10010011	\.dw sw_rightdrain	;(23) rightdrain
1356   DFAC D8 4B       
1357   DFAE 93          			.db %10010011	\.dw sw_looplow		;(24) looplow
1357   DFAF E1 D0       
1358   DFB1 95          			.db %10010101	\.dw sw_dt_rb		;(25) dt_rb
1358   DFB2 E2 4E       
1359   DFB4 95          			.db %10010101	\.dw sw_dt_rc		;(26) dt_rc
1359   DFB5 E2 4E       
1360   DFB7 95          			.db %10010101	\.dw sw_dt_rt		;(27) dt_rt
1360   DFB8 E2 4E       
1361   DFBA 91          			.db %10010001	\.dw sw_rightsling	;(28) rightsling
1361   DFBB E1 C2       
1362   DFBD 95          			.db %10010101	\.dw sw_dt_ll		;(29) dt_ll
1362   DFBE E2 34       
1363   DFC0 95          			.db %10010101	\.dw sw_dt_lc		;(30) dt_lc
1363   DFC1 E2 34       
1364   DFC3 95          			.db %10010101	\.dw sw_dt_lu		;(31) dt_lu
1364   DFC4 E2 34       
1365   DFC6 93          			.db %10010011	\.dw sw_loophigh		;(32) loophigh
1365   DFC7 E2 09       
1366   DFC9 95          			.db %10010101	\.dw sw_dt_u1		;(33) dt_u1
1366   DFCA E7 AD       
1367   DFCC 95          			.db %10010101	\.dw sw_dt_u2		;(34) dt_u2
1367   DFCD E7 AD       
1368   DFCF 95          			.db %10010101	\.dw sw_dt_u3		;(35) dt_u3
1368   DFD0 E7 AD       
1369   DFD2 95          			.db %10010101	\.dw sw_dt_u4		;(36) dt_u4
1369   DFD3 E7 AD       
1370   DFD5 95          			.db %10010101	\.dw sw_dt_u5		;(37) dt_u5
1370   DFD6 E7 AD       
1371   DFD8 F4          			.db %11110100	\.dw sw_upper_eject	;(38) upper_eject
1371   DFD9 E4 1D       
1372   DFDB F4          			.db %11110100	\.dw sw_lower_eject	;(39) lower_eject
1372   DFDC E2 F2       
1373   DFDE 91          			.db %10010001	\.dw sw_upper_sling	;(40) upper_sling
1373   DFDF E1 C2       
1374   DFE1 D3          			.db %11010011	\.dw sw_pf_tilt		;(41) pf_tilt
1374   DFE2 E1 51       
1375   DFE4 F6          			.db %11110110	\.dw sw_outhole		;(42) outhole
1375   DFE5 D9 3C       
1376   DFE7 9F          			.db %10011111	\.dw sw_ballshooter	;(43) ballshooter
1376   DFE8 D9 0C       
1377   DFEA 93          			.db %10010011	\.dw sw_pf_entry		;(44) pf_entry
1377   DFEB D9 28       
1378   DFED 91          			.db %10010001	\.dw sw_ten_1		;(45) ten_1
1378   DFEE E1 C2       
1379   DFF0 91          			.db %10010001	\.dw sw_ten_2		;(46) ten_2
1379   DFF1 E1 C2       
1380   DFF3 91          			.db %10010001	\.dw sw_ten_3		;(47) ten_3
1380   DFF4 E1 C2       
1381   DFF6 91          			.db %10010001	\.dw sw_notused		;(48) notused
1381   DFF7 E1 CF       
1382   DFF9 91          			.db %10010001	\.dw sw_right_magnet	;(49) right_magnet
1382   DFFA DB B9       
1383   DFFC 91          			.db %10010001	\.dw sw_left_magnet	;(50) left_magnet
1383   DFFD DB 58       
1384   DFFF             switchtable_end
1385   DFFF             
1386   DFFF 28          			.db $28
1387   E000             
1388   E000              	.org $e000
1389   E000             
1390   E000             ;---------------------------------------------------------------------------
1391   E000             ;  Default game data and basic system tables start at $e000, these can not  
1392   E000             ;  ever be moved
1393   E000             ;---------------------------------------------------------------------------
1394   E000             
1395   E000 25 03       gr_gamenumber		.dw $2503
1396   E002 F2          gr_romrevision		.db $F2
1397   E003 B2 A5       gr_cmoscsum			.db $B2,$A5
1398   E005 20          gr_backuphstd		.db $20
1399   E006 07          gr_replay1			.db $07
1400   E007 15          gr_replay2			.db $15
1401   E008 00          gr_replay3			.db $00
1402   E009 00          gr_replay4			.db $00
1403   E00A 00          gr_matchenable		.db $00
1404   E00B 00          gr_specialaward		.db $00
1405   E00C 00          gr_replayaward		.db $00
1406   E00D 03          gr_maxplumbbobtilts	.db $03
1407   E00E 03          gr_numberofballs		.db $03
1408   E00F 35          gr_gameadjust1		.db $35
1409   E010 01          gr_gameadjust2		.db $01
1410   E011 05          gr_gameadjust3		.db $05
1411   E012 00          gr_gameadjust4		.db $00
1412   E013 00          gr_gameadjust5		.db $00
1413   E014 00          gr_gameadjust6		.db $00
1414   E015 00          gr_gameadjust7		.db $00
1415   E016 00          gr_gameadjust8		.db $00
1416   E017 00          gr_gameadjust9		.db $00
1417   E018 03          gr_hstdcredits		.db $03
1418   E019 04          gr_max_extraballs		.db $04
1419   E01A 30          gr_max_credits		.db $30
1420   E01B             ;---------------
1421   E01B             ;Pricing Data  |
1422   E01B             ;---------------
1423   E01B             
1424   E01B 01          gr_pricingdata		.db $01	;Left Coin Mult
1425   E01C 04          				.db $04	;Center Coin Mult
1426   E01D 01          				.db $01	;Right Coin Mult
1427   E01E 01          				.db $01	;Coin Units Required
1428   E01F 00          				.db $00	;Bonus Coins
1429   E020 00          				.db $00	;Minimum Coin Units
1430   E021             
1431   E021 09          				.db $09	;Left Coin Mult
1432   E022 45          				.db $45	;Center Coin Mult
1433   E023 18          				.db $18	;Right Coin Mult
1434   E024 05          				.db $05	;Coin Units Required
1435   E025 45          				.db $45	;Bonus Coins
1436   E026 00          				.db $00	;Minimum Coin Units
1437   E027             
1438   E027 01          				.db $01	;Left Coin Mult
1439   E028 04          				.db $04	;Center Coin Mult
1440   E029 01          				.db $01	;Right Coin Mult
1441   E02A 02          				.db $02	;Coin Units Required
1442   E02B 04          				.db $04	;Bonus Coins
1443   E02C 00          				.db $00	;Minimum Coin Units
1444   E02D             
1445   E02D 01          				.db $01	;Left Coin Mult
1446   E02E 16          				.db $16	;Center Coin Mult
1447   E02F 06          				.db $06	;Right Coin Mult
1448   E030 02          				.db $02	;Coin Units Required
1449   E031 00          				.db $00	;Bonus Coins
1450   E032 00          				.db $00	;Minimum Coin Units
1451   E033             
1452   E033 03          				.db $03	;Left Coin Mult
1453   E034 15          				.db $15	;Center Coin Mult
1454   E035 03          				.db $03	;Right Coin Mult
1455   E036 04          				.db $04	;Coin Units Required
1456   E037 15          				.db $15	;Bonus Coins
1457   E038 00          				.db $00	;Minimum Coin Units
1458   E039             
1459   E039 01          				.db $01	;Left Coin Mult
1460   E03A 00          				.db $00	;Center Coin Mult
1461   E03B 04          				.db $04	;Right Coin Mult
1462   E03C 01          				.db $01	;Coin Units Required
1463   E03D 00          				.db $00	;Bonus Coins
1464   E03E 00          				.db $00	;Minimum Coin Units
1465   E03F             
1466   E03F 01          				.db $01	;Left Coin Mult
1467   E040 00          				.db $00	;Center Coin Mult
1468   E041 02          				.db $02	;Right Coin Mult
1469   E042 01          				.db $01	;Coin Units Required
1470   E043 00          				.db $00	;Bonus Coins
1471   E044 00          				.db $00	;Minimum Coin Units
1472   E045             
1473   E045 01          				.db $01	;Left Coin Mult
1474   E046 00          				.db $00	;Center Coin Mult
1475   E047 02          				.db $02	;Right Coin Mult
1476   E048 02          				.db $02	;Coin Units Required
1477   E049 00          				.db $00	;Bonus Coins
1478   E04A 00          				.db $00	;Minimum Coin Units
1479   E04B             
1480   E04B             ;--------------
1481   E04B             ;System Data  |
1482   E04B             ;--------------
1483   E04B             
1484   E04B 1D          gr_maxthreads		.db $1D
1485   E04C 7F          gr_extendedromtest	.db $7F
1486   E04D 32          gr_lastswitch		.db (switchtable_end-switchtable)/3
1487   E04E 03          gr_numplayers		.db $03
1488   E04F             
1489   E04F E0 C2       gr_lamptable_ptr		.dw lamptable
1490   E051 DF 69       gr_switchtable_ptr	.dw switchtable
1491   E053 DF 03       gr_soundtable_ptr		.dw soundtable
1492   E055             
1493   E055 05          gr_lampflashrate		.db $05
1494   E056             
1495   E056 0D          gr_specialawardsound	.db $0D	;Special Sound
1496   E057 0E          gr_p1_startsound		.db $0E
1497   E058 0E          gr_p2_startsound		.db $0E
1498   E059 0E          gr_p3_startsound		.db $0E
1499   E05A 0E          gr_p4_startsound		.db $0E
1500   E05B 16          gr_matchsound		.db $16
1501   E05C 15          gr_highscoresound		.db $15
1502   E05D 1C          gr_gameoversound		.db $1C
1503   E05E 00          gr_creditsound		.db $00
1504   E05F             
1505   E05F 7E          gr_eb_lamp_1		.db $7E
1506   E060 00          gr_eb_lamp_2		.db $00
1507   E061 7E          gr_lastlamp			.db $7E
1508   E062 05          gr_hs_lamp			.db $05
1509   E063 04          gr_match_lamp		.db $04
1510   E064 01          gr_bip_lamp			.db $01
1511   E065 03          gr_gameover_lamp		.db $03
1512   E066 02          gr_tilt_lamp		.db $02
1513   E067             
1514   E067 DE 21       gr_gameoverthread_ptr	.dw gameover_entry
1515   E069             
1516   E069             gr_switchtypetable
1517   E069 00 02       				.db $00,$02
1518   E06B 00 09       				.db $00,$09
1519   E06D 00 04       				.db $00,$04
1520   E06F 1A 14       				.db $1A,$14
1521   E071 02 05       				.db $02,$05
1522   E073 08 05       				.db $08,$05
1523   E075 00 24       				.db $00,$24
1524   E077             
1525   E077 0200000000  gr_playerstartdata	.db $02,$00,$00,$00,$00
1526   E07C 0001000880  				.db $00,$01,$00,$08,$80
1527   E081 0000000000  				.db $00,$00,$00,$00,$00
1528   E086 0000000000  				.db $00,$00,$00,$00,$00
1529   E08B             
1530   E08B 81FF0000C0  gr_playerresetdata	.db $81,$FF,$00,$00,$C0
1531   E090 070000FA7F  				.db $07,$00,$00,$FA,$7F
1532   E095 0400000000  				.db $04,$00,$00,$00,$00
1533   E09A 0000400000  				.db $00,$00,$40,$00,$00
1534   E09F             
1535   E09F 39          gr_switch_event		rts\ .db $00	;(Switch Event)
1535   E0A0 00          
1536   E0A1 39          gr_sound_event		rts\ .db $00	;(Sound Event )
1536   E0A2 00          
1537   E0A3 20 4A       gr_score_event		bra score_event	;(Score Event)
1538   E0A5 20 39       gr_eb_event			bra eb_event	;(Extra Ball Event)
1539   E0A7 20 37       gr_special_event		bra special_event	;(Special Event)
1540   E0A9 39          gr_macro_event		rts\ .db $00	;(Start Macro Event)
1540   E0AA 00          
1541   E0AB             gr_ready_event
1542   E0AB 39          gr_ballstart_event	rts\ .db $00	;(Ball Start Event)
1542   E0AC 00          
1543   E0AD 39          gr_addplayer_event	rts\ .db $00	;(Add Player Event)
1543   E0AE 00          
1544   E0AF 20 35       gr_gameover_event		bra gameover_event;(Game Over Event)
1545   E0B1 39          gr_hstdtoggle_event	rts\ .db $00	;(HSTD Toggle Event)
1545   E0B2 00          
1546   E0B3             
1547   E0B3             gr_reset_hook_ptr
1548   E0B3 DD A8       			.dw hook_reset		;(From $E89F)Reset
1549   E0B5             gr_main_hook_ptr
1550   E0B5 E1 4C       			.dw hook_mainloop		;(From $E8B7)Main Loop Begin
1551   E0B7             gr_coin_hook_ptr
1552   E0B7 D8 3F       			.dw hook_coin		;(From $F770)Coin Accepted
1553   E0B9             gr_game_hook_ptr
1554   E0B9 E1 4C       			.dw hook_gamestart	;(From $F847)New Game Start
1555   E0BB             gr_player_hook_ptr
1556   E0BB DB ED       			.dw hook_playerinit	;(From $F8D8)Init New Player
1557   E0BD             gr_outhole_hook_ptr
1558   E0BD DD 16       			.dw hook_outhole		;(From $F9BA)Outhole
1559   E0BF             
1560   E0BF             ;------------------------ end system data ---------------------------
1561   E0BF             
1562   E0BF             gr_irq_entry	
1563   E0BF 7E EF F7    gr_swi_entry	jmp	sys_irq
1564   E0C2             
1565   E0C2 30 38       lamptable         .db $30, $38      ;(00) bonus_1 -- bonus_9
1566   E0C4 3C 3F             		.db $3C ,$3F	;(01) 2x -- 10x
1567   E0C6 0C 0F       			.db $0C ,$0F	;(02) L -- D
1568   E0C8 39 3B       			.db $39 ,$3B	;(03) bonus_10 -- bonus_30
1569   E0CA 10 14       			.db $10 ,$14	;(04) 1_target -- 5_rollover
1570   E0CC 07 0B       			.db $07 ,$0B	;(05) rmag1 -- rmag5
1571   E0CE 26 2A       			.db $26 ,$2A	;(06) lmag1 -- lmag5
1572   E0D0 00 3F       			.db $00 ,$3F	;(07) all lamps
1573   E0D2 07 3F       			.db $07 ,$3F	;(08) all lamps except backbox
1574   E0D4 48 4C       			.db $48 ,$4C	;(09) bits 18 - 1c
1575   E0D6 43 47       			.db $43 ,$47	;(0A) bits 13 - 17
1576   E0D8 20 24       			.db $20 ,$24	;(0B) dt1 -- dt5
1577   E0DA 15 16       			.db $15 ,$16	;(0C) drainshield_l -- drainshield_r
1578   E0DC 30 3B       			.db $30 ,$3B	;(0D) bonus_1 -- bonus_30
1579   E0DE 4D 4E       			.db $4D ,$4E	;(0E) bits 1d -1e
1580   E0E0             
1581   E0E0             ;**************************************************************
1582   E0E0             ;* Ring the bell fancy when special or extra ball
1583   E0E0             ;**************************************************************
1584   E0E0             eb_event
1585   E0E0             special_event	NEWTHREAD_JMP(fancybell)
1585   E0E0 CE D8 00    
1585   E0E3 7E EA C4    
1586   E0E6             			
1587   E0E6 86 FF       gameover_event	ldaa	#$FF
1588   E0E8 97 58       			staa	mbip_b0
1589   E0EA 86 69       			ldaa	#$69
1590   E0EC 7E F1 3C    			jmp	lamp_on
1591   E0EF             	
1592   E0EF             ;********************************************************
1593   E0EF             ;* Jungle Lord Scoring Event: This takes care of adding
1594   E0EF             ;* up all scores, this needs to be here because of the 
1595   E0EF             ;* double scoring. 
1596   E0EF             ;********************************************************		
1597   E0EF 37          score_event		pshb	
1598   E0F0 C6 D4       			ldab	#$D4
1599   E0F2 D7 0B       			stab	game_ram_b			;Set Background Sound toggle
1600   E0F4 D7 AA       			stab	thread_priority
1601   E0F6 CE DD B0    			ldx	#disp_animation
1602   E0F9 BD EA 78    			jsr	newthread_sp
1603   E0FC D6 1C       			ldab	$1C
1604   E0FE             			ifmi	
1604   E0FE             
1604   E0FE 2A FE       
1605   E100 C4 3F       				andb	#$3F
1606   E102 D7 1C       				stab	$1C			;clear bit#26
1607   E104 36          				psha	
1608   E105 BD DC 94    				jsr	timer_dec
1609   E108 86 1A       				ldaa	#$1A
1610   E10A BD F1 5B    				jsr	lamp_off		;turn off 'keepshooting' on playfield
1611   E10D 32          				pula	
1612   E10E             			endif
1612   E10E             
1612   E10E             
1612   E10E             
1612   E10E             
1612   E10E             
1612   E10E~            			endif
1612   E10E~            			endif
1612   E10E             
1612   E10E~            			endif
1612   E10E~            			endif
1612   E10E             
1612   E0FF             
1612   E0FF 0E          
1612   E100             
1612   E100             
1612   E100~            			endif
1612   E100~            			endif
1612   E100~            			endif
1612   E100             
1612   E10E             
1612   E10E~            			endif
1612   E10E~            			endif
1612   E10E             
1613   E10E D6 13       			ldab	$13
1614   E110 DA 33       			orab	$33
1615   E112 C5 02       			bitb	#$02
1616   E114             			ifne
1616   E114             
1616   E114 27 FE       
1617   E116 36          				psha	
1618   E117 84 F8       				anda	#$F8
1619   E119 48          				asla	
1620   E11A 33          				pulb	
1621   E11B C4 07       				andb	#$07
1622   E11D 1B          				aba	
1623   E11E             			endif
1623   E11E             
1623   E11E             
1623   E11E             
1623   E11E             
1623   E11E             
1623   E11E~            			endif
1623   E11E~            			endif
1623   E11E             
1623   E11E~            			endif
1623   E11E~            			endif
1623   E11E             
1623   E115             
1623   E115 08          
1623   E116             
1623   E116             
1623   E116~            			endif
1623   E116~            			endif
1623   E116~            			endif
1623   E116             
1623   E11E             
1623   E11E~            			endif
1623   E11E~            			endif
1623   E11E             
1624   E11E 33          			pulb	
1625   E11F 31          			ins	
1626   E120 31          			ins	
1627   E121 BD EB DB    			jsr	update_eb_count
1628   E124 BD EC 1D    			jsr	score_update
1629   E127 BD EB A1    			jsr	update_commas
1630   E12A CE 00 DE    			ldx	#x_temp_2
1631   E12D 8D 0C       			bsr	add_ab
1632   E12F D7 DE       			stab	x_temp_2
1633   E131 DE CE       			ldx	pscore_buf
1634   E133 8D 06       			bsr	add_ab
1635   E135 BD EC B7    			jsr	$ECB7			;Because we have overridden the scoring event, we need to check
1636   E138 7E EC 18    			jmp	$EC18			;if player has exceeded any of the replay scores.
1637   E13B             			
1638   E13B A6 00       add_ab		ldaa	$00,X
1639   E13D E6 01       			ldab	$01,X
1640   E13F 8D 05       			bsr	dec_test
1641   E141 BD EC F3    			jsr	split_ab
1642   E144 1B          			aba	
1643   E145 16          			tab	
1644   E146 C1 A0       dec_test		cmpb	#$A0
1645   E148             			ifcc
1645   E148             
1645   E148 25 FE       
1646   E14A CB 10       				addb	#$10
1647   E14C             			endif
1647   E14C             
1647   E14C             
1647   E14C             
1647   E14C             
1647   E14C             
1647   E14C~            			endif
1647   E14C~            			endif
1647   E14C             
1647   E14C~            			endif
1647   E14C~            			endif
1647   E14C             
1647   E149             
1647   E149 02          
1647   E14A             
1647   E14A             
1647   E14A~            			endif
1647   E14A~            			endif
1647   E14A~            			endif
1647   E14A             
1647   E14C             
1647   E14C~            			endif
1647   E14C~            			endif
1647   E14C             
1648   E14C             hook_gamestart
1649   E14C 39          hook_mainloop	rts
1650   E14D             
1651   E14D             ;************************************************************
1652   E14D             ;* Coin Routines, this simply plays sound $00 and jumps to 
1653   E14D             ;* the system coin routine which does all the coin code and
1654   E14D             ;* then plays sound $00 again.
1655   E14D             ;************************************************************	
1656   E14D             sw_coin_c
1657   E14D             sw_coin_l
1658   E14D             sw_coin_r		SSND_($00)				;Credit Sound
1658   E14D             
1658   E14D E0          
1658   E14E~            sw_coin_r		SSND_($00)				;Credit Sound
1658   E14E~            sw_coin_r		SSND_($00)				;Credit Sound
1658   E14E~            sw_coin_r		SSND_($00)				;Credit Sound
1658   E14E             
1659   E14E 5F          			JMP_(coin_accepted)		
1659   E14F F7 A2       
1660   E151             
1661   E151             ;************************************************************
1662   E151             ;* Tilt Routines:
1663   E151             ;************************************************************
1664   E151             sw_pf_tilt
1665   E151             sw_plumbtilt	EXE_
1665   E151             
1665   E151 44          
1666   E152             			      NEWTHREAD(min_tilt)
1666   E152 CE E1 83    
1666   E155 BD EA C4    
1667   E158             			EXEEND_
1667   E158             
1667   E158             
1667   E158             
1667   E158             
1667   E158~            			EXEEND_
1667   E158~            			EXEEND_
1667   E158             
1667   E151             
1667   E151 48          
1667   E152             
1667   E158             
1667   E158~            			EXEEND_
1667   E158~            			EXEEND_
1667   E158             
1668   E158             			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1668   E158             
1668   E158             
1668   E158             
1668   E158 5AFB40F0FE  
1668   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1668   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1668   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1668   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1668   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1668   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1668   E15D             
1669   E15D                   			SSND_($08)				;Sound #08
1669   E15D             
1669   E15D E8          
1669   E15E~                  			SSND_($08)				;Sound #08
1669   E15E~                  			SSND_($08)				;Sound #08
1669   E15E~                  			SSND_($08)				;Sound #08
1669   E15E             
1670   E15E                   			JSRD_(tilt_warning)		
1670   E15E 57          
1670   E15F FB DD       
1671   E161                   			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1671   E161             
1671   E161 5A F0 0D    
1671   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1671   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1671   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1671   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1671   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1671   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1671   E164             
1672   E164                   			JSRR_(gi_off_inc)			
1672   E164~                  			JSRR_(gi_off_inc)			
1672   E164~                  			JSRR_(gi_off_inc)			
1672   E164             
1672   E164~                  			JSRR_(gi_off_inc)			
1672   E164~                  			JSRR_(gi_off_inc)			
1672   E164             
1672   E164             
1672   E164 99          
1672   E165 37          
1673   E166                   			SLEEP_(2)
1673   E166             
1673   E166 72          
1673   E167~                  			SLEEP_(2)
1673   E167~                  			SLEEP_(2)
1673   E167             
1674   E167                   			JSRR_(gi_on_dec)
1674   E167~                  			JSRR_(gi_on_dec)
1674   E167~                  			JSRR_(gi_on_dec)
1674   E167             
1674   E167~                  			JSRR_(gi_on_dec)
1674   E167~                  			JSRR_(gi_on_dec)
1674   E167             
1674   E167             
1674   E167 99          
1674   E168 25          
1675   E169                   	      ENDIF_			
1675   E169             
1675   E169             
1675   E169             
1675   E169             
1675   E169             
1675   E169~                  	      ENDIF_			
1675   E169~                  	      ENDIF_			
1675   E169             
1675   E169~                  	      ENDIF_			
1675   E169~                  	      ENDIF_			
1675   E169             
1675   E15C             
1675   E15C 0C          
1675   E15D             
1675   E15D             
1675   E15D~                  	      ENDIF_			
1675   E15D~                  	      ENDIF_			
1675   E15D~                  	      ENDIF_			
1675   E15D~                  	      ENDIF_			
1675   E15D~                  	      ENDIF_			
1675   E15D             
1675   E169             
1675   E169~                  	      ENDIF_			
1675   E169~                  	      ENDIF_			
1675   E169             
1676   E169             			KILL_					;Remove This Thread
1676   E169 03          
1677   E16A             
1678   E16A             sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1678   E16A             
1678   E16A             
1678   E16A             
1678   E16A 5A 40 00    
1678   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1678   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1678   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1678   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1678   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1678   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1678   E16D             
1679   E16D                   			SSND_($08)				;Sound #08
1679   E16D             
1679   E16D E8          
1679   E16E~                  			SSND_($08)				;Sound #08
1679   E16E~                  			SSND_($08)				;Sound #08
1679   E16E~                  			SSND_($08)				;Sound #08
1679   E16E             
1680   E16E                   			JSRD_(do_tilt)			
1680   E16E 57          
1680   E16F FB E9       
1681   E171             you_tilted      		JSR_(gi_off_inc)			
1681   E171 56          
1681   E172 DA 9D       
1682   E174 5E A5 26          			SWCLR_($25,$26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
1683   E177                   			IFEQR_($5F)			      ;BNER_BIT#1F 
1683   E177             
1683   E177             
1683   E177             
1683   E177 5B 5F 00    
1683   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1683   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1683   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1683   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1683   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1683   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1683   E17A             
1684   E17A                   			      JSRR_(mb_end_disp)
1684   E17A~                  			      JSRR_(mb_end_disp)
1684   E17A~                  			      JSRR_(mb_end_disp)
1684   E17A             
1684   E17A~                  			      JSRR_(mb_end_disp)
1684   E17A~                  			      JSRR_(mb_end_disp)
1684   E17A             
1684   E17A             
1684   E17A 93          
1684   E17B 87          
1685   E17C                   			ENDIF_			
1685   E17C             
1685   E17C             
1685   E17C             
1685   E17C             
1685   E17C             
1685   E17C~                  			ENDIF_			
1685   E17C~                  			ENDIF_			
1685   E17C             
1685   E17C~                  			ENDIF_			
1685   E17C~                  			ENDIF_			
1685   E17C             
1685   E179             
1685   E179 02          
1685   E17A             
1685   E17A             
1685   E17A~                  			ENDIF_			
1685   E17A~                  			ENDIF_			
1685   E17A~                  			ENDIF_			
1685   E17A~                  			ENDIF_			
1685   E17A~                  			ENDIF_			
1685   E17A             
1685   E17C             
1685   E17C~                  			ENDIF_			
1685   E17C~                  			ENDIF_			
1685   E17C             
1686   E17C                   			BITOFF_($E6,$67)			;Turn OFF: Bit#26, Bit#27
1686   E17C             
1686   E17C 11 E6 67    
1687   E17F                   			SLEEP_(156)
1687   E17F~                  			SLEEP_(156)
1687   E17F~                  			SLEEP_(156)
1687   E17F             
1687   E17F 53 9C       
1687   E181             
1688   E181                   			SSND_($1C)				;Sound #1C
1688   E181             
1688   E181 FC          
1688   E182~                  			SSND_($1C)				;Sound #1C
1688   E182~                  			SSND_($1C)				;Sound #1C
1688   E182~                  			SSND_($1C)				;Sound #1C
1688   E182             
1689   E182                   	      ENDIF_
1689   E182             
1689   E182             
1689   E182             
1689   E182             
1689   E182             
1689   E182~                  	      ENDIF_
1689   E182~                  	      ENDIF_
1689   E182             
1689   E182~                  	      ENDIF_
1689   E182~                  	      ENDIF_
1689   E182             
1689   E16C             
1689   E16C 15          
1689   E16D             
1689   E16D             
1689   E16D~                  	      ENDIF_
1689   E16D~                  	      ENDIF_
1689   E16D~                  	      ENDIF_
1689   E16D~                  	      ENDIF_
1689   E16D~                  	      ENDIF_
1689   E16D             
1689   E182             
1689   E182~                  	      ENDIF_
1689   E182~                  	      ENDIF_
1689   E182             
1690   E182             			KILL_					;Remove This Thread
1690   E182 03          
1691   E183             
1692   E183             ;**********************************************************
1693   E183             ;* This thread runs for 160 irq's and makes sure that 
1694   E183             ;* tilts can only happen every 2.5 seconds at a minimum.
1695   E183             ;**********************************************************
1696   E183 BD F3 AB    min_tilt		jsr	macro_start
1697   E186             			REMTHREADS_($F8,$A0)		;Remove Multiple Threads Based on Priority
1697   E186 55 F8 A0    
1698   E189             			PRI_($A6)				;Priority=#A6
1698   E189 52 A6       
1699   E18B             			BITON_($51)				;Turn ON: Bit#11
1699   E18B             
1699   E18B 10 51       
1700   E18D             			SLEEP_(160)
1700   E18D~            			SLEEP_(160)
1700   E18D~            			SLEEP_(160)
1700   E18D             
1700   E18D 53 A0       
1700   E18F             
1701   E18F             			BITOFF_($51)			;Turn OFF: Bit#11
1701   E18F             
1701   E18F 11 51       
1702   E191             			KILL_					;Remove This Thread
1702   E191 03          
1703   E192             
1704   E192             ;**********************************************************
1705   E192             ;* HSTD Reset Switch: Just do it.
1706   E192             ;**********************************************************
1707   E192             sw_hstd_res		JSRD_(restore_hstd)		
1707   E192 57          
1707   E193 EF 9D       
1708   E195             			KILL_					;Remove This Thread
1708   E195 03          
1709   E196             
1710   E196             ;**********************************************************
1711   E196             ;* 1-2-3-4-5 Switches: This is the routine that takes care
1712   E196             ;*                     of handling all the switch closures
1713   E196             ;*                     for this feature. If all are on,
1714   E196             ;*                     then Double Bonus lights.
1715   E196             ;**********************************************************
1716   E196 BD F3 AB    sw_12345_com	jsr	macro_start
1717   E199             			;Fall through to target logic
1718   E199             sw_1_target
1719   E199             sw_2_target
1720   E199             sw_3_target		BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
1720   E199             
1720   E199 14 00       
1721   E19B             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19B 43          
1721   E19C             
1721   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19C             
1721   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19C             
1721   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19C             
1721   E19C             
1721   E19C 0B          
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1721   E19D             
1721   E19D             
1721   E19D             
1721   E19D             
1722   E19D             			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1722   E19D             
1722   E19D             
1722   E19D             
1722   E19D 5B F6 04 FF 
1722   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1722   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1722   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1722   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1722   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1722   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1722   E1A1             
1723   E1A1                   			PRI_($05)				;Priority=#05
1723   E1A1 52 05       
1724   E1A3                   			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1724   E1A3             
1724   E1A3             
1724   E1A3             
1724   E1A3 5B 19 00    
1724   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1724   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1724   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1724   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1724   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1724   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1724   E1A6             
1725   E1A6                   			      ;If already lit, then give points
1726   E1A6                   			      POINTS_(5,10000)			;50,000 Points
1726   E1A6 42          
1726   E1A7             
1726   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A7             
1726   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A7             
1726   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A7             
1726   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A7             
1726   E1A7             
1726   E1A7 2C          
1726   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1726   E1A8             
1726   E1A8             
1726   E1A8             
1726   E1A8             
1726   E1A8             
1727   E1A8                   			ENDIF_
1727   E1A8             
1727   E1A8             
1727   E1A8             
1727   E1A8             
1727   E1A8             
1727   E1A8~                  			ENDIF_
1727   E1A8~                  			ENDIF_
1727   E1A8             
1727   E1A8~                  			ENDIF_
1727   E1A8~                  			ENDIF_
1727   E1A8             
1727   E1A5             
1727   E1A5 02          
1727   E1A6             
1727   E1A6             
1727   E1A6~                  			ENDIF_
1727   E1A6~                  			ENDIF_
1727   E1A6~                  			ENDIF_
1727   E1A6~                  			ENDIF_
1727   E1A6~                  			ENDIF_
1727   E1A6             
1727   E1A8             
1727   E1A8~                  			ENDIF_
1727   E1A8~                  			ENDIF_
1727   E1A8             
1728   E1A8                   			BITON_($19)				;Turn ON: Lamp#19(double_score)
1728   E1A8             
1728   E1A8 10 19       
1729   E1AA                   			SSND_($1D)				;Sound #1D
1729   E1AA             
1729   E1AA FD          
1729   E1AB~                  			SSND_($1D)				;Sound #1D
1729   E1AB~                  			SSND_($1D)				;Sound #1D
1729   E1AB~                  			SSND_($1D)				;Sound #1D
1729   E1AB             
1730   E1AB                   			BE19_($04)				;Effect: Range #04
1730   E1AB             
1730   E1AB 19 04       
1731   E1AD                   			BE29_($08)				;Effect: Range #08
1731   E1AD             
1731   E1AD 29 08       
1732   E1AF                   			JSRD_(timer_inc)			
1732   E1AF 57          
1732   E1B0 DC 87       
1733   E1B2                   			SETRAM_(rega,$1E)			;RAM$00=$1E
1733   E1B2~                  			SETRAM_(rega,$1E)			;RAM$00=$1E
1733   E1B2~                  			SETRAM_(rega,$1E)			;RAM$00=$1E
1733   E1B2             
1733   E1B2 C0 1E       
1734   E1B4                   			BEGIN_
1734   E1B4             
1735   E1B4             	 				BE2F_($04)				;Effect: Range #04
1735   E1B4             
1735   E1B4 2F 04       
1736   E1B6             	      			SLEEP_(3)
1736   E1B6             
1736   E1B6 73          
1736   E1B7~            	      			SLEEP_(3)
1736   E1B7~            	      			SLEEP_(3)
1736   E1B7             
1737   E1B7             	      			ADDRAM_(rega,-1)			;RAM$00-=1
1737   E1B7~            	      			ADDRAM_(rega,-1)			;RAM$00-=1
1737   E1B7~            	      			ADDRAM_(rega,-1)			;RAM$00-=1
1737   E1B7             
1737   E1B7 B0 FF       
1738   E1B9                   			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1B9             
1738   E1B9 5BFCE000FE  
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE             
1738   E1BE             
1738   E1BE             
1738   E1BE             
1738   E1BE             
1738   E1BE             
1738   E1BE             
1738   E1BD             
1738   E1BD F6          
1738   E1BE             
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE             
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1738   E1BE             
1739   E1BE                   			JSRD_(timer_dec)	
1739   E1BE 57          
1739   E1BF DC 94       
1740   E1C1                   	      ENDIF_		
1740   E1C1             
1740   E1C1             
1740   E1C1             
1740   E1C1             
1740   E1C1             
1740   E1C1~                  	      ENDIF_		
1740   E1C1~                  	      ENDIF_		
1740   E1C1             
1740   E1C1~                  	      ENDIF_		
1740   E1C1~                  	      ENDIF_		
1740   E1C1             
1740   E1A0             
1740   E1A0 20          
1740   E1A1             
1740   E1A1             
1740   E1A1~                  	      ENDIF_		
1740   E1A1~                  	      ENDIF_		
1740   E1A1~                  	      ENDIF_		
1740   E1A1~                  	      ENDIF_		
1740   E1A1~                  	      ENDIF_		
1740   E1A1             
1740   E1C1             
1740   E1C1~                  	      ENDIF_		
1740   E1C1~                  	      ENDIF_		
1740   E1C1             
1741   E1C1             			KILL_					;Remove This Thread
1741   E1C1 03          
1742   E1C2             
1743   E1C2             ;**************************************************************
1744   E1C2             ;* 10 Point switches: If one of the outlanes are on, then
1745   E1C2             ;*                    switch it to the other.
1746   E1C2             ;**************************************************************
1747   E1C2             sw_leftsling
1748   E1C2             sw_rightsling
1749   E1C2             sw_ten_1
1750   E1C2             sw_ten_2
1751   E1C2             sw_ten_3
1752   E1C2             sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C2 43          
1752   E1C3             
1752   E1C3~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C3~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C3             
1752   E1C3             
1752   E1C3 09          
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1752   E1C4             
1752   E1C4             
1753   E1C4             			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1753   E1C4             
1753   E1C4             
1753   E1C4             
1753   E1C4 5AFBF60CF50C
1753   E1CA FC
1753   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1753   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1753   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1753   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1753   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1753   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1753   E1CB             
1754   E1CB             			      BE1F_($0C)				;Effect: Range #0C
1754   E1CB             
1754   E1CB 1F 0C       
1755   E1CD             			      BE1F_($0E)				;Effect: Range #0E
1755   E1CD             
1755   E1CD 1F 0E       
1756   E1CF             			ENDIF_
1756   E1CF             
1756   E1CF             
1756   E1CF             
1756   E1CF             
1756   E1CF             
1756   E1CF~            			ENDIF_
1756   E1CF~            			ENDIF_
1756   E1CF             
1756   E1CF~            			ENDIF_
1756   E1CF~            			ENDIF_
1756   E1CF             
1756   E1CA             
1756   E1CA 04          
1756   E1CB             
1756   E1CB             
1756   E1CB~            			ENDIF_
1756   E1CB~            			ENDIF_
1756   E1CB~            			ENDIF_
1756   E1CB~            			ENDIF_
1756   E1CB~            			ENDIF_
1756   E1CB             
1756   E1CF             
1756   E1CF~            			ENDIF_
1756   E1CF~            			ENDIF_
1756   E1CF             
1757   E1CF             sw_notused		KILL_					;Remove This Thread
1757   E1CF 03          
1758   E1D0             
1759   E1D0             ;**************************************************************
1760   E1D0             ;* Loop Switches:
1761   E1D0             ;**************************************************************
1762   E1D0             sw_looplow		REMTHREADS_($F8,$90)		;Remove Multiple Threads Based on Priority
1762   E1D0 55 F8 90    
1763   E1D3             			PRI_($90)				;Priority=#90
1763   E1D3 52 90       
1764   E1D5             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D5 43          
1764   E1D6             
1764   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D6             
1764   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D6             
1764   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D6             
1764   E1D6             
1764   E1D6 0B          
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1764   E1D7             
1764   E1D7             
1764   E1D7             
1764   E1D7             
1765   E1D7             			IFNER_($5B)				;BEQR_BIT#1B
1765   E1D7             
1765   E1D7             
1765   E1D7             
1765   E1D7 5A 5B 00    
1765   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1765   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1765   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1765   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1765   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1765   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1765   E1DA             
1766   E1DA             				BITON_($5A)				;Turn ON: Bit#1A
1766   E1DA             
1766   E1DA 10 5A       
1767   E1DC             				SLEEP_(32)				;1/2 second
1767   E1DC~            				SLEEP_(32)				;1/2 second
1767   E1DC~            				SLEEP_(32)				;1/2 second
1767   E1DC             
1767   E1DC 53 20       
1767   E1DE             
1768   E1DE             noloop			BITOFF_($5A)			;Turn OFF: Bit#1A
1768   E1DE             
1768   E1DE 11 5A       
1769   E1E0             				KILL_					;Remove This Thread
1769   E1E0 03          
1770   E1E1             			ENDIF_
1770   E1E1             
1770   E1E1             
1770   E1E1             
1770   E1E1             
1770   E1E1             
1770   E1E1~            			ENDIF_
1770   E1E1~            			ENDIF_
1770   E1E1             
1770   E1E1~            			ENDIF_
1770   E1E1~            			ENDIF_
1770   E1E1             
1770   E1D9             
1770   E1D9 07          
1770   E1DA             
1770   E1DA             
1770   E1DA~            			ENDIF_
1770   E1DA~            			ENDIF_
1770   E1DA~            			ENDIF_
1770   E1DA~            			ENDIF_
1770   E1DA~            			ENDIF_
1770   E1DA             
1770   E1E1             
1770   E1E1~            			ENDIF_
1770   E1E1~            			ENDIF_
1770   E1E1             
1771   E1E1             loop_forward	REMTHREADS_($F8,$50)		;Remove Multiple Threads Based on Priority
1771   E1E1 55 F8 50    
1772   E1E4             			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1772   E1E4             
1772   E1E4             
1772   E1E4             
1772   E1E4 5B F4 1E FF 
1772   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1772   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1772   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1772   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1772   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1772   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1772   E1E8             
1773   E1E8                   			BITOFF_($9E,$5B)			;Turn OFF: Lamp#1E(loop_x), Bit#1B
1773   E1E8             
1773   E1E8 11 9E 5B    
1774   E1EB                   			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
1774   E1EB             
1774   E1EB 21 1E       
1775   E1ED                   			PRI_($05)				;Priority=#05
1775   E1ED 52 05       
1776   E1EF                   			BE1A_($01)				;Effect: Range #01
1776   E1EF             
1776   E1EF 1A 01       
1777   E1F1                   			SETRAM_(rega,$40)			;RAM$00=$40
1777   E1F1~                  			SETRAM_(rega,$40)			;RAM$00=$40
1777   E1F1~                  			SETRAM_(rega,$40)			;RAM$00=$40
1777   E1F1             
1777   E1F1 C0 40       
1778   E1F3                   			BEGIN_
1778   E1F3             
1779   E1F3             				      ADDRAM_(rega,-1)			;RAM$00-=1
1779   E1F3~            				      ADDRAM_(rega,-1)			;RAM$00-=1
1779   E1F3~            				      ADDRAM_(rega,-1)			;RAM$00-=1
1779   E1F3             
1779   E1F3 B0 FF       
1780   E1F5                   			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F5             
1780   E1F5 5B E0 00    
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8             
1780   E1F8             
1780   E1F8             
1780   E1F8             
1780   E1F8             
1780   E1F8             
1780   E1F8             
1780   E1F7             
1780   E1F7 FB          
1780   E1F8             
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8             
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1780   E1F8             
1781   E1F8                   			JSRR_(gatlin_sound)			
1781   E1F8~                  			JSRR_(gatlin_sound)			
1781   E1F8~                  			JSRR_(gatlin_sound)			
1781   E1F8             
1781   E1F8~                  			JSRR_(gatlin_sound)			
1781   E1F8~                  			JSRR_(gatlin_sound)			
1781   E1F8             
1781   E1F8             
1781   E1F8 92          
1781   E1F9 05          
1782   E1FA                   			KILL_					;Remove This Thread
1782   E1FA 03          
1783   E1FB                               ENDIF_
1783   E1FB             
1783   E1FB             
1783   E1FB             
1783   E1FB             
1783   E1FB             
1783   E1FB~                              ENDIF_
1783   E1FB~                              ENDIF_
1783   E1FB             
1783   E1FB~                              ENDIF_
1783   E1FB~                              ENDIF_
1783   E1FB             
1783   E1E7             
1783   E1E7 13          
1783   E1E8             
1783   E1E8             
1783   E1E8~                              ENDIF_
1783   E1E8~                              ENDIF_
1783   E1E8~                              ENDIF_
1783   E1E8~                              ENDIF_
1783   E1E8~                              ENDIF_
1783   E1E8             
1783   E1FB             
1783   E1FB~                              ENDIF_
1783   E1FB~                              ENDIF_
1783   E1FB             
1784   E1FB                   		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1784   E1FB             
1784   E1FB             
1784   E1FB             
1784   E1FB 5B F4 1D FF 
1784   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1784   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1784   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1784   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1784   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1784   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1784   E1FF             
1785   E1FF                   			BITOFF_($1D)			;Turn OFF: Lamp#1D(loop_dshield)
1785   E1FF             
1785   E1FF 11 1D       
1786   E201                   			JSRR_(loop_effect)			
1786   E201~                  			JSRR_(loop_effect)			
1786   E201~                  			JSRR_(loop_effect)			
1786   E201             
1786   E201~                  			JSRR_(loop_effect)			
1786   E201~                  			JSRR_(loop_effect)			
1786   E201             
1786   E201             
1786   E201 90          
1786   E202 1B          
1787   E203             			ELSE_			
1787   E203             
1787   E203             
1787   E203             
1787   E203             
1787   E1FE             
1787   E1FE             
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE             
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE~            			ELSE_			
1787   E1FE             
1787   E1FE             
1787   E1FE 06          
1787   E203             
1787   E203             
1787   E203~            			ELSE_			
1787   E203~            			ELSE_			
1787   E203             
1787   E203~            			ELSE_			
1787   E203~            			ELSE_			
1787   E203             
1787   E203             
1787   E203 80          
1787   E204 00          
1787   E205             
1787   E205             
1787   E205             
1787   E205~            			ELSE_			
1787   E205~            			ELSE_			
1787   E205             
1787   E205~            			ELSE_			
1787   E205~            			ELSE_			
1787   E205             
1788   E205                   			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E205 43          
1788   E206             
1788   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E206             
1788   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E206             
1788   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E206             
1788   E206             
1788   E206 7B          
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1788   E207             
1788   E207             
1788   E207             
1788   E207             
1789   E207                   			JMPR_(bit1b_off)						
1789   E207~                  			JMPR_(bit1b_off)						
1789   E207~                  			JMPR_(bit1b_off)						
1789   E207             
1789   E207~                  			JMPR_(bit1b_off)						
1789   E207~                  			JMPR_(bit1b_off)						
1789   E207             
1789   E207             
1789   E207 80          
1789   E208 0E          
1790   E209             sw_loophigh		      REMTHREADS_($F8,$90)		;Remove Multiple Threads Based on Priority
1790   E209 55 F8 90    
1791   E20C                   			PRI_($90)				;Priority=#90
1791   E20C 52 90       
1792   E20E                   			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E20E 43          
1792   E20F             
1792   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E20F             
1792   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E20F             
1792   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E20F             
1792   E20F             
1792   E20F 0B          
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1792   E210             
1792   E210             
1792   E210             
1792   E210             
1793   E210                   			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1793   E210             
1793   E210 5A 5A 07    
1793   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1793   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1793   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1793   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1793   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1793   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1793   E213             
1794   E213                   			BITON_($5B)				;Turn ON: Bit#1B
1794   E213             
1794   E213 10 5B       
1795   E215                   			SLEEP_(32)				;1/2 second
1795   E215~                  			SLEEP_(32)				;1/2 second
1795   E215~                  			SLEEP_(32)				;1/2 second
1795   E215             
1795   E215 53 20       
1795   E217             
1796   E217                   	      ENDIF_
1796   E217             
1796   E217             
1796   E217             
1796   E217             
1796   E217             
1796   E217~                  	      ENDIF_
1796   E217~                  	      ENDIF_
1796   E217             
1796   E217~                  	      ENDIF_
1796   E217~                  	      ENDIF_
1796   E217             
1796   E204             
1796   E204 12          
1796   E205             
1796   E205             
1796   E205~                  	      ENDIF_
1796   E205~                  	      ENDIF_
1796   E205~                  	      ENDIF_
1796   E205~                  	      ENDIF_
1796   E205~                  	      ENDIF_
1796   E205             
1796   E217             
1796   E217~                  	      ENDIF_
1796   E217~                  	      ENDIF_
1796   E217             
1797   E217             bit1b_off		BITOFF_($5B)			;Turn OFF: Bit#1B
1797   E217             
1797   E217 11 5B       
1798   E219             			KILL_					;Remove This Thread
1798   E219 03          
1799   E21A             
1800   E21A             loop_backwards	JSRR_(loop_effect)			
1800   E21A~            loop_backwards	JSRR_(loop_effect)			
1800   E21A~            loop_backwards	JSRR_(loop_effect)			
1800   E21A             
1800   E21A~            loop_backwards	JSRR_(loop_effect)			
1800   E21A~            loop_backwards	JSRR_(loop_effect)			
1800   E21A             
1800   E21A             
1800   E21A 90          
1800   E21B 02          
1801   E21C             			JMPR_(noloop)
1801   E21C~            			JMPR_(noloop)
1801   E21C~            			JMPR_(noloop)
1801   E21C             
1801   E21C~            			JMPR_(noloop)
1801   E21C~            			JMPR_(noloop)
1801   E21C             
1801   E21C             
1801   E21C 8F          
1801   E21D C0          
1802   E21E             						
1803   E21E             loop_effect		BE1A_($0E)				;Effect: Range #0E
1803   E21E             
1803   E21E 1A 0E       
1804   E220             			IFNER_($56)			      ;BEQR_BIT#16
1804   E220             
1804   E220             
1804   E220             
1804   E220 5A 56 00    
1804   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1804   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1804   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1804   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1804   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1804   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1804   E223             
1805   E223             			      ;add a drain shield now
1806   E223             add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1806   E223             
1806   E223             
1806   E223             
1806   E223 5AFCD601FE  
1806   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1806   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1806   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1806   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1806   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1806   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1806   E228             
1807   E228                         			EXE_
1807   E228             
1807   E228 44          
1808   E229 96 19                   			      ldaa	$19
1809   E22B 84 60                   			      anda	#$60
1810   E22D 9A 12                   			      oraa	$12
1811   E22F 97 12                   			      staa	$12
1812   E231                         			EXEEND_
1812   E231             
1812   E231             
1812   E231             
1812   E231             
1812   E231~                        			EXEEND_
1812   E231~                        			EXEEND_
1812   E231             
1812   E228             
1812   E228 4A          
1812   E229             
1812   E231             
1812   E231~                        			EXEEND_
1812   E231~                        			EXEEND_
1812   E231             
1813   E231                         			BITOFF_($56)			;Turn OFF: Bit#16
1813   E231             
1813   E231 11 56       
1814   E233                         		ENDIF_
1814   E233             
1814   E233             
1814   E233             
1814   E233             
1814   E233             
1814   E233~                        		ENDIF_
1814   E233~                        		ENDIF_
1814   E233             
1814   E233~                        		ENDIF_
1814   E233~                        		ENDIF_
1814   E233             
1814   E227             
1814   E227 0B          
1814   E228             
1814   E228             
1814   E228~                        		ENDIF_
1814   E228~                        		ENDIF_
1814   E228~                        		ENDIF_
1814   E228~                        		ENDIF_
1814   E228~                        		ENDIF_
1814   E228             
1814   E233             
1814   E233~                        		ENDIF_
1814   E233~                        		ENDIF_
1814   E233             
1815   E233                   		ENDIF_
1815   E233             
1815   E233             
1815   E233             
1815   E233             
1815   E233             
1815   E233~                  		ENDIF_
1815   E233~                  		ENDIF_
1815   E233             
1815   E233~                  		ENDIF_
1815   E233~                  		ENDIF_
1815   E233             
1815   E222             
1815   E222 10          
1815   E223             
1815   E223             
1815   E223~                  		ENDIF_
1815   E223~                  		ENDIF_
1815   E223~                  		ENDIF_
1815   E223~                  		ENDIF_
1815   E223~                  		ENDIF_
1815   E223             
1815   E233             
1815   E233~                  		ENDIF_
1815   E233~                  		ENDIF_
1815   E233             
1816   E233             			MRTS_					;Macro RTS, Save MRA,MRB
1816   E233 02          
1817   E234             
1818   E234             ;**************************************************************
1819   E234             ;* Left Drop Target Bank
1820   E234             ;**************************************************************
1821   E234             sw_dt_lc
1822   E234             sw_dt_ll
1823   E234             sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1823   E234             
1823   E234 5A 4F 63    
1823   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1823   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1823   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1823   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1823   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1823   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1823   E237             
1824   E237             			BE1A_($06)				;Effect: Range #06
1824   E237             
1824   E237 1A 06       
1825   E239             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E239 43          
1825   E23A             
1825   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23A             
1825   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23A             
1825   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23A             
1825   E23A             
1825   E23A 0B          
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1825   E23B             
1825   E23B             
1825   E23B             
1825   E23B             
1826   E23B             			JSRR_(do_lord)			
1826   E23B~            			JSRR_(do_lord)			
1826   E23B~            			JSRR_(do_lord)			
1826   E23B             
1826   E23B~            			JSRR_(do_lord)			
1826   E23B~            			JSRR_(do_lord)			
1826   E23B             
1826   E23B             
1826   E23B 90          
1826   E23C 5E          
1827   E23D             			EXE_
1827   E23D             
1827   E23D 44          
1828   E23E C4 70       			      andb	#$70
1829   E240             			EXEEND_
1829   E240             
1829   E240             
1829   E240             
1829   E240             
1829   E240~            			EXEEND_
1829   E240~            			EXEEND_
1829   E240             
1829   E23D             
1829   E23D 44          
1829   E23E             
1829   E240             
1829   E240~            			EXEEND_
1829   E240~            			EXEEND_
1829   E240             
1830   E240             			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1830   E240             
1830   E240 5BFCE17055  
1830   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1830   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1830   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1830   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1830   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1830   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1830   E245             
1831   E245             			BITOFF_($1C)			;Turn OFF: Lamp#1C(dt_left)
1831   E245             
1831   E245 11 1C       
1832   E247             			SOL_(dtleft_on)   		;Turn ON Sol#4:dt_left
1832   E247 31 63       
1833   E249             			REMTHREADS_($F8,$80)		;Remove Multiple Threads Based on Priority
1833   E249 55 F8 80    
1834   E24C             			JMPR_(dt_common)
1834   E24C~            			JMPR_(dt_common)
1834   E24C~            			JMPR_(dt_common)
1834   E24C             
1834   E24C~            			JMPR_(dt_common)
1834   E24C~            			JMPR_(dt_common)
1834   E24C             
1834   E24C             
1834   E24C 80          
1834   E24D 18          
1835   E24E             			
1836   E24E             ;**************************************************************
1837   E24E             ;* Right Drop Target Bank
1838   E24E             ;**************************************************************						
1839   E24E             sw_dt_rb
1840   E24E             sw_dt_rc
1841   E24E             sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1841   E24E             
1841   E24E 5A 4F 49    
1841   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1841   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1841   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1841   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1841   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1841   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1841   E251             
1842   E251             			BE1A_($05)				;Effect: Range #05
1842   E251             
1842   E251 1A 05       
1843   E253             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E253 43          
1843   E254             
1843   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E254             
1843   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E254             
1843   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E254             
1843   E254             
1843   E254 0B          
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1843   E255             
1843   E255             
1843   E255             
1843   E255             
1844   E255             			JSRR_(do_lord)			
1844   E255~            			JSRR_(do_lord)			
1844   E255~            			JSRR_(do_lord)			
1844   E255             
1844   E255~            			JSRR_(do_lord)			
1844   E255~            			JSRR_(do_lord)			
1844   E255             
1844   E255             
1844   E255 90          
1844   E256 44          
1845   E257             			EXE_
1845   E257             
1845   E257 44          
1846   E258 C4 07       			      andb	#$07
1847   E25A             			EXEEND_
1847   E25A             
1847   E25A             
1847   E25A             
1847   E25A             
1847   E25A~            			EXEEND_
1847   E25A~            			EXEEND_
1847   E25A             
1847   E257             
1847   E257 44          
1847   E258             
1847   E25A             
1847   E25A~            			EXEEND_
1847   E25A~            			EXEEND_
1847   E25A             
1848   E25A             			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1848   E25A             
1848   E25A 5BFCE1073B  
1848   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1848   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1848   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1848   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1848   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1848   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1848   E25F             
1849   E25F             			BITOFF_($18)			;Turn OFF: Lamp#18(dt_right)
1849   E25F             
1849   E25F 11 18       
1850   E261             			SOL_(dtright_on)           	;Turn ON Sol#5:dt_right
1850   E261 31 64       
1851   E263             			REMTHREADS_($F8,$70)		;Remove Multiple Threads Based on Priority
1851   E263 55 F8 70    
1852   E266             dt_common		PRI_($05)				;Priority=#05
1852   E266 52 05       
1853   E268             			EXE_
1853   E268             
1853   E268 44          
1854   E269 37          			      pshb	
1855   E26A 36          			      psha	
1856   E26B C6 05       			      ldab	#$05
1857   E26D             			EXEEND_
1857   E26D             
1857   E26D             
1857   E26D             
1857   E26D             
1857   E26D~            			EXEEND_
1857   E26D~            			EXEEND_
1857   E26D             
1857   E268             
1857   E268 46          
1857   E269             
1857   E26D             
1857   E26D~            			EXEEND_
1857   E26D~            			EXEEND_
1857   E26D             
1858   E26D             			JSR_(add_bonus_dly)				
1858   E26D 56          
1858   E26E DC F5       
1859   E270             			EXE_
1859   E270             
1859   E270 44          
1860   E271 32          			      pula	
1861   E272 36          			      psha
1862   E273             			EXEEND_	
1862   E273             
1862   E273             
1862   E273             
1862   E273             
1862   E273~            			EXEEND_	
1862   E273~            			EXEEND_	
1862   E273             
1862   E270             
1862   E270 44          
1862   E271             
1862   E273             
1862   E273~            			EXEEND_	
1862   E273~            			EXEEND_	
1862   E273             
1863   E273             			IFEQR_($E0)			      ;BNER_RAM$00
1863   E273             
1863   E273             
1863   E273             
1863   E273 5B E0 00    
1863   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1863   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1863   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1863   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1863   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1863   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1863   E276             
1864   E276             			      JSRR_(gj_0E)			
1864   E276~            			      JSRR_(gj_0E)			
1864   E276~            			      JSRR_(gj_0E)			
1864   E276             
1864   E276~            			      JSRR_(gj_0E)			
1864   E276~            			      JSRR_(gj_0E)			
1864   E276             
1864   E276             
1864   E276 95          
1864   E277 4F          
1865   E278             			      JMPR_(gj_0F)
1865   E278~            			      JMPR_(gj_0F)
1865   E278~            			      JMPR_(gj_0F)
1865   E278             
1865   E278~            			      JMPR_(gj_0F)
1865   E278~            			      JMPR_(gj_0F)
1865   E278             
1865   E278             
1865   E278 80          
1865   E279 02          
1866   E27A             			ENDIF_		
1866   E27A             
1866   E27A             
1866   E27A             
1866   E27A             
1866   E27A             
1866   E27A~            			ENDIF_		
1866   E27A~            			ENDIF_		
1866   E27A             
1866   E27A~            			ENDIF_		
1866   E27A~            			ENDIF_		
1866   E27A             
1866   E275             
1866   E275 04          
1866   E276             
1866   E276             
1866   E276~            			ENDIF_		
1866   E276~            			ENDIF_		
1866   E276~            			ENDIF_		
1866   E276~            			ENDIF_		
1866   E276~            			ENDIF_		
1866   E276             
1866   E27A             
1866   E27A~            			ENDIF_		
1866   E27A~            			ENDIF_		
1866   E27A             
1867   E27A DA 0A       			RSND_($1A,$0A)			;Sound #1A(x10)
1868   E27C             gj_0F			EXE_
1868   E27C             
1868   E27C 44          
1869   E27D 32          			      pula	
1870   E27E 33          			      pulb
1871   E27F             			EXEEND_	
1871   E27F             
1871   E27F             
1871   E27F             
1871   E27F             
1871   E27F~            			EXEEND_	
1871   E27F~            			EXEEND_	
1871   E27F             
1871   E27C             
1871   E27C 44          
1871   E27D             
1871   E27F             
1871   E27F~            			EXEEND_	
1871   E27F~            			EXEEND_	
1871   E27F             
1872   E27F             			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
1872   E27F             
1872   E27F 15 00       
1873   E281             			ADDRAM_(rega,$01)			;RAM$00+=$01
1873   E281~            			ADDRAM_(rega,$01)			;RAM$00+=$01
1873   E281~            			ADDRAM_(rega,$01)			;RAM$00+=$01
1873   E281             
1873   E281 B0 01       
1874   E283             			IFNER_($E0)				;BEQR_RAM$00
1874   E283             
1874   E283             
1874   E283             
1874   E283 5A E0 00    
1874   E286~            			IFNER_($E0)				;BEQR_RAM$00
1874   E286~            			IFNER_($E0)				;BEQR_RAM$00
1874   E286~            			IFNER_($E0)				;BEQR_RAM$00
1874   E286~            			IFNER_($E0)				;BEQR_RAM$00
1874   E286~            			IFNER_($E0)				;BEQR_RAM$00
1874   E286~            			IFNER_($E0)				;BEQR_RAM$00
1874   E286             
1875   E286             				BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
1875   E286             
1875   E286 14 00       
1876   E288             				ADDRAM_(rega,$BF)			;RAM$00+=$BF
1876   E288~            				ADDRAM_(rega,$BF)			;RAM$00+=$BF
1876   E288~            				ADDRAM_(rega,$BF)			;RAM$00+=$BF
1876   E288             
1876   E288 B0 BF       
1877   E28A             				SETRAM_(regb,$18)			;RAM$01=$18
1877   E28A~            				SETRAM_(regb,$18)			;RAM$01=$18
1877   E28A~            				SETRAM_(regb,$18)			;RAM$01=$18
1877   E28A             
1877   E28A C1 18       
1878   E28C             				BEGIN_
1878   E28C             
1879   E28C             					BITINVP_(rega)			;Toggle Lamp/Bit @RAM:00
1879   E28C             
1879   E28C 16 00       
1880   E28E             					SLEEP_(2)
1880   E28E             
1880   E28E 72          
1880   E28F~            					SLEEP_(2)
1880   E28F~            					SLEEP_(2)
1880   E28F             
1881   E28F             					ADDRAM_(regb,-1)			;RAM$01-=1
1881   E28F~            					ADDRAM_(regb,-1)			;RAM$01-=1
1881   E28F~            					ADDRAM_(regb,-1)			;RAM$01-=1
1881   E28F             
1881   E28F B1 FF       
1882   E291             				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E291             
1882   E291 5BFCE100FE  
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296             
1882   E296             
1882   E296             
1882   E296             
1882   E296             
1882   E296             
1882   E296             
1882   E295             
1882   E295 F6          
1882   E296             
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296             
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1882   E296             
1883   E296             				ADDRAM_(rega,$41)			;RAM$00+=$41
1883   E296~            				ADDRAM_(rega,$41)			;RAM$00+=$41
1883   E296~            				ADDRAM_(rega,$41)			;RAM$00+=$41
1883   E296             
1883   E296 B0 41       
1884   E298             				BITOFFP_($00)			;Turn OFF Lamp/Bit @RAM:00
1884   E298             
1884   E298 15 00       
1885   E29A             			ENDIF_
1885   E29A             
1885   E29A             
1885   E29A             
1885   E29A             
1885   E29A             
1885   E29A~            			ENDIF_
1885   E29A~            			ENDIF_
1885   E29A             
1885   E29A~            			ENDIF_
1885   E29A~            			ENDIF_
1885   E29A             
1885   E285             
1885   E285 14          
1885   E286             
1885   E286             
1885   E286~            			ENDIF_
1885   E286~            			ENDIF_
1885   E286~            			ENDIF_
1885   E286~            			ENDIF_
1885   E286~            			ENDIF_
1885   E286             
1885   E29A             
1885   E29A~            			ENDIF_
1885   E29A~            			ENDIF_
1885   E29A             
1886   E29A             dt_kill		KILL_					;Remove This Thread
1886   E29A 03          
1887   E29B             
1888   E29B             do_lord		EXE_
1888   E29B             
1888   E29B 44          
1889   E29C 36          			      psha	
1890   E29D 84 FC       			      anda	#$FC
1891   E29F 8B 41       			      adda	#$41
1892   E2A1             			EXEEND_
1892   E2A1             
1892   E2A1             
1892   E2A1             
1892   E2A1             
1892   E2A1~            			EXEEND_
1892   E2A1~            			EXEEND_
1892   E2A1             
1892   E29B             
1892   E29B 47          
1892   E29C             
1892   E2A1             
1892   E2A1~            			EXEEND_
1892   E2A1~            			EXEEND_
1892   E2A1             
1893   E2A1             			BEGIN_
1893   E2A1             
1894   E2A1             				SLEEP_(2)
1894   E2A1             
1894   E2A1 72          
1894   E2A2~            				SLEEP_(2)
1894   E2A2~            				SLEEP_(2)
1894   E2A2             
1895   E2A2             			NEEND_($E0)				;BEQR_RAM$00
1895   E2A2             
1895   E2A2 5A E0 00    
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5             
1895   E2A5             
1895   E2A5             
1895   E2A5             
1895   E2A5             
1895   E2A5             
1895   E2A5             
1895   E2A4             
1895   E2A4 FC          
1895   E2A5             
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5             
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1895   E2A5             
1896   E2A5             			EXE_
1896   E2A5             
1896   E2A5 44          
1897   E2A6 33          			      pulb	
1898   E2A7 4A          			      deca
1899   E2A8             			EXEEND_	
1899   E2A8             
1899   E2A8             
1899   E2A8             
1899   E2A8             
1899   E2A8~            			EXEEND_	
1899   E2A8~            			EXEEND_	
1899   E2A8             
1899   E2A5             
1899   E2A5 44          
1899   E2A6             
1899   E2A8             
1899   E2A8~            			EXEEND_	
1899   E2A8~            			EXEEND_	
1899   E2A8             
1900   E2A8             			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1900   E2A8             
1900   E2A8 5B F8 E1 EE 
1900   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1900   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1900   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1900   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1900   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1900   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1900   E2AC             
1901   E2AC             			EXE_
1901   E2AC             
1901   E2AC 44          
1902   E2AD 36          			      psha	
1903   E2AE BD E5 9F    			      jsr	get_lord
1904   E2B1 16          			      tab	
1905   E2B2 32          			      pula	
1906   E2B3             			EXEEND_
1906   E2B3             
1906   E2B3             
1906   E2B3             
1906   E2B3             
1906   E2B3~            			EXEEND_
1906   E2B3~            			EXEEND_
1906   E2B3             
1906   E2AC             
1906   E2AC 48          
1906   E2AD             
1906   E2B3             
1906   E2B3~            			EXEEND_
1906   E2B3~            			EXEEND_
1906   E2B3             
1907   E2B3             			IFNER_($E0)		      ;BEQR_RAM$00
1907   E2B3             
1907   E2B3             
1907   E2B3             
1907   E2B3 5A E0 00    
1907   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1907   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1907   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1907   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1907   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1907   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1907   E2B6             
1908   E2B6                   			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1908   E2B6             
1908   E2B6             
1908   E2B6             
1908   E2B6 5AFBFBFA5FFC
1908   E2BC D20041FAFCE101FCD501F2
1908   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1908   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1908   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1908   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1908   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1908   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1908   E2C7             
1909   E2C7                   				;BEQR_((ADJ#5==#1 && RAM$01==#1) || (BIT#01 || (ADJ#2==#0 && BIT#1F)))
1910   E2C7                         			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
1910   E2C7             
1910   E2C7 14 00       
1911   E2C9                         			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1911   E2C9             
1911   E2C9             
1911   E2C9             
1911   E2C9 5AFCE058FE  
1911   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1911   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1911   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1911   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1911   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1911   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1911   E2CE             
1912   E2CE                               			EXE_
1912   E2CE             
1912   E2CE 44          
1913   E2CF C6 80                         			      ldab	#$80
1914   E2D1 D7 AA                         			      stab	thread_priority
1915   E2D3 CE D8 A6                      			      ldx	#left_timer
1916   E2D6 BD EA 78                      			      jsr	newthread_sp
1917   E2D9                               			EXEEND_
1917   E2D9             
1917   E2D9             
1917   E2D9             
1917   E2D9             
1917   E2D9~                              			EXEEND_
1917   E2D9~                              			EXEEND_
1917   E2D9             
1917   E2CE             
1917   E2CE 4C          
1917   E2CF             
1917   E2D9             
1917   E2D9~                              			EXEEND_
1917   E2D9~                              			EXEEND_
1917   E2D9             
1918   E2D9                                           ELSE_ 						
1918   E2D9             
1918   E2D9             
1918   E2D9             
1918   E2D9             
1918   E2CD             
1918   E2CD             
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD             
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD~                                          ELSE_ 						
1918   E2CD             
1918   E2CD             
1918   E2CD 0D          
1918   E2D9             
1918   E2D9             
1918   E2D9~                                          ELSE_ 						
1918   E2D9~                                          ELSE_ 						
1918   E2D9             
1918   E2D9~                                          ELSE_ 						
1918   E2D9~                                          ELSE_ 						
1918   E2D9             
1918   E2D9             
1918   E2D9 80          
1918   E2DA 00          
1918   E2DB             
1918   E2DB             
1918   E2DB             
1918   E2DB~                                          ELSE_ 						
1918   E2DB~                                          ELSE_ 						
1918   E2DB             
1918   E2DB~                                          ELSE_ 						
1918   E2DB~                                          ELSE_ 						
1918   E2DB             
1919   E2DB                                       		EXE_
1919   E2DB             
1919   E2DB 44          
1920   E2DC C6 70                         			      ldab	#$70
1921   E2DE D7 AA                         			      stab	thread_priority
1922   E2E0 CE D8 D8                      			      ldx	#right_timer
1923   E2E3 BD EA 78                      			      jsr	newthread_sp
1924   E2E6                               			EXEEND_
1924   E2E6             
1924   E2E6             
1924   E2E6             
1924   E2E6             
1924   E2E6~                              			EXEEND_
1924   E2E6~                              			EXEEND_
1924   E2E6             
1924   E2DB             
1924   E2DB 4C          
1924   E2DC             
1924   E2E6             
1924   E2E6~                              			EXEEND_
1924   E2E6~                              			EXEEND_
1924   E2E6             
1925   E2E6                               		ENDIF_
1925   E2E6             
1925   E2E6             
1925   E2E6             
1925   E2E6             
1925   E2E6             
1925   E2E6~                              		ENDIF_
1925   E2E6~                              		ENDIF_
1925   E2E6             
1925   E2E6~                              		ENDIF_
1925   E2E6~                              		ENDIF_
1925   E2E6             
1925   E2DA             
1925   E2DA 0B          
1925   E2DB             
1925   E2DB             
1925   E2DB~                              		ENDIF_
1925   E2DB~                              		ENDIF_
1925   E2DB~                              		ENDIF_
1925   E2DB~                              		ENDIF_
1925   E2DB~                              		ENDIF_
1925   E2DB             
1925   E2E6             
1925   E2E6~                              		ENDIF_
1925   E2E6~                              		ENDIF_
1925   E2E6             
1926   E2E6                               	ENDIF_
1926   E2E6             
1926   E2E6             
1926   E2E6             
1926   E2E6             
1926   E2E6             
1926   E2E6~                              	ENDIF_
1926   E2E6~                              	ENDIF_
1926   E2E6             
1926   E2E6~                              	ENDIF_
1926   E2E6~                              	ENDIF_
1926   E2E6             
1926   E2C6             
1926   E2C6 1F          
1926   E2C7             
1926   E2C7             
1926   E2C7~                              	ENDIF_
1926   E2C7~                              	ENDIF_
1926   E2C7~                              	ENDIF_
1926   E2C7~                              	ENDIF_
1926   E2C7~                              	ENDIF_
1926   E2C7             
1926   E2E6             
1926   E2E6~                              	ENDIF_
1926   E2E6~                              	ENDIF_
1926   E2E6             
1927   E2E6                   		ENDIF_
1927   E2E6             
1927   E2E6             
1927   E2E6             
1927   E2E6             
1927   E2E6             
1927   E2E6~                  		ENDIF_
1927   E2E6~                  		ENDIF_
1927   E2E6             
1927   E2E6~                  		ENDIF_
1927   E2E6~                  		ENDIF_
1927   E2E6             
1927   E2B5             
1927   E2B5 30          
1927   E2B6             
1927   E2B6             
1927   E2B6~                  		ENDIF_
1927   E2B6~                  		ENDIF_
1927   E2B6~                  		ENDIF_
1927   E2B6~                  		ENDIF_
1927   E2B6~                  		ENDIF_
1927   E2B6             
1927   E2E6             
1927   E2E6~                  		ENDIF_
1927   E2E6~                  		ENDIF_
1927   E2E6             
1928   E2E6                   		EXE_
1928   E2E6             
1928   E2E6 44          
1929   E2E7 D6 64       			      ldab	$64
1930   E2E9             			EXEEND_
1930   E2E9             
1930   E2E9             
1930   E2E9             
1930   E2E9             
1930   E2E9~            			EXEEND_
1930   E2E9~            			EXEEND_
1930   E2E9             
1930   E2E6             
1930   E2E6 44          
1930   E2E7             
1930   E2E9             
1930   E2E9~            			EXEEND_
1930   E2E9~            			EXEEND_
1930   E2E9             
1931   E2E9             			MRTS_					;Macro RTS, Save MRA,MRB
1931   E2E9 02          
1932   E2EA             
1933   E2EA             ;************************************************************
1934   E2EA             ;* #5 Rollover switch: Will turn on multiplier lamp or drain
1935   E2EA             ;*                     shield on loop.
1936   E2EA             ;************************************************************
1937   E2EA             sw_5_rollover	JSRD_(spawn_loop)			
1937   E2EA 57          
1937   E2EB DB 12       
1938   E2ED             			JSR_(inc_bonus)		      ;1 bonus advance			
1938   E2ED 56          
1938   E2EE DC FF       
1939   E2F0             			JMPR_(sw_1_target)		
1939   E2F0~            			JMPR_(sw_1_target)		
1939   E2F0~            			JMPR_(sw_1_target)		
1939   E2F0             
1939   E2F0~            			JMPR_(sw_1_target)		
1939   E2F0~            			JMPR_(sw_1_target)		
1939   E2F0             
1939   E2F0             
1939   E2F0 8E          
1939   E2F1 A7          
1940   E2F2             
1941   E2F2             ;************************************************************
1942   E2F2             ;* Lower Eject Hole
1943   E2F2             ;************************************************************			
1944   E2F2             sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1944   E2F2             
1944   E2F2             
1944   E2F2             
1944   E2F2 5BFBF0F1FE  
1944   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1944   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1944   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1944   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1944   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1944   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1944   E2F7             
1945   E2F7             			      SETRAM_(rega,$46)			;RAM$00=$46	
1945   E2F7~            			      SETRAM_(rega,$46)			;RAM$00=$46	
1945   E2F7~            			      SETRAM_(rega,$46)			;RAM$00=$46	
1945   E2F7             
1945   E2F7 C0 46       
1946   E2F9                   		ELSE_	
1946   E2F9             
1946   E2F9             
1946   E2F9             
1946   E2F9             
1946   E2F6             
1946   E2F6             
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6             
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6~                  		ELSE_	
1946   E2F6             
1946   E2F6             
1946   E2F6 04          
1946   E2F9             
1946   E2F9             
1946   E2F9~                  		ELSE_	
1946   E2F9~                  		ELSE_	
1946   E2F9             
1946   E2F9~                  		ELSE_	
1946   E2F9~                  		ELSE_	
1946   E2F9             
1946   E2F9             
1946   E2F9 80          
1946   E2FA 00          
1946   E2FB             
1946   E2FB             
1946   E2FB             
1946   E2FB~                  		ELSE_	
1946   E2FB~                  		ELSE_	
1946   E2FB             
1946   E2FB~                  		ELSE_	
1946   E2FB~                  		ELSE_	
1946   E2FB             
1947   E2FB             	      		BEQA_($FB,$FB,$FE,$F2,$F0,$10,$FA,$5E,$F3,$57,$4F,sw_notused)
1947   E2FB 58FBFBFEF2F0
1947   E301 10FA5EF3574F
1947   E307 E1 CF       
1948   E309                                     ;BEQR_(BIT#0F || (((!BIT#17) && BIT#1E) || (LAMP#10(1_target) P $F0,$10))) to sw_notused
1949   E309                   			BITON_($54)				;Turn ON: Bit#14
1949   E309             
1949   E309 10 54       
1950   E30B                   			BEQA_($41,mb_start)		;BEQR_BIT#01 to mb_start
1950   E30B 58 41       
1950   E30D E4 35       
1951   E30F                   			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1951   E30F             
1951   E30F             
1951   E30F             
1951   E30F 5B F4 2B FF 
1951   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1951   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1951   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1951   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1951   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1951   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1951   E313             
1952   E313                   			      BITOFF_($2B)			;Turn OFF: Lamp#2B(extra_kick)
1952   E313             
1952   E313 11 2B       
1953   E315                   			      REMTHREADS_($F8,$14)		;Remove Multiple Threads Based on Priority
1953   E315 55 F8 14    
1954   E318                   			      BITON_($53)				;Turn ON: Bit#13
1954   E318             
1954   E318 10 53       
1955   E31A                   			ENDIF_
1955   E31A             
1955   E31A             
1955   E31A             
1955   E31A             
1955   E31A             
1955   E31A~                  			ENDIF_
1955   E31A~                  			ENDIF_
1955   E31A             
1955   E31A~                  			ENDIF_
1955   E31A~                  			ENDIF_
1955   E31A             
1955   E312             
1955   E312 07          
1955   E313             
1955   E313             
1955   E313~                  			ENDIF_
1955   E313~                  			ENDIF_
1955   E313~                  			ENDIF_
1955   E313~                  			ENDIF_
1955   E313~                  			ENDIF_
1955   E313             
1955   E31A             
1955   E31A~                  			ENDIF_
1955   E31A~                  			ENDIF_
1955   E31A             
1956   E31A             eject_common	      PRI_($15)				;Priority=#15
1956   E31A 52 15       
1957   E31C                   			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31C 43          
1957   E31D             
1957   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31D             
1957   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31D             
1957   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31D             
1957   E31D             
1957   E31D 0B          
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1957   E31E             
1957   E31E             
1957   E31E             
1957   E31E             
1958   E31E                   			IFNER_($F8,$08)		      ;BEQR_SW#08
1958   E31E             
1958   E31E             
1958   E31E             
1958   E31E 5A F8 08 FF 
1958   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1958   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1958   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1958   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1958   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1958   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1958   E322             
1959   E322                         			BITON2_($17)			;Turn ON: Lamp#17(mini_pf)
1959   E322             
1959   E322 20 17       
1960   E324                         			BITON2_($1F)			;Turn ON: Lamp#1F(mini_pf)
1960   E324             
1960   E324 20 1F       
1961   E326                         			BITON2_($25)			;Turn ON: Lamp#25(mini_pf)
1961   E326             
1961   E326 20 25       
1962   E328                         			BITON2_($2E)			;Turn ON: Lamp#2E(mini_pf)
1962   E328             
1962   E328 20 2E       
1963   E32A                         			BITON2_($2F)			;Turn ON: Lamp#2F(mini_pf)
1963   E32A             
1963   E32A 20 2F       
1964   E32C                         			BITON2_($2B)			;Turn ON: Lamp#2B(extra_kick)
1964   E32C             
1964   E32C 20 2B       
1965   E32E                         			BITOFF2_($6B)			;Turn OFF: Lamp#2B(extra_kick)
1965   E32E             
1965   E32E 21 6B       
1966   E330                         			BITON_($64)				;Turn ON: Bit#24
1966   E330             
1966   E330 10 64       
1967   E332                         		ELSE_			
1967   E332             
1967   E332             
1967   E332             
1967   E332             
1967   E321             
1967   E321             
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321             
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321~                        		ELSE_			
1967   E321             
1967   E321             
1967   E321 12          
1967   E332             
1967   E332             
1967   E332~                        		ELSE_			
1967   E332~                        		ELSE_			
1967   E332             
1967   E332~                        		ELSE_			
1967   E332~                        		ELSE_			
1967   E332             
1967   E332             
1967   E332 80          
1967   E333 00          
1967   E334             
1967   E334             
1967   E334             
1967   E334~                        		ELSE_			
1967   E334~                        		ELSE_			
1967   E334             
1967   E334~                        		ELSE_			
1967   E334~                        		ELSE_			
1967   E334             
1968   E334                   	      		JSR_(gi_off_inc)			
1968   E334 56          
1968   E335 DA 9D       
1969   E337                         			BE29_($08)				;Effect: Range #08
1969   E337             
1969   E337 29 08       
1970   E339                         			JSRD_(timer_inc)			
1970   E339 57          
1970   E33A DC 87       
1971   E33C                         			BE29_($42)				;Effect: Range #02
1971   E33C             
1971   E33C 29 42       
1972   E33E                         	      ENDIF_
1972   E33E             
1972   E33E             
1972   E33E             
1972   E33E             
1972   E33E             
1972   E33E~                        	      ENDIF_
1972   E33E~                        	      ENDIF_
1972   E33E             
1972   E33E~                        	      ENDIF_
1972   E33E~                        	      ENDIF_
1972   E33E             
1972   E333             
1972   E333 0A          
1972   E334             
1972   E334             
1972   E334~                        	      ENDIF_
1972   E334~                        	      ENDIF_
1972   E334~                        	      ENDIF_
1972   E334~                        	      ENDIF_
1972   E334~                        	      ENDIF_
1972   E334             
1972   E33E             
1972   E33E~                        	      ENDIF_
1972   E33E~                        	      ENDIF_
1972   E33E             
1973   E33E             gj_22     			EXE_
1973   E33E             
1973   E33E 44          
1974   E33F                   			      NEWTHREAD(minipf_thread)
1974   E33F CE E3 91    
1974   E342 BD EA C4    
1975   E345                   			EXEEND_
1975   E345             
1975   E345             
1975   E345             
1975   E345             
1975   E345~                  			EXEEND_
1975   E345~                  			EXEEND_
1975   E345             
1975   E33E             
1975   E33E 48          
1975   E33F             
1975   E345             
1975   E345~                  			EXEEND_
1975   E345~                  			EXEEND_
1975   E345             
1976   E345                   			SLEEP_(64)
1976   E345~                  			SLEEP_(64)
1976   E345~                  			SLEEP_(64)
1976   E345             
1976   E345 53 40       
1976   E347             
1977   E347                   			SOL_(minikick_on)         	;Turn ON Sol#20:mini_kicker
1977   E347 31 33       
1978   E349                   			SLEEP_(255)                   ;wait 4 seconds
1978   E349~                  			SLEEP_(255)                   ;wait 4 seconds
1978   E349~                  			SLEEP_(255)                   ;wait 4 seconds
1978   E349             
1978   E349 53 FF       
1978   E34B             
1979   E34B                   			SOL_(minikick_on_hard)        ;Turn ON Sol#20:mini_kicker
1979   E34B 31 53       
1980   E34D                   			SLEEP_(192)
1980   E34D~                  			SLEEP_(192)
1980   E34D~                  			SLEEP_(192)
1980   E34D             
1980   E34D 53 C0       
1980   E34F             
1981   E34F             gb_89 			BITOFF_($53)			;Turn OFF: Bit#13
1981   E34F             
1981   E34F 11 53       
1982   E351                   			REMTHREADS_($F8,$10)		;Remove Multiple Threads Based on Priority
1982   E351 55 F8 10    
1983   E354             gb_41 			JSRR_(minipf_done)			
1983   E354~            gb_41 			JSRR_(minipf_done)			
1983   E354~            gb_41 			JSRR_(minipf_done)			
1983   E354             
1983   E354~            gb_41 			JSRR_(minipf_done)			
1983   E354~            gb_41 			JSRR_(minipf_done)			
1983   E354             
1983   E354             
1983   E354 90          
1983   E355 21          
1984   E356             gb_24 			PRI_($17)				;Priority=#17
1984   E356 52 17       
1985   E358                   			SLEEP_(32)
1985   E358~                  			SLEEP_(32)
1985   E358~                  			SLEEP_(32)
1985   E358             
1985   E358 53 20       
1985   E35A             
1986   E35A                   			SSND_($0D)				;Sound #0D
1986   E35A             
1986   E35A ED          
1986   E35B~                  			SSND_($0D)				;Sound #0D
1986   E35B~                  			SSND_($0D)				;Sound #0D
1986   E35B~                  			SSND_($0D)				;Sound #0D
1986   E35B             
1987   E35B                   			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1987   E35B             
1987   E35B             
1987   E35B             
1987   E35B 5BFA5FF808FD
1987   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1987   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1987   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1987   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1987   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1987   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1987   E361             
1988   E361                         			BITOFF_($57)			;Turn OFF: Bit#17
1988   E361             
1988   E361 11 57       
1989   E363                         			JMPR_(mb_restart)
1989   E363~                        			JMPR_(mb_restart)
1989   E363~                        			JMPR_(mb_restart)
1989   E363             
1989   E363~                        			JMPR_(mb_restart)
1989   E363~                        			JMPR_(mb_restart)
1989   E363             
1989   E363             
1989   E363 81          
1989   E364 0D          
1990   E365                         	      ENDIF_	
1990   E365             
1990   E365             
1990   E365             
1990   E365             
1990   E365             
1990   E365~                        	      ENDIF_	
1990   E365~                        	      ENDIF_	
1990   E365             
1990   E365~                        	      ENDIF_	
1990   E365~                        	      ENDIF_	
1990   E365             
1990   E360             
1990   E360 04          
1990   E361             
1990   E361             
1990   E361~                        	      ENDIF_	
1990   E361~                        	      ENDIF_	
1990   E361~                        	      ENDIF_	
1990   E361~                        	      ENDIF_	
1990   E361~                        	      ENDIF_	
1990   E361             
1990   E365             
1990   E365~                        	      ENDIF_	
1990   E365~                        	      ENDIF_	
1990   E365             
1991   E365                    			SETRAM_(rega,lowereject_on)    
1991   E365~                   			SETRAM_(rega,lowereject_on)    
1991   E365~                   			SETRAM_(rega,lowereject_on)    
1991   E365             
1991   E365 C0 46       
1992   E367                   			IFNER_($54)			      ;BEQR_BIT#14 
1992   E367             
1992   E367             
1992   E367             
1992   E367 5A 54 00    
1992   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1992   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1992   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1992   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1992   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1992   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1992   E36A             
1993   E36A             gb_1C 			      SETRAM_(rega,uppereject_on)
1993   E36A~            gb_1C 			      SETRAM_(rega,uppereject_on)
1993   E36A~            gb_1C 			      SETRAM_(rega,uppereject_on)
1993   E36A             
1993   E36A C0 47       
1994   E36C                                     ENDIF_
1994   E36C             
1994   E36C             
1994   E36C             
1994   E36C             
1994   E36C             
1994   E36C~                                    ENDIF_
1994   E36C~                                    ENDIF_
1994   E36C             
1994   E36C~                                    ENDIF_
1994   E36C~                                    ENDIF_
1994   E36C             
1994   E369             
1994   E369 02          
1994   E36A             
1994   E36A             
1994   E36A~                                    ENDIF_
1994   E36A~                                    ENDIF_
1994   E36A~                                    ENDIF_
1994   E36A~                                    ENDIF_
1994   E36A~                                    ENDIF_
1994   E36A             
1994   E36C             
1994   E36C~                                    ENDIF_
1994   E36C~                                    ENDIF_
1994   E36C             
1995   E36C                               ENDIF_	
1995   E36C             
1995   E36C             
1995   E36C             
1995   E36C             
1995   E36C             
1995   E36C~                              ENDIF_	
1995   E36C~                              ENDIF_	
1995   E36C             
1995   E36C~                              ENDIF_	
1995   E36C~                              ENDIF_	
1995   E36C             
1995   E2FA             
1995   E2FA 71          
1995   E2FB             
1995   E2FB             
1995   E2FB~                              ENDIF_	
1995   E2FB~                              ENDIF_	
1995   E2FB~                              ENDIF_	
1995   E2FB~                              ENDIF_	
1995   E2FB~                              ENDIF_	
1995   E2FB             
1995   E36C             
1995   E36C~                              ENDIF_	
1995   E36C~                              ENDIF_	
1995   E36C             
1996   E36C             			JSRD_(solbuf)			
1996   E36C 57          
1996   E36D EB 23       
1997   E36F             			BITOFF_($54)			;Turn OFF: Bit#14
1997   E36F             
1997   E36F 11 54       
1998   E371             			SLEEP_(32)
1998   E371~            			SLEEP_(32)
1998   E371~            			SLEEP_(32)
1998   E371             
1998   E371 53 20       
1998   E373             
1999   E373 5E A5 26    			SWCLR_($A5),($26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
2000   E376             gb_0B			KILL_					;Remove This Thread
2000   E376 03          
2001   E377             
2002   E377             
2003   E377             minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2003   E377             
2003   E377             
2003   E377             
2003   E377 5B 64 00    
2003   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2003   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2003   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2003   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2003   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2003   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
2003   E37A             
2004   E37A                   			BITOFF2_($2B)			;Turn OFF: Lamp#2B(extra_kick)
2004   E37A             
2004   E37A 21 2B       
2005   E37C                   			BITOFF2_($17)			;Turn OFF: Lamp#17(mini_pf)
2005   E37C             
2005   E37C 21 17       
2006   E37E                   			BITOFF2_($1F)			;Turn OFF: Lamp#1F(mini_pf)
2006   E37E             
2006   E37E 21 1F       
2007   E380                   			BITOFF2_($25)			;Turn OFF: Lamp#25(mini_pf)
2007   E380             
2007   E380 21 25       
2008   E382                   			BITOFF2_($2E)			;Turn OFF: Lamp#2E(mini_pf)
2008   E382             
2008   E382 21 2E       
2009   E384                   			BITOFF2_($2F)			;Turn OFF: Lamp#2F(mini_pf)
2009   E384             
2009   E384 21 2F       
2010   E386                   		ELSE_				
2010   E386             
2010   E386             
2010   E386             
2010   E386             
2010   E379             
2010   E379             
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379             
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379~                  		ELSE_				
2010   E379             
2010   E379             
2010   E379 0E          
2010   E386             
2010   E386             
2010   E386~                  		ELSE_				
2010   E386~                  		ELSE_				
2010   E386             
2010   E386~                  		ELSE_				
2010   E386~                  		ELSE_				
2010   E386             
2010   E386             
2010   E386 80          
2010   E387 00          
2010   E388             
2010   E388             
2010   E388             
2010   E388~                  		ELSE_				
2010   E388~                  		ELSE_				
2010   E388             
2010   E388~                  		ELSE_				
2010   E388~                  		ELSE_				
2010   E388             
2011   E388             			      JSRD_(timer_dec)			
2011   E388 57          
2011   E389 DC 94       
2012   E38B             			      JSR_(gi_on_dec)
2012   E38B 56          
2012   E38C DA 8E       
2013   E38E             		      ENDIF_			
2013   E38E             
2013   E38E             
2013   E38E             
2013   E38E             
2013   E38E             
2013   E38E~            		      ENDIF_			
2013   E38E~            		      ENDIF_			
2013   E38E             
2013   E38E~            		      ENDIF_			
2013   E38E~            		      ENDIF_			
2013   E38E             
2013   E387             
2013   E387 06          
2013   E388             
2013   E388             
2013   E388~            		      ENDIF_			
2013   E388~            		      ENDIF_			
2013   E388~            		      ENDIF_			
2013   E388~            		      ENDIF_			
2013   E388~            		      ENDIF_			
2013   E388             
2013   E38E             
2013   E38E~            		      ENDIF_			
2013   E38E~            		      ENDIF_			
2013   E38E             
2014   E38E                   		BITOFF_($64)			;Turn OFF: Bit#24
2014   E38E             
2014   E38E 11 64       
2015   E390             			MRTS_					;Macro RTS, Save MRA,MRB
2015   E390 02          
2016   E391             
2017   E391 BD F3 AB    minipf_thread	jsr	macro_start
2018   E394             			PRI_($15)				;Priority=#15
2018   E394 52 15       
2019   E396             minipf_loop		BITINV2_($57)			;Toggle: Lamp#17(mini_pf)
2019   E396             
2019   E396 22 57       
2020   E398             			BITINV2_($5F)			;Toggle: Lamp#1F(mini_pf)
2020   E398             
2020   E398 22 5F       
2021   E39A             			BITINV2_($65)			;Toggle: Lamp#25(mini_pf)
2021   E39A             
2021   E39A 22 65       
2022   E39C             			BITINV2_($6E)			;Toggle: Lamp#2E(mini_pf)
2022   E39C             
2022   E39C 22 6E       
2023   E39E             			BITINV2_($6F)			;Toggle: Lamp#2F(mini_pf)
2023   E39E             
2023   E39E 22 6F       
2024   E3A0             			SSND_($05)				;Sound #05
2024   E3A0             
2024   E3A0 E5          
2024   E3A1~            			SSND_($05)				;Sound #05
2024   E3A1~            			SSND_($05)				;Sound #05
2024   E3A1~            			SSND_($05)				;Sound #05
2024   E3A1             
2025   E3A1             			SLEEP_(2)
2025   E3A1             
2025   E3A1 72          
2025   E3A2~            			SLEEP_(2)
2025   E3A2~            			SLEEP_(2)
2025   E3A2             
2026   E3A2             			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2026   E3A2             
2026   E3A2 5A F0 AA    
2026   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2026   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2026   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2026   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2026   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2026   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2026   E3A5             
2027   E3A5             			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2027   E3A5             
2027   E3A5 5B 53 EE    
2027   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2027   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2027   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2027   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2027   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2027   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2027   E3A8             
2028   E3A8             			BITINV2_($6B)			;Toggle: Lamp#2B(extra_kick)
2028   E3A8             
2028   E3A8 22 6B       
2029   E3AA             			JMPR_(minipf_loop)	
2029   E3AA~            			JMPR_(minipf_loop)	
2029   E3AA~            			JMPR_(minipf_loop)	
2029   E3AA             
2029   E3AA~            			JMPR_(minipf_loop)	
2029   E3AA~            			JMPR_(minipf_loop)	
2029   E3AA             
2029   E3AA             
2029   E3AA 8F          
2029   E3AB EA          
2030   E3AC             					
2031   E3AC             sw_L_rollover
2032   E3AC             sw_O_rollover
2033   E3AC             sw_R_rollover
2034   E3AC             sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2034   E3AC             
2034   E3AC 5BFEF2F210C4
2034   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2034   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2034   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2034   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2034   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2034   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2034   E3B2             
2035   E3B2             			BEGIN_
2035   E3B2             
2036   E3B2             				SLEEP_(1)
2036   E3B2             
2036   E3B2 71          
2036   E3B3~            				SLEEP_(1)
2036   E3B3~            				SLEEP_(1)
2036   E3B3             
2037   E3B3             			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B3             
2037   E3B3 5B F7 17 FF 
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7             
2037   E3B7             
2037   E3B7             
2037   E3B7             
2037   E3B7             
2037   E3B7             
2037   E3B7             
2037   E3B6             
2037   E3B6 FB          
2037   E3B7             
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7             
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2037   E3B7             
2038   E3B7             			POINTS_(5,1000)			;5000 Points
2038   E3B7 42          
2038   E3B8             
2038   E3B8~            			POINTS_(5,1000)			;5000 Points
2038   E3B8~            			POINTS_(5,1000)			;5000 Points
2038   E3B8             
2038   E3B8~            			POINTS_(5,1000)			;5000 Points
2038   E3B8~            			POINTS_(5,1000)			;5000 Points
2038   E3B8             
2038   E3B8~            			POINTS_(5,1000)			;5000 Points
2038   E3B8~            			POINTS_(5,1000)			;5000 Points
2038   E3B8             
2038   E3B8             
2038   E3B8 2B          
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9~            			POINTS_(5,1000)			;5000 Points
2038   E3B9             
2038   E3B9             
2038   E3B9             
2038   E3B9             
2039   E3B9             			REMTHREADS_($F8,$10)		;Remove Multiple Threads Based on Priority
2039   E3B9 55 F8 10    
2040   E3BC             			PRI_($17)				;Priority=#17
2040   E3BC 52 17       
2041   E3BE             			EXE_
2041   E3BE             
2041   E3BE 44          
2042   E3BF 16          			      tab	
2043   E3C0 50          			      negb	
2044   E3C1 CB 10       			      addb	#$10
2045   E3C3             			EXEEND_
2045   E3C3             
2045   E3C3             
2045   E3C3             
2045   E3C3             
2045   E3C3~            			EXEEND_
2045   E3C3~            			EXEEND_
2045   E3C3             
2045   E3BE             
2045   E3BE 46          
2045   E3BF             
2045   E3C3             
2045   E3C3~            			EXEEND_
2045   E3C3~            			EXEEND_
2045   E3C3             
2046   E3C3             			JSR_(add_bonus_dly)				
2046   E3C3 56          
2046   E3C4 DC F5       
2047   E3C6             			IFNER_($E0)		      	;BEQR_RAM$00 
2047   E3C6             
2047   E3C6             
2047   E3C6             
2047   E3C6 5A E0 00    
2047   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2047   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2047   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2047   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2047   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2047   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2047   E3C9             
2048   E3C9                   			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2048   E3C9             
2048   E3C9 14 00       
2049   E3CB                   			JSRR_(gatlin_sound)			
2049   E3CB~                  			JSRR_(gatlin_sound)			
2049   E3CB~                  			JSRR_(gatlin_sound)			
2049   E3CB             
2049   E3CB~                  			JSRR_(gatlin_sound)			
2049   E3CB~                  			JSRR_(gatlin_sound)			
2049   E3CB             
2049   E3CB             
2049   E3CB 90          
2049   E3CC 32          
2050   E3CD                   			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2050   E3CD             
2050   E3CD             
2050   E3CD             
2050   E3CD 5B F6 02 FF 
2050   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2050   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2050   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2050   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2050   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2050   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2050   E3D1             
2051   E3D1                         			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2051   E3D1             
2051   E3D1             
2051   E3D1             
2051   E3D1 5A 1B 00    
2051   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2051   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2051   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2051   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2051   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2051   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2051   E3D4             
2052   E3D4                               			JSRR_(minipf_done)			
2052   E3D4~                              			JSRR_(minipf_done)			
2052   E3D4~                              			JSRR_(minipf_done)			
2052   E3D4             
2052   E3D4~                              			JSRR_(minipf_done)			
2052   E3D4~                              			JSRR_(minipf_done)			
2052   E3D4             
2052   E3D4             
2052   E3D4 9F          
2052   E3D5 A1          
2053   E3D6                               			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2053   E3D6             
2053   E3D6 5B F0 5C    
2053   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2053   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2053   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2053   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2053   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2053   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2053   E3D9             
2054   E3D9                               			BITON_($41)				;Turn ON: Bit#01
2054   E3D9             
2054   E3D9 10 41       
2055   E3DB 5E A5 26                      			SWCLR_($A5),($26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
2056   E3DE                               			KILL_					;Remove This Thread
2056   E3DE 03          
2057   E3DF                               	      ENDIF_
2057   E3DF             
2057   E3DF             
2057   E3DF             
2057   E3DF             
2057   E3DF             
2057   E3DF~                              	      ENDIF_
2057   E3DF~                              	      ENDIF_
2057   E3DF             
2057   E3DF~                              	      ENDIF_
2057   E3DF~                              	      ENDIF_
2057   E3DF             
2057   E3D3             
2057   E3D3 0B          
2057   E3D4             
2057   E3D4             
2057   E3D4~                              	      ENDIF_
2057   E3D4~                              	      ENDIF_
2057   E3D4~                              	      ENDIF_
2057   E3D4~                              	      ENDIF_
2057   E3D4~                              	      ENDIF_
2057   E3D4             
2057   E3DF             
2057   E3DF~                              	      ENDIF_
2057   E3DF~                              	      ENDIF_
2057   E3DF             
2058   E3DF                         			SPEC_					;Award Special
2058   E3DF 05          
2059   E3E0                         			BE19_($02)				;Effect: Range #02
2059   E3E0             
2059   E3E0 19 02       
2060   E3E2                         		ENDIF_
2060   E3E2             
2060   E3E2             
2060   E3E2             
2060   E3E2             
2060   E3E2             
2060   E3E2~                        		ENDIF_
2060   E3E2~                        		ENDIF_
2060   E3E2             
2060   E3E2~                        		ENDIF_
2060   E3E2~                        		ENDIF_
2060   E3E2             
2060   E3D0             
2060   E3D0 11          
2060   E3D1             
2060   E3D1             
2060   E3D1~                        		ENDIF_
2060   E3D1~                        		ENDIF_
2060   E3D1~                        		ENDIF_
2060   E3D1~                        		ENDIF_
2060   E3D1~                        		ENDIF_
2060   E3D1             
2060   E3E2             
2060   E3E2~                        		ENDIF_
2060   E3E2~                        		ENDIF_
2060   E3E2             
2061   E3E2             gb_0E 			BNEA_($53,gb_41)		      ;BNEA_BIT#13 to gb_41
2061   E3E2 59 53       
2061   E3E4 E3 54       
2062   E3E6                   			BITOFF_($53)			;Turn OFF: Bit#13
2062   E3E6             
2062   E3E6 11 53       
2063   E3E8                   			SLEEP_(32)
2063   E3E8~                  			SLEEP_(32)
2063   E3E8~                  			SLEEP_(32)
2063   E3E8             
2063   E3E8 53 20       
2063   E3EA             
2064   E3EA                   			JMPR_(gj_22)
2064   E3EA~                  			JMPR_(gj_22)
2064   E3EA~                  			JMPR_(gj_22)
2064   E3EA             
2064   E3EA~                  			JMPR_(gj_22)
2064   E3EA~                  			JMPR_(gj_22)
2064   E3EA             
2064   E3EA             
2064   E3EA 8F          
2064   E3EB 52          
2065   E3EC                   		ENDIF_
2065   E3EC             
2065   E3EC             
2065   E3EC             
2065   E3EC             
2065   E3EC             
2065   E3EC~                  		ENDIF_
2065   E3EC~                  		ENDIF_
2065   E3EC             
2065   E3EC~                  		ENDIF_
2065   E3EC~                  		ENDIF_
2065   E3EC             
2065   E3C8             
2065   E3C8 23          
2065   E3C9             
2065   E3C9             
2065   E3C9~                  		ENDIF_
2065   E3C9~                  		ENDIF_
2065   E3C9~                  		ENDIF_
2065   E3C9~                  		ENDIF_
2065   E3C9~                  		ENDIF_
2065   E3C9             
2065   E3EC             
2065   E3EC~                  		ENDIF_
2065   E3EC~                  		ENDIF_
2065   E3EC             
2066   E3EC                               ;mini playfield buzzer						
2067   E3EC                   		SSND_($02)				;Credit Sound
2067   E3EC             
2067   E3EC E2          
2067   E3ED~                  		SSND_($02)				;Credit Sound
2067   E3ED~                  		SSND_($02)				;Credit Sound
2067   E3ED~                  		SSND_($02)				;Credit Sound
2067   E3ED             
2068   E3ED             			JSR_(buzz_on_inc)				
2068   E3ED 56          
2068   E3EE DC C1       
2069   E3F0             			SLEEP_(12)
2069   E3F0             
2069   E3F0 7C          
2069   E3F1~            			SLEEP_(12)
2069   E3F1~            			SLEEP_(12)
2069   E3F1             
2070   E3F1             			JSR_(buzz_off_dec)				
2070   E3F1 56          
2070   E3F2 DC CD       
2071   E3F4             			SLEEP_(20)
2071   E3F4~            			SLEEP_(20)
2071   E3F4~            			SLEEP_(20)
2071   E3F4             
2071   E3F4 53 14       
2071   E3F6             
2072   E3F6             			JSR_(buzz_on_inc)				
2072   E3F6 56          
2072   E3F7 DC C1       
2073   E3F9             			SLEEP_(12)
2073   E3F9             
2073   E3F9 7C          
2073   E3FA~            			SLEEP_(12)
2073   E3FA~            			SLEEP_(12)
2073   E3FA             
2074   E3FA             			JSR_(buzz_off_dec)				
2074   E3FA 56          
2074   E3FB DC CD       
2075   E3FD             			JMPR_(gb_0E)	
2075   E3FD~            			JMPR_(gb_0E)	
2075   E3FD~            			JMPR_(gb_0E)	
2075   E3FD             
2075   E3FD~            			JMPR_(gb_0E)	
2075   E3FD~            			JMPR_(gb_0E)	
2075   E3FD             
2075   E3FD             
2075   E3FD 8F          
2075   E3FE E3          
2076   E3FF             
2077   E3FF             ;*************************************************************************
2078   E3FF             ;* Gatlin Gun Sound Effect
2079   E3FF             ;*************************************************************************					
2080   E3FF             gatlin_sound	BITONP2_(rega)			;Turn ON Lamp/Bit @RAM:00
2080   E3FF             
2080   E3FF 24 00       
2081   E401             			ADDRAM_(rega,$40)			;RAM$00+=$40
2081   E401~            			ADDRAM_(rega,$40)			;RAM$00+=$40
2081   E401~            			ADDRAM_(rega,$40)			;RAM$00+=$40
2081   E401             
2081   E401 B0 40       
2082   E403             			SETRAM_(regb,$0C)			;RAM$01=$0C
2082   E403~            			SETRAM_(regb,$0C)			;RAM$01=$0C
2082   E403~            			SETRAM_(regb,$0C)			;RAM$01=$0C
2082   E403             
2082   E403 C1 0C       
2083   E405             			BEGIN_
2083   E405             
2084   E405             				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2084   E405             
2084   E405             
2084   E405             
2084   E405 5AFDE064FE  
2084   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2084   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2084   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2084   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2084   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2084   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2084   E40A             
2085   E40A             	      			SSND_($02)				;Sound #02
2085   E40A             
2085   E40A E2          
2085   E40B~            	      			SSND_($02)				;Sound #02
2085   E40B~            	      			SSND_($02)				;Sound #02
2085   E40B~            	      			SSND_($02)				;Sound #02
2085   E40B             
2086   E40B             	      		ELSE_			
2086   E40B             
2086   E40B             
2086   E40B             
2086   E40B             
2086   E409             
2086   E409             
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409             
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409~            	      		ELSE_			
2086   E409             
2086   E409             
2086   E409 03          
2086   E40B             
2086   E40B             
2086   E40B~            	      		ELSE_			
2086   E40B~            	      		ELSE_			
2086   E40B             
2086   E40B~            	      		ELSE_			
2086   E40B~            	      		ELSE_			
2086   E40B             
2086   E40B             
2086   E40B 80          
2086   E40C 00          
2086   E40D             
2086   E40D             
2086   E40D             
2086   E40D~            	      		ELSE_			
2086   E40D~            	      		ELSE_			
2086   E40D             
2086   E40D~            	      		ELSE_			
2086   E40D~            	      		ELSE_			
2086   E40D             
2087   E40D             					SSND_($0B)				;Sound #0B
2087   E40D             
2087   E40D EB          
2087   E40E~            					SSND_($0B)				;Sound #0B
2087   E40E~            					SSND_($0B)				;Sound #0B
2087   E40E~            					SSND_($0B)				;Sound #0B
2087   E40E             
2088   E40E             				ENDIF_
2088   E40E             
2088   E40E             
2088   E40E             
2088   E40E             
2088   E40E             
2088   E40E~            				ENDIF_
2088   E40E~            				ENDIF_
2088   E40E             
2088   E40E~            				ENDIF_
2088   E40E~            				ENDIF_
2088   E40E             
2088   E40C             
2088   E40C 01          
2088   E40D             
2088   E40D             
2088   E40D~            				ENDIF_
2088   E40D~            				ENDIF_
2088   E40D~            				ENDIF_
2088   E40D~            				ENDIF_
2088   E40D~            				ENDIF_
2088   E40D             
2088   E40E             
2088   E40E~            				ENDIF_
2088   E40E~            				ENDIF_
2088   E40E             
2089   E40E             				BITINVP2_(rega)			;Toggle Lamp/Bit @RAM:00
2089   E40E             
2089   E40E 26 00       
2090   E410             				SLEEP_(4)
2090   E410             
2090   E410 74          
2090   E411~            				SLEEP_(4)
2090   E411~            				SLEEP_(4)
2090   E411             
2091   E411             				ADDRAM_(regb,-1)			;RAM$01-=1
2091   E411~            				ADDRAM_(regb,-1)			;RAM$01-=1
2091   E411~            				ADDRAM_(regb,-1)			;RAM$01-=1
2091   E411             
2091   E411 B1 FF       
2092   E413             			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E413             
2092   E413 5BFCE100FE  
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418             
2092   E418             
2092   E418             
2092   E418             
2092   E418             
2092   E418             
2092   E418             
2092   E417             
2092   E417 ED          
2092   E418             
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418             
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2092   E418             
2093   E418             			ADDRAM_(rega,$C0)			;RAM$00+=$C0
2093   E418~            			ADDRAM_(rega,$C0)			;RAM$00+=$C0
2093   E418~            			ADDRAM_(rega,$C0)			;RAM$00+=$C0
2093   E418             
2093   E418 B0 C0       
2094   E41A             			BITOFFP2_(rega)			;Turn OFF Lamp/Bit @RAM:00
2094   E41A             
2094   E41A 25 00       
2095   E41C             			MRTS_					;Macro RTS, Save MRA,MRB
2095   E41C 02          
2096   E41D             
2097   E41D             sw_upper_eject	BEQA_($FB,$F0,$F1,gb_1C)	;BEQR_(GAME || TILT) to gb_1C
2097   E41D 58 FB F0 F1 
2097   E421 E3 6A       
2098   E423             			BEQA_($FB,$FB,$FE,$F2,$F0,$10,$FA,$F3,$57,$5E,$4F,gb_0B)
2098   E423 58FBFBFEF2F0
2098   E429 10FAF3575E4F
2098   E42F E3 76       
2099   E431             			;BEQR_(BIT#0F || ((BIT#1E && (!BIT#17)) || (LAMP#10(1_target) P $F0,$10))) to gb_0B
2100   E431             			BNEA_($41,eject_common)		      ;BNEA_BIT#01 to eject_common
2100   E431 59 41       
2100   E433 E3 1A       
2101   E435             
2102   E435             ;*******************************************************
2103   E435             ;* Begin Multiball
2104   E435             ;*******************************************************			
2105   E435             mb_start		BITOFF_($41)			;Turn OFF: Bit#01
2105   E435             
2105   E435 11 41       
2106   E437             			BE19_($02,$0C)			;Effect: Range #02 Range #0C
2106   E437             
2106   E437 19 82 0C    
2107   E43A             			BITON_($DF,$9B,$D6,$5E)		;Turn ON: Bit#1F, Lamp#1B(special), Bit#16, Bit#1E
2107   E43A             
2107   E43A 10DF9BD65E  
2108   E43F             			EXE_
2108   E43F             
2108   E43F 44          
2109   E440 CE 01 2E    			      ldx	#aud_game1			;Times Multiball has been achieved
2110   E443 BD F7 7F    			      jsr	ptrx_plus_1
2111   E446             			EXEEND_
2111   E446             
2111   E446             
2111   E446             
2111   E446             
2111   E446~            			EXEEND_
2111   E446~            			EXEEND_
2111   E446             
2111   E43F             
2111   E43F 48          
2111   E440             
2111   E446             
2111   E446~            			EXEEND_
2111   E446~            			EXEEND_
2111   E446             
2112   E446             			EXE_
2112   E446             
2112   E446 44          
2113   E447 CE 01 95    			      ldx	#adj_gameadjust1		;Get Multiball Timer
2114   E44A BD EF 63    			      jsr	cmosinc_b
2115   E44D C1 15       			      cmpb	#$15
2116   E44F             			      ifcs
2116   E44F             
2116   E44F 24 FE       
2117   E451 C6 15       				      ldab	#$15
2118   E453             			      endif
2118   E453             
2118   E453             
2118   E453             
2118   E453             
2118   E453             
2118   E453~            			      endif
2118   E453~            			      endif
2118   E453             
2118   E453~            			      endif
2118   E453~            			      endif
2118   E453             
2118   E450             
2118   E450 02          
2118   E451             
2118   E451             
2118   E451~            			      endif
2118   E451~            			      endif
2118   E451~            			      endif
2118   E451             
2118   E453             
2118   E453~            			      endif
2118   E453~            			      endif
2118   E453             
2119   E453             			EXEEND_
2119   E453             
2119   E453             
2119   E453             
2119   E453             
2119   E453~            			EXEEND_
2119   E453~            			EXEEND_
2119   E453             
2119   E446             
2119   E446 4E          
2119   E447             
2119   E453             
2119   E453~            			EXEEND_
2119   E453~            			EXEEND_
2119   E453             
2120   E453             			RAMCPY_($0A,regb)
2120   E453             
2120   E453 51 A1       
2120   E455~            			RAMCPY_($0A,regb)
2120   E455~            			RAMCPY_($0A,regb)
2120   E455             
2121   E455             			BITOFF_($01)			;Turn OFF: Lamp#01(bip)
2121   E455             
2121   E455 11 01       
2122   E457             			BITFL_($06)				;Flash: Lamp#06(multiball_timer)
2122   E457             
2122   E457 13 06       
2123   E459             			IFEQR_($F8,$08)		      ;BNER_SW#08
2123   E459             
2123   E459             
2123   E459             
2123   E459 5B F8 08 FF 
2123   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2123   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2123   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2123   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2123   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2123   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2123   E45D             
2124   E45D                   			POINTS_(1,10)     	;10 Points
2124   E45D 42          
2124   E45E             
2124   E45E~                  			POINTS_(1,10)     	;10 Points
2124   E45E~                  			POINTS_(1,10)     	;10 Points
2124   E45E             
2124   E45E             
2124   E45E 09          
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F~                  			POINTS_(1,10)     	;10 Points
2124   E45F             
2124   E45F             
2125   E45F                   			JSR_(mb_fancy)			;Do the fancy fancy animation	
2125   E45F 56          
2125   E460 D9 F8       
2126   E462                   		ENDIF_
2126   E462             
2126   E462             
2126   E462             
2126   E462             
2126   E462             
2126   E462~                  		ENDIF_
2126   E462~                  		ENDIF_
2126   E462             
2126   E462~                  		ENDIF_
2126   E462~                  		ENDIF_
2126   E462             
2126   E45C             
2126   E45C 05          
2126   E45D             
2126   E45D             
2126   E45D~                  		ENDIF_
2126   E45D~                  		ENDIF_
2126   E45D~                  		ENDIF_
2126   E45D~                  		ENDIF_
2126   E45D~                  		ENDIF_
2126   E45D             
2126   E462             
2126   E462~                  		ENDIF_
2126   E462~                  		ENDIF_
2126   E462             
2127   E462             			SOL_(dtleft_on,dtright_on)	;Turn ON Sol#4:dt_left Sol#5:dt_right		
2127   E462 32 63 64    
2128   E465             			EXE_
2128   E465             
2128   E465 44          
2129   E466 96 5E       			      ldaa	dmask_p3
2130   E468 8A 80       			      oraa	#$80
2131   E46A 97 5E       			      staa	dmask_p3
2132   E46C 96 5F       			      ldaa	dmask_p4
2133   E46E 8A 80       			      oraa	#$80
2134   E470 97 5F       			      staa	dmask_p4
2135   E472             			EXEEND_
2135   E472             
2135   E472             
2135   E472             
2135   E472             
2135   E472~            			EXEEND_
2135   E472~            			EXEEND_
2135   E472             
2135   E465             
2135   E465 4E          
2135   E466             
2135   E472             
2135   E472~            			EXEEND_
2135   E472~            			EXEEND_
2135   E472             
2136   E472             ;***********************************************************
2137   E472             ;* NOTE: Falls through from above!
2138   E472             ;*
2139   E472             ;***********************************************************
2140   E472             mb_restart		PRI_($B1)				;Priority=#B1
2140   E472 52 B1       
2141   E474             			BITON_($5E)				;Turn ON: Bit#1E
2141   E474             
2141   E474 10 5E       
2142   E476             			BITOFF_($2C)			;Turn OFF: Lamp#2C(lock)
2142   E476             
2142   E476 11 2C       
2143   E478             			REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2143   E478 55 F8 60    
2144   E47B             			REMTHREADS_($F8,$B0)		;Remove Multiple Threads Based on Priority
2144   E47B 55 F8 B0    
2145   E47E             			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2145   E47E             
2145   E47E 5A F8 08 09 
2145   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2145   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2145   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2145   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2145   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2145   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2145   E482             
2146   E482             			EXE_
2146   E482             
2146   E482 44          
2147   E483             			      NEWTHREAD(pf_entry_cpu)
2147   E483 CE D9 25    
2147   E486 BD EA C4    
2148   E489             			EXEEND_
2148   E489             
2148   E489             
2148   E489             
2148   E489             
2148   E489~            			EXEEND_
2148   E489~            			EXEEND_
2148   E489             
2148   E482             
2148   E482 48          
2148   E483             
2148   E489             
2148   E489~            			EXEEND_
2148   E489~            			EXEEND_
2148   E489             
2149   E489             			JMPR_(mb_nopause)
2149   E489~            			JMPR_(mb_nopause)
2149   E489~            			JMPR_(mb_nopause)
2149   E489             
2149   E489~            			JMPR_(mb_nopause)
2149   E489~            			JMPR_(mb_nopause)
2149   E489             
2149   E489             
2149   E489 80          
2149   E48A 2A          
2150   E48B             ;******************************************************
2151   E48B             ;* Ball Drained, pause multiball timer for a bit...
2152   E48B             ;******************************************************						
2153   E48B             mb_pause		JSRR_(gj_1D)			
2153   E48B~            mb_pause		JSRR_(gj_1D)			
2153   E48B~            mb_pause		JSRR_(gj_1D)			
2153   E48B             
2153   E48B~            mb_pause		JSRR_(gj_1D)			
2153   E48B~            mb_pause		JSRR_(gj_1D)			
2153   E48B             
2153   E48B             
2153   E48B 90          
2153   E48C DF          
2154   E48D             			SOL_(trough_on)   		;Turn ON Sol#2:trough
2154   E48D 31 41       
2155   E48F             			EXE_
2155   E48F             
2155   E48F 44          
2156   E490 96 0A       			      ldaa	game_ram_a
2157   E492 97 59       			      staa	mbip_b1
2158   E494             			EXEEND_
2158   E494             
2158   E494             
2158   E494             
2158   E494             
2158   E494~            			EXEEND_
2158   E494~            			EXEEND_
2158   E494             
2158   E48F             
2158   E48F 46          
2158   E490             
2158   E494             
2158   E494~            			EXEEND_
2158   E494~            			EXEEND_
2158   E494             
2159   E494             			SLEEP_(80)
2159   E494~            			SLEEP_(80)
2159   E494~            			SLEEP_(80)
2159   E494             
2159   E494 53 50       
2159   E496             
2160   E496 5E 88 09    			SWCLR_($08,$09)			;Clear Sw#: $08(right_trough) $09(left_trough)
2161   E499             			SETRAM_(regb,$16)			;RAM$01=$16
2161   E499~            			SETRAM_(regb,$16)			;RAM$01=$16
2161   E499~            			SETRAM_(regb,$16)			;RAM$01=$16
2161   E499             
2161   E499 C1 16       
2162   E49B             mbp_loop		BEGIN_
2162   E49B             
2163   E49B             				EXE_
2163   E49B             
2163   E49B 44          
2164   E49C 86 FF       				      ldaa	#$FF
2165   E49E 97 59       				      staa	mbip_b1
2166   E4A0             				EXEEND_
2166   E4A0             
2166   E4A0             
2166   E4A0             
2166   E4A0             
2166   E4A0~            				EXEEND_
2166   E4A0~            				EXEEND_
2166   E4A0             
2166   E49B             
2166   E49B 46          
2166   E49C             
2166   E4A0             
2166   E4A0~            				EXEEND_
2166   E4A0~            				EXEEND_
2166   E4A0             
2167   E4A0 61          				SLEEPI_(regb)			;Delay RAM$01
2168   E4A1             				EXE_
2168   E4A1             
2168   E4A1 44          
2169   E4A2 96 0A       				      ldaa	game_ram_a
2170   E4A4 97 59       				      staa	mbip_b1
2171   E4A6             				EXEEND_
2171   E4A6             
2171   E4A6             
2171   E4A6             
2171   E4A6             
2171   E4A6~            				EXEEND_
2171   E4A6~            				EXEEND_
2171   E4A6             
2171   E4A1             
2171   E4A1 46          
2171   E4A2             
2171   E4A6             
2171   E4A6~            				EXEEND_
2171   E4A6~            				EXEEND_
2171   E4A6             
2172   E4A6             				SSND_($00)				;Sound #00
2172   E4A6             
2172   E4A6 E0          
2172   E4A7~            				SSND_($00)				;Sound #00
2172   E4A7~            				SSND_($00)				;Sound #00
2172   E4A7~            				SSND_($00)				;Sound #00
2172   E4A7             
2173   E4A7 61          				SLEEPI_(regb)			;Delay RAM$01
2174   E4A8             				EXE_
2174   E4A8             
2174   E4A8 44          
2175   E4A9 5A          				      decb	
2176   E4AA 96 D6       				      ldaa	flag_timer_bip
2177   E4AC             				EXEEND_
2177   E4AC             
2177   E4AC             
2177   E4AC             
2177   E4AC             
2177   E4AC~            				EXEEND_
2177   E4AC~            				EXEEND_
2177   E4AC             
2177   E4A8             
2177   E4A8 45          
2177   E4A9             
2177   E4AC             
2177   E4AC~            				EXEEND_
2177   E4AC~            				EXEEND_
2177   E4AC             
2178   E4AC             			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4AC             
2178   E4AC 5BFBFDE000FC
2178   E4B2 E100FA
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5             
2178   E4B5             
2178   E4B5             
2178   E4B5             
2178   E4B5             
2178   E4B5             
2178   E4B5             
2178   E4B4             
2178   E4B4 E6          
2178   E4B5             
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5             
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2178   E4B5             
2179   E4B5             mb_nopause		BEGIN_
2179   E4B5             
2180   E4B5             				SETRAM_(regb,$05)			;RAM$01=$05
2180   E4B5~            				SETRAM_(regb,$05)			;RAM$01=$05
2180   E4B5~            				SETRAM_(regb,$05)			;RAM$01=$05
2180   E4B5             
2180   E4B5 C1 05       
2181   E4B7             				SSND_($18)				;Sound #18
2181   E4B7             
2181   E4B7 F8          
2181   E4B8~            				SSND_($18)				;Sound #18
2181   E4B8~            				SSND_($18)				;Sound #18
2181   E4B8~            				SSND_($18)				;Sound #18
2181   E4B8             
2182   E4B8             mb_loop			PRI_($B1)				;Priority=#B1
2182   E4B8 52 B1       
2183   E4BA             				ADDRAM_(regb,-1)			;RAM$01-=1
2183   E4BA~            				ADDRAM_(regb,-1)			;RAM$01-=1
2183   E4BA~            				ADDRAM_(regb,-1)			;RAM$01-=1
2183   E4BA             
2183   E4BA B1 FF       
2184   E4BC             			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4BC             
2184   E4BC 5AFCE100FE  
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1             
2184   E4C1             
2184   E4C1             
2184   E4C1             
2184   E4C1             
2184   E4C1             
2184   E4C1             
2184   E4C0             
2184   E4C0 F4          
2184   E4C1             
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1             
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2184   E4C1             
2185   E4C1             			SSND_($00)				;Sound #00
2185   E4C1             
2185   E4C1 E0          
2185   E4C2~            			SSND_($00)				;Sound #00
2185   E4C2~            			SSND_($00)				;Sound #00
2185   E4C2~            			SSND_($00)				;Sound #00
2185   E4C2             
2186   E4C2             			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2186   E4C2             
2186   E4C2             
2186   E4C2             
2186   E4C2 5BFCE102FE  
2186   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2186   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2186   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2186   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2186   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2186   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2186   E4C7             
2187   E4C7             				SSND_($19)				;Sound #19
2187   E4C7             
2187   E4C7 F9          
2187   E4C8~            				SSND_($19)				;Sound #19
2187   E4C8~            				SSND_($19)				;Sound #19
2187   E4C8~            				SSND_($19)				;Sound #19
2187   E4C8             
2188   E4C8             			ENDIF_
2188   E4C8             
2188   E4C8             
2188   E4C8             
2188   E4C8             
2188   E4C8             
2188   E4C8~            			ENDIF_
2188   E4C8~            			ENDIF_
2188   E4C8             
2188   E4C8~            			ENDIF_
2188   E4C8~            			ENDIF_
2188   E4C8             
2188   E4C6             
2188   E4C6 01          
2188   E4C7             
2188   E4C7             
2188   E4C7~            			ENDIF_
2188   E4C7~            			ENDIF_
2188   E4C7~            			ENDIF_
2188   E4C7~            			ENDIF_
2188   E4C7~            			ENDIF_
2188   E4C7             
2188   E4C8             
2188   E4C8~            			ENDIF_
2188   E4C8~            			ENDIF_
2188   E4C8             
2189   E4C8             	            RAMCPY_(rega,$0A)
2189   E4C8             
2189   E4C8 51 0A       
2189   E4CA~            	            RAMCPY_(rega,$0A)
2189   E4CA~            	            RAMCPY_(rega,$0A)
2189   E4CA             
2190   E4CA             			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2190   E4CA             
2190   E4CA             
2190   E4CA             
2190   E4CA 5AFEF2F010FD
2190   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2190   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2190   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2190   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2190   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2190   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2190   E4D0             
2191   E4D0                   			EXE_
2191   E4D0             
2191   E4D0 44          
2192   E4D1 8B 99             			      adda	#$99
2193   E4D3 19                			      daa	
2194   E4D4 97 0A             			      staa	game_ram_a			;De-increment Mutiball Timer
2195   E4D6                   			EXEEND_
2195   E4D6             
2195   E4D6             
2195   E4D6             
2195   E4D6             
2195   E4D6~                  			EXEEND_
2195   E4D6~                  			EXEEND_
2195   E4D6             
2195   E4D0             
2195   E4D0 47          
2195   E4D1             
2195   E4D6             
2195   E4D6~                  			EXEEND_
2195   E4D6~                  			EXEEND_
2195   E4D6             
2196   E4D6                   		ENDIF_
2196   E4D6             
2196   E4D6             
2196   E4D6             
2196   E4D6             
2196   E4D6             
2196   E4D6~                  		ENDIF_
2196   E4D6~                  		ENDIF_
2196   E4D6             
2196   E4D6~                  		ENDIF_
2196   E4D6~                  		ENDIF_
2196   E4D6             
2196   E4CF             
2196   E4CF 06          
2196   E4D0             
2196   E4D0             
2196   E4D0~                  		ENDIF_
2196   E4D0~                  		ENDIF_
2196   E4D0~                  		ENDIF_
2196   E4D0~                  		ENDIF_
2196   E4D0~                  		ENDIF_
2196   E4D0             
2196   E4D6             
2196   E4D6~                  		ENDIF_
2196   E4D6~                  		ENDIF_
2196   E4D6             
2197   E4D6             			EXE_
2197   E4D6             
2197   E4D6 44          
2198   E4D7 97 59       			      staa	mbip_b1
2199   E4D9             			EXEEND_
2199   E4D9             
2199   E4D9             
2199   E4D9             
2199   E4D9             
2199   E4D9~            			EXEEND_
2199   E4D9~            			EXEEND_
2199   E4D9             
2199   E4D6             
2199   E4D6 44          
2199   E4D7             
2199   E4D9             
2199   E4D9~            			EXEEND_
2199   E4D9~            			EXEEND_
2199   E4D9             
2200   E4D9             			;are we out of time yet?
2201   E4D9             			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2201   E4D9             
2201   E4D9             
2201   E4D9             
2201   E4D9 5AFCEA00FE  
2201   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2201   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2201   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2201   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2201   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2201   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2201   E4DE             
2202   E4DE             			      ;no, keep going
2203   E4DE                   			SLEEP_(32)
2203   E4DE~                  			SLEEP_(32)
2203   E4DE~                  			SLEEP_(32)
2203   E4DE             
2203   E4DE 53 20       
2203   E4E0             
2204   E4E0                   			EXE_
2204   E4E0             
2204   E4E0 44          
2205   E4E1 86 FF             			      ldaa	#$FF
2206   E4E3 97 59             			      staa	mbip_b1
2207   E4E5                   			EXEEND_
2207   E4E5             
2207   E4E5             
2207   E4E5             
2207   E4E5             
2207   E4E5~                  			EXEEND_
2207   E4E5~                  			EXEEND_
2207   E4E5             
2207   E4E0             
2207   E4E0 46          
2207   E4E1             
2207   E4E5             
2207   E4E5~                  			EXEEND_
2207   E4E5~                  			EXEEND_
2207   E4E5             
2208   E4E5                   			SLEEP_(32)
2208   E4E5~                  			SLEEP_(32)
2208   E4E5~                  			SLEEP_(32)
2208   E4E5             
2208   E4E5 53 20       
2208   E4E7             
2209   E4E7                   			JMPR_(mb_loop)
2209   E4E7~                  			JMPR_(mb_loop)
2209   E4E7~                  			JMPR_(mb_loop)
2209   E4E7             
2209   E4E7~                  			JMPR_(mb_loop)
2209   E4E7~                  			JMPR_(mb_loop)
2209   E4E7             
2209   E4E7             
2209   E4E7 8F          
2209   E4E8 CF          
2210   E4E9             			ENDIF_	
2210   E4E9             
2210   E4E9             
2210   E4E9             
2210   E4E9             
2210   E4E9             
2210   E4E9~            			ENDIF_	
2210   E4E9~            			ENDIF_	
2210   E4E9             
2210   E4E9~            			ENDIF_	
2210   E4E9~            			ENDIF_	
2210   E4E9             
2210   E4DD             
2210   E4DD 0B          
2210   E4DE             
2210   E4DE             
2210   E4DE~            			ENDIF_	
2210   E4DE~            			ENDIF_	
2210   E4DE~            			ENDIF_	
2210   E4DE~            			ENDIF_	
2210   E4DE~            			ENDIF_	
2210   E4DE             
2210   E4E9             
2210   E4E9~            			ENDIF_	
2210   E4E9~            			ENDIF_	
2210   E4E9             
2211   E4E9             			;here if multiball timer has reached 0	
2212   E4E9             			IFEQR_($5E)			      ;BNER_BIT#1E
2212   E4E9             
2212   E4E9             
2212   E4E9             
2212   E4E9 5B 5E 00    
2212   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2212   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2212   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2212   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2212   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2212   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2212   E4EC             
2213   E4EC             			      BITON_($50)				;Turn ON: Bit#10
2213   E4EC             
2213   E4EC 10 50       
2214   E4EE             			ENDIF_
2214   E4EE             
2214   E4EE             
2214   E4EE             
2214   E4EE             
2214   E4EE             
2214   E4EE~            			ENDIF_
2214   E4EE~            			ENDIF_
2214   E4EE             
2214   E4EE~            			ENDIF_
2214   E4EE~            			ENDIF_
2214   E4EE             
2214   E4EB             
2214   E4EB 02          
2214   E4EC             
2214   E4EC             
2214   E4EC~            			ENDIF_
2214   E4EC~            			ENDIF_
2214   E4EC~            			ENDIF_
2214   E4EC~            			ENDIF_
2214   E4EC~            			ENDIF_
2214   E4EC             
2214   E4EE             
2214   E4EE~            			ENDIF_
2214   E4EE~            			ENDIF_
2214   E4EE             
2215   E4EE             			JSRR_(mb_end_disp)			
2215   E4EE~            			JSRR_(mb_end_disp)			
2215   E4EE~            			JSRR_(mb_end_disp)			
2215   E4EE             
2215   E4EE~            			JSRR_(mb_end_disp)			
2215   E4EE~            			JSRR_(mb_end_disp)			
2215   E4EE             
2215   E4EE             
2215   E4EE 90          
2215   E4EF 13          
2216   E4F0             			JSRR_(reset_dt)			
2216   E4F0~            			JSRR_(reset_dt)			
2216   E4F0~            			JSRR_(reset_dt)			
2216   E4F0             
2216   E4F0~            			JSRR_(reset_dt)			
2216   E4F0~            			JSRR_(reset_dt)			
2216   E4F0             
2216   E4F0             
2216   E4F0 90          
2216   E4F1 91          
2217   E4F2             			IFEQR_($F8,$08)		      ;BNER_SW#08
2217   E4F2             
2217   E4F2             
2217   E4F2             
2217   E4F2 5B F8 08 FF 
2217   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2217   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2217   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2217   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2217   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2217   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2217   E4F6             
2218   E4F6             			      JSRR_(add_drainshield)
2218   E4F6~            			      JSRR_(add_drainshield)
2218   E4F6~            			      JSRR_(add_drainshield)
2218   E4F6             
2218   E4F6~            			      JSRR_(add_drainshield)
2218   E4F6~            			      JSRR_(add_drainshield)
2218   E4F6             
2218   E4F6             
2218   E4F6 9D          
2218   E4F7 2B          
2219   E4F8             			ENDIF_			
2219   E4F8             
2219   E4F8             
2219   E4F8             
2219   E4F8             
2219   E4F8             
2219   E4F8~            			ENDIF_			
2219   E4F8~            			ENDIF_			
2219   E4F8             
2219   E4F8~            			ENDIF_			
2219   E4F8~            			ENDIF_			
2219   E4F8             
2219   E4F5             
2219   E4F5 02          
2219   E4F6             
2219   E4F6             
2219   E4F6~            			ENDIF_			
2219   E4F6~            			ENDIF_			
2219   E4F6~            			ENDIF_			
2219   E4F6~            			ENDIF_			
2219   E4F6~            			ENDIF_			
2219   E4F6             
2219   E4F8             
2219   E4F8~            			ENDIF_			
2219   E4F8~            			ENDIF_			
2219   E4F8             
2220   E4F8             			PRI_($08)				;Priority=#08
2220   E4F8 52 08       
2221   E4FA             			JSR_(buzz_on_inc)				
2221   E4FA 56          
2221   E4FB DC C1       
2222   E4FD             			SLEEP_(128)
2222   E4FD~            			SLEEP_(128)
2222   E4FD~            			SLEEP_(128)
2222   E4FD             
2222   E4FD 53 80       
2222   E4FF             
2223   E4FF             			JSR_(buzz_off_dec)				
2223   E4FF 56          
2223   E500 DC CD       
2224   E502             			KILL_					;Remove This Thread
2224   E502 03          
2225   E503             
2226   E503             ;*****************************************************************
2227   E503             ;* This subroutine takes care of setting the multiball mode lamps
2228   E503             ;* back to normal and putting the player score masks back as well.
2229   E503             ;*****************************************************************
2230   E503             mb_end_disp		BITOFF_($DF,$DE,$9B,$86,$2C)	;Turn OFF: Bit#1F, Bit#1E, Lamp#1B(special), Lamp#06(multiball_timer), Lamp#2C(lock)
2230   E503             
2230   E503 11DFDE9B862C
2231   E509             			BITON_($01)				;Turn ON: Lamp#01(bip)
2231   E509             
2231   E509 10 01       
2232   E50B             			REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2232   E50B 55 F8 60    
2233   E50E             			BE19_($02)				;Effect: Range #02
2233   E50E             
2233   E50E 19 02       
2234   E510             			EXE_
2234   E510             
2234   E510 44          
2235   E511 96 5E       			      ldaa	dmask_p3
2236   E513 84 7F       			      anda	#$7F
2237   E515 97 5E       			      staa	dmask_p3
2238   E517 96 5F       			      ldaa	dmask_p4
2239   E519 84 7F       			      anda	#$7F
2240   E51B 97 5F       			      staa	dmask_p4
2241   E51D             			EXEEND_
2241   E51D             
2241   E51D             
2241   E51D             
2241   E51D             
2241   E51D~            			EXEEND_
2241   E51D~            			EXEEND_
2241   E51D             
2241   E510             
2241   E510 4E          
2241   E511             
2241   E51D             
2241   E51D~            			EXEEND_
2241   E51D~            			EXEEND_
2241   E51D             
2242   E51D             			MRTS_					;Macro RTS, Save MRA,MRB
2242   E51D 02          
2243   E51E             
2244   E51E             sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2244   E51E             
2244   E51E             
2244   E51E             
2244   E51E 5BFA5EF357FD
2244   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2244   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2244   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2244   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2244   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2244   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2244   E524             
2245   E524                   			SOL_(trough_on)              	;Turn ON Sol#2:trough
2245   E524 31 41       
2246   E526                   			SLEEP_(96)
2246   E526~                  			SLEEP_(96)
2246   E526~                  			SLEEP_(96)
2246   E526             
2246   E526 53 60       
2246   E528             
2247   E528 5E 08             			SWCLR_($08)				;Clear Sw#: $08(right_trough)
2248   E52A                   			KILL_					;Remove This Thread
2248   E52A 03          
2249   E52B                               ENDIF_
2249   E52B             
2249   E52B             
2249   E52B             
2249   E52B             
2249   E52B             
2249   E52B~                              ENDIF_
2249   E52B~                              ENDIF_
2249   E52B             
2249   E52B~                              ENDIF_
2249   E52B~                              ENDIF_
2249   E52B             
2249   E523             
2249   E523 07          
2249   E524             
2249   E524             
2249   E524~                              ENDIF_
2249   E524~                              ENDIF_
2249   E524~                              ENDIF_
2249   E524~                              ENDIF_
2249   E524~                              ENDIF_
2249   E524             
2249   E52B             
2249   E52B~                              ENDIF_
2249   E52B~                              ENDIF_
2249   E52B             
2250   E52B             			IFEQR_($5F)			      ;BNER_BIT#1F 
2250   E52B             
2250   E52B             
2250   E52B             
2250   E52B 5B 5F 00    
2250   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2250   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2250   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2250   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2250   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2250   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2250   E52E             
2251   E52E             			      REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2251   E52E 55 F8 60    
2252   E531 5C          			      JMPD_(lock_enable)			
2252   E532 DD 88       
2253   E534                               ENDIF_
2253   E534             
2253   E534             
2253   E534             
2253   E534             
2253   E534             
2253   E534~                              ENDIF_
2253   E534~                              ENDIF_
2253   E534             
2253   E534~                              ENDIF_
2253   E534~                              ENDIF_
2253   E534             
2253   E52D             
2253   E52D 06          
2253   E52E             
2253   E52E             
2253   E52E~                              ENDIF_
2253   E52E~                              ENDIF_
2253   E52E~                              ENDIF_
2253   E52E~                              ENDIF_
2253   E52E~                              ENDIF_
2253   E52E             
2253   E534             
2253   E534~                              ENDIF_
2253   E534~                              ENDIF_
2253   E534             
2254   E534             			JSRR_(add_drainshield)			
2254   E534~            			JSRR_(add_drainshield)			
2254   E534~            			JSRR_(add_drainshield)			
2254   E534             
2254   E534~            			JSRR_(add_drainshield)			
2254   E534~            			JSRR_(add_drainshield)			
2254   E534             
2254   E534             
2254   E534 9C          
2254   E535 ED          
2255   E536             			KILL_					;Remove This Thread
2255   E536 03          
2256   E537             
2257   E537             sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2257   E537             
2257   E537             
2257   E537             
2257   E537 5BFAF340FAF8
2257   E53D 08F34FF9
2257   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2257   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2257   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2257   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2257   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2257   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2257   E541             
2258   E541                                     ;BNER_(((!BIT#0F) && SW#08) && (!BIT#00))
2259   E541                   			IFEQR_($5F)			      ;BNER_BIT#1F 
2259   E541             
2259   E541             
2259   E541             
2259   E541 5B 5F 00    
2259   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2259   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2259   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2259   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2259   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2259   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2259   E544             
2260   E544                   			      BITON_($57)				;Turn ON: Bit#17
2260   E544             
2260   E544 10 57       
2261   E546                   			      JMPR_(mb_restart)
2261   E546~                  			      JMPR_(mb_restart)
2261   E546~                  			      JMPR_(mb_restart)
2261   E546             
2261   E546~                  			      JMPR_(mb_restart)
2261   E546~                  			      JMPR_(mb_restart)
2261   E546             
2261   E546             
2261   E546 8F          
2261   E547 2A          
2262   E548                   			ENDIF_			
2262   E548             
2262   E548             
2262   E548             
2262   E548             
2262   E548             
2262   E548~                  			ENDIF_			
2262   E548~                  			ENDIF_			
2262   E548             
2262   E548~                  			ENDIF_			
2262   E548~                  			ENDIF_			
2262   E548             
2262   E543             
2262   E543 04          
2262   E544             
2262   E544             
2262   E544~                  			ENDIF_			
2262   E544~                  			ENDIF_			
2262   E544~                  			ENDIF_			
2262   E544~                  			ENDIF_			
2262   E544~                  			ENDIF_			
2262   E544             
2262   E548             
2262   E548~                  			ENDIF_			
2262   E548~                  			ENDIF_			
2262   E548             
2263   E548                   			IFEQR_($66)				;BNER_BIT#26
2263   E548             
2263   E548             
2263   E548             
2263   E548 5B 66 00    
2263   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2263   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2263   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2263   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2263   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2263   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2263   E54B             
2264   E54B             	      			JSRR_(reset_dt)			
2264   E54B~            	      			JSRR_(reset_dt)			
2264   E54B~            	      			JSRR_(reset_dt)			
2264   E54B             
2264   E54B~            	      			JSRR_(reset_dt)			
2264   E54B~            	      			JSRR_(reset_dt)			
2264   E54B             
2264   E54B             
2264   E54B 90          
2264   E54C 36          
2265   E54D             	      			SOL_(flippers_off)            ;Turn OFF Sol#24:flippers
2265   E54D 31 18       
2266   E54F             	      			EXE_
2266   E54F             
2266   E54F 44          
2267   E550 7F 00 C8    	      			      clr	flag_tilt
2268   E553             	      			EXEEND_
2268   E553             
2268   E553             
2268   E553             
2268   E553             
2268   E553~            	      			EXEEND_
2268   E553~            	      			EXEEND_
2268   E553             
2268   E54F             
2268   E54F 45          
2268   E550             
2268   E553             
2268   E553~            	      			EXEEND_
2268   E553~            	      			EXEEND_
2268   E553             
2269   E553             	      			BITON_($67)				;Turn ON: Bit#27
2269   E553             
2269   E553 10 67       
2270   E555             	      			JSR_(gi_on_dec)			
2270   E555 56          
2270   E556 DA 8E       
2271   E558             gb_5D	 				JSRR_(gj_1D)			
2271   E558~            gb_5D	 				JSRR_(gj_1D)			
2271   E558~            gb_5D	 				JSRR_(gj_1D)			
2271   E558             
2271   E558~            gb_5D	 				JSRR_(gj_1D)			
2271   E558~            gb_5D	 				JSRR_(gj_1D)			
2271   E558             
2271   E558             
2271   E558 90          
2271   E559 12          
2272   E55A 5F          	      			JMP_(trough_kill)
2272   E55B DC DC       
2273   E55D             	      		ENDIF_				
2273   E55D             
2273   E55D             
2273   E55D             
2273   E55D             
2273   E55D             
2273   E55D~            	      		ENDIF_				
2273   E55D~            	      		ENDIF_				
2273   E55D             
2273   E55D~            	      		ENDIF_				
2273   E55D~            	      		ENDIF_				
2273   E55D             
2273   E54A             
2273   E54A 12          
2273   E54B             
2273   E54B             
2273   E54B~            	      		ENDIF_				
2273   E54B~            	      		ENDIF_				
2273   E54B~            	      		ENDIF_				
2273   E54B~            	      		ENDIF_				
2273   E54B~            	      		ENDIF_				
2273   E54B             
2273   E55D             
2273   E55D~            	      		ENDIF_				
2273   E55D~            	      		ENDIF_				
2273   E55D             
2274   E55D             	 		      IFEQR_($F0)			      ;BNER_TILT
2274   E55D             
2274   E55D             
2274   E55D             
2274   E55D 5B F0 00    
2274   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2274   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2274   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2274   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2274   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2274   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2274   E560             
2275   E560                         			EXE_
2275   E560             
2275   E560 44          
2276   E561 7A 00 CA                			      dec	flag_bonusball
2277   E564                         			EXEEND_
2277   E564             
2277   E564             
2277   E564             
2277   E564             
2277   E564~                        			EXEEND_
2277   E564~                        			EXEEND_
2277   E564             
2277   E560             
2277   E560 45          
2277   E561             
2277   E564             
2277   E564~                        			EXEEND_
2277   E564~                        			EXEEND_
2277   E564             
2278   E564                         	      ENDIF_
2278   E564             
2278   E564             
2278   E564             
2278   E564             
2278   E564             
2278   E564~                        	      ENDIF_
2278   E564~                        	      ENDIF_
2278   E564             
2278   E564~                        	      ENDIF_
2278   E564~                        	      ENDIF_
2278   E564             
2278   E55F             
2278   E55F 04          
2278   E560             
2278   E560             
2278   E560~                        	      ENDIF_
2278   E560~                        	      ENDIF_
2278   E560~                        	      ENDIF_
2278   E560~                        	      ENDIF_
2278   E560~                        	      ENDIF_
2278   E560             
2278   E564             
2278   E564~                        	      ENDIF_
2278   E564~                        	      ENDIF_
2278   E564             
2279   E564                   			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2279   E564             
2279   E564 5B 55 F1    
2279   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2279   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2279   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2279   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2279   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2279   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2279   E567             
2280   E567                   			BITON_($4F)				;Turn ON: Bit#0F
2280   E567             
2280   E567 10 4F       
2281   E569 5C                			JMPD_(outhole_main)		
2281   E56A F9 AB       
2282   E56C                   
2283   E56C             gj_1D 			JSRD_(cpdisp_show)			
2283   E56C 57          
2283   E56D DE 0B       
2284   E56F                   			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
2284   E56F 55 F8 D0    
2285   E572                   			BITOFF_($55)			;Turn OFF: Bit#15
2285   E572             
2285   E572 11 55       
2286   E574                   			EXE_
2286   E574             
2286   E574 44          
2287   E575 96 D6             			      ldaa	flag_timer_bip
2288   E577                   			      ifne
2288   E577             
2288   E577 27 FE       
2289   E579                   				      NEWTHREAD(player_ready)
2289   E579 CE F8 DD    
2289   E57C BD EA C4    
2290   E57F 7F 00 D6          				      clr	flag_timer_bip
2291   E582                   			      endif
2291   E582             
2291   E582             
2291   E582             
2291   E582             
2291   E582             
2291   E582~                  			      endif
2291   E582~                  			      endif
2291   E582             
2291   E582~                  			      endif
2291   E582~                  			      endif
2291   E582             
2291   E578             
2291   E578 09          
2291   E579             
2291   E579             
2291   E579~                  			      endif
2291   E579~                  			      endif
2291   E579~                  			      endif
2291   E579             
2291   E582             
2291   E582~                  			      endif
2291   E582~                  			      endif
2291   E582             
2292   E582                   			EXEEND_
2292   E582             
2292   E582             
2292   E582             
2292   E582             
2292   E582~                  			EXEEND_
2292   E582~                  			EXEEND_
2292   E582             
2292   E574             
2292   E574 4F          
2292   E575             
2292   E582             
2292   E582~                  			EXEEND_
2292   E582~                  			EXEEND_
2292   E582             
2293   E582                   			MRTS_					;Macro RTS, Save MRA,MRB
2293   E582 02          
2294   E583                   
2295   E583             reset_dt 			REMTHREADS_($F8,$70)		;Remove Multiple Threads Based on Priority
2295   E583 55 F8 70    
2296   E586                   			REMTHREADS_($F8,$80)		;Remove Multiple Threads Based on Priority
2296   E586 55 F8 80    
2297   E589                   			SOL_(dtleft_on,dtright_on)			
2297   E589 32 63 64    
2298   E58C                   			                              ;Turn ON Sol#3:dt_l Sol#4:dt_r
2299   E58C                   			BITOFF_($D8,$DC,$D9,$5D)	;Turn OFF: Bit#18, Bit#1C, Bit#19, Bit#1D
2299   E58C             
2299   E58C 11D8DCD95D  
2300   E591                   			MRTS_					;Macro RTS, Save MRA,MRB
2300   E591 02          
2301   E592                               ENDIF_
2301   E592             
2301   E592             
2301   E592             
2301   E592             
2301   E592             
2301   E592~                              ENDIF_
2301   E592~                              ENDIF_
2301   E592             
2301   E592~                              ENDIF_
2301   E592~                              ENDIF_
2301   E592             
2301   E540             
2301   E540 51          
2301   E541             
2301   E541             
2301   E541~                              ENDIF_
2301   E541~                              ENDIF_
2301   E541~                              ENDIF_
2301   E541~                              ENDIF_
2301   E541~                              ENDIF_
2301   E541             
2301   E592             
2301   E592~                              ENDIF_
2301   E592~                              ENDIF_
2301   E592             
2302   E592 5E 09       			SWCLR_($09)				;Clear Sw#: $09(left_trough)
2303   E594             			KILL_					;Remove This Thread
2303   E594 03          
2304   E595             
2305   E595             ;**********************************************************************
2306   E595             ;* Get LORD Status
2307   E595             ;**********************************************************************
2308   E595 8D 08       get_lord_num	bsr	get_lord
2309   E597 48          			asla	
2310   E598 48          			asla	
2311   E599 48          			asla	
2312   E59A 48          			asla	
2313   E59B 48          			asla	
2314   E59C 48          			asla	
2315   E59D 4A          			deca	
2316   E59E 39          			rts
2317   E59F             				
2318   E59F D6 11       get_lord		ldab	$11
2319   E5A1 C4 F0       			andb	#$F0
2320   E5A3 8D 04       			bsr	bits_to_int
2321   E5A5 40          			nega	
2322   E5A6 8B 04       			adda	#$04
2323   E5A8 39          			rts	
2324   E5A9             
2325   E5A9             ;********************************************************
2326   E5A9             ;* Will count the number of bits set in B and return the
2327   E5A9             ;* number in A.
2328   E5A9             ;********************************************************			
2329   E5A9 37          bits_to_int		pshb	
2330   E5AA 4F          			clra	
2331   E5AB 5D          bits_loop		tstb	
2332   E5AC             			ifne
2332   E5AC             
2332   E5AC 27 FE       
2333   E5AE             				begin
2333   E5AE             
2334   E5AE 58          					aslb	
2335   E5AF             				csend
2335   E5AF             
2335   E5AF             
2335   E5AF~            				csend
2335   E5AF~            				csend
2335   E5AF~            				csend
2335   E5AF             
2335   E5AF 24 FD       
2335   E5B1             
2335   E5B1~            				csend
2335   E5B1~            				csend
2335   E5B1             
2336   E5B1 4C          				inca	
2337   E5B2 20 F7       				bra	bits_loop
2338   E5B4             			endif
2338   E5B4             
2338   E5B4             
2338   E5B4             
2338   E5B4             
2338   E5B4             
2338   E5B4~            			endif
2338   E5B4~            			endif
2338   E5B4             
2338   E5B4~            			endif
2338   E5B4~            			endif
2338   E5B4             
2338   E5AD             
2338   E5AD 06          
2338   E5AE             
2338   E5AE             
2338   E5AE~            			endif
2338   E5AE~            			endif
2338   E5AE~            			endif
2338   E5AE             
2338   E5B4             
2338   E5B4~            			endif
2338   E5B4~            			endif
2338   E5B4             
2339   E5B4 33          			pulb	
2340   E5B5 39          			rts	
2341   E5B6             			
2342   E5B6             ;*********************************************************
2343   E5B6             ;* Double Trouble Drop Target Data
2344   E5B6             ;*********************************************************			
2345   E5B6 0E          target_data		.db $0E
2346   E5B7 16          			.db $16
2347   E5B8 2A          			.db $2A
2348   E5B9 16          			.db $16
2349   E5BA 0E          			.db $0E
2350   E5BB             target_data_end
2351   E5BB             
2352   E5BB             double_trouble	PRI_($05)				;Priority=#05
2352   E5BB 52 05       
2353   E5BD             			BE19_($09,$0B)			;Effect: Range #09 Range #0B
2353   E5BD             
2353   E5BD 19 89 0B    
2354   E5C0             			BE1E_($0A)				;Effect: Range #0A
2354   E5C0             
2354   E5C0 1E 0A       
2355   E5C2             			IFEQR_($43)		            ;BNER_BIT#03 
2355   E5C2             
2355   E5C2             
2355   E5C2             
2355   E5C2 5B 43 00    
2355   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2355   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2355   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2355   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2355   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2355   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2355   E5C5             
2356   E5C5                   			EXE_
2356   E5C5             
2356   E5C5 44          
2357   E5C6 7F 00 E0          			      clr	spare_ram			;Reset DT value
2358   E5C9                   			      NEWTHREAD(set_dt_target)
2358   E5C9 CE E6 36    
2358   E5CC BD EA C4    
2359   E5CF                   			EXEEND_
2359   E5CF             
2359   E5CF             
2359   E5CF             
2359   E5CF             
2359   E5CF~                  			EXEEND_
2359   E5CF~                  			EXEEND_
2359   E5CF             
2359   E5C5             
2359   E5C5 4B          
2359   E5C6             
2359   E5CF             
2359   E5CF~                  			EXEEND_
2359   E5CF~                  			EXEEND_
2359   E5CF             
2360   E5CF                   			SSND_($14)				;Sound #14
2360   E5CF             
2360   E5CF F4          
2360   E5D0~                  			SSND_($14)				;Sound #14
2360   E5D0~                  			SSND_($14)				;Sound #14
2360   E5D0~                  			SSND_($14)				;Sound #14
2360   E5D0             
2361   E5D0                   			BITON_($52)				;Turn ON: Bit#12
2361   E5D0             
2361   E5D0 10 52       
2362   E5D2                   			EXE_
2362   E5D2             
2362   E5D2 44          
2363   E5D3 CE 01 32          			      ldx	#aud_game2			;Times Double Trouble Achieved
2364   E5D6 BD F7 7F          			      jsr	ptrx_plus_1
2365   E5D9                   			EXEEND_
2365   E5D9             
2365   E5D9             
2365   E5D9             
2365   E5D9             
2365   E5D9~                  			EXEEND_
2365   E5D9~                  			EXEEND_
2365   E5D9             
2365   E5D2             
2365   E5D2 48          
2365   E5D3             
2365   E5D9             
2365   E5D9~                  			EXEEND_
2365   E5D9~                  			EXEEND_
2365   E5D9             
2366   E5D9                   			MRTS_					;Macro RTS, Save MRA,MRB
2366   E5D9 02          
2367   E5DA             ;**************************************************
2368   E5DA             ;* This routine will reset the upper drop target 
2369   E5DA             ;* bank and then reset the correct targets for the
2370   E5DA             ;* current player.
2371   E5DA             ;**************************************************
2372   E5DA             udt_setup		      PRI_($05)				;Priority=#05
2372   E5DA 52 05       
2373   E5DC                   			BITON_($42)				;Turn ON: Bit#02
2373   E5DC             
2373   E5DC 10 42       
2374   E5DE                   			SOL_(dtrelease_on)            ;Turn ON Sol#13:dt_release
2374   E5DE 31 6D       
2375   E5E0                   			SLEEP_(64)
2375   E5E0~                  			SLEEP_(64)
2375   E5E0~                  			SLEEP_(64)
2375   E5E0             
2375   E5E0 53 40       
2375   E5E2             
2376   E5E2                   		ENDIF_
2376   E5E2             
2376   E5E2             
2376   E5E2             
2376   E5E2             
2376   E5E2             
2376   E5E2~                  		ENDIF_
2376   E5E2~                  		ENDIF_
2376   E5E2             
2376   E5E2~                  		ENDIF_
2376   E5E2~                  		ENDIF_
2376   E5E2             
2376   E5C4             
2376   E5C4 1D          
2376   E5C5             
2376   E5C5             
2376   E5C5~                  		ENDIF_
2376   E5C5~                  		ENDIF_
2376   E5C5~                  		ENDIF_
2376   E5C5~                  		ENDIF_
2376   E5C5~                  		ENDIF_
2376   E5C5             
2376   E5E2             
2376   E5E2~                  		ENDIF_
2376   E5E2~                  		ENDIF_
2376   E5E2             
2377   E5E2             			;Here when Double Trouble Starts...
2378   E5E2             udt_start		CPUX_					;Resume CPU Execution
2378   E5E2 04          
2379   E5E3 86 48       			ldaa	#dt1_on                 ;Base solenoid is DT1
2380   E5E5 CE E5 B6    			ldx	#target_data
2381   E5E8             			begin
2381   E5E8             
2382   E5E8 36          				psha	
2383   E5E9 96 18       				ldaa	bitflags
2384   E5EB 44          				lsra	
2385   E5EC E6 00       				ldab	$00,X
2386   E5EE             				begin
2386   E5EE             
2387   E5EE 54          					lsrb	
2388   E5EF 48          					asla	
2389   E5F0             				miend
2389   E5F0             
2389   E5F0             
2389   E5F0~            				miend
2389   E5F0~            				miend
2389   E5F0~            				miend
2389   E5F0             
2389   E5F0 2A FC       
2389   E5F2             
2389   E5F2~            				miend
2389   E5F2~            				miend
2389   E5F2             
2390   E5F2 32          				pula	
2391   E5F3 54          				lsrb	
2392   E5F4             				ifcs
2392   E5F4             
2392   E5F4 24 FE       
2393   E5F6 80 28       					suba	#$28
2394   E5F8 BD F1 3C    					jsr	lamp_on
2395   E5FB 8B 28       					adda	#$28
2396   E5FD DF A4       					stx	sys_temp5
2397   E5FF BD F2 F9    					jsr	bit_lamp_buf_0
2398   E602             					ifeq
2398   E602             
2398   E602 26 FE       
2399   E604 BD EB 23    						jsr	solbuf
2400   E607             					endif
2400   E607             
2400   E607             
2400   E607             
2400   E607             
2400   E607             
2400   E607~            					endif
2400   E607~            					endif
2400   E607             
2400   E607~            					endif
2400   E607~            					endif
2400   E607             
2400   E603             
2400   E603 03          
2400   E604             
2400   E604             
2400   E604~            					endif
2400   E604~            					endif
2400   E604~            					endif
2400   E604             
2400   E607             
2400   E607~            					endif
2400   E607~            					endif
2400   E607             
2401   E607 DE A4       					ldx	sys_temp5
2402   E609             				else
2402   E609             
2402   E609             
2402   E609             
2402   E609             
2402   E5F5             
2402   E5F5             
2402   E5F5             
2402   E5F5~            				else
2402   E5F5~            				else
2402   E5F5~            				else
2402   E5F5~            				else
2402   E5F5             
2402   E5F5~            				else
2402   E5F5~            				else
2402   E5F5~            				else
2402   E5F5~            				else
2402   E5F5             
2402   E5F5             
2402   E5F5 15          
2402   E609             
2402   E609 20 FE       
2402   E60B             
2402   E60B             
2402   E60B             
2402   E60B~            				else
2402   E60B~            				else
2402   E60B~            				else
2402   E60B~            				else
2402   E60B~            				else
2402   E60B             
2402   E60B~            				else
2402   E60B~            				else
2402   E60B             
2402   E60B~            				else
2402   E60B~            				else
2402   E60B             
2403   E60B BD F1 3C    					jsr	lamp_on
2404   E60E             				endif
2404   E60E             
2404   E60E             
2404   E60E             
2404   E60E             
2404   E60E             
2404   E60E~            				endif
2404   E60E~            				endif
2404   E60E             
2404   E60E~            				endif
2404   E60E~            				endif
2404   E60E             
2404   E60A             
2404   E60A 03          
2404   E60B             
2404   E60B             
2404   E60B~            				endif
2404   E60B~            				endif
2404   E60B~            				endif
2404   E60B             
2404   E60E             
2404   E60E~            				endif
2404   E60E~            				endif
2404   E60E             
2405   E60E 4C          				inca	                        ;Increment our solenoid number
2406   E60F 08          				inx	
2407   E610 8C E5 BB    				cpx	#target_data_end
2408   E613             			eqend
2408   E613             
2408   E613             
2408   E613~            			eqend
2408   E613~            			eqend
2408   E613~            			eqend
2408   E613             
2408   E613 26 D3       
2408   E615             
2408   E615~            			eqend
2408   E615~            			eqend
2408   E615             
2409   E615 BD F3 AB    			jsr	macro_start
2410   E618             			SLEEP_(48)
2410   E618~            			SLEEP_(48)
2410   E618~            			SLEEP_(48)
2410   E618             
2410   E618 53 30       
2410   E61A             
2411   E61A 5EA0A1A2A3A4			SWCLR_($A0,$A1,$A2,$A3,$A4,$25) ;Clear Sw#: $20(dt_u1) $21(dt_u2) $22(dt_u3) $23(dt_u4) $24(dt_u5) $25(upper_eject)
2411   E620 25
2412   E621             			BITOFF_($42)			;Turn OFF: Bit#02
2412   E621             
2412   E621 11 42       
2413   E623             			MRTS_					;Macro RTS, Save MRA,MRB
2413   E623 02          
2414   E624             
2415   E624             ;**********************************************************
2416   E624             ;* Select Random Target: Will return $20-24 in game_ram_2
2417   E624             ;*                       New target cannot be the same as
2418   E624             ;*                       last target.
2419   E624             ;**********************************************************
2420   E624             rand_dt		begin
2420   E624             
2421   E624                                     begin
2421   E624             
2422   E624 BD FB 80                                  jsr	get_random
2423   E627 84 07             			      anda	#$07
2424   E629 81 05             			      cmpa	#$05
2425   E62B                   			csend
2425   E62B             
2425   E62B             
2425   E62B~                  			csend
2425   E62B~                  			csend
2425   E62B~                  			csend
2425   E62B             
2425   E62B 24 F7       
2425   E62D             
2425   E62D~                  			csend
2425   E62D~                  			csend
2425   E62D             
2426   E62D 8B 20             			adda	#$20
2427   E62F 91 02             			cmpa	game_ram_2
2428   E631             			neend
2428   E631             
2428   E631             
2428   E631~            			neend
2428   E631~            			neend
2428   E631~            			neend
2428   E631             
2428   E631 27 F1       
2428   E633             
2428   E633~            			neend
2428   E633~            			neend
2428   E633             
2429   E633 97 02       			staa	game_ram_2
2430   E635 39          			rts	
2431   E636             
2432   E636             ;**********************************************************
2433   E636             ;* Will select a random target and reset it appropriately.
2434   E636             ;* The thread will run until the Double Trouble timer expires
2435   E636             ;* and will then drop the target and re-select another.
2436   E636             ;**********************************************************			
2437   E636 BD E6 24    set_dt_target	jsr	rand_dt			;Select a random target, will return $20-$24
2438   E639 8B 28       			adda	#$28
2439   E63B BD EB 23    			jsr	solbuf
2440   E63E BD F3 AB    			jsr	macro_start
2441   E641             			BE19_($0B)				;Effect: Range #0B
2441   E641             
2441   E641 19 0B       
2442   E643             			PRI_($30)				;Priority=#30
2442   E643 52 30       
2443   E645             			BITONP_($02)			;Turn ON Lamp/Bit @RAM:02
2443   E645             
2443   E645 14 02       
2444   E647             			SLEEP_(32)
2444   E647~            			SLEEP_(32)
2444   E647~            			SLEEP_(32)
2444   E647             
2444   E647 53 20       
2444   E649             
2445   E649             			BITOFF_($42)			;Turn OFF: Bit#02
2445   E649             
2445   E649 11 42       
2446   E64B             			EXE_
2446   E64B             
2446   E64B 44          
2447   E64C BD EB 8E    			      jsr	hex2bitpos
2448   E64F 53          			      comb	
2449   E650 D4 65       			      andb	$65
2450   E652 D7 65       			      stab	$65
2451   E654 96 E0       			      ldaa	spare_ram			;Get DT Value, if 0, then no timer
2452   E656             			EXEEND_
2452   E656             
2452   E656             
2452   E656             
2452   E656             
2452   E656~            			EXEEND_
2452   E656~            			EXEEND_
2452   E656             
2452   E64B             
2452   E64B 4C          
2452   E64C             
2452   E656             
2452   E656~            			EXEEND_
2452   E656~            			EXEEND_
2452   E656             
2453   E656             			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2453   E656             
2453   E656             
2453   E656             
2453   E656 5BFCE000FE  
2453   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2453   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2453   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2453   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2453   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2453   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2453   E65B             
2454   E65B             			      KILL_					;Remove This Thread
2454   E65B 03          
2455   E65C                               ENDIF_
2455   E65C             
2455   E65C             
2455   E65C             
2455   E65C             
2455   E65C             
2455   E65C~                              ENDIF_
2455   E65C~                              ENDIF_
2455   E65C             
2455   E65C~                              ENDIF_
2455   E65C~                              ENDIF_
2455   E65C             
2455   E65A             
2455   E65A 01          
2455   E65B             
2455   E65B             
2455   E65B~                              ENDIF_
2455   E65B~                              ENDIF_
2455   E65B~                              ENDIF_
2455   E65B~                              ENDIF_
2455   E65B~                              ENDIF_
2455   E65B             
2455   E65C             
2455   E65C~                              ENDIF_
2455   E65C~                              ENDIF_
2455   E65C             
2456   E65C                               ;fall through
2457   E65C             ;*****************************************************************************
2458   E65C             ;* Main Double Trouble Routines
2459   E65C             ;*****************************************************************************
2460   E65C             dbltrbl_timer	EXE_
2460   E65C             
2460   E65C 44          
2461   E65D F6 01 9A    			      ldab	adj_gameadjust3+1
2462   E660 C4 0F       			      andb	#$0F
2463   E662             			EXEEND_
2463   E662             
2463   E662             
2463   E662             
2463   E662             
2463   E662~            			EXEEND_
2463   E662~            			EXEEND_
2463   E662             
2463   E65C             
2463   E65C 47          
2463   E65D             
2463   E662             
2463   E662~            			EXEEND_
2463   E662~            			EXEEND_
2463   E662             
2464   E662             			ADDRAM_(regb,$12)			;RAM$01+=$12 - Get timer from adjustments and add 12
2464   E662~            			ADDRAM_(regb,$12)			;RAM$01+=$12 - Get timer from adjustments and add 12
2464   E662~            			ADDRAM_(regb,$12)			;RAM$01+=$12 - Get timer from adjustments and add 12
2464   E662             
2464   E662 B1 12       
2465   E664             			SETRAM_(rega,$08)			;RAM$00=$08	 -
2465   E664~            			SETRAM_(rega,$08)			;RAM$00=$08	 -
2465   E664~            			SETRAM_(rega,$08)			;RAM$00=$08	 -
2465   E664             
2465   E664 C0 08       
2466   E666             			BEGIN_
2466   E666             
2467   E666             				ADDRAM_(regb,-1)			;RAM$01-=1
2467   E666~            				ADDRAM_(regb,-1)			;RAM$01-=1
2467   E666~            				ADDRAM_(regb,-1)			;RAM$01-=1
2467   E666             
2467   E666 B1 FF       
2468   E668 61          dt_fast_loop		SLEEPI_($1)				;Delay RAM$01
2469   E669             				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2469   E669             
2469   E669             
2469   E669             
2469   E669 5BFBFBFB5E66
2469   E66F FEF2F01040F7
2469   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2469   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2469   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2469   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2469   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2469   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2469   E675             
2470   E675             	      			;BNER_(BIT#00 || ((LAMP#10(1_target) P $F0,$10) || (BIT#26 || BIT#1E)))
2471   E675             	      			BITONP_($02)			;Turn ON Lamp/Bit @RAM:02
2471   E675             
2471   E675 14 02       
2472   E677             	      			BITOFFP2_($02)			;Turn OFF Lamp/Bit @RAM:02
2472   E677             
2472   E677 25 02       
2473   E679             	      			JMPR_(dt_fast_loop)
2473   E679~            	      			JMPR_(dt_fast_loop)
2473   E679~            	      			JMPR_(dt_fast_loop)
2473   E679             
2473   E679~            	      			JMPR_(dt_fast_loop)
2473   E679~            	      			JMPR_(dt_fast_loop)
2473   E679             
2473   E679             
2473   E679 8F          
2473   E67A ED          
2474   E67B             	      		ENDIF_			
2474   E67B             
2474   E67B             
2474   E67B             
2474   E67B             
2474   E67B             
2474   E67B~            	      		ENDIF_			
2474   E67B~            	      		ENDIF_			
2474   E67B             
2474   E67B~            	      		ENDIF_			
2474   E67B~            	      		ENDIF_			
2474   E67B             
2474   E674             
2474   E674 06          
2474   E675             
2474   E675             
2474   E675~            	      		ENDIF_			
2474   E675~            	      		ENDIF_			
2474   E675~            	      		ENDIF_			
2474   E675~            	      		ENDIF_			
2474   E675~            	      		ENDIF_			
2474   E675             
2474   E67B             
2474   E67B~            	      		ENDIF_			
2474   E67B~            	      		ENDIF_			
2474   E67B             
2475   E67B             	      		IFNER_($E2)		      ;BEQR_RAM$02
2475   E67B             
2475   E67B             
2475   E67B             
2475   E67B 5A E2 00    
2475   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2475   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2475   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2475   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2475   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2475   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2475   E67E             
2476   E67E             				      SSND_($06)				;Sound #06
2476   E67E             
2476   E67E E6          
2476   E67F~            				      SSND_($06)				;Sound #06
2476   E67F~            				      SSND_($06)				;Sound #06
2476   E67F~            				      SSND_($06)				;Sound #06
2476   E67F             
2477   E67F             				ENDIF_
2477   E67F             
2477   E67F             
2477   E67F             
2477   E67F             
2477   E67F             
2477   E67F~            				ENDIF_
2477   E67F~            				ENDIF_
2477   E67F             
2477   E67F~            				ENDIF_
2477   E67F~            				ENDIF_
2477   E67F             
2477   E67D             
2477   E67D 01          
2477   E67E             
2477   E67E             
2477   E67E~            				ENDIF_
2477   E67E~            				ENDIF_
2477   E67E~            				ENDIF_
2477   E67E~            				ENDIF_
2477   E67E~            				ENDIF_
2477   E67E             
2477   E67F             
2477   E67F~            				ENDIF_
2477   E67F~            				ENDIF_
2477   E67F             
2478   E67F             	      		BITINVP_($02)			;Toggle Lamp/Bit @RAM:02
2478   E67F             
2478   E67F 16 02       
2479   E681             			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E681             
2479   E681 5BFCE102FE  
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686             
2479   E686             
2479   E686             
2479   E686             
2479   E686             
2479   E686             
2479   E686             
2479   E685             
2479   E685 E0          
2479   E686             
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686             
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2479   E686             
2480   E686             			ADDRAM_(rega,-1)			;RAM$00-=1
2480   E686~            			ADDRAM_(rega,-1)			;RAM$00-=1
2480   E686~            			ADDRAM_(rega,-1)			;RAM$00-=1
2480   E686             
2480   E686 B0 FF       
2481   E688             			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2481   E688             
2481   E688 5BFCE000DB  
2481   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2481   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2481   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2481   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2481   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2481   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2481   E68D             
2482   E68D             			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2482   E68D             
2482   E68D E7          
2482   E68E~            			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2482   E68E~            			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2482   E68E~            			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2482   E68E             
2483   E68E             			PRI_($30)				;Priority=#30
2483   E68E 52 30       
2484   E690             			BITOFF_($2D)			;Turn OFF: Lamp#2D(double_trouble)
2484   E690             
2484   E690 11 2D       
2485   E692             			BITON_($42)				;Turn ON: Bit#02
2485   E692             
2485   E692 10 42       
2486   E694             			SOL_(dtrelease_on)            ;Turn ON Sol#14:dt_release
2486   E694 31 6D       
2487   E696             			BE19_($0B)				;Effect: Range #0B
2487   E696             
2487   E696 19 0B       
2488   E698             			SLEEP_(64)
2488   E698~            			SLEEP_(64)
2488   E698~            			SLEEP_(64)
2488   E698             
2488   E698 53 40       
2488   E69A             
2489   E69A             			EXE_
2489   E69A             
2489   E69A 44          
2490   E69B CE 01 9B    			      ldx	#adj_gameadjust4		;Load delay until reset
2491   E69E BD EF 53    			      jsr	cmosinc_a
2492   E6A1             			EXEEND_
2492   E6A1             
2492   E6A1             
2492   E6A1             
2492   E6A1             
2492   E6A1~            			EXEEND_
2492   E6A1~            			EXEEND_
2492   E6A1             
2492   E69A             
2492   E69A 48          
2492   E69B             
2492   E6A1             
2492   E6A1~            			EXEEND_
2492   E6A1~            			EXEEND_
2492   E6A1             
2493   E6A1 60          			SLEEPI_(rega)				;Delay RAM$00
2494   E6A2             udt_reset		EXE_
2494   E6A2             
2494   E6A2 44          
2495   E6A3 7F 00 E0    			      clr	spare_ram			;Reset DT value
2496   E6A6             			EXEEND_
2496   E6A6             
2496   E6A6             
2496   E6A6             
2496   E6A6             
2496   E6A6~            			EXEEND_
2496   E6A6~            			EXEEND_
2496   E6A6             
2496   E6A2             
2496   E6A2 45          
2496   E6A3             
2496   E6A6             
2496   E6A6~            			EXEEND_
2496   E6A6~            			EXEEND_
2496   E6A6             
2497   E6A6 5C          			JMPD_(set_dt_target)			
2497   E6A7 E6 36       
2498   E6A9             
2499   E6A9             start_dbltrbl	BNEA_($FC,$E2,$E0,udt_exit)	;BNER_RAM$02==#224 to udt_exit
2499   E6A9 59 FC E2 E0 
2499   E6AD E7 C6       
2500   E6AF             			REMTHREADS_($F8,$30)		;Remove Multiple Threads Based on Priority
2500   E6AF 55 F8 30    
2501   E6B2             			BITON_($2D)				;Turn ON: Lamp#2D(double_trouble)
2501   E6B2             
2501   E6B2 10 2D       
2502   E6B4             			CPUX_					;Resume CPU Execution
2502   E6B4 04          
2503   E6B5             			NEWTHREAD(award_dt_score)
2503   E6B5 CE E6 BF    
2503   E6B8 BD EA C4    
2504   E6BB 7E E6 36    			jmp	set_dt_target
2505   E6BE 03          			.db $03
2506   E6BF             
2507   E6BF BD F3 AB    award_dt_score	jsr	macro_start
2508   E6C2             			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2508   E6C2             
2508   E6C2             
2508   E6C2             
2508   E6C2 5BFEF2F240FD
2508   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2508   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2508   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2508   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2508   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2508   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2508   E6C8             
2509   E6C8             			      REMTHREADS_($FA,$40)		;Remove Multiple Threads Based on Priority
2509   E6C8 55 FA 40    
2510   E6CB             			      EXE_
2510   E6CB             
2510   E6CB 44          
2511   E6CC BD E7 1A    			            jsr	gj_4A
2512   E6CF             			      EXEEND_
2512   E6CF             
2512   E6CF             
2512   E6CF             
2512   E6CF             
2512   E6CF~            			      EXEEND_
2512   E6CF~            			      EXEEND_
2512   E6CF             
2512   E6CB             
2512   E6CB 45          
2512   E6CC             
2512   E6CF             
2512   E6CF~            			      EXEEND_
2512   E6CF~            			      EXEEND_
2512   E6CF             
2513   E6CF             			ENDIF_
2513   E6CF             
2513   E6CF             
2513   E6CF             
2513   E6CF             
2513   E6CF             
2513   E6CF~            			ENDIF_
2513   E6CF~            			ENDIF_
2513   E6CF             
2513   E6CF~            			ENDIF_
2513   E6CF~            			ENDIF_
2513   E6CF             
2513   E6C7             
2513   E6C7 07          
2513   E6C8             
2513   E6C8             
2513   E6C8~            			ENDIF_
2513   E6C8~            			ENDIF_
2513   E6C8~            			ENDIF_
2513   E6C8~            			ENDIF_
2513   E6C8~            			ENDIF_
2513   E6C8             
2513   E6CF             
2513   E6CF~            			ENDIF_
2513   E6CF~            			ENDIF_
2513   E6CF             
2514   E6CF             			PRI_($45)				;Priority=#45
2514   E6CF 52 45       
2515   E6D1             			CPUX_					;Resume CPU Execution
2515   E6D1 04          
2516   E6D2 96 E0       			ldaa	spare_ram
2517   E6D4             			ifeq
2517   E6D4             
2517   E6D4 26 FE       
2518   E6D6 4C          				inca	
2519   E6D7             			else
2519   E6D7             
2519   E6D7             
2519   E6D7             
2519   E6D7             
2519   E6D5             
2519   E6D5             
2519   E6D5             
2519   E6D5~            			else
2519   E6D5~            			else
2519   E6D5~            			else
2519   E6D5~            			else
2519   E6D5             
2519   E6D5~            			else
2519   E6D5~            			else
2519   E6D5~            			else
2519   E6D5~            			else
2519   E6D5             
2519   E6D5             
2519   E6D5 03          
2519   E6D7             
2519   E6D7 20 FE       
2519   E6D9             
2519   E6D9             
2519   E6D9             
2519   E6D9~            			else
2519   E6D9~            			else
2519   E6D9~            			else
2519   E6D9~            			else
2519   E6D9~            			else
2519   E6D9             
2519   E6D9~            			else
2519   E6D9~            			else
2519   E6D9             
2519   E6D9~            			else
2519   E6D9~            			else
2519   E6D9             
2520   E6D9 81 16       				cmpa	#$16
2521   E6DB             				ifne
2521   E6DB             
2521   E6DB 27 FE       
2522   E6DD 48          					asla	
2523   E6DE 81 10       					cmpa	#$10
2524   E6E0             					ifcc
2524   E6E0             
2524   E6E0 25 FE       
2525   E6E2 86 16       						ldaa	#$16
2526   E6E4             					endif
2526   E6E4             
2526   E6E4             
2526   E6E4             
2526   E6E4             
2526   E6E4             
2526   E6E4~            					endif
2526   E6E4~            					endif
2526   E6E4             
2526   E6E4~            					endif
2526   E6E4~            					endif
2526   E6E4             
2526   E6E1             
2526   E6E1 02          
2526   E6E2             
2526   E6E2             
2526   E6E2~            					endif
2526   E6E2~            					endif
2526   E6E2~            					endif
2526   E6E2             
2526   E6E4             
2526   E6E4~            					endif
2526   E6E4~            					endif
2526   E6E4             
2527   E6E4             				endif
2527   E6E4             
2527   E6E4             
2527   E6E4             
2527   E6E4             
2527   E6E4             
2527   E6E4~            				endif
2527   E6E4~            				endif
2527   E6E4             
2527   E6E4~            				endif
2527   E6E4~            				endif
2527   E6E4             
2527   E6DC             
2527   E6DC 07          
2527   E6DD             
2527   E6DD             
2527   E6DD~            				endif
2527   E6DD~            				endif
2527   E6DD~            				endif
2527   E6DD             
2527   E6E4             
2527   E6E4~            				endif
2527   E6E4~            				endif
2527   E6E4             
2528   E6E4             			endif
2528   E6E4             
2528   E6E4             
2528   E6E4             
2528   E6E4             
2528   E6E4             
2528   E6E4~            			endif
2528   E6E4~            			endif
2528   E6E4             
2528   E6E4~            			endif
2528   E6E4~            			endif
2528   E6E4             
2528   E6D8             
2528   E6D8 0B          
2528   E6D9             
2528   E6D9             
2528   E6D9~            			endif
2528   E6D9~            			endif
2528   E6D9~            			endif
2528   E6D9             
2528   E6E4             
2528   E6E4~            			endif
2528   E6E4~            			endif
2528   E6E4             
2529   E6E4 BD DE C9    			jsr	add_dt_audit
2530   E6E7 97 E0       			staa	spare_ram
2531   E6E9 48          			asla	
2532   E6EA 48          			asla	
2533   E6EB 48          			asla	
2534   E6EC 84 7F       			anda	#$7F
2535   E6EE 8B 04       			adda	#$04
2536   E6F0 97 E2       			staa	spare_ram+2
2537   E6F2 96 18       			ldaa	bitflags
2538   E6F4 46          			rora	
2539   E6F5             			ifcc
2539   E6F5             
2539   E6F5 25 FE       
2540   E6F7 8D 2F       				bsr	gb_9E
2541   E6F9 86 08       				ldaa	#$08
2542   E6FB             				begin
2542   E6FB             
2543   E6FB 8D 59       					bsr	gb_9F
2544   E6FD BD EA 2F    					jsr	addthread
2545   E700 06          					.db $06
2546   E701             		
2547   E701 81 01       					cmpa	#$01
2548   E703             					ifeq
2548   E703             
2548   E703 26 FE       
2549   E705 BD EA 2F    						jsr	addthread
2550   E708 60          						.db $60
2551   E709             					endif
2551   E709             
2551   E709             
2551   E709             
2551   E709             
2551   E709             
2551   E709~            					endif
2551   E709~            					endif
2551   E709             
2551   E709~            					endif
2551   E709~            					endif
2551   E709             
2551   E704             
2551   E704 04          
2551   E705             
2551   E705             
2551   E705~            					endif
2551   E705~            					endif
2551   E705~            					endif
2551   E705             
2551   E709             
2551   E709~            					endif
2551   E709~            					endif
2551   E709             
2552   E709 BD E7 99    					jsr	gj_54
2553   E70C BD EA 2F    					jsr	addthread
2554   E70F 06          					.db $06
2555   E710             		
2556   E710 4A          					deca	
2557   E711             				eqend
2557   E711             
2557   E711             
2557   E711~            				eqend
2557   E711~            				eqend
2557   E711~            				eqend
2557   E711             
2557   E711 26 E8       
2557   E713             
2557   E713~            				eqend
2557   E713~            				eqend
2557   E713             
2558   E713 8D 27       				bsr	gb_A2
2559   E715             			endif
2559   E715             
2559   E715             
2559   E715             
2559   E715             
2559   E715             
2559   E715~            			endif
2559   E715~            			endif
2559   E715             
2559   E715~            			endif
2559   E715~            			endif
2559   E715             
2559   E6F6             
2559   E6F6 1E          
2559   E6F7             
2559   E6F7             
2559   E6F7~            			endif
2559   E6F7~            			endif
2559   E6F7~            			endif
2559   E6F7             
2559   E715             
2559   E715~            			endif
2559   E715~            			endif
2559   E715             
2560   E715 8D 03       			bsr	gj_4A
2561   E717 7E EA 67    			jmp	killthread
2562   E71A             			
2563   E71A 96 E2       gj_4A			ldaa	spare_ram+2
2564   E71C BD EC 05    			jsr	score_main
2565   E71F 81 34       			cmpa	#$34
2566   E721             			ifeq
2566   E721             
2566   E721 26 FE       
2567   E723 86 0D             			ldaa	#$0D
2568   E725 7E EC 05          			jmp	score_main
2569   E728 CE 00 5F    gb_9E 			ldx	#dmask_p4
2570   E72B C6 03             			ldab	#$03
2571   E72D                   			begin
2571   E72D             
2572   E72D D1 CD                   			cmpb	player_up
2573   E72F                         			ifne
2573   E72F             
2573   E72F 27 FE       
2574   E731 A6 00                   			      ldaa	$00,X
2575   E733 8A 7F                   			      oraa	#$7F
2576   E735 A7 00                   			      staa	$00,X
2577   E737                         			endif
2577   E737             
2577   E737             
2577   E737             
2577   E737             
2577   E737             
2577   E737~                        			endif
2577   E737~                        			endif
2577   E737             
2577   E737~                        			endif
2577   E737~                        			endif
2577   E737             
2577   E730             
2577   E730 06          
2577   E731             
2577   E731             
2577   E731~                        			endif
2577   E731~                        			endif
2577   E731~                        			endif
2577   E731             
2577   E737             
2577   E737~                        			endif
2577   E737~                        			endif
2577   E737             
2578   E737 09                      			dex	
2579   E738 5A                      			decb	
2580   E739                   			miend
2580   E739             
2580   E739             
2580   E739~                  			miend
2580   E739~                  			miend
2580   E739~                  			miend
2580   E739             
2580   E739 2A F2       
2580   E73B             
2580   E73B~                  			miend
2580   E73B~                  			miend
2580   E73B             
2581   E73B 39          			rts
2582   E73C             	
2583   E73C CE 00 5F    gb_A2			ldx	#dmask_p4
2584   E73F C6 03       			ldab	#$03
2585   E741             			begin
2585   E741             
2586   E741 D1 CD             			cmpb	player_up
2587   E743                   			ifne
2587   E743             
2587   E743 27 FE       
2588   E745 A6 00             			      ldaa	$00,X
2589   E747 84 80             			      anda	#$80
2590   E749 A7 00             			      staa	$00,X
2591   E74B                   			endif
2591   E74B             
2591   E74B             
2591   E74B             
2591   E74B             
2591   E74B             
2591   E74B~                  			endif
2591   E74B~                  			endif
2591   E74B             
2591   E74B~                  			endif
2591   E74B~                  			endif
2591   E74B             
2591   E744             
2591   E744 06          
2591   E745             
2591   E745             
2591   E745~                  			endif
2591   E745~                  			endif
2591   E745~                  			endif
2591   E745             
2591   E74B             
2591   E74B~                  			endif
2591   E74B~                  			endif
2591   E74B             
2592   E74B 09                			dex	
2593   E74C 5A                			decb	
2594   E74D             			miend
2594   E74D             
2594   E74D             
2594   E74D~            			miend
2594   E74D~            			miend
2594   E74D~            			miend
2594   E74D             
2594   E74D 2A F2       
2594   E74F             
2594   E74F~            			miend
2594   E74F~            			miend
2594   E74F             
2595   E74F 96 E1       			ldaa	spare_ram+1
2596   E751 97 60       			staa	comma_flags
2597   E753 7E EB A1    			jmp	update_commas
2598   E756             			
2599   E756 36          gb_9F			psha	
2600   E757 81 06       			cmpa	#$06
2601   E759             			ifcc
2601   E759             
2601   E759 25 FE       
2602   E75B 86 1F       			      ldaa	#$1F
2603   E75D             			else
2603   E75D             
2603   E75D             
2603   E75D             
2603   E75D             
2603   E75A             
2603   E75A             
2603   E75A             
2603   E75A~            			else
2603   E75A~            			else
2603   E75A~            			else
2603   E75A~            			else
2603   E75A             
2603   E75A~            			else
2603   E75A~            			else
2603   E75A~            			else
2603   E75A~            			else
2603   E75A             
2603   E75A             
2603   E75A 04          
2603   E75D             
2603   E75D 20 FE       
2603   E75F             
2603   E75F             
2603   E75F             
2603   E75F~            			else
2603   E75F~            			else
2603   E75F~            			else
2603   E75F~            			else
2603   E75F~            			else
2603   E75F             
2603   E75F~            			else
2603   E75F~            			else
2603   E75F             
2603   E75F~            			else
2603   E75F~            			else
2603   E75F             
2604   E75F 86 0C       			      ldaa	#$0C
2605   E761                               endif
2605   E761             
2605   E761             
2605   E761             
2605   E761             
2605   E761             
2605   E761~                              endif
2605   E761~                              endif
2605   E761             
2605   E761~                              endif
2605   E761~                              endif
2605   E761             
2605   E75E             
2605   E75E 02          
2605   E75F             
2605   E75F             
2605   E75F~                              endif
2605   E75F~                              endif
2605   E75F~                              endif
2605   E75F             
2605   E761             
2605   E761~                              endif
2605   E761~                              endif
2605   E761             
2606   E761 BD EC FC    			jsr	isnd_once
2607   E764 BD F9 19    			jsr	disp_mask
2608   E767 16          			tab	
2609   E768 43          			coma	
2610   E769 84 33       			anda	#$33
2611   E76B D4 60       			andb	comma_flags
2612   E76D 1B          			aba	
2613   E76E 97 60       			staa	comma_flags
2614   E770 BD EB A1    			jsr	update_commas
2615   E773 CE 00 48    			ldx	#score_p1_b1
2616   E776 4F          			clra	
2617   E777             			begin
2617   E777             
2618   E777 91 CD             			cmpa	player_up
2619   E779                   			ifne
2619   E779             
2619   E779 27 FE       
2620   E77B 6F 02                   			clr	$02,X
2621   E77D 6F 03                   			clr	$03,X
2622   E77F D6 E0                   			ldab	spare_ram
2623   E781 C5 F0                   			bitb	#$F0
2624   E783                         			ifeq
2624   E783             
2624   E783 26 FE       
2625   E785 CA F0                   			      orab	#$F0
2626   E787                         			endif
2626   E787             
2626   E787             
2626   E787             
2626   E787             
2626   E787             
2626   E787~                        			endif
2626   E787~                        			endif
2626   E787             
2626   E787~                        			endif
2626   E787~                        			endif
2626   E787             
2626   E784             
2626   E784 02          
2626   E785             
2626   E785             
2626   E785~                        			endif
2626   E785~                        			endif
2626   E785~                        			endif
2626   E785             
2626   E787             
2626   E787~                        			endif
2626   E787~                        			endif
2626   E787             
2627   E787 E7 01                   			stab	$01,X
2628   E789 C6 FF                   			ldab	#$FF
2629   E78B E7 00                   			stab	$00,X
2630   E78D                         		endif
2630   E78D             
2630   E78D             
2630   E78D             
2630   E78D             
2630   E78D             
2630   E78D~                        		endif
2630   E78D~                        		endif
2630   E78D             
2630   E78D~                        		endif
2630   E78D~                        		endif
2630   E78D             
2630   E77A             
2630   E77A 12          
2630   E77B             
2630   E77B             
2630   E77B~                        		endif
2630   E77B~                        		endif
2630   E77B~                        		endif
2630   E77B             
2630   E78D             
2630   E78D~                        		endif
2630   E78D~                        		endif
2630   E78D             
2631   E78D C6 04             			ldab	#$04
2632   E78F BD EF 4D          			jsr	xplusb
2633   E792 4C                			inca	
2634   E793 81 04             			cmpa	#$04
2635   E795             			eqend
2635   E795             
2635   E795             
2635   E795~            			eqend
2635   E795~            			eqend
2635   E795~            			eqend
2635   E795             
2635   E795 26 E0       
2635   E797             
2635   E797~            			eqend
2635   E797~            			eqend
2635   E797             
2636   E797 32          			pula	
2637   E798 39          			rts	
2638   E799             			
2639   E799 36          gj_54			psha	
2640   E79A BD F9 19    			jsr	disp_mask
2641   E79D 94 60       			anda	comma_flags
2642   E79F 97 60       			staa	comma_flags
2643   E7A1 86 FF       			ldaa	#$FF
2644   E7A3 C6 10       			ldab	#$10
2645   E7A5 CE 00 48    			ldx	#score_p1_b1
2646   E7A8 BD F8 40    			jsr	write_range
2647   E7AB 32          			pula	
2648   E7AC 39          			rts	
2649   E7AD             
2650   E7AD             ;********************************************************
2651   E7AD             ;* Upper Drop Target Switches:
2652   E7AD             ;********************************************************			
2653   E7AD             sw_dt_u1
2654   E7AD             sw_dt_u2
2655   E7AD             sw_dt_u3
2656   E7AD             sw_dt_u4
2657   E7AD             sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2657   E7AD             
2657   E7AD             
2657   E7AD             
2657   E7AD 5A 42 00    
2657   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2657   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2657   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2657   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2657   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2657   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2657   E7B0             
2658   E7B0                   			BEQA_($52,start_dbltrbl)  	;BEQR_BIT#12 to start_dbltrbl
2658   E7B0 58 52       
2658   E7B2 E6 A9       
2659   E7B4                   			ADDRAM_(rega,$28)			;RAM$00+=$28
2659   E7B4~                  			ADDRAM_(rega,$28)			;RAM$00+=$28
2659   E7B4~                  			ADDRAM_(rega,$28)			;RAM$00+=$28
2659   E7B4             
2659   E7B4 B0 28       
2660   E7B6                   			IFNER_($E0)		;BEQR_RAM$00
2660   E7B6             
2660   E7B6             
2660   E7B6             
2660   E7B6 5A E0 00    
2660   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2660   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2660   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2660   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2660   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2660   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2660   E7B9             
2661   E7B9                         			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2661   E7B9             
2661   E7B9 14 00       
2662   E7BB                         			JSR_(inc_bonus)			;1 bonus advance			
2662   E7BB 56          
2662   E7BC DC FF       
2663   E7BE                         			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BE 43          
2663   E7BF             
2663   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BF             
2663   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BF             
2663   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BF             
2663   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7BF             
2663   E7BF             
2663   E7BF 0C          
2663   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2663   E7C0             
2663   E7C0             
2663   E7C0             
2663   E7C0             
2663   E7C0             
2664   E7C0                         			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2664   E7C0             
2664   E7C0             
2664   E7C0             
2664   E7C0 5B F6 09 FF 
2664   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2664   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2664   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2664   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2664   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2664   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2664   E7C4             
2665   E7C4                         			      JSRR_(double_trouble)
2665   E7C4~                        			      JSRR_(double_trouble)
2665   E7C4~                        			      JSRR_(double_trouble)
2665   E7C4             
2665   E7C4~                        			      JSRR_(double_trouble)
2665   E7C4~                        			      JSRR_(double_trouble)
2665   E7C4             
2665   E7C4             
2665   E7C4 9D          
2665   E7C5 F5          
2666   E7C6                         			ENDIF_
2666   E7C6             
2666   E7C6             
2666   E7C6             
2666   E7C6             
2666   E7C6             
2666   E7C6~                        			ENDIF_
2666   E7C6~                        			ENDIF_
2666   E7C6             
2666   E7C6~                        			ENDIF_
2666   E7C6~                        			ENDIF_
2666   E7C6             
2666   E7C3             
2666   E7C3 02          
2666   E7C4             
2666   E7C4             
2666   E7C4~                        			ENDIF_
2666   E7C4~                        			ENDIF_
2666   E7C4~                        			ENDIF_
2666   E7C4~                        			ENDIF_
2666   E7C4~                        			ENDIF_
2666   E7C4             
2666   E7C6             
2666   E7C6~                        			ENDIF_
2666   E7C6~                        			ENDIF_
2666   E7C6             
2667   E7C6                         	      ENDIF_
2667   E7C6             
2667   E7C6             
2667   E7C6             
2667   E7C6             
2667   E7C6             
2667   E7C6~                        	      ENDIF_
2667   E7C6~                        	      ENDIF_
2667   E7C6             
2667   E7C6~                        	      ENDIF_
2667   E7C6~                        	      ENDIF_
2667   E7C6             
2667   E7B8             
2667   E7B8 0D          
2667   E7B9             
2667   E7B9             
2667   E7B9~                        	      ENDIF_
2667   E7B9~                        	      ENDIF_
2667   E7B9~                        	      ENDIF_
2667   E7B9~                        	      ENDIF_
2667   E7B9~                        	      ENDIF_
2667   E7B9             
2667   E7C6             
2667   E7C6~                        	      ENDIF_
2667   E7C6~                        	      ENDIF_
2667   E7C6             
2668   E7C6                   	      ENDIF_			
2668   E7C6             
2668   E7C6             
2668   E7C6             
2668   E7C6             
2668   E7C6             
2668   E7C6~                  	      ENDIF_			
2668   E7C6~                  	      ENDIF_			
2668   E7C6             
2668   E7C6~                  	      ENDIF_			
2668   E7C6~                  	      ENDIF_			
2668   E7C6             
2668   E7AF             
2668   E7AF 16          
2668   E7B0             
2668   E7B0             
2668   E7B0~                  	      ENDIF_			
2668   E7B0~                  	      ENDIF_			
2668   E7B0~                  	      ENDIF_			
2668   E7B0~                  	      ENDIF_			
2668   E7B0~                  	      ENDIF_			
2668   E7B0             
2668   E7C6             
2668   E7C6~                  	      ENDIF_			
2668   E7C6~                  	      ENDIF_			
2668   E7C6             
2669   E7C6             udt_exit		KILL_					;Remove This Thread
2669   E7C6 03          
2670   E7C7             
2671   E7C7             gj_0E			SETRAM_(rega,$10)			;RAM$00=$10
2671   E7C7~            gj_0E			SETRAM_(rega,$10)			;RAM$00=$10
2671   E7C7~            gj_0E			SETRAM_(rega,$10)			;RAM$00=$10
2671   E7C7             
2671   E7C7 C0 10       
2672   E7C9             			BEGIN_
2672   E7C9             
2673   E7C9             				ADDRAM_(rega,-1)			;RAM$00-=1
2673   E7C9~            				ADDRAM_(rega,-1)			;RAM$00-=1
2673   E7C9~            				ADDRAM_(rega,-1)			;RAM$00-=1
2673   E7C9             
2673   E7C9 B0 FF       
2674   E7CB             			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7CB             
2674   E7CB 5AFAE0F3FCE0
2674   E7D1 0CFB
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3             
2674   E7D3             
2674   E7D3             
2674   E7D3             
2674   E7D3             
2674   E7D3             
2674   E7D3             
2674   E7D2             
2674   E7D2 F6          
2674   E7D3             
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3             
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2674   E7D3             
2675   E7D3             			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2675   E7D3             
2675   E7D3 14 00       
2676   E7D5             			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2676   E7D5             
2676   E7D5             
2676   E7D5             
2676   E7D5 5B F6 02 FF 
2676   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2676   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2676   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2676   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2676   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2676   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2676   E7D9             
2677   E7D9                   			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2677   E7D9             
2677   E7D9 5A 1B 1F    
2677   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2677   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2677   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2677   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2677   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2677   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2677   E7DC             
2678   E7DC                   			SSND_($17)				;Sound #17
2678   E7DC             
2678   E7DC F7          
2678   E7DD~                  			SSND_($17)				;Sound #17
2678   E7DD~                  			SSND_($17)				;Sound #17
2678   E7DD~                  			SSND_($17)				;Sound #17
2678   E7DD             
2679   E7DD                   			BITON_($41)				;Turn ON: Bit#01
2679   E7DD             
2679   E7DD 10 41       
2680   E7DF                   			BITOFF_($D8,$5C)			;Turn OFF: Bit#18, Bit#1C
2680   E7DF             
2680   E7DF 11 D8 5C    
2681   E7E2                   			JSRD_(lock_thread)			
2681   E7E2 57          
2681   E7E3 DD 82       
2682   E7E5                   			EXE_
2682   E7E5             
2682   E7E5 44          
2683   E7E6                   			      NEWTHREAD(attract_1)
2683   E7E6 CE D8 79    
2683   E7E9 BD EA C4    
2684   E7EC                   			EXEEND_
2684   E7EC             
2684   E7EC             
2684   E7EC             
2684   E7EC             
2684   E7EC~                  			EXEEND_
2684   E7EC~                  			EXEEND_
2684   E7EC             
2684   E7E5             
2684   E7E5 48          
2684   E7E6             
2684   E7EC             
2684   E7EC~                  			EXEEND_
2684   E7EC~                  			EXEEND_
2684   E7EC             
2685   E7EC                   			MRTS_					;Macro RTS, Save MRA,MRB
2685   E7EC 02          
2686   E7ED                               ENDIF_
2686   E7ED             
2686   E7ED             
2686   E7ED             
2686   E7ED             
2686   E7ED             
2686   E7ED~                              ENDIF_
2686   E7ED~                              ENDIF_
2686   E7ED             
2686   E7ED~                              ENDIF_
2686   E7ED~                              ENDIF_
2686   E7ED             
2686   E7D8             
2686   E7D8 14          
2686   E7D9             
2686   E7D9             
2686   E7D9~                              ENDIF_
2686   E7D9~                              ENDIF_
2686   E7D9~                              ENDIF_
2686   E7D9~                              ENDIF_
2686   E7D9~                              ENDIF_
2686   E7D9             
2686   E7ED             
2686   E7ED~                              ENDIF_
2686   E7ED~                              ENDIF_
2686   E7ED             
2687   E7ED             gb_4C			EXE_
2687   E7ED             
2687   E7ED 44          
2688   E7EE             			      NEWTHREAD(gj_3B)
2688   E7EE CE E7 F5    
2688   E7F1 BD EA C4    
2689   E7F4             			EXEEND_
2689   E7F4             
2689   E7F4             
2689   E7F4             
2689   E7F4             
2689   E7F4~            			EXEEND_
2689   E7F4~            			EXEEND_
2689   E7F4             
2689   E7ED             
2689   E7ED 48          
2689   E7EE             
2689   E7F4             
2689   E7F4~            			EXEEND_
2689   E7F4~            			EXEEND_
2689   E7F4             
2690   E7F4             			MRTS_					;Macro RTS, Save MRA,MRB
2690   E7F4 02          
2691   E7F5             
2692   E7F5 BD F3 AB    gj_3B			jsr	macro_start
2693   E7F8             			JSRR_(gatlin_sound)			
2693   E7F8~            			JSRR_(gatlin_sound)			
2693   E7F8~            			JSRR_(gatlin_sound)			
2693   E7F8             
2693   E7F8~            			JSRR_(gatlin_sound)			
2693   E7F8~            			JSRR_(gatlin_sound)			
2693   E7F8             
2693   E7F8             
2693   E7F8 9C          
2693   E7F9 05          
2694   E7FA             			KILL_					;Remove This Thread
2694   E7FA 03          
2695   E7FB             
2696   E7FB             award_spec		SPEC_					;Award Special
2696   E7FB 05          
2697   E7FC             			BE19_($02)				;Effect: Range #02
2697   E7FC             
2697   E7FC 19 02       
2698   E7FE             			MRTS_					;Macro RTS, Save MRA,MRB
2698   E7FE 02          
2699   E7FF             
2700   E7FF 49          gr_csum2		.db $49
2701   E800             
2702   E800             
2703   E800             
2704   E800             ;*****************************************************************************
2705   E800             ;* Williams Level 7 Flipper Code
2706   E800             ;***************************************************************************
2707   E800             ;* Code copyright Williams Electronic Games Inc.
2708   E800             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
2709   E800             ;* For use with TASMx Assembler
2710   E800             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
2711   E800             ;* for more information.
2712   E800             ;* You may redistribute this file as long as this header remains intact.
2713   E800             ;***************************************************************************
2714   E800             
2715   E800             ;*****************************************************************************
2716   E800             ;* Some Global Equates
2717   E800             ;*****************************************************************************
2718   E800             
2719   E800             irq_per_minute =	$0EFF
2720   E800             
2721   E800             ;*****************************************************************************
2722   E800             ;*Program starts at $e800 for standard games... we can expand this later..
2723   E800             ;*****************************************************************************
2724   E800             	.org $E800
2725   E800             
2726   E800             ;**************************************
2727   E800             ;* Main Entry from Reset
2728   E800             ;**************************************
2729   E800 0F          reset			sei	
2730   E801 8E F1 0D    			lds	#pia_ddr_data-1		;Point stack to start of init data
2731   E804 C6 0A       			ldab	#$0A				;Number of PIA sections to initialize
2732   E806 CE 21 00    			ldx	#pia_sound_data		;Start with the lowest PIA
2733   E809 86 04       			ldaa	#$04
2734   E80B A7 01       			staa	pia_control,X		;Select control register
2735   E80D 86 7F       			ldaa	#$7F				
2736   E80F A7 00       			staa	pia_pir,X
2737   E811 DF 9A       			stx	temp1
2738   E813 9C 9A       			cpx	temp1
2739   E815             			ifeq
2739   E815             
2739   E815 26 FE       
2740   E817             				begin
2740   E817             
2741   E817 DE 9A       					ldx	temp1			;Get next PIA address base
2742   E819             					begin
2742   E819             
2743   E819 6F 01       						clr	pia_control,X	;Initialize all PIA data direction registers
2744   E81B 32          						pula				;Get DDR data
2745   E81C A7 00       						staa	pia_pir,X
2746   E81E 32          						pula	
2747   E81F A7 01       						staa	pia_control,X	;Get Control Data
2748   E821 8C 21 00    						cpx	#pia_sound_data	;This is the last PIA to do in Level 7 games
2749   E824             						ifne
2749   E824             
2749   E824 27 FE       
2750   E826 6F 00       							clr	pia_pir,X		;If we are on the sound PIA, then clear the
2751   E828             											;peripheral interface register 
2752   E828             						endif
2752   E828             
2752   E828             
2752   E828             
2752   E828             
2752   E828             
2752   E828~            						endif
2752   E828~            						endif
2752   E828             
2752   E828~            						endif
2752   E828~            						endif
2752   E828             
2752   E825             
2752   E825 02          
2752   E826             
2752   E826             
2752   E826~            						endif
2752   E826~            						endif
2752   E826~            						endif
2752   E826             
2752   E828             
2752   E828~            						endif
2752   E828~            						endif
2752   E828             
2753   E828 08          						inx	
2754   E829 08          						inx	
2755   E82A 5A          						decb	
2756   E82B 27 13       						beq	init_done
2757   E82D C5 01       						bitb	#$01
2758   E82F             					eqend
2758   E82F             
2758   E82F             
2758   E82F~            					eqend
2758   E82F~            					eqend
2758   E82F~            					eqend
2758   E82F             
2758   E82F 26 E8       
2758   E831             
2758   E831~            					eqend
2758   E831~            					eqend
2758   E831             
2759   E831 96 9A       					ldaa	temp1			;Get current PIA address MSB
2760   E833 48          					asla	
2761   E834 84 1F       					anda	#$1F			;Move to next PIA
2762   E836 8A 20       					oraa	#$20
2763   E838 97 9A       					staa	temp1			;Store it
2764   E83A             				loopend
2764   E83A             
2764   E83A             
2764   E83A~            				loopend
2764   E83A~            				loopend
2764   E83A~            				loopend
2764   E83A             
2764   E83A 20 DB       
2764   E83C             
2764   E83C~            				loopend
2764   E83C~            				loopend
2764   E83C             
2765   E83C             			endif
2765   E83C             
2765   E83C             
2765   E83C             
2765   E83C             
2765   E83C             
2765   E83C~            			endif
2765   E83C~            			endif
2765   E83C             
2765   E83C~            			endif
2765   E83C~            			endif
2765   E83C             
2765   E816             
2765   E816 25          
2765   E817             
2765   E817             
2765   E817~            			endif
2765   E817~            			endif
2765   E817~            			endif
2765   E817             
2765   E83C             
2765   E83C~            			endif
2765   E83C~            			endif
2765   E83C             
2766   E83C 7E FF 2B    			jmp	diag					;NMI Entry
2767   E83F             			
2768   E83F             ;***************************************************
2769   E83F             ;* System Checksum #1: Set to make ROM csum from
2770   E83F             ;*                     $E800-$EFFF equal to $00
2771   E83F             ;***************************************************		
2772   E83F             			
2773   E83F 0B          csum1			.db $0B
2774   E840             			
2775   E840             ;***************************************************************
2776   E840             ;* PIA initialization is done now, set up the vm etc.
2777   E840             ;***************************************************************			
2778   E840 CE 13 FF    init_done		ldx	#$13FF				;\
2779   E843 35          			txs						;|
2780   E844             			begin						;|
2780   E844             
2781   E844 6F 00       				clr	$00,X				;Clear RAM 1000-13FF
2782   E846 09          				dex					;|
2783   E847 8C 0F FF    				cpx	#$0FFF			;|
2784   E84A             			eqend						;/
2784   E84A             
2784   E84A             
2784   E84A~            			eqend						;/
2784   E84A~            			eqend						;/
2784   E84A~            			eqend						;/
2784   E84A             
2784   E84A 26 F8       
2784   E84C             
2784   E84C~            			eqend						;/
2784   E84C~            			eqend						;/
2784   E84C             
2785   E84C BD EF 22    			jsr	setup_vm_stack			;Initially Set up the VM
2786   E84F B6 E0 55    			ldaa	gr_lampflashrate			;Get Lamp Flash Rate
2787   E852 97 B5       			staa	lamp_flash_rate
2788   E854 CE 11 00    			ldx	#switch_queue
2789   E857 DF 96       			stx	switch_queue_pointer
2790   E859 CE 11 18    			ldx	#sol_queue				;Works from top down
2791   E85C DF 98       			stx	solenoid_queue_pointer		;Set up Solenoid Buffer Pointer
2792   E85E CE 01 7D    			ldx	#adj_cmoscsum			;CMOS Checksum
2793   E861 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
2794   E864 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
2795   E867 1B          			aba	
2796   E868 81 57       			cmpa	#$57					;CSUM CMOS RAM
2797   E86A             			ifne
2797   E86A             
2797   E86A 27 FE       
2798   E86C BD EF 7D    clear_all			jsr	factory_zeroaudits		;Restore Factory Settings and Zero Audit Totals
2799   E86F             			endif
2799   E86F             
2799   E86F             
2799   E86F             
2799   E86F             
2799   E86F             
2799   E86F~            			endif
2799   E86F~            			endif
2799   E86F             
2799   E86F~            			endif
2799   E86F~            			endif
2799   E86F             
2799   E86B             
2799   E86B 03          
2799   E86C             
2799   E86C             
2799   E86C~            			endif
2799   E86C~            			endif
2799   E86C~            			endif
2799   E86C             
2799   E86F             
2799   E86F~            			endif
2799   E86F~            			endif
2799   E86F             
2800   E86F CE 01 6E    			ldx	#aud_currentcredits		;Current Credits
2801   E872 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
2802   E875 97 5A       			staa	cred_b0
2803   E877 BD FE 1F    			jsr	cmos_a				;CMOS, X -> A Audit 50 Command
2804   E87A 6F 00       			clr	$00,X
2805   E87C 6F 01       			clr	$01,X
2806   E87E 81 15       			cmpa	#$15					;Auto-Cycle?
2807   E880             			ifeq
2807   E880             
2807   E880 26 FE       
2808   E882 CE FE AC    				ldx	#st_autocycle			;Set-Up Auto Cycle Mode
2809   E885 BD EA C4    				jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
2810   E888             			endif
2810   E888             
2810   E888             
2810   E888             
2810   E888             
2810   E888             
2810   E888~            			endif
2810   E888~            			endif
2810   E888             
2810   E888~            			endif
2810   E888~            			endif
2810   E888             
2810   E881             
2810   E881 06          
2810   E882             
2810   E882             
2810   E882~            			endif
2810   E882~            			endif
2810   E882~            			endif
2810   E882             
2810   E888             
2810   E888~            			endif
2810   E888~            			endif
2810   E888             
2811   E888 81 45       			cmpa	#$45
2812   E88A 27 E0       			beq	clear_all				;Restore Factory Setting/Zero Audits
2813   E88C 81 35       			cmpa	#$35
2814   E88E             			ifeq						;Zero Audits
2814   E88E             
2814   E88E 26 FE       
2815   E890 BD EF 6F    				jsr	reset_audits			;(Reset Audits 0100-0165)
2816   E893             			endif
2816   E893             
2816   E893             
2816   E893             
2816   E893             
2816   E893             
2816   E893~            			endif
2816   E893~            			endif
2816   E893             
2816   E893~            			endif
2816   E893~            			endif
2816   E893             
2816   E88F             
2816   E88F 03          
2816   E890             
2816   E890             
2816   E890~            			endif
2816   E890~            			endif
2816   E890~            			endif
2816   E890             
2816   E893             
2816   E893~            			endif
2816   E893~            			endif
2816   E893             
2817   E893 BD F7 2C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
2818   E896 7A 00 61    			dec	switch_debounced
2819   E899 BD F8 9A    			jsr	clear_displays			;Blank all Player Displays (buffer 0)
2820   E89C 97 3B       			staa	score_p1_b0+3			;Set player one score to '00'
2821   E89E 0E          			cli	
2822   E89F FE E0 B3    			ldx	gr_reset_hook_ptr
2823   E8A2 AD 00       			jsr	$00,X					;JSR GameROM
2824   E8A4 CE FA 34    			ldx	#powerup_init			;Jump to Game Over Mode
2825   E8A7 BD EA C4    			jsr	newthread_06			;Start the thread
2826   E8AA 7E E9 FC    			jmp	check_threads			;Run the loop
2827   E8AD             			
2828   E8AD             ;************************************************************************************
2829   E8AD             ;* Begin Main Loop - This is the end of all initialization and the start of the loop
2830   E8AD             ;*                   that runs consistently to support the VM.
2831   E8AD             ;************************************************************************************			
2832   E8AD CE 00 AD    main			ldx	#vm_base
2833   E8B0 DF B3       			stx	vm_tail_thread			;Current VM Routine being run
2834   E8B2 DF B1       			stx	current_thread			;Current VM Routine being run
2835   E8B4 FE E0 B5    			ldx	gr_main_hook_ptr
2836   E8B7 AD 00       			jsr	$00,X					;Game ROM:Main Loop Hook
2837   E8B9 0F          			sei	
2838   E8BA 96 95       			ldaa	irqcount16				;IRQ Counter, Incremented every 16 IRQ's
2839   E8BC 7F 00 95    			clr	irqcount16				;Reset the counter
2840   E8BF 0E          			cli	
2841   E8C0 97 AC       			staa	irqcount				;Put the data into counter holder, use later
2842   E8C2 96 CB       			ldaa	flags_selftest			;See if we are in test mode
2843   E8C4             			ifne
2843   E8C4             
2843   E8C4 27 FE       
2844   E8C6 7E E9 46    				jmp	vm_irqcheck				;If so, then skip a bunch of stuff...
2845   E8C9             			endif
2845   E8C9             
2845   E8C9             
2845   E8C9             
2845   E8C9             
2845   E8C9             
2845   E8C9~            			endif
2845   E8C9~            			endif
2845   E8C9             
2845   E8C9~            			endif
2845   E8C9~            			endif
2845   E8C9             
2845   E8C5             
2845   E8C5 03          
2845   E8C6             
2845   E8C6             
2845   E8C6~            			endif
2845   E8C6~            			endif
2845   E8C6~            			endif
2845   E8C6             
2845   E8C9             
2845   E8C9~            			endif
2845   E8C9~            			endif
2845   E8C9             
2846   E8C9 B6 28 01    			ldaa	pia_disp_digit_ctrl		;Check the Advance Switch
2847   E8CC             			ifmi
2847   E8CC             
2847   E8CC 2A FE       
2848   E8CE CE FC 23    				ldx	#selftest_entry
2849   E8D1 BD EA C4    				jsr	newthread_06			;Create the diagnostics thread
2850   E8D4             			endif
2850   E8D4             
2850   E8D4             
2850   E8D4             
2850   E8D4             
2850   E8D4             
2850   E8D4~            			endif
2850   E8D4~            			endif
2850   E8D4             
2850   E8D4~            			endif
2850   E8D4~            			endif
2850   E8D4             
2850   E8CD             
2850   E8CD 06          
2850   E8CE             
2850   E8CE             
2850   E8CE~            			endif
2850   E8CE~            			endif
2850   E8CE~            			endif
2850   E8CE             
2850   E8D4             
2850   E8D4~            			endif
2850   E8D4~            			endif
2850   E8D4             
2851   E8D4 CE 00 00    checkswitch		ldx	#ram_base
2852   E8D7             			begin
2852   E8D7             
2853   E8D7 A6 81       				ldaa	switch_b4,X
2854   E8D9 43          				coma	
2855   E8DA A4 71       				anda	switch_pending,X
2856   E8DC             				ifne
2856   E8DC             
2856   E8DC 27 FE       
2857   E8DE BD EE 61    					jsr	check_sw_close				;Switch Closed?
2858   E8E1             				endif
2858   E8E1             
2858   E8E1             
2858   E8E1             
2858   E8E1             
2858   E8E1             
2858   E8E1~            				endif
2858   E8E1~            				endif
2858   E8E1             
2858   E8E1~            				endif
2858   E8E1~            				endif
2858   E8E1             
2858   E8DD             
2858   E8DD 03          
2858   E8DE             
2858   E8DE             
2858   E8DE~            				endif
2858   E8DE~            				endif
2858   E8DE~            				endif
2858   E8DE             
2858   E8E1             
2858   E8E1~            				endif
2858   E8E1~            				endif
2858   E8E1             
2859   E8E1 A6 81       				ldaa	switch_b4,X
2860   E8E3 A4 79       				anda	switch_aux,X
2861   E8E5             				ifne
2861   E8E5             
2861   E8E5 27 FE       
2862   E8E7 BD EE BB    					jsr	check_sw_open				;Switch Open?
2863   E8EA             				endif
2863   E8EA             
2863   E8EA             
2863   E8EA             
2863   E8EA             
2863   E8EA             
2863   E8EA~            				endif
2863   E8EA~            				endif
2863   E8EA             
2863   E8EA~            				endif
2863   E8EA~            				endif
2863   E8EA             
2863   E8E6             
2863   E8E6 03          
2863   E8E7             
2863   E8E7             
2863   E8E7~            				endif
2863   E8E7~            				endif
2863   E8E7~            				endif
2863   E8E7             
2863   E8EA             
2863   E8EA~            				endif
2863   E8EA~            				endif
2863   E8EA             
2864   E8EA 08          				inx	
2865   E8EB 8C 00 08    				cpx	#$0008
2866   E8EE             			eqend
2866   E8EE             
2866   E8EE             
2866   E8EE~            			eqend
2866   E8EE~            			eqend
2866   E8EE~            			eqend
2866   E8EE             
2866   E8EE 26 E7       
2866   E8F0             
2866   E8F0~            			eqend
2866   E8F0~            			eqend
2866   E8F0             
2867   E8F0 D6 D6       time			ldab	flag_timer_bip			;Ball Timer Flag
2868   E8F2 27 19       			beq	switches
2869   E8F4 96 AC       			ldaa	irqcount				;Number of IRQ's since last
2870   E8F6 DE D4       			ldx	minutetimer
2871   E8F8 BD EE FF    			jsr	xplusa				;X = X + A
2872   E8FB DF D4       			stx	minutetimer
2873   E8FD 8C 0E FF    			cpx	#irq_per_minute
2874   E900 2B 0B       			bmi	switches				;Not 1 minute yet
2875   E902 5F          			clrb	
2876   E903 D7 D4       			stab	minutetimer				;Clear the Minute Timer
2877   E905 D7 D5       			stab	minutetimer+1
2878   E907 CE 01 26    			ldx	#aud_avgballtime			;AUD: Ball time in Minutes
2879   E90A BD F7 7F    			jsr	ptrx_plus_1				;Add 1 to data at X
2880   E90D             			
2881   E90D CE 11 00    switches		ldx	#switch_queue
2882   E910 9C 96       next_sw		cpx	switch_queue_pointer		;Check Buffer Pointer
2883   E912             			ifne
2883   E912             
2883   E912 27 FE       
2884   E914 A6 00       				ldaa	$00,X					;Command Timer
2885   E916 90 AC       				suba	irqcount				;Subtract our IRQ's
2886   E918             				iflo						;Ready to run?
2886   E918             
2886   E918 22 FE       
2887   E91A DF A8       					stx	sys_temp_w3				;Yes!
2888   E91C A6 01       					ldaa	$01,X					;Encoded Switch #
2889   E91E 97 A5       					staa	sw_encoded
2890   E920 7F 00 A0    					clr	sys_temp1
2891   E923 16          					tab	
2892   E924 57          					asrb	
2893   E925 57          					asrb	
2894   E926 57          					asrb	
2895   E927 D7 A1       					stab	sys_temp2
2896   E929 BD EB 8E    					jsr	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
2897   E92C D7 A2       					stab	sys_temp3
2898   E92E DE A0       					ldx	sys_temp1
2899   E930 A6 61       					ldaa	switch_debounced,X
2900   E932 97 A4       					staa	sys_temp5
2901   E934 BD EE 04    					jsr	sw_down
2902   E937 DE A8       					ldx	sys_temp_w3
2903   E939 24 07       					bcc	sw_break
2904   E93B BD EF 0F    					jsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
2905   E93E 20 D0       					bra	next_sw
2906   E940             				endif
2906   E940             
2906   E940             
2906   E940             
2906   E940             
2906   E940             
2906   E940~            				endif
2906   E940~            				endif
2906   E940             
2906   E940~            				endif
2906   E940~            				endif
2906   E940             
2906   E919             
2906   E919 26          
2906   E91A             
2906   E91A             
2906   E91A~            				endif
2906   E91A~            				endif
2906   E91A~            				endif
2906   E91A             
2906   E940             
2906   E940~            				endif
2906   E940~            				endif
2906   E940             
2907   E940 A7 00       				staa	$00,X
2908   E942 08          sw_break			inx	
2909   E943 08          				inx	
2910   E944 20 CA       				bra	next_sw
2911   E946             			endif
2911   E946             
2911   E946             
2911   E946             
2911   E946             
2911   E946             
2911   E946~            			endif
2911   E946~            			endif
2911   E946             
2911   E946~            			endif
2911   E946~            			endif
2911   E946             
2911   E913             
2911   E913 32          
2911   E914             
2911   E914             
2911   E914~            			endif
2911   E914~            			endif
2911   E914~            			endif
2911   E914             
2911   E946             
2911   E946~            			endif
2911   E946~            			endif
2911   E946             
2912   E946             
2913   E946             			;We come back in here if we are in auto-cycle mode...
2914   E946             						
2915   E946 DE AD       vm_irqcheck		ldx	vm_base				;Check the start of the vm loop
2916   E948             			begin
2916   E948             
2917   E948 27 0D       				beq	flashlamp
2918   E94A A6 02       				ldaa	$02,X
2919   E94C 90 AC       				suba	irqcount			;Subtract the number of IRQ loops completed
2920   E94E             				ifcs
2920   E94E             
2920   E94E 24 FE       
2921   E950 4F          					clra					;Clear it so it can be run next loop
2922   E951             				endif
2922   E951             
2922   E951             
2922   E951             
2922   E951             
2922   E951             
2922   E951~            				endif
2922   E951~            				endif
2922   E951             
2922   E951~            				endif
2922   E951~            				endif
2922   E951             
2922   E94F             
2922   E94F 01          
2922   E950             
2922   E950             
2922   E950~            				endif
2922   E950~            				endif
2922   E950~            				endif
2922   E950             
2922   E951             
2922   E951~            				endif
2922   E951~            				endif
2922   E951             
2923   E951 A7 02       				staa	$02,X
2924   E953 EE 00       				ldx	$00,X
2925   E955             			loopend
2925   E955             
2925   E955             
2925   E955~            			loopend
2925   E955~            			loopend
2925   E955~            			loopend
2925   E955             
2925   E955 20 F1       
2925   E957             
2925   E957~            			loopend
2925   E957~            			loopend
2925   E957             
2926   E957             			
2927   E957 96 B6       flashlamp		ldaa	lamp_flash_count		;Timer for Flashing Lamps
2928   E959 90 AC       			suba	irqcount			;Subtract the IRQ's
2929   E95B             			iflo
2929   E95B             
2929   E95B 22 FE       
2930   E95D CE 00 00    				ldx	#ram_base
2931   E960 C6 08       				ldab	#$08
2932   E962             				begin
2932   E962             
2933   E962 A6 10       					ldaa	lampbuffer0,X			;Invert Selected Lamps.
2934   E964 A8 30       					eora	lampflashflag,X
2935   E966 A7 10       					staa	lampbuffer0,X
2936   E968 08          					inx	
2937   E969 5A          					decb	
2938   E96A             				eqend
2938   E96A             
2938   E96A             
2938   E96A~            				eqend
2938   E96A~            				eqend
2938   E96A~            				eqend
2938   E96A             
2938   E96A 26 F6       
2938   E96C             
2938   E96C~            				eqend
2938   E96C~            				eqend
2938   E96C             
2939   E96C 96 B5       				ldaa	lamp_flash_rate		;Get Reset Value
2940   E96E             			endif
2940   E96E             
2940   E96E             
2940   E96E             
2940   E96E             
2940   E96E             
2940   E96E~            			endif
2940   E96E~            			endif
2940   E96E             
2940   E96E~            			endif
2940   E96E~            			endif
2940   E96E             
2940   E95C             
2940   E95C 11          
2940   E95D             
2940   E95D             
2940   E95D~            			endif
2940   E95D~            			endif
2940   E95D~            			endif
2940   E95D             
2940   E96E             
2940   E96E~            			endif
2940   E96E~            			endif
2940   E96E             
2941   E96E 97 B6       			staa	lamp_flash_count			;Reset the Lamp Timer
2942   E970             			
2943   E970 96 94       solq			ldaa	solenoid_counter			;Solenoid Counter
2944   E972             			ifeq						;Skip if Counter hasnt Expired
2944   E972             
2944   E972 26 FE       
2945   E974 CE 11 18    				ldx	#sol_queue				;Start at bottom of Queue
2946   E977 9C 98       				cpx	solenoid_queue_pointer		
2947   E979             				ifne						;Do we have any to do?
2947   E979             
2947   E979 27 FE       
2948   E97B A6 00       					ldaa	$00,X					;Takes lowest Solenoid # into A
2949   E97D             											;We only do 1 solenoid at a time
2950   E97D             					begin
2950   E97D             
2951   E97D E6 01       						ldab	$01,X					;Moves the rest down into place
2952   E97F E7 00       						stab	$00,X
2953   E981 08          						inx	
2954   E982 9C 98       						cpx	solenoid_queue_pointer
2955   E984             					eqend
2955   E984             
2955   E984             
2955   E984~            					eqend
2955   E984~            					eqend
2955   E984~            					eqend
2955   E984             
2955   E984 26 F7       
2955   E986             
2955   E986~            					eqend
2955   E986~            					eqend
2955   E986             
2956   E986 09          					dex	
2957   E987 DF 98       					stx	solenoid_queue_pointer		;Adjust Pointer to end of list
2958   E989 BD EB 47    					jsr	set_solenoid			;Turn On/Off Solenoid (Solenoid # in A)
2959   E98C             				endif
2959   E98C             
2959   E98C             
2959   E98C             
2959   E98C             
2959   E98C             
2959   E98C~            				endif
2959   E98C~            				endif
2959   E98C             
2959   E98C~            				endif
2959   E98C~            				endif
2959   E98C             
2959   E97A             
2959   E97A 11          
2959   E97B             
2959   E97B             
2959   E97B~            				endif
2959   E97B~            				endif
2959   E97B~            				endif
2959   E97B             
2959   E98C             
2959   E98C~            				endif
2959   E98C~            				endif
2959   E98C             
2960   E98C             			endif
2960   E98C             
2960   E98C             
2960   E98C             
2960   E98C             
2960   E98C             
2960   E98C~            			endif
2960   E98C~            			endif
2960   E98C             
2960   E98C~            			endif
2960   E98C~            			endif
2960   E98C             
2960   E973             
2960   E973 18          
2960   E974             
2960   E974             
2960   E974~            			endif
2960   E974~            			endif
2960   E974~            			endif
2960   E974             
2960   E98C             
2960   E98C~            			endif
2960   E98C~            			endif
2960   E98C             
2961   E98C             			
2962   E98C 96 C1       snd_queue		ldaa	sys_soundflags			;Sound Flag??
2963   E98E 27 55       			beq	doscoreq				;If zero, time to check for the score queue sound/pts
2964   E990 96 BA       			ldaa	cur_sndflags
2965   E992 85 10       			bita	#$10					;Is this an immediate or timed sound?
2966   E994             			ifne
2966   E994             
2966   E994 27 FE       
2967   E996 F6 21 02    				ldab	pia_comma_data			;Do immediate, but only if sound board is not busy.
2968   E999 C4 20       				andb	#$20
2969   E99B 27 5F       				beq	check_threads			;Get Outta Here
2970   E99D             			else
2970   E99D             
2970   E99D             
2970   E99D             
2970   E99D             
2970   E995             
2970   E995             
2970   E995             
2970   E995~            			else
2970   E995~            			else
2970   E995~            			else
2970   E995~            			else
2970   E995             
2970   E995~            			else
2970   E995~            			else
2970   E995~            			else
2970   E995~            			else
2970   E995             
2970   E995             
2970   E995 09          
2970   E99D             
2970   E99D 20 FE       
2970   E99F             
2970   E99F             
2970   E99F             
2970   E99F~            			else
2970   E99F~            			else
2970   E99F~            			else
2970   E99F~            			else
2970   E99F~            			else
2970   E99F             
2970   E99F~            			else
2970   E99F~            			else
2970   E99F             
2970   E99F~            			else
2970   E99F~            			else
2970   E99F             
2971   E99F 96 BE       				ldaa	soundirqcount+1			;LSB Sound IRQ Counter
2972   E9A1 90 AC       				suba	irqcount				;Subtract the number of IRQ's that have cycled
2973   E9A3 97 BE       				staa	soundirqcount+1
2974   E9A5 96 BD       				ldaa	soundirqcount			;Update the counter
2975   E9A7 82 00       				sbca	#$00
2976   E9A9 97 BD       				staa	soundirqcount			;Carry over to MSB of couter as well
2977   E9AB 24 4F       				bcc	check_threads			;Leave if counter has not gone under zero.
2978   E9AD             			endif
2978   E9AD             
2978   E9AD             
2978   E9AD             
2978   E9AD             
2978   E9AD             
2978   E9AD~            			endif
2978   E9AD~            			endif
2978   E9AD             
2978   E9AD~            			endif
2978   E9AD~            			endif
2978   E9AD             
2978   E99E             
2978   E99E 0E          
2978   E99F             
2978   E99F             
2978   E99F~            			endif
2978   E99F~            			endif
2978   E99F~            			endif
2978   E99F             
2978   E9AD             
2978   E9AD~            			endif
2978   E9AD~            			endif
2978   E9AD             
2979   E9AD 86 7F       			ldaa	#$7F
2980   E9AF BD ED A0    			jsr	send_snd			;Send A->Sound Board (mute?)
2981   E9B2 96 BA       			ldaa	cur_sndflags		;Is this a simple sound
2982   E9B4             			ifpl					;yes
2982   E9B4             
2982   E9B4 2B FE       
2983   E9B6 7A 00 B8    				dec	soundcount
2984   E9B9 27 1C       				beq	_sndnext			;Sound Repeat Counter
2985   E9BB D6 C1       				ldab	sys_soundflags		;
2986   E9BD             				ifpl
2986   E9BD             
2986   E9BD 2B FE       
2987   E9BF DE BF       					ldx	soundindex_com
2988   E9C1 DF BD       					stx	soundirqcount
2989   E9C3 96 B9       					ldaa	lastsound
2990   E9C5 BD ED 9E    					jsr	send_snd_save		;Send the Command, Save in 'lastsound'
2991   E9C8 20 32       					bra	check_threads		;Get Outta here.
2992   E9CA             				endif
2992   E9CA             
2992   E9CA             
2992   E9CA             
2992   E9CA             
2992   E9CA             
2992   E9CA~            				endif
2992   E9CA~            				endif
2992   E9CA             
2992   E9CA~            				endif
2992   E9CA~            				endif
2992   E9CA             
2992   E9BE             
2992   E9BE 0B          
2992   E9BF             
2992   E9BF             
2992   E9BF~            				endif
2992   E9BF~            				endif
2992   E9BF~            				endif
2992   E9BF             
2992   E9CA             
2992   E9CA~            				endif
2992   E9CA~            				endif
2992   E9CA             
2993   E9CA 8A 80       				oraa	#$80
2994   E9CC 97 BA       				staa	cur_sndflags		;make it a complex sound now.
2995   E9CE DE BF       				ldx	soundindex_com
2996   E9D0 DF BB       				stx	soundptr
2997   E9D2             			endif
2997   E9D2             
2997   E9D2             
2997   E9D2             
2997   E9D2             
2997   E9D2             
2997   E9D2~            			endif
2997   E9D2~            			endif
2997   E9D2             
2997   E9D2~            			endif
2997   E9D2~            			endif
2997   E9D2             
2997   E9B5             
2997   E9B5 1C          
2997   E9B6             
2997   E9B6             
2997   E9B6~            			endif
2997   E9B6~            			endif
2997   E9B6~            			endif
2997   E9B6             
2997   E9D2             
2997   E9D2~            			endif
2997   E9D2~            			endif
2997   E9D2             
2998   E9D2 BD ED A7    			jsr	do_complex_snd
2999   E9D5 20 25       			bra	check_threads		;Get Outta Here.
3000   E9D7 D6 C6       _sndnext		ldab	next_sndcnt				;Here if we are done iterating the sound command.
3001   E9D9 27 0A       			beq	doscoreq			;Check the scoring queue
3002   E9DB 96 C7       			ldaa	next_sndcmd
3003   E9DD BD ED 53    			jsr	isnd_mult			;Play Sound Index(A),(B)Times
3004   E9E0 7F 00 C6    			clr	next_sndcnt
3005   E9E3 20 17       			bra	check_threads		;Get Outta Here.
3006   E9E5             			
3007   E9E5 7F 00 C1    doscoreq		clr	sys_soundflags		;Reset the Sound Flag??
3008   E9E8 CE 11 27    			ldx	#$1127			;See if there is something in this stack
3009   E9EB 86 08       			ldaa	#$08
3010   E9ED             			begin
3010   E9ED             
3011   E9ED 08          				inx	
3012   E9EE 4A          				deca	
3013   E9EF 2B 0B       				bmi	check_threads		;Nuttin' Honey, Skip this Sound Crap!
3014   E9F1 E6 00       				ldab	$00,X
3015   E9F3             			neend					;Nuttin' Honey, Check next Entry!
3015   E9F3             
3015   E9F3             
3015   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
3015   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
3015   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
3015   E9F3             
3015   E9F3 27 F8       
3015   E9F5             
3015   E9F5~            			neend					;Nuttin' Honey, Check next Entry!
3015   E9F5~            			neend					;Nuttin' Honey, Check next Entry!
3015   E9F5             
3016   E9F5 6A 00       			dec	$00,X				;Re-Adjust the Sound Command So Sound #00 will still work!
3017   E9F7 8A 08       			oraa	#$08
3018   E9F9 BD EB FE    			jsr	dsnd_pts			;Add Points(A),Play Digit Sound
3019   E9FC             			
3020   E9FC CE 00 AD    check_threads	ldx	#vm_base
3021   E9FF             			begin
3021   E9FF             
3022   E9FF EE 00       nextthread			ldx	$00,X				;Check to see if we have a routine to do?
3023   EA01             				ifeq
3023   EA01             
3023   EA01 26 FE       
3024   EA03 7E E8 AD    					jmp main				;Back to the start of the main loop
3025   EA06             				endif
3025   EA06             
3025   EA06             
3025   EA06             
3025   EA06             
3025   EA06             
3025   EA06~            				endif
3025   EA06~            				endif
3025   EA06             
3025   EA06~            				endif
3025   EA06~            				endif
3025   EA06             
3025   EA02             
3025   EA02 03          
3025   EA03             
3025   EA03             
3025   EA03~            				endif
3025   EA03~            				endif
3025   EA03~            				endif
3025   EA03             
3025   EA06             
3025   EA06~            				endif
3025   EA06~            				endif
3025   EA06             
3026   EA06 A6 02       				ldaa	$02,X				;Timer expired?
3027   EA08             			eqend					;No, goto next one.
3027   EA08             
3027   EA08             
3027   EA08~            			eqend					;No, goto next one.
3027   EA08~            			eqend					;No, goto next one.
3027   EA08~            			eqend					;No, goto next one.
3027   EA08             
3027   EA08 26 F5       
3027   EA0A             
3027   EA0A~            			eqend					;No, goto next one.
3027   EA0A~            			eqend					;No, goto next one.
3027   EA0A             
3028   EA0A DF B1       			stx	current_thread		;Yes, lets do this one now.
3029   EA0C DF B3       			stx	vm_tail_thread		;Current VM Routine being run
3030   EA0E C6 08       			ldab	#$08
3031   EA10             			begin
3031   EA10             
3032   EA10 A6 03       				ldaa	$03,X
3033   EA12 36          				psha	
3034   EA13 08          				inx	
3035   EA14 5A          				decb	
3036   EA15             			eqend
3036   EA15             
3036   EA15             
3036   EA15~            			eqend
3036   EA15~            			eqend
3036   EA15~            			eqend
3036   EA15             
3036   EA15 26 F9       
3036   EA17             
3036   EA17~            			eqend
3036   EA17~            			eqend
3036   EA17             
3037   EA17 A6 04       			ldaa	$04,X
3038   EA19 36          			psha	
3039   EA1A A6 03       			ldaa	$03,X
3040   EA1C 36          			psha	
3041   EA1D A6 06       			ldaa	$06,X
3042   EA1F E6 07       			ldab	$07,X
3043   EA21 EE 08       			ldx	$08,X
3044   EA23 39          			rts					;Jump to the offending routine.
3045   EA24             
3046   EA24             ;**************************************************************************
3047   EA24             ;* This is similar to 'addthread' below but the timer data does not follow
3048   EA24             ;* the jsr. Instead, the timer data is pre-loaded into 'thread_timer_byte'.
3049   EA24             ;* The thread is started in the same manner as described below.
3050   EA24             ;**************************************************************************			
3051   EA24 97 9C       delaythread		staa	temp2				;Routine returns here when done
3052   EA26 DF 9A       			stx	temp1
3053   EA28 96 B7       			ldaa	thread_timer_byte
3054   EA2A 30          			tsx					;Get where we came from
3055   EA2B EE 00       			ldx	$00,X				;Get the address of the new thread
3056   EA2D 20 0A       			bra	dump_thread
3057   EA2F             
3058   EA2F             ;**************************************************************************
3059   EA2F             ;* Adds a new thread to the VM. The data for this routine is contained 
3060   EA2F             ;* directly after the jsr to this routine. A single byte follows the
3061   EA2F             ;* jsr and is the timer byte used for the delay until the thread starts.
3062   EA2F             ;* The actual address directly after the timer byte is where the thread
3063   EA2F             ;* will start running. Example:
3064   EA2F             ;*
3065   EA2F             ;* 	jsr addthread
3066   EA2F             ;*    .db 05		;This is the timer byte
3067   EA2F             ;*	lda #FF		;This code is executed as the thread.
3068   EA2F             ;***************************************************************************
3069   EA2F DF 9A       addthread		stx	temp1
3070   EA31 97 9C       			staa	temp2
3071   EA33 30          			tsx	
3072   EA34 EE 00       			ldx	$00,X				;Return Address from RTS to $EA2F
3073   EA36 A6 00       			ldaa	$00,X				;New Timer Value
3074   EA38 08          			inx	
3075   EA39             
3076   EA39             ;**************************************************************************
3077   EA39             ;* Will take all variables in RAM and dump them into the thread data 
3078   EA39             ;* structure for next time. This gives the thread memory over executions
3079   EA39             ;* until it is killed.
3080   EA39             ;**************************************************************************			
3081   EA39 DF 9E       dump_thread		stx	temp3				;Now X points the the replacement address
3082   EA3B DE B1       			ldx	current_thread		;Current VM Routine being run
3083   EA3D A7 02       			staa	$02,X				;Timer For next Time
3084   EA3F 96 9E       			ldaa	temp3
3085   EA41 A7 0B       			staa	$0B,X
3086   EA43 96 9F       			ldaa	temp3+1
3087   EA45 A7 0C       			staa	$0C,X
3088   EA47 E7 0F       			stab	$0F,X
3089   EA49 96 9C       			ldaa	temp2
3090   EA4B A7 0E       			staa	$0E,X
3091   EA4D 96 9A       			ldaa	temp1
3092   EA4F A7 10       			staa	$10,X
3093   EA51 96 9B       			ldaa	temp1+1
3094   EA53 A7 11       			staa	$11,X
3095   EA55 31          			ins	
3096   EA56 31          			ins	
3097   EA57 C6 08       			ldab	#$08
3098   EA59             			begin
3098   EA59             
3099   EA59 32          				pula	
3100   EA5A A7 0A       				staa	$0A,X
3101   EA5C 09          				dex	
3102   EA5D 5A          				decb	
3103   EA5E             			eqend
3103   EA5E             
3103   EA5E             
3103   EA5E~            			eqend
3103   EA5E~            			eqend
3103   EA5E~            			eqend
3103   EA5E             
3103   EA5E 26 F9       
3103   EA60             
3103   EA60~            			eqend
3103   EA60~            			eqend
3103   EA60             
3104   EA60 DE B1       			ldx	current_thread			;Current VM Routine being run
3105   EA62             			begin
3105   EA62             
3106   EA62 8E 13 F7    				lds	#$13F7			;Restore the stack.
3107   EA65 20 98       				bra	nextthread			;Go check the Control Routine for another job.
3108   EA67             				
3109   EA67 CE 00 AD    killthread			ldx	#vm_base
3110   EA6A             				begin
3110   EA6A             
3111   EA6A DF 9C       					stx	temp2					;Thread that points to killed thread
3112   EA6C EE 00       					ldx	$00,X
3113   EA6E 27 8C       					beq	check_threads			;Nothing on VM
3114   EA70 9C B1       					cpx	current_thread			;Current VM Routine being run
3115   EA72             				eqend						;If $B1 != *$00AD check next entry
3115   EA72             
3115   EA72             
3115   EA72~            				eqend						;If $B1 != *$00AD check next entry
3115   EA72~            				eqend						;If $B1 != *$00AD check next entry
3115   EA72~            				eqend						;If $B1 != *$00AD check next entry
3115   EA72             
3115   EA72 26 F6       
3115   EA74             
3115   EA74~            				eqend						;If $B1 != *$00AD check next entry
3115   EA74~            				eqend						;If $B1 != *$00AD check next entry
3115   EA74             
3116   EA74 8D 56       				bsr	killthread_sp			;Remove Entry (X)($B1) From VM
3117   EA76             			loopend
3117   EA76             
3117   EA76             
3117   EA76~            			loopend
3117   EA76~            			loopend
3117   EA76~            			loopend
3117   EA76             
3117   EA76 20 EA       
3117   EA78             
3117   EA78~            			loopend
3117   EA78~            			loopend
3117   EA78             
3118   EA78             ;****************************************************************************
3119   EA78             ;* This is the main routine in charge of adding new threads to the
3120   EA78             ;* virtual machine. The following variables are passed.
3121   EA78             ;*
3122   EA78             ;*	A: Pushed into VMregA
3123   EA78             ;* 	B: Pushed into VMregB
3124   EA78             ;*	X: Thread Initial Program Counter
3125   EA78             ;* 	
3126   EA78             ;* In addition, the following two variables contain data for the
3127   EA78             ;* thread.
3128   EA78             ;*	thread_priority:		Unique Identifier to classify thread
3129   EA78             ;*	system_temp_word2:	???
3130   EA78             ;*
3131   EA78             ;* See header definition file for specifics on thread class structure
3132   EA78             ;*
3133   EA78             ;* Returns: Carry Cleared if New Thread was added
3134   EA78             ;*          Carry Set if VM was full
3135   EA78             ;*
3136   EA78             ;****************************************************************************
3137   EA78 DF 9A       newthread_sp	stx	temp1
3138   EA7A 0D          			sec	
3139   EA7B DE AF       			ldx	vm_nextslot			;Get Next Available Slot Address
3140   EA7D             			ifne
3140   EA7D             
3140   EA7D 27 FE       
3141   EA7F 36          				psha	
3142   EA80 A6 00       				ldaa	$00,X				;\
3143   EA82 97 AF       				staa	vm_nextslot			;|---- Set New Next Available Slot Address
3144   EA84 A6 01       				ldaa	$01,X				;|
3145   EA86 97 B0       				staa	vm_nextslot+1		;/
3146   EA88 DF 9C       				stx	temp2				;Temp2 = New Thread Base Address
3147   EA8A DE B3       				ldx	vm_tail_thread		;This is the last thread in the vm, it has the tail
3148   EA8C A6 00       				ldaa	$00,X				;\
3149   EA8E 97 9E       				staa	temp3				;|
3150   EA90 A6 01       				ldaa	$01,X				;|---- Store the running threads next pointer in temp3
3151   EA92 97 9F       				staa	temp3+1			;/
3152   EA94 96 9C       				ldaa	temp2				;\
3153   EA96 A7 00       				staa	$00,X				;|
3154   EA98 96 9D       				ldaa	temp2+1			;|---- Put the new thread into the running threads next pointer
3155   EA9A A7 01       				staa	$01,X				;/
3156   EA9C EE 00       				ldx	$00,X
3157   EA9E DF B3       				stx	vm_tail_thread		;Make the new thread the last thread
3158   EAA0 96 9E       				ldaa	temp3				;\
3159   EAA2 A7 00       				staa	$00,X				;|
3160   EAA4 96 9F       				ldaa	temp3+1			;|---- Set the Next pointer of the new thread to the 
3161   EAA6 A7 01       				staa	$01,X				;/     previous threads next pointer.
3162   EAA8 96 9A       				ldaa	temp1
3163   EAAA A7 0B       				staa	$0B,X
3164   EAAC 96 9B       				ldaa	temp1+1
3165   EAAE A7 0C       				staa	$0C,X
3166   EAB0 96 AA       				ldaa	thread_priority		;Store the priority
3167   EAB2 A7 0D       				staa	$0D,X
3168   EAB4 96 A6       				ldaa	sys_temp_w2			;Push variables from sys_temp_w2
3169   EAB6 A7 10       				staa	$10,X
3170   EAB8 96 A7       				ldaa	sys_temp_w2+1
3171   EABA A7 11       				staa	$11,X
3172   EABC 32          				pula	
3173   EABD A7 0E       				staa	$0E,X				;Store reg A
3174   EABF E7 0F       				stab	$0F,X				;Store reg B
3175   EAC1 6F 02       				clr	$02,X				;Reset the counter
3176   EAC3             			endif
3176   EAC3             
3176   EAC3             
3176   EAC3             
3176   EAC3             
3176   EAC3             
3176   EAC3~            			endif
3176   EAC3~            			endif
3176   EAC3             
3176   EAC3~            			endif
3176   EAC3~            			endif
3176   EAC3             
3176   EA7E             
3176   EA7E 44          
3176   EA7F             
3176   EA7F             
3176   EA7F~            			endif
3176   EA7F~            			endif
3176   EA7F~            			endif
3176   EA7F             
3176   EAC3             
3176   EAC3~            			endif
3176   EAC3~            			endif
3176   EAC3             
3177   EAC3 39          			rts	
3178   EAC4             
3179   EAC4 36          newthread_06	psha	
3180   EAC5 86 06       			ldaa	#$06
3181   EAC7 97 AA       			staa	thread_priority
3182   EAC9 32          			pula	
3183   EACA 20 AC       			bra	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
3184   EACC             
3185   EACC             ;***************************************************************************
3186   EACC             ;* This will remove the current thread from the VM. 
3187   EACC             ;*
3188   EACC             ;* Requires: temp2 holds the thread that points to the thread to be killed	
3189   EACC             ;***************************************************************************		
3190   EACC 36          killthread_sp	psha	
3191   EACD A6 00       			ldaa	$00,X					;\
3192   EACF 97 9A       			staa	temp1					;|--  Get 'next'
3193   EAD1 A6 01       			ldaa	$01,X					;|
3194   EAD3 97 9B       			staa	temp1+1				;/
3195   EAD5 96 AF       			ldaa	vm_nextslot				;\
3196   EAD7 A7 00       			staa	$00,X					;|--  Kill this one by setting next to 0
3197   EAD9 96 B0       			ldaa	vm_nextslot+1			;|
3198   EADB A7 01       			staa	$01,X					;/
3199   EADD DF AF       			stx	vm_nextslot				;Make this new blank spot the next one
3200   EADF 9C B3       			cpx	vm_tail_thread			;Unless this was the tail thread
3201   EAE1             			ifeq
3201   EAE1             
3201   EAE1 26 FE       
3202   EAE3 DE B1       				ldx	current_thread			;Make the current thread the tail
3203   EAE5 DF B3       				stx	vm_tail_thread
3204   EAE7             			endif
3204   EAE7             
3204   EAE7             
3204   EAE7             
3204   EAE7             
3204   EAE7             
3204   EAE7~            			endif
3204   EAE7~            			endif
3204   EAE7             
3204   EAE7~            			endif
3204   EAE7~            			endif
3204   EAE7             
3204   EAE2             
3204   EAE2 04          
3204   EAE3             
3204   EAE3             
3204   EAE3~            			endif
3204   EAE3~            			endif
3204   EAE3~            			endif
3204   EAE3             
3204   EAE7             
3204   EAE7~            			endif
3204   EAE7~            			endif
3204   EAE7             
3205   EAE7 DE 9C       			ldx	temp2					;Get Parent Thread
3206   EAE9 96 9A       			ldaa	temp1					;Store killed thread 'next' into parents 'next'
3207   EAEB A7 00       			staa	$00,X
3208   EAED 96 9B       			ldaa	temp1+1
3209   EAEF A7 01       			staa	$01,X
3210   EAF1 32          			pula						;Save A
3211   EAF2 39          			rts	
3212   EAF3             
3213   EAF3             ;*************************************************
3214   EAF3             ;* Kill Single thread with the given ID
3215   EAF3             ;*
3216   EAF3             ;* Requires: 	A - Level Defintion
3217   EAF3             ;* 			B - Select Mask
3218   EAF3             ;* 
3219   EAF3             ;* If B is $00, then all threads are cleared
3220   EAF3             ;*************************************************			
3221   EAF3 8D 0B       kill_thread		bsr	check_threadid		;Test Thread ID Mask
3222   EAF5             			ifcc					;Return with Carry Set
3222   EAF5             
3222   EAF5 25 FE       
3223   EAF7 8D D3       				bsr	killthread_sp		;Remove Entry (X)($B1) From VM
3224   EAF9 0C          				clc	
3225   EAFA             			endif
3225   EAFA             
3225   EAFA             
3225   EAFA             
3225   EAFA             
3225   EAFA             
3225   EAFA~            			endif
3225   EAFA~            			endif
3225   EAFA             
3225   EAFA~            			endif
3225   EAFA~            			endif
3225   EAFA             
3225   EAF6             
3225   EAF6 03          
3225   EAF7             
3225   EAF7             
3225   EAF7~            			endif
3225   EAF7~            			endif
3225   EAF7~            			endif
3225   EAF7             
3225   EAFA             
3225   EAFA~            			endif
3225   EAFA~            			endif
3225   EAFA             
3226   EAFA 39          			rts	
3227   EAFB             
3228   EAFB             ;*************************************************
3229   EAFB             ;* Kill All threads with the given ID
3230   EAFB             ;*
3231   EAFB             ;* Requires: 	A - Level Definition
3232   EAFB             ;* 			B - Select Mask
3233   EAFB             ;* 
3234   EAFB             ;* If B is $00, then all threads are cleared
3235   EAFB             ;*************************************************
3236   EAFB             kill_threads	begin
3236   EAFB             
3237   EAFB 8D F6       				bsr	kill_thread		;Kill first One
3238   EAFD             			csend				;Repeat if Carry Clear
3238   EAFD             
3238   EAFD             
3238   EAFD~            			csend				;Repeat if Carry Clear
3238   EAFD~            			csend				;Repeat if Carry Clear
3238   EAFD~            			csend				;Repeat if Carry Clear
3238   EAFD             
3238   EAFD 24 FC       
3238   EAFF             
3238   EAFF~            			csend				;Repeat if Carry Clear
3238   EAFF~            			csend				;Repeat if Carry Clear
3238   EAFF             
3239   EAFF 39          			rts	
3240   EB00             
3241   EB00             ;*************************************************
3242   EB00             ;* Checks the VM thread list for threads that 
3243   EB00             ;* qualify agains the bitmasks defined in A and B.
3244   EB00             ;* If a thread qualifies, then this routine will
3245   EB00             ;* return with carry cleared.
3246   EB00             ;*************************************************		
3247   EB00 37          check_threadid	pshb	
3248   EB01 D7 9A       			stab	temp1
3249   EB03 CE 00 AD    			ldx	#vm_base		;Load Start Address
3250   EB06 DF 9C       			stx	temp2			;Store it
3251   EB08 DE AD       			ldx	vm_base		;Load End Address
3252   EB0A 0D          pri_next		sec	
3253   EB0B             			ifne				;Branch if we have reached the end of the VM (Next = 0000)
3253   EB0B             
3253   EB0B 27 FE       
3254   EB0D 16          				tab	
3255   EB0E E8 0D       				eorb	threadobj_id,X		;EOR with Type Code in Current Routine
3256   EB10 53          				comb	
3257   EB11 D4 9A       				andb	temp1
3258   EB13 D1 9A       				cmpb	temp1
3259   EB15             				ifne				;Branch if Bits Dont work
3259   EB15             
3259   EB15 27 FE       
3260   EB17 DF 9C       pri_skipme				stx	temp2
3261   EB19 EE 00       					ldx	threadobj_next,X
3262   EB1B 20 ED       					bra	pri_next		;Goto Next Thread ->
3263   EB1D             				endif
3263   EB1D             
3263   EB1D             
3263   EB1D             
3263   EB1D             
3263   EB1D             
3263   EB1D~            				endif
3263   EB1D~            				endif
3263   EB1D             
3263   EB1D~            				endif
3263   EB1D~            				endif
3263   EB1D             
3263   EB16             
3263   EB16 06          
3263   EB17             
3263   EB17             
3263   EB17~            				endif
3263   EB17~            				endif
3263   EB17~            				endif
3263   EB17             
3263   EB1D             
3263   EB1D~            				endif
3263   EB1D~            				endif
3263   EB1D             
3264   EB1D 9C B1       				cpx	current_thread	;Make sure it isn't this thread
3265   EB1F 27 F6       				beq	pri_skipme		;If it is this thread, skip it!
3266   EB21             			endif
3266   EB21             
3266   EB21             
3266   EB21             
3266   EB21             
3266   EB21             
3266   EB21~            			endif
3266   EB21~            			endif
3266   EB21             
3266   EB21~            			endif
3266   EB21~            			endif
3266   EB21             
3266   EB0C             
3266   EB0C 14          
3266   EB0D             
3266   EB0D             
3266   EB0D~            			endif
3266   EB0D~            			endif
3266   EB0D~            			endif
3266   EB0D             
3266   EB21             
3266   EB21~            			endif
3266   EB21~            			endif
3266   EB21             
3267   EB21 33          			pulb	
3268   EB22 39          			rts	
3269   EB23             			
3270   EB23             ;*****************************************************************	
3271   EB23             ;* Solenoid Queue Processing: This is the routine that is called
3272   EB23             ;* to fire a specific solenoid. It will add the solenoid to the 
3273   EB23             ;* queue. Works from top down. Solenoid Number is in A along with
3274   EB23             ;* data on how to handle solenoid. Format of A is ...
3275   EB23             ;*
3276   EB23             ;*  	XXXZZZZZ	Where: ZZZZZ is solenoid number 00-24
3277   EB23             ;*                       XXX is timer/command
3278   EB23             ;*
3279   EB23             ;*****************************************************************		
3280   EB23 36          solbuf		psha					;Push Solenoid #
3281   EB24 37          			pshb	
3282   EB25 DF 9A       			stx	temp1				;Put X into Temp1
3283   EB27 DE 98       			ldx	solenoid_queue_pointer	;Check Solenoid Buffer
3284   EB29 8C 11 18    			cpx	#sol_queue	
3285   EB2C             			ifne					;Buffer not full
3285   EB2C             
3285   EB2C 27 FE       
3286   EB2E 0D          				sec					;Carry Set if Buffer Full
3287   EB2F 8C 11 28    				cpx	#sol_queue_full		;Buffer Full
3288   EB32             				ifne
3288   EB32             
3288   EB32 27 FE       
3289   EB34 A7 00       _sb01					staa	$00,X				;Insert Solenoid Into Buffer
3290   EB36 08          					inx	
3291   EB37 DF 98       					stx	solenoid_queue_pointer	;Update Pointer
3292   EB39 0C          _sb02					clc					;Carry Cleared on Buffer Add
3293   EB3A             				endif
3293   EB3A             
3293   EB3A             
3293   EB3A             
3293   EB3A             
3293   EB3A             
3293   EB3A~            				endif
3293   EB3A~            				endif
3293   EB3A             
3293   EB3A~            				endif
3293   EB3A~            				endif
3293   EB3A             
3293   EB33             
3293   EB33 06          
3293   EB34             
3293   EB34             
3293   EB34~            				endif
3293   EB34~            				endif
3293   EB34~            				endif
3293   EB34             
3293   EB3A             
3293   EB3A~            				endif
3293   EB3A~            				endif
3293   EB3A             
3294   EB3A 33          				pulb	
3295   EB3B 32          				pula					;Pull Solenoid #
3296   EB3C DE 9A       				ldx	temp1				;Get Back X
3297   EB3E 39          				rts	
3298   EB3F             			endif
3298   EB3F             
3298   EB3F             
3298   EB3F             
3298   EB3F             
3298   EB3F             
3298   EB3F~            			endif
3298   EB3F~            			endif
3298   EB3F             
3298   EB3F~            			endif
3298   EB3F~            			endif
3298   EB3F             
3298   EB2D             
3298   EB2D 11          
3298   EB2E             
3298   EB2E             
3298   EB2E~            			endif
3298   EB2E~            			endif
3298   EB2E~            			endif
3298   EB2E             
3298   EB3F             
3298   EB3F~            			endif
3298   EB3F~            			endif
3298   EB3F             
3299   EB3F D6 94       			ldab	solenoid_counter		;Solenoid Counter
3300   EB41 26 F1       			bne	_sb01
3301   EB43 8D 02       			bsr	set_solenoid		;Turn On/Off Solenoid (Solenoid # in A)
3302   EB45 20 F2       			bra	_sb02
3303   EB47             
3304   EB47             ;***************************************************
3305   EB47             ;* Turns On/Off solenoid.
3306   EB47             ;*
3307   EB47             ;* Requires:	A - XXXZZZZZ
3308   EB47             ;*					
3309   EB47             ;* Where XXX 	= Solenoid Timer/Command
3310   EB47             ;*       ZZZZZ	= Solenoid Number
3311   EB47             ;*
3312   EB47             ;* Example: A = 20 turns on solenoid #00 for 1 IRQ
3313   EB47             ;*              F8 turns on solenoid #18 idefinitely
3314   EB47             ;*              C3 turns on solenoid #03 for 6 IRQ's
3315   EB47             ;*              03 turns off solenoid #03 indefinitely
3316   EB47             ;***************************************************
3317   EB47 37          set_solenoid	pshb	
3318   EB48 16          			tab	
3319   EB49 C4 E0       			andb	#$E0
3320   EB4B             			ifne
3320   EB4B             
3320   EB4B 27 FE       
3321   EB4D C1 E0       				cmpb	#$E0
3322   EB4F             				ifne
3322   EB4F             
3322   EB4F 27 FE       
3323   EB51             					;1-6 goes into counter
3324   EB51 D7 94       					stab	solenoid_counter		;Restore Solenoid Counter to #E0
3325   EB53 8D 1C       					bsr	soladdr			;Get Solenoid PIA address and bitpos
3326   EB55 DF 91       					stx	solenoid_address
3327   EB57 D7 93       					stab	solenoid_bitpos
3328   EB59             				else
3328   EB59             
3328   EB59             
3328   EB59             
3328   EB59             
3328   EB50             
3328   EB50             
3328   EB50             
3328   EB50~            				else
3328   EB50~            				else
3328   EB50~            				else
3328   EB50~            				else
3328   EB50             
3328   EB50~            				else
3328   EB50~            				else
3328   EB50~            				else
3328   EB50~            				else
3328   EB50             
3328   EB50             
3328   EB50 0A          
3328   EB59             
3328   EB59 20 FE       
3328   EB5B             
3328   EB5B             
3328   EB5B             
3328   EB5B~            				else
3328   EB5B~            				else
3328   EB5B~            				else
3328   EB5B~            				else
3328   EB5B~            				else
3328   EB5B             
3328   EB5B~            				else
3328   EB5B~            				else
3328   EB5B             
3328   EB5B~            				else
3328   EB5B~            				else
3328   EB5B             
3329   EB5B             					;Do it now... if at 7
3330   EB5B 8D 14       					bsr	soladdr			;Get Solenoid PIA address and bitpos
3331   EB5D             				endif
3331   EB5D             
3331   EB5D             
3331   EB5D             
3331   EB5D             
3331   EB5D             
3331   EB5D~            				endif
3331   EB5D~            				endif
3331   EB5D             
3331   EB5D~            				endif
3331   EB5D~            				endif
3331   EB5D             
3331   EB5A             
3331   EB5A 02          
3331   EB5B             
3331   EB5B             
3331   EB5B~            				endif
3331   EB5B~            				endif
3331   EB5B~            				endif
3331   EB5B             
3331   EB5D             
3331   EB5D~            				endif
3331   EB5D~            				endif
3331   EB5D             
3332   EB5D 25 0C       				bcs	set_ss_on			;Carry Set: Special Solenoid, these work in reverse
3333   EB5F             				;Here to turn solenoid ON
3334   EB5F 0F          set_ss_off			sei	
3335   EB60 EA 00       				orab	$00,X
3336   EB62 E7 00       set_s_pia			stab	$00,X			;Write Solenoid Data to PIA
3337   EB64 0E          				cli	
3338   EB65 33          				pulb	
3339   EB66 39          				rts					;Outta here!
3340   EB67             			endif
3340   EB67             
3340   EB67             
3340   EB67             
3340   EB67             
3340   EB67             
3340   EB67~            			endif
3340   EB67~            			endif
3340   EB67             
3340   EB67~            			endif
3340   EB67~            			endif
3340   EB67             
3340   EB4C             
3340   EB4C 1A          
3340   EB4D             
3340   EB4D             
3340   EB4D~            			endif
3340   EB4D~            			endif
3340   EB4D~            			endif
3340   EB4D             
3340   EB67             
3340   EB67~            			endif
3340   EB67~            			endif
3340   EB67             
3341   EB67 8D 08       			bsr	soladdr				;Get Solenoid PIA address and bitpos
3342   EB69 25 F4       			bcs	set_ss_off				;Special Solenoids work in reverse
3343   EB6B             			;Here to turn solenoid OFF			
3344   EB6B 53          set_ss_on		comb	
3345   EB6C 0F          			sei	
3346   EB6D E4 00       			andb	$00,X
3347   EB6F 20 F1       			bra	set_s_pia				;Store it now.
3348   EB71             
3349   EB71             ;*************************************************
3350   EB71             ;* Get Physical Address and Bitposition of 
3351   EB71             ;* solenoid number.
3352   EB71             ;*
3353   EB71             ;* Requires:	A - Solenoid Number
3354   EB71             ;* Output:		B - PIA bit position
3355   EB71             ;*			X - PIA address
3356   EB71             ;*************************************************	
3357   EB71 84 1F       soladdr		anda	#$1F				;Mask to under 32 Solenoids
3358   EB73 81 0F       			cmpa	#$0F
3359   EB75             			iflo					;Get Regular Solenoid Address (PIA)
3359   EB75             
3359   EB75 22 FE       
3360   EB77 CE 22 00    				ldx	#pia_sol_low_data		;Solenoid PIA Offset
3361   EB7A 81 07       				cmpa	#$07
3362   EB7C             				ifgt
3362   EB7C             
3362   EB7C 23 FE       
3363   EB7E 08          					inx	
3364   EB7F 08          					inx	
3365   EB80             				endif
3365   EB80             
3365   EB80             
3365   EB80             
3365   EB80             
3365   EB80             
3365   EB80~            				endif
3365   EB80~            				endif
3365   EB80             
3365   EB80~            				endif
3365   EB80~            				endif
3365   EB80             
3365   EB7D             
3365   EB7D 02          
3365   EB7E             
3365   EB7E             
3365   EB7E~            				endif
3365   EB7E~            				endif
3365   EB7E~            				endif
3365   EB7E             
3365   EB80             
3365   EB80~            				endif
3365   EB80~            				endif
3365   EB80             
3366   EB80 20 0C       				bra	hex2bitpos			;Convert Hex (A&07) into bitpos (B) and leave
3367   EB82             			endif
3367   EB82             
3367   EB82             
3367   EB82             
3367   EB82             
3367   EB82             
3367   EB82~            			endif
3367   EB82~            			endif
3367   EB82             
3367   EB82~            			endif
3367   EB82~            			endif
3367   EB82             
3367   EB76             
3367   EB76 0B          
3367   EB77             
3367   EB77             
3367   EB77~            			endif
3367   EB77~            			endif
3367   EB77~            			endif
3367   EB77             
3367   EB82             
3367   EB82~            			endif
3367   EB82~            			endif
3367   EB82             
3368   EB82 80 10       ssoladdr		suba	#$10
3369   EB84 CE F1 22    			ldx	#spec_sol_def			;Special Solenoid PIA Location Table
3370   EB87 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
3371   EB8A C6 08       			ldab	#$08
3372   EB8C 0D          			sec	
3373   EB8D 39          			rts	
3374   EB8E             
3375   EB8E             ;********************************************************
3376   EB8E             ;* Convert Hex value in A to a single bit positioned at
3377   EB8E             ;* the value of (A&7). Bitpos is returned in B
3378   EB8E             ;*
3379   EB8E             ;* Requires:	Data in A
3380   EB8E             ;* Protects:	A,X
3381   EB8E             ;* Destroys:	B
3382   EB8E             ;* Output:		Bitpos in B
3383   EB8E             ;********************************************************
3384   EB8E 36          hex2bitpos		psha	
3385   EB8F 84 07       			anda	#$07
3386   EB91 5F          			clrb	
3387   EB92 0D          			sec	
3388   EB93             			begin
3388   EB93             
3389   EB93 59          				rolb	
3390   EB94 4A          				deca	
3391   EB95             			miend
3391   EB95             
3391   EB95             
3391   EB95~            			miend
3391   EB95~            			miend
3391   EB95~            			miend
3391   EB95             
3391   EB95 2A FC       
3391   EB97             
3391   EB97~            			miend
3391   EB97~            			miend
3391   EB97             
3392   EB97 32          			pula	
3393   EB98 39          			rts	
3394   EB99             
3395   EB99             ;********************************************************
3396   EB99             ;* Checks the current score shown and updates the comma
3397   EB99             ;* flags accordingly to show the relavant ones.
3398   EB99             ;********************************************************			
3399   EB99 40 04 80 08 comma_million	.db $40,$04,$80,$08
3400   EB9D 10 01 20 02 comma_thousand	.db $10,$01,$20,$02
3401   EBA1             
3402   EBA1 C6 40       update_commas	ldab	#$40				;Million digit
3403   EBA3 8D 2B       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
3404   EBA5             			ifeq				;Branch if it is already set
3404   EBA5             
3404   EBA5 26 FE       
3405   EBA7 DE CE       				ldx	pscore_buf			;Start of Current Player Score Buffer
3406   EBA9 E6 00       				ldab	$00,X
3407   EBAB 5C          				incb	
3408   EBAC             				ifne					;Is MSD at FF (blank0?
3408   EBAC             
3408   EBAC 27 FE       
3409   EBAE CE EB 99    					ldx	#comma_million		;No.. we have a million digit.
3410   EBB1 8D 11       					bsr	set_comma_bit		;Set the appropriate bit
3411   EBB3             				endif
3411   EBB3             
3411   EBB3             
3411   EBB3             
3411   EBB3             
3411   EBB3             
3411   EBB3~            				endif
3411   EBB3~            				endif
3411   EBB3             
3411   EBB3~            				endif
3411   EBB3~            				endif
3411   EBB3             
3411   EBAD             
3411   EBAD 05          
3411   EBAE             
3411   EBAE             
3411   EBAE~            				endif
3411   EBAE~            				endif
3411   EBAE~            				endif
3411   EBAE             
3411   EBB3             
3411   EBB3~            				endif
3411   EBB3~            				endif
3411   EBB3             
3412   EBB3             			endif
3412   EBB3             
3412   EBB3             
3412   EBB3             
3412   EBB3             
3412   EBB3             
3412   EBB3~            			endif
3412   EBB3~            			endif
3412   EBB3             
3412   EBB3~            			endif
3412   EBB3~            			endif
3412   EBB3             
3412   EBA6             
3412   EBA6 0C          
3412   EBA7             
3412   EBA7             
3412   EBA7~            			endif
3412   EBA7~            			endif
3412   EBA7~            			endif
3412   EBA7             
3412   EBB3             
3412   EBB3~            			endif
3412   EBB3~            			endif
3412   EBB3             
3413   EBB3 C6 08       			ldab	#$08				;1000's Digit
3414   EBB5 8D 19       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
3415   EBB7             			ifeq
3415   EBB7             
3415   EBB7 26 FE       
3416   EBB9 DE CE       				ldx	pscore_buf			;Start of Current Player Score Buffer
3417   EBBB E6 02       				ldab	$02,X
3418   EBBD C1 F0       				cmpb	#$F0
3419   EBBF             				ifcs
3419   EBBF             
3419   EBBF 24 FE       
3420   EBC1 CE EB 9D    					ldx	#comma_thousand			;Get the appropriate bit for the thousand digit	
3421   EBC4 96 CD       set_comma_bit			ldaa	player_up				;Current Player Up (0-3)
3422   EBC6 BD EE FF    					jsr	xplusa				;X = X + A
3423   EBC9 A6 00       					ldaa	$00,X
3424   EBCB 9A 60       					oraa	comma_flags
3425   EBCD 97 60       					staa	comma_flags
3426   EBCF             				endif
3426   EBCF             
3426   EBCF             
3426   EBCF             
3426   EBCF             
3426   EBCF             
3426   EBCF~            				endif
3426   EBCF~            				endif
3426   EBCF             
3426   EBCF~            				endif
3426   EBCF~            				endif
3426   EBCF             
3426   EBC0             
3426   EBC0 0E          
3426   EBC1             
3426   EBC1             
3426   EBC1~            				endif
3426   EBC1~            				endif
3426   EBC1~            				endif
3426   EBC1             
3426   EBCF             
3426   EBCF~            				endif
3426   EBCF~            				endif
3426   EBCF             
3427   EBCF             			endif
3427   EBCF             
3427   EBCF             
3427   EBCF             
3427   EBCF             
3427   EBCF             
3427   EBCF~            			endif
3427   EBCF~            			endif
3427   EBCF             
3427   EBCF~            			endif
3427   EBCF~            			endif
3427   EBCF             
3427   EBB8             
3427   EBB8 16          
3427   EBB9             
3427   EBB9             
3427   EBB9~            			endif
3427   EBB9~            			endif
3427   EBB9~            			endif
3427   EBB9             
3427   EBCF             
3427   EBCF~            			endif
3427   EBCF~            			endif
3427   EBCF             
3428   EBCF 39          			rts	
3429   EBD0             
3430   EBD0 96 CD       test_mask_b		ldaa	player_up				;Current Player Up (0-3)
3431   EBD2 CE 00 5C    			ldx	#dmask_p1
3432   EBD5 BD EE FF    			jsr	xplusa				;X = X + A
3433   EBD8 E5 00       			bitb	$00,X
3434   EBDA 39          			rts	
3435   EBDB             
3436   EBDB             ;*********************************************************
3437   EBDB             ;* From the main scoring routine, this will update the
3438   EBDB             ;* extra ball lamp by removing a single extra ball. It 
3439   EBDB             ;* must be done here so that if an extra ball drains 
3440   EBDB             ;* without scoring, the extra ball will not be removed.
3441   EBDB             ;* Therefore all extra ball removals must be done on a
3442   EBDB             ;* scoring event.
3443   EBDB             ;*********************************************************			
3444   EBDB D6 CA       update_eb_count	ldab	flag_bonusball			;Are we in infinte ball mode?
3445   EBDD             			ifeq							;No
3445   EBDD             
3445   EBDD 26 FE       
3446   EBDF 73 00 CA    				com	flag_bonusball			;
3447   EBE2 D6 D0       				ldab	num_eb				;Number of Extra Balls Remaining
3448   EBE4             				ifne				
3448   EBE4             
3448   EBE4 27 FE       
3449   EBE6 7A 00 D0    					dec	num_eb				;EB = EB - 1
3450   EBE9             					ifeq
3450   EBE9             
3450   EBE9 26 FE       
3451   EBEB 36          						psha	
3452   EBEC B6 E0 5F    						ldaa	gr_eb_lamp_1			;Game ROM: Extra Ball Lamp1 Location
3453   EBEF BD F1 5B    						jsr	lamp_off				;Turn off Lamp A (encoded):
3454   EBF2 B6 E0 60    						ldaa	gr_eb_lamp_2			;Game ROM: Extra Ball Lamp2 Location
3455   EBF5 BD F1 5B    						jsr	lamp_off				;Turn off Lamp A (encoded):
3456   EBF8 32          						pula	
3457   EBF9             					endif
3457   EBF9             
3457   EBF9             
3457   EBF9             
3457   EBF9             
3457   EBF9             
3457   EBF9~            					endif
3457   EBF9~            					endif
3457   EBF9             
3457   EBF9~            					endif
3457   EBF9~            					endif
3457   EBF9             
3457   EBEA             
3457   EBEA 0E          
3457   EBEB             
3457   EBEB             
3457   EBEB~            					endif
3457   EBEB~            					endif
3457   EBEB~            					endif
3457   EBEB             
3457   EBF9             
3457   EBF9~            					endif
3457   EBF9~            					endif
3457   EBF9             
3458   EBF9             				endif
3458   EBF9             
3458   EBF9             
3458   EBF9             
3458   EBF9             
3458   EBF9             
3458   EBF9~            				endif
3458   EBF9~            				endif
3458   EBF9             
3458   EBF9~            				endif
3458   EBF9~            				endif
3458   EBF9             
3458   EBE5             
3458   EBE5 13          
3458   EBE6             
3458   EBE6             
3458   EBE6~            				endif
3458   EBE6~            				endif
3458   EBE6~            				endif
3458   EBE6             
3458   EBF9             
3458   EBF9~            				endif
3458   EBF9~            				endif
3458   EBF9             
3459   EBF9             			endif
3459   EBF9             
3459   EBF9             
3459   EBF9             
3459   EBF9             
3459   EBF9             
3459   EBF9~            			endif
3459   EBF9~            			endif
3459   EBF9             
3459   EBF9~            			endif
3459   EBF9~            			endif
3459   EBF9             
3459   EBDE             
3459   EBDE 1A          
3459   EBDF             
3459   EBDF             
3459   EBDF~            			endif
3459   EBDF~            			endif
3459   EBDF~            			endif
3459   EBDF             
3459   EBF9             
3459   EBF9~            			endif
3459   EBF9~            			endif
3459   EBF9             
3460   EBF9 39          			rts	
3461   EBFA             
3462   EBFA             ;**********************************************************
3463   EBFA             ;* Point based sounds (chime type).
3464   EBFA             ;**********************************************************			
3465   EBFA 36          isnd_pts		psha	
3466   EBFB 17          			tba	
3467   EBFC 20 03       			bra	snd_pts
3468   EBFE 36          dsnd_pts		psha	
3469   EBFF 84 07       			anda	#$07
3470   EC01 BD EC FC    snd_pts		jsr	isnd_once			;Play Sound Index(A) Once
3471   EC04 32          			pula
3472   EC05             			;Fall Through to points
3473   EC05             				
3474   EC05 36          score_main		psha	
3475   EC06 37          			pshb	
3476   EC07 7A 00 D7    			dec	randomseed			;Change the Random # seed
3477   EC0A DF D8       			stx	x_temp_1			;Store X for later
3478   EC0C BD E0 A3    			jsr	gr_score_event		;Check Game ROM Hook
3479   EC0F 8D CA       			bsr	update_eb_count		;Update extra balls
3480   EC11 8D 0A       			bsr	score_update		;Add Points to Current Score, Data in A:
3481   EC13 8D 8C       			bsr	update_commas		;Update Master Display Toggle From Current Player
3482   EC15 BD EC AC    			jsr	checkreplay			;Check Current Player Score against all Replay Levels
3483   EC18 DE D8       			ldx	x_temp_1			;Get it back
3484   EC1A 33          			pulb	
3485   EC1B 32          			pula	
3486   EC1C 39          			rts	
3487   EC1D             			
3488   EC1D             ;**********************************************
3489   EC1D             ; Update Score Routine: Score to add is in A
3490   EC1D             ;**********************************************
3491   EC1D DE CE       score_update	ldx	pscore_buf			;Start of Current Player Score Buffer
3492   EC1F EE 00       			ldx	$00,X				;Get XX,XX_,b__
3493   EC21 DF DE       			stx	x_temp_2			;Store it!
3494   EC23 DE CE       			ldx	pscore_buf			;Start of Current Player Score Buffer
3495   EC25 C6 04       			ldab	#$04
3496   EC27 D7 D6       			stab	flag_timer_bip		;Run Ball Play Timer (Audit)
3497   EC29 D7 A0       			stab	sys_temp1			;Number of Ram Location to iterate (4)
3498   EC2B 97 A2       			staa	sys_temp3
3499   EC2D 5F          			clrb	
3500   EC2E D7 A3       			stab	sys_temp4
3501   EC30 D7 A1       			stab	sys_temp2
3502   EC32 16          			tab					;Get Points data
3503   EC33 C4 07       			andb	#$07
3504   EC35 26 27       _su01			bne	_su04
3505   EC37 5C          			incb	
3506   EC38 D7 9E       			stab	temp3				;Store (data&07)+1
3507   EC3A D6 A2       _su02			ldab	sys_temp3
3508   EC3C 54          			lsrb	
3509   EC3D 54          			lsrb	
3510   EC3E 54          			lsrb	
3511   EC3F 8D 45       			bsr	score2hex			;Convert MSD Blanks to 0's on (X+03)
3512   EC41             			begin
3512   EC41             
3513   EC41 9B 9E       				adda	temp3				;(data&07)+1
3514   EC43 8D 3A       				bsr	hex2dec			;Decimal Adjust A, sys_temp2 incremented if A flipped
3515   EC45 5A          				decb					
3516   EC46             			eqend
3516   EC46             
3516   EC46             
3516   EC46~            			eqend
3516   EC46~            			eqend
3516   EC46~            			eqend
3516   EC46             
3516   EC46 26 F9       
3516   EC48             
3516   EC48~            			eqend
3516   EC48~            			eqend
3516   EC48             
3517   EC48 D6 A1       _su03			ldab	sys_temp2
3518   EC4A 27 26       			beq	_su05			;A didn't Flip, Branch.
3519   EC4C A7 03       			staa	$03,X			;Store this digit
3520   EC4E 09          			dex	
3521   EC4F 7A 00 A0    			dec	sys_temp1			;Do next set of digits
3522   EC52             			ifne
3522   EC52             
3522   EC52 27 FE       
3523   EC54 8D 30       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
3524   EC56 7F 00 A1    				clr	sys_temp2
3525   EC59 1B          				aba	
3526   EC5A 8D 23       				bsr	hex2dec				;Decimal Adjust A, sys_temp2 incremented if A flipped
3527   EC5C 20 EA       				bra	_su03
3528   EC5E 5A          _su04				decb	
3529   EC5F             				ifeq
3529   EC5F             
3529   EC5F 26 FE       
3530   EC61 C6 10       					ldab	#$10
3531   EC63 D7 9E       					stab	temp3
3532   EC65 20 D3       					bra	_su02
3533   EC67             				endif
3533   EC67             
3533   EC67             
3533   EC67             
3533   EC67             
3533   EC67             
3533   EC67~            				endif
3533   EC67~            				endif
3533   EC67             
3533   EC67~            				endif
3533   EC67~            				endif
3533   EC67             
3533   EC60             
3533   EC60 06          
3533   EC61             
3533   EC61             
3533   EC61~            				endif
3533   EC61~            				endif
3533   EC61~            				endif
3533   EC61             
3533   EC67             
3533   EC67~            				endif
3533   EC67~            				endif
3533   EC67             
3534   EC67 8D 1D       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
3535   EC69 A7 03       				staa	$03,X
3536   EC6B 7A 00 A0    				dec	sys_temp1
3537   EC6E 09          				dex	
3538   EC6F 5A          				decb	
3539   EC70 20 C3       				bra	_su01
3540   EC72 D6 A3       _su05				ldab	sys_temp4
3541   EC74             				ifne
3541   EC74             
3541   EC74 27 FE       
3542   EC76 81 10       					cmpa	#$10
3543   EC78             					ifcs
3543   EC78             
3543   EC78 24 FE       
3544   EC7A 8B F0       						adda	#$F0
3545   EC7C             					endif
3545   EC7C             
3545   EC7C             
3545   EC7C             
3545   EC7C             
3545   EC7C             
3545   EC7C~            					endif
3545   EC7C~            					endif
3545   EC7C             
3545   EC7C~            					endif
3545   EC7C~            					endif
3545   EC7C             
3545   EC79             
3545   EC79 02          
3545   EC7A             
3545   EC7A             
3545   EC7A~            					endif
3545   EC7A~            					endif
3545   EC7A~            					endif
3545   EC7A             
3545   EC7C             
3545   EC7C~            					endif
3545   EC7C~            					endif
3545   EC7C             
3546   EC7C             				endif
3546   EC7C             
3546   EC7C             
3546   EC7C             
3546   EC7C             
3546   EC7C             
3546   EC7C~            				endif
3546   EC7C~            				endif
3546   EC7C             
3546   EC7C~            				endif
3546   EC7C~            				endif
3546   EC7C             
3546   EC75             
3546   EC75 06          
3546   EC76             
3546   EC76             
3546   EC76~            				endif
3546   EC76~            				endif
3546   EC76~            				endif
3546   EC76             
3546   EC7C             
3546   EC7C~            				endif
3546   EC7C~            				endif
3546   EC7C             
3547   EC7C A7 03       				staa	$03,X
3548   EC7E             			endif
3548   EC7E             
3548   EC7E             
3548   EC7E             
3548   EC7E             
3548   EC7E             
3548   EC7E~            			endif
3548   EC7E~            			endif
3548   EC7E             
3548   EC7E~            			endif
3548   EC7E~            			endif
3548   EC7E             
3548   EC53             
3548   EC53 2A          
3548   EC54             
3548   EC54             
3548   EC54~            			endif
3548   EC54~            			endif
3548   EC54~            			endif
3548   EC54             
3548   EC7E             
3548   EC7E~            			endif
3548   EC7E~            			endif
3548   EC7E             
3549   EC7E 39          			rts	
3550   EC7F             
3551   EC7F             ;******************************************************************************
3552   EC7F             ; Convert Hex to Decimal: If value was above 9 then sys_temp2 is incremented 
3553   EC7F             ;******************************************************************************
3554   EC7F 19          hex2dec		daa	
3555   EC80             			ifcs
3555   EC80             
3555   EC80 24 FE       
3556   EC82 7C 00 A1    				inc	sys_temp2
3557   EC85             			endif
3557   EC85             
3557   EC85             
3557   EC85             
3557   EC85             
3557   EC85             
3557   EC85~            			endif
3557   EC85~            			endif
3557   EC85             
3557   EC85~            			endif
3557   EC85~            			endif
3557   EC85             
3557   EC81             
3557   EC81 03          
3557   EC82             
3557   EC82             
3557   EC82~            			endif
3557   EC82~            			endif
3557   EC82~            			endif
3557   EC82             
3557   EC85             
3557   EC85~            			endif
3557   EC85~            			endif
3557   EC85             
3558   EC85 39          			rts	
3559   EC86             
3560   EC86 A6 03       score2hex		ldaa	$03,X
3561   EC88 4C          			inca	
3562   EC89             			ifne					;Leave if both digits are blanked
3562   EC89             
3562   EC89 27 FE       
3563   EC8B 4A          				deca	
3564   EC8C 81 F0       				cmpa	#$F0
3565   EC8E 25 05       				bcs	sh_exit			;if A was less than #F0
3566   EC90 8B 10       				adda	#$10				;Set High Digit to a 0
3567   EC92             			endif
3567   EC92             
3567   EC92             
3567   EC92             
3567   EC92             
3567   EC92             
3567   EC92~            			endif
3567   EC92~            			endif
3567   EC92             
3567   EC92~            			endif
3567   EC92~            			endif
3567   EC92             
3567   EC8A             
3567   EC8A 07          
3567   EC8B             
3567   EC8B             
3567   EC8B~            			endif
3567   EC8B~            			endif
3567   EC8B~            			endif
3567   EC8B             
3567   EC92             
3567   EC92~            			endif
3567   EC92~            			endif
3567   EC92             
3568   EC92 7C 00 A3    			inc	sys_temp4			;Digit was cleared
3569   EC95 39          sh_exit		rts
3570   EC96             	
3571   EC96             ;**************************************************************
3572   EC96             ;* Add points to Scoring Queue
3573   EC96             ;**************************************************************	
3574   EC96 36          add_points		psha	
3575   EC97 37          			pshb	
3576   EC98 16          			tab	
3577   EC99 C4 07       			andb	#$07
3578   EC9B CE 11 30    			ldx	#score_queue_full	
3579   EC9E             			begin
3579   EC9E             
3580   EC9E 09          				dex	
3581   EC9F 5A          				decb	
3582   ECA0             			miend
3582   ECA0             
3582   ECA0             
3582   ECA0~            			miend
3582   ECA0~            			miend
3582   ECA0~            			miend
3582   ECA0             
3582   ECA0 2A FC       
3582   ECA2             
3582   ECA2~            			miend
3582   ECA2~            			miend
3582   ECA2             
3583   ECA2 44          			lsra	
3584   ECA3 44          			lsra	
3585   ECA4 44          			lsra	
3586   ECA5 AB 00       			adda	$00,X
3587   ECA7 A7 00       			staa	$00,X
3588   ECA9 33          			pulb	
3589   ECAA 32          			pula	
3590   ECAB 39          			rts	
3591   ECAC             ;**********************************************************
3592   ECAC             ;* Checks the current player score against each replay 
3593   ECAC             ;* level. Award Replay if passed.
3594   ECAC             ;**********************************************************
3595   ECAC CE 00 DE    checkreplay		ldx	#x_temp_2
3596   ECAF 8D 33       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
3597   ECB1 D7 DE       			stab	x_temp_2
3598   ECB3 DE CE       			ldx	pscore_buf			;Current Player Score Buffer Pointer
3599   ECB5 8D 2D       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
3600   ECB7 86 04       			ldaa	#$04
3601   ECB9 97 DF       			staa	x_temp_2+1			;Check All 4 Replay Levels
3602   ECBB CE 01 83    			ldx	#adj_replay1		;ADJ: Replay 1 Score
3603   ECBE             			begin
3603   ECBE             
3604   ECBE BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
3605   ECC1 11          				cba	
3606   ECC2             				iflo						;Not High Enough, goto next score level
3606   ECC2             
3606   ECC2 22 FE       
3607   ECC4 91 DE       					cmpa	x_temp_2
3608   ECC6             					ifgt
3608   ECC6             
3608   ECC6 23 FE       
3609   ECC8 DF AA       						stx	thread_priority		;Store our Score Buffer Pointer
3610   ECCA 86 04       						ldaa	#$04
3611   ECCC 90 DF       						suba	x_temp_2+1			;See which Replay Level we are at
3612   ECCE 48          						asla					;X2
3613   ECCF 48          						asla					;X2
3614   ECD0 CE 01 52    						ldx	#aud_replay1times+2	;Base of Replay Score Exceeded Audits
3615   ECD3 BD EE FF    						jsr	xplusa			;X = X + A
3616   ECD6 BD F7 7F    						jsr	ptrx_plus_1			;Add 1 to data at X
3617   ECD9 DE AA       						ldx	thread_priority
3618   ECDB BD F6 BF    						jsr	award_replay		;Replay Score Level Exceeded: Give award, sound bell.
3619   ECDE             					endif
3619   ECDE             
3619   ECDE             
3619   ECDE             
3619   ECDE             
3619   ECDE             
3619   ECDE~            					endif
3619   ECDE~            					endif
3619   ECDE             
3619   ECDE~            					endif
3619   ECDE~            					endif
3619   ECDE             
3619   ECC7             
3619   ECC7 16          
3619   ECC8             
3619   ECC8             
3619   ECC8~            					endif
3619   ECC8~            					endif
3619   ECC8~            					endif
3619   ECC8             
3619   ECDE             
3619   ECDE~            					endif
3619   ECDE~            					endif
3619   ECDE             
3620   ECDE             				endif
3620   ECDE             
3620   ECDE             
3620   ECDE             
3620   ECDE             
3620   ECDE             
3620   ECDE~            				endif
3620   ECDE~            				endif
3620   ECDE             
3620   ECDE~            				endif
3620   ECDE~            				endif
3620   ECDE             
3620   ECC3             
3620   ECC3 1A          
3620   ECC4             
3620   ECC4             
3620   ECC4~            				endif
3620   ECC4~            				endif
3620   ECC4~            				endif
3620   ECC4             
3620   ECDE             
3620   ECDE~            				endif
3620   ECDE~            				endif
3620   ECDE             
3621   ECDE 7A 00 DF    				dec	x_temp_2+1				;Goto Next Score Level
3622   ECE1             			eqend
3622   ECE1             
3622   ECE1             
3622   ECE1~            			eqend
3622   ECE1~            			eqend
3622   ECE1~            			eqend
3622   ECE1             
3622   ECE1 26 DB       
3622   ECE3             
3622   ECE3~            			eqend
3622   ECE3~            			eqend
3622   ECE3             
3623   ECE3 39          			rts
3624   ECE4             ;*********************************************************
3625   ECE4             ;* Load Million and Hundred Thousand Score digits into
3626   ECE4             ;* A and B. Player score buffer pointer is in X. Routine
3627   ECE4             ;* will convert blanks($ff) into 0's
3628   ECE4             ;*********************************************************			
3629   ECE4 A6 00       get_hs_digits	ldaa	$00,X
3630   ECE6 E6 01       			ldab	$01,X
3631   ECE8 8D 04       			bsr	b_plus10		;If B minus then B = B + 0x10
3632   ECEA 8D 07       			bsr	split_ab		;Shift A<<4 B>>4
3633   ECEC 1B          			aba	
3634   ECED 16          			tab	
3635   ECEE             b_plus10		ifmi
3635   ECEE             
3635   ECEE 2A FE       
3636   ECF0 CB 10       				addb	#$10
3637   ECF2             			endif
3637   ECF2             
3637   ECF2             
3637   ECF2             
3637   ECF2             
3637   ECF2             
3637   ECF2~            			endif
3637   ECF2~            			endif
3637   ECF2             
3637   ECF2~            			endif
3637   ECF2~            			endif
3637   ECF2             
3637   ECEF             
3637   ECEF 02          
3637   ECF0             
3637   ECF0             
3637   ECF0~            			endif
3637   ECF0~            			endif
3637   ECF0~            			endif
3637   ECF0             
3637   ECF2             
3637   ECF2~            			endif
3637   ECF2~            			endif
3637   ECF2             
3638   ECF2 39          			rts	
3639   ECF3             ;*********************************************************
3640   ECF3             ;* Shifts A and B to convert million and hundred thousand
3641   ECF3             ;* score digits into a single byte.
3642   ECF3             ;*********************************************************
3643   ECF3 48          split_ab		asla	
3644   ECF4 48          			asla	
3645   ECF5 48          			asla	
3646   ECF6 48          			asla	
3647   ECF7 54          			lsrb	
3648   ECF8 54          			lsrb	
3649   ECF9 54          			lsrb	
3650   ECFA 54          			lsrb	
3651   ECFB 39          			rts	
3652   ECFC             ;*********************************************************
3653   ECFC             ;* Sound Routines 
3654   ECFC             ;*********************************************************
3655   ECFC             ;* isnd_once - will play index sound in A one time by 
3656   ECFC             ;*             loading B with 01 and calling the main
3657   ECFC             ;*             sound subroutine.
3658   ECFC             ;*********************************************************			
3659   ECFC 37          isnd_once		pshb	
3660   ECFD C6 01       			ldab	#$01
3661   ECFF 8D 02       			bsr	sound_sub
3662   ED01 33          			pulb	
3663   ED02 39          			rts
3664   ED03             ;*********************************************************
3665   ED03             ;* This is the main sound subroutine. It will play index
3666   ED03             ;* sound contained in A, B times.
3667   ED03             ;*********************************************************				
3668   ED03 DF AA       sound_sub		stx	thread_priority
3669   ED05 36          			psha	
3670   ED06 37          			pshb	
3671   ED07 D6 C1       			ldab	sys_soundflags			;Sound Status
3672   ED09 27 1C       			beq	b_04E					;Goto Sound Routine #2
3673   ED0B 16          			tab						
3674   ED0C 48          			asla	
3675   ED0D 1B          			aba	                              ;A=A*3
3676   ED0E FE E0 53    			ldx	gr_soundtable_ptr			;Game ROM Table: Sounds
3677   ED11 BD EE FF    			jsr	xplusa				;X = X + A
3678   ED14 A6 02       			ldaa	$02,X                         ;get the actual sound command that will be sent
3679   ED16 4C          			inca	
3680   ED17             			ifeq						;If value is $FF, then this is complex sound
3680   ED17             
3680   ED17 26 FE       
3681   ED19 EE 00       				ldx	$00,X
3682   ED1B             			endif
3682   ED1B             
3682   ED1B             
3682   ED1B             
3682   ED1B             
3682   ED1B             
3682   ED1B~            			endif
3682   ED1B~            			endif
3682   ED1B             
3682   ED1B~            			endif
3682   ED1B~            			endif
3682   ED1B             
3682   ED18             
3682   ED18 02          
3682   ED19             
3682   ED19             
3682   ED19~            			endif
3682   ED19~            			endif
3682   ED19~            			endif
3682   ED19             
3682   ED1B             
3682   ED1B~            			endif
3682   ED1B~            			endif
3682   ED1B             
3683   ED1B A6 00       			ldaa	$00,X
3684   ED1D D6 BA       			ldab	cur_sndflags
3685   ED1F C5 40       			bitb	#$40
3686   ED21             			ifeq
3686   ED21             
3686   ED21 26 FE       
3687   ED23 8D 1D       				bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
3688   ED25             				ifcc
3688   ED25             
3688   ED25 25 FE       
3689   ED27 33          b_04E					pulb	
3690   ED28 32          					pula	
3691   ED29 20 2A       					bra	b_051
3692   ED2B             				endif
3692   ED2B             
3692   ED2B             
3692   ED2B             
3692   ED2B             
3692   ED2B             
3692   ED2B~            				endif
3692   ED2B~            				endif
3692   ED2B             
3692   ED2B~            				endif
3692   ED2B~            				endif
3692   ED2B             
3692   ED26             
3692   ED26 04          
3692   ED27             
3692   ED27             
3692   ED27~            				endif
3692   ED27~            				endif
3692   ED27~            				endif
3692   ED27             
3692   ED2B             
3692   ED2B~            				endif
3692   ED2B~            				endif
3692   ED2B             
3693   ED2B             			endif
3693   ED2B             
3693   ED2B             
3693   ED2B             
3693   ED2B             
3693   ED2B             
3693   ED2B~            			endif
3693   ED2B~            			endif
3693   ED2B             
3693   ED2B~            			endif
3693   ED2B~            			endif
3693   ED2B             
3693   ED22             
3693   ED22 08          
3693   ED23             
3693   ED23             
3693   ED23~            			endif
3693   ED23~            			endif
3693   ED23~            			endif
3693   ED23             
3693   ED2B             
3693   ED2B~            			endif
3693   ED2B~            			endif
3693   ED2B             
3694   ED2B 4D          b_050			tsta	
3695   ED2C 2A 6B       			bpl	snd_exit_pull			;pula,pulb,rts.
3696   ED2E D6 C6       			ldab	next_sndcnt
3697   ED30             			ifne
3697   ED30             
3697   ED30 27 FE       
3698   ED32 D6 C5             			ldab	next_sndflags
3699   ED34 8D 0C             			bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
3700   ED36 25 61             			bcs	snd_exit_pull			;pula,pulb,rts.
3701   ED38                   		endif
3701   ED38             
3701   ED38             
3701   ED38             
3701   ED38             
3701   ED38             
3701   ED38~                  		endif
3701   ED38~                  		endif
3701   ED38             
3701   ED38~                  		endif
3701   ED38~                  		endif
3701   ED38             
3701   ED31             
3701   ED31 06          
3701   ED32             
3701   ED32             
3701   ED32~                  		endif
3701   ED32~                  		endif
3701   ED32~                  		endif
3701   ED32             
3701   ED38             
3701   ED38~                  		endif
3701   ED38~                  		endif
3701   ED38             
3702   ED38 97 C5       			staa	next_sndflags
3703   ED3A 33          			pulb	
3704   ED3B 32          			pula	
3705   ED3C 97 C7       			staa	next_sndcmd
3706   ED3E D7 C6       			stab	next_sndcnt
3707   ED40 20 59       			bra	snd_exit					;rts
3708   ED42             			
3709   ED42 36          isnd_test		psha	
3710   ED43 37          			pshb	
3711   ED44 84 0F       			anda	#$0F
3712   ED46 C4 0F       			andb	#$0F
3713   ED48 11          			cba	
3714   ED49 33          			pulb	
3715   ED4A 32          			pula	
3716   ED4B             			ifeq
3716   ED4B             
3716   ED4B 26 FE       
3717   ED4D C5 20       				bitb	#$20
3718   ED4F             				ifeq
3718   ED4F             
3718   ED4F 26 FE       
3719   ED51 0D          					sec
3720   ED52             				endif
3720   ED52             
3720   ED52             
3720   ED52             
3720   ED52             
3720   ED52             
3720   ED52~            				endif
3720   ED52~            				endif
3720   ED52             
3720   ED52~            				endif
3720   ED52~            				endif
3720   ED52             
3720   ED50             
3720   ED50 01          
3720   ED51             
3720   ED51             
3720   ED51~            				endif
3720   ED51~            				endif
3720   ED51~            				endif
3720   ED51             
3720   ED52             
3720   ED52~            				endif
3720   ED52~            				endif
3720   ED52             
3721   ED52             			endif
3721   ED52             
3721   ED52             
3721   ED52             
3721   ED52             
3721   ED52             
3721   ED52~            			endif
3721   ED52~            			endif
3721   ED52             
3721   ED52~            			endif
3721   ED52~            			endif
3721   ED52             
3721   ED4C             
3721   ED4C 05          
3721   ED4D             
3721   ED4D             
3721   ED4D~            			endif
3721   ED4D~            			endif
3721   ED4D~            			endif
3721   ED4D             
3721   ED52             
3721   ED52~            			endif
3721   ED52~            			endif
3721   ED52             
3722   ED52 39          			rts	
3723   ED53             
3724   ED53             ;A=sound command
3725   ED53             ;B=count
3726   ED53 DF AA       isnd_mult		stx	thread_priority
3727   ED55 36          b_051			psha	
3728   ED56 37          			pshb	
3729   ED57 D7 B8       			stab	soundcount
3730   ED59 16          			tab	                              ;store our sound in B temporarily
3731   ED5A 86 7F       			ldaa	#$7F
3732   ED5C 8D 42       			bsr	send_snd				;Send Sound Stop Command
3733   ED5E 17          			tba	                              ;get it back
3734   ED5F 97 C2       			staa	soundindex				;Sound Command Table Index
3735   ED61 48          			asla	
3736   ED62 1B          			aba						;Index * 3
3737   ED63 FE E0 53    			ldx	gr_soundtable_ptr			;Game ROM: Sound Table Pointer
3738   ED66 BD EE FF    isnd_mult_x		jsr	xplusa				;X = X + A
3739   ED69 A6 02       			ldaa	$02,X					;Sound Command
3740   ED6B 81 FF       			cmpa	#$FF
3741   ED6D             			ifne						;Simple Sound
3741   ED6D             
3741   ED6D 27 FE       
3742   ED6F E6 00       				ldab	$00,X
3743   ED71 C4 7F       				andb	#$7F
3744   ED73 D7 BA       				stab	cur_sndflags			
3745   ED75 E6 01       				ldab	$01,X
3746   ED77 D7 BE       				stab	soundirqcount+1			
3747   ED79 7F 00 BD    				clr	soundirqcount
3748   ED7C DE BD       				ldx	soundirqcount			;Clear the MSB of the word counter ($BD,$BE)
3749   ED7E DF BF       				stx	soundindex_com			;Store the whole counter in the Common Sound Index
3750   ED80 C6 40       				ldab	#$40
3751   ED82 D7 C1       				stab	sys_soundflags			;Sound Flag?
3752   ED84 8D 18       				bsr	send_snd_save			;Send the Command, Save in 'lastsound'
3753   ED86             			else						;Complex Sound
3753   ED86             
3753   ED86             
3753   ED86             
3753   ED86             
3753   ED6E             
3753   ED6E             
3753   ED6E             
3753   ED6E~            			else						;Complex Sound
3753   ED6E~            			else						;Complex Sound
3753   ED6E~            			else						;Complex Sound
3753   ED6E~            			else						;Complex Sound
3753   ED6E             
3753   ED6E~            			else						;Complex Sound
3753   ED6E~            			else						;Complex Sound
3753   ED6E~            			else						;Complex Sound
3753   ED6E~            			else						;Complex Sound
3753   ED6E             
3753   ED6E             
3753   ED6E 19          
3753   ED86             
3753   ED86 20 FE       
3753   ED88             
3753   ED88             
3753   ED88             
3753   ED88~            			else						;Complex Sound
3753   ED88~            			else						;Complex Sound
3753   ED88~            			else						;Complex Sound
3753   ED88~            			else						;Complex Sound
3753   ED88~            			else						;Complex Sound
3753   ED88             
3753   ED88~            			else						;Complex Sound
3753   ED88~            			else						;Complex Sound
3753   ED88             
3753   ED88~            			else						;Complex Sound
3753   ED88~            			else						;Complex Sound
3753   ED88             
3754   ED88 EE 00       				ldx	$00,X					;Here if Complex Sound Command
3755   ED8A C6 80       				ldab	#$80
3756   ED8C D7 C1       				stab	sys_soundflags			;Set Status Flag
3757   ED8E EA 00       				orab	$00,X
3758   ED90 D7 BA       				stab	cur_sndflags
3759   ED92 08          				inx	
3760   ED93 DF BF       				stx	soundindex_com
3761   ED95 DF BB       				stx	soundptr
3762   ED97 8D 0E       				bsr	do_complex_snd			;Process it and send
3763   ED99             			endif
3763   ED99             
3763   ED99             
3763   ED99             
3763   ED99             
3763   ED99             
3763   ED99~            			endif
3763   ED99~            			endif
3763   ED99             
3763   ED99~            			endif
3763   ED99~            			endif
3763   ED99             
3763   ED87             
3763   ED87 11          
3763   ED88             
3763   ED88             
3763   ED88~            			endif
3763   ED88~            			endif
3763   ED88~            			endif
3763   ED88             
3763   ED99             
3763   ED99~            			endif
3763   ED99~            			endif
3763   ED99             
3764   ED99 33          snd_exit_pull	pulb	
3765   ED9A 32          			pula	
3766   ED9B DE AA       snd_exit		ldx	thread_priority
3767   ED9D 39          			rts	
3768   ED9E             
3769   ED9E             ;*****************************************************************
3770   ED9E             ;* Send the command to the sound board, stores the command sent
3771   ED9E             ;* in 'lastsound' for reference.
3772   ED9E             ;*****************************************************************			
3773   ED9E 97 B9       send_snd_save	staa	lastsound
3774   EDA0 BD E0 A1    send_snd		jsr	gr_sound_event			
3775   EDA3 B7 21 00    			staa	pia_sound_data
3776   EDA6 39          			rts	
3777   EDA7             
3778   EDA7             ;*****************************************************************
3779   EDA7             ;* This routine will send the next item in a complex sound
3780   EDA7             ;* index to the Sound board PIA.
3781   EDA7             ;*****************************************************************			
3782   EDA7 DE BB       do_complex_snd	ldx	soundptr
3783   EDA9 A6 00       _csnd_loop		ldaa	$00,X				;Load the first byte of this sequence
3784   EDAB 16          			tab	
3785   EDAC C4 C0       			andb	#$C0
3786   EDAE             			ifne					;Check bits $80 or $40
3786   EDAE             
3786   EDAE 27 FE       
3787   EDB0             				ifpl				;If bit $80 is set, then sound is immediate
3787   EDB0             
3787   EDB0 2B FE       
3788   EDB2 84 3F       					anda	#$3F
3789   EDB4 97 C3       					staa	csound_timer
3790   EDB6 08          					inx	
3791   EDB7 A6 00       					ldaa	$00,X
3792   EDB9 97 C4       b_05B					staa	csound_timer+1
3793   EDBB 96 BA       					ldaa	cur_sndflags
3794   EDBD 84 EF       					anda	#$EF			;Flag this sound as non-immediate (timer based)
3795   EDBF 97 BA       store_csndflg			staa	cur_sndflags	;Store Flag
3796   EDC1 08          					inx	
3797   EDC2 20 E5       					bra	_csnd_loop
3798   EDC4             				endif
3798   EDC4             
3798   EDC4             
3798   EDC4             
3798   EDC4             
3798   EDC4             
3798   EDC4~            				endif
3798   EDC4~            				endif
3798   EDC4             
3798   EDC4~            				endif
3798   EDC4~            				endif
3798   EDC4             
3798   EDB1             
3798   EDB1 12          
3798   EDB2             
3798   EDB2             
3798   EDB2~            				endif
3798   EDB2~            				endif
3798   EDB2~            				endif
3798   EDB2             
3798   EDC4             
3798   EDC4~            				endif
3798   EDC4~            				endif
3798   EDC4             
3799   EDC4 7F 00 C3    				clr	csound_timer
3800   EDC7 84 7F       				anda	#$7F
3801   EDC9 26 EE       				bne	b_05B			;If the timer is not zero, then flag this sound as non-immediate
3802   EDCB 96 BA       				ldaa	cur_sndflags
3803   EDCD 8A 10       				oraa	#$10			;Flag as non-immediate
3804   EDCF 20 EE       				bra	store_csndflg
3805   EDD1             			endif
3805   EDD1             
3805   EDD1             
3805   EDD1             
3805   EDD1             
3805   EDD1             
3805   EDD1~            			endif
3805   EDD1~            			endif
3805   EDD1             
3805   EDD1~            			endif
3805   EDD1~            			endif
3805   EDD1             
3805   EDAF             
3805   EDAF 21          
3805   EDB0             
3805   EDB0             
3805   EDB0~            			endif
3805   EDB0~            			endif
3805   EDB0~            			endif
3805   EDB0             
3805   EDD1             
3805   EDD1~            			endif
3805   EDD1~            			endif
3805   EDD1             
3806   EDD1 8D CB       			bsr	send_snd_save		;Send the Command, Save in 'lastsound'
3807   EDD3 08          			inx	
3808   EDD4 DF BB       			stx	soundptr			;Move pointer to next byte
3809   EDD6 A6 00       			ldaa	$00,X
3810   EDD8 81 3F       			cmpa	#$3F				;Are we done?
3811   EDDA             			ifeq
3811   EDDA             
3811   EDDA 26 FE       
3812   EDDC 96 BA       				ldaa	cur_sndflags		;Yes 
3813   EDDE 84 7F       				anda	#$7F				;Mark it as a simple sound now
3814   EDE0 97 BA       				staa	cur_sndflags
3815   EDE2             			endif
3815   EDE2             
3815   EDE2             
3815   EDE2             
3815   EDE2             
3815   EDE2             
3815   EDE2~            			endif
3815   EDE2~            			endif
3815   EDE2             
3815   EDE2~            			endif
3815   EDE2~            			endif
3815   EDE2             
3815   EDDB             
3815   EDDB 06          
3815   EDDC             
3815   EDDC             
3815   EDDC~            			endif
3815   EDDC~            			endif
3815   EDDC~            			endif
3815   EDDC             
3815   EDE2             
3815   EDE2~            			endif
3815   EDE2~            			endif
3815   EDE2             
3816   EDE2 DE C3       			ldx	csound_timer
3817   EDE4 DF BD       			stx	soundirqcount
3818   EDE6 39          			rts	
3819   EDE7             
3820   EDE7             ;**********************************************************
3821   EDE7             ;* This routine will check two of the switch flags in the
3822   EDE7             ;* B register (byte 1 of switch table). If the switch 
3823   EDE7             ;* is disabled for either flag (tilt and gameover) then
3824   EDE7             ;* the routine returns with the carry flag set.
3825   EDE7             ;**********************************************************			
3826   EDE7 36          check_sw_mask	psha	
3827   EDE8 B6 E0 4D    			ldaa	gr_lastswitch			;Last Switch # for Game
3828   EDEB 91 A5       			cmpa	sw_encoded				;Switch #
3829   EDED             			ifgt						;Out of Range!
3829   EDED             
3829   EDED 23 FE       
3830   EDEF C5 40       				bitb	#$40					;Flag 40: Active on Game Tilt
3831   EDF1             				ifeq
3831   EDF1             
3831   EDF1 26 FE       
3832   EDF3 7D 00 C8    					tst	flag_tilt				;Tilt Flag
3833   EDF6 26 09       					bne	sw_ignore
3834   EDF8             				endif
3834   EDF8             
3834   EDF8             
3834   EDF8             
3834   EDF8             
3834   EDF8             
3834   EDF8~            				endif
3834   EDF8~            				endif
3834   EDF8             
3834   EDF8~            				endif
3834   EDF8~            				endif
3834   EDF8             
3834   EDF2             
3834   EDF2 05          
3834   EDF3             
3834   EDF3             
3834   EDF3~            				endif
3834   EDF3~            				endif
3834   EDF3~            				endif
3834   EDF3             
3834   EDF8             
3834   EDF8~            				endif
3834   EDF8~            				endif
3834   EDF8             
3835   EDF8 C5 20       				bitb	#$20					;Flag 20: Active on Game Over
3836   EDFA 26 06       				bne	sw_active
3837   EDFC 7D 00 C9    				tst	flag_gameover			;Game Over?
3838   EDFF 27 01       				beq	sw_active
3839   EE01             			endif
3839   EE01             
3839   EE01             
3839   EE01             
3839   EE01             
3839   EE01             
3839   EE01~            			endif
3839   EE01~            			endif
3839   EE01             
3839   EE01~            			endif
3839   EE01~            			endif
3839   EE01             
3839   EDEE             
3839   EDEE 12          
3839   EDEF             
3839   EDEF             
3839   EDEF~            			endif
3839   EDEF~            			endif
3839   EDEF~            			endif
3839   EDEF             
3839   EE01             
3839   EE01~            			endif
3839   EE01~            			endif
3839   EE01             
3840   EE01 0D          sw_ignore		sec						;Ignore this switch when carry is set
3841   EE02 32          sw_active		pula	
3842   EE03 39          			rts	
3843   EE04             
3844   EE04             ;**********************************************************
3845   EE04             ;* Switch is in down position, see if we should run it.
3846   EE04             ;**********************************************************			
3847   EE04 BD EE F7    sw_down		jsr	sw_tbl_lookup		;Loads X with pointer to switch table entry
3848   EE07 E6 00       			ldab	$00,X				;GAME ROM Switch Data 1(Flags,etc)
3849   EE09 96 A4       			ldaa	sys_temp5
3850   EE0B 95 A2       			bita	sys_temp3
3851   EE0D 27 06       			beq	sw_dtime			;Is switch still down?
3852   EE0F C5 08       			bitb	#$08				;No, but check Flag 08 which is Instant Trigger
3853   EE11             			ifne					;Not instant,.. leave now.
3853   EE11             
3853   EE11 27 FE       
3854   EE13 20 04       				bra	sw_trig_yes			;Must have been instant, do it now.	
3855   EE15 C5 10       sw_dtime			bitb	#$10				;Switch has been down enough, but is it enabled?
3856   EE17             				ifne					;no.. leave now.
3856   EE17             
3856   EE17 27 FE       
3857   EE19 8D CC       sw_trig_yes				bsr	check_sw_mask		;Checks Switch Flags for Tilt and Gameover and if switch is in range
3858   EE1B             					ifcc					;If not okay to run... leave
3858   EE1B             
3858   EE1B 25 FE       
3859   EE1D 4F          						clra	
3860   EE1E C5 40       						bitb	#$40				;Is it Active on Game Tilt?
3861   EE20             						ifne					
3861   EE20             
3861   EE20 27 FE       
3862   EE22 8A 04       							oraa	#$04				;Give this thread a different priority then
3863   EE24             						endif
3863   EE24             
3863   EE24             
3863   EE24             
3863   EE24             
3863   EE24             
3863   EE24~            						endif
3863   EE24~            						endif
3863   EE24             
3863   EE24~            						endif
3863   EE24~            						endif
3863   EE24             
3863   EE21             
3863   EE21 02          
3863   EE22             
3863   EE22             
3863   EE22~            						endif
3863   EE22~            						endif
3863   EE22~            						endif
3863   EE22             
3863   EE24             
3863   EE24~            						endif
3863   EE24~            						endif
3863   EE24             
3864   EE24 97 AA       						staa	thread_priority
3865   EE26 96 A5       						ldaa	sw_encoded			;Switch # (encoded)
3866   EE28 EE 01       						ldx	$01,X
3867   EE2A C5 07       						bitb	#$07				;Was this a inline defined switch type? Type = 0
3868   EE2C             						ifeq					;Always?
3868   EE2C             
3868   EE2C 26 FE       
3869   EE2E EE 02       							ldx	$02,X				;Get handler address at base pointer + 2
3870   EE30             						endif
3870   EE30             
3870   EE30             
3870   EE30             
3870   EE30             
3870   EE30             
3870   EE30~            						endif
3870   EE30~            						endif
3870   EE30             
3870   EE30~            						endif
3870   EE30~            						endif
3870   EE30             
3870   EE2D             
3870   EE2D 02          
3870   EE2E             
3870   EE2E             
3870   EE2E~            						endif
3870   EE2E~            						endif
3870   EE2E~            						endif
3870   EE2E             
3870   EE30             
3870   EE30~            						endif
3870   EE30~            						endif
3870   EE30             
3871   EE30 5D          						tstb					;Is the handler code WML7 or Native?
3872   EE31             						ifmi					;Minus = WML7
3872   EE31             
3872   EE31 2A FE       
3873   EE33 DF A6       							stx	sys_temp_w2			;X = Handler Address
3874   EE35 CE F3 CB    							ldx	#switch_entry		;Will put this routine into VM.
3875   EE38             						endif
3875   EE38             
3875   EE38             
3875   EE38             
3875   EE38             
3875   EE38             
3875   EE38~            						endif
3875   EE38~            						endif
3875   EE38             
3875   EE38~            						endif
3875   EE38~            						endif
3875   EE38             
3875   EE32             
3875   EE32 05          
3875   EE33             
3875   EE33             
3875   EE33~            						endif
3875   EE33~            						endif
3875   EE33~            						endif
3875   EE33             
3875   EE38             
3875   EE38~            						endif
3875   EE38~            						endif
3875   EE38             
3876   EE38 BD E0 9F    						jsr	gr_switch_event		;Game ROM switch event hook
3877   EE3B BD EA 78    						jsr	newthread_sp		;Push VM: Data in A,B,X,threadpriority,$A6,$A7
3878   EE3E 25 69       						bcs	_clc_rts			;Carry set if VM was full and thread not added
3879   EE40             											;Exit now and don't mark switch as attended too.
3880   EE40             					endif
3880   EE40             
3880   EE40             
3880   EE40             
3880   EE40             
3880   EE40             
3880   EE40~            					endif
3880   EE40~            					endif
3880   EE40             
3880   EE40~            					endif
3880   EE40~            					endif
3880   EE40             
3880   EE1C             
3880   EE1C 23          
3880   EE1D             
3880   EE1D             
3880   EE1D~            					endif
3880   EE1D~            					endif
3880   EE1D~            					endif
3880   EE1D             
3880   EE40             
3880   EE40~            					endif
3880   EE40~            					endif
3880   EE40             
3881   EE40             				endif
3881   EE40             
3881   EE40             
3881   EE40             
3881   EE40             
3881   EE40             
3881   EE40~            				endif
3881   EE40~            				endif
3881   EE40             
3881   EE40~            				endif
3881   EE40~            				endif
3881   EE40             
3881   EE18             
3881   EE18 27          
3881   EE19             
3881   EE19             
3881   EE19~            				endif
3881   EE19~            				endif
3881   EE19~            				endif
3881   EE19             
3881   EE40             
3881   EE40~            				endif
3881   EE40~            				endif
3881   EE40             
3882   EE40             			endif
3882   EE40             
3882   EE40             
3882   EE40             
3882   EE40             
3882   EE40             
3882   EE40~            			endif
3882   EE40~            			endif
3882   EE40             
3882   EE40~            			endif
3882   EE40~            			endif
3882   EE40             
3882   EE12             
3882   EE12 2D          
3882   EE13             
3882   EE13             
3882   EE13~            			endif
3882   EE13~            			endif
3882   EE13~            			endif
3882   EE13             
3882   EE40             
3882   EE40~            			endif
3882   EE40~            			endif
3882   EE40             
3883   EE40 DE A0       			ldx	sys_temp1
3884   EE42 96 A2       			ldaa	sys_temp3
3885   EE44 A8 61       			eora	switch_debounced,X		;Clear Switch Matrix Flag (switch attended too)
3886   EE46 A7 61       			staa	switch_debounced,X
3887   EE48 DE A0       sw_proc		ldx	sys_temp1
3888   EE4A D6 A2       			ldab	sys_temp3
3889   EE4C 53          			comb	
3890   EE4D 17          			tba	
3891   EE4E E4 69       			andb	switch_masked,X
3892   EE50 E7 69       			stab	switch_masked,X
3893   EE52 16          			tab	
3894   EE53 E4 71       			andb	switch_pending,X
3895   EE55 E7 71       			stab	switch_pending,X
3896   EE57 16          			tab	
3897   EE58 A4 79       			anda	switch_aux,X
3898   EE5A A7 79       			staa	switch_aux,X
3899   EE5C E4 81       			andb	switch_b4,X
3900   EE5E E7 81       			stab	switch_b4,X
3901   EE60 39          			rts	
3902   EE61             
3903   EE61             ;****************************************************************************
3904   EE61             ;*
3905   EE61             ;****************************************************************************			
3906   EE61 DF A0       check_sw_close	stx	sys_temp1
3907   EE63 E6 61       			ldab	switch_debounced,X
3908   EE65 D7 A4       			stab	sys_temp5				;Store 
3909   EE67 97 A3       			staa	sys_temp4
3910   EE69 8D 2D       _sc01			bsr	getswitch				;Clear Carry if Switch Active or Done
3911   EE6B 25 28       			bcs	to_ldx_rts				;get outta here!
3912   EE6D 8D 3C       			bsr	sw_pack				;$A5 = ($A1<<3)+BitPos($A2)
3913   EE6F 8D 6A       			bsr	sw_get_time				;Gets Switch Trigger Data
3914   EE71             			ifne						;If it is not 0 then we must time it
3914   EE71             
3914   EE71 27 FE       
3915   EE73 9B AC       				adda	irqcount				;Number of IRQ's since last loop
3916   EE75 DE 96       				ldx	switch_queue_pointer
3917   EE77 8C 11 18    				cpx	#switch_queue_full
3918   EE7A 27 ED       				beq	_sc01
3919   EE7C A7 00       				staa	$00,X
3920   EE7E 96 A5       				ldaa	sw_encoded				;Encoded Switch Number
3921   EE80 A7 01       				staa	$01,X
3922   EE82 08          				inx	
3923   EE83 08          				inx	
3924   EE84 DF 96       				stx	switch_queue_pointer
3925   EE86 DE A0       				ldx	sys_temp1
3926   EE88 A6 81       				ldaa	switch_b4,X
3927   EE8A 9A A2       				oraa	sys_temp3
3928   EE8C A7 81       				staa	switch_b4,X
3929   EE8E 20 D9       				bra	_sc01
3930   EE90             			endif
3930   EE90             
3930   EE90             
3930   EE90             
3930   EE90             
3930   EE90             
3930   EE90~            			endif
3930   EE90~            			endif
3930   EE90             
3930   EE90~            			endif
3930   EE90~            			endif
3930   EE90             
3930   EE72             
3930   EE72 1D          
3930   EE73             
3930   EE73             
3930   EE73~            			endif
3930   EE73~            			endif
3930   EE73~            			endif
3930   EE73             
3930   EE90             
3930   EE90~            			endif
3930   EE90~            			endif
3930   EE90             
3931   EE90 BD EE 04    			jsr	sw_down				;Ready to do switch now!
3932   EE93 20 D4       			bra	_sc01
3933   EE95 DE A0       to_ldx_rts		ldx	sys_temp1
3934   EE97 39          			rts	
3935   EE98             
3936   EE98             ;****************************************************************************
3937   EE98             ;*
3938   EE98             ;****************************************************************************				
3939   EE98 4F          getswitch		clra	
3940   EE99 0D          			sec	
3941   EE9A D6 A3       			ldab	sys_temp4			;Switch Data
3942   EE9C             			ifne
3942   EE9C             
3942   EE9C 27 FE       
3943   EE9E             				begin
3943   EE9E             
3944   EE9E 49          					rola	
3945   EE9F 95 A3       					bita	sys_temp4
3946   EEA1             				neend
3946   EEA1             
3946   EEA1             
3946   EEA1~            				neend
3946   EEA1~            				neend
3946   EEA1~            				neend
3946   EEA1             
3946   EEA1 27 FB       
3946   EEA3             
3946   EEA3~            				neend
3946   EEA3~            				neend
3946   EEA3             
3947   EEA3 97 A2       				staa	sys_temp3
3948   EEA5 98 A3       				eora	sys_temp4
3949   EEA7 97 A3       				staa	sys_temp4
3950   EEA9 0C          _clc_rts			clc	
3951   EEAA             			endif
3951   EEAA             
3951   EEAA             
3951   EEAA             
3951   EEAA             
3951   EEAA             
3951   EEAA~            			endif
3951   EEAA~            			endif
3951   EEAA             
3951   EEAA~            			endif
3951   EEAA~            			endif
3951   EEAA             
3951   EE9D             
3951   EE9D 0C          
3951   EE9E             
3951   EE9E             
3951   EE9E~            			endif
3951   EE9E~            			endif
3951   EE9E~            			endif
3951   EE9E             
3951   EEAA             
3951   EEAA~            			endif
3951   EEAA~            			endif
3951   EEAA             
3952   EEAA 39          			rts	
3953   EEAB             
3954   EEAB             ;****************************************************************************
3955   EEAB             ;* Takes the decimal representation of the switch number contained in 
3956   EEAB             ;* sys_temp2 and sys_temp3 and converts it into a more compact form of 
3957   EEAB             ;* 	
3958   EEAB             ;* AAAAABBB
3959   EEAB             ;* 
3960   EEAB             ;* where AAAAA is the column number of the switch (sw 17 = 2)
3961   EEAB             ;*       BBB   is the bit position of the current switch (sw 17 = $01)
3962   EEAB             ;****************************************************************************	
3963   EEAB 96 A1       sw_pack		ldaa	sys_temp2
3964   EEAD 48          			asla	
3965   EEAE 48          			asla	
3966   EEAF 48          			asla	
3967   EEB0 D6 A2       			ldab	sys_temp3
3968   EEB2             			begin
3968   EEB2             
3969   EEB2 56          				rorb	
3970   EEB3 25 03       				bcs	pack_done
3971   EEB5 4C          				inca	
3972   EEB6             			loopend
3972   EEB6             
3972   EEB6             
3972   EEB6~            			loopend
3972   EEB6~            			loopend
3972   EEB6~            			loopend
3972   EEB6             
3972   EEB6 20 FA       
3972   EEB8             
3972   EEB8~            			loopend
3972   EEB8~            			loopend
3972   EEB8             
3973   EEB8 97 A5       pack_done		staa	sw_encoded
3974   EEBA 39          			rts	
3975   EEBB             
3976   EEBB             ;****************************************************************************
3977   EEBB             ;*
3978   EEBB             ;****************************************************************************				
3979   EEBB 97 A3       check_sw_open	staa	sys_temp4
3980   EEBD DF A0       			stx	sys_temp1
3981   EEBF 8D D7       b_06F			bsr	getswitch				;Clear Carry if Switch Activated
3982   EEC1 25 D2       			bcs	to_ldx_rts				;ldx $A0, rts.
3983   EEC3 8D E6       			bsr	sw_pack				;$A5(A) = ($A1<<3)+BitPos($A2) Encode Matrix Position
3984   EEC5 CE 11 00    			ldx	#switch_queue
3985   EEC8 9C 96       b_071			cpx	switch_queue_pointer
3986   EECA 27 F3       			beq	b_06F
3987   EECC A1 01       			cmpa	$01,X					;Is this switch in the buffer?
3988   EECE 26 07       			bne	b_070
3989   EED0 8D 3D       			bsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
3990   EED2 BD EE 48    			jsr	sw_proc
3991   EED5 20 E8       			bra	b_06F
3992   EED7 08          b_070			inx	
3993   EED8 08          			inx	
3994   EED9 20 ED       			bra	b_071
3995   EEDB             			
3996   EEDB             ;****************************************************************************
3997   EEDB             ;* Looks up the trigger data (time up and time down requirements) for the
3998   EEDB             ;* switch contained in 'sw_encoded'. If the switch table lists the trigger
3999   EEDB             ;* type as 0, then the trigger data is pulled from the location in bytes
4000   EEDB             ;* 2 and 3 of the switch table entry.
4001   EEDB             ;****************************************************************************				
4002   EEDB 8D 1A       sw_get_time		bsr	sw_tbl_lookup		;X = Data@ (E051 + $A5*3)
4003   EEDD A6 00       			ldaa	$00,X
4004   EEDF 84 07       			anda	#$07				;Get the trigger type for this switch
4005   EEE1             			ifne					;If 1-7, then look up data in switch type table
4005   EEE1             
4005   EEE1 27 FE       
4006   EEE3 48          				asla						
4007   EEE4 CE E0 67    				ldx	#gr_switchtypetable-2		;Game ROM Table: Switch Trigger Table
4008   EEE7 8D 16       				bsr	xplusa				;X = X + A
4009   EEE9             			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE9             
4009   EEE9             
4009   EEE9             
4009   EEE9             
4009   EEE2             
4009   EEE2             
4009   EEE2             
4009   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE2             
4009   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEE2             
4009   EEE2             
4009   EEE2 08          
4009   EEE9             
4009   EEE9 20 FE       
4009   EEEB             
4009   EEEB             
4009   EEEB             
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB             
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB             
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
4009   EEEB             
4010   EEEB EE 01       				ldx	$01,X
4011   EEED             			endif
4011   EEED             
4011   EEED             
4011   EEED             
4011   EEED             
4011   EEED             
4011   EEED~            			endif
4011   EEED~            			endif
4011   EEED             
4011   EEED~            			endif
4011   EEED~            			endif
4011   EEED             
4011   EEEA             
4011   EEEA 02          
4011   EEEB             
4011   EEEB             
4011   EEEB~            			endif
4011   EEEB~            			endif
4011   EEEB~            			endif
4011   EEEB             
4011   EEED             
4011   EEED~            			endif
4011   EEED~            			endif
4011   EEED             
4012   EEED 96 A4       			ldaa	sys_temp5			;Matrix Data
4013   EEEF 94 A2       			anda	sys_temp3			;Bit Position
4014   EEF1             			ifne
4014   EEF1             
4014   EEF1 27 FE       
4015   EEF3 08          				inx					;Point to Switch Close Trigger data instead
4016   EEF4             			endif
4016   EEF4             
4016   EEF4             
4016   EEF4             
4016   EEF4             
4016   EEF4             
4016   EEF4~            			endif
4016   EEF4~            			endif
4016   EEF4             
4016   EEF4~            			endif
4016   EEF4~            			endif
4016   EEF4             
4016   EEF2             
4016   EEF2 01          
4016   EEF3             
4016   EEF3             
4016   EEF3~            			endif
4016   EEF3~            			endif
4016   EEF3~            			endif
4016   EEF3             
4016   EEF4             
4016   EEF4~            			endif
4016   EEF4~            			endif
4016   EEF4             
4017   EEF4 A6 00       			ldaa	$00,X				;Load Trigger Data
4018   EEF6 39          			rts	
4019   EEF7             			
4020   EEF7 96 A5       sw_tbl_lookup	ldaa	sw_encoded
4021   EEF9 16          			tab	
4022   EEFA 48          			asla					;Times 3 for switch table entry length
4023   EEFB 1B          			aba	
4024   EEFC FE E0 51    			ldx	gr_switchtable_ptr		;*** Table Pointer ***
4025   EEFF 36          xplusa		psha	
4026   EF00 DF A6       			stx	sys_temp_w2
4027   EF02 9B A7       			adda	sys_temp_w2+1
4028   EF04 97 A7       			staa	sys_temp_w2+1
4029   EF06             			ifcs
4029   EF06             
4029   EF06 24 FE       
4030   EF08 7C 00 A6    				inc	sys_temp_w2
4031   EF0B             			endif 
4031   EF0B             
4031   EF0B             
4031   EF0B             
4031   EF0B             
4031   EF0B             
4031   EF0B~            			endif 
4031   EF0B~            			endif 
4031   EF0B             
4031   EF0B~            			endif 
4031   EF0B~            			endif 
4031   EF0B             
4031   EF07             
4031   EF07 03          
4031   EF08             
4031   EF08             
4031   EF08~            			endif 
4031   EF08~            			endif 
4031   EF08~            			endif 
4031   EF08             
4031   EF0B             
4031   EF0B~            			endif 
4031   EF0B~            			endif 
4031   EF0B             
4032   EF0B DE A6       			ldx	sys_temp_w2
4033   EF0D 32          			pula	
4034   EF0E 39          			rts	
4035   EF0F             			
4036   EF0F DF A6       copy_word		stx	sys_temp_w2
4037   EF11 DE 96       			ldx	switch_queue_pointer
4038   EF13 09          			dex	
4039   EF14 09          			dex	
4040   EF15 DF 96       			stx	switch_queue_pointer
4041   EF17 A6 00       			ldaa	$00,X
4042   EF19 E6 01       			ldab	$01,X
4043   EF1B DE A6       			ldx	sys_temp_w2
4044   EF1D A7 00       			staa	$00,X
4045   EF1F E7 01       			stab	$01,X
4046   EF21 39          			rts	
4047   EF22             ;**************************************************
4048   EF22             ;* Initializes the Virtual Machine stack. Routine
4049   EF22             ;* will set up all 'next' pointers for each thread
4050   EF22             ;* placeholder. The VM size is determined by the 
4051   EF22             ;* settings in the game ROM. This must be balanced
4052   EF22             ;* properly for each game so that the created
4053   EF22             ;* threads do not clobber the cpu stack since they
4054   EF22             ;* grow towards each other.
4055   EF22             ;**************************************************
4056   EF22 F6 E0 4B    setup_vm_stack	ldab	gr_maxthreads		;Max Size of VM
4057   EF25 CE 11 A8    			ldx	#$11A8
4058   EF28 DF AF       			stx	vm_nextslot
4059   EF2A             			begin
4059   EF2A             
4060   EF2A DF 9C       				stx	temp2
4061   EF2C 96 9D       				ldaa	temp2+1
4062   EF2E 8B 12       				adda	#$12
4063   EF30 A7 01       				staa	$01,X
4064   EF32 86 00       				ldaa	#$00
4065   EF34 99 9C       				adca	temp2
4066   EF36 A7 00       				staa	$00,X
4067   EF38 5A          				decb	
4068   EF39 27 04       				beq	stack_done
4069   EF3B EE 00       				ldx	$00,X
4070   EF3D             			loopend
4070   EF3D             
4070   EF3D             
4070   EF3D~            			loopend
4070   EF3D~            			loopend
4070   EF3D~            			loopend
4070   EF3D             
4070   EF3D 20 EB       
4070   EF3F             
4070   EF3F~            			loopend
4070   EF3F~            			loopend
4070   EF3F             
4071   EF3F E7 00       stack_done		stab	$00,X
4072   EF41 E7 01       			stab	$01,X
4073   EF43 D7 AD       			stab	vm_base
4074   EF45 D7 AE       			stab	vm_base+1
4075   EF47 CE 00 AD    			ldx	#vm_base
4076   EF4A DF B3       			stx	vm_tail_thread
4077   EF4C 39          			rts
4078   EF4D             ;**************************************************
4079   EF4D             ;* Adds B to X, Protects A
4080   EF4D             ;**************************************************				
4081   EF4D 36          xplusb		psha	
4082   EF4E 17          			tba	
4083   EF4F 8D AE       			bsr	xplusa		;X = X + A
4084   EF51 32          			pula	
4085   EF52 39          			rts	
4086   EF53             ;**************************************************
4087   EF53             ;* Pulls data from CMOS location in X and X+1
4088   EF53             ;* and puts it in A. X is double incremented.
4089   EF53             ;*
4090   EF53             ;* Requires:	X
4091   EF53             ;* Protects:	B
4092   EF53             ;* Output:		A
4093   EF53             ;**************************************************		
4094   EF53 37          cmosinc_a		pshb	
4095   EF54 A6 00       			ldaa	$00,X
4096   EF56 E6 01       			ldab	$01,X
4097   EF58 08          			inx	
4098   EF59 08          			inx	
4099   EF5A C4 0F       			andb	#$0F
4100   EF5C 48          			asla	
4101   EF5D 48          			asla	
4102   EF5E 48          			asla	
4103   EF5F 48          			asla	
4104   EF60 1B          			aba	
4105   EF61 33          			pulb	
4106   EF62 39          			rts	
4107   EF63             ;**************************************************
4108   EF63             ;* Pulls data from CMOS location in X and X+1
4109   EF63             ;* and puts it in B. X is double incremented.
4110   EF63             ;*
4111   EF63             ;* Requires:	X
4112   EF63             ;* Protects:	A
4113   EF63             ;* Output:		B
4114   EF63             ;**************************************************				
4115   EF63 36          cmosinc_b		psha	
4116   EF64 8D ED       			bsr	cmosinc_a
4117   EF66 16          			tab	
4118   EF67 32          			pula	
4119   EF68 39          			rts	
4120   EF69             ;**************************************************
4121   EF69             ;* Transfers the byte value in B to the CMOS RAM
4122   EF69             ;* location contained in X. The byte is stored in
4123   EF69             ;* two consecutive nybbles in CMOS. X is double 
4124   EF69             ;* incremented.
4125   EF69             ;*
4126   EF69             ;* Requires: 	B,X
4127   EF69             ;* Protects:	A
4128   EF69             ;**************************************************
4129   EF69 36          b_cmosinc		psha	
4130   EF6A 17          			tba	
4131   EF6B 8D 42       			bsr	a_cmosinc		;A -> CMOS,X++
4132   EF6D 32          			pula	
4133   EF6E 39          			rts	
4134   EF6F             ;**************************************************
4135   EF6F             ;* Reset Game Audits only
4136   EF6F             ;**************************************************			
4137   EF6F CE 00 66    reset_audits	ldx	#$0066		;Clear RAM from 0100-0165
4138   EF72 20 03       			bra	clr_ram
4139   EF74 CE 01 00    clr_ram_100		ldx	#cmos_base
4140   EF77             clr_ram		begin
4140   EF77             
4141   EF77 6F FF       				clr	$FF,X
4142   EF79 09          				dex	
4143   EF7A             			eqend
4143   EF7A             
4143   EF7A             
4143   EF7A~            			eqend
4143   EF7A~            			eqend
4143   EF7A~            			eqend
4143   EF7A             
4143   EF7A 26 FB       
4143   EF7C             
4143   EF7C~            			eqend
4143   EF7C~            			eqend
4143   EF7C             
4144   EF7C 39          			rts	
4145   EF7D             ;**************************************************
4146   EF7D             ;* Restores Factory Settings and resets all audit 
4147   EF7D             ;* information, reloads pricing data and restores 
4148   EF7D             ;* the backup high score.
4149   EF7D             ;**************************************************			
4150   EF7D             factory_zeroaudits	
4151   EF7D 8D F5       			bsr	clr_ram_100				;Clear RAM 0100-01FF
4152   EF7F CE 01 7D    			ldx	#adj_base
4153   EF82 DF 9A       			stx	temp1
4154   EF84 CE E0 03    			ldx	#gr_cmoscsum			;Begining of Default Audit Data
4155   EF87 C6 18       			ldab	#$18
4156   EF89 8D 59       			bsr	copyblock2				;Transfer Audit Data
4157   EF8B C6 01       			ldab	#$01
4158   EF8D B6 21 00    			ldaa	pia_sound_data			;Read W29 Jumper Setting
4159   EF90             			ifmi
4159   EF90             
4159   EF90 2A FE       
4160   EF92 5C          				incb
4161   EF93             			endif
4161   EF93             
4161   EF93             
4161   EF93             
4161   EF93             
4161   EF93             
4161   EF93~            			endif
4161   EF93~            			endif
4161   EF93             
4161   EF93~            			endif
4161   EF93~            			endif
4161   EF93             
4161   EF91             
4161   EF91 01          
4161   EF92             
4161   EF92             
4161   EF92~            			endif
4161   EF92~            			endif
4161   EF92~            			endif
4161   EF92             
4161   EF93             
4161   EF93~            			endif
4161   EF93~            			endif
4161   EF93             
4162   EF93 8D 3B       			bsr	loadpricing				;Load Pricing Data
4163   EF95 8D 06       			bsr	restore_hstd			;Restore Backup High Score
4164   EF97 CE FC A3    			ldx	#to_audadj
4165   EF9A 7E EA C4    			jmp	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
4166   EF9D             			
4167   EF9D             ;**************************************************
4168   EF9D             ;* Clears the CMOS High Score RAM then copies
4169   EF9D             ;* the backup high score.
4170   EF9D             ;**************************************************			
4171   EF9D 4F          restore_hstd	clra	
4172   EF9E BD FB 24    			jsr	fill_hstd_digits			;Fill HSTD Digits with A
4173   EFA1 CE 01 81    			ldx	#adj_backuphstd
4174   EFA4 8D AD       			bsr	cmosinc_a				;CMOS,X++ -> A
4175   EFA6 16          			tab	
4176   EFA7 BD EC F3    			jsr	split_ab				;Shift A<<4 B>>4
4177   EFAA CE 01 66    			ldx	#aud_currenthstd			;CMOS: Current HSTD
4178   EFAD 8D BA       			bsr	b_cmosinc				;B -> CMOS,X++
4179   EFAF             
4180   EFAF             ;**************************************************
4181   EFAF             ;* Transfers the byte value in A to the CMOS RAM
4182   EFAF             ;* location contained in X. The byte is stored in
4183   EFAF             ;* two consecutive nybbles in CMOS. X is double 
4184   EFAF             ;* incremented.
4185   EFAF             ;*
4186   EFAF             ;* Requires: 	A,X
4187   EFAF             ;* Protects:	B
4188   EFAF             ;**************************************************			
4189   EFAF 36          a_cmosinc		psha	
4190   EFB0 A7 01       			staa	$01,X
4191   EFB2 44          			lsra	
4192   EFB3 44          			lsra	
4193   EFB4 44          			lsra	
4194   EFB5 44          			lsra	
4195   EFB6 A7 00       			staa	$00,X
4196   EFB8 08          			inx	
4197   EFB9 08          			inx	
4198   EFBA 32          			pula	
4199   EFBB 39          			rts	
4200   EFBC             
4201   EFBC             ;********************************************************
4202   EFBC             ;* Copies B bytes of data from address in X(temp2) to 
4203   EFBC             ;* address in temp1
4204   EFBC             ;*
4205   EFBC             ;* Requires:	B,X,temp1
4206   EFBC             ;* Protects:	A
4207   EFBC             ;* Destroys:	B,X,temp1,temp2
4208   EFBC             ;* Output:		B = 0
4209   EFBC             ;******************************************************** 			
4210   EFBC 36          copyblock		psha	
4211   EFBD             			begin
4211   EFBD             
4212   EFBD A6 00       				ldaa	$00,X
4213   EFBF 08          				inx	
4214   EFC0 DF 9C       				stx	temp2
4215   EFC2 DE 9A       				ldx	temp1
4216   EFC4 A7 00       				staa	$00,X
4217   EFC6 08          				inx	
4218   EFC7 DF 9A       				stx	temp1
4219   EFC9 DE 9C       				ldx	temp2
4220   EFCB 5A          				decb	
4221   EFCC             			eqend
4221   EFCC             
4221   EFCC             
4221   EFCC~            			eqend
4221   EFCC~            			eqend
4221   EFCC~            			eqend
4221   EFCC             
4221   EFCC 26 EF       
4221   EFCE             
4221   EFCE~            			eqend
4221   EFCE~            			eqend
4221   EFCE             
4222   EFCE 32          			pula	
4223   EFCF 39          			rts
4224   EFD0             
4225   EFD0             ;************************************************
4226   EFD0             ;* Copies the default pricing data block from
4227   EFD0             ;* the game ROM to CMOS RAM. Register B contains
4228   EFD0             ;* either $01 or $02 which specifies which 
4229   EFD0             ;* default table to copy based on MPU jumper W29
4230   EFD0             ;*
4231   EFD0             ;* Requires: B
4232   EFD0             ;************************************************				
4233   EFD0 F7 01 AE    loadpricing		stab	adj_pricecontrol+1		;Get the LSB of the pricing index
4234   EFD3 CE 01 AF    			ldx	#cmos_pricingbase   
4235   EFD6 DF 9A       			stx	temp1
4236   EFD8 58          			aslb						
4237   EFD9 17          			tba	
4238   EFDA 48          			asla	
4239   EFDB 1B          			aba	
4240   EFDC CE E0 15    			ldx	#gr_gameadjust7			;*** Table Pointer ***
4241   EFDF BD EE FF    			jsr	xplusa				;X = X + A
4242   EFE2 C6 06       			ldab	#$06
4243   EFE4 36          copyblock2		psha
4244   EFE5             			begin	
4244   EFE5             
4245   EFE5 A6 00       				ldaa	$00,X
4246   EFE7 08          				inx	
4247   EFE8 DF 9C       				stx	temp2
4248   EFEA DE 9A       				ldx	temp1
4249   EFEC 8D C1       				bsr	a_cmosinc				;A -> CMOS,X++
4250   EFEE DF 9A       				stx	temp1
4251   EFF0 DE 9C       				ldx	temp2
4252   EFF2 5A          				decb	
4253   EFF3             			eqend
4253   EFF3             
4253   EFF3             
4253   EFF3~            			eqend
4253   EFF3~            			eqend
4253   EFF3~            			eqend
4253   EFF3             
4253   EFF3 26 F0       
4253   EFF5             
4253   EFF5~            			eqend
4253   EFF5~            			eqend
4253   EFF5             
4254   EFF5 32          			pula	
4255   EFF6 39          			rts
4256   EFF7             			
4257   EFF7             ;******************************************************
4258   EFF7             ;* IRQ Routine
4259   EFF7             ;*
4260   EFF7             ;* This is the main timekeeping section of the code. 
4261   EFF7             ;* All events are kept track of by couting the IRQ's
4262   EFF7             ;* that have run.
4263   EFF7             ;*
4264   EFF7             ;* Tasks processed in the IRQ:
4265   EFF7             ;*		
4266   EFF7             ;*		Update Next Lamp
4267   EFF7             ;******************************************************			
4268   EFF7             sys_irq			
4269   EFF7             			;***********************************
4270   EFF7             			;* Start IRQ with Lamps...
4271   EFF7             			;***********************************
4272   EFF7 86 FF       			ldaa	#$FF
4273   EFF9 D6 89       			ldab	irq_counter
4274   EFFB 56          			rorb	
4275   EFFC             			ifcc						;Do Lamps every other IRQ
4275   EFFC             
4275   EFFC 25 FE       
4276   EFFE 7C 00 8B    				inc	lamp_index_word+1
4277   F001 CE 24 00    				ldx	#pia_lamp_row_data			;Lamp PIA Offset
4278   F004 A7 00       				staa	$00,X					;Blank Lamp Rows with an $FF
4279   F006 E6 03       				ldab	$03,X
4280   F008 6F 03       				clr	$03,X
4281   F00A A7 02       				staa	$02,X					;Blank Lamp Columns with $FF
4282   F00C E7 03       				stab	$03,X
4283   F00E 96 8C       				ldaa	lamp_bit				;Which strobe are we on
4284   F010 48          				asla						;Shift to next one
4285   F011             				ifeq						;Did it shift off end?			
4285   F011             
4285   F011 26 FE       
4286   F013 97 8B       					staa	lamp_index_word+1			;Yes, Reset lamp strobe count
4287   F015 97 89       					staa	irq_counter				;And Reset IRQ counter
4288   F017 4C          					inca						;Make it a 1
4289   F018             				endif
4289   F018             
4289   F018             
4289   F018             
4289   F018             
4289   F018             
4289   F018~            				endif
4289   F018~            				endif
4289   F018             
4289   F018~            				endif
4289   F018~            				endif
4289   F018             
4289   F012             
4289   F012 05          
4289   F013             
4289   F013             
4289   F013~            				endif
4289   F013~            				endif
4289   F013~            				endif
4289   F013             
4289   F018             
4289   F018~            				endif
4289   F018~            				endif
4289   F018             
4290   F018 97 8C       				staa	lamp_bit			;Store new lamp strobe bit position
4291   F01A A7 02       				staa	$02,X				;Put the strobe out there
4292   F01C A1 02       				cmpa	$02,X				;Did it take?
4293   F01E             				ifeq
4293   F01E             
4293   F01E 26 FE       
4294   F020 DE 8A       					ldx	lamp_index_word			;This will always be $0001-$0080, it is
4295   F022             											;used to index the lamp buffer bit positions.			
4296   F022 A6 20       					ldaa	lampbufferselect,X		;0=buffer_0 1=buffer_1
4297   F024 16          					tab	
4298   F025 53          					comb	
4299   F026 E4 10       					andb	lampbuffer0,X
4300   F028 A4 28       					anda	lampbuffer1,X
4301   F02A 1B          					aba	
4302   F02B 43          					coma	
4303   F02C B7 24 00    					staa	pia_lamp_row_data			;Store Lamp Row Data
4304   F02F             				endif
4304   F02F             
4304   F02F             
4304   F02F             
4304   F02F             
4304   F02F             
4304   F02F~            				endif
4304   F02F~            				endif
4304   F02F             
4304   F02F~            				endif
4304   F02F~            				endif
4304   F02F             
4304   F01F             
4304   F01F 0F          
4304   F020             
4304   F020             
4304   F020~            				endif
4304   F020~            				endif
4304   F020~            				endif
4304   F020             
4304   F02F             
4304   F02F~            				endif
4304   F02F~            				endif
4304   F02F             
4305   F02F             			endif
4305   F02F             
4305   F02F             
4305   F02F             
4305   F02F             
4305   F02F             
4305   F02F~            			endif
4305   F02F~            			endif
4305   F02F             
4305   F02F~            			endif
4305   F02F~            			endif
4305   F02F             
4305   EFFD             
4305   EFFD 31          
4305   EFFE             
4305   EFFE             
4305   EFFE~            			endif
4305   EFFE~            			endif
4305   EFFE~            			endif
4305   EFFE             
4305   F02F             
4305   F02F~            			endif
4305   F02F~            			endif
4305   F02F             
4306   F02F             			;***********************************
4307   F02F             			;* Now we will do the displays
4308   F02F             			;***********************************
4309   F02F DE 8A       			ldx	lamp_index_word		;Reset X back to $0000
4310   F031 D6 89       			ldab	irq_counter
4311   F033 C4 07       			andb	#$07
4312   F035             			ifeq				;Branch on Digits 2-8 or 10-16 (scores)
4312   F035             
4312   F035 26 FE       
4313   F037 86 FF       				ldaa	#$FF
4314   F039 B7 28 02    				staa	pia_disp_seg_data			;Display PIA Port B
4315   F03C D6 89       				ldab	irq_counter
4316   F03E F7 28 00    				stab	pia_disp_digit_data		;Display PIA Port A
4317   F041 26 6A       				bne	b_081
4318   F043 7C 00 95    				inc	irqcount16
4319   F046 96 60       				ldaa	comma_flags
4320   F048 97 8D       				staa	comma_data_temp
4321   F04A 96 5C       				ldaa	dmask_p1
4322   F04C 97 8E       				staa	credp1p2_bufferselect
4323   F04E 96 5E       				ldaa	dmask_p3
4324   F050 97 8F       				staa	mbipp3p4_bufferselect
4325   F052 D6 5A       				ldab	cred_b0
4326   F054 79 00 8E    				rol	credp1p2_bufferselect
4327   F057             				ifcs
4327   F057             
4327   F057 24 FE       
4328   F059 D6 5B       					ldab	cred_b1
4329   F05B             				endif
4329   F05B             
4329   F05B             
4329   F05B             
4329   F05B             
4329   F05B             
4329   F05B~            				endif
4329   F05B~            				endif
4329   F05B             
4329   F05B~            				endif
4329   F05B~            				endif
4329   F05B             
4329   F058             
4329   F058 02          
4329   F059             
4329   F059             
4329   F059~            				endif
4329   F059~            				endif
4329   F059~            				endif
4329   F059             
4329   F05B             
4329   F05B~            				endif
4329   F05B~            				endif
4329   F05B             
4330   F05B 96 58       				ldaa	mbip_b0
4331   F05D 79 00 8F    				rol	mbipp3p4_bufferselect
4332   F060 24 43       				bcc	b_083
4333   F062 96 59       				ldaa	mbip_b1
4334   F064 20 3F       				bra	b_083
4335   F066             			endif
4335   F066             
4335   F066             
4335   F066             
4335   F066             
4335   F066             
4335   F066~            			endif
4335   F066~            			endif
4335   F066             
4335   F066~            			endif
4335   F066~            			endif
4335   F066             
4335   F036             
4335   F036 2F          
4335   F037             
4335   F037             
4335   F037~            			endif
4335   F037~            			endif
4335   F037~            			endif
4335   F037             
4335   F066             
4335   F066~            			endif
4335   F066~            			endif
4335   F066             
4336   F066 D7 90       			stab	swap_player_displays
4337   F068 5A          			decb	
4338   F069 27 04       			beq	b_084
4339   F06B C0 03       			subb	#$03
4340   F06D             			ifeq
4340   F06D             
4340   F06D 26 FE       
4341   F06F 79 00 8D    b_084				rol	comma_data_temp			;Commas...
4342   F072 56          				rorb	
4343   F073 79 00 8D    				rol	comma_data_temp
4344   F076 56          				rorb	
4345   F077 FA 21 02    				orab	pia_comma_data			;Store Commas
4346   F07A             			else
4346   F07A             
4346   F07A             
4346   F07A             
4346   F07A             
4346   F06E             
4346   F06E             
4346   F06E             
4346   F06E~            			else
4346   F06E~            			else
4346   F06E~            			else
4346   F06E~            			else
4346   F06E             
4346   F06E~            			else
4346   F06E~            			else
4346   F06E~            			else
4346   F06E~            			else
4346   F06E             
4346   F06E             
4346   F06E 0D          
4346   F07A             
4346   F07A 20 FE       
4346   F07C             
4346   F07C             
4346   F07C             
4346   F07C~            			else
4346   F07C~            			else
4346   F07C~            			else
4346   F07C~            			else
4346   F07C~            			else
4346   F07C             
4346   F07C~            			else
4346   F07C~            			else
4346   F07C             
4346   F07C~            			else
4346   F07C~            			else
4346   F07C             
4347   F07C F6 21 02    				ldab	pia_comma_data			;Get Comma Data
4348   F07F C4 3F       				andb	#$3F
4349   F081             			endif						;Blank them out.
4349   F081             
4349   F081             
4349   F081             
4349   F081             
4349   F081             
4349   F081~            			endif						;Blank them out.
4349   F081~            			endif						;Blank them out.
4349   F081             
4349   F081~            			endif						;Blank them out.
4349   F081~            			endif						;Blank them out.
4349   F081             
4349   F07B             
4349   F07B 05          
4349   F07C             
4349   F07C             
4349   F07C~            			endif						;Blank them out.
4349   F07C~            			endif						;Blank them out.
4349   F07C~            			endif						;Blank them out.
4349   F07C             
4349   F081             
4349   F081~            			endif						;Blank them out.
4349   F081~            			endif						;Blank them out.
4349   F081             
4350   F081 F7 21 02    			stab	pia_comma_data			;Store the data.
4351   F084 86 FF       			ldaa	#$FF
4352   F086 B7 28 02    			staa	pia_disp_seg_data			;Blank the Display Digits
4353   F089 96 89       			ldaa	irq_counter
4354   F08B B7 28 00    			staa	pia_disp_digit_data		;Send Display Strobe
4355   F08E A6 38       			ldaa	score_p1_b0,X			;Buffer 0
4356   F090 79 00 8E    			rol	credp1p2_bufferselect
4357   F093             			ifcs
4357   F093             
4357   F093 24 FE       
4358   F095 A6 48       				ldaa	score_p1_b1,X			;Buffer 1
4359   F097             			endif
4359   F097             
4359   F097             
4359   F097             
4359   F097             
4359   F097             
4359   F097~            			endif
4359   F097~            			endif
4359   F097             
4359   F097~            			endif
4359   F097~            			endif
4359   F097             
4359   F094             
4359   F094 02          
4359   F095             
4359   F095             
4359   F095~            			endif
4359   F095~            			endif
4359   F095~            			endif
4359   F095             
4359   F097             
4359   F097~            			endif
4359   F097~            			endif
4359   F097             
4360   F097 E6 40       			ldab	score_p3_b0,X			;Buffer 0
4361   F099 79 00 8F    			rol	mbipp3p4_bufferselect
4362   F09C             			ifcs
4362   F09C             
4362   F09C 24 FE       
4363   F09E E6 50       				ldab	score_p3_b1,X			;Buffer 1
4364   F0A0             			endif
4364   F0A0             
4364   F0A0             
4364   F0A0             
4364   F0A0             
4364   F0A0             
4364   F0A0~            			endif
4364   F0A0~            			endif
4364   F0A0             
4364   F0A0~            			endif
4364   F0A0~            			endif
4364   F0A0             
4364   F09D             
4364   F09D 02          
4364   F09E             
4364   F09E             
4364   F09E~            			endif
4364   F09E~            			endif
4364   F09E~            			endif
4364   F09E             
4364   F0A0             
4364   F0A0~            			endif
4364   F0A0~            			endif
4364   F0A0             
4365   F0A0 76 00 90    			ror	swap_player_displays
4366   F0A3             			ifcc
4366   F0A3             
4366   F0A3 25 FE       
4367   F0A5 54          b_083				lsrb						;Show BA
4368   F0A6 54          				lsrb	
4369   F0A7 54          				lsrb	
4370   F0A8 54          				lsrb	
4371   F0A9 84 F0       				anda	#$F0
4372   F0AB 20 20       				bra	b_08A					;Goto Display End
4373   F0AD 96 5D       b_081				ldaa	dmask_p2
4374   F0AF 97 8E       				staa	credp1p2_bufferselect
4375   F0B1 96 5F       				ldaa	dmask_p4
4376   F0B3 97 8F       				staa	mbipp3p4_bufferselect
4377   F0B5 D6 5A       				ldab	cred_b0
4378   F0B7 79 00 8E    				rol	credp1p2_bufferselect
4379   F0BA             				ifcs
4379   F0BA             
4379   F0BA 24 FE       
4380   F0BC D6 5B       					ldab	cred_b1
4381   F0BE             				endif
4381   F0BE             
4381   F0BE             
4381   F0BE             
4381   F0BE             
4381   F0BE             
4381   F0BE~            				endif
4381   F0BE~            				endif
4381   F0BE             
4381   F0BE~            				endif
4381   F0BE~            				endif
4381   F0BE             
4381   F0BB             
4381   F0BB 02          
4381   F0BC             
4381   F0BC             
4381   F0BC~            				endif
4381   F0BC~            				endif
4381   F0BC~            				endif
4381   F0BC             
4381   F0BE             
4381   F0BE~            				endif
4381   F0BE~            				endif
4381   F0BE             
4382   F0BE 96 58       				ldaa	mbip_b0
4383   F0C0 79 00 8F    				rol	mbipp3p4_bufferselect
4384   F0C3             				ifcs
4384   F0C3             
4384   F0C3 24 FE       
4385   F0C5 96 59       					ldaa	mbip_b1
4386   F0C7             				endif
4386   F0C7             
4386   F0C7             
4386   F0C7             
4386   F0C7             
4386   F0C7             
4386   F0C7~            				endif
4386   F0C7~            				endif
4386   F0C7             
4386   F0C7~            				endif
4386   F0C7~            				endif
4386   F0C7             
4386   F0C4             
4386   F0C4 02          
4386   F0C5             
4386   F0C5             
4386   F0C5~            				endif
4386   F0C5~            				endif
4386   F0C5~            				endif
4386   F0C5             
4386   F0C7             
4386   F0C7~            				endif
4386   F0C7~            				endif
4386   F0C7             
4387   F0C7             			endif
4387   F0C7             
4387   F0C7             
4387   F0C7             
4387   F0C7             
4387   F0C7             
4387   F0C7~            			endif
4387   F0C7~            			endif
4387   F0C7             
4387   F0C7~            			endif
4387   F0C7~            			endif
4387   F0C7             
4387   F0A4             
4387   F0A4 22          
4387   F0A5             
4387   F0A5             
4387   F0A5~            			endif
4387   F0A5~            			endif
4387   F0A5~            			endif
4387   F0A5             
4387   F0C7             
4387   F0C7~            			endif
4387   F0C7~            			endif
4387   F0C7             
4388   F0C7 48          			asla						;Show AB
4389   F0C8 48          			asla	
4390   F0C9 48          			asla	
4391   F0CA 48          			asla	
4392   F0CB C4 0F       			andb	#$0F					;Fall through to end
4393   F0CD 1B          b_08A			aba	
4394   F0CE B7 28 02    			staa	pia_disp_seg_data			;Store Digit BCD Data
4395   F0D1             			;***********************************
4396   F0D1             			;* Done with Displays
4397   F0D1             			;* Increment the IRQ counter
4398   F0D1             			;***********************************
4399   F0D1 96 89       			ldaa	irq_counter				;We need to increment this every time.
4400   F0D3 4C          			inca	
4401   F0D4 97 89       			staa	irq_counter
4402   F0D6             			;***********************************
4403   F0D6             			;* Now do switches, The switch logic
4404   F0D6             			;* has a total of 5 data buffers.
4405   F0D6             			;* These are used for debouncing the
4406   F0D6             			;* switch through software.
4407   F0D6             			;***********************************
4408   F0D6 46          			rora	
4409   F0D7             			ifcc						;Every other IRQ, do all switches
4409   F0D7             
4409   F0D7 25 FE       
4410   F0D9 86 01       				ldaa	#$01
4411   F0DB B7 30 02    				staa	pia_switch_strobe_data		;Store Switch Column Drives
4412   F0DE CE 00 00    				ldx	#ram_base
4413   F0E1             				begin
4413   F0E1             
4414   F0E1 A6 61       					ldaa	switch_debounced,X
4415   F0E3 B8 30 00    					eora	pia_switch_return_data		;Switch Row Return Data
4416   F0E6 16          					tab	
4417   F0E7 A4 69       					anda	switch_masked,X
4418   F0E9 AA 71       					oraa	switch_pending,X
4419   F0EB A7 71       					staa	switch_pending,X
4420   F0ED E7 69       					stab	switch_masked,X
4421   F0EF 53          					comb	
4422   F0F0 E4 71       					andb	switch_pending,X
4423   F0F2 EA 79       					orab	switch_aux,X
4424   F0F4 E7 79       					stab	switch_aux,X
4425   F0F6 08          					inx	
4426   F0F7 78 30 02    					asl	pia_switch_strobe_data		;Shift to Next Column Drive
4427   F0FA             				csend
4427   F0FA             
4427   F0FA             
4427   F0FA~            				csend
4427   F0FA~            				csend
4427   F0FA~            				csend
4427   F0FA             
4427   F0FA 24 E5       
4427   F0FC             
4427   F0FC~            				csend
4427   F0FC~            				csend
4427   F0FC             
4428   F0FC             			endif
4428   F0FC             
4428   F0FC             
4428   F0FC             
4428   F0FC             
4428   F0FC             
4428   F0FC~            			endif
4428   F0FC~            			endif
4428   F0FC             
4428   F0FC~            			endif
4428   F0FC~            			endif
4428   F0FC             
4428   F0D8             
4428   F0D8 23          
4428   F0D9             
4428   F0D9             
4428   F0D9~            			endif
4428   F0D9~            			endif
4428   F0D9~            			endif
4428   F0D9             
4428   F0FC             
4428   F0FC~            			endif
4428   F0FC~            			endif
4428   F0FC             
4429   F0FC             			;***********************************
4430   F0FC             			;* Now do solenoids
4431   F0FC             			;***********************************
4432   F0FC 96 94       			ldaa	solenoid_counter			;Solenoid Counter
4433   F0FE             			ifne
4433   F0FE             
4433   F0FE 27 FE       
4434   F100 7A 00 94    				dec	solenoid_counter			;Solenoid Counter
4435   F103             				ifeq
4435   F103             
4435   F103 26 FE       
4436   F105 DE 91       					ldx	solenoid_address
4437   F107 A6 00       					ldaa	$00,X
4438   F109 98 93       					eora	solenoid_bitpos
4439   F10B A7 00       					staa	$00,X
4440   F10D             				endif
4440   F10D             
4440   F10D             
4440   F10D             
4440   F10D             
4440   F10D             
4440   F10D~            				endif
4440   F10D~            				endif
4440   F10D             
4440   F10D~            				endif
4440   F10D~            				endif
4440   F10D             
4440   F104             
4440   F104 08          
4440   F105             
4440   F105             
4440   F105~            				endif
4440   F105~            				endif
4440   F105~            				endif
4440   F105             
4440   F10D             
4440   F10D~            				endif
4440   F10D~            				endif
4440   F10D             
4441   F10D             			endif
4441   F10D             
4441   F10D             
4441   F10D             
4441   F10D             
4441   F10D             
4441   F10D~            			endif
4441   F10D~            			endif
4441   F10D             
4441   F10D~            			endif
4441   F10D~            			endif
4441   F10D             
4441   F0FF             
4441   F0FF 0D          
4441   F100             
4441   F100             
4441   F100~            			endif
4441   F100~            			endif
4441   F100~            			endif
4441   F100             
4441   F10D             
4441   F10D~            			endif
4441   F10D~            			endif
4441   F10D             
4442   F10D 3B          			rti
4443   F10E             ;*************************************************************************
4444   F10E             ;* End IRQ
4445   F10E             ;*************************************************************************
4446   F10E             
4447   F10E             ;*************************************************************************
4448   F10E             ;* PIA Data Direction Register Data - Loaded on Initialization
4449   F10E             ;*************************************************************************
4450   F10E 7F 3E C0 3E pia_ddr_data	.db $7F,$3E,$C0,$3E	;$2100 - Sound PIA
4451   F112 FF 3C FF 34 			.db $FF,$3C,$FF,$34	;$2200 - Solenoid PIA
4452   F116 FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2400 - Lamp PIA
4453   F11A FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2800 - Display PIA
4454   F11E 00 3C FF 3C 			.db $00,$3C,$FF,$3C	;$3000 - Switch PIA
4455   F122             
4456   F122             ;*************************************************************************
4457   F122             ;* Special Solenoid Locations	- Defines the addresses for each PIA	
4458   F122             ;*************************************************************************	
4459   F122 24 03       spec_sol_def	.dw pia_lamp_col_ctrl		;Solenoid $10
4460   F124 24 01       			.dw pia_lamp_row_ctrl		;Solenoid $11
4461   F126 30 03       			.dw pia_switch_strobe_ctrl	;Solenoid $12
4462   F128 30 01       			.dw pia_switch_return_ctrl	;Solenoid $13
4463   F12A 22 01       			.dw pia_sol_low_ctrl		;Solenoid $14
4464   F12C 28 03       			.dw pia_disp_seg_ctrl		;Solenoid $15
4465   F12E 21 03       			.dw pia_comma_ctrl		;Solenoid $16-ST7
4466   F130 21 01       			.dw pia_sound_ctrl		;Solenoid $17-ST8
4467   F132 22 03       			.dw pia_sol_high_ctrl		;Solenoid $18-Flipper/Solenoid Enable
4468   F134             
4469   F134             ;*************************************************************************
4470   F134             ;* Lamp Buffer Locations		
4471   F134             ;*************************************************************************	
4472   F134 00 10       lampbuffers		.dw lampbuffer0
4473   F136 00 30       			.dw lampflashflag
4474   F138 00 28       			.dw lampbuffer1	
4475   F13A 00 20       			.dw lampbufferselect
4476   F13C             			
4477   F13C             ;*************************************************************************
4478   F13C             ;* Turn On Lamp: Lamp number is in A (packed format). This can also be 
4479   F13C             ;*               used to set a bitflag.
4480   F13C             ;*************************************************************************
4481   F13C DF 9E       lamp_on		stx	temp3
4482   F13E CE 00 10    			ldx	#lampbuffer0			;Set up correct index to lampbuffer
4483   F141 37          lamp_or		pshb	
4484   F142 8D 58       			bsr	unpack_byte				
4485   F144 37          			pshb						;B now contains the bitpos
4486   F145 EA 00       			orab	$00,X
4487   F147 E7 00       lamp_commit		stab	$00,X					;turn it on
4488   F149 DF 9C       			stx	temp2
4489   F14B D6 9D       			ldab	temp2+1				;was item worked on within lampbuffer0
4490   F14D C1 18       			cmpb	#(bitflags)&$FF			;compare index against start of bitflags
4491   F14F 33          			pulb	
4492   F150 24 05       			bcc	lamp_done
4493   F152 53          			comb						;If we are here, then we must switch buffers.
4494   F153 E4 20       			andb	lampbufferselect,X		;We are now on buffer 0
4495   F155 E7 20       			stab	lampbufferselect,X
4496   F157 33          lamp_done		pulb	
4497   F158 DE 9E       			ldx	temp3
4498   F15A 39          			rts	
4499   F15B             
4500   F15B             ;*************************************************************************
4501   F15B             ;* Turn Off Lamp: Lamp number is in A (packed format). This can also be 
4502   F15B             ;*               used to clear a bitflag.
4503   F15B             ;*************************************************************************			
4504   F15B DF 9E       lamp_off		stx	temp3
4505   F15D CE 00 10    			ldx	#lampbuffer0
4506   F160 37          lamp_and		pshb	
4507   F161 8D 39       			bsr	unpack_byte				;seperate into X and B
4508   F163 37          			pshb	
4509   F164 53          			comb	
4510   F165 E4 00       			andb	$00,X
4511   F167 20 DE       			bra	lamp_commit
4512   F169             
4513   F169             ;*************************************************************************
4514   F169             ;* Sets a Lamp to 'flashing' state
4515   F169             ;*************************************************************************			
4516   F169 DF 9E       lamp_flash		stx	temp3
4517   F16B CE 00 30    			ldx	#lampflashflag
4518   F16E 20 D1       			bra	lamp_or
4519   F170             
4520   F170             ;*************************************************************************
4521   F170             ;* Toggle Lamp from existing state. This may be used on bitflags as well.
4522   F170             ;*************************************************************************			
4523   F170 DF 9E       lamp_invert		stx	temp3
4524   F172 CE 00 10    			ldx	#lampbuffer0
4525   F175 37          lamp_eor		pshb	
4526   F176 8D 24       			bsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
4527   F178 E8 00       			eorb	$00,X
4528   F17A E7 00       			stab	$00,X
4529   F17C 20 D9       			bra	lamp_done				;Leave now
4530   F17E             			
4531   F17E             			
4532   F17E CE 00 20    lamp_on_b		ldx	#lampbufferselect
4533   F181 20 BE       			bra	lamp_or
4534   F183             
4535   F183 CE 00 20    lamp_off_b		ldx	#lampbufferselect
4536   F186 20 D8       			bra	lamp_and
4537   F188             
4538   F188 CE 00 20    lamp_invert_b	ldx	#lampbufferselect
4539   F18B 20 E8       			bra	lamp_eor
4540   F18D             
4541   F18D CE 00 28    lamp_on_1		ldx	#lampbuffer1
4542   F190 20 AF       			bra	lamp_or
4543   F192             
4544   F192 CE 00 28    lamp_off_1		ldx	#lampbuffer1
4545   F195 20 C9       			bra	lamp_and
4546   F197             
4547   F197 CE 00 28    lamp_invert_1	ldx	#lampbuffer1
4548   F19A 20 D9       			bra	lamp_eor
4549   F19C             
4550   F19C             ;*********************************************************
4551   F19C             ;* Converts Packed Byte data into an Index in X and a
4552   F19C             ;* bitpos in B
4553   F19C             ;*
4554   F19C             ;* Packed Data Format: IIII IBBB
4555   F19C             ;*
4556   F19C             ;*	Where IIIII is the index to the lamp buffers.
4557   F19C             ;*    Values between 
4558   F19C             ;*      0-7		lampbuffer0
4559   F19C             ;*      7-15	
4560   F19C             ;*********************************************************	
4561   F19C 36          unpack_byte		psha	
4562   F19D 44          			lsra	
4563   F19E 44          			lsra	
4564   F19F 44          			lsra	
4565   F1A0 BD EE FF    			jsr	xplusa				;X = X + A
4566   F1A3 32          			pula	
4567   F1A4 7E EB 8E    			jmp	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
4568   F1A7             
4569   F1A7             ;**********************************************************
4570   F1A7             ;* Lamp Range Manipulation Code Start Here
4571   F1A7             ;**********************************************************			
4572   F1A7 8D 71       lampm_off		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4573   F1A9             			begin
4573   F1A9             
4574   F1A9 17          				tba	
4575   F1AA 43          				coma	
4576   F1AB A4 00       				anda	$00,X
4577   F1AD 8D 07       				bsr	lampm_noflash			;Turn off Flashing State for this lamp
4578   F1AF BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4579   F1B2             			csend						;Loop it!
4579   F1B2             
4579   F1B2             
4579   F1B2~            			csend						;Loop it!
4579   F1B2~            			csend						;Loop it!
4579   F1B2~            			csend						;Loop it!
4579   F1B2             
4579   F1B2 24 F5       
4579   F1B4             
4579   F1B4~            			csend						;Loop it!
4579   F1B4~            			csend						;Loop it!
4579   F1B4             
4580   F1B4 20 5D       			bra	abx_ret
4581   F1B6             			
4582   F1B6 A7 00       lampm_noflash	staa	$00,X
4583   F1B8 DF 9C       			stx	temp2
4584   F1BA 96 9D       			ldaa	temp2+1
4585   F1BC 81 18       			cmpa	#$18					;If we are not using Buffer $0010 then skip this
4586   F1BE             			ifcs
4586   F1BE             
4586   F1BE 24 FE       
4587   F1C0 17          				tba	
4588   F1C1 43          				coma	
4589   F1C2 A4 20       				anda	lampbufferselect,X
4590   F1C4 A7 20       				staa	lampbufferselect,X
4591   F1C6             			endif
4591   F1C6             
4591   F1C6             
4591   F1C6             
4591   F1C6             
4591   F1C6             
4591   F1C6~            			endif
4591   F1C6~            			endif
4591   F1C6             
4591   F1C6~            			endif
4591   F1C6~            			endif
4591   F1C6             
4591   F1BF             
4591   F1BF 06          
4591   F1C0             
4591   F1C0             
4591   F1C0~            			endif
4591   F1C0~            			endif
4591   F1C0~            			endif
4591   F1C0             
4591   F1C6             
4591   F1C6~            			endif
4591   F1C6~            			endif
4591   F1C6             
4592   F1C6 39          			rts	
4593   F1C7             
4594   F1C7             
4595   F1C7 8D 51       lampm_f		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4596   F1C9             			begin
4596   F1C9             
4597   F1C9 17          				tba	
4598   F1CA A8 00       				eora	$00,X
4599   F1CC A7 00       				staa	$00,X
4600   F1CE BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4601   F1D1             			csend
4601   F1D1             
4601   F1D1             
4601   F1D1~            			csend
4601   F1D1~            			csend
4601   F1D1~            			csend
4601   F1D1             
4601   F1D1 24 F6       
4601   F1D3             
4601   F1D3~            			csend
4601   F1D3~            			csend
4601   F1D3             
4602   F1D3 20 3E       			bra	abx_ret
4603   F1D5             
4604   F1D5             ;unused?			
4605   F1D5 8D 4F       			bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
4606   F1D7 26 3A       			bne	abx_ret
4607   F1D9             			begin
4607   F1D9             
4608   F1D9 BD F2 64    				jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
4609   F1DC 25 08       				bcs	b_098
4610   F1DE             			neend
4610   F1DE             
4610   F1DE             
4610   F1DE~            			neend
4610   F1DE~            			neend
4610   F1DE~            			neend
4610   F1DE             
4610   F1DE 27 F9       
4610   F1E0             
4610   F1E0~            			neend
4610   F1E0~            			neend
4610   F1E0             
4611   F1E0 17          			tba	
4612   F1E1 43          			coma	
4613   F1E2 A4 00       			anda	$00,X
4614   F1E4 A7 00       			staa	$00,X
4615   F1E6 8D 6D       b_098			bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4616   F1E8 EA 00       b_09A			orab	$00,X
4617   F1EA E7 00       			stab	$00,X
4618   F1EC 20 25       			bra	abx_ret
4619   F1EE             			
4620   F1EE 8D 2A       lampm_a		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4621   F1F0             			begin
4621   F1F0             
4622   F1F0 27 F6       				beq	b_09A
4623   F1F2 8D 61       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4624   F1F4 25 1D       				bcs	abx_ret
4625   F1F6             			loopend
4625   F1F6             
4625   F1F6             
4625   F1F6~            			loopend
4625   F1F6~            			loopend
4625   F1F6~            			loopend
4625   F1F6             
4625   F1F6 20 F8       
4625   F1F8             
4625   F1F8~            			loopend
4625   F1F8~            			loopend
4625   F1F8             
4626   F1F8             			
4627   F1F8 8D 20       lampm_b		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4628   F1FA             			begin
4628   F1FA             
4629   F1FA 27 EC       				beq	b_09A
4630   F1FC 8D 57       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4631   F1FE             			csend
4631   F1FE             
4631   F1FE             
4631   F1FE~            			csend
4631   F1FE~            			csend
4631   F1FE~            			csend
4631   F1FE             
4631   F1FE 24 FA       
4631   F200             
4631   F200~            			csend
4631   F200~            			csend
4631   F200             
4632   F200 DE 9E       			ldx	temp3
4633   F202 96 A0       			ldaa	sys_temp1
4634   F204 D6 A1       			ldab	sys_temp2
4635   F206 20 9F       			bra	lampm_off				;Turn OFF All lamps in Range
4636   F208             			
4637   F208 8D 10       lampm_8		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4638   F20A             			begin
4638   F20A             
4639   F20A 17          				tba	
4640   F20B AA 00       				oraa	$00,X
4641   F20D 8D A7       				bsr	lampm_noflash			;Turn off Flashing State for this lamp
4642   F20F 8D 44       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4643   F211             			csend
4643   F211             
4643   F211             
4643   F211~            			csend
4643   F211~            			csend
4643   F211~            			csend
4643   F211             
4643   F211 24 F7       
4643   F213             
4643   F213~            			csend
4643   F213~            			csend
4643   F213             
4644   F213 96 A0       abx_ret		ldaa	sys_temp1
4645   F215 D6 A1       			ldab	sys_temp2
4646   F217 DE 9E       			ldx	temp3
4647   F219 39          			rts	
4648   F21A             			
4649   F21A             ;************************************************************
4650   F21A             ;* Lamp Range Routines: This take care of manipulating
4651   F21A             ;*                      a collection of sequential lamps
4652   F21A             ;*                      to create various lighting effects.
4653   F21A             ;************************************************************			
4654   F21A BD F2 2C    lampr_start		jsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Number Of lamps X=Buffer
4655   F21D 96 A2       			ldaa	sys_temp3				;Starting lamp in range
4656   F21F BD F1 9C    lr_ret		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
4657   F222 17          			tba	
4658   F223 A4 00       			anda	$00,X
4659   F225 39          			rts	
4660   F226             			
4661   F226 8D 04       lampr_end		bsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Number Of lamps X=Buffer
4662   F228 96 A3       			ldaa	sys_temp4				;End Lamp In range
4663   F22A 20 F3       			bra	lr_ret
4664   F22C             			
4665   F22C DF 9E       lampr_setup		stx	temp3
4666   F22E 97 A0       			staa	sys_temp1
4667   F230 D7 A1       			stab	sys_temp2
4668   F232 FE E0 4F    			ldx	gr_lamptable_ptr			;Game ROM: Lamp Range Table
4669   F235 16          			tab	
4670   F236 58          			aslb	
4671   F237 C4 7F       			andb	#$7F
4672   F239 BD EF 4D    			jsr	xplusb
4673   F23C EE 00       			ldx	$00,X
4674   F23E DF A2       			stx	sys_temp3				;Save Lamp Range
4675   F240 CE F1 34    			ldx	#lampbuffers			;Lamp Buffer Locations
4676   F243 49          			rola	
4677   F244 49          			rola	
4678   F245 49          			rola	
4679   F246 48          			asla	
4680   F247 84 07       			anda	#$07
4681   F249 BD EE FF    			jsr	xplusa				;X = X + A
4682   F24C EE 00       			ldx	$00,X					;Get the Buffer Pointer Specified
4683   F24E D6 A3       			ldab	sys_temp4
4684   F250 D0 A2       			subb	sys_temp3
4685   F252 D7 9A       			stab	temp1					;Store how many lamps affected
4686   F254 39          			rts	
4687   F255             			
4688   F255 58          lamp_left		aslb	
4689   F256             			ifcs
4689   F256             
4689   F256 24 FE       
4690   F258 59          				rolb	
4691   F259 08          				inx	
4692   F25A             			endif
4692   F25A             
4692   F25A             
4692   F25A             
4692   F25A             
4692   F25A             
4692   F25A~            			endif
4692   F25A~            			endif
4692   F25A             
4692   F25A~            			endif
4692   F25A~            			endif
4692   F25A             
4692   F257             
4692   F257 02          
4692   F258             
4692   F258             
4692   F258~            			endif
4692   F258~            			endif
4692   F258~            			endif
4692   F258             
4692   F25A             
4692   F25A~            			endif
4692   F25A~            			endif
4692   F25A             
4693   F25A 96 9A       ls_ret		ldaa	temp1
4694   F25C 80 01       			suba	#$01
4695   F25E 97 9A       			staa	temp1
4696   F260 17          			tba	
4697   F261 A4 00       			anda	$00,X
4698   F263 39          			rts	
4699   F264             			
4700   F264 54          lamp_right		lsrb	
4701   F265 24 F3       			bcc	ls_ret
4702   F267 56          			rorb	
4703   F268 09          			dex	
4704   F269 20 EF       			bra	ls_ret
4705   F26B             			
4706   F26B             			
4707   F26B 8D B9       lampm_c		bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
4708   F26D             lm_test		ifeq
4708   F26D             
4708   F26D 26 FE       
4709   F26F 8D F3       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
4710   F271 24 FA       				bcc	lm_test
4711   F273 20 9E       				bra	abx_ret
4712   F275             			endif
4712   F275             
4712   F275             
4712   F275             
4712   F275             
4712   F275             
4712   F275~            			endif
4712   F275~            			endif
4712   F275             
4712   F275~            			endif
4712   F275~            			endif
4712   F275             
4712   F26E             
4712   F26E 06          
4712   F26F             
4712   F26F             
4712   F26F~            			endif
4712   F26F~            			endif
4712   F26F~            			endif
4712   F26F             
4712   F275             
4712   F275~            			endif
4712   F275~            			endif
4712   F275             
4713   F275 53          			comb	
4714   F276 E4 00       			andb	$00,X
4715   F278 E7 00       			stab	$00,X
4716   F27A 20 97       			bra	abx_ret
4717   F27C             			
4718   F27C 8D 9C       lampm_e		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4719   F27E DF 9C       			stx	temp2
4720   F280 D7 9B       			stab	temp1+1
4721   F282             			begin
4721   F282             
4722   F282 97 A4       				staa	sys_temp5
4723   F284 8D CF       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4724   F286 25 04       				bcs	b_0A2
4725   F288 8D 1A       				bsr	b_0A3
4726   F28A             			loopend
4726   F28A             
4726   F28A             
4726   F28A~            			loopend
4726   F28A~            			loopend
4726   F28A~            			loopend
4726   F28A             
4726   F28A 20 F6       
4726   F28C             
4726   F28C~            			loopend
4726   F28C~            			loopend
4726   F28C             
4727   F28C             			
4728   F28C DE 9C       b_0A2			ldx	temp2
4729   F28E D6 9B       			ldab	temp1+1
4730   F290 8D 12       			bsr	b_0A3
4731   F292 20 38       			bra	b_0A5
4732   F294             			
4733   F294 8D 90       lampm_d		bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
4734   F296 DF 9C       			stx	temp2
4735   F298 D7 9B       			stab	temp1+1
4736   F29A             			begin
4736   F29A             
4737   F29A 97 A4       				staa	sys_temp5
4738   F29C 8D C6       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
4739   F29E 25 EC       				bcs	b_0A2
4740   F2A0 8D 02       				bsr	b_0A3
4741   F2A2             			loopend
4741   F2A2             
4741   F2A2             
4741   F2A2~            			loopend
4741   F2A2~            			loopend
4741   F2A2~            			loopend
4741   F2A2             
4741   F2A2 20 F6       
4741   F2A4             
4741   F2A4~            			loopend
4741   F2A4~            			loopend
4741   F2A4             
4742   F2A4             			
4743   F2A4 36          b_0A3			psha	
4744   F2A5 17          			tba	
4745   F2A6 43          			coma	
4746   F2A7 A4 00       			anda	$00,X
4747   F2A9 7D 00 A4    			tst	sys_temp5
4748   F2AC             			ifne
4748   F2AC             
4748   F2AC 27 FE       
4749   F2AE 1B          				aba
4750   F2AF             			endif
4750   F2AF             
4750   F2AF             
4750   F2AF             
4750   F2AF             
4750   F2AF             
4750   F2AF~            			endif
4750   F2AF~            			endif
4750   F2AF             
4750   F2AF~            			endif
4750   F2AF~            			endif
4750   F2AF             
4750   F2AD             
4750   F2AD 01          
4750   F2AE             
4750   F2AE             
4750   F2AE~            			endif
4750   F2AE~            			endif
4750   F2AE~            			endif
4750   F2AE             
4750   F2AF             
4750   F2AF~            			endif
4750   F2AF~            			endif
4750   F2AF             
4751   F2AF A7 00       			staa	$00,X
4752   F2B1 32          			pula	
4753   F2B2 39          			rts	
4754   F2B3             			
4755   F2B3 BD F2 26    lampm_z		jsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
4756   F2B6             			ifeq
4756   F2B6             
4756   F2B6 26 FE       
4757   F2B8             				begin
4757   F2B8             
4758   F2B8 8D AA       					bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
4759   F2BA 25 10       					bcs	b_0A5
4760   F2BC             				neend
4760   F2BC             
4760   F2BC             
4760   F2BC~            				neend
4760   F2BC~            				neend
4760   F2BC~            				neend
4760   F2BC             
4760   F2BC 27 FA       
4760   F2BE             
4760   F2BE~            				neend
4760   F2BE~            				neend
4760   F2BE             
4761   F2BE             			endif
4761   F2BE             
4761   F2BE             
4761   F2BE             
4761   F2BE             
4761   F2BE             
4761   F2BE~            			endif
4761   F2BE~            			endif
4761   F2BE             
4761   F2BE~            			endif
4761   F2BE~            			endif
4761   F2BE             
4761   F2B7             
4761   F2B7 06          
4761   F2B8             
4761   F2B8             
4761   F2B8~            			endif
4761   F2B8~            			endif
4761   F2B8~            			endif
4761   F2B8             
4761   F2BE             
4761   F2BE~            			endif
4761   F2BE~            			endif
4761   F2BE             
4762   F2BE 17          			tba	
4763   F2BF A8 00       			eora	$00,X
4764   F2C1 A7 00       			staa	$00,X
4765   F2C3 BD F2 64    			jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
4766   F2C6 25 04       			bcs	b_0A5
4767   F2C8 EA 00       			orab	$00,X
4768   F2CA E7 00       			stab	$00,X
4769   F2CC 7E F2 13    b_0A5			jmp	abx_ret
4770   F2CF             
4771   F2CF BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4772   F2D2             b_0AB			ifne
4772   F2D2             
4772   F2D2 27 FE       
4773   F2D4 BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4774   F2D7 24 F9       				bcc	b_0AB
4775   F2D9 20 F1       				bra	b_0A5
4776   F2DB             			endif
4776   F2DB             
4776   F2DB             
4776   F2DB             
4776   F2DB             
4776   F2DB             
4776   F2DB~            			endif
4776   F2DB~            			endif
4776   F2DB             
4776   F2DB~            			endif
4776   F2DB~            			endif
4776   F2DB             
4776   F2D3             
4776   F2D3 07          
4776   F2D4             
4776   F2D4             
4776   F2D4~            			endif
4776   F2D4~            			endif
4776   F2D4~            			endif
4776   F2D4             
4776   F2DB             
4776   F2DB~            			endif
4776   F2DB~            			endif
4776   F2DB             
4777   F2DB 0C          b_0AA			clc	
4778   F2DC 20 EE       			bra	b_0A5
4779   F2DE BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4780   F2E1 26 F8       b_0AC			bne	b_0AA
4781   F2E3 BD F2 55    			jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4782   F2E6 24 F9       			bcc	b_0AC
4783   F2E8 20 E2       			bra	b_0A5
4784   F2EA             
4785   F2EA             		
4786   F2EA CE 00 61    bit_switch		ldx	#switch_debounced
4787   F2ED 20 0D       			bra	bit_main
4788   F2EF CE 00 30    bit_lamp_flash	ldx	#lampflashflag
4789   F2F2 20 08       			bra	bit_main
4790   F2F4 CE 00 28    bit_lamp_buf_1	ldx	#lampbuffer1
4791   F2F7 20 03       			bra	bit_main
4792   F2F9 CE 00 10    bit_lamp_buf_0	ldx	#lampbuffer0
4793   F2FC BD F1 9C    bit_main		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
4794   F2FF E5 00       			bitb	$00,X
4795   F301 39          			rts	
4796   F302             			
4797   F302             			
4798   F302 84 3F       lampm_x		anda	#$3F
4799   F304 BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
4800   F307             			begin
4800   F307             
4801   F307 97 AA       				staa	thread_priority			;This is probably just a temp location?
4802   F309 17          				tba	
4803   F30A 43          				coma	
4804   F30B A4 18       				anda	bitflags,X
4805   F30D 9A AA       				oraa	thread_priority			;Recall temp
4806   F30F A7 18       				staa	bitflags,X
4807   F311 BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
4808   F314             			csend
4808   F314             
4808   F314             
4808   F314~            			csend
4808   F314~            			csend
4808   F314~            			csend
4808   F314             
4808   F314 24 F1       
4808   F316             
4808   F316~            			csend
4808   F316~            			csend
4808   F316             
4809   F316 20 B4       			bra	b_0A5
4810   F318             			
4811   F318             ;***************************************************
4812   F318             ;* System Checksum #2: Set to make ROM csum from
4813   F318             ;*                     $F000-F7FF equal to $00
4814   F318             ;***************************************************
4815   F318             	
4816   F318 EF          csum2			.db $EF
4817   F319             			
4818   F319             ;***************************************************
4819   F319             ;* VM Macro Pointers: Master Lookup Table
4820   F319             ;***************************************************
4821   F319             				
4822   F319 F3 D3       master_vm_lookup	.dw vm_control_0x		;Misc Functions
4823   F31B F3 F4       			.dw vm_control_1x		;Lamp Functions
4824   F31D F4 36       			.dw vm_control_2x		;Lamp Functions
4825   F31F F4 42       			.dw vm_control_3x		;Solenoid Functions
4826   F321 F4 4F       			.dw vm_control_4x		;Sound, Immediate Exe Functions
4827   F323 F4 A1       			.dw vm_control_5x		;RAM,Delay,Jump,SimpleBransh Functions
4828   F325 F5 40       			.dw vm_control_6x		;Indexed Delay Functions
4829   F327 F5 44       			.dw vm_control_7x		;Immediate Delay Functions
4830   F329 F5 48       			.dw vm_control_8x		;Jump Relative 
4831   F32B F5 58       			.dw vm_control_9x		;JSR Relative
4832   F32D F5 62       			.dw vm_control_ax		;JSR to Code Relative
4833   F32F F5 6B       			.dw vm_control_bx		;Add RAM
4834   F331 F5 78       			.dw vm_control_cx		;Set RAM
4835   F333 F5 7D       			.dw vm_control_dx		;Play Sound Multiple
4836   F335 F5 87       			.dw vm_control_ex		;Play Sound Once
4837   F337 F5 87       			.dw vm_control_fx		;Play Sound Once
4838   F339             			
4839   F339             			
4840   F339 F3 DB       vm_lookup_0x	.dw macro_pcminus100
4841   F33B F3 B5       			.dw macro_go
4842   F33D F3 AF       			.dw macro_rts
4843   F33F EA 67       			.dw killthread
4844   F341 F3 E2       			.dw macro_code_start
4845   F343 F3 EA       			.dw macro_special
4846   F345 F3 EF       			.dw macro_extraball
4847   F347             			
4848   F347 F2 08       vm_lookup_1x_a	.dw lampm_8
4849   F349 F1 A7       			.dw lampm_off
4850   F34B F1 EE       			.dw lampm_a
4851   F34D F1 F8       			.dw lampm_b
4852   F34F F2 6B       			.dw lampm_c
4853   F351 F2 94       			.dw lampm_d
4854   F353 F2 7C       			.dw lampm_e
4855   F355 F1 C7       			.dw lampm_f
4856   F357             			
4857   F357 F1 3C       vm_lookup_1x_b	.dw lamp_on
4858   F359 F1 5B       			.dw lamp_off
4859   F35B F1 70       			.dw lamp_invert
4860   F35D F1 69       			.dw lamp_flash
4861   F35F             			
4862   F35F F1 7E       vm_lookup_2x	.dw lamp_on_b
4863   F361 F1 83       			.dw lamp_off_b
4864   F363 F1 88       			.dw lamp_invert_b
4865   F365             			
4866   F365 EC 96       vm_lookup_4x	.dw add_points
4867   F367 EC 05       			.dw score_main
4868   F369 EB FE       			.dw dsnd_pts
4869   F36B             			
4870   F36B F4 AA       vm_lookup_5x	.dw macro_ramadd
4871   F36D F4 BF       			.dw macro_ramcopy
4872   F36F F4 CA       			.dw macro_set_pri
4873   F371 F4 D2       			.dw macro_delay_imm_b
4874   F373 F4 EF       			.dw macro_rem_th_s
4875   F375 F4 F6       			.dw macro_rem_th_m
4876   F377 F4 FD       			.dw macro_jsr_noreturn
4877   F379 F5 27       			.dw macro_jsr_return
4878   F37B F5 CD       			.dw macro_branch
4879   F37D F5 CD       			.dw macro_branch
4880   F37F F5 CD       			.dw macro_branch
4881   F381 F5 CD       			.dw macro_branch
4882   F383 F5 4F       			.dw macro_jmp_cpu
4883   F385 F5 A4       			.dw macro_setswitch
4884   F387 F5 BC       			.dw macro_clearswitch
4885   F389 F5 66       			.dw macro_jmp_abs
4886   F38B             
4887   F38B             ;***************************************************************
4888   F38B             ;* Pointers to routines for complex branch tests
4889   F38B             ;***************************************************************			
4890   F38B F6 53       branch_lookup	.dw branch_tilt		;Tilt Flag				
4891   F38D F6 5A       			.dw branch_gameover     ;Game Over Flag			
4892   F38F F4 95       			.dw macro_getnextbyte	;NextByte = Straight Data		
4893   F391 F6 36       			.dw branch_invert		;Invert Result			
4894   F393 F6 3B       			.dw branch_lamp_on	;Check if Lamp is On or Flashing
4895   F395 F6 47       			.dw branch_lamprangeoff	;Lamp Range All Off			
4896   F397 F6 4E       			.dw branch_lamprangeon	;Lamp Range All On			
4897   F399 F6 61       			.dw branch_lampbuf1	;RAM Matrix $0028			
4898   F39B F6 66       			.dw branch_switch		;Check Encoded Switch		
4899   F39D F6 70       			.dw branch_add		;A = A + B				
4900   F39F F6 6B       			.dw branch_and		;Logical AND 				
4901   F3A1 F6 72       			.dw branch_or		;Logical OR 				
4902   F3A3 F6 77       			.dw branch_equal		;A = B ??				
4903   F3A5 F6 7C       			.dw branch_ge		;A >= B ??				
4904   F3A7 F6 7F       			.dw branch_threadpri	;Check for Priority Thread??	
4905   F3A9 F6 86       			.dw branch_bitwise	;A && B				
4906   F3AB             
4907   F3AB             ;*************************************************************
4908   F3AB             ;* Virtual Machine Routines:
4909   F3AB             ;*
4910   F3AB             ;* These are the main routines that are called to interpret
4911   F3AB             ;* the commands written in WML7.
4912   F3AB             ;*************************************************************
4913   F3AB 97 00       macro_start		staa	ram_base
4914   F3AD D7 01       			stab	ram_base+1
4915   F3AF 32          macro_rts		pula	
4916   F3B0 97 D1       			staa	vm_pc
4917   F3B2 32          			pula	
4918   F3B3 97 D2       			staa	vm_pc+1
4919   F3B5 BD E0 A9    macro_go		jsr	gr_macro_event
4920   F3B8 BD F4 95    			jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4921   F3BB 16          			tab	
4922   F3BC 54          			lsrb	
4923   F3BD 54          			lsrb	
4924   F3BE 54          			lsrb	
4925   F3BF C4 1E       			andb	#$1E
4926   F3C1 CE F3 19    			ldx	#master_vm_lookup
4927   F3C4 BD EF 4D    			jsr	xplusb
4928   F3C7 EE 00       			ldx	$00,X
4929   F3C9 6E 00       			jmp	$00,X
4930   F3CB             			
4931   F3CB DF D1       switch_entry	stx	vm_pc
4932   F3CD 97 00       			staa	ram_base
4933   F3CF D7 01       breg_sto		stab	ram_base+1
4934   F3D1 20 E2       			bra	macro_go
4935   F3D3             			
4936   F3D3 CE F3 39    vm_control_0x	ldx	#vm_lookup_0x
4937   F3D6 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
4938   F3D9 6E 00       			jmp	$00,X
4939   F3DB             			
4940   F3DB DE D1       macro_pcminus100	ldx	vm_pc
4941   F3DD 09          			dex	
4942   F3DE DF D1       			stx	vm_pc
4943   F3E0 20 D3       			bra	macro_go
4944   F3E2             			
4945   F3E2 DE D1       macro_code_start	ldx	vm_pc
4946   F3E4 96 00       			ldaa	ram_base
4947   F3E6 D6 01       			ldab	ram_base+1
4948   F3E8 6E 00       			jmp	$00,X
4949   F3EA             			
4950   F3EA BD F6 A5    macro_special	jsr	award_special			;Award Special
4951   F3ED 20 C6       			bra	macro_go
4952   F3EF             			
4953   F3EF BD F6 D5    macro_extraball	jsr	extraball				;Award Extra Ball
4954   F3F2 20 C1       			bra	macro_go
4955   F3F4             			
4956   F3F4 16          vm_control_1x	tab	
4957   F3F5 C4 0F       			andb	#$0F
4958   F3F7 C0 08       			subb	#$08
4959   F3F9 25 1D       			bcs	macro_17				;Branch for Macros 10-17
4960   F3FB 58          macro_x8f		aslb	
4961   F3FC CE F3 47    			ldx	#vm_lookup_1x_a
4962   F3FF BD EF 4D    			jsr	xplusb				;X = X + B)
4963   F402 EE 00       			ldx	$00,X
4964   F404 16          			tab						;Original Command #
4965   F405 58          			aslb	
4966   F406 58          			aslb	
4967   F407 C4 80       			andb	#$80
4968   F409             b_0AF			begin
4968   F409             
4969   F409 BD F4 95    				jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4970   F40C 36          				psha	
4971   F40D 84 7F       				anda	#$7F
4972   F40F 1B          				aba	
4973   F410 AD 00       				jsr	$00,X
4974   F412 32          				pula	
4975   F413 4D          				tsta	
4976   F414             			plend
4976   F414             
4976   F414             
4976   F414~            			plend
4976   F414~            			plend
4976   F414~            			plend
4976   F414             
4976   F414 2B F3       
4976   F416             
4976   F416~            			plend
4976   F416~            			plend
4976   F416             
4977   F416 20 9D       			bra	macro_go
4978   F418             			
4979   F418 CE F3 57    macro_17		ldx	#vm_lookup_1x_b
4980   F41B 16          macro_x17		tab						;A = still instruction #
4981   F41C 84 03       			anda	#$03
4982   F41E BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
4983   F421 C5 04       			bitb	#$04
4984   F423             			ifeq					;Branch on 14-17
4984   F423             
4984   F423 26 FE       
4985   F425 5F          				clrb	
4986   F426 20 E1       				bra	b_0AF
4987   F428             			endif
4987   F428             
4987   F428             
4987   F428             
4987   F428             
4987   F428             
4987   F428~            			endif
4987   F428~            			endif
4987   F428             
4987   F428~            			endif
4987   F428~            			endif
4987   F428             
4987   F424             
4987   F424 03          
4987   F425             
4987   F425             
4987   F425~            			endif
4987   F425~            			endif
4987   F425~            			endif
4987   F425             
4987   F428             
4987   F428~            			endif
4987   F428~            			endif
4987   F428             
4988   F428             			begin
4988   F428             
4989   F428 8D 6B       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4990   F42A 16          				tab	
4991   F42B BD F5 18    				jsr	macro_b_ram				;$00,LSD(A)->A
4992   F42E AD 00       				jsr	$00,X
4993   F430 5D          				tstb	
4994   F431             			plend
4994   F431             
4994   F431             
4994   F431~            			plend
4994   F431~            			plend
4994   F431~            			plend
4994   F431             
4994   F431 2B F5       
4994   F433             
4994   F433~            			plend
4994   F433~            			plend
4994   F433             
4995   F433 7E F3 B5    to_macro_go1	jmp	macro_go
4996   F436             
4997   F436 16          vm_control_2x	tab						;A= macro
4998   F437 C4 0F       			andb	#$0F
4999   F439 C0 08       			subb	#$08
5000   F43B 24 BE       			bcc	macro_x8f				;Branch for Macros 28-2F
5001   F43D CE F3 5F    			ldx	#vm_lookup_2x
5002   F440 20 D9       			bra	macro_x17
5003   F442             			
5004   F442 16          vm_control_3x	tab	
5005   F443 C4 0F       			andb	#$0F					;16 Solenoids Max 
5006   F445             			begin
5006   F445             
5007   F445 8D 4E       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5008   F447 BD EB 23    				jsr	solbuf				;Turn On/Off Solenoid
5009   F44A 5A          				decb	
5010   F44B             			eqend
5010   F44B             
5010   F44B             
5010   F44B~            			eqend
5010   F44B~            			eqend
5010   F44B~            			eqend
5010   F44B             
5010   F44B 26 F8       
5010   F44D             
5010   F44D~            			eqend
5010   F44D~            			eqend
5010   F44D             
5011   F44D 20 E4       			bra	to_macro_go1
5012   F44F             			
5013   F44F 84 0F       vm_control_4x	anda	#$0F
5014   F451             			ifeq
5014   F451             
5014   F451 26 FE       
5015   F453 BD F4 EA    				jsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5016   F456 BD EB FA    				jsr	isnd_pts				;Play Sound Index(B)Once, Add Points(A)
5017   F459 20 D8       				bra	to_macro_go1
5018   F45B             			endif
5018   F45B             
5018   F45B             
5018   F45B             
5018   F45B             
5018   F45B             
5018   F45B~            			endif
5018   F45B~            			endif
5018   F45B             
5018   F45B~            			endif
5018   F45B~            			endif
5018   F45B             
5018   F452             
5018   F452 08          
5018   F453             
5018   F453             
5018   F453~            			endif
5018   F453~            			endif
5018   F453~            			endif
5018   F453             
5018   F45B             
5018   F45B~            			endif
5018   F45B~            			endif
5018   F45B             
5019   F45B 81 04       			cmpa	#$04
5020   F45D 24 0C       			bcc	macro_exec				;Branch for Macros 44-4F (execute cpu)
5021   F45F CE F3 63    			ldx	#vm_lookup_4x-2
5022   F462 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
5023   F465 8D 2E       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5024   F467 AD 00       			jsr	$00,X
5025   F469 20 C8       			bra	to_macro_go1			;Continue Executing Macros
5026   F46B             			
5027   F46B 16          macro_exec		tab	
5028   F46C C0 02       			subb	#$02
5029   F46E CE 11 30    			ldx	#exe_buffer
5030   F471             			begin
5030   F471             
5031   F471 8D 22       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5032   F473 A7 00       				staa	$00,X
5033   F475 08          				inx	
5034   F476 5A          				decb	
5035   F477             			eqend					;Add B bytes to Buffer at #1130
5035   F477             
5035   F477             
5035   F477~            			eqend					;Add B bytes to Buffer at #1130
5035   F477~            			eqend					;Add B bytes to Buffer at #1130
5035   F477~            			eqend					;Add B bytes to Buffer at #1130
5035   F477             
5035   F477 26 F8       
5035   F479             
5035   F479~            			eqend					;Add B bytes to Buffer at #1130
5035   F479~            			eqend					;Add B bytes to Buffer at #1130
5035   F479             
5036   F479 86 7E       			ldaa	#$7E
5037   F47B A7 00       			staa	$00,X
5038   F47D 86 F3       			ldaa	#$F3
5039   F47F A7 01       			staa	$01,X
5040   F481 86 CD       			ldaa	#$CD					;Tack a JMP $F3CD at the end of the routine
5041   F483 A7 02       			staa	$02,X
5042   F485 96 00       			ldaa	ram_base
5043   F487 D6 01       			ldab	ram_base+1
5044   F489 7E 11 30    			jmp	exe_buffer				;Go there Now, put return A and B into RAM $00 and $01
5045   F48C             			
5046   F48C 84 0F       gettabledata_w	anda	#$0F
5047   F48E 48          gettabledata_b	asla	
5048   F48F BD EE FF    			jsr	xplusa
5049   F492 EE 00       			ldx	$00,X
5050   F494 39          			rts
5051   F495             			
5052   F495             macro_getnextbyte	
5053   F495 DF 9A       			stx	temp1
5054   F497 DE D1       			ldx	vm_pc
5055   F499 A6 00       			ldaa	$00,X
5056   F49B 08          			inx	
5057   F49C DF D1       			stx	vm_pc
5058   F49E DE 9A       getx_rts		ldx	temp1
5059   F4A0 39          			rts	
5060   F4A1             			
5061   F4A1 CE F3 6B    vm_control_5x	ldx	#vm_lookup_5x
5062   F4A4 16          			tab						;Move our Data into B
5063   F4A5 BD F4 8C    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
5064   F4A8 6E 00       			jmp	$00,X
5065   F4AA             			
5066   F4AA 8D E9       macro_ramadd	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5067   F4AC 16          			tab	
5068   F4AD 8D 69       			bsr	macro_b_ram				;$00,LSD(A)->A
5069   F4AF 97 9E       			staa	temp3
5070   F4B1 54          			lsrb	
5071   F4B2 54          			lsrb	
5072   F4B3 54          			lsrb	
5073   F4B4 54          			lsrb	
5074   F4B5 17          			tba	
5075   F4B6 8D 60       			bsr	macro_b_ram				;$00,LSD(A)->A
5076   F4B8 9B 9E       			adda	temp3
5077   F4BA 8D 4D       ram_sto2		bsr	macro_a_ram				;A->$00,LSD(B)
5078   F4BC 7E F3 B5    to_macro_go2	jmp	macro_go
5079   F4BF             
5080   F4BF 8D D4       macro_ramcopy	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5081   F4C1 16          			tab	
5082   F4C2 8D 54       			bsr	macro_b_ram				;$00,LSD(A)->A
5083   F4C4 54          			lsrb	
5084   F4C5 54          			lsrb	
5085   F4C6 54          			lsrb	
5086   F4C7 54          			lsrb	
5087   F4C8 20 F0       			bra	ram_sto2				;A->$00,LSD(B),jmp $F3B5
5088   F4CA             			
5089   F4CA 8D C9       macro_set_pri	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5090   F4CC DE B1       			ldx	current_thread			;Current VM Routine being run
5091   F4CE A7 0D       			staa	threadobj_id,X
5092   F4D0 20 EA       			bra	to_macro_go2			;Continue Executing Macros
5093   F4D2             			
5094   F4D2             macro_delay_imm_b	
5095   F4D2 8D C1       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5096   F4D4 97 B7       dly_sto		staa	thread_timer_byte
5097   F4D6 DE D1       			ldx	vm_pc
5098   F4D8 96 00       			ldaa	ram_base
5099   F4DA D6 01       			ldab	ram_base+1
5100   F4DC BD EA 24    			jsr	delaythread				;Push Next Address onto VM, Timer at thread_timer_byte
5101   F4DF 7E F3 CB    			jmp	switch_entry
5102   F4E2             			
5103   F4E2             macro_getnextword		
5104   F4E2 8D 06       			bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5105   F4E4 D7 9A       			stab	temp1
5106   F4E6 97 9B       			staa	temp1+1
5107   F4E8 20 B4       			bra	getx_rts
5108   F4EA             			
5109   F4EA 8D A9       macro_get2bytes	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5110   F4EC 16          			tab	
5111   F4ED 20 A6       			bra	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5112   F4EF             			
5113   F4EF 8D F9       macro_rem_th_s	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5114   F4F1 BD EA F3    			jsr	kill_thread
5115   F4F4 20 C6       			bra	to_macro_go2			;Continue Executing Macros
5116   F4F6             			
5117   F4F6 8D F2       macro_rem_th_m	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5118   F4F8 BD EA FB    			jsr	kill_threads
5119   F4FB 20 BF       			bra	to_macro_go2			;Continue Executing Macros
5120   F4FD             			
5121   F4FD             macro_jsr_noreturn	
5122   F4FD 8D E3       			bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5123   F4FF 96 D2       			ldaa	vm_pc+1
5124   F501 36          			psha	
5125   F502 96 D1       			ldaa	vm_pc
5126   F504 36          			psha	
5127   F505 DF D1       pc_sto2		stx	vm_pc
5128   F507 20 B3       			bra	to_macro_go2			;jContinue Executing Macros
5129   F509             			
5130   F509 DF 9A       macro_a_ram		stx	temp1
5131   F50B C4 0F       			andb	#$0F
5132   F50D D7 9D       			stab	temp2+1
5133   F50F 7F 00 9C    			clr	temp2
5134   F512 DE 9C       			ldx	temp2
5135   F514 A7 00       			staa	$00,X
5136   F516 20 86       to_getx_rts		bra	getx_rts
5137   F518             
5138   F518 DF 9A       macro_b_ram		stx	temp1
5139   F51A 84 0F       			anda	#$0F
5140   F51C 97 9D       			staa	temp2+1
5141   F51E 7F 00 9C    			clr	temp2
5142   F521 DE 9C       			ldx	temp2
5143   F523 A6 00       			ldaa	$00,X
5144   F525 20 EF       			bra	to_getx_rts				;ldx temp1, rts.
5145   F527             			
5146   F527 8D B9       macro_jsr_return	bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5147   F529 96 D2       ret_sto		ldaa	vm_pc+1
5148   F52B 36          			psha	
5149   F52C 96 D1       			ldaa	vm_pc
5150   F52E 36          			psha						;Push Macro PC
5151   F52F 96 00       			ldaa	ram_base
5152   F531 D6 01       			ldab	ram_base+1
5153   F533 AD 00       			jsr	$00,X
5154   F535 97 00       			staa	ram_base
5155   F537 32          			pula	
5156   F538 97 D1       			staa	vm_pc					;Pull Macro PC
5157   F53A 32          			pula	
5158   F53B 97 D2       			staa	vm_pc+1
5159   F53D 7E F3 CF    			jmp	breg_sto
5160   F540             			
5161   F540 8D D6       vm_control_6x	bsr	macro_b_ram				;Load RAM Data
5162   F542 20 90       			bra	dly_sto				;Delay it
5163   F544             			
5164   F544 84 0F       vm_control_7x	anda	#$0F
5165   F546 20 8C       			bra	dly_sto				;Delay it
5166   F548             			
5167   F548 8D 44       vm_control_8x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5168   F54A DF D1       pc_sto		stx	vm_pc					;Store X into VMPC
5169   F54C 7E F3 B5    to_macro_go4	jmp	macro_go
5170   F54F             
5171   F54F BD F4 E2    macro_jmp_cpu	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5172   F552 96 00       			ldaa	ram_base
5173   F554 D6 01       			ldab	ram_base+1
5174   F556 6E 00       			jmp	$00,X
5175   F558             			
5176   F558 8D 34       vm_control_9x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5177   F55A D6 D2       			ldab	vm_pc+1
5178   F55C 37          			pshb	
5179   F55D D6 D1       			ldab	vm_pc
5180   F55F 37          			pshb	
5181   F560 20 E8       			bra	pc_sto				;Store X into VMPC, continue
5182   F562             			
5183   F562 8D 2A       vm_control_ax	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5184   F564 20 C3       			bra	ret_sto
5185   F566             			
5186   F566 BD F4 E2    macro_jmp_abs	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5187   F569 20 DF       			bra	pc_sto
5188   F56B             			
5189   F56B 16          vm_control_bx	tab	
5190   F56C 8D AA       			bsr	macro_b_ram				;RAM Data (A&0f)->A
5191   F56E 97 9C       			staa	temp2
5192   F570 8D 58       			bsr	to_macro_getnextbyte
5193   F572 9B 9C       			adda	temp2
5194   F574 8D 93       ram_sto		bsr	macro_a_ram				;A->RAM(B&0f)
5195   F576 20 D4       			bra	to_macro_go4
5196   F578             			
5197   F578 16          vm_control_cx	tab	
5198   F579 8D 4F       			bsr	to_macro_getnextbyte
5199   F57B 20 F7       			bra	ram_sto				;Save to RAM and continue
5200   F57D             			
5201   F57D 84 0F       vm_control_dx	anda	#$0F
5202   F57F 16          			tab	
5203   F580 8D 48       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5204   F582 BD ED 03    			jsr	sound_sub
5205   F585 20 C5       			bra	to_macro_go4			;jmp  $F3B5
5206   F587             			
5207   F587             vm_control_ex
5208   F587 84 1F       vm_control_fx	anda	#$1F
5209   F589 BD EC FC    			jsr	isnd_once				;Play Sound Index(A) Once
5210   F58C 20 BE       			bra	to_macro_go4
5211   F58E             			
5212   F58E 84 0F       macro_pcadd		anda	#$0F
5213   F590 85 08       			bita	#$08
5214   F592             			ifne
5214   F592             
5214   F592 27 FE       
5215   F594 8A F0       				oraa	#$F0
5216   F596             			endif
5216   F596             
5216   F596             
5216   F596             
5216   F596             
5216   F596             
5216   F596~            			endif
5216   F596~            			endif
5216   F596             
5216   F596~            			endif
5216   F596~            			endif
5216   F596             
5216   F593             
5216   F593 02          
5216   F594             
5216   F594             
5216   F594~            			endif
5216   F594~            			endif
5216   F594~            			endif
5216   F594             
5216   F596             
5216   F596~            			endif
5216   F596~            			endif
5216   F596             
5217   F596 16          			tab	
5218   F597 8D 31       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5219   F599 9B D2       			adda	vm_pc+1
5220   F59B 97 9B       			staa	temp1+1
5221   F59D D9 D1       			adcb	vm_pc
5222   F59F D7 9A       			stab	temp1
5223   F5A1 DE 9A       			ldx	temp1
5224   F5A3 39          			rts	
5225   F5A4             			
5226   F5A4 8D 0A       macro_setswitch	bsr	load_sw_no				;Get switch number from the data
5227   F5A6 EA 00       			orab	$00,X
5228   F5A8 E7 00       			stab	$00,X
5229   F5AA 96 A8       			ldaa	sys_temp_w3
5230   F5AC 2B F6       			bmi	macro_setswitch
5231   F5AE 20 17       			bra	to_macro_go3			;jmp  $F3B5
5232   F5B0             			
5233   F5B0 8D 18       load_sw_no		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5234   F5B2 97 A8       			staa	sys_temp_w3
5235   F5B4 84 3F       			anda	#$3F
5236   F5B6 CE 00 61    			ldx	#switch_debounced
5237   F5B9 7E F1 9C    			jmp	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5238   F5BC             			
5239   F5BC 8D F2       macro_clearswitch	bsr	load_sw_no				;Get switch number from the data
5240   F5BE 53          			comb	
5241   F5BF E4 00       			andb	$00,X
5242   F5C1 E7 00       			stab	$00,X
5243   F5C3 96 A8       			ldaa	sys_temp_w3
5244   F5C5 2B F5       			bmi	macro_clearswitch
5245   F5C7 7E F3 B5    to_macro_go3	jmp	macro_go
5246   F5CA             
5247   F5CA             to_macro_getnextbyte			
5248   F5CA 7E F4 95    			jmp	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5249   F5CD             
5250   F5CD 37          macro_branch	pshb	
5251   F5CE 8D 28       			bsr	branchdata				;Gets Main Result
5252   F5D0 BD F6 92    			jsr	test_a				;Returns #80 or #81 in (A) based on Test of A
5253   F5D3 33          			pulb						;Get Back Command in B
5254   F5D4 1B          			aba	
5255   F5D5 36          			psha	
5256   F5D6 C5 02       			bitb	#$02					;Relative or Absolute Branch Flag
5257   F5D8             			ifeq
5257   F5D8             
5257   F5D8 26 FE       
5258   F5DA BD F4 E2    				jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5259   F5DD             			else
5259   F5DD             
5259   F5DD             
5259   F5DD             
5259   F5DD             
5259   F5D9             
5259   F5D9             
5259   F5D9             
5259   F5D9~            			else
5259   F5D9~            			else
5259   F5D9~            			else
5259   F5D9~            			else
5259   F5D9             
5259   F5D9~            			else
5259   F5D9~            			else
5259   F5D9~            			else
5259   F5D9~            			else
5259   F5D9             
5259   F5D9             
5259   F5D9 05          
5259   F5DD             
5259   F5DD 20 FE       
5259   F5DF             
5259   F5DF             
5259   F5DF             
5259   F5DF~            			else
5259   F5DF~            			else
5259   F5DF~            			else
5259   F5DF~            			else
5259   F5DF~            			else
5259   F5DF             
5259   F5DF~            			else
5259   F5DF~            			else
5259   F5DF             
5259   F5DF~            			else
5259   F5DF~            			else
5259   F5DF             
5260   F5DF 8D E9       				bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5261   F5E1 C6 FF       				ldab	#$FF
5262   F5E3 81 80       				cmpa	#$80
5263   F5E5 C9 00       				adcb	#$00
5264   F5E7 9B D2       				adda	vm_pc+1
5265   F5E9 D9 D1       				adcb	vm_pc
5266   F5EB 97 9B       				staa	temp1+1
5267   F5ED D7 9A       				stab	temp1
5268   F5EF DE 9A       				ldx	temp1
5269   F5F1             			endif
5269   F5F1             
5269   F5F1             
5269   F5F1             
5269   F5F1             
5269   F5F1             
5269   F5F1~            			endif
5269   F5F1~            			endif
5269   F5F1             
5269   F5F1~            			endif
5269   F5F1~            			endif
5269   F5F1             
5269   F5DE             
5269   F5DE 12          
5269   F5DF             
5269   F5DF             
5269   F5DF~            			endif
5269   F5DF~            			endif
5269   F5DF~            			endif
5269   F5DF             
5269   F5F1             
5269   F5F1~            			endif
5269   F5F1~            			endif
5269   F5F1             
5270   F5F1 32          			pula						;Get our result from above push
5271   F5F2 46          			rora						;Test LSB
5272   F5F3 24 D2       			bcc	to_macro_go3			;If result was #80, then ignore this branch (jmp  $F3B5)
5273   F5F5 7E F5 05    			jmp	pc_sto2				;Else, we will branch now. (stx  $D1, jmp $F3B5)
5274   F5F8             			
5275   F5F8 8D D0       branchdata		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5276   F5FA 81 D0       			cmpa	#$D0
5277   F5FC 25 3C       			bcs	to_rts3				;(rts) if data is below #D0
5278   F5FE 81 F0       			cmpa	#$F0
5279   F600 24 13       			bcc	complexbranch			;Branch if #F0 or above (Complex)
5280   F602 81 E0       			cmpa	#$E0
5281   F604             			ifcc						;Branch if less than #E0
5281   F604             
5281   F604 25 FE       
5282   F606 7E F5 18    				jmp	macro_b_ram				;RAM Data (A&0f)->A (Data is E_)
5283   F609             			endif
5283   F609             
5283   F609             
5283   F609             
5283   F609             
5283   F609             
5283   F609~            			endif
5283   F609~            			endif
5283   F609             
5283   F609~            			endif
5283   F609~            			endif
5283   F609             
5283   F605             
5283   F605 03          
5283   F606             
5283   F606             
5283   F606~            			endif
5283   F606~            			endif
5283   F606~            			endif
5283   F606             
5283   F609             
5283   F609~            			endif
5283   F609~            			endif
5283   F609             
5284   F609 CE 01 93    			ldx	#adj_gameadjust1-2		;Pointer to Bottom of Game Adjustments
5285   F60C 84 0F       			anda	#$0F					;A = Index for Game Adjustment Lookup
5286   F60E 48          			asla	
5287   F60F BD EE FF    			jsr	xplusa				;X = X + A
5288   F612 7E EF 53    			jmp	cmosinc_a				;CMOS,X++ -> A
5289   F615             			
5290   F615 81 F3       complexbranch	cmpa	#$F3
5291   F617             			ifcc							;data is below #F3 (not complex)
5291   F617             
5291   F617 25 FE       
5292   F619 36          				psha						;Push Current Branch Inst.
5293   F61A 8D DC       				bsr	branchdata				;Gets Encoded Data Type
5294   F61C 16          				tab	
5295   F61D D7 9A       				stab	temp1
5296   F61F 32          				pula	
5297   F620 81 F9       				cmpa	#$F9
5298   F622             				ifcc						;Branch if below #F9 (Lamp or Bit Test)
5298   F622             
5298   F622 25 FE       
5299   F624 36          					psha	
5300   F625 37          					pshb	
5301   F626 8D D0       					bsr	branchdata				;Gets Encoded Data Type
5302   F628 97 9A       					staa	temp1
5303   F62A 33          					pulb	
5304   F62B 32          					pula	
5305   F62C             				endif
5305   F62C             
5305   F62C             
5305   F62C             
5305   F62C             
5305   F62C             
5305   F62C~            				endif
5305   F62C~            				endif
5305   F62C             
5305   F62C~            				endif
5305   F62C~            				endif
5305   F62C             
5305   F623             
5305   F623 08          
5305   F624             
5305   F624             
5305   F624~            				endif
5305   F624~            				endif
5305   F624~            				endif
5305   F624             
5305   F62C             
5305   F62C~            				endif
5305   F62C~            				endif
5305   F62C             
5306   F62C             			endif
5306   F62C             
5306   F62C             
5306   F62C             
5306   F62C             
5306   F62C             
5306   F62C~            			endif
5306   F62C~            			endif
5306   F62C             
5306   F62C~            			endif
5306   F62C~            			endif
5306   F62C             
5306   F618             
5306   F618 13          
5306   F619             
5306   F619             
5306   F619~            			endif
5306   F619~            			endif
5306   F619~            			endif
5306   F619             
5306   F62C             
5306   F62C~            			endif
5306   F62C~            			endif
5306   F62C             
5307   F62C CE F3 8B    			ldx	#branch_lookup
5308   F62F BD F4 8C    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
5309   F632 96 9A       			ldaa	temp1
5310   F634 6E 00       			jmp	$00,X
5311   F636             			
5312   F636 8D 5A       branch_invert	bsr	test_a
5313   F638 88 01       			eora	#$01
5314   F63A 39          to_rts3		rts	
5315   F63B             
5316   F63B BD F2 F9    branch_lamp_on	jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
5317   F63E 26 1E       			bne	ret_true				;return true
5318   F640 BD F2 EF    			jsr	bit_lamp_flash			;Check Encoded #(A) with $0030
5319   F643 26 19       test_z		bne	ret_true				;return true
5320   F645 20 10       			bra	ret_false				;return false
5321   F647             			
5322   F647             branch_lamprangeoff	
5323   F647 BD F2 DE    			jsr	$F2DE
5324   F64A 25 12       test_c		bcs	ret_true				;return true
5325   F64C 20 09       			bra	ret_false				;return false
5326   F64E             			
5327   F64E             branch_lamprangeon	
5328   F64E BD F2 CF    			jsr	$F2CF
5329   F651 20 F7       			bra	test_c
5330   F653             			
5331   F653 96 C8       branch_tilt		ldaa	flag_tilt				;tilt flag?
5332   F655 26 07       			bne	ret_true				;return true
5333   F657 86 80       ret_false		ldaa	#$80					;return false
5334   F659 39          			rts	
5335   F65A             			
5336   F65A 96 C9       branch_gameover	ldaa	flag_gameover			;game over?
5337   F65C 27 F9       			beq	ret_false				;return false
5338   F65E 86 81       ret_true		ldaa	#$81
5339   F660 39          			rts	
5340   F661             			
5341   F661 BD F2 F4    branch_lampbuf1	jsr	bit_lamp_buf_1			;Check Encoded #(A) with $0028
5342   F664 20 DD       			bra	test_z				;Return Bool based on Z
5343   F666             									
5344   F666 BD F2 EA    branch_switch	jsr	bit_switch				;Check Encoded #(A) with $0061:
5345   F669 20 D8       			bra	test_z				;Return Boolean based on Z
5346   F66B             			
5347   F66B 8D 1E       branch_and		bsr	set_logic
5348   F66D 94 9A       			anda	temp1
5349   F66F 39          			rts	
5350   F670             			
5351   F670 1B          branch_add		aba	
5352   F671 39          			rts	
5353   F672             			
5354   F672 8D 17       branch_or		bsr	set_logic
5355   F674 9A 9A       			oraa	temp1
5356   F676 39          			rts	
5357   F677             			
5358   F677 11          branch_equal	cba	
5359   F678 27 E4       			beq	ret_true				;lda  #$81, rts
5360   F67A 20 DB       			bra	ret_false				;lda  #$80, rts
5361   F67C             			
5362   F67C 11          branch_ge		cba	
5363   F67D 20 CB       			bra	test_c
5364   F67F             			
5365   F67F BD EB 00    branch_threadpri	jsr	check_threadid
5366   F682 24 DA       			bcc	ret_true				;lda  #$81, rts
5367   F684 20 D1       			bra	ret_false				;lda  #$80, rts
5368   F686             			
5369   F686 D7 9A       branch_bitwise	stab	temp1
5370   F688 94 9A       			anda	temp1
5371   F68A 39          to_rts4		rts	
5372   F68B             
5373   F68B 36          set_logic		psha	
5374   F68C 17          			tba	
5375   F68D 8D 03       			bsr	test_a
5376   F68F 97 9A       			staa	temp1
5377   F691 32          			pula	
5378   F692 4D          test_a		tsta	
5379   F693 2B F5       			bmi	to_rts4				;rts
5380   F695 BD F2 F9    			jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
5381   F698 27 BD       			beq	ret_false				;return false
5382   F69A 81 40       			cmpa	#$40					;Check Encoded Lamp #
5383   F69C 24 C0       			bcc	ret_true				;return true
5384   F69E BD F2 EF    			jsr	bit_lamp_flash			;Bittest with $0030
5385   F6A1 26 B4       			bne	ret_false				;return false
5386   F6A3 20 B9       			bra	ret_true				;return true
5387   F6A5             			
5388   F6A5             ;*******************************************************
5389   F6A5             ;* End VM Code Section
5390   F6A5             ;*******************************************************			
5391   F6A5             
5392   F6A5             ;*******************************************************
5393   F6A5             ;* This is the main special award routine that decides 
5394   F6A5             ;* what type of award is to be given and jumps to the 
5395   F6A5             ;* appropriate place.
5396   F6A5             ;*******************************************************			
5397   F6A5 36          award_special	psha	
5398   F6A6 B6 01 8E    			ldaa	adj_specialaward+1		;ADJ: LSD Special Award-00=Credit 01=EB 02=Points
5399   F6A9 84 0F       			anda	#$0F
5400   F6AB 27 0B       			beq	credit_special			;Special award is credits
5401   F6AD 46          			rora	
5402   F6AE 25 26       			bcs	do_eb					;Extra Ball
5403   F6B0 B6 E0 56    			ldaa	gr_specialawardsound		;*Here if Points* Data byte from Game ROM
5404   F6B3 BD EB FE    			jsr	dsnd_pts				;Add Points(A),Play Digit Sound
5405   F6B6 32          			pula	
5406   F6B7 39          			rts	
5407   F6B8             			
5408   F6B8 DF DC       credit_special	stx	credit_x_temp			;Save X for later
5409   F6BA CE 01 12    			ldx	#aud_specialcredits		;AUD: Special Credits
5410   F6BD 20 0C       			bra	give_credit
5411   F6BF             ;*******************************************************
5412   F6BF             ;* Main entry for replays... score or matching
5413   F6BF             ;*******************************************************			
5414   F6BF 36          award_replay	psha	
5415   F6C0 B6 01 90    			ldaa	adj_replayaward+1			;ADJ: LSD Replay Award-00=Credit 01=Extra Ball
5416   F6C3 46          			rora	
5417   F6C4 25 10       			bcs	do_eb					;Extra Ball
5418   F6C6 DF DC       			stx	credit_x_temp			;Save X for later
5419   F6C8 CE 01 16    			ldx	#aud_replaycredits		;AUD: Replay Score Credits
5420   F6CB BD F7 7F    give_credit		jsr	ptrx_plus_1				;Add 1 to data at X
5421   F6CE BD E0 A7    			jsr	gr_special_event			;Game ROM Hook
5422   F6D1 86 01       			ldaa	#$01
5423   F6D3 20 2C       			bra	addcredit2
5424   F6D5             			
5425   F6D5 36          extraball		psha	
5426   F6D6 DF DA       do_eb			stx	eb_x_temp				;Save X for later
5427   F6D8 CE 01 A9    			ldx	#adj_max_extraballs		;ADJ: Max Extra Balls
5428   F6DB BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
5429   F6DE 91 D0       			cmpa	num_eb				;Number of Extra Balls Remaining
5430   F6E0             			ifgt
5430   F6E0             
5430   F6E0 23 FE       
5431   F6E2 BD E0 A5    				jsr	gr_eb_event
5432   F6E5 B6 E0 5F    				ldaa	gr_eb_lamp_1			;*** Game ROM data ***
5433   F6E8 BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
5434   F6EB B6 E0 60    				ldaa	gr_eb_lamp_2			;*** Game ROM data ***
5435   F6EE BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
5436   F6F1 7C 00 D0    				inc	num_eb
5437   F6F4 CE 01 22    				ldx	#aud_extraballs			;AUD: Total Extra Balls
5438   F6F7 BD F7 7F    				jsr	ptrx_plus_1				;Add 1 to data at X
5439   F6FA             			endif
5439   F6FA             
5439   F6FA             
5439   F6FA             
5439   F6FA             
5439   F6FA             
5439   F6FA~            			endif
5439   F6FA~            			endif
5439   F6FA             
5439   F6FA~            			endif
5439   F6FA~            			endif
5439   F6FA             
5439   F6E1             
5439   F6E1 18          
5439   F6E2             
5439   F6E2             
5439   F6E2~            			endif
5439   F6E2~            			endif
5439   F6E2~            			endif
5439   F6E2             
5439   F6FA             
5439   F6FA~            			endif
5439   F6FA~            			endif
5439   F6FA             
5440   F6FA DE DA       			ldx	eb_x_temp				;Restore X
5441   F6FC 32          			pula	
5442   F6FD 39          			rts	
5443   F6FE             			
5444   F6FE DF DC       addcredits		stx	credit_x_temp			;Save X
5445   F700 36          			psha	
5446   F701 37          addcredit2		pshb	
5447   F702 8D 45       			bsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
5448   F704             			ifcs						;No more if Carry Clear.
5448   F704             
5448   F704 24 FE       
5449   F706 BD EF 63    				jsr	cmosinc_b				;CMOS,X++ -> B
5450   F709 09          				dex	
5451   F70A 09          				dex	
5452   F70B 1B          				aba						;Add the new credits.
5453   F70C 19          				daa						;Adjust
5454   F70D             				ifcs
5454   F70D             
5454   F70D 24 FE       
5455   F70F 86 99       					ldaa	#$99					;If it rolled, set it to 99
5456   F711             				endif
5456   F711             
5456   F711             
5456   F711             
5456   F711             
5456   F711             
5456   F711~            				endif
5456   F711~            				endif
5456   F711             
5456   F711~            				endif
5456   F711~            				endif
5456   F711             
5456   F70E             
5456   F70E 02          
5456   F70F             
5456   F70F             
5456   F70F~            				endif
5456   F70F~            				endif
5456   F70F~            				endif
5456   F70F             
5456   F711             
5456   F711~            				endif
5456   F711~            				endif
5456   F711             
5457   F711 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++
5458   F714 D1 5A       				cmpb	cred_b0				;Actual Credits
5459   F716             				ifeq						;Check against shown credits
5459   F716             
5459   F716 26 FE       
5460   F718 C6 0E       					ldab	#$0E
5461   F71A D7 AA       					stab	thread_priority
5462   F71C CE F7 5F    					ldx	#creditq				;Thread: Add on Queued Credits
5463   F71F BD EA 78    					jsr	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
5464   F722             					ifcs						;If Carry is set, thread was not added
5464   F722             
5464   F722 24 FE       
5465   F724 97 5A       						staa	cred_b0				;Actual Credits
5466   F726             					endif
5466   F726             
5466   F726             
5466   F726             
5466   F726             
5466   F726             
5466   F726~            					endif
5466   F726~            					endif
5466   F726             
5466   F726~            					endif
5466   F726~            					endif
5466   F726             
5466   F723             
5466   F723 02          
5466   F724             
5466   F724             
5466   F724~            					endif
5466   F724~            					endif
5466   F724~            					endif
5466   F724             
5466   F726             
5466   F726~            					endif
5466   F726~            					endif
5466   F726             
5467   F726             				endif
5467   F726             
5467   F726             
5467   F726             
5467   F726             
5467   F726             
5467   F726~            				endif
5467   F726~            				endif
5467   F726             
5467   F726~            				endif
5467   F726~            				endif
5467   F726             
5467   F717             
5467   F717 0E          
5467   F718             
5467   F718             
5467   F718~            				endif
5467   F718~            				endif
5467   F718~            				endif
5467   F718             
5467   F726             
5467   F726~            				endif
5467   F726~            				endif
5467   F726             
5468   F726 8D 04       				bsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
5469   F728             			endif
5469   F728             
5469   F728             
5469   F728             
5469   F728             
5469   F728             
5469   F728~            			endif
5469   F728~            			endif
5469   F728             
5469   F728~            			endif
5469   F728~            			endif
5469   F728             
5469   F705             
5469   F705 22          
5469   F706             
5469   F706             
5469   F706~            			endif
5469   F706~            			endif
5469   F706~            			endif
5469   F706             
5469   F728             
5469   F728~            			endif
5469   F728~            			endif
5469   F728             
5470   F728 DE DC       			ldx	credit_x_temp			;Restore X
5471   F72A 20 30       			bra	pull_ba_rts				;pulb,pula,rts
5472   F72C             
5473   F72C             ;**********************************************
5474   F72C             ;* Adjust the coin lockout solenoid and the 
5475   F72C             ;* credit lamp on playfield if installed.
5476   F72C             ;**********************************************			
5477   F72C 36          coinlockout		psha	
5478   F72D BD F7 49    			jsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
5479   F730 86 EF       			ldaa	#$EF					;Lockout Coils On
5480   F732             			ifcc
5480   F732             
5480   F732 25 FE       
5481   F734 86 0F       				ldaa	#$0F					;Lockout Coils Off
5482   F736             			endif
5482   F736             
5482   F736             
5482   F736             
5482   F736             
5482   F736             
5482   F736~            			endif
5482   F736~            			endif
5482   F736             
5482   F736~            			endif
5482   F736~            			endif
5482   F736             
5482   F733             
5482   F733 02          
5482   F734             
5482   F734             
5482   F734~            			endif
5482   F734~            			endif
5482   F734~            			endif
5482   F734             
5482   F736             
5482   F736~            			endif
5482   F736~            			endif
5482   F736             
5483   F736 BD EB 23    			jsr	solbuf				;Turn Off Lockout Coils
5484   F739 B6 E0 61    			ldaa	gr_lastlamp				;Game ROM: Last Lamp Used
5485   F73C BD F1 5B    			jsr	lamp_off				;Turn off Lamp A (encoded):
5486   F73F BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
5487   F742             			ifne
5487   F742             
5487   F742 27 FE       
5488   F744 BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
5489   F747             			endif
5489   F747             
5489   F747             
5489   F747             
5489   F747             
5489   F747             
5489   F747~            			endif
5489   F747~            			endif
5489   F747             
5489   F747~            			endif
5489   F747~            			endif
5489   F747             
5489   F743             
5489   F743 03          
5489   F744             
5489   F744             
5489   F744~            			endif
5489   F744~            			endif
5489   F744~            			endif
5489   F744             
5489   F747             
5489   F747~            			endif
5489   F747~            			endif
5489   F747             
5490   F747 32          			pula	
5491   F748 39          			rts	
5492   F749             ;**********************************************
5493   F749             ;* See if we are at the adjustable maximum 
5494   F749             ;* credits allowed. If we are at max then
5495   F749             ;* carry flag is cleared, if we are not at
5496   F749             ;* max then the carry flag is set.
5497   F749             ;**********************************************			
5498   F749 36          checkmaxcredits	psha	
5499   F74A 37          			pshb	
5500   F74B CE 01 AB    			ldx	#adj_max_credits			;ADJ: Max Credits
5501   F74E BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
5502   F751 CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
5503   F754 5D          			tstb						;Max Credits allowed
5504   F755 0D          			sec	
5505   F756             			ifne
5505   F756             
5505   F756 27 FE       
5506   F758 BD FE 1F    				jsr	cmos_a				;CMOS, X -> A
5507   F75B 11          				cba	
5508   F75C             			endif
5508   F75C             
5508   F75C             
5508   F75C             
5508   F75C             
5508   F75C             
5508   F75C~            			endif
5508   F75C~            			endif
5508   F75C             
5508   F75C~            			endif
5508   F75C~            			endif
5508   F75C             
5508   F757             
5508   F757 04          
5508   F758             
5508   F758             
5508   F758~            			endif
5508   F758~            			endif
5508   F758~            			endif
5508   F758             
5508   F75C             
5508   F75C~            			endif
5508   F75C~            			endif
5508   F75C             
5509   F75C 33          pull_ba_rts		pulb	
5510   F75D 32          			pula	
5511   F75E 39          			rts	
5512   F75F             
5513   F75F             ;***********************************************
5514   F75F             ;* This routine is spawned as a thread when the
5515   F75F             ;* credits showing on the display do not match
5516   F75F             ;* the number of credits in the CMOS RAM. It 
5517   F75F             ;* Takes care of bringing them equal in a timely
5518   F75F             ;* fashion and calling the game ROM hook each
5519   F75F             ;* time a credit is added to the display. With
5520   F75F             ;* this, the game ROM can control the credit 
5521   F75F             ;* award process.
5522   F75F             ;***********************************************			
5523   F75F CE 01 6E    creditq		ldx	#aud_currentcredits		;CMOS: Current Credits
5524   F762 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
5525   F765 D1 5A       			cmpb	cred_b0
5526   F767             			ifne
5526   F767             
5526   F767 27 FE       
5527   F769 96 5A       				ldaa	cred_b0
5528   F76B 8B 01       				adda	#$01
5529   F76D 19          				daa	
5530   F76E 97 5A       				staa	cred_b0
5531   F770 FE E0 B7    				ldx	gr_coin_hook_ptr			;Game ROM:
5532   F773 11          				cba	
5533   F774             				ifne
5533   F774             
5533   F774 27 FE       
5534   F776 AD 00       					jsr	$00,X					;JSR to Game ROM Credit Hook
5535   F778 20 E5       					bra	creditq				;Loop it.
5536   F77A             				endif
5536   F77A             
5536   F77A             
5536   F77A             
5536   F77A             
5536   F77A             
5536   F77A~            				endif
5536   F77A~            				endif
5536   F77A             
5536   F77A~            				endif
5536   F77A~            				endif
5536   F77A             
5536   F775             
5536   F775 04          
5536   F776             
5536   F776             
5536   F776~            				endif
5536   F776~            				endif
5536   F776~            				endif
5536   F776             
5536   F77A             
5536   F77A~            				endif
5536   F77A~            				endif
5536   F77A             
5537   F77A AD 00       				jsr	$00,X					;JSR to Game ROM/bell?
5538   F77C             			endif
5538   F77C             
5538   F77C             
5538   F77C             
5538   F77C             
5538   F77C             
5538   F77C~            			endif
5538   F77C~            			endif
5538   F77C             
5538   F77C~            			endif
5538   F77C~            			endif
5538   F77C             
5538   F768             
5538   F768 13          
5538   F769             
5538   F769             
5538   F769~            			endif
5538   F769~            			endif
5538   F769~            			endif
5538   F769             
5538   F77C             
5538   F77C~            			endif
5538   F77C~            			endif
5538   F77C             
5539   F77C 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
5540   F77F             
5541   F77F             ;*************************************************
5542   F77F             ;* Some utility routines for getting data from
5543   F77F             ;* the CMOS RAM areas.
5544   F77F             ;*************************************************
5545   F77F 36          ptrx_plus_1		psha	
5546   F780 86 01       			ldaa	#$01
5547   F782 20 01       			bra	ptrx_plus
5548   F784 36          ptrx_plus_a		psha	
5549   F785 37          ptrx_plus		pshb	
5550   F786 DF 9A       			stx	temp1
5551   F788 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
5552   F78B 37          			pshb	
5553   F78C BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
5554   F78F 1B          			aba	
5555   F790 19          			daa	
5556   F791 16          			tab	
5557   F792 32          			pula	
5558   F793 89 00       			adca	#$00
5559   F795 19          			daa	
5560   F796 DE 9A       			ldx	temp1
5561   F798 BD EF AF    			jsr	a_cmosinc				;A -> CMOS,X++
5562   F79B BD EF 69    			jsr	b_cmosinc				;B -> CMOS,X++
5563   F79E DE 9A       			ldx	temp1
5564   F7A0 20 BA       			bra	pull_ba_rts				;pula, pulb, rts.
5565   F7A2             			
5566   F7A2             ;*********************************************************************************
5567   F7A2             ;* Main Coin Switch Routine - Called from each coin switch in the Switch Table.
5568   F7A2             ;*                            This takes care of all bonus coins, multipliers,etc.
5569   F7A2             ;*********************************************************************************
5570   F7A2             coin_accepted	
5571   F7A2             			;Starts with Macros
5572   F7A2 90 03       			.db $90,$03 	;MJSR $F7A7
5573   F7A4 7E EA 67    			.db $7E,$EA,$67  	;Push $EA67 into Control Loop with delay of #0E
5574   F7A7             			PRI_($0E) 		;Set this loops priority to #0E
5574   F7A7 52 0E       
5575   F7A9             			SLEEP_($20) 	;Delay $20
5575   F7A9~            			SLEEP_($20) 	;Delay $20
5575   F7A9~            			SLEEP_($20) 	;Delay $20
5575   F7A9             
5575   F7A9 53 20       
5575   F7AB             
5576   F7AB             			CPUX_			;Resume CPU execution
5576   F7AB 04          
5577   F7AC             			
5578   F7AC 43          			coma 
5579   F7AD 8B 06       			adda	#$06
5580   F7AF 48          			asla 
5581   F7B0 16          			tab  					;A is 0,2,4  
5582   F7B1 58          			aslb 					;B is 0,4,8
5583   F7B2 CE 01 02    			ldx  	#aud_leftcoins		;AUD: Coins Left/Center/Right Chute Base for counter
5584   F7B5 BD EF 4D    			jsr  	xplusb			;Adjust Pointer
5585   F7B8 BD F7 7F    			jsr  	ptrx_plus_1   		;Add 1 click to the counter
5586   F7BB CE 01 AF    			ldx  	#cmos_pricingbase		;AUD: Coin Slot Multiplier Base
5587   F7BE BD EE FF    			jsr  	xplusa   			;Adjust Pointer
5588   F7C1 BD EF 63    			jsr  	cmosinc_b    		;Get Multiplier into B
5589   F7C4 8D 6E       			bsr  	dec2hex    			;Make it hex
5590   F7C6 CE 01 62    			ldx  	#cmos_bonusunits	
5591   F7C9 8D 44       			bsr  	cmos_a_plus_b_cmos    	;Load Previous Coin Count, Add B, Save it in CMOS++
5592   F7CB 8D 42       			bsr  	cmos_a_plus_b_cmos    	;Load A with CMOS $0164, add B, Save in CMOS++
5593   F7CD CE 01 B9    			ldx  	#cmos_minimumcoins	;ADJ: Minimum Coin Units
5594   F7D0 BD EF 63    			jsr  	cmosinc_b    		;Get Minimum Coin Amount into B
5595   F7D3 11          			cba  
5596   F7D4             			ifcc					;Have we met inserted minimum coins?
5596   F7D4             
5596   F7D4 25 FE       
5597   F7D6             									;Yes!
5598   F7D6 CE 01 B5    				ldx  	#cmos_coinsforcredit	;ADJ: Coin Units required for Credit
5599   F7D9 BD EF 63    				jsr  	cmosinc_b    		;Get Value
5600   F7DC 8D 56       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
5601   F7DE 8D 36       				bsr  	divide_ab
5602   F7E0 97 9A       				staa  temp1
5603   F7E2 CE 01 64    				ldx  	#cmos_coinunits		;Save remainder coin units for next time
5604   F7E5 BD EF 69    				jsr  	b_cmosinc   		;( B -> CMOS,X++)
5605   F7E8 CE 01 B7    				ldx  	#cmos_bonuscoins		;ADJ: Coin Unit Bonus Point
5606   F7EB BD EF 63    				jsr  	cmosinc_b    		;( CMOS,X++ -> B )
5607   F7EE CE 01 62    				ldx  	#cmos_bonusunits	
5608   F7F1 BD EF 53    				jsr  	cmosinc_a 			;( CMOS,X++ -> A )
5609   F7F4 8D 3E       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
5610   F7F6 8D 1E       				bsr  	divide_ab
5611   F7F8 4D          				tsta 
5612   F7F9             				ifne
5612   F7F9             
5612   F7F9 27 FE       
5613   F7FB 8D 2C       					bsr	clr_bonus_coins
5614   F7FD             				endif
5614   F7FD             
5614   F7FD             
5614   F7FD             
5614   F7FD             
5614   F7FD             
5614   F7FD~            				endif
5614   F7FD~            				endif
5614   F7FD             
5614   F7FD~            				endif
5614   F7FD~            				endif
5614   F7FD             
5614   F7FA             
5614   F7FA 02          
5614   F7FB             
5614   F7FB             
5614   F7FB~            				endif
5614   F7FB~            				endif
5614   F7FB~            				endif
5614   F7FB             
5614   F7FD             
5614   F7FD~            				endif
5614   F7FD~            				endif
5614   F7FD             
5615   F7FD 9B 9A       				adda 	temp1
5616   F7FF 19          				daa  
5617   F800 CE 01 0E    				ldx  	#aud_paidcredits		;AUD: Total Paid Credits
5618   F803 BD F7 84    				jsr  	ptrx_plus_a    		;Add A to data at X:
5619   F806 7E F6 FE    				jmp  	addcredits    		;Add Credits if Possible
5620   F809             			endif
5620   F809             
5620   F809             
5620   F809             
5620   F809             
5620   F809             
5620   F809~            			endif
5620   F809~            			endif
5620   F809             
5620   F809~            			endif
5620   F809~            			endif
5620   F809             
5620   F7D5             
5620   F7D5 33          
5620   F7D6             
5620   F7D6             
5620   F7D6~            			endif
5620   F7D6~            			endif
5620   F7D6~            			endif
5620   F7D6             
5620   F809             
5620   F809~            			endif
5620   F809~            			endif
5620   F809             
5621   F809 B6 E0 5E    			ldaa 	gr_creditsound		;Game ROM Data: Credit Sound
5622   F80C 7E EC FC    			jmp  	isnd_once			;Play Sound Index(A) Once
5623   F80F             
5624   F80F             ;*********************************************************
5625   F80F             ;* Load A with value in X, Add B, Save to CMOS and 
5626   F80F             ;* post increment
5627   F80F             ;*********************************************************
5628   F80F             cmos_a_plus_b_cmos	
5629   F80F BD FE 1F    			jsr	cmos_a			;CMOS, X -> A 
5630   F812 1B          			aba	
5631   F813 7E EF AF    			jmp	a_cmosinc			;A -> CMOS,X++
5632   F816             			
5633   F816             ;********************************************************
5634   F816             ;* Divides A by B, returns result in A and remainder in
5635   F816             ;* B. Input values are in Hex and not decimal.
5636   F816             ;********************************************************			
5637   F816 D7 9D       divide_ab		stab	temp2+1
5638   F818             			ifne
5638   F818             
5638   F818 27 FE       
5639   F81A 16          				tab	
5640   F81B 86 99       				ldaa	#$99	
5641   F81D             				begin
5641   F81D             
5642   F81D 8B 01       					adda	#$01
5643   F81F 19          					daa	
5644   F820 D0 9D       					subb	temp2+1
5645   F822             				csend
5645   F822             
5645   F822             
5645   F822~            				csend
5645   F822~            				csend
5645   F822~            				csend
5645   F822             
5645   F822 24 F9       
5645   F824             
5645   F824~            				csend
5645   F824~            				csend
5645   F824             
5646   F824 DB 9D       				addb	temp2+1
5647   F826 39          				rts	
5648   F827             			endif
5648   F827             
5648   F827             
5648   F827             
5648   F827             
5648   F827             
5648   F827~            			endif
5648   F827~            			endif
5648   F827             
5648   F827~            			endif
5648   F827~            			endif
5648   F827             
5648   F819             
5648   F819 0D          
5648   F81A             
5648   F81A             
5648   F81A~            			endif
5648   F81A~            			endif
5648   F81A~            			endif
5648   F81A             
5648   F827             
5648   F827~            			endif
5648   F827~            			endif
5648   F827             
5649   F827 17          			tba	
5650   F828 39          			rts	
5651   F829             
5652   F829             ;********************************************************
5653   F829             ;* Cleans out any half credits and bonus coins
5654   F829             ;********************************************************			
5655   F829 CE 00 00    clr_bonus_coins	ldx	#0000
5656   F82C FF 01 64    			stx	cmos_coinunits
5657   F82F FF 01 62    			stx	cmos_bonusunits
5658   F832 39          			rts	
5659   F833             
5660   F833             ;********************************************************
5661   F833             ;* System Checksum #3: Set to make ROM csum from
5662   F833             ;*                     $F800-$FFFF equal to $00
5663   F833             ;********************************************************
5664   F833 42          csum3			.db $42
5665   F834             
5666   F834             ;********************************************************
5667   F834             ;* Convert 2 digit decimal value into a hex number
5668   F834             ;*
5669   F834             ;* Requires:	Decimal Number in B
5670   F834             ;* Protects:	A
5671   F834             ;* Destroys:	
5672   F834             ;* Output:		Hex Number in B
5673   F834             ;********************************************************
5674   F834 36          dec2hex		psha	
5675   F835 17          			tba	
5676   F836 5F          			clrb	
5677   F837             			begin
5677   F837             
5678   F837 4D          				tsta	
5679   F838 27 5E       				beq	to_pula_rts		;done
5680   F83A 8B 99       				adda	#$99
5681   F83C 19          				daa	
5682   F83D 5C          				incb	
5683   F83E             			loopend			;Loop forever
5683   F83E             
5683   F83E             
5683   F83E~            			loopend			;Loop forever
5683   F83E~            			loopend			;Loop forever
5683   F83E~            			loopend			;Loop forever
5683   F83E             
5683   F83E 20 F7       
5683   F840             
5683   F840~            			loopend			;Loop forever
5683   F840~            			loopend			;Loop forever
5683   F840             
5684   F840             
5685   F840             ;*********************************************************
5686   F840             ;* Stores A from X to X+B
5687   F840             ;* 
5688   F840             ;* Requires:	A,B,X
5689   F840             ;* Destroys:	B
5690   F840             ;********************************************************			
5691   F840             write_range		
5692   F840             			begin
5692   F840             
5693   F840 A7 00       				staa	$00,X
5694   F842 08          				inx	
5695   F843 5A          				decb	
5696   F844             			eqend
5696   F844             
5696   F844             
5696   F844~            			eqend
5696   F844~            			eqend
5696   F844~            			eqend
5696   F844             
5696   F844 26 FA       
5696   F846             
5696   F846~            			eqend
5696   F846~            			eqend
5696   F846             
5697   F846 39          			rts	
5698   F847             
5699   F847             ;*********************************************************
5700   F847             ;* Initialzes a new game.
5701   F847             ;*********************************************************			
5702   F847 FE E0 B9    do_game_init	ldx	gr_game_hook_ptr			;Game Start Hook
5703   F84A AD 00       			jsr	$00,X					;JSR to Game ROM Hook
5704   F84C BD F9 94    			jsr	dump_score_queue			;Clean the score queue
5705   F84F 8D 49       			bsr	clear_displays			;Blank all Player Displays (buffer 0)
5706   F851 8D 25       			bsr	initialize_game			;Remove one Credit, init some game variables
5707   F853 8D 03       			bsr	add_player				;Add one Player
5708   F855 7E F8 D2    			jmp	init_player_up
5709   F858             		
5710   F858             ;****************************************************
5711   F858             ;* Add Player: Increments player count and loads    
5712   F858             ;*             default game data for that player.  
5713   F858             ;*             Plays start sound and inits display.
5714   F858             ;*
5715   F858             ;* Requires:   No Variables
5716   F858             ;****************************************************			
5717   F858 BD E0 AD    add_player		jsr	gr_addplayer_event		;(RTS)
5718   F85B 7C 00 CC    			inc	num_players				;Add One Player
5719   F85E D6 CC       			ldab	num_players
5720   F860 8D 4B       			bsr	init_player_game			;Put the Default(game start) data into Current Players Game Data Buffer
5721   F862 CE E0 57    			ldx	#gr_p1_startsound			;Game ROM Table: Player Start Sounds
5722   F865 BD EF 4D    			jsr	xplusb				;X = X + B)
5723   F868 A6 00       			ldaa	$00,X
5724   F86A BD EC FC    			jsr	isnd_once				;Play Player Start Sound From Game ROM Table
5725   F86D 58          			aslb	
5726   F86E 58          			aslb	
5727   F86F CE 00 38    			ldx	#score_p1_b0
5728   F872 BD EF 4D    			jsr	xplusb				;X = X + B)
5729   F875 6F 03       			clr	$03,X				;Put in "00" onto new player display
5730   F877 39          			rts	
5731   F878             
5732   F878             ;****************************************************	
5733   F878             ;* Sets up all gameplay variables for a new game.
5734   F878             ;****************************************************		
5735   F878 4F          initialize_game	clra	
5736   F879 97 D6       			staa	flag_timer_bip			;Ball in Play Flag
5737   F87B 97 D0       			staa	num_eb				;Number of Extra Balls Remaining
5738   F87D 97 CD       			staa	player_up				;Current Player Up (0-3)
5739   F87F 97 C9       			staa	flag_gameover			;Game Play On
5740   F881 97 60       			staa	comma_flags
5741   F883 C6 08       			ldab	#$08
5742   F885 BD EA FB    			jsr	kill_threads
5743   F888 4A          			deca	
5744   F889 97 CC       			staa	num_players				;Subtract one Credit
5745   F88B 86 F1       			ldaa	#$F1
5746   F88D 97 58       			staa	mbip_b0				;Set Display to Ball 1
5747   F88F C6 0C       			ldab	#$0C
5748   F891 CE 00 1C    			ldx	#$001C				;Clear RAM $001C-0027
5749   F894 36          clear_range		psha	
5750   F895 4F          			clra	
5751   F896 8D A8       			bsr	write_range				;Store A from X to X+B
5752   F898 32          to_pula_rts		pula	
5753   F899 39          			rts	
5754   F89A             
5755   F89A             ;******************************************************
5756   F89A             ;* Resets all player display scores to Blank 'FFFFFFFF'
5757   F89A             ;******************************************************			
5758   F89A 86 FF       clear_displays	ldaa	#$FF
5759   F89C C6 10       			ldab	#$10
5760   F89E CE 00 38    			ldx	#score_p1_b0
5761   F8A1 8D 9D       			bsr	write_range				;Store A from X to X+B
5762   F8A3 4F          			clra	
5763   F8A4             			
5764   F8A4             store_display_mask	
5765   F8A4 97 5C       			staa	dmask_p1				;These are the Display Buffer Toggles
5766   F8A6 97 5D       			staa	dmask_p2
5767   F8A8 97 5E       			staa	dmask_p3
5768   F8AA 97 5F       			staa	dmask_p4
5769   F8AC 39          			rts	
5770   F8AD             
5771   F8AD             ;**********************************************************
5772   F8AD             ;* Loads the default game data into the player number 
5773   F8AD             ;* passed in B.
5774   F8AD             ;*
5775   F8AD             ;* Requires:    	Player Number to init in B
5776   F8AD             ;* Destroys:    	X
5777   F8AD             ;* Protects:	A,B
5778   F8AD             ;**********************************************************			
5779   F8AD 36          init_player_game	psha	
5780   F8AE 37          			pshb	
5781   F8AF 8D 0B       			bsr	setplayerbuffer			;Set up the Pointer to the Players Buffer
5782   F8B1 8D 15       			bsr	copyplayerdata			;Copy Default Player Data into Player Buffer (X)
5783   F8B3 DE 9A       			ldx	temp1
5784   F8B5 C6 06       			ldab	#$06
5785   F8B7 8D DB       			bsr	clear_range				;Clear Remaining Part of Player Game Data Buffer
5786   F8B9 33          			pulb	
5787   F8BA 32          			pula	
5788   F8BB 39          			rts	
5789   F8BC             
5790   F8BC             ;**********************************************************
5791   F8BC             ;* Will set up X to point at the start of the player 
5792   F8BC             ;* specified in B.
5793   F8BC             ;*
5794   F8BC             ;* Requires:   	Player Number in B
5795   F8BC             ;* Destroys:	A,B
5796   F8BC             ;* Protects:	None
5797   F8BC             ;* Output:		X
5798   F8BC             ;**********************************************************			
5799   F8BC 86 1A       setplayerbuffer	ldaa	#$1A		;Length of Player Buffer
5800   F8BE CE 11 26    			ldx	#$1126	;Player 1 base
5801   F8C1             			begin
5801   F8C1             
5802   F8C1 BD EE FF    				jsr	xplusa	;X = X + A
5803   F8C4 5A          				decb	
5804   F8C5             			miend
5804   F8C5             
5804   F8C5             
5804   F8C5~            			miend
5804   F8C5~            			miend
5804   F8C5~            			miend
5804   F8C5             
5804   F8C5 2A FA       
5804   F8C7             
5804   F8C7~            			miend
5804   F8C7~            			miend
5804   F8C7             
5805   F8C7 39          			rts	
5806   F8C8             
5807   F8C8             ;***********************************************************
5808   F8C8             ;* Copies Player default data from game ROM to the player 
5809   F8C8             ;* buffer specified by X.
5810   F8C8             ;*
5811   F8C8             ;* Requires: Player Buffer to Fill in X
5812   F8C8             ;***********************************************************			
5813   F8C8 DF 9A       copyplayerdata	stx	temp1
5814   F8CA CE E0 77    			ldx	#gr_playerstartdata		;*** Table Pointer ***
5815   F8CD C6 14       			ldab	#$14
5816   F8CF 7E EF BC    			jmp	copyblock				;Copy Block: X -> temp1 B=Length
5817   F8D2             
5818   F8D2             ;***********************************************************
5819   F8D2             ;			
5820   F8D2 8D 5F       init_player_up	bsr	init_player_sys			;Initialize System for New Player Up
5821   F8D4 D6 CD       			ldab	player_up				;Current Player Up (0-3)
5822   F8D6 8D 7A       			bsr	resetplayerdata			;Reset Player Game Data:
5823   F8D8 FE E0 BB    			ldx	gr_player_hook_ptr		;Game ROM hook Location
5824   F8DB AD 00       			jsr	$00,X					;JSR to Game ROM
5825   F8DD             			;This following loop makes the current players
5826   F8DD             			;score flash until any score is made.
5827   F8DD             			begin
5827   F8DD             
5828   F8DD BD EA 2F    player_ready		jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
5829   F8E0 05          				.db 	$05
5830   F8E1 8D 36       				bsr	disp_mask				;Get Active Player Display Toggle Data
5831   F8E3 43          				coma	
5832   F8E4 94 60       				anda	comma_flags
5833   F8E6 97 60       				staa	comma_flags
5834   F8E8 8D 3C       				bsr	disp_clear				;Blank Current Player Score Display (Buffer 1)
5835   F8EA DE B1       				ldx	current_thread			;Current VM Routine being run
5836   F8EC 86 07       				ldaa	#$07
5837   F8EE A7 0D       				staa	threadobj_id,X			;Set thread ID
5838   F8F0 CE 00 5C    				ldx	#dmask_p1				;Start of Display Toggles
5839   F8F3 BD EF 4D    				jsr	xplusb				;X = X + B
5840   F8F6 A6 00       				ldaa	$00,X
5841   F8F8 8A 7F       				oraa	#$7F
5842   F8FA A7 00       				staa	$00,X
5843   F8FC BD EA 2F    				jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
5844   F8FF 05          				.db	$05
5845   F900 BD E0 AB    				jsr	gr_ready_event			;Game ROM Hook
5846   F903 A6 00       				ldaa	$00,X
5847   F905 84 80       				anda	#$80
5848   F907 A7 00       				staa	$00,X
5849   F909 BD EB A1    				jsr	update_commas			;Update Master Display Toggle From Current Player
5850   F90C DE B1       				ldx	current_thread			;Current VM Routine being run
5851   F90E 86 04       				ldaa	#$04
5852   F910 A7 0D       				staa	threadobj_id,X
5853   F912 96 D6       				ldaa	flag_timer_bip			;Ball in Play Flag
5854   F914             			neend					
5854   F914             
5854   F914             
5854   F914~            			neend					
5854   F914~            			neend					
5854   F914~            			neend					
5854   F914             
5854   F914 27 C7       
5854   F916             
5854   F916~            			neend					
5854   F916~            			neend					
5854   F916             
5855   F916 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
5856   F919             			
5857   F919 D6 CD       disp_mask		ldab	player_up				;Current Player Up (0-3)
5858   F91B CE EB 99    			ldx	#comma_million			;Comma Tables
5859   F91E BD EF 4D    			jsr	xplusb				;X = X + B)
5860   F921 A6 00       			ldaa	$00,X					;comma_million: 40 04 80 08
5861   F923 AA 04       			oraa	$04,X					;comma_thousand: 10 01 20 02
5862   F925 39          			rts	
5863   F926             			
5864   F926 DE CE       disp_clear		ldx	pscore_buf				;Start of Current Player Score Buffer
5865   F928 86 FF       			ldaa	#$FF
5866   F92A A7 10       			staa	lampbuffer0,X
5867   F92C A7 11       			staa	$11,X
5868   F92E A7 12       			staa	$12,X
5869   F930 A7 13       			staa	$13,X
5870   F932 39          			rts	
5871   F933             
5872   F933             ;********************************************************
5873   F933             ;* Initializes new player. Clears tilt counter, reset 
5874   F933             ;* bonus ball enable, enables flippers, Loads Plater 
5875   F933             ;* score buffer pointer.
5876   F933             ;********************************************************			
5877   F933 96 61       init_player_sys	ldaa	switch_debounced
5878   F935 84 FC       			anda	#$FC
5879   F937 97 61       			staa	switch_debounced				;Blank the Tilt Lines?
5880   F939 4F          			clra	
5881   F93A 97 C8       			staa	flag_tilt				;Clear Tilt Flag
5882   F93C 97 D3       			staa	num_tilt				;Clear Plumb Bob Tilts
5883   F93E 97 CA       			staa	flag_bonusball			;Enable Bonus Ball
5884   F940 86 18       			ldaa	#$18
5885   F942 BD EB 23    			jsr	solbuf				;Turn on Solenoid $18 (Flipper Enable?)
5886   F945 96 CD       			ldaa	player_up				;Current Player Up (0-3)
5887   F947 48          			asla	
5888   F948 48          			asla	
5889   F949 CE 00 38    			ldx	#score_p1_b0
5890   F94C BD EE FF    			jsr	xplusa				;X= P1:0038 P2:003C P3:0040 P4:0044
5891   F94F DF CE       			stx	pscore_buf				;Pointer to Start of Score Buffer 0
5892   F951 39          			rts	
5893   F952             
5894   F952             ;*********************************************************
5895   F952             ;* Applies Game ROM mask to player game data to reset 
5896   F952             ;* specific bits of data. Loads the flashing lamp data
5897   F952             ;* Resets Player game data at start of RAM.
5898   F952             ;*********************************************************	
5899   F952 CE 00 10    resetplayerdata	ldx	#lampbuffer0
5900   F955 DF 9A       			stx	temp1					;temp1 Points to Base of Lamp Matrix Data
5901   F957 BD F8 BC    			jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
5902   F95A DF 9C       			stx	temp2					;$9C Points to Base of Player Game Data Buffer
5903   F95C CE E0 77    			ldx	#gr_playerstartdata		;X points to base of default player data
5904   F95F             			begin
5904   F95F             
5905   F95F A6 14       				ldaa	$14,X					;Get Game Data Reset Data
5906   F961 16          				tab	
5907   F962 53          				comb	
5908   F963 E4 00       				andb	$00,X					;AND !B with Players Last Lamps
5909   F965 08          				inx	
5910   F966 DF 9E       				stx	temp3					;X points to base of default player data +1
5911   F968 DE 9C       				ldx	temp2					;Player Game Data Buffer
5912   F96A A4 00       				anda	$00,X
5913   F96C 08          				inx	
5914   F96D DF 9C       				stx	temp2
5915   F96F 1B          				aba	
5916   F970 DE 9A       				ldx	temp1
5917   F972 A7 00       				staa	$00,X
5918   F974 08          				inx	
5919   F975 8C 00 1C    				cpx	#lampbuffer0+$0C
5920   F978             				ifeq
5920   F978             
5920   F978 26 FE       
5921   F97A CE 00 30    					ldx	#lampflashflag
5922   F97D             				endif
5922   F97D             
5922   F97D             
5922   F97D             
5922   F97D             
5922   F97D             
5922   F97D~            				endif
5922   F97D~            				endif
5922   F97D             
5922   F97D~            				endif
5922   F97D~            				endif
5922   F97D             
5922   F979             
5922   F979 03          
5922   F97A             
5922   F97A             
5922   F97A~            				endif
5922   F97A~            				endif
5922   F97A~            				endif
5922   F97A             
5922   F97D             
5922   F97D~            				endif
5922   F97D~            				endif
5922   F97D             
5923   F97D DF 9A       				stx	temp1
5924   F97F DE 9E       				ldx	temp3
5925   F981 8C E0 8B    				cpx	#gr_playerresetdata		;End of Default Player Game Data
5926   F984             			eqend						;Loop it!
5926   F984             
5926   F984             
5926   F984~            			eqend						;Loop it!
5926   F984~            			eqend						;Loop it!
5926   F984~            			eqend						;Loop it!
5926   F984             
5926   F984 26 D9       
5926   F986             
5926   F986~            			eqend						;Loop it!
5926   F986~            			eqend						;Loop it!
5926   F986             
5927   F986 CE 00 02    			ldx	#$0002
5928   F989 DF 9A       			stx	temp1
5929   F98B DE 9C       			ldx	temp2
5930   F98D C6 06       			ldab	#$06
5931   F98F 8D 52       			bsr	to_copyblock			;Copy Data Block: Current Game Data 0-6 -> Player Game Data 0-6
5932   F991 7E F7 2C    			jmp	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
5933   F994             
5934   F994             ;*********************************************************************
5935   F994             ;* Scoring Queue: This will bring all scores up to date with current *
5936   F994             ;*                scores waiting to be applied.                      *
5937   F994             ;*********************************************************************			
5938   F994 CE 11 28    dump_score_queue	ldx	#score_queue
5939   F997 86 0F       			ldaa	#$0F
5940   F999             			begin
5940   F999             
5941   F999 E6 00       				ldab	$00,X
5942   F99B             				ifne
5942   F99B             
5942   F99B 27 FE       
5943   F99D             					begin
5943   F99D             
5944   F99D BD EC 05    						jsr	score_main				;Main Add Points Routine
5945   F9A0 6A 00       						dec	$00,X
5946   F9A2             					eqend
5946   F9A2             
5946   F9A2             
5946   F9A2~            					eqend
5946   F9A2~            					eqend
5946   F9A2~            					eqend
5946   F9A2             
5946   F9A2 26 F9       
5946   F9A4             
5946   F9A4~            					eqend
5946   F9A4~            					eqend
5946   F9A4             
5947   F9A4             				endif
5947   F9A4             
5947   F9A4             
5947   F9A4             
5947   F9A4             
5947   F9A4             
5947   F9A4~            				endif
5947   F9A4~            				endif
5947   F9A4             
5947   F9A4~            				endif
5947   F9A4~            				endif
5947   F9A4             
5947   F99C             
5947   F99C 07          
5947   F99D             
5947   F99D             
5947   F99D~            				endif
5947   F99D~            				endif
5947   F99D~            				endif
5947   F99D             
5947   F9A4             
5947   F9A4~            				endif
5947   F9A4~            				endif
5947   F9A4             
5948   F9A4 08          				inx	
5949   F9A5 4A          				deca	
5950   F9A6 85 08       				bita	#$08
5951   F9A8             			eqend
5951   F9A8             
5951   F9A8             
5951   F9A8~            			eqend
5951   F9A8~            			eqend
5951   F9A8~            			eqend
5951   F9A8             
5951   F9A8 26 EF       
5951   F9AA             
5951   F9AA~            			eqend
5951   F9AA~            			eqend
5951   F9AA             
5952   F9AA 39          			rts	
5953   F9AB             
5954   F9AB             ;*********************************************************************
5955   F9AB             ;* Main Outhole Routine: The outhole switch will jump here on closure
5956   F9AB             ;*********************************************************************			
5957   F9AB 8D E7       outhole_main	bsr	dump_score_queue			
5958   F9AD BD F3 AB    			jsr	macro_start				;Start Executing Macros
5959   F9B0             			
5960   F9B0 71          			.db $71          			;Delay 1
5961   F9B1 5AFE0101FA  			.db $5A,$FE,$01,$01,$FA 	;Branch if Priority #01 to $F9B0
5962   F9B6 55 0A 00    			.db $55,$0A,$00  			;Reset Threads Based on Priority #0A	
5963   F9B9             			CPUX_ 				;Resume CPU Execution
5963   F9B9 04          
5964   F9BA             
5965   F9BA FE E0 BD    			ldx  	gr_outhole_hook_ptr		;Game ROM: Pointer
5966   F9BD AD 00       			jsr  	$00,X  				;JSR to GameROM
5967   F9BF 7F 00 D6    			clr  	flag_timer_bip			;Ball in Play Flag (Stop Timer)
5968   F9C2 D6 CD       			ldab  player_up     			;Current Player Up (0-3)
5969   F9C4 8D 05       			bsr  	saveplayertobuffer    		;Save Player Data to Buffer
5970   F9C6 8D 1E       			bsr  	balladjust				;Do Outhole Processing (EB, Bonus Ball)
5971   F9C8 7E F8 D2    			jmp  	init_player_up			;Init New Player Up
5972   F9CB             
5973   F9CB             ;*********************************************************************
5974   F9CB             ;* Save Player Data: This will save lamp and game specific data to   
5975   F9CB             ;*                   the holding area so information can carrry from 
5976   F9CB             ;*                   ball to ball.            
5977   F9CB             ;*********************************************************************
5978   F9CB             saveplayertobuffer	
5979   F9CB BD F8 BC    			jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
5980   F9CE DF 9A       			stx	temp1
5981   F9D0 CE 00 10    			ldx	#lampbuffer0
5982   F9D3 C6 0C       			ldab	#$0C
5983   F9D5 8D 0C       			bsr	to_copyblock			;Save current lamp settings
5984   F9D7 CE 00 30    			ldx	#lampflashflag
5985   F9DA C6 08       			ldab	#$08
5986   F9DC 8D 05       			bsr	to_copyblock			;Save Flashing lamps too!
5987   F9DE CE 00 02    			ldx	#$0002
5988   F9E1 C6 06       			ldab	#$06
5989   F9E3 7E EF BC    to_copyblock	jmp	copyblock				;Finally, save player game data.
5990   F9E6             
5991   F9E6             ;*********************************************************************
5992   F9E6             ;* Ball Update: This will increment to next player if there is one   
5993   F9E6             ;*              or will increment to next ball. If we are on the last
5994   F9E6             ;*              ball then it jumps to the gameover handler.
5995   F9E6             ;*********************************************************************
5996   F9E6 96 CA       balladjust		ldaa	flag_bonusball			;Check the Bonus Ball Flag (00=free balls)
5997   F9E8             			ifne
5997   F9E8             
5997   F9E8 27 FE       
5998   F9EA CE 01 2A    				ldx	#aud_totalballs			;AUD: Total Balls Played
5999   F9ED BD F7 7F    				jsr	ptrx_plus_1				;Add 1 to data at X
6000   F9F0 96 D0       				ldaa	num_eb				;Number of Extra Balls Remaining
6001   F9F2             				ifeq
6001   F9F2             
6001   F9F2 26 FE       
6002   F9F4 96 CD       					ldaa	player_up				;Current Player Up (0-3)
6003   F9F6 91 CC       					cmpa	num_players				;Number of Players Playing
6004   F9F8 4C          					inca	
6005   F9F9             					ifcc
6005   F9F9             
6005   F9F9 25 FE       
6006   F9FB B6 01 94    						ldaa	adj_numberofballs+1		;ADJ: LSD Balls per game
6007   F9FE 98 58       						eora	mbip_b0
6008   FA00 84 0F       						anda	#$0F
6009   FA02 27 1A       						beq	gameover				;End of Game
6010   FA04 7C 00 58    						inc	mbip_b0				;Increment Ball #
6011   FA07 4F          						clra	
6012   FA08             					endif
6012   FA08             
6012   FA08             
6012   FA08             
6012   FA08             
6012   FA08             
6012   FA08~            					endif
6012   FA08~            					endif
6012   FA08             
6012   FA08~            					endif
6012   FA08~            					endif
6012   FA08             
6012   F9FA             
6012   F9FA 0D          
6012   F9FB             
6012   F9FB             
6012   F9FB~            					endif
6012   F9FB~            					endif
6012   F9FB~            					endif
6012   F9FB             
6012   FA08             
6012   FA08~            					endif
6012   FA08~            					endif
6012   FA08             
6013   FA08 97 CD       					staa	player_up				;Current Player Up (0-3)
6014   FA0A             				endif
6014   FA0A             
6014   FA0A             
6014   FA0A             
6014   FA0A             
6014   FA0A             
6014   FA0A~            				endif
6014   FA0A~            				endif
6014   FA0A             
6014   FA0A~            				endif
6014   FA0A~            				endif
6014   FA0A             
6014   F9F3             
6014   F9F3 16          
6014   F9F4             
6014   F9F4             
6014   F9F4~            				endif
6014   F9F4~            				endif
6014   F9F4~            				endif
6014   F9F4             
6014   FA0A             
6014   FA0A~            				endif
6014   FA0A~            				endif
6014   FA0A             
6015   FA0A             			endif
6015   FA0A             
6015   FA0A             
6015   FA0A             
6015   FA0A             
6015   FA0A             
6015   FA0A~            			endif
6015   FA0A~            			endif
6015   FA0A             
6015   FA0A~            			endif
6015   FA0A~            			endif
6015   FA0A             
6015   F9E9             
6015   F9E9 20          
6015   F9EA             
6015   F9EA             
6015   F9EA~            			endif
6015   F9EA~            			endif
6015   F9EA~            			endif
6015   F9EA             
6015   FA0A             
6015   FA0A~            			endif
6015   FA0A~            			endif
6015   FA0A             
6016   FA0A 39          			rts	
6017   FA0B             
6018   FA0B CE 00 48    show_hstd		ldx	#score_p1_b1				;Score Buffer 1 Base Index
6019   FA0E DF 9A       			stx	temp1
6020   FA10 86 04       			ldaa	#$04
6021   FA12             			begin
6021   FA12             
6022   FA12 C6 04       				ldab	#$04
6023   FA14 CE 01 66    				ldx	#aud_currenthstd				;CMOS: Current HSTD
6024   FA17 BD FF D1    				jsr	block_copy					;Copy Block from X -> temp1, Length = B
6025   FA1A 4A          				deca
6026   FA1B             			eqend
6026   FA1B             
6026   FA1B             
6026   FA1B~            			eqend
6026   FA1B~            			eqend
6026   FA1B~            			eqend
6026   FA1B             
6026   FA1B 26 F5       
6026   FA1D             
6026   FA1D~            			eqend
6026   FA1D~            			eqend
6026   FA1D             
6027   FA1D 39          			rts
6028   FA1E             
6029   FA1E             ;*********************************************************************
6030   FA1E             ;* Game Over Handler: This will do the basic events run at gameover.
6031   FA1E             ;*                    CheckHSTD and Match.
6032   FA1E             ;*********************************************************************				
6033   FA1E BD E0 AF    gameover		jsr	gr_gameover_event
6034   FA21 CE 00 30    			ldx	#lampflashflag
6035   FA24 C6 08       			ldab	#$08
6036   FA26 BD F8 94    			jsr	clear_range				;Clear RAM $30-37 (Lamp Inverts)
6037   FA29 8D 67       			bsr	check_hstd				;Check HSTD
6038   FA2B BD FB 39    			jsr	do_match				;Match Routine
6039   FA2E B6 E0 5D    			ldaa	gr_gameoversound			;Game ROM: Game Over Sound
6040   FA31 BD EC FC    			jsr	isnd_once				;Play Sound Index(A) Once
6041   FA34 B6 E0 65    powerup_init	ldaa	gr_gameover_lamp			;Game ROM: Game Over Lamp Location
6042   FA37 F6 E0 64    			ldab	gr_bip_lamp				;Game ROM: Ball in Play Lamp Location
6043   FA3A BD F3 AB    			jsr	macro_start				;Start Macro Execution
6044   FA3D             			
6045   FA3D             			SOL_($F8)				;Turn Off Solenoid: Flippers Disabled
6045   FA3D 31 F8       
6046   FA3F 17 00       			.db $17,$00 			;Flash Lamp: Lamp Locatation at RAM $00
6047   FA41 15 01       			.db $15,$01 			;Turn off Lamp: Lamp Location is at RAM $01
6048   FA43             			CPUX_ 				;Resume CPU execution
6048   FA43 04          
6049   FA44             
6050   FA44 7C 00 C9    set_gameover	inc	flag_gameover			;Set Game Over
6051   FA47 FE E0 67    			ldx	gr_gameoverthread_ptr		;Game ROM: Init Pointer
6052   FA4A BD EA C4    			jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
6053   FA4D CE 01 81    			ldx	#adj_backuphstd			;CMOS: Backup HSTD
6054   FA50 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6055   FA53 26 03       			bne	show_all_scores			;If there is a HSTD, Show it now.
6056   FA55 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
6057   FA58             			
6058   FA58             show_all_scores	begin
6058   FA58             
6059   FA58 4F          				clra
6060   FA59 BD F8 A4    				jsr	store_display_mask		;A -> Display Buffer Toggle )
6061   FA5C B6 E0 62    				ldaa	gr_hs_lamp				;Game ROM: High Score Lamp Location
6062   FA5F BD F1 5B    				jsr	lamp_off				;Turn off Lamp A (encoded):
6063   FA62 BD EA 2F    				jsr	addthread				;Delay Thread
6064   FA65 90          				.db	$90
6065   FA66 8D A3       				bsr  	show_hstd   			;Puts HSTD in All Player Displays(Buffer 1) 
6066   FA68 D6 60       				ldab  comma_flags
6067   FA6A 43          				coma 
6068   FA6B 7D 00 48    				tst  	score_p1_b1
6069   FA6E             				ifeq
6069   FA6E             
6069   FA6E 26 FE       
6070   FA70 97 48       					staa  score_p1_b1
6071   FA72 97 4C       					staa  score_p2_b1
6072   FA74 97 50       					staa  score_p3_b1
6073   FA76 97 54       					staa  score_p4_b1
6074   FA78 86 33       					ldaa  #$33
6075   FA7A             				endif
6075   FA7A             
6075   FA7A             
6075   FA7A             
6075   FA7A             
6075   FA7A             
6075   FA7A~            				endif
6075   FA7A~            				endif
6075   FA7A             
6075   FA7A~            				endif
6075   FA7A~            				endif
6075   FA7A             
6075   FA6F             
6075   FA6F 0A          
6075   FA70             
6075   FA70             
6075   FA70~            				endif
6075   FA70~            				endif
6075   FA70~            				endif
6075   FA70             
6075   FA7A             
6075   FA7A~            				endif
6075   FA7A~            				endif
6075   FA7A             
6076   FA7A 97 60       				staa 	comma_flags
6077   FA7C 86 7F       				ldaa 	#$7F
6078   FA7E BD F8 A4    				jsr  	store_display_mask				
6079   FA81 B6 E0 62    				ldaa 	gr_hs_lamp				;Game ROM: High Score Lamp Location
6080   FA84 BD F1 69    				jsr  	lamp_flash				;Flash Lamp A(encoded)
6081   FA87 BD EA 2F    				jsr  	addthread   			;Delay Thread
6082   FA8A 70          				.db 	$70
6083   FA8B BD E0 B1    				jsr	gr_hstdtoggle_event		;Check the hook
6084   FA8E D7 60       				stab  comma_flags
6085   FA90             			loopend
6085   FA90             
6085   FA90             
6085   FA90~            			loopend
6085   FA90~            			loopend
6085   FA90~            			loopend
6085   FA90             
6085   FA90 20 C6       
6085   FA92             
6085   FA92~            			loopend
6085   FA92~            			loopend
6085   FA92             
6086   FA92             
6087   FA92             ;************************************************************************
6088   FA92             ;* High Score Check Routine: Will iterate through each player to see if
6089   FA92             ;*                           they beat the high score.
6090   FA92             ;************************************************************************
6091   FA92 CE 01 81    check_hstd		ldx	#adj_backuphstd			;CMOS: Backup HSTD
6092   FA95 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6093   FA98             			ifne						;No award if backup HSTD is 0,000,000
6093   FA98             
6093   FA98 27 FE       
6094   FA9A 7F 00 A1    				clr	sys_temp2
6095   FA9D C6 04       				ldab	#$04
6096   FA9F D7 A0       				stab	sys_temp1
6097   FAA1 CE 00 35    				ldx	#score_p1_b0-3			;Start High and work down low on the digits
6098   FAA4 DF A4       				stx	sys_temp5
6099   FAA6             				begin
6099   FAA6             
6100   FAA6 C6 04       					ldab	#$04
6101   FAA8 D7 A8       					stab	sys_temp_w3				;Number of score Bytes Per Player
6102   FAAA CE 01 66    					ldx	#aud_currenthstd			;CMOS: Current HSTD
6103   FAAD             					begin
6103   FAAD             
6104   FAAD BD EF 63    						jsr	cmosinc_b				;CMOS,X++ -> B
6105   FAB0 DF A6       						stx	sys_temp_w2
6106   FAB2 DE A4       						ldx	sys_temp5
6107   FAB4 BD EC 86    						jsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
6108   FAB7 11          						cba	
6109   FAB8 22 3B       						bhi	update_hstd				;HSTD beat by this digit, adjust HSTD so we dont have multiple awards by each player beating HSTD.
6110   FABA 26 57       						bne	hstd_adddig				;$A4=$A4+$A8
6111   FABC 08          						inx						;Next Digit
6112   FABD DF A4       						stx	sys_temp5				;Store it
6113   FABF DE A6       						ldx	sys_temp_w2				;Next HSDT Digit (pointer)
6114   FAC1 7A 00 A8    						dec	sys_temp_w3				;Goto Next Set of Digits
6115   FAC4             					eqend						;Loop for all (4)2 digits
6115   FAC4             
6115   FAC4             
6115   FAC4~            					eqend						;Loop for all (4)2 digits
6115   FAC4~            					eqend						;Loop for all (4)2 digits
6115   FAC4~            					eqend						;Loop for all (4)2 digits
6115   FAC4             
6115   FAC4 26 E7       
6115   FAC6             
6115   FAC6~            					eqend						;Loop for all (4)2 digits
6115   FAC6~            					eqend						;Loop for all (4)2 digits
6115   FAC6             
6116   FAC6 7A 00 A0    hstd_nextp			dec	sys_temp1				;Goto Next Player
6117   FAC9             				eqend						;Loop for all 4 Players
6117   FAC9             
6117   FAC9             
6117   FAC9~            				eqend						;Loop for all 4 Players
6117   FAC9~            				eqend						;Loop for all 4 Players
6117   FAC9~            				eqend						;Loop for all 4 Players
6117   FAC9             
6117   FAC9 26 DB       
6117   FACB             
6117   FACB~            				eqend						;Loop for all 4 Players
6117   FACB~            				eqend						;Loop for all 4 Players
6117   FACB             
6118   FACB 96 A1       				ldaa	sys_temp2
6119   FACD             				ifne
6119   FACD             
6119   FACD 27 FE       
6120   FACF B6 E0 5C    					ldaa	gr_highscoresound			;Game ROM Data: High Score Sound
6121   FAD2 BD EC FC    					jsr	isnd_once				;Play Sound Index(A) Once
6122   FAD5 8D 59       					bsr	send_sound					;time delay
6123   FAD7 CE 01 A7    set_hstd				ldx	#adj_hstdcredits			;Adjustment: HSTD Award
6124   FADA BD EF 53    					jsr	cmosinc_a				;CMOS,X++ -> A
6125   FADD CE 01 4E    					ldx	#aud_hstdcredits			;Audit: HSTD Credits Awarded
6126   FAE0 BD F7 84    					jsr	ptrx_plus_a				;Add A to data at X:
6127   FAE3 BD F6 FE    					jsr	addcredits				;Add Credits if Possible
6128   FAE6 B6 01 66    					ldaa	aud_currenthstd			;HSTD High Digit
6129   FAE9 84 0F       					anda	#$0F
6130   FAEB             					ifne					;Branch if Score is under 10 million
6130   FAEB             
6130   FAEB 27 FE       
6131   FAED 86 99       						ldaa	#$99
6132   FAEF 8D 33       						bsr	fill_hstd_digits			;Set HSTD to 9,999,999
6133   FAF1 7F 01 66    						clr	aud_currenthstd			;Clear 10 Million Digit
6134   FAF4             					endif
6134   FAF4             
6134   FAF4             
6134   FAF4             
6134   FAF4             
6134   FAF4             
6134   FAF4~            					endif
6134   FAF4~            					endif
6134   FAF4             
6134   FAF4~            					endif
6134   FAF4~            					endif
6134   FAF4             
6134   FAEC             
6134   FAEC 07          
6134   FAED             
6134   FAED             
6134   FAED~            					endif
6134   FAED~            					endif
6134   FAED~            					endif
6134   FAED             
6134   FAF4             
6134   FAF4~            					endif
6134   FAF4~            					endif
6134   FAF4             
6135   FAF4             				endif
6135   FAF4             
6135   FAF4             
6135   FAF4             
6135   FAF4             
6135   FAF4             
6135   FAF4~            				endif
6135   FAF4~            				endif
6135   FAF4             
6135   FAF4~            				endif
6135   FAF4~            				endif
6135   FAF4             
6135   FACE             
6135   FACE 25          
6135   FACF             
6135   FACF             
6135   FACF~            				endif
6135   FACF~            				endif
6135   FACF~            				endif
6135   FACF             
6135   FAF4             
6135   FAF4~            				endif
6135   FAF4~            				endif
6135   FAF4             
6136   FAF4             			endif
6136   FAF4             
6136   FAF4             
6136   FAF4             
6136   FAF4             
6136   FAF4             
6136   FAF4~            			endif
6136   FAF4~            			endif
6136   FAF4             
6136   FAF4~            			endif
6136   FAF4~            			endif
6136   FAF4             
6136   FA99             
6136   FA99 5A          
6136   FA9A             
6136   FA9A             
6136   FA9A~            			endif
6136   FA9A~            			endif
6136   FA9A~            			endif
6136   FA9A             
6136   FAF4             
6136   FAF4~            			endif
6136   FAF4~            			endif
6136   FAF4             
6137   FAF4 39          			rts	
6138   FAF5             
6139   FAF5 CE 01 66    update_hstd		ldx	#aud_currenthstd			;Current HSTD
6140   FAF8 7C 00 A1    			inc	sys_temp2
6141   FAFB DF 9A       			stx	temp1
6142   FAFD 8D 18       			bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
6143   FAFF C6 04       			ldab	#$04
6144   FB01 09          			dex	
6145   FB02 BD EF E4    			jsr	copyblock2				;Transfer Data Block at X to temp1, Length B
6146   FB05 7C 01 66    			inc	aud_currenthstd			;Adjust HSTD to new player score
6147   FB08 B6 01 67    			ldaa	aud_currenthstd+1
6148   FB0B 4C          			inca	
6149   FB0C 84 0F       			anda	#$0F
6150   FB0E 26 B6       			bne	hstd_nextp				;Go Check Next Player Score
6151   FB10 7F 01 67    			clr	aud_currenthstd+1
6152   FB13 8D 02       hstd_adddig		bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
6153   FB15 20 AF       			bra	hstd_nextp				;Go Check Next Player Score
6154   FB17             			
6155   FB17             ;*************************************************
6156   FB17             ;* Add LSB of sys_temp_w3 to sys_temp5
6157   FB17             ;*************************************************
6158   FB17 DE A4       wordplusbyte	ldx	sys_temp5
6159   FB19 96 A8       			ldaa	sys_temp_w3
6160   FB1B 7F 00 A8    			clr	sys_temp_w3
6161   FB1E BD EE FF    			jsr	xplusa				;X = X + A
6162   FB21 DF A4       			stx	sys_temp5
6163   FB23 39          to_rts1		rts	
6164   FB24             
6165   FB24             ;**************************************************
6166   FB24             ;* This routine will fill the value of A into all
6167   FB24             ;* high score digit data.
6168   FB24             ;**************************************************
6169   FB24 CE 01 66    fill_hstd_digits	ldx	#aud_currenthstd			;CMOS: Current HSTD
6170   FB27 C6 04       			ldab	#$04
6171   FB29             			begin
6171   FB29             
6172   FB29 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++)
6173   FB2C 5A          				decb	
6174   FB2D             			eqend
6174   FB2D             
6174   FB2D             
6174   FB2D~            			eqend
6174   FB2D~            			eqend
6174   FB2D~            			eqend
6174   FB2D             
6174   FB2D 26 FA       
6174   FB2F             
6174   FB2F~            			eqend
6174   FB2F~            			eqend
6174   FB2F             
6175   FB2F 39          			rts
6176   FB30             				
6177   FB30             send_sound		begin
6177   FB30             
6178   FB30 BD EA 2F    				jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6179   FB33 02          				.db 	$02
6180   FB34 96 C1       				ldaa  $C1					;Sound Flag?
6181   FB36             		      eqend
6181   FB36             
6181   FB36             
6181   FB36~            		      eqend
6181   FB36~            		      eqend
6181   FB36~            		      eqend
6181   FB36             
6181   FB36 26 F8       
6181   FB38             
6181   FB38~            		      eqend
6181   FB38~            		      eqend
6181   FB38             
6182   FB38 39          		      rts
6183   FB39             
6184   FB39             ;*************************************************************
6185   FB39             ;* Match Routine: Will generate a random number and put in in
6186   FB39             ;*                the match display. Then it will compare each
6187   FB39             ;*                player score too see if we have a match.    
6188   FB39             ;*                If so, it will increment temp1 for each. 
6189   FB39             ;*************************************************************
6190   FB39 B6 01 8C    do_match		ldaa	adj_matchenable+1			;Adjustment: LSD Match 00=on 01=off
6191   FB3C 46          			rora	
6192   FB3D 25 E4       			bcs	to_rts1				;If match is off, get out of here.
6193   FB3F             			begin
6193   FB3F             
6194   FB3F 8D 3F       				bsr	get_random				;Get Random Number??
6195   FB41 48          				asla	
6196   FB42 48          				asla	
6197   FB43 48          				asla	
6198   FB44 48          				asla	
6199   FB45 81 A0       				cmpa	#$A0
6200   FB47             			csend						;If A>= 0xA0 then try again.
6200   FB47             
6200   FB47             
6200   FB47~            			csend						;If A>= 0xA0 then try again.
6200   FB47~            			csend						;If A>= 0xA0 then try again.
6200   FB47~            			csend						;If A>= 0xA0 then try again.
6200   FB47             
6200   FB47 24 F6       
6200   FB49             
6200   FB49~            			csend						;If A>= 0xA0 then try again.
6200   FB49~            			csend						;If A>= 0xA0 then try again.
6200   FB49             
6201   FB49 97 58       			staa	mbip_b0				;Store Match # in Match/BallinPlay
6202   FB4B 7F 00 9A    			clr	temp1
6203   FB4E C6 04       			ldab	#$04
6204   FB50 D7 9B       			stab	temp1+1
6205   FB52 CE 00 38    			ldx	#score_p1_b0			;Player Score Buffers, do each one
6206   FB55             			begin
6206   FB55             
6207   FB55 A1 03       				cmpa	$03,X
6208   FB57             				ifeq
6208   FB57             
6208   FB57 26 FE       
6209   FB59 7C 00 9A    					inc	temp1					;Yes, a Match!
6210   FB5C             				endif
6210   FB5C             
6210   FB5C             
6210   FB5C             
6210   FB5C             
6210   FB5C             
6210   FB5C~            				endif
6210   FB5C~            				endif
6210   FB5C             
6210   FB5C~            				endif
6210   FB5C~            				endif
6210   FB5C             
6210   FB58             
6210   FB58 03          
6210   FB59             
6210   FB59             
6210   FB59~            				endif
6210   FB59~            				endif
6210   FB59~            				endif
6210   FB59             
6210   FB5C             
6210   FB5C~            				endif
6210   FB5C~            				endif
6210   FB5C             
6211   FB5C BD EF 4D    				jsr	xplusb				;X = X + B)
6212   FB5F 7A 00 9B    				dec	temp1+1
6213   FB62             			eqend						;Do it 4 Times.
6213   FB62             
6213   FB62             
6213   FB62~            			eqend						;Do it 4 Times.
6213   FB62~            			eqend						;Do it 4 Times.
6213   FB62~            			eqend						;Do it 4 Times.
6213   FB62             
6213   FB62 26 F1       
6213   FB64             
6213   FB64~            			eqend						;Do it 4 Times.
6213   FB64~            			eqend						;Do it 4 Times.
6213   FB64             
6214   FB64 D6 9A       			ldab	temp1					;Number of Matches
6215   FB66             			ifne						;None, Get outta here.
6215   FB66             
6215   FB66 27 FE       
6216   FB68 B6 E0 5B    				ldaa	gr_matchsound			;Game ROM Data: Match Sound
6217   FB6B BD EC FC    				jsr	isnd_once				;Play Sound Index(A) Once
6218   FB6E 8D C0       				bsr	send_sound
6219   FB70 17          				tba	
6220   FB71 CE 01 1A    				ldx	#aud_matchcredits			;Audit: Match Credits
6221   FB74 BD F7 84    				jsr	ptrx_plus_a				;Add Matches to Audit
6222   FB77 BD F6 FE    				jsr	addcredits				;Add Credits if Possible
6223   FB7A             			endif
6223   FB7A             
6223   FB7A             
6223   FB7A             
6223   FB7A             
6223   FB7A             
6223   FB7A~            			endif
6223   FB7A~            			endif
6223   FB7A             
6223   FB7A~            			endif
6223   FB7A~            			endif
6223   FB7A             
6223   FB67             
6223   FB67 12          
6223   FB68             
6223   FB68             
6223   FB68~            			endif
6223   FB68~            			endif
6223   FB68~            			endif
6223   FB68             
6223   FB7A             
6223   FB7A~            			endif
6223   FB7A~            			endif
6223   FB7A             
6224   FB7A B6 E0 63    			ldaa	gr_match_lamp			;Game ROM: Match Lamp Location
6225   FB7D 7E F1 3C    			jmp	lamp_on				;Turn on Lamp A (encoded):
6226   FB80             
6227   FB80             ;******************************************************
6228   FB80             ;* Get Random: Will pull various system variables and
6229   FB80             ;*             calculate a pseudo-random number.
6230   FB80             ;******************************************************			
6231   FB80 37          get_random		pshb	
6232   FB81 96 D7       			ldaa	randomseed				;This is changed by Switch Closures
6233   FB83 16          			tab	
6234   FB84 56          			rorb	
6235   FB85 56          			rorb	
6236   FB86 97 9A       			staa	temp1					;Use some Temp variables for data
6237   FB88 D8 9A       			eorb	temp1
6238   FB8A 59          			rolb	
6239   FB8B 49          			rola	
6240   FB8C 97 D7       			staa	randomseed
6241   FB8E 9B 89       			adda	irq_counter					;Throw in some switch matrix stuff
6242   FB90 33          			pulb	
6243   FB91 39          to_rts2		rts	
6244   FB92             
6245   FB92             ;********************************************************
6246   FB92             ;* Credit Button Press: 
6247   FB92             ;********************************************************
6248   FB92 CE 01 AB    credit_button	ldx	#adj_max_credits			;CMOS: Max. Credits
6249   FB95 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
6250   FB98 CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
6251   FB9B BD FE 1F    			jsr	cmos_a				;CMOS, X -> A )
6252   FB9E 26 03       			bne	has_credit
6253   FBA0 5D          			tstb						;No credits, check for free play
6254   FBA1             			ifeq						;No Free Play, get outta here.
6254   FBA1             
6254   FBA1 26 FE       
6255   FBA3 D6 C9       has_credit			ldab	flag_gameover			;Has valid credit or freeplay, is Game Over?
6256   FBA5 26 15       				bne	start_new_game			;No, goto Start New Game
6257   FBA7 D6 58       				ldab	mbip_b0				;Ball #
6258   FBA9 C1 F1       				cmpb	#$F1					;First Ball?
6259   FBAB 26 0F       				bne	start_new_game			;Start New Game
6260   FBAD D6 CC       				ldab	num_players				;Current # of Players
6261   FBAF F1 E0 4E    				cmpb	gr_numplayers			;Max # of Players (Game ROM data)
6262   FBB2             				ifcs						;Already 4 players, outta here.
6262   FBB2             
6262   FBB2 24 FE       
6263   FBB4 8D 0B       					bsr	lesscredit				;Subtract a credit
6264   FBB6 BD F8 58    					jsr	add_player				;Add a player.
6265   FBB9             				endif
6265   FBB9             
6265   FBB9             
6265   FBB9             
6265   FBB9             
6265   FBB9             
6265   FBB9~            				endif
6265   FBB9~            				endif
6265   FBB9             
6265   FBB9~            				endif
6265   FBB9~            				endif
6265   FBB9             
6265   FBB3             
6265   FBB3 05          
6265   FBB4             
6265   FBB4             
6265   FBB4~            				endif
6265   FBB4~            				endif
6265   FBB4~            				endif
6265   FBB4             
6265   FBB9             
6265   FBB9~            				endif
6265   FBB9~            				endif
6265   FBB9             
6266   FBB9             			endif
6266   FBB9             
6266   FBB9             
6266   FBB9             
6266   FBB9             
6266   FBB9             
6266   FBB9~            			endif
6266   FBB9~            			endif
6266   FBB9             
6266   FBB9~            			endif
6266   FBB9~            			endif
6266   FBB9             
6266   FBA2             
6266   FBA2 16          
6266   FBA3             
6266   FBA3             
6266   FBA3~            			endif
6266   FBA3~            			endif
6266   FBA3~            			endif
6266   FBA3             
6266   FBB9             
6266   FBB9~            			endif
6266   FBB9~            			endif
6266   FBB9             
6267   FBB9 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
6268   FBBC             
6269   FBBC             ;*********************************************************
6270   FBBC             ;* Resets Games and Starts Anew
6271   FBBC             ;*********************************************************
6272   FBBC 8D 03       start_new_game	bsr	lesscredit				;Subtract a credit
6273   FBBE 7E F8 47    			jmp	do_game_init			;Init Player 1
6274   FBC1             			
6275   FBC1             ;*********************************************************
6276   FBC1             ;* Removes a credit and adjusts coin lockout and credit 
6277   FBC1             ;* lamp appropriately. Also updates audits.
6278   FBC1             ;*
6279   FBC1             ;* 	Current Credits in A.
6280   FBC1             ;*********************************************************
6281   FBC1 4D          lesscredit		tsta	
6282   FBC2             			ifne						;Is it Zero?
6282   FBC2             
6282   FBC2 27 FE       
6283   FBC4 8B 99       				adda	#$99					;Subtract 1 credit
6284   FBC6 19          				daa						;dont' forget to adjust
6285   FBC7 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++)
6286   FBCA 96 5A       				ldaa	cred_b0				;Current Credits
6287   FBCC 8B 99       				adda	#$99					;Subtract 1
6288   FBCE 19          				daa	
6289   FBCF 97 5A       				staa	cred_b0				;Store Credits
6290   FBD1             			endif
6290   FBD1             
6290   FBD1             
6290   FBD1             
6290   FBD1             
6290   FBD1             
6290   FBD1~            			endif
6290   FBD1~            			endif
6290   FBD1             
6290   FBD1~            			endif
6290   FBD1~            			endif
6290   FBD1             
6290   FBC3             
6290   FBC3 0D          
6290   FBC4             
6290   FBC4             
6290   FBC4~            			endif
6290   FBC4~            			endif
6290   FBC4~            			endif
6290   FBC4             
6290   FBD1             
6290   FBD1~            			endif
6290   FBD1~            			endif
6290   FBD1             
6291   FBD1 BD F7 2C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
6292   FBD4 BD F8 29    			jsr	clr_bonus_coins			;Reset Any Bonus Coins... too bad!
6293   FBD7 CE 01 1E    			ldx	#aud_totalcredits			;Audit: Total Credits
6294   FBDA 7E F7 7F    			jmp	ptrx_plus_1				;Add 1 to data at X
6295   FBDD             
6296   FBDD             ;*********************************************************
6297   FBDD             ;* Tilt Contacts
6298   FBDD             ;*********************************************************			
6299   FBDD 7C 00 D3    tilt_warning	inc	num_tilt				;Add 1 Tilt
6300   FBE0 B6 01 92    			ldaa	adj_maxplumbbobtilts+1		;ADJ: LSD Max Plumb Bob Tilts
6301   FBE3 84 0F       			anda	#$0F
6302   FBE5 91 D3       			cmpa	num_tilt				;Current # of Plumb Bob Tilts
6303   FBE7 22 A8       			bhi	to_rts2				;Not enough warnings yet.. Leave now!
6304   FBE9 B6 E0 66    do_tilt		ldaa	gr_tilt_lamp			;Game ROM: Tilt Lamp Location
6305   FBEC 97 C8       			staa	flag_tilt				;Tilt Flag
6306   FBEE BD F3 AB    			jsr	macro_start				;Start Macro Execution-
6307   FBF1             			
6308   FBF1 14 00       			.db $14,$00 		;Turn on Tilt Lamp
6309   FBF3             			REMTHREADS_($0C,$00)	;.db $55,$0C,$00  	;Get Rid of non-tilt threads
6309   FBF3 55 0C 00    
6310   FBF6             			SOL_($F8)			;.db $31,$F8 		;Disable Flippers
6310   FBF6 31 F8       
6311   FBF8             			CPUX_				;Return to Program Execution 
6311   FBF8 04          
6312   FBF9             
6313   FBF9 39          			rts
6314   FBFA             
6315   FBFA             ;***********************************************************
6316   FBFA             ;* Self Test Routines Begin Here, first some data tables
6317   FBFA             ;***********************************************************
6318   FBFA             ;* Define our test entry points
6319   FBFA             ;***********************************************
6320   FBFA FE 43       testdata		.dw st_display
6321   FBFC FE 62       			.dw st_sound
6322   FBFE FE 8D       			.dw st_lamp
6323   FC00 FE CB       			.dw st_solenoid
6324   FC02 FE F0       			.dw st_switch
6325   FC04             
6326   FC04             ;***********************************************
6327   FC04             ;* This table defines which routines
6328   FC04             ;* handel the various adjustment displays.
6329   FC04             ;***********************************************			
6330   FC04 00          testlists		.db $00		;Function 00:    Game Identification
6331   FC05 FD 23       			.dw fn_gameid	;$FD,$23
6332   FC07 01          			.db $01		;Function 01-11: System Audits
6333   FC08 FD 30       			.dw fn_sysaud	;$FD,$30
6334   FC0A 0C          			.db $0C		;Function 12:    Current HSTD
6335   FC0B FD A9       			.dw fn_hstd		;$FD,$A9
6336   FC0D 0D          			.db $0D		;Function 13-17: Backup HSTD and Replays
6337   FC0E FD B1       			.dw fn_replay	;$FD,$B1
6338   FC10 12          			.db $12		;Function 18:    Max Credits
6339   FC11 FE 26       			.dw fn_credit	;$FE,$26
6340   FC13 13          			.db $13		;Function 19:    Pricing Control
6341   FC14 FD EF       			.dw fn_pricec	;$FD,$EF
6342   FC16 14          			.db $14		;Function 20-25: Pricing Settings
6343   FC17 FE 09       			.dw fn_prices	;$FE,$09
6344   FC19 1A          			.db $1A		;Function 26-41: System and Game Adjustments
6345   FC1A FE 33       			.dw fn_adj		;$FE,$33
6346   FC1C 2A          			.db $2A		;Function 42-49: Game Audits
6347   FC1D FD 2E       			.dw fn_gameaud	;$FD,$2E
6348   FC1F 32          			.db $32		;Function 50:    Command Mode
6349   FC20 FE 3E       			.dw fn_command	;$FE,$3E
6350   FC22 33          			.db $33
6351   FC23             
6352   FC23             ;************************************************
6353   FC23             ;* Main Self-Test Routine
6354   FC23             ;************************************************
6355   FC23             test_number =	$000e			;RAM Location to store where we are...
6356   FC23             test_lamptimer =	$000f			;Timer for Lamp test loop
6357   FC23             
6358   FC23             
6359   FC23 8D 45       selftest_entry	bsr	check_adv				;Advance: - if Triggered
6360   FC25             			ifpl
6360   FC25             
6360   FC25 2B FE       
6361   FC27 7E EA 67    				jmp	killthread				;Kill Current Thread
6362   FC2A             			endif
6362   FC2A             
6362   FC2A             
6362   FC2A             
6362   FC2A             
6362   FC2A             
6362   FC2A~            			endif
6362   FC2A~            			endif
6362   FC2A             
6362   FC2A~            			endif
6362   FC2A~            			endif
6362   FC2A             
6362   FC26             
6362   FC26 03          
6362   FC27             
6362   FC27             
6362   FC27~            			endif
6362   FC27~            			endif
6362   FC27~            			endif
6362   FC27             
6362   FC2A             
6362   FC2A~            			endif
6362   FC2A~            			endif
6362   FC2A             
6363   FC2A 8D 54       			bsr	st_init				;Set up self test
6364   FC2C 8D 47       			bsr	check_aumd				;AUMD: + if Manual-Down
6365   FC2E 2B 75       			bmi	do_audadj				;Auto-Up, go do audits and adjustments instead
6366   FC30 4F          			clra	
6367   FC31 7F 00 0E    st_diagnostics	clr	test_number				;Start at 0
6368   FC34 CE FB FA    			ldx	#testdata				;Macro Pointer
6369   FC37 36          			psha	
6370   FC38 BD F4 8E    			jsr	gettabledata_b			;Load up the pointer to our test routine in X
6371   FC3B 32          			pula	
6372   FC3C 16          			tab	
6373   FC3D 5A          			decb						;Adjust back down to where it was before table lookup incremented it
6374   FC3E D7 5A       			stab	cred_b0				;Show the test number in display
6375   FC40 BD EA C4    			jsr	newthread_06			;Start a new thread with our test routine
6376   FC43 BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6377   FC46 10          			.db	$10	
6378   FC47             			;This is the Advance button handler, it runs as a seperate thread to the test routine
6379   FC47             			begin
6379   FC47             
6380   FC47             				begin
6380   FC47             
6381   FC47 8D 21       					bsr	check_adv			;Advance: Stay here forever until pressed			   
6382   FC49             				miend
6382   FC49             
6382   FC49             
6382   FC49~            				miend
6382   FC49~            				miend
6382   FC49~            				miend
6382   FC49             
6382   FC49 2A FC       
6382   FC4B             
6382   FC4B~            				miend
6382   FC4B~            				miend
6382   FC4B             
6383   FC4B 8D 28       				bsr	check_aumd				;AUMD: + if Manual-Down
6384   FC4D 2B 45       				bmi	st_nexttest				;Do next test...
6385   FC4F D7 0E       				stab	test_number
6386   FC51             				begin
6386   FC51             
6387   FC51 8D 17       					bsr	check_adv			;Advance: Stay here forever until released
6388   FC53             				plend
6388   FC53             
6388   FC53             
6388   FC53~            				plend
6388   FC53~            				plend
6388   FC53~            				plend
6388   FC53             
6388   FC53 2B FC       
6388   FC55             
6388   FC55~            				plend
6388   FC55~            				plend
6388   FC55             
6389   FC55             			loopend
6389   FC55             
6389   FC55             
6389   FC55~            			loopend
6389   FC55~            			loopend
6389   FC55~            			loopend
6389   FC55             
6389   FC55 20 F0       
6389   FC57             
6389   FC57~            			loopend
6389   FC57~            			loopend
6389   FC57             
6390   FC57             
6391   FC57             ;*******************************************************
6392   FC57             ;*
6393   FC57             ;*******************************************************			
6394   FC57 36          do_aumd		psha	
6395   FC58 96 CB       			ldaa	flags_selftest
6396   FC5A             			ifpl
6396   FC5A             
6396   FC5A 2B FE       
6397   FC5C 8D 17       				bsr	check_aumd					;AUMD: + if Manual-Down
6398   FC5E             				ifpl
6398   FC5E             
6398   FC5E 2B FE       
6399   FC60 96 0E       					ldaa	test_number
6400   FC62             					ifne
6400   FC62             
6400   FC62 27 FE       
6401   FC64 4F          						clra	
6402   FC65 97 0E       						staa	test_number
6403   FC67 4A          						deca	
6404   FC68             					endif
6404   FC68             
6404   FC68             
6404   FC68             
6404   FC68             
6404   FC68             
6404   FC68~            					endif
6404   FC68~            					endif
6404   FC68             
6404   FC68~            					endif
6404   FC68~            					endif
6404   FC68             
6404   FC63             
6404   FC63 04          
6404   FC64             
6404   FC64             
6404   FC64~            					endif
6404   FC64~            					endif
6404   FC64~            					endif
6404   FC64             
6404   FC68             
6404   FC68~            					endif
6404   FC68~            					endif
6404   FC68             
6405   FC68             				endif
6405   FC68             
6405   FC68             
6405   FC68             
6405   FC68             
6405   FC68             
6405   FC68~            				endif
6405   FC68~            				endif
6405   FC68             
6405   FC68~            				endif
6405   FC68~            				endif
6405   FC68             
6405   FC5F             
6405   FC5F 08          
6405   FC60             
6405   FC60             
6405   FC60~            				endif
6405   FC60~            				endif
6405   FC60~            				endif
6405   FC60             
6405   FC68             
6405   FC68~            				endif
6405   FC68~            				endif
6405   FC68             
6406   FC68             			endif
6406   FC68             
6406   FC68             
6406   FC68             
6406   FC68             
6406   FC68             
6406   FC68~            			endif
6406   FC68~            			endif
6406   FC68             
6406   FC68~            			endif
6406   FC68~            			endif
6406   FC68             
6406   FC5B             
6406   FC5B 0C          
6406   FC5C             
6406   FC5C             
6406   FC5C~            			endif
6406   FC5C~            			endif
6406   FC5C~            			endif
6406   FC5C             
6406   FC68             
6406   FC68~            			endif
6406   FC68~            			endif
6406   FC68             
6407   FC68 32          			pula	
6408   FC69 39          			rts
6409   FC6A             
6410   FC6A             ;*********************************************************
6411   FC6A             ;* This will check the state of the advance switch and
6412   FC6A             ;* return the control register results
6413   FC6A             ;*********************************************************				
6414   FC6A F6 28 00    check_adv		ldab	pia_disp_digit_data		;Dummy read to clear previous results
6415   FC6D BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6416   FC70 02          			.db	$02
6417   FC71 F6 28 01    			ldab	pia_disp_digit_ctrl
6418   FC74 39          			rts
6419   FC75             
6420   FC75             ;*********************************************************
6421   FC75             ;* This routine will check the state of the Up/Down toggle
6422   FC75             ;* switch. First do a dummy read to clear previous results
6423   FC75             ;*********************************************************
6424   FC75 F6 28 02    check_aumd		ldab	pia_disp_seg_data			;Dummy read to clear previous results
6425   FC78 BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6426   FC7B 02          			.db	$02
6427   FC7C F6 28 03    			ldab	pia_disp_seg_ctrl
6428   FC7F 39          			rts
6429   FC80             
6430   FC80             ;**************************************************
6431   FC80             ;* Self Test Initializations:
6432   FC80             ;*	Remove all VM Threads
6433   FC80             ;*	Disable Solenoids
6434   FC80             ;*	Clear RAM
6435   FC80             ;**************************************************
6436   FC80 5F          st_init		clrb	
6437   FC81 BD EA FB    			jsr	kill_threads			;Remove All VM Threads 
6438   FC84 86 18       			ldaa	#$18
6439   FC86 BD EB 23    			jsr	solbuf				;Turn Off Solenoid 24 (Flipper Enable)
6440   FC89 7C 00 CB    			inc	flags_selftest			;Set Test Flag
6441   FC8C CE 00 00    			ldx	#ram_base
6442   FC8F C6 89       			ldab	#$89
6443   FC91 7E F8 94    to_clear_range	jmp	clear_range				;Clear RAM from $0000-0089
6444   FC94             
6445   FC94             ;**************************************************
6446   FC94             ;* Next Test: Will advance diagnostics to next
6447   FC94             ;*            test in sequence, if done, then fall
6448   FC94             ;*            through to audits/adjustments
6449   FC94             ;**************************************************
6450   FC94 C6 28       st_nexttest		ldab	#$28
6451   FC96 CE 00 10    			ldx	#lampbuffer0
6452   FC99 8D F6       			bsr	to_clear_range			;Clear RAM from $0010-0038
6453   FC9B BD EA FB    			jsr	kill_threads			;Remove all VM Threads
6454   FC9E 4C          			inca	
6455   FC9F 81 05       			cmpa	#$05					;are we done yet?
6456   FCA1 26 8E       			bne	st_diagnostics			;Goto back to Self-Test Diagnostics routine
6457   FCA3             			;Fall through if finished
6458   FCA3             			
6459   FCA3             ;**************************************************
6460   FCA3             ;* Main Audit/Adjustments Process Entry
6461   FCA3             ;**************************************************			
6462   FCA3 8D DB       to_audadj		bsr	st_init				;Clear all RAM and set up self testing
6463   FCA5 7F 00 58    do_audadj		clr	mbip_b0
6464   FCA8 86 04       			ldaa	#$04					;Show test 04 by default
6465   FCAA 97 5A       			staa	cred_b0
6466   FCAC BD EA 2F    			jsr	addthread				;Wait $10
6467   FCAF 10          			.db 	$10	
6468   FCB0             			begin
6468   FCB0             
6469   FCB0 BD F8 9A    				jsr	clear_displays			;Blank all Player Displays (buffer 0)
6470   FCB3 8D 36       				bsr	b_129					;#08 -> $0F
6471   FCB5 D6 58       				ldab	mbip_b0
6472   FCB7 BD F8 34    				jsr	dec2hex				;Convert Decimal(B) to Hex(B)
6473   FCBA CE FC 01    				ldx	#testlists-3
6474   FCBD             				begin
6474   FCBD             
6475   FCBD 08          					inx	
6476   FCBE 08          					inx	
6477   FCBF 08          					inx	
6478   FCC0 E1 03       					cmpb	$03,X					;Are we at next handler?
6479   FCC2             				csend
6479   FCC2             
6479   FCC2             
6479   FCC2~            				csend
6479   FCC2~            				csend
6479   FCC2~            				csend
6479   FCC2             
6479   FCC2 24 F9       
6479   FCC4             
6479   FCC4~            				csend
6479   FCC4~            				csend
6479   FCC4             
6480   FCC4 EE 01       				ldx	$01,X					;Load the routine
6481   FCC6 AD 00       				jsr	$00,X					;Do the routine to load up data into displays
6482   FCC8             				begin
6482   FCC8             
6483   FCC8 BD FC 6A    					jsr	check_adv			;Advance: - if Triggered
6484   FCCB             				miend
6484   FCCB             
6484   FCCB             
6484   FCCB~            				miend
6484   FCCB~            				miend
6484   FCCB~            				miend
6484   FCCB             
6484   FCCB 2A FB       
6484   FCCD             
6484   FCCD~            				miend
6484   FCCD~            				miend
6484   FCCD             
6485   FCCD 8D 1C       b_133				bsr	b_129					;#08 -> $0F
6486   FCCF BD FC 6A    show_func			jsr	check_adv				;Advance: - if Triggered
6487   FCD2             			miend
6487   FCD2             
6487   FCD2             
6487   FCD2~            			miend
6487   FCD2~            			miend
6487   FCD2~            			miend
6487   FCD2             
6487   FCD2 2A DC       
6487   FCD4             
6487   FCD4~            			miend
6487   FCD4~            			miend
6487   FCD4             
6488   FCD4 8D 1A       			bsr	b_12D
6489   FCD6 26 F7       			bne	show_func				;Look at the buttons again
6490   FCD8 8D 31       			bsr	adjust_func				;Add or subtract the function number?
6491   FCDA 9B 58       			adda	mbip_b0				;Change it
6492   FCDC 19          			daa	
6493   FCDD 81 51       			cmpa	#$51					;Are we now on audit 51??
6494   FCDF 27 35       			beq	st_reset				;Yes, Blank displays, reboot game
6495   FCE1 81 99       			cmpa	#$99					;Going down, are we minus now??
6496   FCE3             			ifeq
6496   FCE3             
6496   FCE3 26 FE       
6497   FCE5 86 50       				ldaa	#$50					;Yes, wrap around to 50
6498   FCE7             			endif
6498   FCE7             
6498   FCE7             
6498   FCE7             
6498   FCE7             
6498   FCE7             
6498   FCE7~            			endif
6498   FCE7~            			endif
6498   FCE7             
6498   FCE7~            			endif
6498   FCE7~            			endif
6498   FCE7             
6498   FCE4             
6498   FCE4 02          
6498   FCE5             
6498   FCE5             
6498   FCE5~            			endif
6498   FCE5~            			endif
6498   FCE5~            			endif
6498   FCE5             
6498   FCE7             
6498   FCE7~            			endif
6498   FCE7~            			endif
6498   FCE7             
6499   FCE7 97 58       			staa	mbip_b0				;Store new value
6500   FCE9 20 E4       			bra	show_func				;Look at the buttons again
6501   FCEB             			
6502   FCEB 86 08       b_129			ldaa	#$08
6503   FCED 97 0F       			staa	$000F
6504   FCEF 39          			rts	
6505   FCF0             			
6506   FCF0 96 0F       b_12D			ldaa	$000F
6507   FCF2             			ifne
6507   FCF2             
6507   FCF2 27 FE       
6508   FCF4 7A 00 0F    				dec	$000F
6509   FCF7 81 08       				cmpa	#$08
6510   FCF9             			endif
6510   FCF9             
6510   FCF9             
6510   FCF9             
6510   FCF9             
6510   FCF9             
6510   FCF9~            			endif
6510   FCF9~            			endif
6510   FCF9             
6510   FCF9~            			endif
6510   FCF9~            			endif
6510   FCF9             
6510   FCF3             
6510   FCF3 05          
6510   FCF4             
6510   FCF4             
6510   FCF4~            			endif
6510   FCF4~            			endif
6510   FCF4~            			endif
6510   FCF4             
6510   FCF9             
6510   FCF9~            			endif
6510   FCF9~            			endif
6510   FCF9             
6511   FCF9 39          			rts
6512   FCFA             	
6513   FCFA             			begin
6513   FCFA             
6514   FCFA 8D EF       				bsr	b_129					;#08 -> $0F
6515   FCFC BD FC 6A    b_135				jsr	check_adv				;Advance: - if Triggered
6516   FCFF 2B CC       				bmi	b_133
6517   FD01 96 69       				ldaa	switch_masked
6518   FD03 85 04       				bita	#$04
6519   FD05             			neend
6519   FD05             
6519   FD05             
6519   FD05~            			neend
6519   FD05~            			neend
6519   FD05~            			neend
6519   FD05             
6519   FD05 27 F3       
6519   FD07             
6519   FD07~            			neend
6519   FD07~            			neend
6519   FD07             
6520   FD07 8D E7       			bsr	b_12D
6521   FD09 26 F1       			bne	b_135
6522   FD0B 86 99       adjust_func		ldaa	#$99
6523   FD0D BD FC 75    			jsr	check_aumd				;AUMD: + if Manual-Down
6524   FD10             			ifmi
6524   FD10             
6524   FD10 2A FE       
6525   FD12 86 01       				ldaa	#$01
6526   FD14             			endif
6526   FD14             
6526   FD14             
6526   FD14             
6526   FD14             
6526   FD14             
6526   FD14~            			endif
6526   FD14~            			endif
6526   FD14             
6526   FD14~            			endif
6526   FD14~            			endif
6526   FD14             
6526   FD11             
6526   FD11 02          
6526   FD12             
6526   FD12             
6526   FD12~            			endif
6526   FD12~            			endif
6526   FD12~            			endif
6526   FD12             
6526   FD14             
6526   FD14~            			endif
6526   FD14~            			endif
6526   FD14             
6527   FD14 16          			tab	
6528   FD15 39          			rts
6529   FD16             				
6530   FD16 86 FF       st_reset		ldaa	#$FF
6531   FD18 97 58       			staa	mbip_b0
6532   FD1A 97 5A       			staa	cred_b0
6533   FD1C BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6534   FD1F 50          			.db 	$50
6535   FD20 7E E8 00    			jmp	reset					;Goto Reset Entry
6536   FD23             
6537   FD23             ;************************************************************
6538   FD23             ;* Self Test Audit and Adjustment Handlers:
6539   FD23             ;* 	These routines are in charge of the functions shown
6540   FD23             ;* 	in the self test routines. Each one handles one or
6541   FD23             ;*    more functions to retrieve and display the proper 
6542   FD23             ;*    data on the various displays.
6543   FD23             ;************************************************************			
6544   FD23 FE E0 00    fn_gameid		ldx	gr_gamenumber
6545   FD26 DF 39       			stx	score_p1_b0+1			;Game # -> Player 1 Display
6546   FD28 B6 E0 02    			ldaa	gr_romrevision
6547   FD2B 97 3B       			staa	score_p1_b0+3			;ROM Rev -> Player Display
6548   FD2D 39          			rts	
6549   FD2E             			
6550   FD2E C0 1E       fn_gameaud		subb	#$1E
6551   FD30 58          fn_sysaud		aslb	
6552   FD31 58          			aslb	
6553   FD32 CE 00 FE    			ldx	#$00FE
6554   FD35 BD EF 4D    			jsr	xplusb				;X = X + B)
6555   FD38 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6556   FD3B 97 3A       			staa	score_p1_b0+2
6557   FD3D BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6558   FD40 97 3B       			staa	score_p1_b0+3			;Show Data in Player 1 Display
6559   FD42 C1 20       			cmpb	#$20
6560   FD44             			ifne						;If on Audit 08, Keep Going
6560   FD44             
6560   FD44 27 FE       
6561   FD46 39          				rts						;Else... get outta here!
6562   FD47             			endif
6562   FD47             
6562   FD47             
6562   FD47             
6562   FD47             
6562   FD47             
6562   FD47~            			endif
6562   FD47~            			endif
6562   FD47             
6562   FD47~            			endif
6562   FD47~            			endif
6562   FD47             
6562   FD45             
6562   FD45 01          
6562   FD46             
6562   FD46             
6562   FD46~            			endif
6562   FD46~            			endif
6562   FD46~            			endif
6562   FD46             
6562   FD47             
6562   FD47~            			endif
6562   FD47~            			endif
6562   FD47             
6563   FD47 CE 01 4E    			ldx	#aud_hstdcredits			;Audit: HSTD Credits Awarded
6564   FD4A BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6565   FD4D 97 3E       			staa	score_p2_b0+2
6566   FD4F BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6567   FD52 97 3F       			staa	score_p2_b0+3
6568   FD54 CE 01 12    			ldx	#aud_specialcredits		;Audit: Special Credits
6569   FD57 C6 03       			ldab	#$03
6570   FD59 D7 9A       			stab	temp1
6571   FD5B             			begin
6571   FD5B             
6572   FD5B BD EF 63    				jsr	cmosinc_b				;CMOS,X++ -> B
6573   FD5E BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
6574   FD61 9B 3F       				adda	score_p2_b0+3
6575   FD63 19          				daa						;\
6576   FD64 97 3F       				staa	score_p2_b0+3			;|
6577   FD66 17          				tba						;|--  Add up HSTD,Special,Replay,Match Credits
6578   FD67 99 3E       				adca	score_p2_b0+2			;|
6579   FD69 19          				daa						;/
6580   FD6A 97 3E       				staa	score_p2_b0+2			;Store Result (Player 2 Display)
6581   FD6C 7A 00 9A    				dec	temp1
6582   FD6F             			eqend
6582   FD6F             
6582   FD6F             
6582   FD6F~            			eqend
6582   FD6F~            			eqend
6582   FD6F~            			eqend
6582   FD6F             
6582   FD6F 26 EA       
6582   FD71             
6582   FD71~            			eqend
6582   FD71~            			eqend
6582   FD71             
6583   FD71 CE 00 46    			ldx	#score_p4_b0+2
6584   FD74 C6 07       			ldab	#$07
6585   FD76 BD F8 94    			jsr	clear_range				;Clear RAM from X to X+B
6586   FD79 DE 3E       			ldx	score_p2_b0+2
6587   FD7B DF 48       			stx	score_p1_b1				;RAM $48 = Total Free Credits (Player 1 Display)
6588   FD7D 86 99       			ldaa	#$99
6589   FD7F 97 4D       			staa	score_p2_b1+1			;RAM $4D = #99 (Player 2 Display)
6590   FD81 16          			tab	
6591   FD82 90 3B       			suba	score_p1_b0+3
6592   FD84 D0 3A       			subb	score_p1_b0+2
6593   FD86 8B 01       			adda	#$01
6594   FD88 19          			daa	
6595   FD89 97 4F       			staa	score_p2_b1+3
6596   FD8B 17          			tba	
6597   FD8C 89 00       			adca	#$00
6598   FD8E 19          			daa	
6599   FD8F 97 4E       			staa	score_p2_b1+2
6600   FD91             			begin
6600   FD91             
6601   FD91 D6 47       				ldab	score_p4_b0+3
6602   FD93 CE 00 46    				ldx	#score_p4_b0+2
6603   FD96 0C          				clc
6604   FD97             				begin	
6604   FD97             
6605   FD97 A6 04       					ldaa	$04,X
6606   FD99 A9 09       					adca	$09,X
6607   FD9B 19          					daa	
6608   FD9C A7 04       					staa	$04,X
6609   FD9E 09          					dex	
6610   FD9F 8C 00 41    					cpx	#score_p3_b0+1
6611   FDA2             				eqend
6611   FDA2             
6611   FDA2             
6611   FDA2~            				eqend
6611   FDA2~            				eqend
6611   FDA2~            				eqend
6611   FDA2             
6611   FDA2 26 F3       
6611   FDA4             
6611   FDA4~            				eqend
6611   FDA4~            				eqend
6611   FDA4             
6612   FDA4 D1 47       				cmpb	score_p4_b0+3
6613   FDA6             			eqend
6613   FDA6             
6613   FDA6             
6613   FDA6~            			eqend
6613   FDA6~            			eqend
6613   FDA6~            			eqend
6613   FDA6             
6613   FDA6 26 E9       
6613   FDA8             
6613   FDA8~            			eqend
6613   FDA8~            			eqend
6613   FDA8             
6614   FDA8 39          			rts
6615   FDA9             				
6616   FDA9 BD FA 0B    fn_hstd		jsr	show_hstd				;Puts HSTD in All Player Displays(Buffer 1)
6617   FDAC 86 7F       			ldaa	#$7F
6618   FDAE 97 5C       			staa	dmask_p1
6619   FDB0 39          			rts
6620   FDB1             				
6621   FDB1 CE 01 81    fn_replay		ldx	#adj_backuphstd			;Offset to Replay Levels
6622   FDB4 C0 0D       			subb	#$0D					;Subtract 13 to get correct base
6623   FDB6 58          			aslb						;*2  2 bytes data per level(replay score)
6624   FDB7 BD EF 4D    			jsr	xplusb				;X = X + B)
6625   FDBA DF D1       			stx	vm_pc					;Pointer to Current Replay Level Data
6626   FDBC 58          			aslb						;*2  4 bytes data per level(times exceeded)
6627   FDBD CE 01 4E    			ldx	#aud_hstdcredits			;Offset to Replay Level Times Exceeded
6628   FDC0 BD EF 4D    			jsr	xplusb				;X = X + B)
6629   FDC3 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6630   FDC6 97 3E       			staa	score_p2_b0+2			;Show Times Exceeded MSD's in Player 2 Display
6631   FDC8 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
6632   FDCB 97 3F       			staa	score_p2_b0+3			;Show Times Exceeded LSD's in Player 2 Display
6633   FDCD 5F          			clrb	
6634   FDCE             			begin
6634   FDCE             
6635   FDCE DE D1       				ldx	vm_pc					;reload current offset * 2
6636   FDD0 8D 14       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
6637   FDD2 16          				tab	
6638   FDD3 BD EC F3    				jsr	split_ab				;Shift the digits around for display
6639   FDD6 84 F0       				anda	#$F0					;Blank MSD (10,000,000 digit)
6640   FDD8 D7 38       				stab	score_p1_b0				;Show it.
6641   FDDA 97 39       				staa	score_p1_b0+1			;Player 1 Display
6642   FDDC 5F          				clrb	
6643   FDDD D7 3A       				stab	score_p1_b0+2			;Lay down some Zero's
6644   FDDF D7 3B       				stab	score_p1_b0+3			
6645   FDE1 BD FC FC    				jsr	b_135
6646   FDE4             			loopend
6646   FDE4             
6646   FDE4             
6646   FDE4~            			loopend
6646   FDE4~            			loopend
6646   FDE4~            			loopend
6646   FDE4             
6646   FDE4 20 E8       
6646   FDE6             
6646   FDE6~            			loopend
6646   FDE6~            			loopend
6646   FDE6             
6647   FDE6             			
6648   FDE6 8D 37       cmos_add_d		bsr	cmos_a				;CMOS, X -> A )
6649   FDE8 1B          			aba	
6650   FDE9 19          			daa	
6651   FDEA BD EF AF    			jsr	a_cmosinc				;A -> CMOS,X++)
6652   FDED 20 33       			bra	fn_ret				;dex,dex,tsta,rts.
6653   FDEF             			
6654   FDEF 5F          fn_pricec		clrb	
6655   FDF0             			begin
6655   FDF0             
6656   FDF0             				begin
6656   FDF0             
6657   FDF0 CE 01 AD    					ldx	#adj_pricecontrol			;Standard/Custom Pricing Control
6658   FDF3 BD FD E6    					jsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
6659   FDF6 C6 99       					ldab	#$99
6660   FDF8 81 09       					cmpa	#$09
6661   FDFA             				csend					;Custom Pricing = 09?
6661   FDFA             
6661   FDFA             
6661   FDFA~            				csend					;Custom Pricing = 09?
6661   FDFA~            				csend					;Custom Pricing = 09?
6661   FDFA~            				csend					;Custom Pricing = 09?
6661   FDFA             
6661   FDFA 24 F4       
6661   FDFC             
6661   FDFC~            				csend					;Custom Pricing = 09?
6661   FDFC~            				csend					;Custom Pricing = 09?
6661   FDFC             
6662   FDFC 97 3B       				staa	score_p1_b0+3			;Player 1 Display
6663   FDFE 16          				tab	
6664   FDFF             				ifne
6664   FDFF             
6664   FDFF 27 FE       
6665   FE01 BD EF D0    					jsr	loadpricing
6666   FE04             				endif
6666   FE04             
6666   FE04             
6666   FE04             
6666   FE04             
6666   FE04             
6666   FE04~            				endif
6666   FE04~            				endif
6666   FE04             
6666   FE04~            				endif
6666   FE04~            				endif
6666   FE04             
6666   FE00             
6666   FE00 03          
6666   FE01             
6666   FE01             
6666   FE01~            				endif
6666   FE01~            				endif
6666   FE01~            				endif
6666   FE01             
6666   FE04             
6666   FE04~            				endif
6666   FE04~            				endif
6666   FE04             
6667   FE04 BD FC FC    				jsr	b_135
6668   FE07             			loopend
6668   FE07             
6668   FE07             
6668   FE07~            			loopend
6668   FE07~            			loopend
6668   FE07~            			loopend
6668   FE07             
6668   FE07 20 E7       
6668   FE09             
6668   FE09~            			loopend
6668   FE09~            			loopend
6668   FE09             
6669   FE09             			
6670   FE09 CE 01 AF    fn_prices		ldx	#cmos_leftcoinmult		;Left Coin Slot Multiplier
6671   FE0C C0 14       			subb	#$14
6672   FE0E 58          			aslb	
6673   FE0F BD EF 4D    			jsr	xplusb				;X = X + B)
6674   FE12 BD FE 1F    			jsr	cmos_a				;CMOS, X -> A )
6675   FE15 97 3B       			staa	score_p1_b0+3			;Player 1 Display
6676   FE17 B6 01 AE    			ldaa	adj_pricecontrol+1		;Standard/Custom Pricing Control LSD
6677   FE1A 84 0F       			anda	#$0F
6678   FE1C 27 0B       			beq	fn_cdtbtn
6679   FE1E 39          			rts	
6680   FE1F             			
6681   FE1F BD EF 53    cmos_a		jsr	cmosinc_a				;CMOS,X++ -> A
6682   FE22 09          fn_ret		dex	
6683   FE23 09          			dex	
6684   FE24 4D          			tsta	
6685   FE25 39          			rts	
6686   FE26             			
6687   FE26 CE 01 AB    fn_credit		ldx	#adj_max_credits			;RAM Pointer Base
6688   FE29 5F          fn_cdtbtn		clrb
6689   FE2A             			begin
6689   FE2A             
6690   FE2A 8D BA       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
6691   FE2C 97 3B       				staa	score_p1_b0+3			;Player 1 Display
6692   FE2E BD FC FC    				jsr	b_135
6693   FE31             			loopend
6693   FE31             
6693   FE31             
6693   FE31~            			loopend
6693   FE31~            			loopend
6693   FE31~            			loopend
6693   FE31             
6693   FE31 20 F7       
6693   FE33             
6693   FE33~            			loopend
6693   FE33~            			loopend
6693   FE33             
6694   FE33             			
6695   FE33 CE 01 8B    fn_adj		ldx	#adj_matchenable			;RAM Pointer Base
6696   FE36 C0 1A       			subb	#$1A
6697   FE38 58          			aslb	
6698   FE39 BD EF 4D    			jsr	xplusb				;X = X + B)
6699   FE3C 20 EB       			bra	fn_cdtbtn
6700   FE3E             			
6701   FE3E CE 01 70    fn_command		ldx	#aud_command			;RAM Pointer Base
6702   FE41 20 E6       			bra	fn_cdtbtn
6703   FE43             
6704   FE43             ;****************************************************
6705   FE43             ;* Main Display Test Routine - Cycles all score 
6706   FE43             ;*                             displays through 0-9
6707   FE43             ;****************************************************			
6708   FE43 4F          st_display		clra
6709   FE44             			begin	
6709   FE44             
6710   FE44             				begin
6710   FE44             
6711   FE44 CE 00 38    					ldx	#score_p1_b0
6712   FE47 C6 24       					ldab	#$24
6713   FE49 BD F8 40    					jsr	write_range				;RAM $38-$5B = A: Clear all Displays
6714   FE4C BD EA 2F    					jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6715   FE4F 18          					.db	$18
6716   FE50 BD FC 57    					jsr	do_aumd				;Check Auto/Manual, return + if Manual
6717   FE53             				miend
6717   FE53             
6717   FE53             
6717   FE53~            				miend
6717   FE53~            				miend
6717   FE53~            				miend
6717   FE53             
6717   FE53 2A EF       
6717   FE55             
6717   FE55~            				miend
6717   FE55~            				miend
6717   FE55             
6718   FE55 73 00 60    				com	comma_flags				;Toggle commas on each count
6719   FE58 8B 11       				adda	#$11					;Add one to each digit
6720   FE5A 19          				daa	
6721   FE5B             			csend
6721   FE5B             
6721   FE5B             
6721   FE5B~            			csend
6721   FE5B~            			csend
6721   FE5B~            			csend
6721   FE5B             
6721   FE5B 24 E7       
6721   FE5D             
6721   FE5D~            			csend
6721   FE5D~            			csend
6721   FE5D             
6722   FE5D D6 CB       			ldab	flags_selftest
6723   FE5F 2A E2       			bpl	st_display				;Clear All Displays
6724   FE61 39          			rts	
6725   FE62             
6726   FE62             ;****************************************************
6727   FE62             ;* Main Sound Routine - Toggles each of the sound 
6728   FE62             ;*                      command line individually.
6729   FE62             ;****************************************************			
6730   FE62 BD F8 9A    st_sound		jsr	clear_displays			;Blank all Player Displays (buffer 0)
6731   FE65             			begin
6731   FE65             
6732   FE65 4F          				clra	
6733   FE66 97 60       				staa	comma_flags				;Turn off commas
6734   FE68 97 58       				staa	mbip_b0				;Match/Ball in Play Display = 00
6735   FE6A 86 FE       				ldaa	#$FE					;Initial Sound Command $1E
6736   FE6C             				begin
6736   FE6C             
6737   FE6C             					begin
6737   FE6C             
6738   FE6C C6 FF       						ldab	#$FF
6739   FE6E F7 21 00    						stab	pia_sound_data			;Sound Blanking
6740   FE71 BD EA 2F    						jsr	addthread				;Delay enough for sound board to stop
6741   FE74 00          						.db	$00	
6742   FE75 B7 21 00    						staa	pia_sound_data			;Commands.. $1E,$1D,$1B,$17,$0F
6743   FE78 BD EA 2F    						jsr	addthread				;Delay $40 IRQ's
6744   FE7B 40          						.db	$40
6745   FE7C BD FC 57    						jsr	do_aumd				;Either repeat same sound or move on to next
6746   FE7F             					miend
6746   FE7F             
6746   FE7F             
6746   FE7F~            					miend
6746   FE7F~            					miend
6746   FE7F~            					miend
6746   FE7F             
6746   FE7F 2A EB       
6746   FE81             
6746   FE81~            					miend
6746   FE81~            					miend
6746   FE81             
6747   FE81 7C 00 58    					inc	mbip_b0				;Increment Match/Ball in Play Display
6748   FE84 48          					asla	
6749   FE85 4C          					inca	
6750   FE86             				plend
6750   FE86             
6750   FE86             
6750   FE86~            				plend
6750   FE86~            				plend
6750   FE86~            				plend
6750   FE86             
6750   FE86 2B E4       
6750   FE88             
6750   FE88~            				plend
6750   FE88~            				plend
6750   FE88             
6751   FE88 D6 CB       				ldab	flags_selftest
6752   FE8A             			miend					;Start Over
6752   FE8A             
6752   FE8A             
6752   FE8A~            			miend					;Start Over
6752   FE8A~            			miend					;Start Over
6752   FE8A~            			miend					;Start Over
6752   FE8A             
6752   FE8A 2A D9       
6752   FE8C             
6752   FE8C~            			miend					;Start Over
6752   FE8C~            			miend					;Start Over
6752   FE8C             
6753   FE8C 39          			rts	
6754   FE8D             			
6755   FE8D             ;****************************************************
6756   FE8D             ;* Main Lamp Routine - Flashes all lamps 
6757   FE8D             ;****************************************************			
6758   FE8D C6 AA       st_lamp		ldab	#$AA
6759   FE8F D7 58       			stab	mbip_b0				;Match/Ball in Play Display Buffer 0
6760   FE91 D7 0F       			stab	test_lamptimer
6761   FE93             			begin
6761   FE93             
6762   FE93             				begin
6762   FE93             
6763   FE93 96 10       					ldaa	lampbuffer0
6764   FE95 43          					coma	
6765   FE96 CE 00 10    					ldx	#lampbuffer0
6766   FE99 C6 08       					ldab	#$08
6767   FE9B BD F8 40    					jsr	write_range				;Store A from $0010-0017
6768   FE9E BD EA 2F    					jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
6769   FEA1 1B          					.db	$1B
6770   FEA2 7A 00 0F    					dec  	test_lamptimer
6771   FEA5             				eqend
6771   FEA5             
6771   FEA5             
6771   FEA5~            				eqend
6771   FEA5~            				eqend
6771   FEA5~            				eqend
6771   FEA5             
6771   FEA5 26 EC       
6771   FEA7             
6771   FEA7~            				eqend
6771   FEA7~            				eqend
6771   FEA7             
6772   FEA7 D6 CB       				ldab  flags_selftest			;Auto-Cycle??
6773   FEA9             			miend
6773   FEA9             
6773   FEA9             
6773   FEA9~            			miend
6773   FEA9~            			miend
6773   FEA9~            			miend
6773   FEA9             
6773   FEA9 2A E8       
6773   FEAB             
6773   FEAB~            			miend
6773   FEAB~            			miend
6773   FEAB             
6774   FEAB 39          			rts 
6775   FEAC             
6776   FEAC             ;****************************************************
6777   FEAC             ;* Auto-Cycle Routine - This is the timing thread to
6778   FEAC             ;*                      allow each test routine to 
6779   FEAC             ;*                      repeat indefinitely.
6780   FEAC             ;****************************************************			
6781   FEAC BD FC 80    st_autocycle	jsr  	st_init
6782   FEAF 5A          			decb 
6783   FEB0 D7 CB       			stab  flags_selftest
6784   FEB2             			begin
6784   FEB2             
6785   FEB2 8D 8F       				bsr  	st_display    		;Clear All Displays
6786   FEB4 7F 00 5A    				clr  	cred_b0
6787   FEB7 8D A9       				bsr  	st_sound
6788   FEB9 7C 00 5A    				inc  	cred_b0
6789   FEBC 8D CF       				bsr  	st_lamp
6790   FEBE 7C 00 5A    				inc  	cred_b0
6791   FEC1 8D 08       				bsr  	st_solenoid
6792   FEC3 CE 01 4A    				ldx  	#aud_autocycles		;Audit: Auto-Cycles
6793   FEC6 BD F7 7F    				jsr  	ptrx_plus_1 		;Add 1 to data at X
6794   FEC9             			loopend
6794   FEC9             
6794   FEC9             
6794   FEC9~            			loopend
6794   FEC9~            			loopend
6794   FEC9~            			loopend
6794   FEC9             
6794   FEC9 20 E7       
6794   FECB             
6794   FECB~            			loopend
6794   FECB~            			loopend
6794   FECB             
6795   FECB             
6796   FECB             ;****************************************************
6797   FECB             ;* Main Solenoid Routine - Steps through each solenoid 
6798   FECB             ;****************************************************			
6799   FECB             st_solenoid		begin
6799   FECB             
6800   FECB C6 01       				ldab  #$01
6801   FECD D7 58       				stab 	mbip_b0	 
6802   FECF 86 20       				ldaa 	#$20	
6803   FED1             				begin
6803   FED1             
6804   FED1             					begin
6804   FED1             
6805   FED1 BD EB 23    						jsr  	solbuf			;Turn On Outhole Solenoid
6806   FED4 BD EA 2F    						jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
6807   FED7 40          						.db	$40
6808   FED8 BD FC 57    						jsr  	do_aumd			;AUMD: + if Manual-Down
6809   FEDB             					miend
6809   FEDB             
6809   FEDB             
6809   FEDB~            					miend
6809   FEDB~            					miend
6809   FEDB~            					miend
6809   FEDB             
6809   FEDB 2A F4       
6809   FEDD             
6809   FEDD~            					miend
6809   FEDD~            					miend
6809   FEDD             
6810   FEDD 16          					tab  
6811   FEDE 96 58       					ldaa  mbip_b0
6812   FEE0 8B 01       					adda 	#$01
6813   FEE2 19          					daa  
6814   FEE3 97 58       					staa  mbip_b0
6815   FEE5 17          					tba  
6816   FEE6 4C          					inca 
6817   FEE7 81 39       					cmpa  #$39
6818   FEE9             				ccend
6818   FEE9             
6818   FEE9             
6818   FEE9~            				ccend
6818   FEE9~            				ccend
6818   FEE9~            				ccend
6818   FEE9             
6818   FEE9 25 E6       
6818   FEEB             
6818   FEEB~            				ccend
6818   FEEB~            				ccend
6818   FEEB             
6819   FEEB D6 CB       				ldab  flags_selftest			;Auto-Cycle??
6820   FEED             			miend
6820   FEED             
6820   FEED             
6820   FEED~            			miend
6820   FEED~            			miend
6820   FEED~            			miend
6820   FEED             
6820   FEED 2A DC       
6820   FEEF             
6820   FEEF~            			miend
6820   FEEF~            			miend
6820   FEEF             
6821   FEEF 39          			rts  
6822   FEF0             
6823   FEF0             ;****************************************************
6824   FEF0             ;* Main Switch Routine - Scans for closed switches
6825   FEF0             ;****************************************************			
6826   FEF0             st_switch		begin
6826   FEF0             
6827   FEF0 86 FF       				ldaa	#$FF
6828   FEF2 97 58       				staa  mbip_b0
6829   FEF4 BD EA 2F    				jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
6830   FEF7 00          				.db	$00
6831   FEF8 B6 E0 4D    				ldaa 	gr_lastswitch		;Game ROM: Last Switch Used
6832   FEFB 4A          				deca 
6833   FEFC CE 00 69    st_swnext			ldx  	#switch_masked
6834   FEFF BD F1 9C    				jsr  	unpack_byte    		;Unpack Switch
6835   FF02 E5 00       				bitb 	$00,X
6836   FF04             				ifne
6836   FF04             
6836   FF04 27 FE       
6837   FF06 36          					psha 
6838   FF07 4C          					inca 
6839   FF08 C6 01       					ldab  #$01
6840   FF0A BD F8 16    					jsr  	divide_ab
6841   FF0D 97 58       					staa 	mbip_b0
6842   FF0F 4F          					clra 
6843   FF10 C6 01       					ldab  #$01
6844   FF12 BD ED 53    					jsr  	isnd_mult			;Play Sound Command A, B Times:
6845   FF15 32          					pula 
6846   FF16 BD EA 2F    					jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
6847   FF19 40          					.db	$40
6848   FF1A             				endif
6848   FF1A             
6848   FF1A             
6848   FF1A             
6848   FF1A             
6848   FF1A             
6848   FF1A~            				endif
6848   FF1A~            				endif
6848   FF1A             
6848   FF1A~            				endif
6848   FF1A~            				endif
6848   FF1A             
6848   FF05             
6848   FF05 14          
6848   FF06             
6848   FF06             
6848   FF06~            				endif
6848   FF06~            				endif
6848   FF06~            				endif
6848   FF06             
6848   FF1A             
6848   FF1A~            				endif
6848   FF1A~            				endif
6848   FF1A             
6849   FF1A 4A          				deca 
6850   FF1B             			plend					;Start Back at the top switch
6850   FF1B             
6850   FF1B             
6850   FF1B~            			plend					;Start Back at the top switch
6850   FF1B~            			plend					;Start Back at the top switch
6850   FF1B~            			plend					;Start Back at the top switch
6850   FF1B             
6850   FF1B 2B D3       
6850   FF1D             
6850   FF1D~            			plend					;Start Back at the top switch
6850   FF1D~            			plend					;Start Back at the top switch
6850   FF1D             
6851   FF1D 20 DD       			bra  st_swnext			;Do Next Switch
6852   FF1F             
6853   FF1F             ;**********************************************************************************
6854   FF1F             ;* NMI Routines - This section of code is run only when the 
6855   FF1F             ;*                diagnostic switch on the CPU board is pressed.
6856   FF1F             ;*                It will test the hardware and report any errors
6857   FF1F             ;*                via the LED display on the CPU board. If all tests
6858   FF1F             ;*                are passed, the LED display will show '0' and
6859   FF1F             ;*                the code jumps to the normal power-up routines.
6860   FF1F             ;*
6861   FF1F             ;* Errors are as Follows:
6862   FF1F             ;*
6863   FF1F             ;*      0 - Test Passed
6864   FF1F             ;*      1 - IC13 RAM Fault (Most Significant Nybble)
6865   FF1F             ;*      2 - IC16 RAM Fault (Least Significant Nybble)
6866   FF1F             ;*      3 - IC17 ROM Lower Half (Location $F000-$F7FF)
6867   FF1F             ;*      4 - IC17 ROM Upper Half (Location $F800-$FFFF)
6868   FF1F             ;*      5 - IC20 ROM Fault (Location $E800-$EFFF)
6869   FF1F             ;*      6 - IC14 GAME ROM Fault (Location $E000-$E7FF)
6870   FF1F             ;*      7 - IC15 GAME ROM Fault (Location $D800-$DFFF)
6871   FF1F             ;*      8 - IC19 CMOS RAM Fault or Memory Protect Failure
6872   FF1F             ;*      9 - Coin Door Closed or Memory Protect Failure or IC19 CMOS RAM Fault
6873   FF1F             ;**********************************************************************************
6874   FF1F C6 20       rambad		ldab	#$20
6875   FF21 A8 00       			eora	$00,X
6876   FF23 84 F0       			anda	#$F0
6877   FF25 27 54       			beq	diag_showerror
6878   FF27 C6 10       			ldab	#$10
6879   FF29 20 50       			bra	diag_showerror
6880   FF2B             			
6881   FF2B             ;*******************************************************************
6882   FF2B             ;* Main NMI Entry 
6883   FF2B             ;*******************************************************************
6884   FF2B 0F          diag			sei	
6885   FF2C CE 28 00    			ldx	#pia_disp_digit_data
6886   FF2F 6F 01       			clr	$01,X
6887   FF31 86 F0       			ldaa	#$F0
6888   FF33 A7 00       			staa	$00,X
6889   FF35 C6 3C       			ldab	#$3C
6890   FF37 E7 01       			stab	$01,X
6891   FF39 A7 00       			staa	$00,X			;Blank Diagnostic Display
6892   FF3B 4F          			clra	
6893   FF3C             			begin
6893   FF3C             
6894   FF3C CE 10 00    				ldx	#$1000
6895   FF3F             				begin					;\
6895   FF3F             
6896   FF3F A7 00       					staa	$00,X			;|
6897   FF41 08          					inx				;| Clear RAM $1000-13FF
6898   FF42 8C 14 00    					cpx	#$1400		;|
6899   FF45             				eqend					;/
6899   FF45             
6899   FF45             
6899   FF45~            				eqend					;/
6899   FF45~            				eqend					;/
6899   FF45~            				eqend					;/
6899   FF45             
6899   FF45 26 F8       
6899   FF47             
6899   FF47~            				eqend					;/
6899   FF47~            				eqend					;/
6899   FF47             
6900   FF47 35          				txs	
6901   FF48             				begin
6901   FF48             
6902   FF48 09          					dex	
6903   FF49 A1 00       					cmpa	$00,X			;Test
6904   FF4B 26 D2       					bne	rambad		;Bad RAM
6905   FF4D 8C 10 00    					cpx	#$1000
6906   FF50             				eqend
6906   FF50             
6906   FF50             
6906   FF50~            				eqend
6906   FF50~            				eqend
6906   FF50~            				eqend
6906   FF50             
6906   FF50 26 F6       
6906   FF52             
6906   FF52~            				eqend
6906   FF52~            				eqend
6906   FF52             
6907   FF52 43          				coma					;Test with #FF
6908   FF53             			eqend
6908   FF53             
6908   FF53             
6908   FF53~            			eqend
6908   FF53~            			eqend
6908   FF53~            			eqend
6908   FF53             
6908   FF53 26 E7       
6908   FF55             
6908   FF55~            			eqend
6908   FF55~            			eqend
6908   FF55             
6909   FF55 C6 20       			ldab	#$20					;Begin ROM Test
6910   FF57 CE FF FF    			ldx	#$FFFF
6911   FF5A             			begin
6911   FF5A             
6912   FF5A DF 9A       				stx	temp1
6913   FF5C CB 10       				addb	#$10
6914   FF5E C1 70       				cmpb	#$70
6915   FF60 22 1F       				bhi	diag_ramtest
6916   FF62             				ifeq
6916   FF62             
6916   FF62 26 FE       
6917   FF64 B6 E0 4C    					ldaa	gr_extendedromtest		;Check to see if we need to test additional ROM
6918   FF67 2B 18       					bmi	diag_ramtest
6919   FF69             				endif
6919   FF69             
6919   FF69             
6919   FF69             
6919   FF69             
6919   FF69             
6919   FF69~            				endif
6919   FF69~            				endif
6919   FF69             
6919   FF69~            				endif
6919   FF69~            				endif
6919   FF69             
6919   FF63             
6919   FF63 05          
6919   FF64             
6919   FF64             
6919   FF64~            				endif
6919   FF64~            				endif
6919   FF64~            				endif
6919   FF64             
6919   FF69             
6919   FF69~            				endif
6919   FF69~            				endif
6919   FF69             
6920   FF69 96 9A       				ldaa	temp1					
6921   FF6B 80 08       				suba	#$08
6922   FF6D 97 9A       				staa	temp1					;Set our stopping address
6923   FF6F 4F          				clra	
6924   FF70             				begin
6924   FF70             
6925   FF70 A9 00       					adca	$00,X					;Add with carry!!
6926   FF72 09          					dex	
6927   FF73 9C 9A       					cpx	temp1
6928   FF75             				eqend
6928   FF75             
6928   FF75             
6928   FF75~            				eqend
6928   FF75~            				eqend
6928   FF75~            				eqend
6928   FF75             
6928   FF75 26 F9       
6928   FF77             
6928   FF77~            				eqend
6928   FF77~            				eqend
6928   FF77             
6929   FF77 81 80       				cmpa	#$80					;Done changing data?
6930   FF79             			neend						;CSUM must be = #00
6930   FF79             
6930   FF79             
6930   FF79~            			neend						;CSUM must be = #00
6930   FF79~            			neend						;CSUM must be = #00
6930   FF79~            			neend						;CSUM must be = #00
6930   FF79             
6930   FF79 27 DF       
6930   FF7B             
6930   FF7B~            			neend						;CSUM must be = #00
6930   FF7B~            			neend						;CSUM must be = #00
6930   FF7B             
6931   FF7B             			;fall through on error, B contains error code
6932   FF7B             			
6933   FF7B 53          diag_showerror	comb	
6934   FF7C F7 28 00    			stab	pia_disp_digit_data		;Dump Error to Display
6935   FF7F 20 FE       tightloop		bra	tightloop				;Stay Here forever
6936   FF81             
6937   FF81             ;Define a single CMOS location to write test
6938   FF81             cmos_byteloc	=	$01BB
6939   FF81             
6940   FF81 C6 90       diag_ramtest	ldab	#$90					;Begin CMOS RAM Test
6941   FF83 B6 01 BB    			ldaa	cmos_byteloc			;Test a single byte
6942   FF86 7C 01 BB    			inc	cmos_byteloc
6943   FF89 B1 01 BB    			cmpa	cmos_byteloc
6944   FF8C 27 ED       			beq	diag_showerror			;Wrong
6945   FF8E C6 80       			ldab	#$80					;Backup CMOS data now
6946   FF90 CE 12 00    			ldx	#$1200
6947   FF93 DF 9A       			stx	temp1
6948   FF95 CE 01 00    			ldx	#cmos_base
6949   FF98 8D 37       			bsr	block_copy					;Copy Block from X -> temp1, Length = B
6950   FF9A 86 F1       			ldaa	#$F1
6951   FF9C 97 9E       			staa	temp3
6952   FF9E             			begin
6952   FF9E             
6953   FF9E CE 01 00    				ldx	#cmos_base
6954   FFA1 96 9E       				ldaa	temp3
6955   FFA3             				begin
6955   FFA3             
6956   FFA3 A7 00       					staa	$00,X
6957   FFA5 8D 4B       					bsr	adjust_a
6958   FFA7 08          					inx	
6959   FFA8 8C 02 00    					cpx	#cmos_base+$100
6960   FFAB             				eqend
6960   FFAB             
6960   FFAB             
6960   FFAB~            				eqend
6960   FFAB~            				eqend
6960   FFAB~            				eqend
6960   FFAB             
6960   FFAB 26 F6       
6960   FFAD             
6960   FFAD~            				eqend
6960   FFAD~            				eqend
6960   FFAD             
6961   FFAD CE 01 00    				ldx	#cmos_base
6962   FFB0 96 9E       				ldaa	temp3
6963   FFB2             				begin
6963   FFB2             
6964   FFB2 16          					tab	
6965   FFB3 E8 00       					eorb	$00,X
6966   FFB5 C4 0F       					andb	#$0F
6967   FFB7 26 12       					bne	cmos_error
6968   FFB9 8D 37       					bsr	adjust_a
6969   FFBB 08          					inx	
6970   FFBC 8C 02 00    					cpx	#cmos_base+$100
6971   FFBF             				eqend
6971   FFBF             
6971   FFBF             
6971   FFBF~            				eqend
6971   FFBF~            				eqend
6971   FFBF~            				eqend
6971   FFBF             
6971   FFBF 26 F1       
6971   FFC1             
6971   FFC1~            				eqend
6971   FFC1~            				eqend
6971   FFC1             
6972   FFC1 7C 00 9E    				inc	temp3
6973   FFC4             			eqend
6973   FFC4             
6973   FFC4             
6973   FFC4~            			eqend
6973   FFC4~            			eqend
6973   FFC4~            			eqend
6973   FFC4             
6973   FFC4 26 D8       
6973   FFC6             
6973   FFC6~            			eqend
6973   FFC6~            			eqend
6973   FFC6             
6974   FFC6 8D 1D       			bsr	cmos_restore			;Put back original CMOS data
6975   FFC8 7E E8 00    			jmp	reset					;Goto Reset Entry, Everything OK.
6976   FFCB             			
6977   FFCB 8D 18       cmos_error		bsr	cmos_restore
6978   FFCD C6 80       			ldab	#$80
6979   FFCF 20 AA       			bra	diag_showerror
6980   FFD1             			
6981   FFD1 36          block_copy		psha	
6982   FFD2             			begin
6982   FFD2             
6983   FFD2 BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
6984   FFD5 DF 9C       				stx	temp2
6985   FFD7 DE 9A       				ldx	temp1
6986   FFD9 A7 00       				staa	$00,X
6987   FFDB 08          				inx	
6988   FFDC DF 9A       				stx	temp1
6989   FFDE DE 9C       				ldx	temp2
6990   FFE0 5A          				decb	
6991   FFE1             			eqend
6991   FFE1             
6991   FFE1             
6991   FFE1~            			eqend
6991   FFE1~            			eqend
6991   FFE1~            			eqend
6991   FFE1             
6991   FFE1 26 EF       
6991   FFE3             
6991   FFE3~            			eqend
6991   FFE3~            			eqend
6991   FFE3             
6992   FFE3 32          			pula	
6993   FFE4 39          			rts	
6994   FFE5             			
6995   FFE5 CE 01 00    cmos_restore	ldx	#$0100
6996   FFE8 DF 9A       			stx	temp1
6997   FFEA CE 12 00    			ldx	#$1200
6998   FFED C6 80       			ldab	#$80
6999   FFEF 7E EF E4    			jmp	copyblock2				;Transfer Data Block at X to temp1, Length B
7000   FFF2             			
7001   FFF2 4C          adjust_a		inca	
7002   FFF3             			ifeq
7002   FFF3             
7002   FFF3 26 FE       
7003   FFF5 86 F1       				ldaa	#$F1
7004   FFF7             			endif
7004   FFF7             
7004   FFF7             
7004   FFF7             
7004   FFF7             
7004   FFF7             
7004   FFF7~            			endif
7004   FFF7~            			endif
7004   FFF7             
7004   FFF7~            			endif
7004   FFF7~            			endif
7004   FFF7             
7004   FFF4             
7004   FFF4 02          
7004   FFF5             
7004   FFF5             
7004   FFF5~            			endif
7004   FFF5~            			endif
7004   FFF5~            			endif
7004   FFF5             
7004   FFF7             
7004   FFF7~            			endif
7004   FFF7~            			endif
7004   FFF7             
7005   FFF7 39          			rts	
7006   FFF8             
7007   FFF8             ;*******************************************
7008   FFF8             ;* CPU Startup/Interrupt Vectors go here.
7009   FFF8             ;*******************************************
7010   FFF8             	
7011   FFF8 E0 BF       irq_entry		.dw gr_irq_entry	;Goes to Game ROM
7012   FFFA E0 BF       swi_entry		.dw gr_swi_entry	;Goes to Game ROM 
7013   FFFC FF 2B       nmi_entry		.dw diag
7014   FFFE E8 00       res_entry		.dw reset
7015   10000             
7016   10000             	.end
7017   10000             
7018   10000             
7019   10000             	.end
tasm: Number of errors = 0
