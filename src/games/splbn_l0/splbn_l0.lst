0001   0000             ;--------------------------------------------------------------
0002   0000             ;Spellbinder Game ROM L-0 BETA
0003   0000             ;2013 Jess M. Askey - jess@askey.org
0004   0000             ;--------------------------------------------------------------
0005   0000             #define SPELLBINDER
0006   0000             
0007   0000             #include  "../../68logic.asm"	;680X logic structure definitions   
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin		     logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ y *+5
0050+  0000             #defcont						\ jmp	var2_
0051+  0000             #defcont					\#else
0052+  0000             #defcont						\ x	var2_
0053+  0000             #defcont					\#endif
0054+  0000             #defcont				\#else
0055+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0056+  0000             #defcont				\#endif
0057+  0000             
0058+  0000             ;*******************************************************************
0059+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0060+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0061+  0000             ;*             at that address to point to the current address.    *
0062+  0000             ;*******************************************************************
0063+  0000             #define logic_end \var1_ .set *
0064+  0000             #defcont		\ .pop var3_, var4_
0065+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0066+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0067+  0000             #defcont  				\var2_ .set var1_-var4_-2
0068+  0000             #defcont				\#if var2_+127 < 0
0069+  0000             #defcont					\ .error "Branch Range < -127"
0070+  0000             #defcont				\#else
0071+  0000             #defcont					\#if var2_-128 > 0
0072+  0000             #defcont						\ .error "Branch Range > 128"
0073+  0000             #defcont					\#else
0074+  0000             #defcont    					\ .org var4_+1
0075+  0000             #defcont						\ .byte var2_
0076+  0000             #defcont					\#endif
0077+  0000             #defcont				\#endif
0078+  0000             #defcont			\#else	
0079+  0000             #defcont    			\ .org  var4_-2	
0080+  0000             #defcont				\ .word var1_
0081+  0000             #defcont			\#endif
0082+  0000             #defcont			\ .org	var1_
0083+  0000             #defcont		\#else
0084+  0000             #defcont			\.error "Wrong Endtype for IF block"
0085+  0000             #defcont		\#endif
0086+  0000             
0087+  0000             ;*******************************************************************
0088+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0089+  0000             ;*             (ie. with additional logic as defined below). The   *
0090+  0000             ;*             ELSE block will resove how to terminate the current *
0091+  0000             ;*             code and then set the owning IF statement's data    *
0092+  0000             ;*             byte.                                               *
0093+  0000             ;*******************************************************************
0094+  0000             #define	logic_else(x,y)	\var1_ .set $
0095+  0000             #defcont		\ .pop var3_, var4_
0096+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0097+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0098+  0000             #defcont				\ .org var4_+1
0099+  0000             #defcont	      		\#if x==0
0100+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0101+  0000             #defcont					\#if var2_+127 < 0
0102+  0000             #defcont						\ .org var1_
0103+  0000             #defcont						\.push $+3, 1
0104+  0000             #defcont						\ jmp $
0105+  0000             #defcont					\#else
0106+  0000             #defcont						\#if var2_-128>0
0107+  0000             #defcont							\ .org var1_
0108+  0000             #defcont							\.push $+3, 1
0109+  0000             #defcont							\ jmp $
0110+  0000             #defcont						\#else
0111+  0000             #defcont							\.push var1_, 0
0112+  0000             #defcont							\ .byte var2_
0113+  0000             #defcont							\ .org var1_
0114+  0000             #defcont							\ BRA $
0115+  0000             #defcont							\ .org var1_+2
0116+  0000             #defcont						\#endif
0117+  0000             #defcont					\#endif
0118+  0000             #defcont				\#else
0119+  0000             #defcont					\ .byte var1_-var4_-2+2
0120+  0000             #defcont					\ .org var1_
0121+  0000             #defcont					\.push $, 0
0122+  0000             #defcont					\ y $		
0123+  0000             #defcont				\#endif
0124+  0000             #defcont			\#else
0125+  0000             #defcont				\.error "Duplicate ELSE Statement"
0126+  0000             #defcont			\#endif
0127+  0000             #defcont		\#else
0128+  0000             #defcont			\ .error "Misplaced Else"
0129+  0000             #defcont		\#endif
0130+  0000             
0131+  0000             
0132+  0000             ;*******************************************************************
0133+  0000             ;* Defines how to use the various logic macros defined above.      *
0134+  0000             ;*******************************************************************
0135+  0000             #define	ifeq	logic_ifxx(BNE)		
0136+  0000             #define	ifne	logic_ifxx(BEQ)
0137+  0000             #define	ifpl	logic_ifxx(BMI)
0138+  0000             #define	ifhi	logic_ifxx(BLO)
0139+  0000             #define	ifmi	logic_ifxx(BPL)
0140+  0000             #define	iflo	logic_ifxx(BHI)
0141+  0000             #define	ifcs	logic_ifxx(BCC)
0142+  0000             #define	ifcc	logic_ifxx(BCS)
0143+  0000             #define 	ifvc	logic_ifxx(BVS)
0144+  0000             #define 	ifvs	logic_ifxx(BVC)
0145+  0000             #define	ifge	logic_ifxx(BLS)
0146+  0000             #define	ifgt	logic_ifxx(BLE)
0147+  0000             #define	iflt 	logic_ifxx(BGE)
0148+  0000             #define	ifle	logic_ifxx(BGT)
0149+  0000             #define	ifgte	logic_ifxx(BLT)
0150+  0000             
0151+  0000             #define	else  	logic_else(0,0)
0152+  0000             #define	else_eq	logic_else(1,BEQ)
0153+  0000             #define	else_ne	logic_else(1,BNE)
0154+  0000             #define	else_pl	logic_else(1,BPL)
0155+  0000             #define	else_mi	logic_else(1,BMI)
0156+  0000             #define	else_cc	logic_else(1,BCC)
0157+  0000             #define	else_cs	logic_else(1,BCS)
0158+  0000             
0159+  0000             #define 	endif		logic_end
0160+  0000             
0161+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0162+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0163+  0000             #define	plend	logic_loopend(BMI,BPL)
0164+  0000             #define	miend	logic_loopend(BPL,BMI)
0165+  0000             #define	csend	logic_loopend(BCC,BCS)
0166+  0000             #define	ccend	logic_loopend(BCS,BCC)
0167+  0000             #define	vcend	logic_loopend(BVS,BVC)
0168+  0000             #define	vsend	logic_loopend(BVC,BVS)
0169+  0000             #define	geend	logic_loopend(BLS,BLT)
0170+  0000             #define	leend	logic_loopend(BGT,BLE)
0171+  0000             
0172+  0000             #define	loopend	logic_loopend(BRA,BRA)
0173+  0000             
0174+  0000             #define	lsb(x)	x&$FF
0175+  0000             
0176+  0000             #define	msb(x)	(x>>8)&$FF0008   0000             #include  "../../7gen.asm"	;Level 7 helper macros    
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Level 7 General Macros
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             
0012+  0000             ;*****************************************************************************
0013+  0000             ;* This is where you should put general timesaving macros above and beyond
0014+  0000             ;* the base logic and WML7 macros...
0015+  0000             ;*
0016+  0000             ;* An example is repetitive code such as...
0017+  0000             ;*
0018+  0000             ;* ldx	#gj_2B
0019+  0000             ;* jsr	newthread_06
0020+  0000             ;*
0021+  0000             ;* Is both long and it is easy to forget to reference the label properly, it
0022+  0000             ;* can be replaced with..
0023+  0000             ;*
0024+  0000             ;* NEWTHREAD(gj_2B) 
0025+  0000             ;* 
0026+  0000             ;* By using the macro defined below...
0027+  0000             ;*****************************************************************************
0028+  0000             
0029+  0000             #define	NEWTHREAD(x)	\ ldx #x	\ jsr newthread_06
0030+  0000             #define     NEWTHREAD_JMP(x)	\ ldx #x	\ jmp newthread_06
0031+  0000             
0032+  0000             
0033+  0000             ;*****************************************************************************
0034+  0000             ;* When in native code, it is common to to sleep the current thread a number of
0035+  0000             ;* cycles, this is similar to the SLEEP_ macro, but when in code it looks like this
0036+  0000             ;*
0037+  0000             ;* jsr	addthread
0038+  0000             ;* .db $01				;with the data lingering behind
0039+  0000             ;*
0040+  0000             ;* It is much easier to read a macro like this...
0041+  0000             ;*
0042+  0000             ;* SLEEP(1);
0043+  0000             ;*
0044+  0000             ;*****************************************************************************
0045+  0000             
0046+  0000             #define	SLEEP(x)	\ jsr addthread	\ .db x
0047+  0000             
0048+  0000             
0049+  0000             ;*****************************************************************************
0050+  0000             ; Lamp Groups
0051+  0000             ;*****************************************************************************
0052+  0000             lmpgrpidx___ = 0
0053+  0000             
0054+  0000             #define	LAMPGROUP(group,start,end)	\group = lmpgrpidx___
0055+  0000             #defcont						\ .db start,end
0056+  0000             #defcont						\lmpgrpidx___ .set lmpgrpidx___+1
0009   0000             #include  "sb_wvm.asm"		;Virtual Machine Instruction Definitions                           
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Hyperball/Spellbinder Virtual Machine Macro Definitions
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             
0012+  0000             .module wml7
0013+  0000             .msfirst
0014+  0000             
0015+  0000             wml1_       .equ  $00
0016+  0000             wml2_       .equ  $00
0017+  0000             wml3_       .equ  $00
0018+  0000             wml4_       .equ  $00
0019+  0000             wml5_       .equ  $00
0020+  0000             wml6_       .equ  $00
0021+  0000             
0022+  0000             #define     FLAG_WML_IF       	$10
0023+  0000             #define     FLAG_WML_ELSE     	$20
0024+  0000             #define		FLAG_WML_BEGIN 		$40
0025+  0000             #define     FLAG_WML_EXE      	$80
0026+  0000             
0027+  0000             ;********************************************************
0028+  0000             ;* First Define the Thread Structure used in the virtual 
0029+  0000             ;* machine linked list.
0030+  0000             ;********************************************************
0031+  0000             ;* Next:	This is the pointer to the next thread in 
0032+  0000             ;* 		    the linked list. The VM requires this to 
0033+  0000             ;*		    move about the list of threads. This is 
0034+  0000             ;* 		    set by the VM thread handlers and does not
0035+  0000             ;*          need to be manually fiddled with by the 
0036+  0000             ;*          game program as it is automatic.
0037+  0000             ;*
0038+  0000             ;* Timer:	This is a byte timer (0-255) that holds the 
0039+  0000             ;*          number of IRQ's counts required before the 
0040+  0000             ;*          thread is executed. This is set by the 
0041+  0000             ;*          programmer for delays between executions.	
0042+  0000             ;*
0043+  0000             ;* Vars:	When a thread is created, the originating
0044+  0000             ;*          program may push up to 8 additional bytes
0045+  0000             ;* 		    of data onto the stack which will then be
0046+  0000             ;*          placed into these 8 byte holders.
0047+  0000             ;*
0048+  0000             ;* PC:	This is the address of the program entry 
0049+  0000             ;*          point that will be executed when the thread
0050+  0000             ;*       	timer expires.
0051+  0000             ;*
0052+  0000             ;* ID:	The thread ID is a number that identifies 
0053+  0000             ;* 		the thread type. The ID defintions are all
0054+  0000             ;*		decided by the programmer except for thread
0055+  0000             ;*		ID #06 which is a general 'end-of-ball' terminated
0056+  0000             ;*		thread. Because the VM can destroy groups of 
0057+  0000             ;* 		threads by ID and branch on existence of threads
0058+  0000             ;*    	with certain ID's, this is a very important
0059+  0000             ;*		design consideration. See the programming 
0060+  0000             ;*  		manual for more information.
0061+  0000             ;*	
0062+  0000             ;* RegA:	This holds the value that was contained in 
0063+  0000             ;*		the CPU register A when the Thread was created.
0064+  0000             ;*
0065+  0000             ;* RegB:	Similar to above, holds the value of CPU reg B.
0066+  0000             ;*
0067+  0000             ;* RegX:	Again, holds the value of the X register upon
0068+  0000             ;*		thread creation.
0069+  0000             ;*
0070+  0000             ;************************************************************
0071+  0000             
0072+  0000             threadobj_next	.equ	$00
0073+  0000             threadobj_timer	.equ	$02
0074+  0000             threadobj_var1	.equ	$03
0075+  0000             threadobj_var2	.equ	$04
0076+  0000             threadobj_var3	.equ	$05
0077+  0000             threadobj_var4	.equ	$06
0078+  0000             threadobj_var5	.equ	$07
0079+  0000             threadobj_var6	.equ	$09
0080+  0000             threadobj_var7	.equ	$09
0081+  0000             threadobj_var8	.equ	$0a
0082+  0000             threadobj_pc	.equ	$0b
0083+  0000             threadobj_id	.equ	$0d
0084+  0000             threadobj_rega	.equ	$0e
0085+  0000             threadobj_regb	.equ	$0f
0086+  0000             threadobj_regx	.equ	$10
0087+  0000             
0088+  0000             ;********************************************************
0089+  0000             ;* Now define some standard RAM locations etc...
0090+  0000             ;********************************************************
0091+  0000             rega	.equ	$00
0092+  0000             regb	.equ	$01
0093+  0000             
0094+  0000             ;********************************************************
0095+  0000             ;* Switch Table Equates
0096+  0000             ;********************************************************
0097+  0000             #define	switchentry(a,b)	.db a /.dw b
0098+  0000             
0099+  0000             sf_wml7	        .equ	$80
0100+  0000             sf_code         .equ 	$00
0101+  0000             sf_tilt	      	.equ	$40
0102+  0000             sf_notilt       .equ    $00
0103+  0000             sf_gameover	    .equ	$20
0104+  0000             sf_nogameover   .equ    $00
0105+  0000             sf_enabled	    .equ	$10
0106+  0000             sf_disabled     .equ    $00
0107+  0000             sf_instant	    .equ	$08
0108+  0000             sf_delayed      .equ    $00
0109+  0000             
0110+  0000             swtype1		.equ	$1
0111+  0000             swtype2		.equ	$2
0112+  0000             swtype3		.equ	$3
0113+  0000             swtype4		.equ	$4
0114+  0000             swtype5		.equ	$5
0115+  0000             swtype6		.equ	$6
0116+  0000             swtype7		.equ	$6
0117+  0000             
0118+  0000             ;********************************************************
0119+  0000             ;* Test for our current execution mode, CODE or WML7
0120+  0000             ;* If we think the programmer has their code wrong, 
0121+  0000             ;* then throw an error.
0122+  0000             ;********************************************************
0123+  0000             ;_MODECPU_         .equ  $00
0124+  0000             ;_MODEWML_         .equ  $80
0125+  0000             ;_CURRENTMODE_     .equ  _MODECPU_
0126+  0000             ;
0127+  0000             ;#define     _SETMODECPU_      \_CURRENTMODE_     .set  _MODECPU_
0128+  0000             ;#define     _SETMODEWML_      \_CURRENTMODE_     .set  _MODEWML_
0129+  0000             ;
0130+  0000             ;#define     _CHECKWML_        \#if _CURRENTMODE_ != _MODEWML_
0131+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect WML codes now, are you sure your code is structured properly?"
0132+  0000             ;#defcont                      \#endif
0133+  0000             ;
0134+  0000             ;#define     _CHECKCPU_        \#if _CURRENTMODE_ != _MODECPU_
0135+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect CPU codes now, are you sure your code is structured properly?"
0136+  0000             ;#defcont                      \#endif
0137+  0000             
0138+  0000             ;********************************************************
0139+  0000             ;* Define our Level 7 macros.
0140+  0000             ;********************************************************
0141+  0000             
0142+  0000             #define 	PC100_	\.db $00	
0143+  0000             #define 	NOP_		\.db $01	
0144+  0000             #define	MRTS_		\.db $02
0145+  0000             #define	KILL_		\.db $03	
0146+  0000             #define 	CPUX_		\.db $04
0147+  0000             #define	SPEC_		\.db $05	
0148+  0000             #define	EB_		\.db $06	
0149+  0000             
0150+  0000             ;********************************************************
0151+  0000             ;* Lamp Macro Definition: These take care of turning lamps
0152+  0000             ;*                        on/off and doing the basic lamp
0153+  0000             ;*                        effects.
0154+  0000             ;********************************************************
0155+  0000             #define	BITX_(x,a)		        \.db x,a
0156+  0000             #define	BITX_(x,a,b)		    \.db x,((a&$7F)+$80),b
0157+  0000             #define	BITX_(x,a,b,c)	        \.db x,((a&$7F)+$80),((b&$7F)+$80),c
0158+  0000             #define	BITX_(x,a,b,c,d)	    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0159+  0000             #define	BITX_(x,a,b,c,d,e)	    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0160+  0000             #define	BITX_(x,a,b,c,d,e,f)    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
0161+  0000             #define	BITX_(x,a,b,c,d,e,f,g)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
0162+  0000             #define	BITX_(x,a,b,c,d,e,f,g,h)    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7f)+$80),h
0163+  0000             #define	BITX_(x,a,b,c,d,e,f,g,h,i)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7f)+$80),((h&$7f)+$80),i
0164+  0000             
0165+  0000             ;*****************************************************************
0166+  0000             ;* Macros 1X_
0167+  0000             ;*****************************************************************
0168+  0000             #define	BITON_(a)		        \BITX_($10,a)
0169+  0000             #define	BITON_(a,b)		        \BITX_($10,a,b)
0170+  0000             #define	BITON_(a,b,c)	        \BITX_($10,a,b,c)
0171+  0000             #define	BITON_(a,b,c,d)	        \BITX_($10,a,b,c,d)
0172+  0000             #define	BITON_(a,b,c,d,e)	    \BITX_($10,a,b,c,d,e)
0173+  0000             #define	BITON_(a,b,c,d,e,f)     \BITX_($10,a,b,c,d,e,f)
0174+  0000             #define	BITON_(a,b,c,d,e,f,g)   \BITX_($10,a,b,c,d,e,f,g)
0175+  0000             
0176+  0000             #define	BITOFF_(a)		        \BITX_($11,a)            
0177+  0000             #define	BITOFF_(a,b)		    \BITX_($11,a,b)          
0178+  0000             #define	BITOFF_(a,b,c)	        \BITX_($11,a,b,c)        
0179+  0000             #define	BITOFF_(a,b,c,d)	    \BITX_($11,a,b,c,d)      
0180+  0000             #define	BITOFF_(a,b,c,d,e)	    \BITX_($11,a,b,c,d,e)    
0181+  0000             #define	BITOFF_(a,b,c,d,e,f)    \BITX_($11,a,b,c,d,e,f)  
0182+  0000             #define	BITOFF_(a,b,c,d,e,f,g)  \BITX_($11,a,b,c,d,e,f,g)
0183+  0000                                                 
0184+  0000             #define	BITINV_(a)		        \BITX_($12,a)            
0185+  0000             #define	BITINV_(a,b)		    \BITX_($12,a,b)          
0186+  0000             #define	BITINV_(a,b,c)	        \BITX_($12,a,b,c)        
0187+  0000             #define	BITINV_(a,b,c,d)	    \BITX_($12,a,b,c,d)      
0188+  0000             #define	BITINV_(a,b,c,d,e)	    \BITX_($12,a,b,c,d,e)    
0189+  0000             #define	BITINV_(a,b,c,d,e,f)    \BITX_($12,a,b,c,d,e,f)  
0190+  0000             #define	BITINV_(a,b,c,d,e,f,g)  \BITX_($12,a,b,c,d,e,f,g)
0191+  0000             
0192+  0000             #define	BITFL_(a)		        \BITX_($13,a)            
0193+  0000             #define	BITFL_(a,b)			    \BITX_($13,a,b)          
0194+  0000             #define	BITFL_(a,b,c)	        \BITX_($13,a,b,c)        
0195+  0000             #define	BITFL_(a,b,c,d)	        \BITX_($13,a,b,c,d)      
0196+  0000             #define	BITFL_(a,b,c,d,e)		\BITX_($13,a,b,c,d,e)    
0197+  0000             #define	BITFL_(a,b,c,d,e,f)    	\BITX_($13,a,b,c,d,e,f)  
0198+  0000             #define	BITFL_(a,b,c,d,e,f,g)  	\BITX_($13,a,b,c,d,e,f,g)
0199+  0000              
0200+  0000             #define	BITONP_(a)		        \BITX_($14,a)            
0201+  0000             #define	BITONP_(a,b)		    \BITX_($14,a,b)          
0202+  0000             #define	BITONP_(a,b,c)	        \BITX_($14,a,b,c)        
0203+  0000             #define	BITONP_(a,b,c,d)	    \BITX_($14,a,b,c,d)      
0204+  0000             #define	BITONP_(a,b,c,d,e)	    \BITX_($14,a,b,c,d,e)    
0205+  0000             #define	BITONP_(a,b,c,d,e,f)    \BITX_($14,a,b,c,d,e,f)  
0206+  0000             #define	BITONP_(a,b,c,d,e,f,g)  \BITX_($14,a,b,c,d,e,f,g)
0207+  0000             
0208+  0000             #define	BITOFFP_(a)		        \BITX_($15,a)            
0209+  0000             #define	BITOFFP_(a,b)		    \BITX_($15,a,b)          
0210+  0000             #define	BITOFFP_(a,b,c)	        \BITX_($15,a,b,c)        
0211+  0000             #define	BITOFFP_(a,b,c,d)	    \BITX_($15,a,b,c,d)      
0212+  0000             #define	BITOFFP_(a,b,c,d,e)	    \BITX_($15,a,b,c,d,e)    
0213+  0000             #define	BITOFFP_(a,b,c,d,e,f)   \BITX_($15,a,b,c,d,e,f)  
0214+  0000             #define	BITOFFP_(a,b,c,d,e,f,g) \BITX_($15,a,b,c,d,e,f,g)
0215+  0000             
0216+  0000             #define	BITINVP_(a)		        \BITX_($16,a)            
0217+  0000             #define	BITINVP_(a,b)		    \BITX_($16,a,b)          
0218+  0000             #define	BITINVP_(a,b,c)	        \BITX_($16,a,b,c)        
0219+  0000             #define	BITINVP_(a,b,c,d)	    \BITX_($16,a,b,c,d)      
0220+  0000             #define	BITINVP_(a,b,c,d,e)	    \BITX_($16,a,b,c,d,e)    
0221+  0000             #define	BITINVP_(a,b,c,d,e,f)   \BITX_($16,a,b,c,d,e,f)  
0222+  0000             #define	BITINVP_(a,b,c,d,e,f,g) \BITX_($16,a,b,c,d,e,f,g)
0223+  0000             
0224+  0000             #define	BITFLP_(a)		        \BITX_($17,a)            
0225+  0000             #define	BITFLP_(a,b)		    \BITX_($17,a,b)          
0226+  0000             #define	BITFLP_(a,b,c)	        \BITX_($17,a,b,c)        
0227+  0000             #define	BITFLP_(a,b,c,d)	    \BITX_($17,a,b,c,d)      
0228+  0000             #define	BITFLP_(a,b,c,d,e)	    \BITX_($17,a,b,c,d,e)    
0229+  0000             #define	BITFLP_(a,b,c,d,e,f)   	\BITX_($17,a,b,c,d,e,f)  
0230+  0000             #define	BITFLP_(a,b,c,d,e,f,g) 	\BITX_($17,a,b,c,d,e,f,g)
0231+  0000             
0232+  0000             ;************************
0233+  0000             ;* Lamp/Bit Effects
0234+  0000             ;************************
0235+  0000             #define	RSET0_(a)		        \BITX_($18,a)            
0236+  0000             #define	RSET0_(a,b)			    \BITX_($18,a,b)          
0237+  0000             #define	RSET0_(a,b,c)	        \BITX_($18,a,b,c)        
0238+  0000             #define	RSET0_(a,b,c,d)	        \BITX_($18,a,b,c,d)      
0239+  0000             #define	RSET0_(a,b,c,d,e)		\BITX_($18,a,b,c,d,e)    
0240+  0000             #define	RSET0_(a,b,c,d,e,f)   	\BITX_($18,a,b,c,d,e,f)  
0241+  0000             #define	RSET0_(a,b,c,d,e,f,g) 	\BITX_($18,a,b,c,d,e,f,g)
0242+  0000             
0243+  0000             #define	RCLR0_(a)		        \BITX_($19,a)            
0244+  0000             #define	RCLR0_(a,b)			    \BITX_($19,a,b)          
0245+  0000             #define	RCLR0_(a,b,c)	        \BITX_($19,a,b,c)        
0246+  0000             #define	RCLR0_(a,b,c,d)	        \BITX_($19,a,b,c,d)      
0247+  0000             #define	RCLR0_(a,b,c,d,e)		\BITX_($19,a,b,c,d,e)    
0248+  0000             #define	RCLR0_(a,b,c,d,e,f)   	\BITX_($19,a,b,c,d,e,f)  
0249+  0000             #define	RCLR0_(a,b,c,d,e,f,g) 	\BITX_($19,a,b,c,d,e,f,g)
0250+  0000             
0251+  0000             #define	RSET1R0_(a)		        \BITX_($1A,a)            
0252+  0000             #define	RSET1R0_(a,b)		    \BITX_($1A,a,b)          
0253+  0000             #define	RSET1R0_(a,b,c)	        \BITX_($1A,a,b,c)        
0254+  0000             #define	RSET1R0_(a,b,c,d)	    \BITX_($1A,a,b,c,d)      
0255+  0000             #define	RSET1R0_(a,b,c,d,e)	    \BITX_($1A,a,b,c,d,e)    
0256+  0000             #define	RSET1R0_(a,b,c,d,e,f)   \BITX_($1A,a,b,c,d,e,f)  
0257+  0000             #define	RSET1R0_(a,b,c,d,e,f,g) \BITX_($1A,a,b,c,d,e,f,g)
0258+  0000             
0259+  0000             #define	RSET1RC0_(a)		    \BITX_($1B,a)            
0260+  0000             #define	RSET1RC0_(a,b)		    \BITX_($1B,a,b)          
0261+  0000             #define	RSET1RC0_(a,b,c)	    \BITX_($1B,a,b,c)        
0262+  0000             #define	RSET1RC0_(a,b,c,d)	    \BITX_($1B,a,b,c,d)      
0263+  0000             #define	RSET1RC0_(a,b,c,d,e)	\BITX_($1B,a,b,c,d,e)    
0264+  0000             #define	RSET1RC0_(a,b,c,d,e,f)  \BITX_($1B,a,b,c,d,e,f)  
0265+  0000             #define	RSET1RC0_(a,b,c,d,e,f,g) \BITX_($1B,a,b,c,d,e,f,g)
0266+  0000             
0267+  0000             #define	RCLR1L0_(a)		        \BITX_($1C,a)            
0268+  0000             #define	RCLR1L0_(a,b)		    \BITX_($1C,a,b)          
0269+  0000             #define	RCLR1L0_(a,b,c)	        \BITX_($1C,a,b,c)        
0270+  0000             #define	RCLR1L0_(a,b,c,d)	    \BITX_($1C,a,b,c,d)      
0271+  0000             #define	RCLR1L0_(a,b,c,d,e)	    \BITX_($1C,a,b,c,d,e)    
0272+  0000             #define	RCLR1L0_(a,b,c,d,e,f)   \BITX_($1C,a,b,c,d,e,f)  
0273+  0000             #define	RCLR1L0_(a,b,c,d,e,f,g) \BITX_($1C,a,b,c,d,e,f,g)
0274+  0000             
0275+  0000             #define	RROL0_(a)		        \BITX_($1D,a)            
0276+  0000             #define	RROL0_(a,b)			    \BITX_($1D,a,b)          
0277+  0000             #define	RROL0_(a,b,c)	        \BITX_($1D,a,b,c)        
0278+  0000             #define	RROL0_(a,b,c,d)	        \BITX_($1D,a,b,c,d)      
0279+  0000             #define	RROL0_(a,b,c,d,e)		\BITX_($1D,a,b,c,d,e)    
0280+  0000             #define	RROL0_(a,b,c,d,e,f)   	\BITX_($1D,a,b,c,d,e,f)  
0281+  0000             #define	RROL0_(a,b,c,d,e,f,g) 	\BITX_($1D,a,b,c,d,e,f,g)
0282+  0000             #define	RROL0_(a,b,c,d,e,f,g,h,i) \BITX_($1D,a,b,c,d,e,f,g,h,i)
0283+  0000             
0284+  0000             #define	RROR0_(a)		        \BITX_($1E,a)            
0285+  0000             #define	RROR0_(a,b)			    \BITX_($1E,a,b)          
0286+  0000             #define	RROR0_(a,b,c)	        \BITX_($1E,a,b,c)        
0287+  0000             #define	RROR0_(a,b,c,d)	        \BITX_($1E,a,b,c,d)      
0288+  0000             #define	RROR0_(a,b,c,d,e)		\BITX_($1E,a,b,c,d,e)    
0289+  0000             #define	RROR0_(a,b,c,d,e,f)   	\BITX_($1E,a,b,c,d,e,f)  
0290+  0000             #define	RROR0_(a,b,c,d,e,f,g) 	\BITX_($1E,a,b,c,d,e,f,g)
0291+  0000             
0292+  0000             #define	RINV0_(a)		        \BITX_($1F,a)            
0293+  0000             #define	RINV0_(a,b)			    \BITX_($1F,a,b)          
0294+  0000             #define	RINV0_(a,b,c)	        \BITX_($1F,a,b,c)        
0295+  0000             #define	RINV0_(a,b,c,d)	        \BITX_($1F,a,b,c,d)      
0296+  0000             #define	RINV0_(a,b,c,d,e)		\BITX_($1F,a,b,c,d,e)    
0297+  0000             #define	RINV0_(a,b,c,d,e,f)   	\BITX_($1F,a,b,c,d,e,f)  
0298+  0000             #define	RINV0_(a,b,c,d,e,f,g) 	\BITX_($1F,a,b,c,d,e,f,g)
0299+  0000             
0300+  0000             ;*****************************************************************
0301+  0000             ;* Macros 2X_
0302+  0000             ;*****************************************************************
0303+  0000             
0304+  0000             #define	BITON2_(a)		      	\BITX_($20,a)
0305+  0000             #define	BITON2_(a,b)			\BITX_($20,a,b)
0306+  0000             #define	BITON2_(a,b,c)	      	\BITX_($20,a,b,c)
0307+  0000             #define	BITON2_(a,b,c,d)	    \BITX_($20,a,b,c,d)
0308+  0000             #define	BITON2_(a,b,c,d,e)		\BITX_($20,a,b,c,d,e)
0309+  0000             #define	BITON2_(a,b,c,d,e,f)    \BITX_($20,a,b,c,d,e,f)
0310+  0000             #define	BITON2_(a,b,c,d,e,f,g)  \BITX_($20,a,b,c,d,e,f,g)
0311+  0000             
0312+  0000             #define	BITOFF2_(a)		      	\BITX_($21,a)            
0313+  0000             #define	BITOFF2_(a,b)			\BITX_($21,a,b)          
0314+  0000             #define	BITOFF2_(a,b,c)	      	\BITX_($21,a,b,c)        
0315+  0000             #define	BITOFF2_(a,b,c,d)	    \BITX_($21,a,b,c,d)      
0316+  0000             #define	BITOFF2_(a,b,c,d,e)		\BITX_($21,a,b,c,d,e)    
0317+  0000             #define	BITOFF2_(a,b,c,d,e,f)   \BITX_($21,a,b,c,d,e,f)  
0318+  0000             #define	BITOFF2_(a,b,c,d,e,f,g) \BITX_($21,a,b,c,d,e,f,g)
0319+  0000                                                 
0320+  0000             #define	BITINV2_(a)		      	\BITX_($22,a)            
0321+  0000             #define	BITINV2_(a,b)			\BITX_($22,a,b)          
0322+  0000             #define	BITINV2_(a,b,c)	      	\BITX_($22,a,b,c)        
0323+  0000             #define	BITINV2_(a,b,c,d)	    \BITX_($22,a,b,c,d)      
0324+  0000             #define	BITINV2_(a,b,c,d,e)		\BITX_($22,a,b,c,d,e)    
0325+  0000             #define	BITINV2_(a,b,c,d,e,f)   \BITX_($22,a,b,c,d,e,f)  
0326+  0000             #define	BITINV2_(a,b,c,d,e,f,g) \BITX_($22,a,b,c,d,e,f,g)
0327+  0000             
0328+  0000             #define	BITFL2_(a)		      	\BITX_($23,a)            
0329+  0000             #define	BITFL2_(a,b)			\BITX_($23,a,b)          
0330+  0000             #define	BITFL2_(a,b,c)	      	\BITX_($23,a,b,c)        
0331+  0000             #define	BITFL2_(a,b,c,d)	    \BITX_($23,a,b,c,d)      
0332+  0000             #define	BITFL2_(a,b,c,d,e)		\BITX_($23,a,b,c,d,e)    
0333+  0000             #define	BITFL2_(a,b,c,d,e,f)    \BITX_($23,a,b,c,d,e,f)  
0334+  0000             #define	BITFL2_(a,b,c,d,e,f,g)  \BITX_($23,a,b,c,d,e,f,g)
0335+  0000              
0336+  0000             #define	BITONP2_(a)		      	\BITX_($24,a)            
0337+  0000             #define	BITONP2_(a,b)			\BITX_($24,a,b)          
0338+  0000             #define	BITONP2_(a,b,c)	      	\BITX_($24,a,b,c)        
0339+  0000             #define	BITONP2_(a,b,c,d)	    \BITX_($24,a,b,c,d)      
0340+  0000             #define	BITONP2_(a,b,c,d,e)		\BITX_($24,a,b,c,d,e)    
0341+  0000             #define	BITONP2_(a,b,c,d,e,f)   \BITX_($24,a,b,c,d,e,f)  
0342+  0000             #define	BITONP2_(a,b,c,d,e,f,g) \BITX_($24,a,b,c,d,e,f,g)
0343+  0000             
0344+  0000             #define	BITOFFP2_(a)			\BITX_($25,a)            
0345+  0000             #define	BITOFFP2_(a,b)			\BITX_($25,a,b)          
0346+  0000             #define	BITOFFP2_(a,b,c)	    \BITX_($25,a,b,c)        
0347+  0000             #define	BITOFFP2_(a,b,c,d)		\BITX_($25,a,b,c,d)      
0348+  0000             #define	BITOFFP2_(a,b,c,d,e)	\BITX_($25,a,b,c,d,e)    
0349+  0000             #define	BITOFFP2_(a,b,c,d,e,f)  \BITX_($25,a,b,c,d,e,f)  
0350+  0000             #define	BITOFFP2_(a,b,c,d,e,f,g) \BITX_($25,a,b,c,d,e,f,g)
0351+  0000             
0352+  0000             #define	BITINVP2_(a)			\BITX_($26,a)            
0353+  0000             #define	BITINVP2_(a,b)			\BITX_($26,a,b)          
0354+  0000             #define	BITINVP2_(a,b,c)	    \BITX_($26,a,b,c)        
0355+  0000             #define	BITINVP2_(a,b,c,d)		\BITX_($26,a,b,c,d)      
0356+  0000             #define	BITINVP2_(a,b,c,d,e)	\BITX_($26,a,b,c,d,e)    
0357+  0000             #define	BITINVP2_(a,b,c,d,e,f)  \BITX_($26,a,b,c,d,e,f)  
0358+  0000             #define	BITINVP2_(a,b,c,d,e,f,g) \BITX_($26,a,b,c,d,e,f,g)
0359+  0000             
0360+  0000             #define	BITFLP2_(a)		      	\BITX_($27,a)            
0361+  0000             #define	BITFLP2_(a,b)			\BITX_($27,a,b)          
0362+  0000             #define	BITFLP2_(a,b,c)	      	\BITX_($27,a,b,c)        
0363+  0000             #define	BITFLP2_(a,b,c,d)	    \BITX_($27,a,b,c,d)      
0364+  0000             #define	BITFLP2_(a,b,c,d,e)		\BITX_($27,a,b,c,d,e)    
0365+  0000             #define	BITFLP2_(a,b,c,d,e,f)   \BITX_($27,a,b,c,d,e,f)  
0366+  0000             #define	BITFLP2_(a,b,c,d,e,f,g) \BITX_($27,a,b,c,d,e,f,g)
0367+  0000             
0368+  0000             ;************************
0369+  0000             ;* Lamp/Bit Effects
0370+  0000             ;************************
0371+  0000             #define	RSET1_(a)		      \BITX_($28,a)            
0372+  0000             #define	RSET1_(a,b)			\BITX_($28,a,b)          
0373+  0000             #define	RSET1_(a,b,c)	      \BITX_($28,a,b,c)        
0374+  0000             #define	RSET1_(a,b,c,d)	      \BITX_($28,a,b,c,d)      
0375+  0000             #define	RSET1_(a,b,c,d,e)		\BITX_($28,a,b,c,d,e)    
0376+  0000             #define	RSET1_(a,b,c,d,e,f)   	\BITX_($28,a,b,c,d,e,f)  
0377+  0000             #define	RSET1_(a,b,c,d,e,f,g) 	\BITX_($28,a,b,c,d,e,f,g)
0378+  0000             
0379+  0000             #define	RCLR1_(a)		      \BITX_($29,a)            
0380+  0000             #define	RCLR1_(a,b)			\BITX_($29,a,b)          
0381+  0000             #define	RCLR1_(a,b,c)	      \BITX_($29,a,b,c)        
0382+  0000             #define	RCLR1_(a,b,c,d)	      \BITX_($29,a,b,c,d)      
0383+  0000             #define	RCLR1_(a,b,c,d,e)		\BITX_($29,a,b,c,d,e)    
0384+  0000             #define	RCLR1_(a,b,c,d,e,f)   	\BITX_($29,a,b,c,d,e,f)  
0385+  0000             #define	RCLR1_(a,b,c,d,e,f,g) 	\BITX_($29,a,b,c,d,e,f,g)
0386+  0000             
0387+  0000             #define	RSET1R1_(a)		      \BITX_($2A,a)            
0388+  0000             #define	RSET1R1_(a,b)		\BITX_($2A,a,b)          
0389+  0000             #define	RSET1R1_(a,b,c)	      \BITX_($2A,a,b,c)        
0390+  0000             #define	RSET1R1_(a,b,c,d)	      \BITX_($2A,a,b,c,d)      
0391+  0000             #define	RSET1R1_(a,b,c,d,e)	\BITX_($2A,a,b,c,d,e)    
0392+  0000             #define	RSET1R1_(a,b,c,d,e,f)   \BITX_($2A,a,b,c,d,e,f)  
0393+  0000             #define	RSET1R1_(a,b,c,d,e,f,g) \BITX_($2A,a,b,c,d,e,f,g)
0394+  0000             
0395+  0000             #define	RSET1RC1_(a)		\BITX_($2B,a)            
0396+  0000             #define	RSET1RC1_(a,b)		\BITX_($2B,a,b)          
0397+  0000             #define	RSET1RC1_(a,b,c)	      \BITX_($2B,a,b,c)        
0398+  0000             #define	RSET1RC1_(a,b,c,d)	\BITX_($2B,a,b,c,d)      
0399+  0000             #define	RSET1RC1_(a,b,c,d,e)	\BITX_($2B,a,b,c,d,e)    
0400+  0000             #define	RSET1RC1_(a,b,c,d,e,f)  \BITX_($2B,a,b,c,d,e,f)  
0401+  0000             #define	RSET1RC1_(a,b,c,d,e,f,g) \BITX_($2B,a,b,c,d,e,f,g)
0402+  0000             
0403+  0000             #define	RCLR1L1_(a)		      \BITX_($2C,a)            
0404+  0000             #define	RCLR1L1_(a,b)		\BITX_($2C,a,b)          
0405+  0000             #define	RCLR1L1_(a,b,c)	      \BITX_($2C,a,b,c)        
0406+  0000             #define	RCLR1L1_(a,b,c,d)	      \BITX_($2C,a,b,c,d)      
0407+  0000             #define	RCLR1L1_(a,b,c,d,e)	\BITX_($2C,a,b,c,d,e)    
0408+  0000             #define	RCLR1L1_(a,b,c,d,e,f)   \BITX_($2C,a,b,c,d,e,f)  
0409+  0000             #define	RCLR1L1_(a,b,c,d,e,f,g) \BITX_($2C,a,b,c,d,e,f,g)
0410+  0000             
0411+  0000             #define	RROL1_(a)		      \BITX_($2D,a)            
0412+  0000             #define	RROL1_(a,b)			\BITX_($2D,a,b)          
0413+  0000             #define	RROL1_(a,b,c)	      \BITX_($2D,a,b,c)        
0414+  0000             #define	RROL1_(a,b,c,d)	      \BITX_($2D,a,b,c,d)      
0415+  0000             #define	RROL1_(a,b,c,d,e)		\BITX_($2D,a,b,c,d,e)    
0416+  0000             #define	RROL1_(a,b,c,d,e,f)   	\BITX_($2D,a,b,c,d,e,f)  
0417+  0000             #define	RROL1_(a,b,c,d,e,f,g) 	\BITX_($2D,a,b,c,d,e,f,g)
0418+  0000             
0419+  0000             #define	RROR1_(a)		      \BITX_($2E,a)            
0420+  0000             #define	RROR1_(a,b)			\BITX_($2E,a,b)          
0421+  0000             #define	RROR1_(a,b,c)	      \BITX_($2E,a,b,c)        
0422+  0000             #define	RROR1_(a,b,c,d)	      \BITX_($2E,a,b,c,d)      
0423+  0000             #define	RROR1_(a,b,c,d,e)		\BITX_($2E,a,b,c,d,e)    
0424+  0000             #define	RROR1_(a,b,c,d,e,f)   	\BITX_($2E,a,b,c,d,e,f)  
0425+  0000             #define	RROR1_(a,b,c,d,e,f,g) 	\BITX_($2E,a,b,c,d,e,f,g)
0426+  0000             
0427+  0000             #define	RINV1_(a)		      \BITX_($2F,a)            
0428+  0000             #define	RINV1_(a,b)			\BITX_($2F,a,b)          
0429+  0000             #define	RINV1_(a,b,c)	      \BITX_($2F,a,b,c)        
0430+  0000             #define	RINV1_(a,b,c,d)	      \BITX_($2F,a,b,c,d)      
0431+  0000             #define	RINV1_(a,b,c,d,e)		\BITX_($2F,a,b,c,d,e)    
0432+  0000             #define	RINV1_(a,b,c,d,e,f)   	\BITX_($2F,a,b,c,d,e,f)  
0433+  0000             #define	RINV1_(a,b,c,d,e,f,g) 	\BITX_($2F,a,b,c,d,e,f,g)
0434+  0000             
0435+  0000             
0436+  0000             ;********************************************************
0437+  0000             ;* Solenoid Macro Definition: Up to 15 Solenoids are Supported
0438+  0000             ;* 
0439+  0000             ;* The macro takes a coded value of the solenoid number 
0440+  0000             ;* and the number of IRQ's to leave the solenoid on.
0441+  0000             ;* You can define the solenoid number plus the time by using
0442+  0000             ;* the equates following this macro definition...
0443+  0000             ;* 
0444+  0000             ;* Example #1:  Turn on Solenoid #1 for 4 IRQ cycles
0445+  0000             ;*
0446+  0000             ;*          sol_1_on    .equ  $00+SOLENOID_ON_4_CYCLES
0447+  0000             ;*          sol_1_off   .equ  $00+SOLENOID_OFF
0448+  0000             ;* 
0449+  0000             ;* Then use the SOL_ macro...
0450+  0000             ;*
0451+  0000             ;*    Turn it on:       SOL_(sol_1_on)
0452+  0000             ;*    Turn it off:      SOL_(sol_1_off)
0453+  0000             ;*
0454+  0000             ;* Example #2:  Turn on Solenoid #15 indefinitely, and Solenoid #6 for 2 IRQ cycles
0455+  0000             ;*
0456+  0000             ;*          sol_15_on   .equ  $0E+SOLENOID_ON_LATCH
0457+  0000             ;*          sol_15_off  .equ  $0E+SOLENOID_OFF
0458+  0000             ;*
0459+  0000             ;*          sol_2_on    .equ  $01+SOLENOID_ON_2_CYCLES
0460+  0000             ;*          sol_2_off   .equ  $01+SOLENOID_OFF
0461+  0000             ;* 
0462+  0000             ;* Then use the SOL_ macro...
0463+  0000             ;*
0464+  0000             ;*    Turn them on:       SOL_(sol_15_on,sol_2_on)
0465+  0000             ;*    Turn them off:      SOL_(sol_15_off,sol_2_off)
0466+  0000             ;********************************************************
0467+  0000             #define	SOL_(a)		                        \.db $31,a
0468+  0000             #define	SOL_(a,b)		                    \.db $32,a,b
0469+  0000             #define SOL_(a,b,c)		                    \.db $33,a,b,c
0470+  0000             #define	SOL_(a,b,c,d)	                    \.db $34,a,b,c,d
0471+  0000             #define	SOL_(a,b,c,d,e)	                    \.db $35,a,b,c,d,e
0472+  0000             #define	SOL_(a,b,c,d,e,f)	                \.db $36,a,b,c,d,e,f
0473+  0000             #define	SOL_(a,b,c,d,e,f,g)	                \.db $37,a,b,c,d,e,f,g
0474+  0000             #define	SOL_(a,b,c,d,e,f,g,h)	            \.db $38,a,b,c,d,e,f,g,h
0475+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i)	            \.db $39,a,b,c,d,e,f,g,h,i
0476+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j)	        \.db $3A,a,b,c,d,e,f,g,h,i,j
0477+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k)	        \.db $3B,a,b,c,d,e,f,g,h,i,j,k
0478+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l)	    \.db $3C,a,b,c,d,e,f,g,h,i,j,k,l
0479+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m)	    \.db $3D,a,b,c,d,e,f,g,h,i,j,k,l,m
0480+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n)	\.db $3E,a,b,c,d,e,f,g,h,i,j,k,l,m,n
0481+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)	\.db $3F,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o
0482+  0000             
0483+  0000             ;********************************************************
0484+  0000             ;* some additional solenoid defines for timing
0485+  0000             ;* Use these in the top of your game definition to specify 
0486+  0000             ;* static lables for each solenoid
0487+  0000             ;********************************************************
0488+  0000             SOLENOID_ON_1_CYCLES       .equ  $10
0489+  0000             SOLENOID_ON_2_CYCLES       .equ  $20
0490+  0000             SOLENOID_ON_3_CYCLES       .equ  $30
0491+  0000             SOLENOID_ON_4_CYCLES       .equ  $40
0492+  0000             SOLENOID_ON_5_CYCLES       .equ  $50
0493+  0000             SOLENOID_ON_6_CYCLES       .equ  $60
0494+  0000             SOLENOID_ON_LATCH          .equ  $F0
0495+  0000             SOLENOID_OFF               .equ  $00
0496+  0000             
0497+  0000             ;********************************************************
0498+  0000             ;* Macros 40-43: Static Length, easy
0499+  0000             ;********************************************************
0500+  0000             #define	PTSND_(snd,count,unit)	\.db $40,snd      \ ADDPOINTS_(count,unit)
0501+  0000             
0502+  0000             #define	PTCHIME_(count,unit)	\.db $41    \ ADDPOINTS_(count,unit)
0503+  0000             
0504+  0000             #define	POINTS_(count,unit)	\.db $42    \ ADDPOINTS_(count,unit)
0505+  0000             
0506+  0000             #define	PTSDIG_(count,unit)	\.db $43    \ ADDPOINTS_(count,unit)
0507+  0000             
0508+  0000             #define     ADDPOINTS_(count,unit)  \#if ((unit < 10) & (count <= 32))
0509+  0000             #defcont				      \	.error "Point unit must be multples of 10 and count must be less than 33"
0510+  0000             #defcont				      \#else
0511+  0000             #defcont					      \#if (unit == 10)
0512+  0000             #defcont					      \	.db (((count)<<3)&$F8)+1
0513+  0000             #defcont					      \#else 
0514+  0000             #defcont					      	\#if (unit == 100)
0515+  0000             #defcont						      \	.db (((count)<<3)&$F8)+2
0516+  0000             #defcont						      \#else 
0517+  0000             #defcont							      \#if (unit == 1000)
0518+  0000             #defcont							      \	.db (((count)<<3)&$F8)+3
0519+  0000             #defcont							      \#else 
0520+  0000             #defcont								      \#if (unit == 10000)
0521+  0000             #defcont								      \	.db (((count)<<3)&$F8)+4
0522+  0000             #defcont								      \#else 
0523+  0000             #defcont									      \#if (unit == 100000)
0524+  0000             #defcont									      \	.db (((count)<<3)&$F8)+5
0525+  0000             #defcont									      \#else 
0526+  0000             #defcont									      \	.error "Macros only support points under 1,000,000 points"
0527+  0000             #defcont									      \#endif
0528+  0000             #defcont								      \#endif
0529+  0000             #defcont							      \#endif
0530+  0000             #defcont						      \#endif
0531+  0000             #defcont					      \#endif
0532+  0000             #defcont				      \#endif
0533+  0000             
0534+  0000             ;********************************************************
0535+  0000             ;* Macros 44-4F: Define temporary execution of CPU code.
0536+  0000             ;*               The length of bytes to execute is in 
0537+  0000             ;*               the lower nibble and must be between
0538+  0000             ;*               4-f. Therefore, number of bytes to 
0539+  0000             ;*               execute must be between 2 and 13.
0540+  0000             :*
0541+  0000             ;* There are two macros defined here, the first is the
0542+  0000             ;* new style macro where it will automatically calculate
0543+  0000             ;* the number of opcode bytes that are executed. This 
0544+  0000             ;* style requires and end tag for the macro called EXEEND_
0545+  0000             ;* that marks where execution returns to WML7.
0546+  0000             ;*
0547+  0000             ;* The old style macro does not require an end tag but
0548+  0000             ;* does require you to calcuate the number of bytes that
0549+  0000             ;* will be executed as native 680X code. This is obviously
0550+  0000             ;* more tedious but I left it here for some reason. 
0551+  0000             ;********************************************************
0552+  0000             #define     EXE_              \.push *,FLAG_WML_EXE
0553+  0000             #defcont                      \.db $44
0554+  0000             
0555+  0000             #define     EXEEND_           \wml4_ .set *
0556+  0000             #defcont                      \.pop wml1_,wml2_
0557+  0000             #defcont                      \#if wml1_ == FLAG_WML_EXE
0558+  0000             #defcont                            \wml3_ .set wml4_-wml2_
0559+  0000             #defcont                            \#if (wml3_>14)|(wml3_<3)
0560+  0000             #defcont                            \     .error "Macro EXE_: Number of executed bytes must be between 2 and 15"
0561+  0000             #defcont                            \#else
0562+  0000             #defcont                            \     .org wml2_
0563+  0000             #defcont                            \     .db $44+wml3_-3
0564+  0000             #defcont                            \#endif
0565+  0000             #defcont                            \.org wml4_
0566+  0000             #defcont                      \#else
0567+  0000             #defcont                            \.error "EXEEND_ did not have a starting EXE_ code"
0568+  0000             #defcont                      \#endif
0569+  0000             #define	EXE_(a)		\#if (a>13)|(a<2)
0570+  0000             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0571+  0000             #defcont				\#else
0572+  0000             #defcont				\    .db ($44+a-2)
0573+  0000             #defcont				\#endif
0574+  0000             
0575+  0000             ;********************************************************
0576+  0000             ;* Macros 50-57:
0577+  0000             ;********************************************************
0578+  0000             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0579+  0000             #defcont				\	.db $50,((a*16)+b) 
0580+  0000             #defcont				\#else
0581+  0000             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0582+  0000             #defcont				\#endif
0583+  0000             
0584+  0000             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0585+  0000             #defcont				\	.db $51,((a*16)+b) 
0586+  0000             #defcont				\#else
0587+  0000             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0588+  0000             #defcont				\#endif
0589+  0000             
0590+  0000             #define	PRI_(a)		\.db $52,a
0591+  0000             
0592+  0000             #define	SLEEP_(a)		\#if (a<16)
0593+  0000             #defcont				\	.db ($70+a)
0594+  0000             #defcont				\#else
0595+  0000             #defcont				\	.db $53,a
0596+  0000             #defcont				\#endif
0597+  0000             
0598+  0000             #define	REMTHREAD_(a,b)	\.db $54,a,b
0599+  0000             
0600+  0000             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0601+  0000             
0602+  0000             #define 	JSR_(a)		\.db $56 \.dw a
0603+  0000             #define	JSRD_(a)		\.db $57 \.dw a
0604+  0000             
0605+  0000             ;*******************************************************************
0606+  0000             ;* Branch Macros: 58-5B
0607+  0000             ;*******************************************************************
0608+  0000             #define     IFLOC_(type,vars)    \ .push  *, vars, type        
0609+  0000             
0610+  0000             ;*******************************************************************
0611+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0612+  0000             ;*        an 'XXEND_' statement.                                    *
0613+  0000             ;******************************************************************* 
0614+  0000             #define     BEGIN_	      IFLOC_(FLAG_WML_BEGIN,0)
0615+  0000             
0616+  0000             ;*******************************************************************
0617+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0618+  0000             ;*            pulls the pc location of the beginning of the loop   *
0619+  0000             ;*            and verifies that the 'type' is correct.             *
0620+  0000             ;*******************************************************************
0621+  0000             #define 	LOGIC_LOOPEND_(vars)	\ .pop wml1_, wml2_, wml3_
0622+  0000             #defcont						\wml2_ .set vars
0623+  0000             #defcont						\wml4_ .set *
0624+  0000             #defcont						\#if (wml1_ & FLAG_WML_BEGIN)
0625+  0000             #defcont							\#if ((wml4_-wml3_) <= 127)
0626+  0000             #defcont								\ .org wml4_-1
0627+  0000             #defcont								\ .db wml3_-wml4_
0628+  0000             #defcont								\ .org wml4_
0629+  0000             #defcont							\#else
0630+  0000             #defcont								\ .error "Loop Branch out of Range."
0631+  0000             #defcont							\#endif
0632+  0000             #defcont						\#else
0633+  0000             #defcont							\ .error "Inappropriate End for BEGIN Loop."
0634+  0000             #defcont						\#endif
0635+  0000             
0636+  0000             ;*******************************************************************
0637+  0000             ;* Basic Loop
0638+  0000             ;*******************************************************************
0639+  0000             #define	LOOP_		\ .pop wml1_, wml2_, wml3_ \ JMPR_(wml3_)
0640+  0000             
0641+  0000             ;*******************************************************************
0642+  0000             ;* Conditional Looping
0643+  0000             ;*******************************************************************
0644+  0000             #define	EQEND_(z)						BNER_(z,*+3) \ LOGIC_LOOPEND_(1)		
0645+  0000             #define	EQEND_(z,y)						BNER_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0646+  0000             #define	EQEND_(z,y,x)					BNER_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0647+  0000             #define	EQEND_(z,y,x,w)					BNER_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0648+  0000             #define	EQEND_(z,y,x,w,v)					BNER_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0649+  0000             #define     EQEND_(z,y,x,w,v,u)				BNER_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0650+  0000             #define     EQEND_(z,y,x,w,v,u,t)			     	BNER_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0651+  0000             #define     EQEND_(z,y,x,w,v,u,t,s)     			BNER_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0652+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r)     		BNER_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0653+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q)     		BNER_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0654+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p)     		BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0655+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0656+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0657+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0658+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0659+  0000             
0660+  0000             #define	NEEND_(z)						BEQR_(z,*+3) \ LOGIC_LOOPEND_(1)		
0661+  0000             #define	NEEND_(z,y)						BEQR_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0662+  0000             #define	NEEND_(z,y,x)					BEQR_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0663+  0000             #define	NEEND_(z,y,x,w)					BEQR_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0664+  0000             #define	NEEND_(z,y,x,w,v)					BEQR_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0665+  0000             #define     NEEND_(z,y,x,w,v,u)				BEQR_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0666+  0000             #define     NEEND_(z,y,x,w,v,u,t)			     	BEQR_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0667+  0000             #define     NEEND_(z,y,x,w,v,u,t,s)     			BEQR_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0668+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r)     		BEQR_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0669+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q)     		BEQR_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0670+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p)     		BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0671+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0672+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0673+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0674+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0675+  0000             ;*******************************************************************
0676+  0000             ;* IFxxx: These are the standard 'if' statements, they will always  
0677+  0000             ;*        be of type FLAG_WML_IF                                           
0678+  0000             ;*******************************************************************
0679+  0000             #define     IFEQR_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BNER_(z,*+3)     
0680+  0000             #define     IFEQR_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BNER_(z,y,*+3)   
0681+  0000             #define     IFEQR_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BNER_(z,y,x,*+3) 
0682+  0000             #define     IFEQR_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BNER_(z,y,x,w,*+3)   
0683+  0000             #define     IFEQR_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BNER_(z,y,x,w,v,*+3) 
0684+  0000             #define     IFEQR_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BNER_(z,y,x,w,v,u,*+3) 
0685+  0000             #define     IFEQR_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BNER_(z,y,x,w,v,u,t,*+3) 
0686+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BNER_(z,y,x,w,v,u,t,s,*+3) 
0687+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BNER_(z,y,x,w,v,u,t,s,r,*+3)
0688+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BNER_(z,y,x,w,v,u,t,s,r,q,*+3)
0689+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0690+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0691+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0692+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0693+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0694+  0000             
0695+  0000             #define     IFNER_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BEQR_(z,*+3)     
0696+  0000             #define     IFNER_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BEQR_(z,y,*+3)   
0697+  0000             #define     IFNER_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BEQR_(z,y,x,*+3) 
0698+  0000             #define     IFNER_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BEQR_(z,y,x,w,*+3) 
0699+  0000             #define     IFNER_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BEQR_(z,y,x,w,v,*+3) 
0700+  0000             #define     IFNER_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BEQR_(z,y,x,w,v,u,*+3) 
0701+  0000             #define     IFNER_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BEQR_(z,y,x,w,v,u,t,*+3) 
0702+  0000             #define     IFNER_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BEQR_(z,y,x,w,v,u,t,s,*+3) 
0703+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BEQR_(z,y,x,w,v,u,t,s,r,*+3)
0704+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BEQR_(z,y,x,w,v,u,t,s,r,q,*+3)
0705+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0706+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0707+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0708+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0709+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0710+  0000             
0711+  0000             #define     ENDIF_ \wml1_ .set *
0712+  0000             #defcont		 \ .pop wml3_, wml5_, wml4_
0713+  0000             #defcont		 \#if (wml3_ & FLAG_WML_BEGIN)==0
0714+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0715+  0000             #defcont  			      \wml2_ .set wml1_-wml4_-wml5_-2
0716+  0000             #defcont			      \#if wml2_+127 < 0
0717+  0000             #defcont				      \ .error "Branch Range < -127"
0718+  0000             #defcont			      \#else
0719+  0000             #defcont				      \#if wml2_-128 > 0
0720+  0000             #defcont					      \ .error "Branch Range > 128"
0721+  0000             #defcont				      \#else
0722+  0000             #defcont    				      \ .org wml4_+wml5_+1
0723+  0000             #defcont					      \ .byte wml2_
0724+  0000             #defcont				      \#endif
0725+  0000             #defcont			      \#endif
0726+  0000             #defcont                \#else
0727+  0000             #defcont                      \ .org  wml4_-2	
0728+  0000             #defcont				\ JMP_(wml1_)
0729+  0000             #defcont                      \ .error "123: Not Tested"
0730+  0000             #defcont                \#endif
0731+  0000             #defcont			\ .org	wml1_
0732+  0000             #defcont		 \#else
0733+  0000             #defcont			\.error "Wrong Endtype for IFXXR_ block"
0734+  0000             #defcont		 \#endif
0735+  0000             
0736+  0000             #define	ELSE_	\wml1_ .set $
0737+  0000             #defcont		\ .pop wml3_, wml5_, wml4_
0738+  0000             #defcont		\#if (wml3_ & FLAG_WML_BEGIN)==0
0739+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0740+  0000             #defcont				\ .org wml4_+wml5_+1
0741+  0000             #defcont				\wml2_ .set wml1_-wml4_
0742+  0000             #defcont					\#if wml2_+127 < 0
0743+  0000             #defcont						\ .org wml1_
0744+  0000             #defcont						\.push wml1_+3, wml5_, FLAG_WML_ELSE
0745+  0000             #defcont						\ JMP_($)
0746+  0000             #defcont                                  \ .error "(124)ELSE_: Not Tested with long JMP"
0747+  0000             #defcont					\#else
0748+  0000             #defcont						\#if wml2_-128>0
0749+  0000             #defcont							\ .org wml1_
0750+  0000             #defcont							\.push wml1_+3, wml5_, FLAG_WML_ELSE
0751+  0000             #defcont							\ JMP_($)
0752+  0000             #defcont                                  \ .error "(125)ELSE_: Not Tested with long JMP"
0753+  0000             #defcont						\#else
0754+  0000             #defcont							\.push wml1_-wml5_, wml5_, FLAG_WML_IF
0755+  0000             #defcont							\ .byte wml2_-wml5_
0756+  0000             #defcont							\ .org wml1_
0757+  0000             #defcont							\ JMPR_($+1)
0758+  0000             #defcont							\ .org wml1_+2
0759+  0000             #defcont						\#endif
0760+  0000             #defcont					\#endif
0761+  0000             #defcont			\#else
0762+  0000             #defcont				\.error "Duplicate ELSE Statement"
0763+  0000             #defcont			\#endif
0764+  0000             #defcont		\#else
0765+  0000             #defcont			\ .error "Misplaced Else"
0766+  0000             #defcont		\#endif
0767+  0000             
0768+  0000             #define     BEQR_(p1__,ba__)     \#if $+3-ba__ < 128
0769+  0000             #defcont                                 \.db $5A,p1__,ba__-$-3
0770+  0000             #defcont				\#else
0771+  0000             #defcont					\#if ba__-$+3 < 127
0772+  0000             #defcont                                 \.db $5A,p1__,$+3-ba__
0773+  0000             #defcont					\#else
0774+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0775+  0000             #defcont					\#endif
0776+  0000             #defcont				\#endif
0777+  0000             
0778+  0000             #define     BEQR_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0779+  0000             #defcont                                 \.db $5A,p1__,p2__,ba__-$-4
0780+  0000             #defcont				\#else
0781+  0000             #defcont					\#if ba__-$+4 < 127
0782+  0000             #defcont                                 \.db $5A,p1__,p2__,$+4-ba__
0783+  0000             #defcont					\#else
0784+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0785+  0000             #defcont					\#endif
0786+  0000             #defcont				\#endif
0787+  0000             
0788+  0000             #define     BEQR_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0789+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,ba__-$-5
0790+  0000             #defcont				\#else
0791+  0000             #defcont					\#if ba__-$+5 < 127
0792+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,$+5-ba__
0793+  0000             #defcont					\#else
0794+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0795+  0000             #defcont					\#endif
0796+  0000             #defcont				\#endif
0797+  0000             
0798+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0799+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,ba__-$-6
0800+  0000             #defcont				\#else
0801+  0000             #defcont					\#if ba__-$+6 < 127
0802+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,$+6-ba__
0803+  0000             #defcont					\#else
0804+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0805+  0000             #defcont					\#endif
0806+  0000             #defcont				\#endif
0807+  0000             
0808+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0809+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0810+  0000             #defcont				\#else
0811+  0000             #defcont					\#if ba__-$+7 < 127
0812+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0813+  0000             #defcont					\#else
0814+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0815+  0000             #defcont					\#endif
0816+  0000             #defcont				\#endif
0817+  0000             
0818+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0819+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0820+  0000             #defcont				\#else
0821+  0000             #defcont					\#if ba__-$+8 < 127
0822+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0823+  0000             #defcont					\#else
0824+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0825+  0000             #defcont					\#endif
0826+  0000             #defcont				\#endif
0827+  0000             
0828+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0829+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0830+  0000             #defcont				\#else
0831+  0000             #defcont					\#if ba__-$+9 < 127
0832+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0833+  0000             #defcont					\#else
0834+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0835+  0000             #defcont					\#endif
0836+  0000             #defcont				\#endif
0837+  0000             
0838+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0839+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0840+  0000             #defcont				\#else
0841+  0000             #defcont					\#if ba__-$+10 < 127
0842+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0843+  0000             #defcont					\#else
0844+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0845+  0000             #defcont					\#endif
0846+  0000             #defcont				\#endif
0847+  0000             
0848+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0849+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0850+  0000             #defcont				\#else
0851+  0000             #defcont					\#if ba__-$+11 < 127
0852+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0853+  0000             #defcont					\#else
0854+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0855+  0000             #defcont					\#endif
0856+  0000             #defcont				\#endif
0857+  0000             
0858+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0859+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0860+  0000             #defcont				\#else
0861+  0000             #defcont					\#if ba__-$+12 < 127
0862+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0863+  0000             #defcont					\#else
0864+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0865+  0000             #defcont					\#endif
0866+  0000             #defcont				\#endif
0867+  0000             
0868+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0869+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0870+  0000             #defcont				\#else
0871+  0000             #defcont					\#if ba__-$+13 < 127
0872+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0873+  0000             #defcont					\#else
0874+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0875+  0000             #defcont					\#endif
0876+  0000             #defcont				\#endif
0877+  0000             
0878+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0879+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0880+  0000             #defcont				\#else
0881+  0000             #defcont					\#if ba__-$+14 < 127
0882+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0883+  0000             #defcont					\#else
0884+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0885+  0000             #defcont					\#endif
0886+  0000             #defcont				\#endif
0887+  0000             
0888+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0889+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0890+  0000             #defcont				\#else
0891+  0000             #defcont					\#if ba__-$+15 < 127
0892+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0893+  0000             #defcont					\#else
0894+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0895+  0000             #defcont					\#endif
0896+  0000             #defcont				\#endif
0897+  0000             
0898+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0899+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0900+  0000             #defcont				\#else
0901+  0000             #defcont					\#if ba__-$+16 < 127
0902+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0903+  0000             #defcont					\#else
0904+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0905+  0000             #defcont					\#endif
0906+  0000             #defcont				\#endif
0907+  0000             
0908+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
0909+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
0910+  0000             #defcont				\#else
0911+  0000             #defcont					\#if ba__-$+17 < 127
0912+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
0913+  0000             #defcont					\#else
0914+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0915+  0000             #defcont					\#endif
0916+  0000             #defcont				\#endif
0917+  0000             
0918+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
0919+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
0920+  0000             #defcont				\#else
0921+  0000             #defcont					\#if ba__-$+18 < 127
0922+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
0923+  0000             #defcont					\#else
0924+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0925+  0000             #defcont					\#endif
0926+  0000             #defcont				\#endif
0927+  0000             
0928+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
0929+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
0930+  0000             #defcont				\#else
0931+  0000             #defcont					\#if ba__-$+19 < 127
0932+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
0933+  0000             #defcont					\#else
0934+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0935+  0000             #defcont					\#endif
0936+  0000             #defcont				\#endif
0937+  0000             
0938+  0000             #define     BEQA_(p1__,ba__)     \.db $58,p1__ \.dw ba__
0939+  0000             #define     BEQA_(p1__,p2__,ba__)     \.db $58,p1__,p2__ \.dw ba__
0940+  0000             #define     BEQA_(p1__,p2__,p3__,ba__)     \.db $58,p1__,p2__,p3__ \.dw ba__
0941+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,ba__)     \.db $58,p1__,p2__,p3__,p4__ \.dw ba__
0942+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__ \.dw ba__
0943+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
0944+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
0945+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
0946+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
0947+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
0948+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
0949+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
0950+  0000             
0951+  0000             #define     BNER_(p1__,ba__)     \#if $+3-ba__ < 128
0952+  0000             #defcont                                 \.db $5B,p1__,ba__-$-3
0953+  0000             #defcont				\#else
0954+  0000             #defcont					\#if ba__-$+3 < 127
0955+  0000             #defcont                                 \.db $5B,p1__,$+3-ba__
0956+  0000             #defcont					\#else
0957+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0958+  0000             #defcont					\#endif
0959+  0000             #defcont				\#endif
0960+  0000             
0961+  0000             #define     BNER_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0962+  0000             #defcont                                 \.db $5B,p1__,p2__,ba__-$-4
0963+  0000             #defcont				\#else
0964+  0000             #defcont					\#if ba__-$+4 < 127
0965+  0000             #defcont                                 \.db $5B,p1__,p2__,$+4-ba__
0966+  0000             #defcont					\#else
0967+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0968+  0000             #defcont					\#endif
0969+  0000             #defcont				\#endif
0970+  0000             
0971+  0000             #define     BNER_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0972+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,ba__-$-5
0973+  0000             #defcont				\#else
0974+  0000             #defcont					\#if ba__-$+5 < 127
0975+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,$+5-ba__
0976+  0000             #defcont					\#else
0977+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0978+  0000             #defcont					\#endif
0979+  0000             #defcont				\#endif
0980+  0000             
0981+  0000             #define     BNER_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0982+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,ba__-$-6
0983+  0000             #defcont				\#else
0984+  0000             #defcont					\#if ba__-$+6 < 127
0985+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,$+6-ba__
0986+  0000             #defcont					\#else
0987+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0988+  0000             #defcont					\#endif
0989+  0000             #defcont				\#endif
0990+  0000             
0991+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0992+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0993+  0000             #defcont				\#else
0994+  0000             #defcont					\#if ba__-$+7 < 127
0995+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0996+  0000             #defcont					\#else
0997+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0998+  0000             #defcont					\#endif
0999+  0000             #defcont				\#endif
1000+  0000             
1001+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
1002+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
1003+  0000             #defcont				\#else
1004+  0000             #defcont					\#if ba__-$+8 < 127
1005+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
1006+  0000             #defcont					\#else
1007+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1008+  0000             #defcont					\#endif
1009+  0000             #defcont				\#endif
1010+  0000             
1011+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
1012+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
1013+  0000             #defcont				\#else
1014+  0000             #defcont					\#if ba__-$+9 < 127
1015+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
1016+  0000             #defcont					\#else
1017+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1018+  0000             #defcont					\#endif
1019+  0000             #defcont				\#endif
1020+  0000             
1021+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
1022+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
1023+  0000             #defcont				\#else
1024+  0000             #defcont					\#if ba__-$+10 < 127
1025+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
1026+  0000             #defcont					\#else
1027+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1028+  0000             #defcont					\#endif
1029+  0000             #defcont				\#endif
1030+  0000             
1031+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
1032+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
1033+  0000             #defcont				\#else
1034+  0000             #defcont					\#if ba__-$+11 < 127
1035+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
1036+  0000             #defcont					\#else
1037+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1038+  0000             #defcont					\#endif
1039+  0000             #defcont				\#endif
1040+  0000             
1041+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
1042+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
1043+  0000             #defcont				\#else
1044+  0000             #defcont					\#if ba__-$+12 < 127
1045+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
1046+  0000             #defcont					\#else
1047+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1048+  0000             #defcont					\#endif
1049+  0000             #defcont				\#endif
1050+  0000             
1051+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
1052+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
1053+  0000             #defcont				\#else
1054+  0000             #defcont					\#if ba__-$+13 < 127
1055+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
1056+  0000             #defcont					\#else
1057+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1058+  0000             #defcont					\#endif
1059+  0000             #defcont				\#endif
1060+  0000             
1061+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
1062+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
1063+  0000             #defcont				\#else
1064+  0000             #defcont					\#if ba__-$+14 < 127
1065+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
1066+  0000             #defcont					\#else
1067+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1068+  0000             #defcont					\#endif
1069+  0000             #defcont				\#endif
1070+  0000             
1071+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
1072+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
1073+  0000             #defcont				\#else
1074+  0000             #defcont					\#if ba__-$+15 < 127
1075+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
1076+  0000             #defcont					\#else
1077+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1078+  0000             #defcont					\#endif
1079+  0000             #defcont				\#endif
1080+  0000             
1081+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
1082+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
1083+  0000             #defcont				\#else
1084+  0000             #defcont					\#if ba__-$+16 < 127
1085+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
1086+  0000             #defcont					\#else
1087+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1088+  0000             #defcont					\#endif
1089+  0000             #defcont				\#endif
1090+  0000             
1091+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
1092+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
1093+  0000             #defcont				\#else
1094+  0000             #defcont					\#if ba__-$+17 < 127
1095+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
1096+  0000             #defcont					\#else
1097+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1098+  0000             #defcont					\#endif
1099+  0000             #defcont				\#endif
1100+  0000             
1101+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
1102+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
1103+  0000             #defcont				\#else
1104+  0000             #defcont					\#if ba__-$+18 < 127
1105+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
1106+  0000             #defcont					\#else
1107+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1108+  0000             #defcont					\#endif
1109+  0000             #defcont				\#endif
1110+  0000             
1111+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
1112+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
1113+  0000             #defcont				\#else
1114+  0000             #defcont					\#if ba__-$+19 < 127
1115+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
1116+  0000             #defcont					\#else
1117+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1118+  0000             #defcont					\#endif
1119+  0000             #defcont				\#endif
1120+  0000             
1121+  0000             #define     BNEA_(p1__,ba__)     \.db $59,p1__ \.dw ba__
1122+  0000             #define     BNEA_(p1__,p2__,ba__)     \.db $59,p1__,p2__ \.dw ba__
1123+  0000             #define     BNEA_(p1__,p2__,p3__,ba__)     \.db $59,p1__,p2__,p3__ \.dw ba__
1124+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,ba__)     \.db $59,p1__,p2__,p3__,p4__ \.dw ba__
1125+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__ \.dw ba__
1126+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
1127+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
1128+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
1129+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
1130+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
1131+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
1132+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
1133+  0000             
1134+  0000             ;**********************************************************
1135+  0000             ;* Macros 5C-5F
1136+  0000             ;**********************************************************
1137+  0000             #define	JMPD_(a)		.db $5c \.dw a
1138+  0000             
1139+  0000             #define	SWSET_(a)		.db $5d,a
1140+  0000             #define	SWSET_(a,b)		.db $5d,a,b
1141+  0000             #define	SWSET_(a,b,c)	.db $5d,a,b,c
1142+  0000             #define	SWSET_(a,b,c,d)	.db $5d,a,b,c,d
1143+  0000             
1144+  0000             #define	SWCLR_(a)		.db $5e,a
1145+  0000             #define	SWCLR_(a,b)		.db $5e,a,b
1146+  0000             #define	SWCLR_(a,b,c)	.db $5e,a,b,c
1147+  0000             #define	SWCLR_(a,b,c,d)	.db $5e,a,b,c,d
1148+  0000             
1149+  0000             #define	JMP_(a)		.db $5f \.dw a
1150+  0000             
1151+  0000             ;**********************************************************
1152+  0000             ;* Macro 6X:
1153+  0000             ;**********************************************************
1154+  0000             #define	SLEEPI_(a)		.db ($60+(a&$0f))
1155+  0000             
1156+  0000             ;**********************************************************
1157+  0000             ;* Macro 7X: 
1158+  0000             ;**********************************************************
1159+  0000             ;See SLEEP macro previous (53)...
1160+  0000             
1161+  0000             ;**********************************************************
1162+  0000             ;* Macro 8X:
1163+  0000             ;**********************************************************
1164+  0000             #define 	JMPR_(a)		\#if a-$ > $7ff
1165+  0000             #defcont				\	.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1166+  0000             #defcont				\#else
1167+  0000             #defcont				\	#if $-a > $7ff
1168+  0000             #defcont				\		.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1169+  0000             #defcont				\	#endif
1170+  0000             #defcont				\#endif
1171+  0000             #defcont				\	.db ($80+(((a-($+2))>>8)&$0f)) \.db ((a-($+1))&$ff)
1172+  0000             
1173+  0000             ;**********************************************************
1174+  0000             ;* Macro 9X:
1175+  0000             ;**********************************************************
1176+  0000             #define 	JSRR_(a)		\#if a-$ > $7ff
1177+  0000             #defcont				\	.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1178+  0000             #defcont				\#else
1179+  0000             #defcont				\	#if $-a > $7ff
1180+  0000             #defcont				\		.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1181+  0000             #defcont				\	#endif
1182+  0000             #defcont				\#endif
1183+  0000             #defcont				\	.db ($90+(((a-($+2))>>8)&$0f)) \.db ((a-($+1))&$ff)
1184+  0000             ;**********************************************************
1185+  0000             ;* Macro AX:
1186+  0000             ;**********************************************************
1187+  0000             #define 	JSRDR_(a)		\#if a-$ > $7ff
1188+  0000             #defcont				\	.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1189+  0000             #defcont				\#else
1190+  0000             #defcont				\	#if $-a > $7ff
1191+  0000             #defcont				\		.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1192+  0000             #defcont				\	#endif
1193+  0000             #defcont				\#endif
1194+  0000             #defcont				\	.db ($a0+(((a-($+2))>>8)&$0f)) \.db ((a-($+1))&$ff)
1195+  0000             
1196+  0000             
1197+  0000             ;**********************************************************
1198+  0000             ;* Macro BX: Add NextByte to RAM LSD(command) 
1199+  0000             ;**********************************************************
1200+  0000             #define 	ADDRAM_(ramloc,data)	.db ($b0+ramloc),data
1201+  0000             
1202+  0000             ;**********************************************************
1203+  0000             ;* Macro CX: Set NextByte to RAM LSD(command) 
1204+  0000             ;**********************************************************
1205+  0000             #define 	SETRAM_(ramloc,data)	.db ($c0+ramloc),data
1206+  0000             
1207+  0000             ;**********************************************************
1208+  0000             ;* Macro DX: Lamp Range Effects for extended lamp matrix
1209+  0000             ;**********************************************************
1210+  0000             #define	BITON3_(a)		\.db $d0,a
1211+  0000             #define	BITON3_(a,b)	\.db $d0,(a+$80),b
1212+  0000             #define	BITON3_(a,b,c)	\.db $d0,(a+$80),(b+$80),c
1213+  0000             #define	BITON3_(a,b,c,d)	\.db $d0,(a+$80),(b+$80),(c+$80),d
1214+  0000             
1215+  0000             #define	BITOFF3_(a)		\.db $d1,a
1216+  0000             #define	BITOFF3_(a,b)	\.db $d1,(a+$80),b
1217+  0000             #define	BITOFF3_(a,b,c)	\.db $d1,(a+$80),(b+$80),c
1218+  0000             #define	BITOFF3_(a,b,c,d)	\.db $d1,(a+$80),(b+$80),(c+$80),d
1219+  0000             
1220+  0000             #define	BITINV3_(a)		\.db $d2,a
1221+  0000             #define	BITINV3_(a,b)	\.db $d2,(a+$80),b
1222+  0000             #define	BITINV3_(a,b,c)	\.db $d2,(a+$80),(b+$80),c
1223+  0000             #define	BITINV3_(a,b,c,d)	\.db $d2,(a+$80),(b+$80),(c+$80),d
1224+  0000             
1225+  0000             #define	BITON3a_(a)		\.db $d4,a
1226+  0000             #define	BITON3a_(a,b)	\.db $d4,(a+$80),b
1227+  0000             #define	BITON3a_(a,b,c)	\.db $d4,(a+$80),(b+$80),c
1228+  0000             #define	BITON3a_(a,b,c,d)	\.db $d4,(a+$80),(b+$80),(c+$80),d
1229+  0000             
1230+  0000             #define	BITOFF3a_(a)	\.db $d5,a
1231+  0000             #define	BITOFF3a_(a,b)	\.db $d5,(a+$80),b
1232+  0000             #define	BITOFF3a_(a,b,c)	\.db $d5,(a+$80),(b+$80),c
1233+  0000             #define	BITOFF3a_(a,b,c,d) \.db $d5,(a+$80),(b+$80),(c+$80),d
1234+  0000             
1235+  0000             #define	BITINV3a_(a)	\.db $d6,a
1236+  0000             #define	BITINV3a_(a,b)	\.db $d6,(a+$80),b
1237+  0000             #define	BITINV3a_(a,b,c)	\.db $d6,(a+$80),(b+$80),c
1238+  0000             #define	BITINV3a_(a,b,c,d) \.db $d6,(a+$80),(b+$80),(c+$80),d
1239+  0000             
1240+  0000             #define	BITON4_(a)		\.db $d8,a
1241+  0000             #define	BITON4_(a,b)	\.db $d8,(a+$80),b
1242+  0000             #define	BITON4_(a,b,c)	\.db $d8,(a+$80),(b+$80),c
1243+  0000             #define	BITON4_(a,b,c,d)	\.db $d8,(a+$80),(b+$80),(c+$80),d
1244+  0000             
1245+  0000             #define	BITOFF4_(a)		\.db $d9,a
1246+  0000             #define	BITOFF4_(a,b)	\.db $d9,(a+$80),b
1247+  0000             #define	BITOFF4_(a,b,c)	\.db $d9,(a+$80),(b+$80),c
1248+  0000             #define	BITOFF4_(a,b,c,d)	\.db $d9,(a+$80),(b+$80),(c+$80),d
1249+  0000             
1250+  0000             #define	BITINV4_(a)		\.db $da,a
1251+  0000             #define	BITINV4_(a,b)	\.db $da,(a+$80),b
1252+  0000             #define	BITINV4_(a,b,c)	\.db $da,(a+$80),(b+$80),c
1253+  0000             #define	BITINV4_(a,b,c,d)	\.db $da,(a+$80),(b+$80),(c+$80),d
1254+  0000             
1255+  0000             #define	BITON4a_(a)		\.db $dc,a
1256+  0000             #define	BITON4a_(a,b)	\.db $dc,(a+$80),b
1257+  0000             #define	BITON4a_(a,b,c)	\.db $dc,(a+$80),(b+$80),c
1258+  0000             #define	BITON4a_(a,b,c,d)	\.db $dc,(a+$80),(b+$80),(c+$80),d
1259+  0000             
1260+  0000             #define	BITOFF4a_(a)	\.db $dd,a
1261+  0000             #define	BITOFF4a_(a,b)	\.db $dd,(a+$80),b
1262+  0000             #define	BITOFF4a_(a,b,c)	\.db $dd,(a+$80),(b+$80),c
1263+  0000             #define	BITOFF4a_(a,b,c,d) \.db $dd,(a+$80),(b+$80),(c+$80),d
1264+  0000             
1265+  0000             #define	BITINV4a_(a)	\.db $de,a
1266+  0000             #define	BITINV4a_(a,b)	\.db $de,(a+$80),b
1267+  0000             #define	BITINV4a_(a,b,c)	\.db $de,(a+$80),(b+$80),c
1268+  0000             #define	BITINV4a_(a,b,c,d) \.db $de,(a+$80),(b+$80),(c+$80),d
1269+  0000             
1270+  0000             ;**********************************************************
1271+  0000             ;* Macro EX,FX: Play Index Sound Once 
1272+  0000             ;**********************************************************
1273+  0000             #define	SND_(a)			.db $e0+a
0010   0000             #include  "sb_hard.asm"		;Hardware Definitions                
0001+  0000             ;***********************************************************
0002+  0000             ;* Hyperball/Spellbinder Hardware Definitions                          
0003+  0000             ;* 1999-2001 Jess M. Askey (jess@askey.org)                
0004+  0000             ;***********************************************************
0005+  0000             ;* This file defines the RAM structure and the actual      
0006+  0000             ;* hardware contained on Hyperball.                        
0007+  0000             ;***********************************************************
0008+  0000             	.org $0000
0009+  0000             
0010+  0000             ram_base	
0011+  0000             vm_reg_a			.block	1		;Virtual Machine Register A
0012+  0001             vm_reg_b			.block	1		;Virtual Machine Register B
0013+  0002             game_ram_2			.block	1
0014+  0003             game_ram_3			.block	1
0015+  0004             game_ram_4			.block	1
0016+  0005             game_ram_5			.block	1
0017+  0006             game_ram_6			.block	1
0018+  0007             game_ram_7			.block	1
0019+  0008             game_ram_8			.block	1
0020+  0009             game_ram_9			.block	1
0021+  000A             game_ram_a			.block	1
0022+  000B             game_ram_b			.block	1
0023+  000C             game_ram_c			.block	1
0024+  000D             reflx_tmr_btr		.block	1		;Reflex wave thread timer and Baiter data to
0025+  000E             reflx_cur_hits		.block	1		;Reflex wave current hit counter 
0026+  000F             reflx_cur_pts		.block	1		;Reflex wave current point value
0027+  0010             
0028+  0010             
0029+  0010             
0030+  0010             lampbuffer0			.block	8		;Lamp Buffer 0
0031+  0018             lampbuffer0x		.block	4		;Extended Lamp Buffer 0
0032+  001C             bitflags			.block	8		;Game Flags
0033+  0024             bitflagsx			.block	4		;Extended Game Flags
0034+  0028             lampbufferselect	.block	8		;Lamp Buffer Selection Bit
0035+  0030             lampbufferselectx	.block	4
0036+  0034             lampbuffer1			.block	8		;Lamp Buffer 1
0037+  003C             lampbuffer1x		.block	4		;Extended Lamp Buffer 1
0038+  0040             lampflashflag		.block	8		;Lamp Flashing Bits
0039+  0048             lampflashflagx		.block	4		
0040+  004C             
0041+  004C             score_p1_b0			.block	4
0042+  0050             score_p2_b0			.block	4
0043+  0054             score_p1_b1			.block	4
0044+  0058             score_p2_b1			.block	4
0045+  005C             p1_wizards			.block	1
0046+  005D             p2_wizards			.block	1
0047+  005E             ;p1_ec_b0			.block	1
0048+  005E             ;p1_ec_b1			.block	1
0049+  005E             ;p2_ec_b0			.block	1		
0050+  005E             ;p2_ec_b1			.block	1
0051+  005E             alpha_b0			.block	12
0052+  006A             alpha_b1			.block	12
0053+  0076             
0054+  0076             dmask_p1			.block	1
0055+  0077             dmask_p2			.block	1
0056+  0078             dmask_p3			.block	1
0057+  0079             dmask_p4			.block	1
0058+  007A             comma_flags			.block	1
0059+  007B             switch_debounced	.block	8
0060+  0083             switch_masked		.block	8
0061+  008B             switch_pending		.block	8
0062+  0093             switch_aux			.block	8
0063+  009B             switch_b4			.block	8
0064+  00A3             irq_counter			.block	1
0065+  00A4             lamp_index_word		.block	1		;Rotating bit for lamp columns
0066+  00A5             lamp_index_wordx	.block	1		;Rotating bit for extended lamp colulmns
0067+  00A6             cur_lampstrobe		.block	1		;
0068+  00A7             comma_data_temp		.block	1
0069+  00A8             
0070+  00A8             credp1p2_bufferselect	.block	1
0071+  00A9             alpha_bufferselect	.block	1
0072+  00AA             swap_player_displays	.block	1
0073+  00AB             alpha_digit_cur		.block	2
0074+  00AD             solenoid_address	.block	2
0075+  00AF             solenoid_bitpos		.block	1
0076+  00B0             solenoid_counter	.block	1
0077+  00B1             irqcount16			.block	1
0078+  00B2             switch_queue_pointer	.block	2		;switch_queue_pointer
0079+  00B4             solenoid_queue_pointer	.block	2		;solenoid_queue_pointer
0080+  00B6             temp1				.block	2
0081+  00B8             temp2				.block	2
0082+  00BA             temp3				.block	2		;$00BC
0083+  00BC             sys_temp1			.block	1
0084+  00BD             sys_temp2			.block	1
0085+  00BE             sys_temp3			.block	1
0086+  00BF             sys_temp4			.block	1
0087+  00C0             sys_temp5			.block	1
0088+  00C1             
0089+  00C1             sw_encoded			.block	1
0090+  00C2             sys_temp_w2			.block	2
0091+  00C4             sys_temp_w3			.block	2
0092+  00C6             thread_priority		.block	1
0093+  00C7             unused_ram1			.block	1		;$00
0094+  00C8             irqcount			.block	1
0095+  00C9             vm_base			    .block	2
0096+  00CB             vm_nextslot			.block	2
0097+  00CD             current_thread		.block	2
0098+  00CF             vm_tail_thread		.block	2
0099+  00D1             lamp_flash_rate		.block	1		;lamp_flash_rate
0100+  00D2             lamp_flash_count    .block	1
0101+  00D3             thread_timer_byte	.block	1
0102+  00D4             soundcount			.block	1
0103+  00D5             lastsound			.block	1
0104+  00D6             cur_sndflags		.block	1		;$00
0105+  00D7             soundptr			.block	2
0106+  00D9             soundirqcount		.block	2
0107+  00DB             soundindex_com		.block	2
0108+  00DD             sys_soundflags		.block	1		;$00DF
0109+  00DE             soundindex			.block	1		;$00E0
0110+  00DF             csound_timer		.block	2		;$00E1
0111+  00E1             next_sndflags		.block	1		;$00E3
0112+  00E2             next_sndcnt		    .block	1		;$00E4
0113+  00E3             next_sndcmd		    .block	1		;$00E5
0114+  00E4             
0115+  00E4             flag_tilt			.block	1
0116+  00E5             flag_gameover		.block	1
0117+  00E6             random_bool			.block	1
0118+  00E7             flags_selftest		.block	1
0119+  00E8             num_players			.block	1
0120+  00E9             player_up			.block	1
0121+  00EA             pscore_buf			.block	2
0122+  00EC             					.block	1		;unknown?
0123+  00ED             vm_pc				.block	2		
0124+  00EF             num_tilt			.block	1
0125+  00F0             minutetimer			.block	2
0126+  00F2             flag_timer_bip		.block	1		;$00F4
0127+  00F3             randomseed			.block	1
0128+  00F4             x_temp_1			.block	2		;$00
0129+  00F6             eb_x_temp			.block	2		;$00
0130+  00F8             credit_x_temp		.block	2		;$00
0131+  00FA             x_temp_2			.block	2
0132+  00FC             character_ptr		.block	2
0133+  00FE             
0134+  00FE             ;***************************************************************
0135+  00FE             ;* CMOS RAM - The cmos RAM data bus is only 4-bits wide, so
0136+  00FE             ;*            each byte of data takes two consecutive address
0137+  00FE             ;*            locations. The lower address is the most 
0138+  00FE             ;*            significant nibble in the byte.
0139+  00FE             ;***************************************************************
0140+  0100             	.org $0100
0141+  0100             
0142+  0100             cmos_base
0143+  0100             cmos_csum			.block	2
0144+  0102             
0145+  0102             ;* First section is game audits
0146+  0102             aud_base
0147+  0102             aud_leftcoins		.block	4	;0102-0105	"Coins, Left Chute"
0148+  0106             aud_centercoins		.block	4	;0106-0109	"Coins, Center Chute"
0149+  010A             aud_rightcoins		.block	4	;010A-010D	"Coins, Right Chute"
0150+  010E             aud_paidcredits		.block	4	;010E-0111	Total Paid Credits
0151+  0112             aud_specialcredits	.block	4	;0112-0115	Special Credits
0152+  0116             aud_replaycredits	.block	4	;0116-0119	Replay Score Credits
0153+  011A             aud_matchcredits	.block	4	;011A-011D	Match Credits
0154+  011E             aud_totalcredits	.block	4	;011E-0121	Total Credits
0155+  0122             aud_extraballs		.block	4	;0122-0125	Total Extra Balls *NOT USED IN HYPERBALL*
0156+  0126             aud_avgballtime		.block	4	;0126-0129	Ball Time in Minutes
0157+  012A             aud_totalballs		.block	4	;012A-012D	Total Balls Played
0158+  012E             
0159+  012E             aud_game1			.block	4	;012E-0131	Game Specific Audit#1
0160+  0132             aud_game2			.block	4	;0132-0135	Game Specific Audit#2
0161+  0136             aud_game3			.block	4	;0136-0139	Game Specific Audit#3
0162+  013A             aud_game4			.block	4	;013A-013D	Game Specific Audit#4
0163+  013E             aud_game5			.block	4	;013E-0141	Game Specific Audit#5
0164+  0142             aud_game6			.block	4	;0142-0145	Game Specific Audit#6
0165+  0146             aud_game7			.block	4	;0146-0149	Game Specific Audit#7
0166+  014A             
0167+  014A             aud_autocycles		.block	4	;014A-014D	Number of Auto Cycles Completed
0168+  014E             aud_hstdcredits		.block	2	;014E-014F	2 -HSTD Credits Awarded
0169+  0150             aud_replay1times	.block	4	;0150-0153	2 -Times Exceeded
0170+  0154             aud_replay2times	.block	4	;0154-0157	2 -Times Exceeded
0171+  0158             aud_replay3times	.block	4	;0158-015B	2 -Times Exceeded
0172+  015C             aud_replay4times	.block	4	;015C-015F	2 -Times Exceeded
0173+  0160                                 .block	2	;0160-0161	Unknown
0174+  0162             cmos_bonusunits		.block	2	;0162-1063	Hold Over Bonus Coin Units
0175+  0164             cmos_coinunits		.block	2	;0164-0165	Hold Over Total Coin Units
0176+  0166             aud_reset_end					;Defines upper bound of RAM to clear on reset	
0177+  0166             				
0178+  0166             aud_currenthstd		.block	8	;0166-016D	Current HSTD
0179+  016E             aud_currentcredits	.block	2	;016D-016F  Current Credits			
0180+  0170             aud_command			.block	2	;0170-0171	Command Entry
0181+  0172             
0182+  0172                                 .block	11
0183+  017D             
0184+  017D             
0185+  017D             
0186+  017D             
0187+  017D             ;* Then adjustments
0188+  017D             adj_base
0189+  017D             adj_cmoscsum			.block	4	;017D-0180	"Game #, ROM Revision"                                     
0190+  0181             adj_backuphstd			.block	2     ;0181-0182	Backup HSTD                                                
0191+  0183             adj_replay1				.block	2     ;0183-0184	Replay 1 Score                                             
0192+  0185             adj_replay2				.block	2     ;0185-0186	Replay 2 Score                                             
0193+  0187             adj_replay3				.block	2     ;0187-0188	Replay 3 Score                                             
0194+  0189             adj_replay4				.block	2     ;0189-018A	Replay 4 Score                                             
0195+  018B             adj_matchenable			.block	2     ;018B-018C	Match: 00=On 01=OFF                                        
0196+  018D             adj_specialaward		.block	2     ;018D-018E	Special:00=Awards Credit 01=Extra Ball 02=Awards Points    
0197+  018F             adj_replayaward			.block	2     ;018F-0190	Replay Scores: 00=Awards Credit 01=Extra Ball              
0198+  0191             adj_maxplumbbobtilts	.block	2     ;0191-0192	Max Plumb Bob Tilts                            
0199+  0193             adj_wizardspergame		.block	2     ;0193-0194	Number of Wizards per game                                 
0200+  0195             
0201+  0195             adj_gamebase  			;start of game specific adjustments here
0202+  0195             adj_energyextended		.block	2     ;0195-0196	Number of Energy Bases to start in extended play                                 
0203+  0197             adj_reflex_diff			.block	2     ;0197-0198	Game Specific Adjustment#2 (adj_gameadjust2)                            
0204+  0199             adj_ec_award_level		.block	2     ;0199-019A	Game Specific Adjustment#3 (adj_gameadjust3)                             
0205+  019B             adj_bolt_speed			.block	2     ;019B-019C	Game Specific Adjustment#4 (adj_gameadjust4)                           
0206+  019D             adj_bolt_feed			.block	2     ;019D-019E	Game Specific Adjustment#5 (adj_gameadjust5)                             
0207+  019F             adj_baiter_speed		.block	2     ;019F-01A0	Game Specific Adjustment#6 (adj_gameadjust6)                                 
0208+  01A1             adj_gameadjust7			.block	2     ;01A1-01A2	Game Specific Adjustment#7                                 
0209+  01A3             adj_gameadjust8			.block	2     ;01A3-01A4	Game Specific Adjustment#8                                 
0210+  01A5             adj_gameadjust9			.block	2     ;01A5-01A6	Game Specific Adjustment#9   
0211+  01A7             
0212+  01A7                                           
0213+  01A7             adj_hstdcredits			.block	2     ;01A7-01A8	High Score Credit Award                                    
0214+  01A9             adj_max_extraballs		.block	2     ;01A9-019A	Maximum Extra Balls 00=No Extra Balls                      
0215+  01AB             adj_max_credits			.block	2     ;01AB-01AC	Maximum Credits                                            
0216+  01AD             adj_pricecontrol		.block	2     ;01AD-01AE	Standard/Custom Pricing Control   
0217+  01AF             
0218+  01AF             cmos_pricingbase                         
0219+  01AF             cmos_leftcoinmult		.block	2     ;01AF-01B0	Left Coin Slot Multiplier                                  
0220+  01B1             cmos_centercoinmult		.block	2     ;01B1-01B2	Center Coin Slot Multiplier    
0221+  01B3             cmos_rightcoinmult		.block	2     ;01B3-01B4	Right Coin Slot Multiplier     
0222+  01B5             cmos_coinsforcredit		.block	2     ;01B5-01B6	Coin Units Required for Credit 
0223+  01B7             cmos_bonuscoins			.block	2     ;01B7-01B8	Coin Units Bonus Point         
0224+  01B9             cmos_minimumcoins		.block	2     ;01B9-01BA	Minimum Coin Units             
0225+  01BB             
0226+  01BB             
0227+  01BB             
0228+  01BB             ;***************************************************************
0229+  01BB             ;* Extended RAM area. This RAM space was added in Level 7 games
0230+  01BB             ;* for extended flexibility. The HYPERBALL space is a little
0231+  01BB             ;* different than regular Level 7 games in that the solenoid
0232+  01BB             ;* space is only 8 bytes (instead of 16)
0233+  01BB             ;***************************************************************
0234+  1100             	.org $1100
0235+  1100             
0236+  1100             switch_queue		    .block	$18
0237+  1118             switch_queue_end
0238+  1118             
0239+  1118             sol_queue			    .block	$10
0240+  1128             sol_queue_end
0241+  1128             
0242+  1128             score_queue			    .block	8
0243+  1130             score_queue_end
0244+  1130             
0245+  1130             	.org $1130
0246+  1130             exe_buffer			    .block	$10		;Temp code buffer for exe macro
0247+  1140             
0248+  1140             ;define the size of each player data block first
0249+  1140             gamedata_size		.equ		$24
0250+  1140             ;then apply it to all players
0251+  1140             p1_gamedata			    .block	gamedata_size
0252+  1164             p2_gamedata			    .block	gamedata_size
0253+  1188             
0254+  1188             game_var_0			    .block 	2
0255+  118A             game_var_1			    .block 	2
0256+  118C             game_var_2			    .block 	2
0257+  118E             game_var_3			    .block 	2
0258+  1190             game_var_4			    .block 	2
0259+  1192             game_var_5			    .block 	2
0260+  1194             game_var_6			    .block 	2
0261+  1196             cur_spell_ltr		    .block 	2		
0262+  1198             cur_spell_pos		    .block	1
0263+  1199             cur_spell_word		    .block	1
0264+  119A             				
0265+  119A             current_credits		    .block	2
0266+  119C             
0267+  119C             threadpool_base		    .block	1
0268+  119D             
0269+  119D              
0270+  1396              	.org $1396
0271+  1396             hy_unknown_1		    .block	2
0272+  1398             hy_unknown_2		    .block	2
0273+  139A             ;p2_wizards			    .block 	1
0274+  139A             ;p1_wizards			    .block	1
0275+  139A             last_sw_lamp		    .block	1
0276+  139B             hy_unknown_4		    .block	1
0277+  139C             spell_award			    .block	1	;00=not active, 01=ZB , 10=EU ,11=ZB 
0278+  139D             sparkle_rate		    .block	1
0279+  139E             hy_unknown_7		    .block	7
0280+  13A5             hy_unknown_8		    .block	2	;13A7
0281+  13A7             hy_unknown_9		    .block	1     ;13A9
0282+  13A8             hy_unknown_a		    .block	1	;13AA
0283+  13A9             hy_unknown_b		    .block	2	;13AB
0284+  13AB             dynamic_disp_buf		.block	12	;13AD
0285+  13B7             
0286+  13B7             
0287+  13B7             
0288+  13B7             
0289+  13B7             	
0290+  13B7             
0291+  13B7             ;***************************************************************
0292+  13B7             ;* PIA Input/Output hardware
0293+  13B7             ;***************************************************************
0294+  13B7             ;* Some equates for indexing
0295+  13B7             pia_pir			        .equ		0
0296+  13B7             pia_control			    .equ		1
0297+  13B7             pia_pir_a			    .equ		0
0298+  13B7             pia_control_a		    .equ		1
0299+  13B7             pia_pir_b			    .equ		2
0300+  13B7             pia_control_b		    .equ		3
0301+  13B7             
0302+  13B7             pia_sound_data		    .equ		$2100
0303+  13B7             pia_sound_ctrl		    .equ		$2101
0304+  13B7             pia_comma_data		    .equ		$2102
0305+  13B7             pia_comma_ctrl		    .equ		$2103
0306+  13B7             
0307+  13B7             pia_sol_low_data		.equ		$2200
0308+  13B7             pia_sol_low_ctrl		.equ		$2201
0309+  13B7             pia_sol_high_data		.equ		$2202
0310+  13B7             pia_sol_high_ctrl		.equ		$2203
0311+  13B7             
0312+  13B7             pia_lamp_row_data		.equ		$2400
0313+  13B7             pia_lamp_row_ctrl		.equ		$2401
0314+  13B7             pia_lamp_col_data		.equ		$2402
0315+  13B7             pia_lamp_col_ctrl		.equ		$2403
0316+  13B7             
0317+  13B7             pia_disp_digit_data	    .equ		$2800
0318+  13B7             pia_disp_digit_ctrl	    .equ		$2801
0319+  13B7             pia_disp_seg_data		.equ		$2802
0320+  13B7             pia_disp_seg_ctrl		.equ		$2803
0321+  13B7             
0322+  13B7             pia_switch_return_data	.equ		$3000
0323+  13B7             pia_switch_return_ctrl	.equ		$3001
0324+  13B7             pia_switch_strobe_data	.equ		$3002
0325+  13B7             pia_switch_strobe_ctrl	.equ		$3003
0326+  13B7             
0327+  13B7             ;*******************************************
0328+  13B7             ;* Special PIA for Hyperball Driver Boards *
0329+  13B7             ;* Controls the Alpha-Numeric Display      *
0330+  13B7             ;*******************************************
0331+  13B7             pia_alphanum_segl_data	.equ		$4000
0332+  13B7             pia_alphanum_segl_ctrl	.equ		$4001
0333+  13B7             pia_alphanum_segh_data	.equ		$4002
0334+  13B7             pia_alphanum_segh_ctrl	.equ		$4003
0335+  13B7             
0336+  13B7             
0337+  13B7             ;*******************************************
0338+  13B7             ;* Solenoid Data                           *
0339+  13B7             ;*******************************************
0340+  13B7             BB_LEFT_FLASH		.equ		0
0341+  13B7             BB_RIGHT_FLASH		.equ		1
0342+  13B7             PF_TOP_FLASH		.equ		2
0343+  13B7             PF_BOT_FLASH		.equ		3
0344+  13B7             PF_CENTER_FLASH		.equ		4
0345+  13B7             COIN_LOCKOUT		.equ		5
0346+  13B7             GI_RELAY_PF			.equ		6
0347+  13B7             GI_RELAY_BB			.equ		7
0348+  13B7             BALL_SHOOTER		.equ		8
0349+  13B7             BALL_LIFT			.equ		9
0350+  13B7             
0351+  13B7             
0352+  13B7             BB_LEFT_FLASH_OFF	.equ		SOLENOID_OFF+BB_LEFT_FLASH
0353+  13B7             BB_RIGHT_FLASH_OFF	.equ		SOLENOID_OFF+BB_RIGHT_FLASH
0354+  13B7             PF_TOP_FLASH_OFF	.equ		SOLENOID_OFF+PF_TOP_FLASH
0355+  13B7             PF_BOT_FLASH_OFF	.equ		SOLENOID_OFF+PF_BOT_FLASH
0356+  13B7             COIN_LOCK_OFF		.equ		SOLENOID_OFF+PF_CENTER_FLASH
0357+  13B7             PF_CENTER_FLASH_OFF	.equ		SOLENOID_OFF+COIN_LOCKOUT
0358+  13B7             GI_RELAY_PF_OFF		.equ		SOLENOID_OFF+GI_RELAY_PF
0359+  13B7             GI_RELAY_BB_OFF		.equ		SOLENOID_OFF+GI_RELAY_BB
0360+  13B7             BALL_SHOOT_OFF		.equ		SOLENOID_OFF+BALL_SHOOTER
0361+  13B7             BALL_LIFT_OFF		.equ		SOLENOID_OFF+BALL_LIFT
0362+  13B7             
0363+  13B7             BB_LEFT_FLASH_ON	.equ		SOLENOID_ON_LATCH+BB_LEFT_FLASH
0364+  13B7             BB_RIGHT_FLASH_ON	.equ		SOLENOID_ON_LATCH+BB_RIGHT_FLASH
0365+  13B7             PF_TOP_FLASH_ON		.equ		SOLENOID_ON_LATCH+PF_TOP_FLASH
0366+  13B7             PF_BOT_FLASH_ON		.equ		SOLENOID_ON_LATCH+PF_BOT_FLASH
0367+  13B7             COIN_LOCK_ON		.equ		SOLENOID_ON_LATCH+PF_CENTER_FLASH
0368+  13B7             PF_CENTER_FLASH_ON	.equ		SOLENOID_ON_LATCH+COIN_LOCKOUT
0369+  13B7             GI_RELAY_PF_ON		.equ		SOLENOID_ON_LATCH+GI_RELAY_PF
0370+  13B7             GI_RELAY_BB_ON		.equ		SOLENOID_ON_LATCH+GI_RELAY_BB
0371+  13B7             BALL_SHOOT_ON		.equ		SOLENOID_ON_LATCH+BALL_SHOOTER
0372+  13B7             BALL_LIFT_ON		.equ		SOLENOID_ON_LATCH+BALL_LIFT
0373+  13B7             
0374+  13B7             BB_LEFT_FLASH_ON4	.equ		SOLENOID_ON_4_CYCLES+BB_LEFT_FLASH
0375+  13B7             BB_RIGHT_FLASH_ON4	.equ		SOLENOID_ON_4_CYCLES+BB_RIGHT_FLASH
0376+  13B7             PF_TOP_FLASH_ON4	.equ		SOLENOID_ON_4_CYCLES+PF_TOP_FLASH
0377+  13B7             PF_BOT_FLASH_ON4	.equ		SOLENOID_ON_4_CYCLES+PF_BOT_FLASH
0378+  13B7             COIN_LOCK_ON4		.equ		SOLENOID_ON_4_CYCLES+PF_CENTER_FLASH
0379+  13B7             PF_CENTER_FLASH_ON4	.equ		SOLENOID_ON_4_CYCLES+COIN_LOCKOUT
0380+  13B7             GI_RELAY_PF_ON4		.equ		SOLENOID_ON_4_CYCLES+GI_RELAY_PF
0381+  13B7             GI_RELAY_BB_ON4		.equ		SOLENOID_ON_4_CYCLES+GI_RELAY_BB
0382+  13B7             
0383+  13B7             
0384+  13B7             
0011   13B7             
0012   13B7             
0013   13B7             ;--------------------------------------------------------------------------
0014   13B7             ; Lamp Definitions for Spellbinder 
0015   13B7             ;--------------------------------------------------------------------------
0016   13B7             
0017   13B7             lamp_wiz1		.equ	$00
0018   13B7             lamp_wiz2		.equ	$01
0019   13B7             lamp_wiz3		.equ	$02
0020   13B7             lamp_wiz4		.equ	$03
0021   13B7             lamp_wiz5		.equ	$04
0022   13B7             lamp_2xl		.equ	$05
0023   13B7             lamp_3xl		.equ	$06
0024   13B7             lamp_5xl		.equ	$07
0025   13B7             lamp_troll1		.equ	$08
0026   13B7             lamp_09		    .equ	$09
0027   13B7             lamp_gargll		.equ	$0a
0028   13B7             lamp_warlokl	.equ	$0b
0029   13B7             lamp_bkl		.equ	$0c
0030   13B7             lamp_ekl		.equ	$0d
0031   13B7             lamp_gargtl		.equ	$0e
0032   13B7             lamp_demon1		.equ	$0f
0033   13B7             
0034   13B7             lamp_troll2		.equ	$10
0035   13B7             lamp_demon2		.equ	$11
0036   13B7             lamp_troll3		.equ	$12
0037   13B7             lamp_demon3		.equ	$13
0038   13B7             lamp_troll4		.equ	$14
0039   13B7             lamp_demon4		.equ	$15
0040   13B7             lamp_troll5		.equ	$16
0041   13B7             lamp_demon5		.equ	$17
0042   13B7             lamp_troll6		.equ	$18
0043   13B7             lamp_gargtr		.equ	$19
0044   13B7             lamp_warlokr	.equ	$1a
0045   13B7             lamp_bkr		.equ	$1b
0046   13B7             lamp_ekr		.equ	$1c
0047   13B7             lamp_gargbr		.equ	$1d
0048   13B7             lamp_1e		    .equ	$1e
0049   13B7             lamp_demon6		.equ	$1f
0050   13B7             
0051   13B7             lamp_gargtla	.equ	$20
0052   13B7             lamp_demon1a	.equ	$21
0053   13B7             lamp_troll2a	.equ	$22
0054   13B7             lamp_demon2a	.equ	$23
0055   13B7             lamp_troll3a	.equ	$24
0056   13B7             lamp_demon3a	.equ	$25
0057   13B7             lamp_troll4a	.equ	$26
0058   13B7             lamp_demon4a	.equ	$27
0059   13B7             lamp_troll5a	.equ	$28
0060   13B7             lamp_demon5a	.equ	$29
0061   13B7             lamp_troll6a	.equ	$2a
0062   13B7             lamp_gargtra	.equ	$2b
0063   13B7             lamp_gargtlb	.equ	$2c
0064   13B7             lamp_demon1b	.equ	$2d
0065   13B7             lamp_troll2b	.equ	$2e
0066   13B7             lamp_demon2b	.equ	$2f
0067   13B7             
0068   13B7             lamp_troll3b	.equ	$30
0069   13B7             lamp_demon3b	.equ	$31
0070   13B7             lamp_troll4b	.equ	$32
0071   13B7             lamp_demon4b	.equ	$33
0072   13B7             lamp_troll5b	.equ	$34
0073   13B7             lamp_demon5b	.equ	$35
0074   13B7             lamp_troll6b	.equ	$36
0075   13B7             lamp_gargtrb	.equ	$37
0076   13B7             lamp_500		.equ	$38
0077   13B7             lamp_1k		    .equ	$39
0078   13B7             lamp_2k		    .equ	$3a
0079   13B7             lamp_4k		    .equ	$3b
0080   13B7             lamp_8k		    .equ	$3c
0081   13B7             lamp_16k		.equ	$3d
0082   13B7             lamp_32k		.equ	$3e
0083   13B7             lamp_2xu		.equ	$3f
0084   13B7             
0085   13B7             lamp_3xu		.equ	$40
0086   13B7             lamp_5xu		.equ	$41
0087   13B7             lamp_extrawiz	.equ	$42
0088   13B7             lamp_red1		.equ	$43
0089   13B7             lamp_red2		.equ	$44
0090   13B7             lamp_red3		.equ	$45
0091   13B7             lamp_red4		.equ	$46
0092   13B7             lamp_red5		.equ	$47
0093   13B7             lamp_red6		.equ	$48
0094   13B7             lamp_red7		.equ	$49
0095   13B7             lamp_red8		.equ	$4a
0096   13B7             lamp_red9		.equ	$4b
0097   13B7             lamp_axe1		.equ	$4c
0098   13B7             lamp_axe2		.equ	$4d
0099   13B7             lamp_axe3		.equ	$4e
0100   13B7             lamp_axe4		.equ	$4f
0101   13B7             
0102   13B7             lamp_axe5		.equ	$50
0103   13B7             lamp_axe6		.equ	$51
0104   13B7             lamp_axe7		.equ	$52
0105   13B7             lamp_axe8		.equ	$53
0106   13B7             lamp_axe9		.equ	$54
0107   13B7             lamp_hand1		.equ	$55
0108   13B7             lamp_hand2		.equ	$56
0109   13B7             
0110   13B7             
0111   13B7             
0112   13B7             
0113   13B7             ;--------------------------------------------------------------------------
0114   13B7             ; Bitflag Definitions for Spellbinder 
0115   13B7             ;--------------------------------------------------------------------------
0116   13B7             
0117   13B7             bf_dispspkl	    .equ	$00	;Alpha Display Sparkle Flag, if TRUE, display will sparkle
0118   13B7             
0119   13B7             
0120   13B7             
0121   13B7             
0122   13B7             
0123   13B7             
0124   13B7             
0125   13B7             	.msfirst	
0126   D000              	.org $d000
0127   D000             
0128   D000             ;---------------------------------------------------------------------------
0129   D000             ;  Default game data and basic system tables start at $d000, these can not  
0130   D000             ;  ever be moved
0131   D000             ;---------------------------------------------------------------------------
0132   D000             
0133   D000 35 13       gr_gamenumber		.dw $3513
0134   D002 F1          gr_romrevision		.db $F1
0135   D003 B2 A5       gr_cmoscsum			.db $B2,$A5
0136   D005 12          gr_backuphstd		.db $12
0137   D006 00          gr_replay1			.db $00
0138   D007 00          gr_replay2			.db $00
0139   D008 00          gr_replay3			.db $00
0140   D009 00          gr_replay4			.db $00
0141   D00A 01          gr_matchenable		.db $01
0142   D00B 01          gr_specialaward		.db $01
0143   D00C 00          gr_replayaward		.db $00
0144   D00D 03          gr_maxplumbbobtilts	.db $03
0145   D00E 04          gr_numberofballs	.db $04	;number of wizards
0146   D00F 03          gr_gameadjust1		.db $03
0147   D010 05          gr_gameadjust2		.db $05
0148   D011 04          gr_gameadjust3		.db $04
0149   D012 12          gr_gameadjust4		.db $12
0150   D013 05          gr_gameadjust5		.db $05
0151   D014 05          gr_gameadjust6		.db $05
0152   D015 05          gr_gameadjust7		.db $05
0153   D016 00          gr_gameadjust8		.db $00
0154   D017 00          gr_gameadjust9		.db $00
0155   D018 00          gr_hstdcredits		.db $00
0156   D019 00          gr_max_extraballs	.db $00
0157   D01A 30          gr_max_credits		.db $30
0158   D01B             ;---------------
0159   D01B             ;Pricing Data  |
0160   D01B             ;---------------
0161   D01B             
0162   D01B 01          gr_pricingdata	.db $01	;Left Coin Mult
0163   D01C 04          				.db $04	;Center Coin Mult
0164   D01D 01          				.db $01	;Right Coin Mult
0165   D01E 01          				.db $01	;Coin Units Required
0166   D01F 00          				.db $00	;Bonus Coins
0167   D020 00          				.db $00	;Minimum Coin Units
0168   D021             
0169   D021 09          				.db $09	;Left Coin Mult
0170   D022 45          				.db $45	;Center Coin Mult
0171   D023 18          				.db $18	;Right Coin Mult
0172   D024 05          				.db $05	;Coin Units Required
0173   D025 45          				.db $45	;Bonus Coins
0174   D026 00          				.db $00	;Minimum Coin Units
0175   D027             
0176   D027 01          				.db $01	;Left Coin Mult
0177   D028 04          				.db $04	;Center Coin Mult
0178   D029 01          				.db $01	;Right Coin Mult
0179   D02A 02          				.db $02	;Coin Units Required
0180   D02B 04          				.db $04	;Bonus Coins
0181   D02C 00          				.db $00	;Minimum Coin Units
0182   D02D             
0183   D02D 01          				.db $01	;Left Coin Mult
0184   D02E 16          				.db $16	;Center Coin Mult
0185   D02F 06          				.db $06	;Right Coin Mult
0186   D030 02          				.db $02	;Coin Units Required
0187   D031 00          				.db $00	;Bonus Coins
0188   D032 00          				.db $00	;Minimum Coin Units
0189   D033             
0190   D033 03          				.db $03	;Left Coin Mult
0191   D034 15          				.db $15	;Center Coin Mult
0192   D035 03          				.db $03	;Right Coin Mult
0193   D036 04          				.db $04	;Coin Units Required
0194   D037 15          				.db $15	;Bonus Coins
0195   D038 00          				.db $00	;Minimum Coin Units
0196   D039             
0197   D039 01          				.db $01	;Left Coin Mult
0198   D03A 00          				.db $00	;Center Coin Mult
0199   D03B 04          				.db $04	;Right Coin Mult
0200   D03C 01          				.db $01	;Coin Units Required
0201   D03D 00          				.db $00	;Bonus Coins
0202   D03E 00          				.db $00	;Minimum Coin Units
0203   D03F             
0204   D03F 01          				.db $01	;Left Coin Mult
0205   D040 00          				.db $00	;Center Coin Mult
0206   D041 02          				.db $02	;Right Coin Mult
0207   D042 01          				.db $01	;Coin Units Required
0208   D043 00          				.db $00	;Bonus Coins
0209   D044 00          				.db $00	;Minimum Coin Units
0210   D045             
0211   D045 01          				.db $01	;Left Coin Mult
0212   D046 00          				.db $00	;Center Coin Mult
0213   D047 02          				.db $02	;Right Coin Mult
0214   D048 02          				.db $02	;Coin Units Required
0215   D049 00          				.db $00	;Bonus Coins
0216   D04A 00          				.db $00	;Minimum Coin Units
0217   D04B             
0218   D04B             ;--------------
0219   D04B             ;System Data  |
0220   D04B             ;--------------
0221   D04B             
0222   D04B 1C          gr_maxthreads		    .db $1C
0223   D04C 03          gr_extendedromtest	    .db $03
0224   D04D 22          gr_lastswitch		    .db (switchtable_end-switchtable)/3
0225   D04E 01          gr_numplayers		    .db $01
0226   D04F             
0227   D04F D6 D2       gr_lamptable_ptr	    .dw lamptable
0228   D051 D6 6C       gr_switchtable_ptr	    .dw switchtable
0229   D053 D6 FA       gr_soundtable_ptr	    .dw soundtable
0230   D055             
0231   D055 05          gr_lampflashrate	    .db $05
0232   D056             
0233   D056 0D          gr_specialawardsound	.db $0D	;Special Sound
0234   D057 03          gr_p1_startsound	    .db $03
0235   D058 03          gr_p2_startsound	    .db $03
0236   D059 1A          gr_unknownvar1		    .db $1A
0237   D05A 11          gr_hssound			    .db $11
0238   D05B 1A          gr_gameoversound	    .db $1A
0239   D05C 00          gr_creditsound		    .db $00
0240   D05D             
0241   D05D 5F          gr_gameover_lamp	    .db $5F
0242   D05E 5F          gr_tilt_lamp		    .db $5F
0243   D05F             
0244   D05F D3 0A       gr_gameoverthread_ptr	.dw gameover_entry
0245   D061 D7 6C       gr_character_defs_ptr	.dw character_defs
0246   D063 05          gr_coinlockout		    .db $05
0247   D064 D3 06       gr_highscore_ptr		.dw high_score
0248   D066             
0249   D066 00 02       gr_switchtypetable	    .db $00,$02
0250   D068 00 09                               .db $00,$09
0251   D06A 00 04                               .db $00,$04
0252   D06C 00 01                               .db $00,$01
0253   D06E 02 05                               .db $02,$05
0254   D070 08 05                               .db $08,$05
0255   D072 00 00                               .db $00,$00
0256   D074 00 00                               .db $00,$00
0257   D076             
0258   D076 0000000000  gr_playerstartdata	.db $00,$00,$00,$00,$00
0259   D07B 0000000000                      .db $00,$00,$00,$00,$00
0260   D080 0000000000                      .db $00,$00,$00,$00,$00
0261   D085 0000000000                      .db $00,$00,$00,$00,$00
0262   D08A 0000000000                      .db $00,$00,$00,$00,$00
0263   D08F 0000000000                      .db $00,$00,$00,$00,$00
0264   D094             
0265   D094 0000000000  gr_playerresetdata	.db $00,$00,$00,$00,$00
0266   D099 0000000000                      .db $00,$00,$00,$00,$00
0267   D09E FF03000000                      .db $FF,$03,$00,$00,$00
0268   D0A3 0000000000                      .db $00,$00,$00,$00,$00
0269   D0A8 0000000000                      .db $00,$00,$00,$00,$00
0270   D0AD 0000000000                      .db $00,$00,$00,$00,$00
0271   D0B2             
0272   D0B2             
0273   D0B2             
0274   D0B2 20 1E       gr_switch_event		bra	empty_event	;(Switch Event)
0275   D0B4 20 1C       gr_sound_event		bra	empty_event	;(Sound Event )
0276   D0B6 20 1A       gr_score_event		bra	empty_event	;(Score Event)
0277   D0B8 20 18       gr_eb_event			bra	empty_event	;(Extra Ball Event)
0278   D0BA 20 16       gr_special_event	bra	empty_event	;(Special Event)
0279   D0BC 20 14       gr_macro_event		bra	empty_event	;(Start Macro Event)
0280   D0BE 20 12       gr_ballstart_event	bra	empty_event	;(Ball Start Event)
0281   D0C0 20 10       gr_addplayer_event	bra	empty_event	;(Add Player Event)
0282   D0C2 20 0E       gr_gameover_event	bra	empty_event	;(Game Over Event)
0283   D0C4 20 0C       gr_hstdtoggle_event	bra	empty_event	;(HSTD Toggle Event)
0284   D0C6             
0285   D0C6 D1 56       gr_reset_ptr		.dw hook_reset		;Reset
0286   D0C8 D1 6C       gr_mainloop_ptr		.dw hook_mainloop		;Main Loop Begin
0287   D0CA D1 6E       gr_coin_ptr			.dw hook_coin		;Coin Accepted
0288   D0CC D1 6D       gr_gamestart_ptr	.dw hook_gamestart	;New Game Start
0289   D0CE D1 25       gr_playerinit_ptr	.dw hook_playerinit	;Init New Player
0290   D0D0 D0 DF       gr_outhole_ptr		.dw hook_outhole		;Outhole
0291   D0D2             
0292   D0D2             ;------------------------ end system data ---------------------------
0293   D0D2             
0294   D0D2 39          empty_event			rts
0295   D0D3             
0296   D0D3             ;******************************************
0297   D0D3             ;* Nothing special to do in Hyperball for
0298   D0D3             ;* the IRQ, just go to system
0299   D0D3             ;******************************************
0300   D0D3 7E E0 5A    gr_irq_entry	    jmp	sys_irq_entry
0301   D0D6             
0302   D0D6             ;******************************************
0303   D0D6             ;* SWI - This is a cheap way to start 
0304   D0D6             ;* macros in order to save some ROM space
0305   D0D6             ;******************************************
0306   D0D6 0E          gr_swi_entry	cli	
0307   D0D7 31                          ins	
0308   D0D8 31                          ins	
0309   D0D9 31                          ins	
0310   D0DA 31                          ins	
0311   D0DB 31                          ins	
0312   D0DC 7E E5 56                    jmp	macro_start
0313   D0DF             
0314   D0DF             
0315   D0DF             
0316   D0DF             ;*************************************************
0317   D0DF             ;* Hooks... end with RTS
0318   D0DF             ;*************************************************
0319   D0DF             
0320   D0DF             ;*****************************************************
0321   D0DF             ;* Outhole in Spellbinder is when the players 
0322   D0DF             ;* Wizard is killed
0323   D0DF             ;*****************************************************
0324   D0DF 86 78       hook_outhole	ldaa	#$78
0325   D0E1 8D 29                       bsr	killthreads_ff			;kill any game running threads
0326   D0E3 7C 00 E4                    inc	flag_tilt				;turn off the shooters 
0327   D0E6 8D 19                       bsr	get_pwizards
0328   D0E8                             ifeq
0328   D0E8             
0328   D0E8 26 FE       
0329   D0EA BD D1 11                        jsr	showplayer
0330   D0ED                                 SLEEP($60)
0330   D0ED BD DA A0    
0330   D0F0 60          
0331   D0F1 CE D7 FD                        ldx	#msg_gameover
0332   D0F4 BD D2 96                        jsr	copy_msg_full
0333   D0F7 86 09                           ldaa	#$09
0334   D0F9 BD DD 5F                        jsr	isnd_once
0335   D0FC                                 SLEEP($F0)
0335   D0FC BD DA A0    
0335   D0FF F0          
0336   D100                             endif
0336   D100             
0336   D100             
0336   D100             
0336   D100             
0336   D100             
0336   D100~                            endif
0336   D100~                            endif
0336   D100             
0336   D100~                            endif
0336   D100~                            endif
0336   D100             
0336   D0E9             
0336   D0E9 16          
0336   D0EA             
0336   D0EA             
0336   D0EA~                            endif
0336   D0EA~                            endif
0336   D0EA~                            endif
0336   D0EA             
0336   D100             
0336   D100~                            endif
0336   D100~                            endif
0336   D100             
0337   D100 39          goto_sme		rts
0338   D101             
0339   D101             get_pwizards	
0340   D101 96 E9                       ldaa	player_up
0341   D103                             ifne
0341   D103             
0341   D103 27 FE       
0342   D105 D6 5D                           ldab	p2_wizards
0343   D107                             else
0343   D107             
0343   D107             
0343   D107             
0343   D107             
0343   D104             
0343   D104             
0343   D104             
0343   D104~                            else
0343   D104~                            else
0343   D104~                            else
0343   D104~                            else
0343   D104             
0343   D104~                            else
0343   D104~                            else
0343   D104~                            else
0343   D104~                            else
0343   D104             
0343   D104             
0343   D104 04          
0343   D107             
0343   D107 20 FE       
0343   D109             
0343   D109             
0343   D109             
0343   D109~                            else
0343   D109~                            else
0343   D109~                            else
0343   D109~                            else
0343   D109~                            else
0343   D109             
0343   D109~                            else
0343   D109~                            else
0343   D109             
0343   D109~                            else
0343   D109~                            else
0343   D109             
0344   D109 D6 5C                           ldab	p1_wizards
0345   D10B                             endif
0345   D10B             
0345   D10B             
0345   D10B             
0345   D10B             
0345   D10B             
0345   D10B~                            endif
0345   D10B~                            endif
0345   D10B             
0345   D10B~                            endif
0345   D10B~                            endif
0345   D10B             
0345   D108             
0345   D108 02          
0345   D109             
0345   D109             
0345   D109~                            endif
0345   D109~                            endif
0345   D109~                            endif
0345   D109             
0345   D10B             
0345   D10B~                            endif
0345   D10B~                            endif
0345   D10B             
0346   D10B 39                          rts
0347   D10C             			
0348   D10C C6 FF       killthreads_ff	ldab	#$FF
0349   D10E 7E DB 7F                    jmp	kill_threads
0350   D111             
0351   D111 CE D8 0A    showplayer		ldx	#msg_player
0352   D114 BD D2 96                    jsr	copy_msg_full
0353   D117                             ;ldx	current_thread
0354   D117                             ;stab	$0D,X
0355   D117 96 E9                       ldaa	player_up
0356   D119 8B 1C                       adda	#$1C
0357   D11B DE B6                       ldx	temp1
0358   D11D A7 02                       staa	$02,X
0359   D11F                             ;jsr	copy_msg_full
0360   D11F BD D2 D7                    jsr	clr_alpha_set_b1
0361   D122 7E D1 B0                    jmp	ani_starslide
0362   D125             
0363   D125             ; Player Init:
0364   D125 7C 00 E4    hook_playerinit	inc	flag_tilt			;turn off the shooters 
0365   D128 BD D1 11                    jsr	showplayer
0366   D12B 3F                          swi
0367   D12C                             SOL_(GI_RELAY_PF_OFF)		;Sol#6:gi_relay_pf
0367   D12C 31 06       
0368   D12E E7                          SND_($07)				;Sound #07
0369   D12F                             EXE_
0369   D12F             
0369   D12F 44          
0370   D130 BD D1 01                        jsr	get_pwizards
0371   D133 5C                              incb
0372   D134 D7 02                           stab	game_ram_2
0373   D136                             EXEEND_
0373   D136             
0373   D136             
0373   D136             
0373   D136             
0373   D136~                            EXEEND_
0373   D136~                            EXEEND_
0373   D136             
0373   D12F             
0373   D12F 48          
0373   D130             
0373   D136             
0373   D136~                            EXEEND_
0373   D136~                            EXEEND_
0373   D136             
0374   D136                             ;A contains the current number of wizards for the user...
0375   D136                             RCLR0_(grp_wizard)
0375   D136             
0375   D136 19 01       
0376   D138                             BEGIN_
0376   D138             
0377   D138                                 RSET1R0_(grp_wizard)
0377   D138             
0377   D138 1A 01       
0378   D13A                                 SLEEP_(2)
0378   D13A             
0378   D13A 72          
0378   D13B~                                SLEEP_(2)
0378   D13B~                                SLEEP_(2)
0378   D13B             
0379   D13B B2 FF                           ADDRAM_($02,$ff)			;RAM$00+=$01
0380   D13D                             EQEND_($FC,$E2,$00)
0380   D13D             
0380   D13D 5BFCE200FE  
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142             
0380   D142             
0380   D142             
0380   D142             
0380   D142             
0380   D142             
0380   D142             
0380   D141             
0380   D141 F6          
0380   D142             
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142             
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142~                            EQEND_($FC,$E2,$00)
0380   D142             
0381   D142                             SLEEP_(10)
0381   D142             
0381   D142 7A          
0381   D143~                            SLEEP_(10)
0381   D143~                            SLEEP_(10)
0381   D143             
0382   D143                             SOL_(BALL_LIFT_ON)		; Sol#9:ball_lift
0382   D143 31 F9       
0383   D145                             SLEEP_(64)
0383   D145~                            SLEEP_(64)
0383   D145~                            SLEEP_(64)
0383   D145             
0383   D145 53 40       
0383   D147             
0384   D147                             REMTHREADS_($FF,$48)		;Remove Multiple Threads Based on Priority
0384   D147 55 FF 48    
0385   D14A                             CPUX_
0385   D14A 04          
0386   D14B BD D2 D7                    jsr	clr_alpha_set_b1
0387   D14E 4F                          clra	
0388   D14F 97 E4                       staa	flag_tilt			;turn ON the shooters 
0389   D151 CE D5 CC                    ldx	#start_play
0390   D154 20 2F       to_addthr_noa	bra	addthread_clra
0391   D156                             ;rts
0392   D156             
0393   D156 CE 01 2E    hook_reset		ldx	#aud_game1
0394   D159 DF B6                       stx	temp1
0395   D15B CE D8 43                    ldx	#msg_defhs
0396   D15E E6 00                       ldab	$00,X
0397   D160 C4 0F                       andb	#$0F
0398   D162 08                          inx	
0399   D163 7E E0 47                    jmp	copyblock2
0400   D166             
0401   D166 BD E0 00    sw_hstd_res		jsr	restore_hstd
0402   D169 7E DA E8    to_kill		    jmp	killthread
0403   D16C             
0404   D16C             
0405   D16C 39          hook_mainloop	rts
0406   D16D 39          hook_gamestart	rts
0407   D16E             
0408   D16E             ; Coin Routine, jumps to Credits display if game is not being played
0409   D16E 3F          hook_coin		swi
0410   D16F E6                          SND_($06)				;Sound #06
0411   D170                             BEQR_($FB,$FB,$F0,$D0,$30,$F3,$F1,$F3) ;BEQ_((!GAME) || (BIT2#30 || TILT)) to gj_1F
0411   D170~                            BEQR_($FB,$FB,$F0,$D0,$30,$F3,$F1,$F3) ;BEQ_((!GAME) || (BIT2#30 || TILT)) to gj_1F
0411   D170~                            BEQR_($FB,$FB,$F0,$D0,$30,$F3,$F1,$F3) ;BEQ_((!GAME) || (BIT2#30 || TILT)) to gj_1F
0411   D170             
0411   D170             
0411   D170 5AFBFBF0D030
0411   D176 F3F186
0411   D179~                            BEQR_($FB,$FB,$F0,$D0,$30,$F3,$F1,$F3) ;BEQ_((!GAME) || (BIT2#30 || TILT)) to gj_1F
0411   D179~                            BEQR_($FB,$FB,$F0,$D0,$30,$F3,$F1,$F3) ;BEQ_((!GAME) || (BIT2#30 || TILT)) to gj_1F
0411   D179             
0411   D179             
0412   D179                             REMTHREADS_($FF,$10)		;Remove Multiple Threads Based on Priority
0412   D179 55 FF 10    
0413   D17C                             CPUX_					;Resume CPU Execution
0413   D17C 04          
0414   D17D 86 10                       ldaa	#$10
0415   D17F CE D3 BA                    ldx	#show_cred
0416   D182 7E D1 86                    jmp	newthreadp
0417   D185             			
0418   D185 4F          addthread_clra	clra	
0419   D186 97 C6       newthreadp		staa	thread_priority
0420   D188 7E DA FC                    jmp	newthread_sp
0421   D18B             ;****************************************************
0422   D18B             ;* Game Start - sets appropriate startup, A will have
0423   D18B             ;* 01 for 1 player game, and 02 for 2 player game.
0424   D18B             ;****************************************************
0425   D18B 4F          sw_1p_start		clra	
0426   D18C 4C          sw_2p_start		inca		
0427   D18D 16                          tab
0428   D18E CE 01 AB                    ldx	#adj_max_credits		;free play?
0429   D191 8D 17                       bsr	jmp_cmosa
0430   D193                             ifne					;no, check for actual credits
0430   D193             
0430   D193 27 FE       
0431   D195 CE 01 6E                        ldx	#aud_currentcredits
0432   D198 8D 10                           bsr	jmp_cmosa
0433   D19A 11                              cba	
0434   D19B 25 CC                           bcs	to_kill		;not enough, kill
0435   D19D                             endif
0435   D19D             
0435   D19D             
0435   D19D             
0435   D19D             
0435   D19D             
0435   D19D~                            endif
0435   D19D~                            endif
0435   D19D             
0435   D19D~                            endif
0435   D19D~                            endif
0435   D19D             
0435   D194             
0435   D194 08          
0435   D195             
0435   D195             
0435   D195~                            endif
0435   D195~                            endif
0435   D195~                            endif
0435   D195             
0435   D19D             
0435   D19D~                            endif
0435   D19D~                            endif
0435   D19D             
0436   D19D                             begin
0436   D19D             
0437   D19D 86 08                           ldaa	#$08
0438   D19F CE EC B0                        ldx	#credit_button
0439   D1A2 BD D1 86                        jsr	newthreadp
0440   D1A5 5A                              decb	
0441   D1A6                             eqend
0441   D1A6             
0441   D1A6             
0441   D1A6~                            eqend
0441   D1A6~                            eqend
0441   D1A6~                            eqend
0441   D1A6             
0441   D1A6 26 F5       
0441   D1A8             
0441   D1A8~                            eqend
0441   D1A8~                            eqend
0441   D1A8             
0442   D1A8 20 BF                       bra	to_kill
0443   D1AA             
0444   D1AA 7E EE D1    jmp_cmosa		jmp	cmos_a
0445   D1AD             
0446   D1AD             
0447   D1AD             ;*****************************************************
0448   D1AD             ;* Slide Routines
0449   D1AD             ;*****************************************************
0450   D1AD             
0451   D1AD             ani_msg_starslide	
0452   D1AD BD D2 96                    jsr	copy_msg_full
0453   D1B0 BD D2 D7    ani_starslide	jsr	clr_alpha_set_b1
0454   D1B3 86 04                       ldaa	#$04
0455   D1B5 CE 00 6A                    ldx	#alpha_b1
0456   D1B8                             begin
0456   D1B8             
0457   D1B8 8D 1D                           bsr	gb_4F
0458   D1BA BD DC 09                        jsr	hex2bitpos
0459   D1BD 53                              comb	
0460   D1BE D4 78                           andb	dmask_p3
0461   D1C0 D7 78                           stab	dmask_p3
0462   D1C2 08                              inx	
0463   D1C3 4A                              deca	
0464   D1C4                             miend
0464   D1C4             
0464   D1C4             
0464   D1C4~                            miend
0464   D1C4~                            miend
0464   D1C4~                            miend
0464   D1C4             
0464   D1C4 2A F2       
0464   D1C6             
0464   D1C6~                            miend
0464   D1C6~                            miend
0464   D1C6             
0465   D1C6 86 06                       ldaa	#$06
0466   D1C8                             begin
0466   D1C8             
0467   D1C8 8D 0D                           bsr	gb_4F
0468   D1CA BD DC 09                        jsr	hex2bitpos
0469   D1CD 53                              comb	
0470   D1CE D4 79                           andb	dmask_p4
0471   D1D0 D7 79                           stab	dmask_p4
0472   D1D2 08                              inx	
0473   D1D3 4A                              deca	
0474   D1D4                             miend
0474   D1D4             
0474   D1D4             
0474   D1D4~                            miend
0474   D1D4~                            miend
0474   D1D4~                            miend
0474   D1D4             
0474   D1D4 2A F2       
0474   D1D6             
0474   D1D6~                            miend
0474   D1D6~                            miend
0474   D1D6             
0475   D1D6 39                          rts	
0476   D1D7             			
0477   D1D7 36          gb_4F			psha	
0478   D1D8 37                          pshb	
0479   D1D9 C6 01                       ldab	#$01
0480   D1DB                             begin
0480   D1DB             
0481   D1DB 86 2B                           ldaa	#$2B			; Right Arrow Character
0482   D1DD A7 00                           staa	$00,X
0483   D1DF                                 SLEEP($02)
0483   D1DF BD DA A0    
0483   D1E2 02          
0484   D1E3 86 2B                           ldaa	#$2B
0485   D1E5 A7 00                           staa	$00,X
0486   D1E7                                 SLEEP($02)
0486   D1E7 BD DA A0    
0486   D1EA 02          
0487   D1EB 5A                              decb	
0488   D1EC                             eqend
0488   D1EC             
0488   D1EC             
0488   D1EC~                            eqend
0488   D1EC~                            eqend
0488   D1EC~                            eqend
0488   D1EC             
0488   D1EC 26 ED       
0488   D1EE             
0488   D1EE~                            eqend
0488   D1EE~                            eqend
0488   D1EE             
0489   D1EE 33                          pulb	
0490   D1EF 32                          pula	
0491   D1F0 39                          rts	
0492   D1F1             
0493   D1F1             
0494   D1F1             			
0495   D1F1 A6 00       slide_r		    ldaa	$00,X
0496   D1F3 84 0F                       anda	#$0F
0497   D1F5 BD DF 62                    jsr	xplusa
0498   D1F8                             begin
0498   D1F8             
0499   D1F8 E6 00                           ldab	$00,X
0500   D1FA 09                              dex	
0501   D1FB 8D 18       gb_0D				bsr	step_r
0502   D1FD                             eqend
0502   D1FD             
0502   D1FD             
0502   D1FD~                            eqend
0502   D1FD~                            eqend
0502   D1FD~                            eqend
0502   D1FD             
0502   D1FD 26 F9       
0502   D1FF             
0502   D1FF~                            eqend
0502   D1FF~                            eqend
0502   D1FF             
0503   D1FF 39                          rts	
0504   D200             
0505   D200 A6 00       slide_l		    ldaa	$00,X
0506   D202 84 0F                       anda	#$0F
0507   D204                             begin
0507   D204             
0508   D204 08                              inx	
0509   D205 E6 00                           ldab	$00,X
0510   D207 8D 21       gb_0F				bsr	step_l
0511   D209                             eqend
0511   D209             
0511   D209             
0511   D209~                            eqend
0511   D209~                            eqend
0511   D209~                            eqend
0511   D209             
0511   D209 26 F9       
0511   D20B             
0511   D20B~                            eqend
0511   D20B~                            eqend
0511   D20B             
0512   D20B 39                          rts	
0513   D20C             
0514   D20C 8D 41       ani_msg_rlslide	bsr	gb_0E
0515   D20E 8D F0                       bsr	slide_l
0516   D210 5F                          clrb	
0517   D211 86 01       gj_2E			ldaa	#$01
0518   D213 20 F2                       bra	gb_0F
0519   D215             
0520   D215 36          step_r		    psha	
0521   D216 37                          pshb	
0522   D217 FF 11 8C                    stx	game_var_2
0523   D21A CE 00 5E                    ldx	#alpha_b0
0524   D21D                             begin
0524   D21D             
0525   D21D 17                              tba	
0526   D21E E6 00                           ldab	$00,X
0527   D220 A7 00                           staa	$00,X
0528   D222 08                              inx	
0529   D223 BC 11 8E                        cpx	game_var_3
0530   D226                             eqend
0530   D226             
0530   D226             
0530   D226~                            eqend
0530   D226~                            eqend
0530   D226~                            eqend
0530   D226             
0530   D226 26 F5       
0530   D228             
0530   D228~                            eqend
0530   D228~                            eqend
0530   D228             
0531   D228 20 13                       bra	gb_61
0532   D22A             
0533   D22A             
0534   D22A             ;**********************************************
0535   D22A             ;* Shift Routines
0536   D22A             ;**********************************************
0537   D22A 36          step_l		    psha	
0538   D22B 37                          pshb	
0539   D22C FF 11 8C                    stx	game_var_2
0540   D22F CE 00 69                    ldx	#alpha_b0+11
0541   D232 17          gb_A0			tba	
0542   D233 E6 00                       ldab	$00,X
0543   D235 A7 00                       staa	$00,X
0544   D237 09                          dex	
0545   D238 BC 11 92                    cpx	game_var_5
0546   D23B 26 F5                       bne	gb_A0
0547   D23D FE 11 8C    gb_61			ldx	game_var_2
0548   D240 33                          pulb	
0549   D241 96 0A                       ldaa	game_ram_a
0550   D243                             ifeq
0550   D243             
0550   D243 26 FE       
0551   D245 86 09                           ldaa	#$09
0552   D247                             endif
0552   D247             
0552   D247             
0552   D247             
0552   D247             
0552   D247             
0552   D247~                            endif
0552   D247~                            endif
0552   D247             
0552   D247~                            endif
0552   D247~                            endif
0552   D247             
0552   D244             
0552   D244 02          
0552   D245             
0552   D245             
0552   D245~                            endif
0552   D245~                            endif
0552   D245~                            endif
0552   D245             
0552   D247             
0552   D247~                            endif
0552   D247~                            endif
0552   D247             
0553   D247 97 D3                       staa	thread_timer_byte
0554   D249 32                          pula	
0555   D24A BD DA 95                    jsr	delaythread
0556   D24D 4A                          deca	
0557   D24E 39                          rts	
0558   D24F             
0559   D24F FF 11 90    gb_0E			stx	game_var_4
0560   D252 CE 00 5D                    ldx	#alpha_b0-1
0561   D255 FF 11 92                    stx	game_var_5
0562   D258 20 09                       bra	gb_5E
0563   D25A             			
0564   D25A FF 11 90    gb_0C			stx	game_var_4
0565   D25D CE 00 6A                    ldx	#alpha_b1
0566   D260 FF 11 8E                    stx	game_var_3
0567   D263 FE 11 90    gb_5E			ldx	game_var_4
0568   D266 39                          rts
0569   D267             			
0570   D267 8D E6       gj_20			bsr	gb_0E
0571   D269 8D BF       gb_93			bsr	step_l
0572   D26B 26 FC                       bne	gb_93
0573   D26D 39                          rts		
0574   D26E             
0575   D26E 8D EA       gj_3D			bsr	gb_0C
0576   D270 8D A3       gb_10			bsr	step_r
0577   D272 26 FC                       bne	gb_10
0578   D274 39                          rts	
0579   D275             
0580   D275             setup_msg_endptr	
0581   D275 36                          psha	
0582   D276 37                          pshb	
0583   D277 DF C0                       stx	sys_temp5
0584   D279 CE 00 5E                    ldx	#alpha_b0
0585   D27C DF B6                       stx	temp1
0586   D27E 8D 5F                       bsr	clr_next_12
0587   D280 DE C0                       ldx	sys_temp5
0588   D282 E6 00                       ldab	$00,X
0589   D284 DE B6                       ldx	temp1
0590   D286 BD DD 56                    jsr	split_ab
0591   D289 F7 11 88                    stab	game_var_0
0592   D28C BD DF B0                    jsr	xplusb
0593   D28F DF B6                       stx	temp1
0594   D291 DE C0                       ldx	sys_temp5
0595   D293 33          pulab_rts		pulb	
0596   D294 32                          pula	
0597   D295 39                          rts	
0598   D296             
0599   D296             
0600   D296             ;**************************************************
0601   D296             ;* Message Copy - Either copies the full message 
0602   D296             ;* into the the alpha buffer or copies a partial
0603   D296             ;* message into the buffer for more complex 
0604   D296             ;* rendering
0605   D296             ;**************************************************
0606   D296 8D DD       copy_msg_full	bsr	setup_msg_endptr
0607   D298 E6 00       copy_msg_part	ldab	$00,X
0608   D29A C4 0F                       andb	#$0F
0609   D29C 08                          inx	
0610   D29D 7E E0 1F                    jmp	copyblock
0611   D2A0             
0612   D2A0 8D D3       ani_msg_letters	bsr	setup_msg_endptr
0613   D2A2 A6 00                       ldaa	$00,X					;get first letter
0614   D2A4 84 0F                       anda	#$0F
0615   D2A6                             begin
0615   D2A6             
0616   D2A6 C6 0C                           ldab	#$0C
0617   D2A8 36                              psha	
0618   D2A9 08                              inx	
0619   D2AA FF 11 8A                        stx	game_var_1
0620   D2AD A6 00                           ldaa	$00,X
0621   D2AF 97 6A                           staa	alpha_b0+12
0622   D2B1 CE 00 69                        ldx	#alpha_b0+11
0623   D2B4                                 begin
0623   D2B4             
0624   D2B4                                     SLEEP($01)
0624   D2B4 BD DA A0    
0624   D2B7 01          
0625   D2B8 A6 01                               ldaa	$01,X
0626   D2BA A7 00                               staa	$00,X
0627   D2BC 4F                                  clra	
0628   D2BD A7 01                               staa	$01,X
0629   D2BF 09                                  dex	
0630   D2C0 5A                                  decb	
0631   D2C1 F1 11 88                            cmpb	game_var_0
0632   D2C4                                 eqend
0632   D2C4             
0632   D2C4             
0632   D2C4~                                eqend
0632   D2C4~                                eqend
0632   D2C4~                                eqend
0632   D2C4             
0632   D2C4 26 EE       
0632   D2C6             
0632   D2C6~                                eqend
0632   D2C6~                                eqend
0632   D2C6             
0633   D2C6 FE 11 8A                        ldx	game_var_1
0634   D2C9 7C 11 88                        inc	game_var_0
0635   D2CC 32                              pula	
0636   D2CD 4A                              deca	
0637   D2CE                             eqend
0637   D2CE             
0637   D2CE             
0637   D2CE~                            eqend
0637   D2CE~                            eqend
0637   D2CE~                            eqend
0637   D2CE             
0637   D2CE 26 D6       
0637   D2D0             
0637   D2D0~                            eqend
0637   D2D0~                            eqend
0637   D2D0             
0638   D2D0 39                          rts	
0639   D2D1             
0640   D2D1 BD DC 1C    gj_0D			jsr	update_commas
0641   D2D4             clr_alpha_set_b0	
0642   D2D4 5F                          clrb	
0643   D2D5 20 02                       bra	clr_alpha_set_bx
0644   D2D7             clr_alpha_set_b1	
0645   D2D7 C6 7F                       ldab	#$7F
0646   D2D9             clr_alpha_set_bx	
0647   D2D9 BD D2 EA                    jsr	stab_all_alphmsk
0648   D2DC CE 00 6A                    ldx	#alpha_b1
0649   D2DF 4F          clr_next_12		clra	
0650   D2E0 C6 0C                       ldab	#$0C
0651   D2E2 7E E9 CD                    jmp	write_range
0652   D2E5             
0653   D2E5 D6 78       invert_alphamsk	ldab	dmask_p3
0654   D2E7 53                          comb	
0655   D2E8 C4 7F                       andb	#$7F
0656   D2EA             stab_all_alphmsk	
0657   D2EA D7 78                       stab	dmask_p3
0658   D2EC D7 79                       stab	dmask_p4
0659   D2EE 39                          rts
0660   D2EF             		
0661   D2EF 36          ani_spinner		psha	
0662   D2F0 37                          pshb	
0663   D2F1                             begin
0663   D2F1             
0664   D2F1 86 26                           ldaa	#$26
0665   D2F3 5A                              decb	
0666   D2F4 27 9D                           beq	pulab_rts
0667   D2F6 A7 00       spin_rpt			staa	$00,X
0668   D2F8                                 SLEEP($02)
0668   D2F8 BD DA A0    
0668   D2FB 02          
0669   D2FC 4C                              inca	
0670   D2FD 81 2A                           cmpa	#$2A
0671   D2FF                             neend
0671   D2FF             
0671   D2FF             
0671   D2FF~                            neend
0671   D2FF~                            neend
0671   D2FF~                            neend
0671   D2FF             
0671   D2FF 27 F0       
0671   D301             
0671   D301~                            neend
0671   D301~                            neend
0671   D301             
0672   D301 20 F3                       bra	spin_rpt
0673   D303             		
0674   D303             						
0675   D303             
0676   D303             
0677   D303             
0678   D303             
0679   D303             
0680   D303             
0681   D303             
0682   D303 7E DA E8    sw_notused_1	jmp	killthread
0683   D306 39          high_score		rts		
0684   D307             
0685   D307             
0686   D307             sw_troll_1			
0687   D307             sw_gargoyle_bl	
0688   D307             sw_warlok_l		
0689   D307             sw_blknite_l		
0690   D307             sw_evilking_l	
0691   D307             sw_gargoyle_tl	
0692   D307             sw_demon_1		
0693   D307             sw_troll_2		
0694   D307             sw_demon_2		
0695   D307             sw_troll_3		
0696   D307             sw_demon_3		
0697   D307             sw_troll_4		
0698   D307             sw_demon_4		
0699   D307             sw_troll_5		
0700   D307             sw_demon_5		
0701   D307             sw_troll_6		
0702   D307             sw_demon_6		
0703   D307             sw_gargoyle_tr	
0704   D307             sw_warlok_r		
0705   D307             sw_blknight_r	
0706   D307             sw_evilking_r	
0707   D307             sw_gargoyle_br	KILL_
0707   D307 03          
0708   D308             
0709   D308             
0710   D308             sw_spell		KILL_
0710   D308 03          
0711   D309             
0712   D309             sw_l_shooter		
0713   D309             sw_r_shooter	KILL_
0713   D309 03          
0714   D30A             
0715   D30A             	
0716   D30A             
0717   D30A 3F          gameover_entry	swi
0718   D30B                             SOL_(BB_LEFT_FLASH_OFF,BB_RIGHT_FLASH_OFF,PF_TOP_FLASH_OFF,PF_BOT_FLASH_OFF,PF_CENTER_FLASH_OFF,GI_RELAY_PF_OFF,GI_RELAY_BB_OFF,BALL_LIFT_OFF)	
ERROR: splbn_l0.asm line 0718: Label not found: (BB_LEFT_FLASH_OF)
ERROR: splbn_l0.asm line 0718: Label not found: (BB_RIGHT_FLASH_OF)
ERROR: splbn_l0.asm line 0718: Label not found: (F)
ERROR: splbn_l0.asm line 0718: Label not found: (PF_TOP_FLASH_OFFPF_BOT_FLASH_OFFPF_CENTER_FLASH_FF)
ERROR: splbn_l0.asm line 0718: Label not found: (PF_BOT_FLASH_OFFPF_CENTER_FLASH_FF)
ERROR: splbn_l0.asm line 0718: Label not found: (PF_CENTER_FLASH_FF)
ERROR: splbn_l0.asm line 0718: Label not found: (FF)
ERROR: splbn_l0.asm line 0718: Label not found: (GI_RELAY_BB_OFFBALL_LIFT_OFF)
0718   D30B 3A0000000000
0718   D311 0000000600
0719   D316 F8                          SND_($18)				;Sound #18
0720   D317             go_loop		    RCLR0_(grp_alllamps)		;All lamps off buffer 0
0720   D317             
0720   D317 19 00       
0721   D319                             RCLR1_(grp_alllamps)		;All lamps off buffer 1
0721   D319             
0721   D319 29 00       
0722   D31B                             PRI_($10)				;Priority=#10
0722   D31B 52 10       
0723   D31D                             CPUX_
0723   D31D 04          
0724   D31E BD D4 15                    jsr	start_attract
0725   D321 7F 00 E4                    clr	flag_tilt
0726   D324 86 01                       ldaa	#$01
0727   D326 97 0C                       staa	game_ram_c
0728   D328                             begin
0728   D328             
0729   D328 CE D7 CA                        ldx	#msg_williams
0730   D32B BD D2 A0                        jsr	ani_msg_letters
0731   D32E                                 SLEEP($90)
0731   D32E BD DA A0    
0731   D331 90          
0732   D332 CE D7 D3                        ldx	#msg_electronics
0733   D335 BD D2 A0                        jsr	ani_msg_letters
0734   D338                                 SLEEP($90)
0734   D338 BD DA A0    
0734   D33B 90          
0735   D33C CE D7 DF                        ldx	#msg_presents
0736   D33F BD D2 A0                        jsr	ani_msg_letters
0737   D342                                 SLEEP($90)
0737   D342 BD DA A0    
0737   D345 90          
0738   D346 CE D7 E8                        ldx	#msg_spellbinder
0739   D349 BD D2 96                        jsr	copy_msg_full
0740   D34C 3F                              swi
0741   D34D                                     BITON4_(bf_dispspkl)
0741   D34D D8 00       
0742   D34F                                 CPUX_
0742   D34F 04          
0743   D350 86 10                           ldaa	#$10
0744   D352 B7 13 9D                        staa	sparkle_rate
0745   D355                                 SLEEP($40)
0745   D355 BD DA A0    
0745   D358 40          
0746   D359 86 30                           ldaa	#$30
0747   D35B B7 13 9D                        staa	sparkle_rate
0748   D35E                                 SLEEP($30)
0748   D35E BD DA A0    
0748   D361 30          
0749   D362 86 70                           ldaa	#$70
0750   D364 B7 13 9D                        staa	sparkle_rate
0751   D367                                 SLEEP($30)
0751   D367 BD DA A0    
0751   D36A 30          
0752   D36B 86 F0                           ldaa	#$f0
0753   D36D B7 13 9D                        staa	sparkle_rate
0754   D370                                 SLEEP($20)
0754   D370 BD DA A0    
0754   D373 20          
0755   D374 86 F8                           ldaa	#$f8
0756   D376 B7 13 9D                        staa	sparkle_rate
0757   D379                                 SLEEP($30)
0757   D379 BD DA A0    
0757   D37C 30          
0758   D37D 3F                              swi
0759   D37E                                     BITOFF4_(bf_dispspkl)
0759   D37E D9 00       
0760   D380                                 CPUX_
0760   D380 04          
0761   D381                                 SLEEP($30)
0761   D381 BD DA A0    
0761   D384 30          
0762   D385 CE D7 FD                        ldx	#msg_gameover
0763   D388 BD D2 A0                        jsr	ani_msg_letters
0764   D38B                                 SLEEP($C0)
0764   D38B BD DA A0    
0764   D38E C0          
0765   D38F             
0766   D38F CE D8 16                        ldx	#msg_destroy
0767   D392 BD D2 96                        jsr	copy_msg_full
0768   D395                                 SLEEP($80)
0768   D395 BD DA A0    
0768   D398 80          
0769   D399 CE D8 1E                        ldx	#msg_enemies
0770   D39C BD D2 96                        jsr	copy_msg_full
0771   D39F                                 SLEEP($80)
0771   D39F BD DA A0    
0771   D3A2 80          
0772   D3A3 CE D8 26                        ldx	#msg_battlethe
0773   D3A6 BD D2 96                        jsr	copy_msg_full
0774   D3A9                                 SLEEP($80)
0774   D3A9 BD DA A0    
0774   D3AC 80          
0775   D3AD CE D8 31                        ldx	#msg_dragon
0776   D3B0 BD D2 96                        jsr	copy_msg_full
0777   D3B3                                 SLEEP($80)
0777   D3B3 BD DA A0    
0777   D3B6 80          
0778   D3B7 BD D5 24                        jsr	disp_hy_score
0779   D3BA 3F          show_cred			swi
0780   D3BB             					BITOFF4_(bf_dispspkl)
0780   D3BB D9 00       
0781   D3BD             					CPUX_
0781   D3BD 04          
0782   D3BE BD D2 75                        jsr	setup_msg_endptr
0783   D3C1 BD D2 D4                        jsr	clr_alpha_set_b0
0784   D3C4                                 SLEEP($80)
0784   D3C4 BD DA A0    
0784   D3C7 80          
0785   D3C8 CE D7 F5                        ldx	#msg_credit
0786   D3CB BD D2 96                        jsr	copy_msg_full
0787   D3CE B6 11 9A                        ldaa	current_credits
0788   D3D1 BD D4 01                        jsr	disp_num_a
0789   D3D4 7A 00 0C                        dec	game_ram_c
0790   D3D7 27 09                           beq 	go_attract
0791   D3D9                                 SLEEP($E0)
0791   D3D9 BD DA A0    
0791   D3DC E0          
0792   D3DD                             loopend
0792   D3DD             
0792   D3DD             
0792   D3DD             
0792   D3DD 20 03       
0792   D3DF 7E D3 28    
0792   D3E2~                            loopend
0792   D3E2~                            loopend
0792   D3E2             
0792   D3E2~                            loopend
0792   D3E2~                            loopend
0792   D3E2             
0793   D3E2                             ;we are here for the timeout on the fancy attract
0794   D3E2 3F          go_attract		swi
0795   D3E3                             REMTHREADS_($FF,$43)		;Remove Multiple Threads Based on Priority
0795   D3E3 55 FF 43    
0796   D3E6                             SOL_(GI_RELAY_PF_ON,GI_RELAY_BB_ON)	
0796   D3E6 32 F6 F7    
0797   D3E9 EE                          SND_($0E)				;Sound #19
0798   D3EA                             SLEEP_(4)
0798   D3EA             
0798   D3EA 74          
0798   D3EB~                            SLEEP_(4)
0798   D3EB~                            SLEEP_(4)
0798   D3EB             
0799   D3EB                             EXE_
0799   D3EB             
0799   D3EB 44          
0800   D3EC BD D5 06                        jsr gover_lamps
0801   D3EF                             EXEEND_
0801   D3EF             
0801   D3EF             
0801   D3EF             
0801   D3EF             
0801   D3EF~                            EXEEND_
0801   D3EF~                            EXEEND_
0801   D3EF             
0801   D3EB             
0801   D3EB 45          
0801   D3EC             
0801   D3EF             
0801   D3EF~                            EXEEND_
0801   D3EF~                            EXEEND_
0801   D3EF             
0802   D3EF C0 00                       SETRAM_(rega,0)
0803   D3F1                             BEGIN_
0803   D3F1             
0804   D3F1                                 SOL_(PF_CENTER_FLASH_ON4)
ERROR: splbn_l0.asm line 0804: Label not found: (PF_CENTER_FLASH_N4)
ERROR: splbn_l0.asm line 0804: Label not found: (N4)
0804   D3F1 32 00 00    
0805   D3F4                                 SLEEP_(8)
0805   D3F4             
0805   D3F4 78          
0805   D3F5~                                SLEEP_(8)
0805   D3F5~                                SLEEP_(8)
0805   D3F5             
0806   D3F5 B0 01                           ADDRAM_(rega,1)
0807   D3F7                             EQEND_($FC,$E0,5)
0807   D3F7             
0807   D3F7 5BFCE005FE  
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC             
0807   D3FC             
0807   D3FC             
0807   D3FC             
0807   D3FC             
0807   D3FC             
0807   D3FC             
0807   D3FB             
0807   D3FB F5          
0807   D3FC             
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC             
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC~                            EQEND_($FC,$E0,5)
0807   D3FC             
0808   D3FC                             SOL_(GI_RELAY_PF_OFF,GI_RELAY_BB_OFF)
0808   D3FC 32 06 07    
0809   D3FF                             JMPR_(go_loop)
0809   D3FF~                            JMPR_(go_loop)
0809   D3FF~                            JMPR_(go_loop)
0809   D3FF             
0809   D3FF~                            JMPR_(go_loop)
0809   D3FF~                            JMPR_(go_loop)
0809   D3FF             
0809   D3FF             
0809   D3FF 8F          
0809   D400 16          
0810   D401             			
0811   D401             	
0812   D401             ;disp_wave_num	ldaa	current_wave
0813   D401 16          disp_num_a		tab	
0814   D402 84 0F                       anda	#$0F
0815   D404 8B 1B                       adda	#$1B
0816   D406 DE B6                       ldx	temp1
0817   D408 A7 02                       staa	$02,X
0818   D40A BD DD 56                    jsr	split_ab
0819   D40D 5D                          tstb	
0820   D40E                             ifne
0820   D40E             
0820   D40E 27 FE       
0821   D410 CB 1B                           addb	#$1B
0822   D412                             endif
0822   D412             
0822   D412             
0822   D412             
0822   D412             
0822   D412             
0822   D412~                            endif
0822   D412~                            endif
0822   D412             
0822   D412~                            endif
0822   D412~                            endif
0822   D412             
0822   D40F             
0822   D40F 02          
0822   D410             
0822   D410             
0822   D410~                            endif
0822   D410~                            endif
0822   D410~                            endif
0822   D410             
0822   D412             
0822   D412~                            endif
0822   D412~                            endif
0822   D412             
0823   D412 E7 01                       stab	$01,X
0824   D414 39                          rts	
0825   D415             
0826   D415             start_attract   NEWTHREAD(attract_dragon)
0826   D415 CE D4 45    
0826   D418 BD DB 48    
0827   D41B                             NEWTHREAD(attract_bonus)
0827   D41B CE D4 62    
0827   D41E BD DB 48    
0828   D421                             NEWTHREAD(attract_sides)
0828   D421 CE D4 F8    
0828   D424 BD DB 48    
0829   D427                             NEWTHREAD(attract_arrows)
0829   D427 CE D4 E3    
0829   D42A BD DB 48    
0830   D42D                             NEWTHREAD(attract_mult)
0830   D42D CE D4 89    
0830   D430 BD DB 48    
0831   D433                             NEWTHREAD(attract_axe)
0831   D433 CE D4 94    
0831   D436 BD DB 48    
0832   D439                             NEWTHREAD(attract_red)
0832   D439 CE D4 9E    
0832   D43C BD DB 48    
0833   D43F                             NEWTHREAD_JMP(attract_wiz)
0833   D43F CE D4 BE    
0833   D442 7E DB 48    
0834   D445             	
0835   D445             ;********************************************************
0836   D445             ;* Dragon Attract
0837   D445             ;********************************************************
0838   D445 3F          attract_dragon	swi
0839   D446                             PRI_($43)				;Priority=#43
0839   D446 52 43       
0840   D448                             BITON_(lamp_gargtl)			;Turn ON: lamp_500
0840   D448             
0840   D448 10 0E       
0841   D44A                             BEGIN_
0841   D44A             
0842   D44A                                 BEGIN_
0842   D44A             
0843   D44A B0 01                               ADDRAM_(rega,$01)			;RAM$00+=$01
0844   D44C             atd_loop			    BEQR_($FC,$FF,$E0,$01,$00,atd_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0844   D44C             
0844   D44C 5AFCFFE00100
0844   D452 07
0844   D453~            atd_loop			    BEQR_($FC,$FF,$E0,$01,$00,atd_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0844   D453~            atd_loop			    BEQR_($FC,$FF,$E0,$01,$00,atd_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0844   D453~            atd_loop			    BEQR_($FC,$FF,$E0,$01,$00,atd_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0844   D453~            atd_loop			    BEQR_($FC,$FF,$E0,$01,$00,atd_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0844   D453~            atd_loop			    BEQR_($FC,$FF,$E0,$01,$00,atd_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0844   D453~            atd_loop			    BEQR_($FC,$FF,$E0,$01,$00,atd_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0844   D453             
0845   D453                                 NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D453             
0845   D453 5A 0E 00    
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456             
0845   D456             
0845   D456             
0845   D456             
0845   D456             
0845   D456             
0845   D456             
0845   D455             
0845   D455 F4          
0845   D456             
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456             
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456~                                NEEND_(lamp_gargtl)    		;BEQR_BIT#26
0845   D456             
0846   D456                                 RROL0_(grp_dragons)			
0846   D456             
0846   D456 1D 08       
0847   D458                                 JMPR_(atd_2)			
0847   D458~                                JMPR_(atd_2)			
0847   D458~                                JMPR_(atd_2)			
0847   D458             
0847   D458~                                JMPR_(atd_2)			
0847   D458~                                JMPR_(atd_2)			
0847   D458             
0847   D458             
0847   D458 80          
0847   D459 05          
0848   D45A             atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45A             
0848   D45A 5A 19 00    
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D             
0848   D45D             
0848   D45D             
0848   D45D             
0848   D45D             
0848   D45D             
0848   D45D             
0848   D45C             
0848   D45C ED          
0848   D45D             
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D             
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D~            atd_1			NEEND_(lamp_gargtr)		;BEQR_BIT#2A 
0848   D45D             
0849   D45D                             RROR0_(grp_dragons)		;Effect: Range #06 Range #05
0849   D45D             
0849   D45D 1E 08       
0850   D45F             atd_2	        SLEEP_(4)
0850   D45F             
0850   D45F 74          
0850   D460~            atd_2	        SLEEP_(4)
0850   D460~            atd_2	        SLEEP_(4)
0850   D460             
0851   D460                             JMPR_(atd_loop)
0851   D460~                            JMPR_(atd_loop)
0851   D460~                            JMPR_(atd_loop)
0851   D460             
0851   D460~                            JMPR_(atd_loop)
0851   D460~                            JMPR_(atd_loop)
0851   D460             
0851   D460             
0851   D460 8F          
0851   D461 EA          
0852   D462             					
0853   D462             ;********************************************************
0854   D462             ;* Bonus Lamps Attract
0855   D462             ;********************************************************
0856   D462 3F          attract_bonus	swi
0857   D463                             PRI_($43)				;Priority=#43
0857   D463 52 43       
0858   D465                             BITON_(lamp_500)			;Turn ON: lamp_500
0858   D465             
0858   D465 10 38       
0859   D467                             BITON_(lamp_extrawiz)
0859   D467             
0859   D467 10 42       
0860   D469                             BITON_(lamp_hand1)
0860   D469             
0860   D469 10 55       
0861   D46B                             BITON_(lamp_hand2)
0861   D46B             
0861   D46B 10 56       
0862   D46D                             BEGIN_
0862   D46D             
0863   D46D                                 BEGIN_
0863   D46D             
0864   D46D B0 01                               ADDRAM_(rega,$01)			;RAM$00+=$01
0865   D46F             atb_loop			    BEQR_($FC,$FF,$E0,$01,$00,atb_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0865   D46F             
0865   D46F 5AFCFFE00100
0865   D475 07
0865   D476~            atb_loop			    BEQR_($FC,$FF,$E0,$01,$00,atb_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0865   D476~            atb_loop			    BEQR_($FC,$FF,$E0,$01,$00,atb_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0865   D476~            atb_loop			    BEQR_($FC,$FF,$E0,$01,$00,atb_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0865   D476~            atb_loop			    BEQR_($FC,$FF,$E0,$01,$00,atb_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0865   D476~            atb_loop			    BEQR_($FC,$FF,$E0,$01,$00,atb_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0865   D476~            atb_loop			    BEQR_($FC,$FF,$E0,$01,$00,atb_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0865   D476             
0866   D476                                 NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D476             
0866   D476 5A 38 00    
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479             
0866   D479             
0866   D479             
0866   D479             
0866   D479             
0866   D479             
0866   D479             
0866   D478             
0866   D478 F4          
0866   D479             
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479             
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479~                                NEEND_(lamp_500)    		;BEQR_BIT#26
0866   D479             
0867   D479                                 RROL0_(grp_bonmult)		;Effect: Range #06 Range #05
0867   D479             
0867   D479 1D 0F       
0868   D47B                                 JMPR_(atb_2)			
0868   D47B~                                JMPR_(atb_2)			
0868   D47B~                                JMPR_(atb_2)			
0868   D47B             
0868   D47B~                                JMPR_(atb_2)			
0868   D47B~                                JMPR_(atb_2)			
0868   D47B             
0868   D47B             
0868   D47B 80          
0868   D47C 05          
0869   D47D             atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D47D             
0869   D47D 5A 41 00    
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480             
0869   D480             
0869   D480             
0869   D480             
0869   D480             
0869   D480             
0869   D480             
0869   D47F             
0869   D47F ED          
0869   D480             
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480             
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480~            atb_1			NEEND_(lamp_5xu)			;BEQR_BIT#2A 
0869   D480             
0870   D480                             RROR0_(grp_bonmult)		;Effect: Range #06 Range #05
0870   D480             
0870   D480 1E 0F       
0871   D482             atb_2			SLEEP_(4)
0871   D482             
0871   D482 74          
0871   D483~            atb_2			SLEEP_(4)
0871   D483~            atb_2			SLEEP_(4)
0871   D483             
0872   D483                             BITINV_(lamp_extrawiz)
0872   D483             
0872   D483 12 42       
0873   D485                             RINV0_(grp_shield)
0873   D485             
0873   D485 1F 12       
0874   D487                             JMPR_(atb_loop)
0874   D487~                            JMPR_(atb_loop)
0874   D487~                            JMPR_(atb_loop)
0874   D487             
0874   D487~                            JMPR_(atb_loop)
0874   D487~                            JMPR_(atb_loop)
0874   D487             
0874   D487             
0874   D487 8F          
0874   D488 E6          
0875   D489             	
0876   D489             ;********************************************************
0877   D489             ;* Multiplier Lamps Attract
0878   D489             ;********************************************************
0879   D489 3F          attract_mult	swi
0880   D48A                             PRI_($43)				;Priority=#43
0880   D48A 52 43       
0881   D48C                             RCLR0_(grp_lowermult)
0881   D48C             
0881   D48C 19 02       
0882   D48E                             BEGIN_
0882   D48E             
0883   D48E                                 RSET1RC0_(grp_lowermult)
0883   D48E             
0883   D48E 1B 02       
0884   D490                                 SLEEP_(16)
0884   D490~                                SLEEP_(16)
0884   D490~                                SLEEP_(16)
0884   D490             
0884   D490 53 10       
0884   D492             
0885   D492                             LOOP_
0885   D492             
0885   D492             
0885   D492~                            LOOP_
0885   D492~                            LOOP_
0885   D492             
0885   D492~                            LOOP_
0885   D492~                            LOOP_
0885   D492             
0885   D492             
0885   D492 8F          
0885   D493 FA          
0886   D494             			
0887   D494             ;********************************************************
0888   D494             ;* Axe Lamps Attract
0889   D494             ;********************************************************
0890   D494 3F          attract_axe		swi
0891   D495                             PRI_($43)				;Priority=#43
0891   D495 52 43       
0892   D497                             RCLR0_(grp_axe)
0892   D497             
0892   D497 19 11       
0893   D499                             BEGIN_
0893   D499             
0894   D499                                 RSET1RC0_(grp_axe)		
0894   D499             
0894   D499 1B 11       
0895   D49B                                 SLEEP_(8)
0895   D49B             
0895   D49B 78          
0895   D49C~                                SLEEP_(8)
0895   D49C~                                SLEEP_(8)
0895   D49C             
0896   D49C                             LOOP_
0896   D49C             
0896   D49C             
0896   D49C~                            LOOP_
0896   D49C~                            LOOP_
0896   D49C             
0896   D49C~                            LOOP_
0896   D49C~                            LOOP_
0896   D49C             
0896   D49C             
0896   D49C 8F          
0896   D49D FB          
0897   D49E             
0898   D49E             			
0899   D49E             ;********************************************************
0900   D49E             ;* Red Lamps Attract
0901   D49E             ;********************************************************
0902   D49E 3F          attract_red		swi
0903   D49F                             PRI_($43)				;Priority=#43
0903   D49F 52 43       
0904   D4A1                             BEGIN_
0904   D4A1             
0905   D4A1                                 RCLR0_(grp_reds)
0905   D4A1             
0905   D4A1 19 10       
0906   D4A3                                 SLEEP_(8)
0906   D4A3             
0906   D4A3 78          
0906   D4A4~                                SLEEP_(8)
0906   D4A4~                                SLEEP_(8)
0906   D4A4             
0907   D4A4                                 BITON_(lamp_red5)
0907   D4A4             
0907   D4A4 10 47       
0908   D4A6                                 SLEEP_(8)
0908   D4A6             
0908   D4A6 78          
0908   D4A7~                                SLEEP_(8)
0908   D4A7~                                SLEEP_(8)
0908   D4A7             
0909   D4A7                                 BITON_(lamp_red4)
0909   D4A7             
0909   D4A7 10 46       
0910   D4A9                                 BITON_(lamp_red6)
0910   D4A9             
0910   D4A9 10 48       
0911   D4AB                                 SLEEP_(8)
0911   D4AB             
0911   D4AB 78          
0911   D4AC~                                SLEEP_(8)
0911   D4AC~                                SLEEP_(8)
0911   D4AC             
0912   D4AC                                 BITON_(lamp_red3)
0912   D4AC             
0912   D4AC 10 45       
0913   D4AE                                 BITON_(lamp_red7)
0913   D4AE             
0913   D4AE 10 49       
0914   D4B0                                 SLEEP_(8)
0914   D4B0             
0914   D4B0 78          
0914   D4B1~                                SLEEP_(8)
0914   D4B1~                                SLEEP_(8)
0914   D4B1             
0915   D4B1                                 BITON_(lamp_red2)
0915   D4B1             
0915   D4B1 10 44       
0916   D4B3                                 BITON_(lamp_red8)
0916   D4B3             
0916   D4B3 10 4A       
0917   D4B5                                 SLEEP_(8)
0917   D4B5             
0917   D4B5 78          
0917   D4B6~                                SLEEP_(8)
0917   D4B6~                                SLEEP_(8)
0917   D4B6             
0918   D4B6                                 BITON_(lamp_red1)
0918   D4B6             
0918   D4B6 10 43       
0919   D4B8                                 BITON_(lamp_red9)
0919   D4B8             
0919   D4B8 10 4B       
0920   D4BA                                 SLEEP_(16)
0920   D4BA~                                SLEEP_(16)
0920   D4BA~                                SLEEP_(16)
0920   D4BA             
0920   D4BA 53 10       
0920   D4BC             
0921   D4BC                             LOOP_
0921   D4BC             
0921   D4BC             
0921   D4BC~                            LOOP_
0921   D4BC~                            LOOP_
0921   D4BC             
0921   D4BC~                            LOOP_
0921   D4BC~                            LOOP_
0921   D4BC             
0921   D4BC             
0921   D4BC 8F          
0921   D4BD E3          
0922   D4BE             					
0923   D4BE             ;**********************************************************
0924   D4BE             ;* Wizard Lamp Attract
0925   D4BE             ;**********************************************************	
0926   D4BE 3F          attract_wiz		swi
0927   D4BF                             PRI_($43)				;Priority=#43
0927   D4BF 52 43       
0928   D4C1                             BEGIN_
0928   D4C1             
0929   D4C1                                 RCLR0_(grp_wizard)
0929   D4C1             
0929   D4C1 19 01       
0930   D4C3                                 BITON_(lamp_wiz1)			;Toggle: lamp_wiz1
0930   D4C3             
0930   D4C3 10 00       
0931   D4C5                                 SLEEP_(4)
0931   D4C5             
0931   D4C5 74          
0931   D4C6~                                SLEEP_(4)
0931   D4C6~                                SLEEP_(4)
0931   D4C6             
0932   D4C6 C0 00                           SETRAM_(rega,$00)
0933   D4C8                                 BEGIN_
0933   D4C8             
0934   D4C8                                     RROR0_(grp_wizard)				;Rotate Right Lamp Group
0934   D4C8             
0934   D4C8 1E 01       
0935   D4CA                                     SLEEP_(4)
0935   D4CA             
0935   D4CA 74          
0935   D4CB~                                    SLEEP_(4)
0935   D4CB~                                    SLEEP_(4)
0935   D4CB             
0936   D4CB B0 01                               ADDRAM_(rega,$01)			;RAM$00+=$01
0937   D4CD                                 EQEND_($FC,$E0,24)
0937   D4CD             
0937   D4CD 5BFCE018FE  
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2             
0937   D4D2             
0937   D4D2             
0937   D4D2             
0937   D4D2             
0937   D4D2             
0937   D4D2             
0937   D4D1             
0937   D4D1 F6          
0937   D4D2             
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2             
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2~                                EQEND_($FC,$E0,24)
0937   D4D2             
0938   D4D2                                 RCLR0_(grp_wizard)
0938   D4D2             
0938   D4D2 19 01       
0939   D4D4                                 SLEEP_(4)
0939   D4D4             
0939   D4D4 74          
0939   D4D5~                                SLEEP_(4)
0939   D4D5~                                SLEEP_(4)
0939   D4D5             
0940   D4D5 C0 00                           SETRAM_(rega,$00)
0941   D4D7                                 BEGIN_
0941   D4D7             
0942   D4D7                                     RINV0_(grp_wizard)
0942   D4D7             
0942   D4D7 1F 01       
0943   D4D9                                     SLEEP_(4)
0943   D4D9             
0943   D4D9 74          
0943   D4DA~                                    SLEEP_(4)
0943   D4DA~                                    SLEEP_(4)
0943   D4DA             
0944   D4DA B0 01                               ADDRAM_(rega,$01)			;RAM$00+=$01
0945   D4DC                                 EQEND_($FC,$E0,10)
0945   D4DC             
0945   D4DC 5BFCE00AFE  
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1             
0945   D4E1             
0945   D4E1             
0945   D4E1             
0945   D4E1             
0945   D4E1             
0945   D4E1             
0945   D4E0             
0945   D4E0 F6          
0945   D4E1             
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1             
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1~                                EQEND_($FC,$E0,10)
0945   D4E1             
0946   D4E1                             LOOP_
0946   D4E1             
0946   D4E1             
0946   D4E1~                            LOOP_
0946   D4E1~                            LOOP_
0946   D4E1             
0946   D4E1~                            LOOP_
0946   D4E1~                            LOOP_
0946   D4E1             
0946   D4E1             
0946   D4E1 8F          
0946   D4E2 DE          
0947   D4E3             			
0948   D4E3             ;**********************************************************
0949   D4E3             ;* Aarow Lamp Attract
0950   D4E3             ;**********************************************************	
0951   D4E3 3F          attract_arrows	swi
0952   D4E4                             PRI_($43)				;Priority=#43
0952   D4E4 52 43       
0953   D4E6                             BEGIN_
0953   D4E6             
0954   D4E6                                 RCLR0_(grp_seriesa)
0954   D4E6             
0954   D4E6 19 0B       
0955   D4E8                                 SLEEP_(16)
0955   D4E8~                                SLEEP_(16)
0955   D4E8~                                SLEEP_(16)
0955   D4E8             
0955   D4E8 53 10       
0955   D4EA             
0956   D4EA C0 00                           SETRAM_(rega,$00)
0957   D4EC                                 BEGIN_
0957   D4EC             
0958   D4EC                                     RINV0_(grp_seriesa)
0958   D4EC             
0958   D4EC 1F 0B       
0959   D4EE                                     SLEEP_(2)
0959   D4EE             
0959   D4EE 72          
0959   D4EF~                                    SLEEP_(2)
0959   D4EF~                                    SLEEP_(2)
0959   D4EF             
0960   D4EF B0 01                               ADDRAM_(rega,$01)			;RAM$00+=$01
0961   D4F1                                 EQEND_($FC,$E0,$10)
0961   D4F1             
0961   D4F1 5BFCE010FE  
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6             
0961   D4F6             
0961   D4F6             
0961   D4F6             
0961   D4F6             
0961   D4F6             
0961   D4F6             
0961   D4F5             
0961   D4F5 F6          
0961   D4F6             
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6             
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6~                                EQEND_($FC,$E0,$10)
0961   D4F6             
0962   D4F6                             LOOP_			
0962   D4F6             
0962   D4F6             
0962   D4F6~                            LOOP_			
0962   D4F6~                            LOOP_			
0962   D4F6             
0962   D4F6~                            LOOP_			
0962   D4F6~                            LOOP_			
0962   D4F6             
0962   D4F6             
0962   D4F6 8F          
0962   D4F7 EE          
0963   D4F8             	
0964   D4F8             ;**********************************************************
0965   D4F8             ;* Side Enemy Attract
0966   D4F8             ;**********************************************************	
0967   D4F8 3F          attract_sides	swi
0968   D4F9                             PRI_($43)				;Priority=#43
0968   D4F9 52 43       
0969   D4FB                             BITON_(lamp_troll1)			;Toggle: lamp_troll1
0969   D4FB             
0969   D4FB 10 08       
0970   D4FD                             BITON_(lamp_warlokr)			;Toggle: lamp_warlokr	
0970   D4FD             
0970   D4FD 10 1A       
0971   D4FF                             BEGIN_
0971   D4FF             
0972   D4FF                                 RROR0_(grp_leftside)		;Rotate Right Lamp Group Left Side
0972   D4FF             
0972   D4FF 1E 03       
0973   D501                                 RROR0_(grp_rightside)		;Rotate Right Lamp Group Right Side
0973   D501             
0973   D501 1E 09       
0974   D503                                 SLEEP_(6)
0974   D503             
0974   D503 76          
0974   D504~                                SLEEP_(6)
0974   D504~                                SLEEP_(6)
0974   D504             
0975   D504                             LOOP_
0975   D504             
0975   D504             
0975   D504~                            LOOP_
0975   D504~                            LOOP_
0975   D504             
0975   D504~                            LOOP_
0975   D504~                            LOOP_
0975   D504             
0975   D504             
0975   D504 8F          
0975   D505 F9          
0976   D506             					
0977   D506 C6 03       gover_lamps		ldab	#$03
0978   D508                             begin
0978   D508             
0979   D508 CE D6 21                        ldx  	#lampsweep-1
0980   D50B 86 05                           ldaa	#$05
0981   D50D BD D5 EE                        jsr  	lampstr_on
0982   D510                                 SLEEP(2)
0982   D510 BD DA A0    
0982   D513 02          
0983   D514 CE D6 21                            ldx  	#lampsweep-1
0984   D517 86 05                               ldaa	#$05
0985   D519 BD D6 09                            jsr  	lampstr_off
0986   D51C                                     SLEEP(2)
0986   D51C BD DA A0    
0986   D51F 02          
0987   D520 5A                                  decb
0988   D521                             eqend
0988   D521             
0988   D521             
0988   D521~                            eqend
0988   D521~                            eqend
0988   D521~                            eqend
0988   D521             
0988   D521 26 E5       
0988   D523             
0988   D523~                            eqend
0988   D523~                            eqend
0988   D523             
0989   D523 39                          rts
0990   D524             			
0991   D524 CE D8 38    disp_hy_score	ldx	#msg_top_wizard
0992   D527 BD D2 A0                    jsr	ani_msg_letters
0993   D52A 86 7F                       ldaa	#$7F
0994   D52C BD EA 46                    jsr	clr_dis_masks12
0995   D52F BD EB BE                    jsr	show_hstd
0996   D532 D6 7A                       ldab	comma_flags
0997   D534 F7 13 B4                    stab	dynamic_disp_buf+9
0998   D537 43                          coma	
0999   D538 7D 00 54                    tst	score_p1_b1
1000   D53B                             ifeq
1000   D53B             
1000   D53B 26 FE       
1001   D53D 97 54                           staa	score_p1_b1
1002   D53F 97 58                           staa	score_p2_b1
1003   D541 86 33                           ldaa	#$33
1004   D543                             endif
1004   D543             
1004   D543             
1004   D543             
1004   D543             
1004   D543             
1004   D543~                            endif
1004   D543~                            endif
1004   D543             
1004   D543~                            endif
1004   D543~                            endif
1004   D543             
1004   D53C             
1004   D53C 06          
1004   D53D             
1004   D53D             
1004   D53D~                            endif
1004   D53D~                            endif
1004   D53D~                            endif
1004   D53D             
1004   D543             
1004   D543~                            endif
1004   D543~                            endif
1004   D543             
1005   D543 97 7A                       staa	comma_flags
1006   D545                             SLEEP($60)
1006   D545 BD DA A0    
1006   D548 60          
1007   D549 86 0C                       ldaa	#$0C
1008   D54B B7 13 A7                    staa	hy_unknown_9
1009   D54E CE 13 A8                    ldx	#hy_unknown_a
1010   D551 DF B6                       stx	temp1
1011   D553 CE 01 2E                    ldx	#aud_game1
1012   D556 C6 0C                       ldab	#$0C
1013   D558 BD F0 C3                    jsr	block_copy
1014   D55B CE 13 A7                    ldx	#hy_unknown_9
1015   D55E BD D2 4F                    jsr	gb_0E
1016   D561 BD D2 00                    jsr	slide_l
1017   D564                             SLEEP($A0)
1017   D564 BD DA A0    
1017   D567 A0          
1018   D568 F6 13 B4                    ldab	dynamic_disp_buf+9
1019   D56B D7 7A                       stab	comma_flags
1020   D56D 4F                          clra	
1021   D56E 7E EA 46                    jmp	clr_dis_masks12	
1022   D571             
1023   D571             sw_plumbtilt	BEQR_($FE,$F2,$FF,$C0,$10)	;BEQ_(BIT#80 P #FF) to tilt_kill
1023   D571~            sw_plumbtilt	BEQR_($FE,$F2,$FF,$C0,$10)	;BEQ_(BIT#80 P #FF) to tilt_kill
1023   D571~            sw_plumbtilt	BEQR_($FE,$F2,$FF,$C0,$10)	;BEQ_(BIT#80 P #FF) to tilt_kill
1023   D571             
1023   D571             
1023   D571 5AFEF2FFC067
1023   D577~            sw_plumbtilt	BEQR_($FE,$F2,$FF,$C0,$10)	;BEQ_(BIT#80 P #FF) to tilt_kill
1023   D577~            sw_plumbtilt	BEQR_($FE,$F2,$FF,$C0,$10)	;BEQ_(BIT#80 P #FF) to tilt_kill
1023   D577             
1023   D577             
1024   D577                             EXE_($06)				;CPU Execute Next 6 Bytes
1024   D577~                            EXE_($06)				;CPU Execute Next 6 Bytes
1024   D577~                            EXE_($06)				;CPU Execute Next 6 Bytes
1024   D577             
1024   D577 48          
1024   D578             
1025   D578 CE D5 88                    ldx	#tilt_sleeper
1026   D57B BD DB 48                    jsr	newthread_06
1027   D57E F5                          SND_($15)				;Sound #15
1028   D57F                             JSRD_(tilt_warning)		
1028   D57F 57          
1028   D580 EC F7       
1029   D582                             BEQR_($F0,$09)			;BEQ_TILT to game_tilt
1029   D582~                            BEQR_($F0,$09)			;BEQ_TILT to game_tilt
1029   D582~                            BEQR_($F0,$09)			;BEQ_TILT to game_tilt
1029   D582             
1029   D582             
1029   D582 5A F0 7C    
1029   D585~                            BEQR_($F0,$09)			;BEQ_TILT to game_tilt
1029   D585~                            BEQR_($F0,$09)			;BEQ_TILT to game_tilt
1029   D585             
1029   D585             
1030   D585                             SOL_(GI_RELAY_PF_ON)		; Sol#6:gi_relay_pf
1030   D585 31 F6       
1031   D587             tilt_kill		KILL_					;Remove This Thread
1031   D587 03          
1032   D588             
1033   D588 3F          tilt_sleeper	swi	
1034   D589                             PRI_($C0)				;Priority=#C0
1034   D589 52 C0       
1035   D58B                             SLEEP_(24)
1035   D58B~                            SLEEP_(24)
1035   D58B~                            SLEEP_(24)
1035   D58B             
1035   D58B 53 18       
1035   D58D             
1036   D58D                             KILL_					;Remove This Thread
1036   D58D 03          
1037   D58E             
1038   D58E             game_tilt		SOL_(GI_RELAY_PF_ON)		; Sol#6:gi_relay_pf
1038   D58E 31 F6       
1039   D590                             PRI_($A0)				;Priority=#A0
1039   D590 52 A0       
1040   D592                             REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
1040   D592 55 08 00    
1041   D595                             JSRR_(clear_ui)			
1041   D595~                            JSRR_(clear_ui)			
1041   D595~                            JSRR_(clear_ui)			
1041   D595             
1041   D595~                            JSRR_(clear_ui)			
1041   D595~                            JSRR_(clear_ui)			
1041   D595             
1041   D595             
1041   D595 90          
1041   D596 45          
1042   D597                             CPUX_					;Resume CPU Execution
1042   D597 04          
1043   D598 CE D8 50                    ldx	#msg_tilt
1044   D59B BD D2 96                    jsr	copy_msg_full
1045   D59E BD D2 D7                    jsr	clr_alpha_set_b1
1046   D5A1 86 31                       ldaa	#$31
1047   D5A3                             begin
1047   D5A3             
1048   D5A3 BD D2 E5                        jsr	invert_alphamsk
1049   D5A6                                 SLEEP($06)
1049   D5A6 BD DA A0    
1049   D5A9 06          
1050   D5AA 4A                              deca	
1051   D5AB                             eqend
1051   D5AB             
1051   D5AB             
1051   D5AB~                            eqend
1051   D5AB~                            eqend
1051   D5AB~                            eqend
1051   D5AB             
1051   D5AB 26 F6       
1051   D5AD             
1051   D5AD~                            eqend
1051   D5AD~                            eqend
1051   D5AD             
1052   D5AD CE 00 00                    ldx	#0000
1053   D5B0 FF 11 98                    stx	cur_spell_pos
1054   D5B3 3F                          swi	
1055   D5B4                             JSRDR_(setup_msg_endptr)
1055   D5B4~                            JSRDR_(setup_msg_endptr)
1055   D5B4~                            JSRDR_(setup_msg_endptr)
1055   D5B4             
1055   D5B4~                            JSRDR_(setup_msg_endptr)
1055   D5B4~                            JSRDR_(setup_msg_endptr)
1055   D5B4             
1055   D5B4             
1055   D5B4 AC          
1055   D5B5 BF          
1056   D5B6                             JSRDR_(stab_all_alphmsk)
1056   D5B6~                            JSRDR_(stab_all_alphmsk)
1056   D5B6~                            JSRDR_(stab_all_alphmsk)
1056   D5B6             
1056   D5B6~                            JSRDR_(stab_all_alphmsk)
1056   D5B6~                            JSRDR_(stab_all_alphmsk)
1056   D5B6             
1056   D5B6             
1056   D5B6 AD          
1056   D5B7 32          
1057   D5B8                             RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
1057   D5B8             
1057   D5B8 51 60       
1057   D5BA~                            RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
1057   D5BA~                            RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
1057   D5BA             
1058   D5BA             end_player		SOL_(GI_RELAY_PF_OFF,PF_CENTER_FLASH_OFF,BB_LEFT_FLASH_OFF,BB_RIGHT_FLASH_OFF)		
ERROR: splbn_l0.asm line 1058: Label not found: (PF_CENTER_FLASH_FF)
ERROR: splbn_l0.asm line 1058: Label not found: (FF)
ERROR: splbn_l0.asm line 1058: Label not found: (BB_LEFT_FLASH_OF)
ERROR: splbn_l0.asm line 1058: Label not found: (BB_RIGHT_FLASH_OF)
ERROR: splbn_l0.asm line 1058: Label not found: (F)
1058   D5BA 370600000000
1058   D5C0 0000
1059   D5C2                             PRI_($00)				;Priority=#00
1059   D5C2 52 00       
1060   D5C4                             JSRDR_(save_playerdata)		
1060   D5C4~                            JSRDR_(save_playerdata)		
1060   D5C4~                            JSRDR_(save_playerdata)		
1060   D5C4             
1060   D5C4~                            JSRDR_(save_playerdata)		
1060   D5C4~                            JSRDR_(save_playerdata)		
1060   D5C4             
1060   D5C4             
1060   D5C4 A0          
1060   D5C5 15          
1061   D5C6                             JSRD_(update_commas)		
1061   D5C6 57          
1061   D5C7 DC 1C       
1062   D5C9 5C                          JMPD_(outhole_main)
1062   D5CA EB 56       
1063   D5CC             			
1064   D5CC             start_play		;do stuff here for gameplay
1065   D5CC 3F                          swi
1066   D5CD                             RSET0_(grp_reds)		;Turn on all reds
1066   D5CD             
1066   D5CD 18 10       
1067   D5CF                             SLEEP_(90)
1067   D5CF~                            SLEEP_(90)
1067   D5CF~                            SLEEP_(90)
1067   D5CF             
1067   D5CF 53 5A       
1067   D5D1             
1068   D5D1                             BEGIN_
1068   D5D1             
1069   D5D1                                 RCLR1L0_(grp_reds)
1069   D5D1             
1069   D5D1 1C 10       
1070   D5D3                                 SLEEP_(30)
1070   D5D3~                                SLEEP_(30)
1070   D5D3~                                SLEEP_(30)
1070   D5D3             
1070   D5D3 53 1E       
1070   D5D5             
1071   D5D5                             EQEND_($F5,grp_reds)		
1071   D5D5             
1071   D5D5 5B F5 10 FF 
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9             
1071   D5D9             
1071   D5D9             
1071   D5D9             
1071   D5D9             
1071   D5D9             
1071   D5D9             
1071   D5D8             
1071   D5D8 F8          
1071   D5D9             
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9             
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9~                            EQEND_($F5,grp_reds)		
1071   D5D9             
1072   D5D9                             ;when the player is out of reds, end the round
1073   D5D9                             JMPR_(end_player)
1073   D5D9~                            JMPR_(end_player)
1073   D5D9~                            JMPR_(end_player)
1073   D5D9             
1073   D5D9~                            JMPR_(end_player)
1073   D5D9~                            JMPR_(end_player)
1073   D5D9             
1073   D5D9             
1073   D5D9 8F          
1073   D5DA DF          
1074   D5DB             
1075   D5DB 39          save_playerdata rts
1076   D5DC             
1077   D5DC             
1078   D5DC             clear_ui		JSRD_(clr_dis_masks)				
1078   D5DC 57          
1078   D5DD EA 41       
1079   D5DF                             EXE_			
1079   D5DF             
1079   D5DF 44          
1080   D5E0 7C 00 E4                        inc	flag_tilt			;turn OFF the shooters 
1081   D5E3 D6 E9                           ldab	player_up
1082   D5E5 BD EB 74                        jsr	saveplayertobuffer
1083   D5E8 D6 E9                           ldab	player_up
1084   D5EA                             EXEEND_
1084   D5EA             
1084   D5EA             
1084   D5EA             
1084   D5EA             
1084   D5EA~                            EXEEND_
1084   D5EA~                            EXEEND_
1084   D5EA             
1084   D5DF             
1084   D5DF 4C          
1084   D5E0             
1084   D5EA             
1084   D5EA~                            EXEEND_
1084   D5EA~                            EXEEND_
1084   D5EA             
1085   D5EA                             JSRD_(resetplayerdata)		
1085   D5EA 57          
1085   D5EB EA FD       
1086   D5ED                             MRTS_					;Macro RTS, Save MRA,MRB
1086   D5ED 02          
1087   D5EE             
1088   D5EE 37          lampstr_on		pshb
1089   D5EF                             begin
1089   D5EF             
1090   D5EF                                 begin
1090   D5EF             
1091   D5EF 08                                  inx  
1092   D5F0 E6 00                               ldab	$00,X
1093   D5F2 C1 FF                               cmpb 	#$ff
1094   D5F4 27 11                               beq	lampstr_rts
1095   D5F6 17                                  tba  
1096   D5F7 84 7F                               anda #$7F
1097   D5F9 DF BA                               stx  temp3
1098   D5FB BD E2 B7                            jsr  lamp_onx
1099   D5FE 5D                                  tstb 
1100   D5FF                                 miend
1100   D5FF             
1100   D5FF             
1100   D5FF~                                miend
1100   D5FF~                                miend
1100   D5FF~                                miend
1100   D5FF             
1100   D5FF 2A EE       
1100   D601             
1100   D601~                                miend
1100   D601~                                miend
1100   D601             
1101   D601                                 SLEEP(2) 
1101   D601 BD DA A0    
1101   D604 02          
1102   D605                             loopend
1102   D605             
1102   D605             
1102   D605~                            loopend
1102   D605~                            loopend
1102   D605~                            loopend
1102   D605             
1102   D605 20 E8       
1102   D607             
1102   D607~                            loopend
1102   D607~                            loopend
1102   D607             
1103   D607             			
1104   D607 33          lampstr_rts		pulb
1105   D608 39                          rts
1106   D609             
1107   D609 37          lampstr_off		pshb
1108   D60A                             begin
1108   D60A             
1109   D60A                                 begin
1109   D60A             
1110   D60A 08                                  inx  
1111   D60B E6 00                               ldab	$00,X
1112   D60D C1 FF                               cmpb 	#$ff
1113   D60F 27 F6                               beq	lampstr_rts
1114   D611 17                                  tba  
1115   D612 84 7F                               anda #$7F
1116   D614 DF BA                               stx  temp3
1117   D616 BD E2 D6                            jsr  lamp_offx
1118   D619 5D                                  tstb 
1119   D61A                                 miend
1119   D61A             
1119   D61A             
1119   D61A~                                miend
1119   D61A~                                miend
1119   D61A~                                miend
1119   D61A             
1119   D61A 2A EE       
1119   D61C             
1119   D61C~                                miend
1119   D61C~                                miend
1119   D61C             
1120   D61C                                 SLEEP(2)   
1120   D61C BD DA A0    
1120   D61F 02          
1121   D620                             loopend
1121   D620             
1121   D620             
1121   D620~                            loopend
1121   D620~                            loopend
1121   D620~                            loopend
1121   D620             
1121   D620 20 E8       
1121   D622             
1121   D622~                            loopend
1121   D622~                            loopend
1121   D622             
1122   D622             		
1123   D622 85          lampsweep		.db lamp_2xl+$80
1124   D623 86                          .db lamp_3xl+$80
1125   D624 87                          .db lamp_5xl+$80
1126   D625 08 9F                       .db lamp_troll1,lamp_demon6+$80
1127   D627 434445464748                .db lamp_red1,lamp_red2,lamp_red3,lamp_red4,lamp_red5,lamp_red6,lamp_red7,lamp_red8,lamp_red9,lamp_gargll,lamp_gargbr+$80
1127   D62D 494A4B0A9D
1128   D632 554C4D4E4F50                .db lamp_hand1,lamp_axe1,lamp_axe2,lamp_axe3,lamp_axe4,lamp_axe5,lamp_axe6,lamp_axe7,lamp_axe8,lamp_axe9,lamp_hand2+$80
1128   D638 51525354D6
1129   D63D 0B 9C                       .db lamp_warlokl,lamp_ekr+$80
1130   D63F 0C1B00010203                .db lamp_bkl,lamp_bkr,lamp_wiz1,lamp_wiz2,lamp_wiz3,lamp_wiz4,lamp_wiz5+$80
1130   D645 84
1131   D646 0D 9A                       .db lamp_ekl,lamp_warlokr+$80
1132   D648 4238393A3B3C                .db lamp_extrawiz,lamp_500,lamp_1k,lamp_2k,lamp_4k,lamp_8k,lamp_16k,lamp_32k,lamp_2xu,lamp_3xu,lamp_5xu+$80
1132   D64E 3D3E3F40C1
1133   D653 202122232425                .db lamp_gargtla,lamp_demon1a,lamp_troll2a,lamp_demon2a,lamp_troll3a,lamp_demon3a,lamp_troll4a,lamp_demon4a,lamp_troll5a,lamp_demon5a,lamp_troll6a,lamp_gargtra+$80
1133   D659 262728292AAB
1134   D65F 0E0F10111213                .db lamp_gargtl,lamp_demon1,lamp_troll2,lamp_demon2,lamp_troll3,lamp_demon3,lamp_troll4,lamp_demon4,lamp_troll5,lamp_demon5,lamp_troll6,lamp_gargtr+$80
1134   D665 141516171899
1135   D66B FF                          .db $ff
1136   D66C             
1137   D66C 93          switchtable		.db sf_wml7+sf_enabled+swtype3 				        \.dw sw_plumbtilt   ;(1) plumbtilt
1137   D66D D5 71       
1138   D66F 71                          .db sf_code+sf_tilt+sf_gameover+sf_enabled+swtype1	\.dw sw_2p_start	;(2) 2p_start
1138   D670 D1 8C       
1139   D672 71                          .db sf_code+sf_tilt+sf_gameover+sf_enabled+swtype1	\.dw sw_1p_start	;(3) 1p_start
1139   D673 D1 8B       
1140   D675 F2                          .db sf_wml7+sf_tilt+sf_gameover+sf_enabled+swtype2	\.dw coin_accepted	;(4) coin_r
1140   D676 E9 2E       
1141   D678 F2                          .db sf_wml7+sf_tilt+sf_gameover+sf_enabled+swtype2	\.dw coin_accepted	;(5) coin_c
1141   D679 E9 2E       
1142   D67B F2                          .db sf_wml7+sf_tilt+sf_gameover+sf_enabled+swtype2	\.dw coin_accepted	;(6) coin_l
1142   D67C E9 2E       
1143   D67E 71                          .db sf_code+sf_tilt+sf_gameover+sf_enabled+swtype1	\.dw reset			;(7) slam
1143   D67F D8 59       
1144   D681 71                          .db sf_code+sf_tilt+sf_gameover+sf_enabled+swtype1	\.dw sw_hstd_res	;(8) hstd_res
1144   D682 D1 66       
1145   D684 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_troll_1		;(9) Troll #1
1145   D685 D3 07       
1146   D687 01                          .db sf_code+sf_disabled+swtype1				        \.dw sw_notused_1	;(10)
1146   D688 D3 03       
1147   D68A 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_gargoyle_bl	;(11) Lower Left Gargoyle
1147   D68B D3 07       
1148   D68D 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_warlok_l	;(12) Left Warlok
1148   D68E D3 07       
1149   D690 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_blknite_l	;(13) Left Black Knight
1149   D691 D3 07       
1150   D693 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_evilking_l	;(14) Left Evil King
1150   D694 D3 07       
1151   D696 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_gargoyle_tl	;(15) Top Left Gargoyle
1151   D697 D3 07       
1152   D699 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_demon_1		;(16) Demon #1
1152   D69A D3 07       
1153   D69C 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_troll_2		;(17) Troll #2
1153   D69D D3 07       
1154   D69F 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_demon_2		;(18) Demon #2
1154   D6A0 D3 07       
1155   D6A2 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_troll_3		;(19) Troll #3
1155   D6A3 D3 07       
1156   D6A5 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_demon_3		;(20) Demon #3
1156   D6A6 D3 07       
1157   D6A8 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_troll_4		;(21) Troll #4
1157   D6A9 D3 07       
1158   D6AB 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_demon_4		;(22) Demon #4
1158   D6AC D3 07       
1159   D6AE 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_troll_5		;(23) Troll #5
1159   D6AF D3 07       
1160   D6B1 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_demon_5		;(24) Demon #5
1160   D6B2 D3 07       
1161   D6B4 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_troll_6		;(25) Troll #6
1161   D6B5 D3 07       
1162   D6B7 96                          .db sf_wml7+sf_enabled+swtype7				        \.dw sw_demon_6		;(26) Demon #6
1162   D6B8 D3 07       
1163   D6BA 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_gargoyle_tr	;(27) Top Right Gargoyle
1163   D6BB D3 07       
1164   D6BD 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_warlok_r	;(28) Right Warlok
1164   D6BE D3 07       
1165   D6C0 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_blknight_r	;(29) Right Black Knight
1165   D6C1 D3 07       
1166   D6C3 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_evilking_r	;(30) Right Evil King
1166   D6C4 D3 07       
1167   D6C6 91                          .db sf_wml7+sf_enabled+swtype1				        \.dw sw_gargoyle_br	;(31) Bottom Right Gargoyle
1167   D6C7 D3 07       
1168   D6C9 B3                          .db sf_wml7+sf_gameover+sf_enabled+swtype3	        \.dw sw_spell		;(32) Cast Spell
1168   D6CA D3 08       
1169   D6CC 94                          .db sf_wml7+sf_enabled+swtype4				        \.dw sw_l_shooter	;(33) l_shooter
1169   D6CD D3 09       
1170   D6CF 94                          .db sf_wml7+sf_enabled+swtype4				        \.dw sw_r_shooter	;(34) r_shooter
1170   D6D0 D3 09       
1171   D6D2             switchtable_end
1172   D6D2             
1173   D6D2             
1174   D6D2             
1175   D6D2             
1176   D6D2             lamptable		LAMPGROUP(grp_alllamps,lamp_wiz1,lamp_hand2)		;(00) all lamps
1176   D6D2             
1176   D6D2 00 56       
1176   D6D4             
1177   D6D4                             LAMPGROUP(grp_wizard,lamp_wiz1,lamp_wiz5)			;(01) wizard lights
1177   D6D4             
1177   D6D4 00 04       
1177   D6D6             
1178   D6D6                             LAMPGROUP(grp_lowermult,lamp_2xl,lamp_5xl)		    ;(02) lower multipliers
1178   D6D6             
1178   D6D6 05 07       
1178   D6D8             
1179   D6D8                             LAMPGROUP(grp_leftside,lamp_troll1,lamp_ekl)		;(03) left side
1179   D6D8             
1179   D6D8 08 0D       
1179   D6DA             
1180   D6DA                             LAMPGROUP(grp_trip1,lamp_gargtl,lamp_troll2)		;(04) trip 1
1180   D6DA             
1180   D6DA 0E 10       
1180   D6DC             
1181   D6DC                             LAMPGROUP(grp_trip2,lamp_demon2,lamp_demon3)		;(05) trip 2
1181   D6DC             
1181   D6DC 11 13       
1181   D6DE             
1182   D6DE                             LAMPGROUP(grp_trip3,lamp_troll4,lamp_troll5)		;(06) trip 3
1182   D6DE             
1182   D6DE 14 16       
1182   D6E0             
1183   D6E0                             LAMPGROUP(grp_trip4,lamp_demon5,lamp_gargtr)		;(07) trip 4
1183   D6E0             
1183   D6E0 17 19       
1183   D6E2             
1184   D6E2                             LAMPGROUP(grp_dragons,lamp_gargtl,lamp_gargtr)		;(08) Whole top series of lamsp
1184   D6E2             
1184   D6E2 0E 19       
1184   D6E4             
1185   D6E4                             LAMPGROUP(grp_rightside,lamp_warlokr,lamp_demon6)	;(09) right side
1185   D6E4             
1185   D6E4 1A 1F       
1185   D6E6             
1186   D6E6                             LAMPGROUP(grp_allloop,lamp_troll1,lamp_demon6) 		;(0A) whole loop
1186   D6E6             
1186   D6E6 08 1F       
1186   D6E8             
1187   D6E8                             LAMPGROUP(grp_seriesa,lamp_gargtla,lamp_gargtra)	;(0B) A series
1187   D6E8             
1187   D6E8 20 2B       
1187   D6EA             
1188   D6EA                             LAMPGROUP(grp_seriesb,lamp_gargtlb,lamp_gargtra)	;(0C) B series
1188   D6EA             
1188   D6EA 2C 2B       
1188   D6EC             
1189   D6EC                             LAMPGROUP(grp_bonus,lamp_500,lamp_32k)			    ;(0D) bonus
1189   D6EC             
1189   D6EC 38 3E       
1189   D6EE             
1190   D6EE                             LAMPGROUP(grp_uppermult,lamp_2xu,lamp_5xu)		    ;(0E) upper multipliers
1190   D6EE             
1190   D6EE 3F 41       
1190   D6F0             
1191   D6F0                             LAMPGROUP(grp_bonmult,lamp_500,lamp_5xu)			;(0F) bonus + multipliers
1191   D6F0             
1191   D6F0 38 41       
1191   D6F2             
1192   D6F2                             LAMPGROUP(grp_reds,lamp_red1,lamp_red9)			    ;(10) red power lamps
1192   D6F2             
1192   D6F2 43 4B       
1192   D6F4             
1193   D6F4                             LAMPGROUP(grp_axe,lamp_axe1,lamp_axe9)			    ;(11) axe lamps
1193   D6F4             
1193   D6F4 4C 54       
1193   D6F6             
1194   D6F6                             LAMPGROUP(grp_shield,lamp_hand1,lamp_hand2)		    ;(12) hands
1194   D6F6             
1194   D6F6 55 56       
1194   D6F8             
1195   D6F8                             LAMPGROUP(grp_axehands,lamp_axe1,lamp_hand2)		;(13) axe + hands
1195   D6F8             
1195   D6F8 4C 56       
1195   D6FA             
1196   D6FA             
1197   D6FA             
1198   D6FA 22 30 3C    soundtable		.db $22, $30,	$3C		;(00) 
1199   D6FD 23 10 3B                    .db $23, $10,	$3B		;(01) 
1200   D700 22 20 3A                    .db $22, $20,	$3A		;(02) 
1201   D703 D7 5C                       .dw c_sound1\	.db $FF	;(03) 
1201   D705 FF          
1202   D706 D7 57                       .dw c_sound2\	.db $FF	;(04) 
1202   D708 FF          
1203   D709 D7 67                       .dw c_sound3\	.db $FF	;(05) 
1203   D70B FF          
1204   D70C 22 30 36                    .db $22, $30,	$36		;(06) 
1205   D70F 22 20 35                    .db $22, $20,	$35		;(07) 
1206   D712 22 20 34                    .db $22, $20,	$34		;(08) 
1207   D715 D7 62                       .dw c_sound4\	.db $FF	;(09) 
1207   D717 FF          
1208   D718 22 20 30                    .db $22, $20,	$30		;(0A) 
1209   D71B 22 20 2F                    .db $22, $20,	$2F		;(0B) 
1210   D71E 22 20 2E                    .db $22, $20,	$2E		;(0C) 
1211   D721 22 20 2D                    .db $22, $20,	$2D		;(0D) 
1212   D724 22 20 2C                    .db $22, $20,	$2C		;(0E) 
1213   D727 22 20 2B                    .db $22, $20,	$2B		;(0F) 
1214   D72A 83 50 2A                    .db $83, $50,	$2A		;(10) 
1215   D72D 22 20 29                    .db $22, $20,	$29		;(11) 
1216   D730 83 40 32                    .db $83, $40,	$32		;(12) 
1217   D733 22 20 28                    .db $22, $20,	$28		;(13) 
1218   D736 22 20 27                    .db $22, $20,	$27		;(14) 
1219   D739 23 20 3D                    .db $23, $20,	$3D		;(15) 
1220   D73C 22 20 26                    .db $22, $20,	$26		;(16) 
1221   D73F 22 20 25                    .db $22, $20,	$25		;(17) 
1222   D742 24 20 3E                    .db $24, $20,	$3E		;(18) 
1223   D745 22 20 24                    .db $22, $20,	$24		;(19) 
1224   D748 22 20 23                    .db $22, $20,	$23		;(1A) 
1225   D74B 22 20 22                    .db $22, $20,	$22		;(1B) 
1226   D74E 22 20 31                    .db $22, $20,	$31		;(1C) 
1227   D751 22 20 21                    .db $22, $20,	$21		;(1D) 
1228   D754 23 30 20                    .db $23, $30,	$20		;(1E) 
1229   D757             
1230   D757 2192383E3F  c_sound2		.db $21,$92,$38,$3E,$3F
1231   D75C             
1232   D75C 26F52EC02D3Fc_sound1		.db $26,$F5,$2E,$C0,$2D,$3F
1233   D762             
1234   D762 26FF372D3F  c_sound4		.db $26,$FF,$37,$2D,$3F
1235   D767             
1236   D767 26FF242D3F  c_sound3		.db $26,$FF,$24,$2D,$3F
1237   D76C             
1238   D76C             ;*************************************************************
1239   D76C             ; Character Sprites
1240   D76C             ;
1241   D76C             ; J H F E  D C B A   X X N P  R M G K
1242   D76C             ;
1243   D76C             ;   ---a---
1244   D76C             ;  |\  |  /|
1245   D76C             ;  f h j k b
1246   D76C             ;  |  \|/  |
1247   D76C             ;   -g- -m-
1248   D76C             ;  |  /|\  |
1249   D76C             ;  e r p n c
1250   D76C             ;  |/  |  \|
1251   D76C             ;   ---d---
1252   D76C             ;
1253   D76C             ;*************************************************************
1254   D76C             
1255   D76C 00 00       character_defs	.dw $0000   ;SPACE (00)
1256   D76E 37 06       			.dw $3706	;A (01)
1257   D770 8F 14       			.dw $8F14	;B (02)
1258   D772 39 00       			.dw $3900	;C (03)
1259   D774 4F 10       			.dw $4F10	;D (04)
1260   D776 39 02       			.dw $3902	;E (05)
1261   D778 31 02       			.dw $3102	;F (06)
1262   D77A 3D 04       			.dw $3D04	;G (07)
1263   D77C 36 06       			.dw $3606	;H (08)
1264   D77E 89 10       			.dw $8910	;I (09)
1265   D780 1E 00       			.dw $1E00	;J (0A)
1266   D782 30 23       			.dw $3023	;K (0B)
1267   D784 38 00       			.dw $3800	;L (0C)
1268   D786 76 01       			.dw $7601	;M (0D)
1269   D788 76 20       			.dw $7620	;N (0E)
1270   D78A 3F 00       			.dw $3F00	;O (0F)
1271   D78C 31 03       			.dw $3103	;P (10)
1272   D78E 3F 20       			.dw $3F20	;Q (11)
1273   D790 31 23       			.dw $3123	;R (12)
1274   D792 4D 04       			.dw $4D04	;S (13)
1275   D794 81 10       			.dw $8110	;T (14)
1276   D796 3E 00       			.dw $3E00	;U (15)
1277   D798 30 09       			.dw $3009	;V (16)
1278   D79A 36 28       			.dw $3628	;W (17)
1279   D79C 40 29       			.dw $4029	;X (18)
1280   D79E 22 16       			.dw $2216	;Y (19)
1281   D7A0 09 09       			.dw $0909	;Z (1A)
1282   D7A2 3F 09       			.dw $3F09	;0 (1B)
1283   D7A4 80 10       			.dw $8010	;1 (1C)
1284   D7A6 0B 0C       			.dw $0B0C	;2 (1D)
1285   D7A8 0D 05       			.dw $0D05	;3 (1E)
1286   D7AA 26 06       			.dw $2606	;4 (1F)
1287   D7AC 29 22       			.dw $2922	;5 (20)
1288   D7AE 3D 06       			.dw $3D06	;6 (21)
1289   D7B0 07 00       			.dw $0700	;7 (22)
1290   D7B2 3F 06       			.dw $3F06	;8 (23)
1291   D7B4 2F 06       			.dw $2F06	;9 (24)
1292   D7B6 82 00       			.dw $8200	;quot (25)
1293   D7B8 00 06       			.dw $0006	;- (26)
1294   D7BA 40 20       			.dw $4020	;\ (27)
1295   D7BC 80 10       			.dw $8010	;| (28)
1296   D7BE 00 09       			.dw $0009	;/ (29)
1297   D7C0 BB 04       			.dw $BB04	;@ (2A)
1298   D7C2 40 0A       			.dw $400A	;-> (2B)
1299   D7C4 C0 3F       			.dw $C03F	;* (2C)
1300   D7C6 00 25       			.dw $0025	;<- (2D)
1301   D7C8 08 00       			.dw $0800	;_ (2E)
1302   D7CA             
1303   D7CA 2817090C0C09msg_williams	.db $28,$17,$09,$0C,$0C,$09,$01,$0D,$13
1303   D7D0 010D13
1304   D7D3             
1305   D7D3 0B050C050314msg_electronics	.db $0B,$05,$0C,$05,$03,$14,$12,$0F,$0E,$09,$03,$13
1305   D7D9 120F0E090313
1306   D7DF             
1307   D7DF 281012051305msg_presents	.db $28,$10,$12,$05,$13,$05,$0E,$14,$13
1307   D7E5 0E1413
1308   D7E8             
1309   D7E8 0C1310050C0Cmsg_spellbinder	.db $0C,$13,$10,$05,$0C,$0C,$02,$09,$0E,$04,$05,$12,$00
1309   D7EE 02090E04051200
1310   D7F5             
1311   D7F5 170312050409msg_credit		.db $17,$03,$12,$05,$04,$09,$14,$13
1311   D7FB 1413
1312   D7FD             
1313   D7FD 0C0007010D05msg_gameover	.db $0C,$00,$07,$01,$0D,$05,$00,$00,$0F,$16,$05,$12,$00
1313   D803 00000F16051200
1314   D80A             
1315   D80A 26100C011905msg_player		.db $26,$10,$0C,$01,$19,$05,$12
1315   D810 12
1316   D811             
1317   D811 04020F0F0D  msg_boom		.db $04,$02,$0F,$0F,$0D
1318   D816             
1319   D816 270405131412msg_destroy		.db $27,$04,$05,$13,$14,$12,$0F,$19
1319   D81C 0F19
1320   D81E             
1321   D81E 27050E050D09msg_enemies		.db $27,$05,$0E,$05,$0D,$09,$05,$13
1321   D824 0513
1322   D826             
1323   D826 1A020114140Cmsg_battlethe	.db $1A,$02,$01,$14,$14,$0C,$05,$00,$14,$08,$05
1323   D82C 0500140805
1324   D831             
1325   D831 36041201070Fmsg_dragon		.db $36,$04,$12,$01,$07,$0F,$0E
1325   D837 0E
1326   D838             
1327   D838 1A140F100017msg_top_wizard	.db $1A,$14,$0F,$10,$00,$17,$09,$1A,$01,$12,$04
1327   D83E 091A011204
1328   D843             
1329   D843 2C00002C0D08msg_defhs		.db $2C,$00,$00,$2C,$0D,$08,$01,$16,$0F,$03,$2C,$00,$00
1329   D849 01160F032C0000
1330   D850             
1331   D850 282C0014090Cmsg_tilt		.db $28,$2C,$00,$14,$09,$0C,$14,$00,$2C
1331   D856 14002C
1332   D859             
1333   D859             
1334   D859             ;*****************************************************************************
1335   D859             ;* Williams Spellbinder System Code
1336   D859             ;***************************************************************************
1337   D859             ;* Code copyright Williams Electronic Games Inc.
1338   D859             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
1339   D859             ;* For use with TASMx Assembler
1340   D859             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
1341   D859             ;* for more information.
1342   D859             ;* You may redistribute this file as long as this header remains intact.
1343   D859             ;***************************************************************************
1344   D859             ;* This file is set up with tab stops at 6
1345   D859             ;*****************************************************************************
1346   D859             
1347   D859             
1348   D859             
1349   D859             ;*****************************************************************************
1350   D859             ;* Some Global Equates
1351   D859             ;*****************************************************************************
1352   D859             
1353   D859             irq_per_minute =	$0EFF
1354   D859             
1355   D859             ;*****************************************************************************
1356   D859             ;*Program starts at $e800 for standard games... we can expand this later..
1357   D859             ;*****************************************************************************
1358   D859             	;.org $E730
1359   D859             
1360   D859             
1361   D859             
1362   D859             ;**************************************
1363   D859             ;* Main Entry from Reset
1364   D859             ;**************************************
1365   D859 0F          reset		sei	
1366   D85A 8E E2 94    			lds	#pia_ddr_data-1		;Point stack to start of init data
1367   D85D C6 0C       			ldab	#$0C				;Number of PIA sections to initialize
1368   D85F CE 21 00    			ldx	#pia_sound_data		;Start with the lowest PIA
1369   D862 86 04       			ldaa	#$04
1370   D864 A7 01       			staa	pia_control,X		;Select control register
1371   D866 86 7F       			ldaa	#$7F				
1372   D868 A7 00       			staa	pia_pir,X
1373   D86A DF B6       			stx	temp1
1374   D86C 9C B6       			cpx	temp1
1375   D86E             			ifeq
1375   D86E             
1375   D86E 26 FE       
1376   D870             				begin
1376   D870             
1377   D870 DE B6       nxt_pia				ldx	temp1			;Get next PIA address base
1378   D872             					begin
1378   D872             
1379   D872 6F 01       						clr	pia_control,X	;Initialize all PIA data direction registers
1380   D874 32          						pula				;Get DDR data
1381   D875 A7 00       						staa	pia_pir,X
1382   D877 32          						pula	
1383   D878 A7 01       						staa	pia_control,X	;Get Control Data
1384   D87A 8C 21 00    						cpx	#pia_sound_data	;This is the last PIA to do in shooter games
1385   D87D             						ifne
1385   D87D             
1385   D87D 27 FE       
1386   D87F 6F 00       							clr	pia_pir,X		;If we are on the sound PIA, then clear the PIR 
1387   D881             						endif
1387   D881             
1387   D881             
1387   D881             
1387   D881             
1387   D881             
1387   D881~            						endif
1387   D881~            						endif
1387   D881             
1387   D881~            						endif
1387   D881~            						endif
1387   D881             
1387   D87E             
1387   D87E 02          
1387   D87F             
1387   D87F             
1387   D87F~            						endif
1387   D87F~            						endif
1387   D87F~            						endif
1387   D87F             
1387   D881             
1387   D881~            						endif
1387   D881~            						endif
1387   D881             
1388   D881 08          						inx	
1389   D882 08          						inx	
1390   D883 5A          						decb	
1391   D884 27 1B       						beq	init_done
1392   D886 C5 01       						bitb	#$01
1393   D888             					eqend
1393   D888             
1393   D888             
1393   D888~            					eqend
1393   D888~            					eqend
1393   D888~            					eqend
1393   D888             
1393   D888 26 E8       
1393   D88A             
1393   D88A~            					eqend
1393   D88A~            					eqend
1393   D88A             
1394   D88A 96 B6       					ldaa	temp1			;Get current PIA address MSB
1395   D88C 48          					asla	
1396   D88D 84 1F       					anda	#$1F			;Move to next PIA
1397   D88F             					ifeq
1397   D88F             
1397   D88F 26 FE       
1398   D891 86 40       						ldaa	#$40
1399   D893 97 B6       						staa	temp1
1400   D895 20 D9       						bra	nxt_pia
1401   D897             					endif
1401   D897             
1401   D897             
1401   D897             
1401   D897             
1401   D897             
1401   D897~            					endif
1401   D897~            					endif
1401   D897             
1401   D897~            					endif
1401   D897~            					endif
1401   D897             
1401   D890             
1401   D890 06          
1401   D891             
1401   D891             
1401   D891~            					endif
1401   D891~            					endif
1401   D891~            					endif
1401   D891             
1401   D897             
1401   D897~            					endif
1401   D897~            					endif
1401   D897             
1402   D897 8A 20       					oraa	#$20
1403   D899 97 B6       					staa	temp1			;Store it
1404   D89B             				loopend
1404   D89B             
1404   D89B             
1404   D89B~            				loopend
1404   D89B~            				loopend
1404   D89B~            				loopend
1404   D89B             
1404   D89B 20 D3       
1404   D89D             
1404   D89D~            				loopend
1404   D89D~            				loopend
1404   D89D             
1405   D89D             			endif
1405   D89D             
1405   D89D             
1405   D89D             
1405   D89D             
1405   D89D             
1405   D89D~            			endif
1405   D89D~            			endif
1405   D89D             
1405   D89D~            			endif
1405   D89D~            			endif
1405   D89D             
1405   D86F             
1405   D86F 2D          
1405   D870             
1405   D870             
1405   D870~            			endif
1405   D870~            			endif
1405   D870~            			endif
1405   D870             
1405   D89D             
1405   D89D~            			endif
1405   D89D~            			endif
1405   D89D             
1406   D89D 7E F0 27    			jmp	diag					;NMI Entry
1407   D8A0             
1408   D8A0             ;***************************************************
1409   D8A0             ;* System Checksum #1: Set to make ROM csum from
1410   D8A0             ;*                     $E000-$EFFF equal to $00
1411   D8A0             ;***************************************************		
1412   D8A0             	
1413   D8A0 C0          csum1	    .db $C0 	 
1414   D8A1             
1415   D8A1             
1416   D8A1             ;***************************************************************
1417   D8A1             ;* PIA initialization is done now, set up the vm etc.
1418   D8A1             ;***************************************************************			
1419   D8A1 CE 13 FF    init_done		ldx	#$13FF				;\
1420   D8A4 35          			txs						;|
1421   D8A5             			begin						;|
1421   D8A5             
1422   D8A5 6F 00       				clr	$00,X				;Clear RAM 1000-13FF
1423   D8A7 09          				dex					;|
1424   D8A8 8C 0F FF    				cpx	#$0FFF			;|
1425   D8AB             			eqend						;/
1425   D8AB             
1425   D8AB             
1425   D8AB~            			eqend						;/
1425   D8AB~            			eqend						;/
1425   D8AB~            			eqend						;/
1425   D8AB             
1425   D8AB 26 F8       
1425   D8AD             
1425   D8AD~            			eqend						;/
1425   D8AD~            			eqend						;/
1425   D8AD             
1426   D8AD BD DF 85    			jsr	setup_vm_stack			;Initially Set up the VM
1427   D8B0 B6 D0 55    			ldaa	gr_lampflashrate			;Get Lamp Flash Rate
1428   D8B3 97 D1       			staa	lamp_flash_rate
1429   D8B5 CE 11 00    			ldx	#switch_queue
1430   D8B8 DF B2       			stx	switch_queue_pointer
1431   D8BA CE 11 18    			ldx	#sol_queue				;Works from top down
1432   D8BD DF B4       			stx	solenoid_queue_pointer		;Set up Solenoid Buffer Pointer
1433   D8BF CE 01 7D    			ldx	#adj_cmoscsum			;CMOS Checksum
1434   D8C2 BD DF B6    			jsr	cmosinc_a				;CMOS,X++ -> A
1435   D8C5 BD DF C6    			jsr	cmosinc_b				;CMOS,X++ -> B
1436   D8C8 1B          			aba	
1437   D8C9 81 57       			cmpa	#$57					;CSUM CMOS RAM
1438   D8CB             			ifne
1438   D8CB             
1438   D8CB 27 FE       
1439   D8CD BD DF E0    clear_all		jsr	factory_zeroaudits		;Restore Factory Settings and Zero Audit Totals
1440   D8D0             			endif
1440   D8D0             
1440   D8D0             
1440   D8D0             
1440   D8D0             
1440   D8D0             
1440   D8D0~            			endif
1440   D8D0~            			endif
1440   D8D0             
1440   D8D0~            			endif
1440   D8D0~            			endif
1440   D8D0             
1440   D8CC             
1440   D8CC 03          
1440   D8CD             
1440   D8CD             
1440   D8CD~            			endif
1440   D8CD~            			endif
1440   D8CD~            			endif
1440   D8CD             
1440   D8D0             
1440   D8D0~            			endif
1440   D8D0~            			endif
1440   D8D0             
1441   D8D0 CE 01 6E    			ldx	#aud_currentcredits		;Current Credits
1442   D8D3 BD DF B6    			jsr	cmosinc_a				;CMOS,X++ -> A
1443   D8D6 B7 11 9A    			staa	current_credits
1444   D8D9 BD EE D1    			jsr	cmos_a				;CMOS, X -> A Audit 50 Command
1445   D8DC 6F 00       			clr	$00,X
1446   D8DE 6F 01       			clr	$01,X
1447   D8E0 81 15       			cmpa	#$15					;Auto-Cycle?
1448   D8E2             			ifeq
1448   D8E2             
1448   D8E2 26 FE       
1449   D8E4 CE EF 72    				ldx	#st_autocycle			;Set-Up Auto Cycle Mode
1450   D8E7 BD DB 48    				jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
1451   D8EA             			endif
1451   D8EA             
1451   D8EA             
1451   D8EA             
1451   D8EA             
1451   D8EA             
1451   D8EA~            			endif
1451   D8EA~            			endif
1451   D8EA             
1451   D8EA~            			endif
1451   D8EA~            			endif
1451   D8EA             
1451   D8E3             
1451   D8E3 06          
1451   D8E4             
1451   D8E4             
1451   D8E4~            			endif
1451   D8E4~            			endif
1451   D8E4~            			endif
1451   D8E4             
1451   D8EA             
1451   D8EA~            			endif
1451   D8EA~            			endif
1451   D8EA             
1452   D8EA 81 45       			cmpa	#$45
1453   D8EC 27 DF       			beq	clear_all				;Restore Factory Setting/Zero Audits
1454   D8EE 81 35       			cmpa	#$35
1455   D8F0             			ifeq						;Zero Audits
1455   D8F0             
1455   D8F0 26 FE       
1456   D8F2 BD DF D2    				jsr	reset_audits			;(Reset Audits 0100-0165)
1457   D8F5             			endif
1457   D8F5             
1457   D8F5             
1457   D8F5             
1457   D8F5             
1457   D8F5             
1457   D8F5~            			endif
1457   D8F5~            			endif
1457   D8F5             
1457   D8F5~            			endif
1457   D8F5~            			endif
1457   D8F5             
1457   D8F1             
1457   D8F1 03          
1457   D8F2             
1457   D8F2             
1457   D8F2~            			endif
1457   D8F2~            			endif
1457   D8F2~            			endif
1457   D8F2             
1457   D8F5             
1457   D8F5~            			endif
1457   D8F5~            			endif
1457   D8F5             
1458   D8F5 BD E8 C0    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
1459   D8F8 7A 00 7B    			dec	switch_debounced
1460   D8FB BD EA 30    			jsr	clear_displays			;Blank all Player Displays (buffer 0)
1461   D8FE 97 4F       			staa	score_p1_b0+3			;Set player one score to '00'
1462   D900             			;deca
1463   D900             			;staa	p2_ec_b0
1464   D900             			;staa	p1_ec_b0
1465   D900 0E          			cli
1466   D901 FE D0 C6    			ldx	gr_reset_ptr
1467   D904 AD 00       			jsr	$00,X					;jsr GameROM
1468   D906 CE EB E4    			ldx	#powerup_init			;Jump to Game Over Mode
1469   D909 BD DB 48    			jsr	newthread_06			;Start the thread
1470   D90C 7E DA 5E    			jmp	check_threads			;Run the loop
1471   D90F             			
1472   D90F             ;************************************************************************************
1473   D90F             ;* Begin Main Loop - This is the end of all initialization and the start of the loop
1474   D90F             ;*                   that runs consistently to support the VM.
1475   D90F             ;************************************************************************************
1476   D90F CE 00 C9    main		ldx	#vm_base
1477   D912 DF CF       			stx	vm_tail_thread			;Current VM Routine being run
1478   D914 DF CD       			stx	current_thread			;Current VM Routine being run
1479   D916 FE D0 C8    			ldx	gr_mainloop_ptr
1480   D919 AD 00       			jsr	$00,X					;Game ROM:Main Loop Hook
1481   D91B 0F          			sei	
1482   D91C 96 B1       			ldaa	irqcount16				;IRQ Counter, Incremented every 16 IRQ's
1483   D91E 7F 00 B1    			clr	irqcount16				;Reset the counter
1484   D921 0E          			cli	
1485   D922 97 C8       			staa	irqcount				;Put the data into counter holder, use later
1486   D924 96 E7       			ldaa	flags_selftest			;See if we are in test mode
1487   D926             			ifne
1487   D926             
1487   D926 27 FE       
1488   D928 7E D9 A8    				jmp	vm_irqcheck				;If so, then skip a bunch of stuff...
1489   D92B             			endif
1489   D92B             
1489   D92B             
1489   D92B             
1489   D92B             
1489   D92B             
1489   D92B~            			endif
1489   D92B~            			endif
1489   D92B             
1489   D92B~            			endif
1489   D92B~            			endif
1489   D92B             
1489   D927             
1489   D927 03          
1489   D928             
1489   D928             
1489   D928~            			endif
1489   D928~            			endif
1489   D928~            			endif
1489   D928             
1489   D92B             
1489   D92B~            			endif
1489   D92B~            			endif
1489   D92B             
1490   D92B B6 28 01    			ldaa	pia_disp_digit_ctrl		;Check the Advance Switch
1491   D92E             			ifmi
1491   D92E             
1491   D92E 2A FE       
1492   D930 CE ED 37    				ldx	#selftest_entry
1493   D933 BD DB 48    				jsr	newthread_06			;Create the diagnostics thread
1494   D936             			endif
1494   D936             
1494   D936             
1494   D936             
1494   D936             
1494   D936             
1494   D936~            			endif
1494   D936~            			endif
1494   D936             
1494   D936~            			endif
1494   D936~            			endif
1494   D936             
1494   D92F             
1494   D92F 06          
1494   D930             
1494   D930             
1494   D930~            			endif
1494   D930~            			endif
1494   D930~            			endif
1494   D930             
1494   D936             
1494   D936~            			endif
1494   D936~            			endif
1494   D936             
1495   D936 CE 00 00    checkswitch	ldx	#0000
1496   D939             			begin
1496   D939             
1497   D939 A6 9B       				ldaa	switch_b4,X
1498   D93B 43          				coma	
1499   D93C A4 8B       				anda	switch_pending,X
1500   D93E             				ifne
1500   D93E             
1500   D93E 27 FE       
1501   D940 BD DE C4    					jsr	check_sw_close				;Switch Closed?
1502   D943             				endif
1502   D943             
1502   D943             
1502   D943             
1502   D943             
1502   D943             
1502   D943~            				endif
1502   D943~            				endif
1502   D943             
1502   D943~            				endif
1502   D943~            				endif
1502   D943             
1502   D93F             
1502   D93F 03          
1502   D940             
1502   D940             
1502   D940~            				endif
1502   D940~            				endif
1502   D940~            				endif
1502   D940             
1502   D943             
1502   D943~            				endif
1502   D943~            				endif
1502   D943             
1503   D943 A6 9B       				ldaa	switch_b4,X
1504   D945 A4 93       				anda	switch_aux,X
1505   D947             				ifne
1505   D947             
1505   D947 27 FE       
1506   D949 BD DF 1E    					jsr	check_sw_open				;Switch Open?
1507   D94C             				endif
1507   D94C             
1507   D94C             
1507   D94C             
1507   D94C             
1507   D94C             
1507   D94C~            				endif
1507   D94C~            				endif
1507   D94C             
1507   D94C~            				endif
1507   D94C~            				endif
1507   D94C             
1507   D948             
1507   D948 03          
1507   D949             
1507   D949             
1507   D949~            				endif
1507   D949~            				endif
1507   D949~            				endif
1507   D949             
1507   D94C             
1507   D94C~            				endif
1507   D94C~            				endif
1507   D94C             
1508   D94C 08          				inx	
1509   D94D 8C 00 08    				cpx	#$0008
1510   D950             			eqend
1510   D950             
1510   D950             
1510   D950~            			eqend
1510   D950~            			eqend
1510   D950~            			eqend
1510   D950             
1510   D950 26 E7       
1510   D952             
1510   D952~            			eqend
1510   D952~            			eqend
1510   D952             
1511   D952 D6 F2       time		ldab	flag_timer_bip			;Ball Timer Flag
1512   D954             			ifne
1512   D954             
1512   D954 27 FE       
1513   D956 96 C8       				ldaa	irqcount				;Number of IRQ's since last
1514   D958 DE F0       				ldx	minutetimer
1515   D95A BD DF 62    				jsr	xplusa				;X = X + A
1516   D95D DF F0       				stx	minutetimer
1517   D95F 8C 0E FF    				cpx	#irq_per_minute
1518   D962 2B 0B       				bmi	switches				;Not 1 minute yet
1519   D964 5F          				clrb	
1520   D965 D7 F0       				stab	minutetimer				;Clear the Minute Timer
1521   D967 D7 F1       				stab	minutetimer+1
1522   D969 CE 01 26    				ldx	#aud_avgballtime			;AUD: Ball time in Minutes
1523   D96C BD E9 0B    				jsr	ptrx_plus_1				;Add 1 to data at X
1524   D96F             			endif
1524   D96F             
1524   D96F             
1524   D96F             
1524   D96F             
1524   D96F             
1524   D96F~            			endif
1524   D96F~            			endif
1524   D96F             
1524   D96F~            			endif
1524   D96F~            			endif
1524   D96F             
1524   D955             
1524   D955 19          
1524   D956             
1524   D956             
1524   D956~            			endif
1524   D956~            			endif
1524   D956~            			endif
1524   D956             
1524   D96F             
1524   D96F~            			endif
1524   D96F~            			endif
1524   D96F             
1525   D96F CE 11 00    switches	ldx	#switch_queue
1526   D972 9C B2       next_sw		cpx	switch_queue_pointer		;Check Buffer Pointer
1527   D974             			ifne
1527   D974             
1527   D974 27 FE       
1528   D976 A6 00       				ldaa	$00,X					;Command Timer
1529   D978 90 C8       				suba	irqcount				;Subtract our IRQ's
1530   D97A             				iflo						;Ready to run?
1530   D97A             
1530   D97A 22 FE       
1531   D97C DF C4       					stx	sys_temp_w3				;Yes!
1532   D97E A6 01       					ldaa	$01,X					;Encoded Switch #
1533   D980 97 C1       					staa	sw_encoded
1534   D982 7F 00 BC    					clr	sys_temp1
1535   D985 16          					tab	
1536   D986 57          					asrb	
1537   D987 57          					asrb	
1538   D988 57          					asrb	
1539   D989 D7 BD       					stab	sys_temp2
1540   D98B BD DC 09    					jsr	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
1541   D98E D7 BE       					stab	sys_temp3
1542   D990 DE BC       					ldx	sys_temp1
1543   D992 A6 7B       					ldaa	switch_debounced,X
1544   D994 97 C0       					staa	sys_temp5
1545   D996 BD DE 67    					jsr	sw_down
1546   D999 DE C4       					ldx	sys_temp_w3
1547   D99B 24 07       					bcc	sw_break
1548   D99D BD DF 72    					jsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
1549   D9A0 20 D0       					bra	next_sw
1550   D9A2             				endif
1550   D9A2             
1550   D9A2             
1550   D9A2             
1550   D9A2             
1550   D9A2             
1550   D9A2~            				endif
1550   D9A2~            				endif
1550   D9A2             
1550   D9A2~            				endif
1550   D9A2~            				endif
1550   D9A2             
1550   D97B             
1550   D97B 26          
1550   D97C             
1550   D97C             
1550   D97C~            				endif
1550   D97C~            				endif
1550   D97C~            				endif
1550   D97C             
1550   D9A2             
1550   D9A2~            				endif
1550   D9A2~            				endif
1550   D9A2             
1551   D9A2 A7 00       				staa	$00,X
1552   D9A4 08          sw_break		inx	
1553   D9A5 08          				inx	
1554   D9A6 20 CA       				bra	next_sw
1555   D9A8             			endif
1555   D9A8             
1555   D9A8             
1555   D9A8             
1555   D9A8             
1555   D9A8             
1555   D9A8~            			endif
1555   D9A8~            			endif
1555   D9A8             
1555   D9A8~            			endif
1555   D9A8~            			endif
1555   D9A8             
1555   D975             
1555   D975 32          
1555   D976             
1555   D976             
1555   D976~            			endif
1555   D976~            			endif
1555   D976~            			endif
1555   D976             
1555   D9A8             
1555   D9A8~            			endif
1555   D9A8~            			endif
1555   D9A8             
1556   D9A8             ;Entry here if we are in auto-cycle mode...						
1557   D9A8 DE C9       vm_irqcheck	ldx	vm_base				;Check the start of the vm loop
1558   D9AA             			begin
1558   D9AA             
1559   D9AA 27 0D       				beq	flashlamp
1560   D9AC A6 02       				ldaa	$02,X
1561   D9AE 90 C8       				suba	irqcount			;Subtract the number of IRQ loops completed
1562   D9B0             				ifcs
1562   D9B0             
1562   D9B0 24 FE       
1563   D9B2 4F          					clra					;Clear it so it can be run next loop
1564   D9B3             				endif
1564   D9B3             
1564   D9B3             
1564   D9B3             
1564   D9B3             
1564   D9B3             
1564   D9B3~            				endif
1564   D9B3~            				endif
1564   D9B3             
1564   D9B3~            				endif
1564   D9B3~            				endif
1564   D9B3             
1564   D9B1             
1564   D9B1 01          
1564   D9B2             
1564   D9B2             
1564   D9B2~            				endif
1564   D9B2~            				endif
1564   D9B2~            				endif
1564   D9B2             
1564   D9B3             
1564   D9B3~            				endif
1564   D9B3~            				endif
1564   D9B3             
1565   D9B3 A7 02       				staa	$02,X
1566   D9B5 EE 00       				ldx	$00,X
1567   D9B7             			loopend
1567   D9B7             
1567   D9B7             
1567   D9B7~            			loopend
1567   D9B7~            			loopend
1567   D9B7~            			loopend
1567   D9B7             
1567   D9B7 20 F1       
1567   D9B9             
1567   D9B9~            			loopend
1567   D9B9~            			loopend
1567   D9B9             
1568   D9B9 96 D2       flashlamp	ldaa	lamp_flash_count		;Timer for Flashing Lamps
1569   D9BB 90 C8       			suba	irqcount			;Subtract the IRQ's
1570   D9BD             			iflo
1570   D9BD             
1570   D9BD 22 FE       
1571   D9BF CE 00 00    				ldx	#ram_base
1572   D9C2 C6 0C       				ldab	#$0C				;12 rows in Hyperball games, instead of 8
1573   D9C4             				begin
1573   D9C4             
1574   D9C4 A6 10       					ldaa	lampbuffer0,X			;Invert Selected Lamps.
1575   D9C6 A8 40       					eora	lampflashflag,X
1576   D9C8 A7 10       					staa	lampbuffer0,X
1577   D9CA 08          					inx	
1578   D9CB 5A          					decb	
1579   D9CC             				eqend
1579   D9CC             
1579   D9CC             
1579   D9CC~            				eqend
1579   D9CC~            				eqend
1579   D9CC~            				eqend
1579   D9CC             
1579   D9CC 26 F6       
1579   D9CE             
1579   D9CE~            				eqend
1579   D9CE~            				eqend
1579   D9CE             
1580   D9CE 96 D1       				ldaa	lamp_flash_rate		;Get Reset Value
1581   D9D0             			endif
1581   D9D0             
1581   D9D0             
1581   D9D0             
1581   D9D0             
1581   D9D0             
1581   D9D0~            			endif
1581   D9D0~            			endif
1581   D9D0             
1581   D9D0~            			endif
1581   D9D0~            			endif
1581   D9D0             
1581   D9BE             
1581   D9BE 11          
1581   D9BF             
1581   D9BF             
1581   D9BF~            			endif
1581   D9BF~            			endif
1581   D9BF~            			endif
1581   D9BF             
1581   D9D0             
1581   D9D0~            			endif
1581   D9D0~            			endif
1581   D9D0             
1582   D9D0 97 D2       			staa	lamp_flash_count			;Reset the Lamp Timer
1583   D9D2 96 B0       solq		ldaa	solenoid_counter			;Solenoid Counter
1584   D9D4             			ifeq						;Skip if Counter hasnt Expired
1584   D9D4             
1584   D9D4 26 FE       
1585   D9D6 CE 11 18    				ldx	#sol_queue				;Start at bottom of Queue
1586   D9D9 9C B4       				cpx	solenoid_queue_pointer		
1587   D9DB             				ifne						;Do we have any to do?
1587   D9DB             
1587   D9DB 27 FE       
1588   D9DD A6 00       					ldaa	$00,X					;Takes lowest Solenoid # into A
1589   D9DF             											;We only do 1 solenoid at a time
1590   D9DF             					begin
1590   D9DF             
1591   D9DF E6 01       						ldab	$01,X					;Moves the rest down into place
1592   D9E1 E7 00       						stab	$00,X
1593   D9E3 08          						inx	
1594   D9E4 9C B4       						cpx	solenoid_queue_pointer
1595   D9E6             					eqend
1595   D9E6             
1595   D9E6             
1595   D9E6~            					eqend
1595   D9E6~            					eqend
1595   D9E6~            					eqend
1595   D9E6             
1595   D9E6 26 F7       
1595   D9E8             
1595   D9E8~            					eqend
1595   D9E8~            					eqend
1595   D9E8             
1596   D9E8 09          					dex	
1597   D9E9 DF B4       					stx	solenoid_queue_pointer		;Adjust Pointer to end of list
1598   D9EB BD DB CB    					jsr	set_solenoid			;Turn On/Off Solenoid (Solenoid # in A)
1599   D9EE             				endif
1599   D9EE             
1599   D9EE             
1599   D9EE             
1599   D9EE             
1599   D9EE             
1599   D9EE~            				endif
1599   D9EE~            				endif
1599   D9EE             
1599   D9EE~            				endif
1599   D9EE~            				endif
1599   D9EE             
1599   D9DC             
1599   D9DC 11          
1599   D9DD             
1599   D9DD             
1599   D9DD~            				endif
1599   D9DD~            				endif
1599   D9DD~            				endif
1599   D9DD             
1599   D9EE             
1599   D9EE~            				endif
1599   D9EE~            				endif
1599   D9EE             
1600   D9EE             			endif
1600   D9EE             
1600   D9EE             
1600   D9EE             
1600   D9EE             
1600   D9EE             
1600   D9EE~            			endif
1600   D9EE~            			endif
1600   D9EE             
1600   D9EE~            			endif
1600   D9EE~            			endif
1600   D9EE             
1600   D9D5             
1600   D9D5 18          
1600   D9D6             
1600   D9D6             
1600   D9D6~            			endif
1600   D9D6~            			endif
1600   D9D6~            			endif
1600   D9D6             
1600   D9EE             
1600   D9EE~            			endif
1600   D9EE~            			endif
1600   D9EE             
1601   D9EE 96 DD       snd_queue	ldaa	sys_soundflags			;Sound Flag??
1602   D9F0             			ifne						;If not zero, time to check for the score queue sound/pts
1602   D9F0             
1602   D9F0 27 FE       
1603   D9F2 96 D6       				ldaa	cur_sndflags
1604   D9F4 85 10       				bita	#$10					;Is this an immediate or timed sound?
1605   D9F6             				ifne
1605   D9F6             
1605   D9F6 27 FE       
1606   D9F8 F6 21 02    					ldab	pia_comma_data			;Do immediate, but only if sound board is not busy.
1607   D9FB C4 20       					andb	#$20
1608   D9FD 27 5F       					beq	check_threads			;Get Outta Here
1609   D9FF             				else
1609   D9FF             
1609   D9FF             
1609   D9FF             
1609   D9FF             
1609   D9F7             
1609   D9F7             
1609   D9F7             
1609   D9F7~            				else
1609   D9F7~            				else
1609   D9F7~            				else
1609   D9F7~            				else
1609   D9F7             
1609   D9F7~            				else
1609   D9F7~            				else
1609   D9F7~            				else
1609   D9F7~            				else
1609   D9F7             
1609   D9F7             
1609   D9F7 09          
1609   D9FF             
1609   D9FF 20 FE       
1609   DA01             
1609   DA01             
1609   DA01             
1609   DA01~            				else
1609   DA01~            				else
1609   DA01~            				else
1609   DA01~            				else
1609   DA01~            				else
1609   DA01             
1609   DA01~            				else
1609   DA01~            				else
1609   DA01             
1609   DA01~            				else
1609   DA01~            				else
1609   DA01             
1610   DA01 96 DA       					ldaa	soundirqcount+1			;LSB Sound IRQ Counter
1611   DA03 90 C8       					suba	irqcount				;Subtract the number of IRQ's that have cycled
1612   DA05 97 DA       					staa	soundirqcount+1
1613   DA07 96 D9       					ldaa	soundirqcount			;Update the counter
1614   DA09 82 00       					sbca	#$00
1615   DA0B 97 D9       					staa	soundirqcount			;Carry over to MSB of couter as well
1616   DA0D 24 4F       					bcc	check_threads			;Leave if counter has not gone under zero.
1617   DA0F             				endif
1617   DA0F             
1617   DA0F             
1617   DA0F             
1617   DA0F             
1617   DA0F             
1617   DA0F~            				endif
1617   DA0F~            				endif
1617   DA0F             
1617   DA0F~            				endif
1617   DA0F~            				endif
1617   DA0F             
1617   DA00             
1617   DA00 0E          
1617   DA01             
1617   DA01             
1617   DA01~            				endif
1617   DA01~            				endif
1617   DA01~            				endif
1617   DA01             
1617   DA0F             
1617   DA0F~            				endif
1617   DA0F~            				endif
1617   DA0F             
1618   DA0F 86 7F       				ldaa	#$7F
1619   DA11 BD DE 03    				jsr	send_snd			;Send A->Sound Board (mute?)
1620   DA14 96 D6       				ldaa	cur_sndflags		;Is this a simple sound
1621   DA16             				ifpl					;yes
1621   DA16             
1621   DA16 2B FE       
1622   DA18 7A 00 D4    					dec	soundcount
1623   DA1B 27 1C       					beq	_sndnext			;Sound Repeat Counter
1624   DA1D D6 DD       					ldab	sys_soundflags		;
1625   DA1F             					ifpl
1625   DA1F             
1625   DA1F 2B FE       
1626   DA21 DE DB       						ldx	soundindex_com
1627   DA23 DF D9       						stx	soundirqcount
1628   DA25 96 D5       						ldaa	lastsound
1629   DA27 BD DE 01    						jsr	send_snd_save		;Send the Command, Save in 'lastsound'
1630   DA2A 20 32       						bra	check_threads		;Get Outta here.
1631   DA2C             					endif
1631   DA2C             
1631   DA2C             
1631   DA2C             
1631   DA2C             
1631   DA2C             
1631   DA2C~            					endif
1631   DA2C~            					endif
1631   DA2C             
1631   DA2C~            					endif
1631   DA2C~            					endif
1631   DA2C             
1631   DA20             
1631   DA20 0B          
1631   DA21             
1631   DA21             
1631   DA21~            					endif
1631   DA21~            					endif
1631   DA21~            					endif
1631   DA21             
1631   DA2C             
1631   DA2C~            					endif
1631   DA2C~            					endif
1631   DA2C             
1632   DA2C 8A 80       					oraa	#$80
1633   DA2E 97 D6       					staa	cur_sndflags		;make it a complex sound now.
1634   DA30 DE DB       					ldx	soundindex_com
1635   DA32 DF D7       					stx	soundptr
1636   DA34             				endif
1636   DA34             
1636   DA34             
1636   DA34             
1636   DA34             
1636   DA34             
1636   DA34~            				endif
1636   DA34~            				endif
1636   DA34             
1636   DA34~            				endif
1636   DA34~            				endif
1636   DA34             
1636   DA17             
1636   DA17 1C          
1636   DA18             
1636   DA18             
1636   DA18~            				endif
1636   DA18~            				endif
1636   DA18~            				endif
1636   DA18             
1636   DA34             
1636   DA34~            				endif
1636   DA34~            				endif
1636   DA34             
1637   DA34 BD DE 0A    				jsr	do_complex_snd
1638   DA37 20 25       				bra	check_threads		;Get Outta Here.
1639   DA39 D6 E2       _sndnext		ldab	next_sndcnt			;Here if we are done iterating the sound command.
1640   DA3B             				ifne			;Check the scoring queue
1640   DA3B             
1640   DA3B 27 FE       
1641   DA3D 96 E3       					ldaa	next_sndcmd
1642   DA3F BD DD B6    					jsr	isnd_mult			;Play Sound Index(A),(B)Times
1643   DA42 7F 00 E2    					clr	next_sndcnt
1644   DA45 20 17       					bra	check_threads		;Get Outta Here.
1645   DA47             				endif
1645   DA47             
1645   DA47             
1645   DA47             
1645   DA47             
1645   DA47             
1645   DA47~            				endif
1645   DA47~            				endif
1645   DA47             
1645   DA47~            				endif
1645   DA47~            				endif
1645   DA47             
1645   DA3C             
1645   DA3C 0A          
1645   DA3D             
1645   DA3D             
1645   DA3D~            				endif
1645   DA3D~            				endif
1645   DA3D~            				endif
1645   DA3D             
1645   DA47             
1645   DA47~            				endif
1645   DA47~            				endif
1645   DA47             
1646   DA47             			endif
1646   DA47             
1646   DA47             
1646   DA47             
1646   DA47             
1646   DA47             
1646   DA47~            			endif
1646   DA47~            			endif
1646   DA47             
1646   DA47~            			endif
1646   DA47~            			endif
1646   DA47             
1646   D9F1             
1646   D9F1 55          
1646   D9F2             
1646   D9F2             
1646   D9F2~            			endif
1646   D9F2~            			endif
1646   D9F2~            			endif
1646   D9F2             
1646   DA47             
1646   DA47~            			endif
1646   DA47~            			endif
1646   DA47             
1647   DA47 7F 00 DD    doscoreq	clr	sys_soundflags		;Reset the Sound Flag??
1648   DA4A CE 11 27    			ldx	#$1127			;See if there is something in this stack
1649   DA4D 86 08       			ldaa	#$08
1650   DA4F             			begin
1650   DA4F             
1651   DA4F 08          				inx	
1652   DA50 4A          				deca	
1653   DA51 2B 0B       				bmi	check_threads		;Nuttin' Honey, Skip this Sound Crap!
1654   DA53 E6 00       				ldab	$00,X
1655   DA55             			neend					;Nuttin' Honey, Check next Entry!
1655   DA55             
1655   DA55             
1655   DA55~            			neend					;Nuttin' Honey, Check next Entry!
1655   DA55~            			neend					;Nuttin' Honey, Check next Entry!
1655   DA55~            			neend					;Nuttin' Honey, Check next Entry!
1655   DA55             
1655   DA55 27 F8       
1655   DA57             
1655   DA57~            			neend					;Nuttin' Honey, Check next Entry!
1655   DA57~            			neend					;Nuttin' Honey, Check next Entry!
1655   DA57             
1656   DA57 6A 00       			dec	$00,X				;Re-Adjust the Sound Command So Sound #00 will still work!
1657   DA59 8A 08       			oraa #$08
1658   DA5B BD DC 5A    			jsr	dsnd_pts			;Add Points(A),Play Digit Sound
1659   DA5E             
1660   DA5E             check_threads	
1661   DA5E CE 00 C9                ldx	#vm_base
1662   DA61             			begin
1662   DA61             
1663   DA61 EE 00       nextthread		ldx	$00,X				;Check to see if we have a routine to do?
1664   DA63             				ifeq
1664   DA63             
1664   DA63 26 FE       
1665   DA65 7E D9 0F    					jmp main				;Back to the start of the main loop
1666   DA68             				endif
1666   DA68             
1666   DA68             
1666   DA68             
1666   DA68             
1666   DA68             
1666   DA68~            				endif
1666   DA68~            				endif
1666   DA68             
1666   DA68~            				endif
1666   DA68~            				endif
1666   DA68             
1666   DA64             
1666   DA64 03          
1666   DA65             
1666   DA65             
1666   DA65~            				endif
1666   DA65~            				endif
1666   DA65~            				endif
1666   DA65             
1666   DA68             
1666   DA68~            				endif
1666   DA68~            				endif
1666   DA68             
1667   DA68 A6 02       				ldaa	$02,X				;Timer expired?
1668   DA6A             			eqend					;No, goto next one.
1668   DA6A             
1668   DA6A             
1668   DA6A~            			eqend					;No, goto next one.
1668   DA6A~            			eqend					;No, goto next one.
1668   DA6A~            			eqend					;No, goto next one.
1668   DA6A             
1668   DA6A 26 F5       
1668   DA6C             
1668   DA6C~            			eqend					;No, goto next one.
1668   DA6C~            			eqend					;No, goto next one.
1668   DA6C             
1669   DA6C DF CD       			stx	current_thread		;Yes, lets do this one now.
1670   DA6E DF CF       			stx	vm_tail_thread		;Current VM Routine being run
1671   DA70 A6 03       			ldaa	$03,X
1672   DA72 36          			psha	
1673   DA73 A6 04       			ldaa	$04,X
1674   DA75 36          			psha	
1675   DA76 A6 05       			ldaa	$05,X
1676   DA78 36          			psha	
1677   DA79 A6 06       			ldaa	$06,X
1678   DA7B 36          			psha
1679   DA7C A6 07       			ldaa	$07,X
1680   DA7E 36          			psha
1681   DA7F A6 08       			ldaa	$08,X
1682   DA81 36          			psha
1683   DA82 A6 09       			ldaa	$09,X
1684   DA84 36          			psha
1685   DA85 A6 0A       			ldaa	$0A,X
1686   DA87 36          			psha
1687   DA88 A6 0C       			ldaa	$0C,X
1688   DA8A 36          			psha
1689   DA8B A6 0B       			ldaa	$0B,X
1690   DA8D 36          			psha
1691   DA8E A6 0E       			ldaa	$0E,X
1692   DA90 E6 0F       			ldab	$0F,X
1693   DA92 EE 10       			ldx	$10,X
1694   DA94 39          			rts					;Jump to the offending routine.
1695   DA95             
1696   DA95             ;**************************************************************************
1697   DA95             ;* This is similar to 'addthread' below but the timer data does not follow
1698   DA95             ;* the jsr. Instead, the timer data is pre-loaded into 'thread_timer_byte'.
1699   DA95             ;* The thread is started in the same manner as described below.
1700   DA95             ;**************************************************************************			
1701   DA95 97 B8       delaythread	staa	temp2				;Routine returns here when done
1702   DA97 DF B6       			stx	temp1
1703   DA99 96 D3       			ldaa	thread_timer_byte
1704   DA9B 30          			tsx					;Get where we came from
1705   DA9C EE 00       			ldx	$00,X				;Get the address of the new thread
1706   DA9E 20 0A       			bra	dump_thread
1707   DAA0             
1708   DAA0             ;**************************************************************************
1709   DAA0             ;* Adds a new thread to the VM. The data for this routine is contained 
1710   DAA0             ;* directly after the jsr to this routine. A single byte follows the
1711   DAA0             ;* jsr and is the timer byte used for the delay until the thread starts.
1712   DAA0             ;* The actual address directly after the timer byte is where the thread
1713   DAA0             ;* will start running. Example:
1714   DAA0             ;*
1715   DAA0             ;* 	jsr addthread
1716   DAA0             ;*    .db 05		;This is the timer byte
1717   DAA0             ;*	ldaa #FF		;This code is executed as the thread.
1718   DAA0             ;***************************************************************************
1719   DAA0 DF B6       addthread	stx	temp1
1720   DAA2 97 B8       			staa	temp2
1721   DAA4 30          			tsx	
1722   DAA5 EE 00       			ldx	$00,X				;Return Address from rts to $EA2F
1723   DAA7 A6 00       			ldaa	$00,X				;New Timer Value
1724   DAA9 08          			inx	
1725   DAAA             
1726   DAAA             ;**************************************************************************
1727   DAAA             ;* Will take all variables in RAM and dump them into the thread data 
1728   DAAA             ;* structure for next time. This gives the thread memory over executions
1729   DAAA             ;* until it is killed.
1730   DAAA             ;**************************************************************************			
1731   DAAA DF BA       dump_thread	stx	temp3				;Now X points the the replacement address
1732   DAAC DE CD       			ldx	current_thread		;Current VM Routine being run
1733   DAAE A7 02       			staa	$02,X				;Timer For next Time
1734   DAB0 96 BA       			ldaa	temp3
1735   DAB2 A7 0B       			staa	$0B,X
1736   DAB4 96 BB       			ldaa	temp3+1
1737   DAB6 A7 0C       			staa	$0C,X
1738   DAB8 E7 0F       			stab	$0F,X
1739   DABA 96 B8       			ldaa	temp2
1740   DABC A7 0E       			staa	$0E,X
1741   DABE 96 B6       			ldaa	temp1
1742   DAC0 A7 10       			staa	$10,X
1743   DAC2 96 B7       			ldaa	temp1+1
1744   DAC4 A7 11       			staa	$11,X
1745   DAC6 31          			ins	
1746   DAC7 31          			ins	
1747   DAC8 32          			pula
1748   DAC9 A7 0A       			staa	$0A,X
1749   DACB 32          			pula
1750   DACC A7 09       			staa	$09,X
1751   DACE 32          			pula
1752   DACF A7 08       			staa	$08,X
1753   DAD1 32          			pula
1754   DAD2 A7 07       			staa	$07,X
1755   DAD4 32          			pula
1756   DAD5 A7 06       			staa	$06,X
1757   DAD7 32          			pula
1758   DAD8 A7 05       			staa	$05,X
1759   DADA 32          			pula
1760   DADB A7 04       			staa	$04,X
1761   DADD 32          			pula
1762   DADE A7 03       			staa	$03,X
1763   DAE0 DE CD       			ldx	current_thread			;Current VM Routine being run
1764   DAE2             			begin
1764   DAE2             
1765   DAE2 8E 13 F7    				lds	#$13F7			;Restore the stack.
1766   DAE5 7E DA 61    				jmp	nextthread			;Go check the Control Routine for another job.
1767   DAE8             				
1768   DAE8 CE 00 C9    killthread			ldx	#vm_base
1769   DAEB             				begin
1769   DAEB             
1770   DAEB DF B8       					stx	temp2					;Thread that points to killed thread
1771   DAED EE 00       					ldx	$00,X
1772   DAEF             					ifeq
1772   DAEF             
1772   DAEF 26 FE       
1773   DAF1 7E DA 5E    						jmp	check_threads			;Nothing on VM
1774   DAF4             					endif
1774   DAF4             
1774   DAF4             
1774   DAF4             
1774   DAF4             
1774   DAF4             
1774   DAF4~            					endif
1774   DAF4~            					endif
1774   DAF4             
1774   DAF4~            					endif
1774   DAF4~            					endif
1774   DAF4             
1774   DAF0             
1774   DAF0 03          
1774   DAF1             
1774   DAF1             
1774   DAF1~            					endif
1774   DAF1~            					endif
1774   DAF1~            					endif
1774   DAF1             
1774   DAF4             
1774   DAF4~            					endif
1774   DAF4~            					endif
1774   DAF4             
1775   DAF4 9C CD       					cpx	current_thread			;Current VM Routine being run
1776   DAF6             				eqend						;If $B1 != *$00AD check next entry
1776   DAF6             
1776   DAF6             
1776   DAF6~            				eqend						;If $B1 != *$00AD check next entry
1776   DAF6~            				eqend						;If $B1 != *$00AD check next entry
1776   DAF6~            				eqend						;If $B1 != *$00AD check next entry
1776   DAF6             
1776   DAF6 26 F3       
1776   DAF8             
1776   DAF8~            				eqend						;If $B1 != *$00AD check next entry
1776   DAF8~            				eqend						;If $B1 != *$00AD check next entry
1776   DAF8             
1777   DAF8 8D 56       				bsr	killthread_sp			;Remove Entry (X)($B1) From VM
1778   DAFA             			loopend
1778   DAFA             
1778   DAFA             
1778   DAFA~            			loopend
1778   DAFA~            			loopend
1778   DAFA~            			loopend
1778   DAFA             
1778   DAFA 20 E6       
1778   DAFC             
1778   DAFC~            			loopend
1778   DAFC~            			loopend
1778   DAFC             
1779   DAFC             			
1780   DAFC             ;****************************************************************************
1781   DAFC             ;* This is the main routine in charge of adding new threads to the
1782   DAFC             ;* virtual machine. The following variables are passed.
1783   DAFC             ;*
1784   DAFC             ;*	A: Pushed into VMregA
1785   DAFC             ;* 	B: Pushed into VMregB
1786   DAFC             ;*	X: Thread Initial Program Counter
1787   DAFC             ;* 	
1788   DAFC             ;* In addition, the following two variables contain data for the
1789   DAFC             ;* thread.
1790   DAFC             ;*	thread_priority:		Unique Identifier to classify thread
1791   DAFC             ;*	system_temp_word2:	???
1792   DAFC             ;*
1793   DAFC             ;* See header definition file for specifics on thread class structure
1794   DAFC             ;*
1795   DAFC             ;* Returns: Carry Cleared if New Thread was added
1796   DAFC             ;*          Carry Set if VM was full
1797   DAFC             ;*
1798   DAFC             ;**************************************************************************** 
1799   DAFC             newthread_sp
1800   DAFC DF B6                   stx	temp1
1801   DAFE 0D          			sec	
1802   DAFF DE CB       			ldx	vm_nextslot			;Get Next Available Slot Address
1803   DB01             			ifne
1803   DB01             
1803   DB01 27 FE       
1804   DB03 36          				psha	
1805   DB04 A6 00       				ldaa	$00,X				;\
1806   DB06 97 CB       				staa	vm_nextslot			;|---- Set New Next Available Slot Address
1807   DB08 A6 01       				ldaa	$01,X				;|
1808   DB0A 97 CC       				staa	vm_nextslot+1		;/
1809   DB0C DF B8       				stx	temp2				;Temp2 = New Thread Base Address
1810   DB0E DE CF       				ldx	vm_tail_thread		;This is the last thread in the vm, it has the tail
1811   DB10 A6 00       				ldaa	$00,X				;\
1812   DB12 97 BA       				staa	temp3				;|
1813   DB14 A6 01       				ldaa	$01,X				;|---- Store the running threads next pointer in temp3
1814   DB16 97 BB       				staa	temp3+1			;/
1815   DB18 96 B8       				ldaa	temp2				;\
1816   DB1A A7 00       				staa	$00,X				;|
1817   DB1C 96 B9       				ldaa	temp2+1			;|---- Put the new thread into the running threads next pointer
1818   DB1E A7 01       				staa	$01,X				;/
1819   DB20 EE 00       				ldx	$00,X
1820   DB22 DF CF       				stx	vm_tail_thread		;Make the new thread the last thread
1821   DB24 96 BA       				ldaa	temp3				;\
1822   DB26 A7 00       				staa	$00,X				;|
1823   DB28 96 BB       				ldaa	temp3+1			;|---- Set the Next pointer of the new thread to the 
1824   DB2A A7 01       				staa	$01,X				;/     previous threads next pointer.
1825   DB2C 96 B6       				ldaa	temp1
1826   DB2E A7 0B       				staa	$0B,X
1827   DB30 96 B7       				ldaa	temp1+1
1828   DB32 A7 0C       				staa	$0C,X
1829   DB34 96 C6       				ldaa	thread_priority		;Store the priority
1830   DB36 A7 0D       				staa	$0D,X
1831   DB38 96 C2       				ldaa	sys_temp_w2			;Push variables from sys_temp_w2
1832   DB3A A7 10       				staa	$10,X
1833   DB3C 96 C3       				ldaa	sys_temp_w2+1
1834   DB3E A7 11       				staa	$11,X
1835   DB40 32          				pula	
1836   DB41 A7 0E       				staa	$0E,X				;Store reg A
1837   DB43 E7 0F       				stab	$0F,X				;Store reg B
1838   DB45 6F 02       				clr	$02,X				;Reset the counter
1839   DB47             			endif
1839   DB47             
1839   DB47             
1839   DB47             
1839   DB47             
1839   DB47             
1839   DB47~            			endif
1839   DB47~            			endif
1839   DB47             
1839   DB47~            			endif
1839   DB47~            			endif
1839   DB47             
1839   DB02             
1839   DB02 44          
1839   DB03             
1839   DB03             
1839   DB03~            			endif
1839   DB03~            			endif
1839   DB03~            			endif
1839   DB03             
1839   DB47             
1839   DB47~            			endif
1839   DB47~            			endif
1839   DB47             
1840   DB47 39          			rts	
1841   DB48             
1842   DB48             newthread_06	
1843   DB48 36                      psha	
1844   DB49 86 06       			ldaa	#$06
1845   DB4B 97 C6       			staa	thread_priority
1846   DB4D 32          			pula	
1847   DB4E 20 AC       			bra	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
1848   DB50             
1849   DB50             ;***************************************************************************
1850   DB50             ;* This will remove the current thread from the VM. 
1851   DB50             ;*
1852   DB50             ;* Requires: temp2 holds the thread that points to the thread to be killed	
1853   DB50             ;***************************************************************************		
1854   DB50             killthread_sp	
1855   DB50 36                      psha	
1856   DB51 A6 00       			ldaa	$00,X					;\
1857   DB53 97 B6       			staa	temp1					;|--  Get 'next'
1858   DB55 A6 01       			ldaa	$01,X					;|
1859   DB57 97 B7       			staa	temp1+1				;/
1860   DB59 96 CB       			ldaa	vm_nextslot				;\
1861   DB5B A7 00       			staa	$00,X					;|--  Kill this one by setting next to 0
1862   DB5D 96 CC       			ldaa	vm_nextslot+1			;|
1863   DB5F A7 01       			staa	$01,X					;/
1864   DB61 DF CB       			stx	vm_nextslot				;Make this new blank spot the next one
1865   DB63 9C CF       			cpx	vm_tail_thread			;Unless this was the tail thread
1866   DB65             			ifeq
1866   DB65             
1866   DB65 26 FE       
1867   DB67 DE CD       				ldx	current_thread			;Make the current thread the tail
1868   DB69 DF CF       				stx	vm_tail_thread
1869   DB6B             			endif
1869   DB6B             
1869   DB6B             
1869   DB6B             
1869   DB6B             
1869   DB6B             
1869   DB6B~            			endif
1869   DB6B~            			endif
1869   DB6B             
1869   DB6B~            			endif
1869   DB6B~            			endif
1869   DB6B             
1869   DB66             
1869   DB66 04          
1869   DB67             
1869   DB67             
1869   DB67~            			endif
1869   DB67~            			endif
1869   DB67~            			endif
1869   DB67             
1869   DB6B             
1869   DB6B~            			endif
1869   DB6B~            			endif
1869   DB6B             
1870   DB6B DE B8       			ldx	temp2					;Get Parent Thread
1871   DB6D 96 B6       			ldaa	temp1					;Store killed thread 'next' into parents 'next'
1872   DB6F A7 00       			staa	$00,X
1873   DB71 96 B7       			ldaa	temp1+1
1874   DB73 A7 01       			staa	$01,X
1875   DB75 32          			pula						;Save A
1876   DB76 39          			rts	
1877   DB77             
1878   DB77             ;*************************************************
1879   DB77             ;* Kill Single thread with the given ID
1880   DB77             ;*
1881   DB77             ;* Requires: 	A - Level Defintion
1882   DB77             ;* 			B - Select Mask
1883   DB77             ;* 
1884   DB77             ;* If B is $00, then all threads are cleared
1885   DB77             ;*************************************************			
1886   DB77 8D 0B       kill_thread	bsr	check_threadid		;Test Thread ID Mask
1887   DB79             			ifcc					;Return with Carry Set
1887   DB79             
1887   DB79 25 FE       
1888   DB7B 8D D3       				bsr	killthread_sp		;Remove Entry (X)($B1) From VM
1889   DB7D 0C          				clc	
1890   DB7E             			endif
1890   DB7E             
1890   DB7E             
1890   DB7E             
1890   DB7E             
1890   DB7E             
1890   DB7E~            			endif
1890   DB7E~            			endif
1890   DB7E             
1890   DB7E~            			endif
1890   DB7E~            			endif
1890   DB7E             
1890   DB7A             
1890   DB7A 03          
1890   DB7B             
1890   DB7B             
1890   DB7B~            			endif
1890   DB7B~            			endif
1890   DB7B~            			endif
1890   DB7B             
1890   DB7E             
1890   DB7E~            			endif
1890   DB7E~            			endif
1890   DB7E             
1891   DB7E 39          			rts
1892   DB7F             
1893   DB7F             ;*************************************************
1894   DB7F             ;* Kill All threads with the given ID
1895   DB7F             ;*
1896   DB7F             ;* Requires:   A - EOR Mask Definition	
1897   DB7F             ;*             B - AND Mask Definition		
1898   DB7F             ;* 
1899   DB7F             ;* If result is not zero, then thread is killed
1900   DB7F             ;*************************************************
1901   DB7F             kill_threads
1902   DB7F                         begin
1902   DB7F             
1903   DB7F 8D F6       				bsr	kill_thread		;Kill first One
1904   DB81             			csend				;Repeat if Carry Clear
1904   DB81             
1904   DB81             
1904   DB81~            			csend				;Repeat if Carry Clear
1904   DB81~            			csend				;Repeat if Carry Clear
1904   DB81~            			csend				;Repeat if Carry Clear
1904   DB81             
1904   DB81 24 FC       
1904   DB83             
1904   DB83~            			csend				;Repeat if Carry Clear
1904   DB83~            			csend				;Repeat if Carry Clear
1904   DB83             
1905   DB83 39          			rts
1906   DB84             
1907   DB84             ;*************************************************
1908   DB84             ;* Checks the VM thread list for threads that 
1909   DB84             ;* qualify agains the bitmasks defined in A and B.
1910   DB84             ;* If a thread qualifies, then this routine will
1911   DB84             ;* return with carry cleared.
1912   DB84             ;*************************************************		
1913   DB84             check_threadid	
1914   DB84 37                      pshb	
1915   DB85 D7 B6       			stab	temp1
1916   DB87 CE 00 C9    			ldx	#vm_base		;Load Start Address
1917   DB8A DF B8       			stx	temp2			;Store it
1918   DB8C DE C9       			ldx	vm_base		;Load End Address
1919   DB8E 0D          pri_next	sec	
1920   DB8F             			ifne				;Branch if we have reached the end of the VM (Next = 0000)
1920   DB8F             
1920   DB8F 27 FE       
1921   DB91 16          				tab	
1922   DB92 E8 0D       				eorb	threadobj_id,X		;EOR with Type Code in Current Routine
1923   DB94 53          				comb	
1924   DB95 D4 B6       				andb	temp1
1925   DB97 D1 B6       				cmpb	temp1
1926   DB99             				ifne				;Branch if Bits Dont work
1926   DB99             
1926   DB99 27 FE       
1927   DB9B DF B8       pri_skipme			stx	temp2
1928   DB9D EE 00       					ldx	threadobj_next,X
1929   DB9F 20 ED       					bra	pri_next		;Goto Next Thread ->
1930   DBA1             				endif
1930   DBA1             
1930   DBA1             
1930   DBA1             
1930   DBA1             
1930   DBA1             
1930   DBA1~            				endif
1930   DBA1~            				endif
1930   DBA1             
1930   DBA1~            				endif
1930   DBA1~            				endif
1930   DBA1             
1930   DB9A             
1930   DB9A 06          
1930   DB9B             
1930   DB9B             
1930   DB9B~            				endif
1930   DB9B~            				endif
1930   DB9B~            				endif
1930   DB9B             
1930   DBA1             
1930   DBA1~            				endif
1930   DBA1~            				endif
1930   DBA1             
1931   DBA1 9C CD       				cpx	current_thread	;Make sure it isn't this thread
1932   DBA3 27 F6       				beq	pri_skipme		;If it is this thread, skip it!
1933   DBA5             			endif
1933   DBA5             
1933   DBA5             
1933   DBA5             
1933   DBA5             
1933   DBA5             
1933   DBA5~            			endif
1933   DBA5~            			endif
1933   DBA5             
1933   DBA5~            			endif
1933   DBA5~            			endif
1933   DBA5             
1933   DB90             
1933   DB90 14          
1933   DB91             
1933   DB91             
1933   DB91~            			endif
1933   DB91~            			endif
1933   DB91~            			endif
1933   DB91             
1933   DBA5             
1933   DBA5~            			endif
1933   DBA5~            			endif
1933   DBA5             
1934   DBA5 33          			pulb	
1935   DBA6 39          			rts	
1936   DBA7             	
1937   DBA7             ;*****************************************************************	
1938   DBA7             ;* Solenoid Queue Processing: This is the routine that is called
1939   DBA7             ;* to fire a specific solenoid. It will add the solenoid to the 
1940   DBA7             ;* queue. Works from top down. Solenoid Number is in A along with
1941   DBA7             ;* data on how to handle solenoid. Format of A is ...
1942   DBA7             ;*
1943   DBA7             ;*  	XXXZZZZZ	Where: ZZZZZ is solenoid number 00-10d
1944   DBA7             ;*                       XXX is timer/command
1945   DBA7             ;*
1946   DBA7             ;* NOTE: Hyperball only allows 8 solenoids + Shooter + BallLift
1947   DBA7             ;*****************************************************************		
1948   DBA7 36          solbuf		psha					;Push Solenoid #
1949   DBA8 37          			pshb	
1950   DBA9 DF B6       			stx	temp1				;Put X into Temp1
1951   DBAB DE B4       			ldx	solenoid_queue_pointer	;Check Solenoid Buffer
1952   DBAD 8C 11 18    			cpx	#sol_queue	
1953   DBB0             			ifne					;Buffer not full
1953   DBB0             
1953   DBB0 27 FE       
1954   DBB2 0D          				sec					;Carry Set if Buffer Full
1955   DBB3 8C 11 28    				cpx	#sol_queue_end		;Buffer end
1956   DBB6             				ifne
1956   DBB6             
1956   DBB6 27 FE       
1957   DBB8 A7 00       _sb01				staa	$00,X				;Insert Solenoid Into Buffer
1958   DBBA 08          					inx	
1959   DBBB DF B4       					stx	solenoid_queue_pointer	;Update Pointer
1960   DBBD 0C          _sb02				clc					;Carry Cleared on Buffer Add
1961   DBBE             				endif
1961   DBBE             
1961   DBBE             
1961   DBBE             
1961   DBBE             
1961   DBBE             
1961   DBBE~            				endif
1961   DBBE~            				endif
1961   DBBE             
1961   DBBE~            				endif
1961   DBBE~            				endif
1961   DBBE             
1961   DBB7             
1961   DBB7 06          
1961   DBB8             
1961   DBB8             
1961   DBB8~            				endif
1961   DBB8~            				endif
1961   DBB8~            				endif
1961   DBB8             
1961   DBBE             
1961   DBBE~            				endif
1961   DBBE~            				endif
1961   DBBE             
1962   DBBE 33          				pulb	
1963   DBBF 32          				pula					;Pull Solenoid #
1964   DBC0 DE B6       				ldx	temp1				;Get Back X
1965   DBC2 39          				rts	
1966   DBC3             			endif
1966   DBC3             
1966   DBC3             
1966   DBC3             
1966   DBC3             
1966   DBC3             
1966   DBC3~            			endif
1966   DBC3~            			endif
1966   DBC3             
1966   DBC3~            			endif
1966   DBC3~            			endif
1966   DBC3             
1966   DBB1             
1966   DBB1 11          
1966   DBB2             
1966   DBB2             
1966   DBB2~            			endif
1966   DBB2~            			endif
1966   DBB2~            			endif
1966   DBB2             
1966   DBC3             
1966   DBC3~            			endif
1966   DBC3~            			endif
1966   DBC3             
1967   DBC3 D6 B0       			ldab	solenoid_counter		;Solenoid Counter
1968   DBC5 26 F1       			bne	_sb01
1969   DBC7 8D 02       			bsr	set_solenoid		;Turn On/Off Solenoid (Solenoid # in A)
1970   DBC9 20 F2       			bra	_sb02
1971   DBCB             
1972   DBCB             ;***************************************************
1973   DBCB             ;* Turns On/Off solenoid.
1974   DBCB             ;*
1975   DBCB             ;* Requires:	A - XXXXZZZZ
1976   DBCB             ;*					
1977   DBCB             ;* Where XXXX 	= Solenoid Timer/Command
1978   DBCB             ;*       ZZZZ	= Solenoid Number
1979   DBCB             ;*
1980   DBCB             ;* Example: A = 20 turns on solenoid #00 for 2 IRQ's
1981   DBCB             ;*              F8 turns on solenoid #08 idefinitely
1982   DBCB             ;*              C3 turns on solenoid #03 for 12 IRQ's
1983   DBCB             ;*              03 turns off solenoid #03 indefinitely
1984   DBCB             ;***************************************************
1985   DBCB             set_solenoid	
1986   DBCB 37                      pshb	
1987   DBCC 16          			tab	
1988   DBCD C4 F0       			andb	#$F0
1989   DBCF             			ifne
1989   DBCF             
1989   DBCF 27 FE       
1990   DBD1 C1 F0       				cmpb	#$F0
1991   DBD3             				ifne
1991   DBD3             
1991   DBD3 27 FE       
1992   DBD5             					;1-15 goes into counter
1993   DBD5 D7 B0       set_sol_counter		stab	solenoid_counter		;Restore Solenoid Counter to #E0
1994   DBD7 8D 1C       					bsr	soladdr			;Get Solenoid PIA address and bitpos
1995   DBD9 DF AD       					stx	solenoid_address
1996   DBDB D7 AF       					stab	solenoid_bitpos
1997   DBDD             				else
1997   DBDD             
1997   DBDD             
1997   DBDD             
1997   DBDD             
1997   DBD4             
1997   DBD4             
1997   DBD4             
1997   DBD4~            				else
1997   DBD4~            				else
1997   DBD4~            				else
1997   DBD4~            				else
1997   DBD4             
1997   DBD4~            				else
1997   DBD4~            				else
1997   DBD4~            				else
1997   DBD4~            				else
1997   DBD4             
1997   DBD4             
1997   DBD4 0A          
1997   DBDD             
1997   DBDD 20 FE       
1997   DBDF             
1997   DBDF             
1997   DBDF             
1997   DBDF~            				else
1997   DBDF~            				else
1997   DBDF~            				else
1997   DBDF~            				else
1997   DBDF~            				else
1997   DBDF             
1997   DBDF~            				else
1997   DBDF~            				else
1997   DBDF             
1997   DBDF~            				else
1997   DBDF~            				else
1997   DBDF             
1998   DBDF             					;Do it now... if at 0
1999   DBDF 8D 14       					bsr	soladdr			;Get Solenoid PIA address and bitpos
2000   DBE1             				endif
2000   DBE1             
2000   DBE1             
2000   DBE1             
2000   DBE1             
2000   DBE1             
2000   DBE1~            				endif
2000   DBE1~            				endif
2000   DBE1             
2000   DBE1~            				endif
2000   DBE1~            				endif
2000   DBE1             
2000   DBDE             
2000   DBDE 02          
2000   DBDF             
2000   DBDF             
2000   DBDF~            				endif
2000   DBDF~            				endif
2000   DBDF~            				endif
2000   DBDF             
2000   DBE1             
2000   DBE1~            				endif
2000   DBE1~            				endif
2000   DBE1             
2001   DBE1 25 0C       				bcs	set_ss_on			;Carry Set: Special Solenoid, these work in reverse
2002   DBE3             				;Here to turn solenoid ON
2003   DBE3 0F          set_ss_off		sei	
2004   DBE4 EA 00       				orab	$00,X
2005   DBE6 E7 00       set_s_pia		stab	$00,X			;Write Solenoid Data to PIA
2006   DBE8 0E          				cli	
2007   DBE9 33          				pulb	
2008   DBEA 39          				rts					;Outta here!
2009   DBEB             			endif
2009   DBEB             
2009   DBEB             
2009   DBEB             
2009   DBEB             
2009   DBEB             
2009   DBEB~            			endif
2009   DBEB~            			endif
2009   DBEB             
2009   DBEB~            			endif
2009   DBEB~            			endif
2009   DBEB             
2009   DBD0             
2009   DBD0 1A          
2009   DBD1             
2009   DBD1             
2009   DBD1~            			endif
2009   DBD1~            			endif
2009   DBD1~            			endif
2009   DBD1             
2009   DBEB             
2009   DBEB~            			endif
2009   DBEB~            			endif
2009   DBEB             
2010   DBEB 8D 08       			bsr	soladdr				;Get Solenoid PIA address and bitpos
2011   DBED 25 F4       			bcs	set_ss_off				;Special Solenoids work in reverse
2012   DBEF             			;Here to turn solenoid OFF			
2013   DBEF 53          set_ss_on	comb	
2014   DBF0 0F          			sei	
2015   DBF1 E4 00       			andb	$00,X
2016   DBF3 20 F1       			bra	set_s_pia				;Store it now.
2017   DBF5             
2018   DBF5             			;*************************************************
2019   DBF5             ;* Get Physical Address and Bitposition of 
2020   DBF5             ;* solenoid number.
2021   DBF5             ;*
2022   DBF5             ;* Requires:	A - Solenoid Number
2023   DBF5             ;* Output:		B - PIA bit position
2024   DBF5             ;*			X - PIA address
2025   DBF5             ;*************************************************	
2026   DBF5 84 0F       soladdr		anda	#$0F				;Mask to under 16 Solenoids
2027   DBF7 CE 22 02    			ldx	#pia_sol_high_data
2028   DBFA 81 07       			cmpa	#$07				;Normal solenoids or ball shooter/ball lift
2029   DBFC             			ifgt					;Get Regular Solenoid Address (PIA)
2029   DBFC             
2029   DBFC 2F FE       
2030   DBFE 08          				inx
2031   DBFF C6 08       				ldab	#$08
2032   DC01 11          				cba
2033   DC02             				ifeq
2033   DC02             
2033   DC02 26 FE       
2034   DC04             					;this is the ball shooter coil
2035   DC04 CE 22 01    					ldx   #pia_sol_low_ctrl
2036   DC07 0D          					sec 
2037   DC08             				endif
2037   DC08             
2037   DC08             
2037   DC08             
2037   DC08             
2037   DC08             
2037   DC08~            				endif
2037   DC08~            				endif
2037   DC08             
2037   DC08~            				endif
2037   DC08~            				endif
2037   DC08             
2037   DC03             
2037   DC03 04          
2037   DC04             
2037   DC04             
2037   DC04~            				endif
2037   DC04~            				endif
2037   DC04~            				endif
2037   DC04             
2037   DC08             
2037   DC08~            				endif
2037   DC08~            				endif
2037   DC08             
2038   DC08 39          				rts	
2039   DC09             			endif
2039   DC09             
2039   DC09             
2039   DC09             
2039   DC09             
2039   DC09             
2039   DC09~            			endif
2039   DC09~            			endif
2039   DC09             
2039   DC09~            			endif
2039   DC09~            			endif
2039   DC09             
2039   DBFD             
2039   DBFD 0B          
2039   DBFE             
2039   DBFE             
2039   DBFE~            			endif
2039   DBFE~            			endif
2039   DBFE~            			endif
2039   DBFE             
2039   DC09             
2039   DC09~            			endif
2039   DC09~            			endif
2039   DC09             
2040   DC09             			
2041   DC09             
2042   DC09             ;********************************************************
2043   DC09             ;* Convert Hex value in A to a single bit positioned at
2044   DC09             ;* the value of (A&7). Bitpos is returned in B
2045   DC09             ;*
2046   DC09             ;* Requires:	Data in A
2047   DC09             ;* Protects:	A,X
2048   DC09             ;* Destroys:	B
2049   DC09             ;* Output:		Bitpos in B
2050   DC09             ;********************************************************
2051   DC09 36          hex2bitpos	psha	
2052   DC0A 84 07       			anda	#$07
2053   DC0C 5F          			clrb	
2054   DC0D 0D          			sec	
2055   DC0E             			begin
2055   DC0E             
2056   DC0E 59          				rolb	
2057   DC0F 4A          				deca	
2058   DC10             			miend
2058   DC10             
2058   DC10             
2058   DC10~            			miend
2058   DC10~            			miend
2058   DC10~            			miend
2058   DC10             
2058   DC10 2A FC       
2058   DC12             
2058   DC12~            			miend
2058   DC12~            			miend
2058   DC12             
2059   DC12 32          			pula	
2060   DC13 39          			rts	
2061   DC14             
2062   DC14             ;********************************************************
2063   DC14             ;* Checks the current score shown and updates the comma
2064   DC14             ;* flags accordingly to show the relavant ones.
2065   DC14             ;********************************************************			
2066   DC14 40 04 80 08 comma_million	.db $40,$04,$80,$08
2067   DC18 10 01 20 02 comma_thousand	.db $10,$01,$20,$02
2068   DC1C             
2069   DC1C             update_commas	
2070   DC1C C6 40                   ldab	#$40				;Million digit
2071   DC1E 8D 2B       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
2072   DC20             			ifeq					;Branch if it is already set
2072   DC20             
2072   DC20 26 FE       
2073   DC22 DE EA       				ldx	pscore_buf			;Start of Current Player Score Buffer
2074   DC24 E6 00       				ldab	$00,X
2075   DC26 5C          				incb	
2076   DC27             				ifne					;Is MSD at FF (blank0?
2076   DC27             
2076   DC27 27 FE       
2077   DC29 CE DC 14    					ldx	#comma_million		;No.. we have a million digit.
2078   DC2C 8D 11       					bsr	set_comma_bit		;Set the appropriate bit
2079   DC2E             				endif
2079   DC2E             
2079   DC2E             
2079   DC2E             
2079   DC2E             
2079   DC2E             
2079   DC2E~            				endif
2079   DC2E~            				endif
2079   DC2E             
2079   DC2E~            				endif
2079   DC2E~            				endif
2079   DC2E             
2079   DC28             
2079   DC28 05          
2079   DC29             
2079   DC29             
2079   DC29~            				endif
2079   DC29~            				endif
2079   DC29~            				endif
2079   DC29             
2079   DC2E             
2079   DC2E~            				endif
2079   DC2E~            				endif
2079   DC2E             
2080   DC2E             			endif
2080   DC2E             
2080   DC2E             
2080   DC2E             
2080   DC2E             
2080   DC2E             
2080   DC2E~            			endif
2080   DC2E~            			endif
2080   DC2E             
2080   DC2E~            			endif
2080   DC2E~            			endif
2080   DC2E             
2080   DC21             
2080   DC21 0C          
2080   DC22             
2080   DC22             
2080   DC22~            			endif
2080   DC22~            			endif
2080   DC22~            			endif
2080   DC22             
2080   DC2E             
2080   DC2E~            			endif
2080   DC2E~            			endif
2080   DC2E             
2081   DC2E C6 08       			ldab	#$08				;1000's Digit
2082   DC30 8D 19       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
2083   DC32             			ifeq
2083   DC32             
2083   DC32 26 FE       
2084   DC34 DE EA       				ldx	pscore_buf			;Start of Current Player Score Buffer
2085   DC36 E6 02       				ldab	$02,X
2086   DC38 C1 F0       				cmpb	#$F0
2087   DC3A             				ifcs
2087   DC3A             
2087   DC3A 24 FE       
2088   DC3C CE DC 18    					ldx	#comma_thousand			;Get the appropriate bit for the thousand digit	
2089   DC3F 96 E9       set_comma_bit		ldaa	player_up				;Current Player Up (0-3)
2090   DC41 BD DF 62    					jsr	xplusa				;X = X + A
2091   DC44 A6 00       					ldaa	$00,X
2092   DC46 9A 7A       					oraa	comma_flags
2093   DC48 97 7A       					staa	comma_flags
2094   DC4A             				endif
2094   DC4A             
2094   DC4A             
2094   DC4A             
2094   DC4A             
2094   DC4A             
2094   DC4A~            				endif
2094   DC4A~            				endif
2094   DC4A             
2094   DC4A~            				endif
2094   DC4A~            				endif
2094   DC4A             
2094   DC3B             
2094   DC3B 0E          
2094   DC3C             
2094   DC3C             
2094   DC3C~            				endif
2094   DC3C~            				endif
2094   DC3C~            				endif
2094   DC3C             
2094   DC4A             
2094   DC4A~            				endif
2094   DC4A~            				endif
2094   DC4A             
2095   DC4A             			endif
2095   DC4A             
2095   DC4A             
2095   DC4A             
2095   DC4A             
2095   DC4A             
2095   DC4A~            			endif
2095   DC4A~            			endif
2095   DC4A             
2095   DC4A~            			endif
2095   DC4A~            			endif
2095   DC4A             
2095   DC33             
2095   DC33 16          
2095   DC34             
2095   DC34             
2095   DC34~            			endif
2095   DC34~            			endif
2095   DC34~            			endif
2095   DC34             
2095   DC4A             
2095   DC4A~            			endif
2095   DC4A~            			endif
2095   DC4A             
2096   DC4A 39          			rts	
2097   DC4B             			
2098   DC4B             
2099   DC4B 96 E9       test_mask_b	ldaa	player_up				;Current Player Up (0-1)
2100   DC4D CE 00 76    			ldx	#dmask_p1
2101   DC50 BD DF 62    			jsr	xplusa				;X = X + A
2102   DC53 E5 00       			bitb	$00,X
2103   DC55 39          			rts	
2104   DC56             
2105   DC56             
2106   DC56             ;**********************************************************
2107   DC56             ;* Point based sounds (chime type).
2108   DC56             ;**********************************************************			
2109   DC56 36          isnd_pts	psha	
2110   DC57 17          			tba	
2111   DC58 20 03       			bra	snd_pts
2112   DC5A 36          dsnd_pts	psha	
2113   DC5B 84 07       			anda	#$07
2114   DC5D BD DD 5F    snd_pts		jsr	isnd_once			;Play Sound Index(A) Once
2115   DC60 32          			pula
2116   DC61             			;Fall Through to points 
2117   DC61             
2118   DC61 36          score_main	psha	
2119   DC62 37          			pshb	
2120   DC63 7A 00 F3    			dec	randomseed			;Change the Random # seed
2121   DC66 DF F4       			stx	x_temp_1			;Protect X
2122   DC68 BD D0 B6    			jsr	gr_score_event		;Check Game ROM Hook
2123   DC6B D6 E6       			ldab	random_bool
2124   DC6D             			ifeq
2124   DC6D             
2124   DC6D 26 FE       
2125   DC6F 73 00 E6    				com	random_bool
2126   DC72             			endif
2126   DC72             
2126   DC72             
2126   DC72             
2126   DC72             
2126   DC72             
2126   DC72~            			endif
2126   DC72~            			endif
2126   DC72             
2126   DC72~            			endif
2126   DC72~            			endif
2126   DC72             
2126   DC6E             
2126   DC6E 03          
2126   DC6F             
2126   DC6F             
2126   DC6F~            			endif
2126   DC6F~            			endif
2126   DC6F~            			endif
2126   DC6F             
2126   DC72             
2126   DC72~            			endif
2126   DC72~            			endif
2126   DC72             
2127   DC72 8D 0A       			bsr	score_update		;Add Points to Current Score, Data in A:
2128   DC74 8D A6       			bsr	update_commas		;Update Master Display Toggle From Current Player
2129   DC76 BD DD 0D    			jsr	checkreplay			;Check Current Player Score against all Replay Levels
2130   DC79 DE F4       			ldx	x_temp_1			;Get it back
2131   DC7B 33          			pulb	
2132   DC7C 32          			pula	
2133   DC7D 39          			rts	
2134   DC7E             			
2135   DC7E             
2136   DC7E             ;**********************************************
2137   DC7E             ; Update Score Routine: Score to add is in A
2138   DC7E             ;**********************************************
2139   DC7E             score_update	
2140   DC7E DE EA                   ldx	pscore_buf			;Start of Current Player Score Buffer
2141   DC80 EE 00       			ldx	$00,X				;Get XX,XX_,b__
2142   DC82 DF FA       			stx	x_temp_2			;Store it!
2143   DC84 DE EA       			ldx	pscore_buf			;Start of Current Player Score Buffer
2144   DC86 C6 04       			ldab	#$04
2145   DC88 D7 F2       			stab	flag_timer_bip		;Run Ball Play Timer (Audit)
2146   DC8A D7 BC       			stab	sys_temp1			;Number of Ram Location to iterate (4)
2147   DC8C 97 BE       			staa	sys_temp3
2148   DC8E 5F          			clrb	
2149   DC8F D7 BF       			stab	sys_temp4
2150   DC91 D7 BD       			stab	sys_temp2
2151   DC93 16          			tab					;Get Points data
2152   DC94 C4 07       			andb	#$07
2153   DC96 26 27       _su01		bne	    _su04
2154   DC98 5C          			incb	
2155   DC99 D7 BA       			stab	temp3				;Store (data&07)+1
2156   DC9B D6 BE       _su02		ldab	sys_temp3
2157   DC9D 54          			lsrb	
2158   DC9E 54          			lsrb	
2159   DC9F 54          			lsrb	
2160   DCA0 8D 45       			bsr	score2hex			;Convert MSD Blanks to 0's on (X+03)
2161   DCA2             			begin
2161   DCA2             
2162   DCA2 9B BA       				adda	temp3				;(data&07)+1
2163   DCA4 8D 3A       				bsr	hex2dec			;Decimal Adjust A, sys_temp2 incremented if A flipped
2164   DCA6 5A          				decb					
2165   DCA7             			eqend
2165   DCA7             
2165   DCA7             
2165   DCA7~            			eqend
2165   DCA7~            			eqend
2165   DCA7~            			eqend
2165   DCA7             
2165   DCA7 26 F9       
2165   DCA9             
2165   DCA9~            			eqend
2165   DCA9~            			eqend
2165   DCA9             
2166   DCA9 D6 BD       _su03		ldab	sys_temp2
2167   DCAB 27 26       			beq	_su05			;A didn't Flip, Branch.
2168   DCAD A7 03       			staa	$03,X			;Store this digit
2169   DCAF 09          			dex	
2170   DCB0 7A 00 BC    			dec	sys_temp1			;Do next set of digits
2171   DCB3             			ifne
2171   DCB3             
2171   DCB3 27 FE       
2172   DCB5 8D 30       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
2173   DCB7 7F 00 BD    				clr	sys_temp2
2174   DCBA 1B          				aba	
2175   DCBB 8D 23       				bsr	hex2dec				;Decimal Adjust A, sys_temp2 incremented if A flipped
2176   DCBD 20 EA       				bra	_su03
2177   DCBF 5A          _su04			decb	
2178   DCC0             				ifeq
2178   DCC0             
2178   DCC0 26 FE       
2179   DCC2 C6 10       					ldab	#$10
2180   DCC4 D7 BA       					stab	temp3
2181   DCC6 20 D3       					bra	_su02
2182   DCC8             				endif
2182   DCC8             
2182   DCC8             
2182   DCC8             
2182   DCC8             
2182   DCC8             
2182   DCC8~            				endif
2182   DCC8~            				endif
2182   DCC8             
2182   DCC8~            				endif
2182   DCC8~            				endif
2182   DCC8             
2182   DCC1             
2182   DCC1 06          
2182   DCC2             
2182   DCC2             
2182   DCC2~            				endif
2182   DCC2~            				endif
2182   DCC2~            				endif
2182   DCC2             
2182   DCC8             
2182   DCC8~            				endif
2182   DCC8~            				endif
2182   DCC8             
2183   DCC8 8D 1D       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
2184   DCCA A7 03       				staa	$03,X
2185   DCCC 7A 00 BC    				dec	sys_temp1
2186   DCCF 09          				dex	
2187   DCD0 5A          				decb	
2188   DCD1 20 C3       				bra	_su01
2189   DCD3 D6 BF       _su05			ldab	sys_temp4
2190   DCD5             				ifne
2190   DCD5             
2190   DCD5 27 FE       
2191   DCD7 81 10       					cmpa	#$10
2192   DCD9             					ifcs
2192   DCD9             
2192   DCD9 24 FE       
2193   DCDB 8B F0       						adda	#$F0
2194   DCDD             					endif
2194   DCDD             
2194   DCDD             
2194   DCDD             
2194   DCDD             
2194   DCDD             
2194   DCDD~            					endif
2194   DCDD~            					endif
2194   DCDD             
2194   DCDD~            					endif
2194   DCDD~            					endif
2194   DCDD             
2194   DCDA             
2194   DCDA 02          
2194   DCDB             
2194   DCDB             
2194   DCDB~            					endif
2194   DCDB~            					endif
2194   DCDB~            					endif
2194   DCDB             
2194   DCDD             
2194   DCDD~            					endif
2194   DCDD~            					endif
2194   DCDD             
2195   DCDD             				endif
2195   DCDD             
2195   DCDD             
2195   DCDD             
2195   DCDD             
2195   DCDD             
2195   DCDD~            				endif
2195   DCDD~            				endif
2195   DCDD             
2195   DCDD~            				endif
2195   DCDD~            				endif
2195   DCDD             
2195   DCD6             
2195   DCD6 06          
2195   DCD7             
2195   DCD7             
2195   DCD7~            				endif
2195   DCD7~            				endif
2195   DCD7~            				endif
2195   DCD7             
2195   DCDD             
2195   DCDD~            				endif
2195   DCDD~            				endif
2195   DCDD             
2196   DCDD A7 03       				staa	$03,X
2197   DCDF             			endif
2197   DCDF             
2197   DCDF             
2197   DCDF             
2197   DCDF             
2197   DCDF             
2197   DCDF~            			endif
2197   DCDF~            			endif
2197   DCDF             
2197   DCDF~            			endif
2197   DCDF~            			endif
2197   DCDF             
2197   DCB4             
2197   DCB4 2A          
2197   DCB5             
2197   DCB5             
2197   DCB5~            			endif
2197   DCB5~            			endif
2197   DCB5~            			endif
2197   DCB5             
2197   DCDF             
2197   DCDF~            			endif
2197   DCDF~            			endif
2197   DCDF             
2198   DCDF 39          			rts	
2199   DCE0             
2200   DCE0             ;******************************************************************************
2201   DCE0             ; Convert Hex to Decimal: If value was above 9 then sys_temp2 is incremented 
2202   DCE0             ;******************************************************************************
2203   DCE0 19          hex2dec		daa	
2204   DCE1             			ifcs
2204   DCE1             
2204   DCE1 24 FE       
2205   DCE3 7C 00 BD    				inc	sys_temp2
2206   DCE6             			endif
2206   DCE6             
2206   DCE6             
2206   DCE6             
2206   DCE6             
2206   DCE6             
2206   DCE6~            			endif
2206   DCE6~            			endif
2206   DCE6             
2206   DCE6~            			endif
2206   DCE6~            			endif
2206   DCE6             
2206   DCE2             
2206   DCE2 03          
2206   DCE3             
2206   DCE3             
2206   DCE3~            			endif
2206   DCE3~            			endif
2206   DCE3~            			endif
2206   DCE3             
2206   DCE6             
2206   DCE6~            			endif
2206   DCE6~            			endif
2206   DCE6             
2207   DCE6 39          			rts	
2208   DCE7             
2209   DCE7 A6 03       score2hex	ldaa	$03,X
2210   DCE9 4C          			inca	
2211   DCEA             			ifne					;Leave if both digits are blanked
2211   DCEA             
2211   DCEA 27 FE       
2212   DCEC 4A          				deca	
2213   DCED 81 F0       				cmpa	#$F0
2214   DCEF 25 05       				bcs	sh_exit			;if A was less than #F0
2215   DCF1 8B 10       				adda	#$10				;Set High Digit to a 0
2216   DCF3             			endif
2216   DCF3             
2216   DCF3             
2216   DCF3             
2216   DCF3             
2216   DCF3             
2216   DCF3~            			endif
2216   DCF3~            			endif
2216   DCF3             
2216   DCF3~            			endif
2216   DCF3~            			endif
2216   DCF3             
2216   DCEB             
2216   DCEB 07          
2216   DCEC             
2216   DCEC             
2216   DCEC~            			endif
2216   DCEC~            			endif
2216   DCEC~            			endif
2216   DCEC             
2216   DCF3             
2216   DCF3~            			endif
2216   DCF3~            			endif
2216   DCF3             
2217   DCF3 7C 00 BF    			inc	sys_temp4			;Digit was cleared
2218   DCF6 39          sh_exit		rts 
2219   DCF7             
2220   DCF7             ;**************************************************************
2221   DCF7             ;* Add points to Scoring Queue
2222   DCF7             ;**************************************************************	
2223   DCF7 36          add_points	psha	
2224   DCF8 37          			pshb	
2225   DCF9 16          			tab	
2226   DCFA C4 07       			andb	#$07
2227   DCFC CE 11 30    			ldx	#score_queue_end	
2228   DCFF             			begin
2228   DCFF             
2229   DCFF 09          				dex	
2230   DD00 5A          				decb	
2231   DD01             			miend
2231   DD01             
2231   DD01             
2231   DD01~            			miend
2231   DD01~            			miend
2231   DD01~            			miend
2231   DD01             
2231   DD01 2A FC       
2231   DD03             
2231   DD03~            			miend
2231   DD03~            			miend
2231   DD03             
2232   DD03 44          			lsra	
2233   DD04 44          			lsra	
2234   DD05 44          			lsra	
2235   DD06 AB 00       			adda	$00,X
2236   DD08 A7 00       			staa	$00,X
2237   DD0A 33          			pulb	
2238   DD0B 32          			pula	
2239   DD0C 39          			rts	
2240   DD0D              
2241   DD0D             ;**********************************************************
2242   DD0D             ;* Checks the current player score against the energy base
2243   DD0D             ;* award level multiplier. 
2244   DD0D             ;**********************************************************
2245   DD0D CE 00 FA    checkreplay	ldx	#x_temp_2
2246   DD10 8D 31       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
2247   DD12 D7 FA       			stab	x_temp_2
2248   DD14 DE EA       			ldx	pscore_buf			;Current Player Score Buffer Pointer
2249   DD16 8D 2B       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
2250   DD18 01          			nop
2251   DD19 01          			nop
2252   DD1A 01          			nop
2253   DD1B 01          			nop
2254   DD1C BD EB FC    			jsr	get_aud_baseawd		;loads the P1 or P1 audit location for base awards
2255   DD1F BD DF B6    			jsr	cmosinc_a
2256   DD22 11          			cba
2257   DD23             			iflo
2257   DD23             
2257   DD23 22 FE       
2258   DD25 91 FA       				cmpa	x_temp_2
2259   DD27             				ifge
2259   DD27             
2259   DD27 23 FE       
2260   DD29 DF C6       					stx	thread_priority
2261   DD2B 01          					nop
2262   DD2C 01          					nop
2263   DD2D 01          					nop
2264   DD2E 01          					nop
2265   DD2F 01          					nop
2266   DD30 01          					nop
2267   DD31 CE 01 52    					ldx	#(aud_replay1times + 2)
2268   DD34 01          					nop
2269   DD35 BD E9 0B    					jsr	ptrx_plus_1			;add 1 to address in X
2270   DD38 DE C6       					ldx	thread_priority
2271   DD3A BD E8 70    					jsr	award_replay
2272   DD3D             				endif
2272   DD3D             
2272   DD3D             
2272   DD3D             
2272   DD3D             
2272   DD3D             
2272   DD3D~            				endif
2272   DD3D~            				endif
2272   DD3D             
2272   DD3D~            				endif
2272   DD3D~            				endif
2272   DD3D             
2272   DD28             
2272   DD28 14          
2272   DD29             
2272   DD29             
2272   DD29~            				endif
2272   DD29~            				endif
2272   DD29~            				endif
2272   DD29             
2272   DD3D             
2272   DD3D~            				endif
2272   DD3D~            				endif
2272   DD3D             
2273   DD3D             			endif
2273   DD3D             
2273   DD3D             
2273   DD3D             
2273   DD3D             
2273   DD3D             
2273   DD3D~            			endif
2273   DD3D~            			endif
2273   DD3D             
2273   DD3D~            			endif
2273   DD3D~            			endif
2273   DD3D             
2273   DD24             
2273   DD24 18          
2273   DD25             
2273   DD25             
2273   DD25~            			endif
2273   DD25~            			endif
2273   DD25~            			endif
2273   DD25             
2273   DD3D             
2273   DD3D~            			endif
2273   DD3D~            			endif
2273   DD3D             
2274   DD3D 01          			nop
2275   DD3E 01          			nop
2276   DD3F 01          			nop
2277   DD40 01          			nop
2278   DD41 01          			nop
2279   DD42 39          			rts
2280   DD43             			
2281   DD43             ;*********************************************************
2282   DD43             ;* Load Million and Hundred Thousand Score digits into
2283   DD43             ;* A and B. Player score buffer pointer is in X. Routine
2284   DD43             ;* will convert blanks($ff) into 0's
2285   DD43             ;*********************************************************			
2286   DD43             get_hs_digits	
2287   DD43 A6 00                   ldaa	$00,X
2288   DD45 84 0F       			anda	#$0F
2289   DD47 E6 01       			ldab	$01,X
2290   DD49 8D 04       			bsr	b_plus10		;If B minus then B = B + 0x10
2291   DD4B 8D 09       			bsr	split_ab		;Shift A<<4 B>>4
2292   DD4D 1B          			aba	
2293   DD4E 16          			tab
2294   DD4F C1 A0       b_plus10	cmpb	#$A0
2295   DD51             			ifcc
2295   DD51             
2295   DD51 25 FE       
2296   DD53 CB 10       				addb	#$10
2297   DD55             			endif
2297   DD55             
2297   DD55             
2297   DD55             
2297   DD55             
2297   DD55             
2297   DD55~            			endif
2297   DD55~            			endif
2297   DD55             
2297   DD55~            			endif
2297   DD55~            			endif
2297   DD55             
2297   DD52             
2297   DD52 02          
2297   DD53             
2297   DD53             
2297   DD53~            			endif
2297   DD53~            			endif
2297   DD53~            			endif
2297   DD53             
2297   DD55             
2297   DD55~            			endif
2297   DD55~            			endif
2297   DD55             
2298   DD55 39          			rts	
2299   DD56             			
2300   DD56             ;*********************************************************
2301   DD56             ;* Shifts A and B to convert million and hundred thousand
2302   DD56             ;* score digits into a single byte.
2303   DD56             ;*********************************************************
2304   DD56 48          split_ab	asla	
2305   DD57 48          			asla	
2306   DD58 48          			asla	
2307   DD59 48          			asla	
2308   DD5A 54          			lsrb	
2309   DD5B 54          			lsrb	
2310   DD5C 54          			lsrb	
2311   DD5D 54          			lsrb	
2312   DD5E 39          			rts	 
2313   DD5F             
2314   DD5F             ;*********************************************************
2315   DD5F             ;* Sound Routines 
2316   DD5F             ;*********************************************************
2317   DD5F             ;* isnd_once - will play index sound in A one time by 
2318   DD5F             ;*             loading B with 01 and calling the main
2319   DD5F             ;*             sound subroutine.
2320   DD5F             ;*********************************************************			
2321   DD5F 37          isnd_once	pshb	
2322   DD60 C6 01       			ldab	#$01
2323   DD62 8D 02       			bsr	sound_sub
2324   DD64 33          			pulb	
2325   DD65 39          			rts
2326   DD66             
2327   DD66             ;*********************************************************
2328   DD66             ;* This is the main sound subroutine. It will play index
2329   DD66             ;* sound contained in A, B times.
2330   DD66             ;*********************************************************				
2331   DD66 DF C6       sound_sub	stx	thread_priority
2332   DD68 36          			psha	
2333   DD69 37          			pshb	
2334   DD6A D6 DD       			ldab	sys_soundflags			;Sound Status
2335   DD6C 27 1C       			beq	b_04E					;Goto Sound Routine #2
2336   DD6E 16          			tab						
2337   DD6F 48          			asla	
2338   DD70 1B          			aba	                              ;A=A*3
2339   DD71 FE D0 53    			ldx	gr_soundtable_ptr			;Game ROM Table: Sounds
2340   DD74 BD DF 62    			jsr	xplusa				;X = X + A
2341   DD77 A6 02       			ldaa	$02,X                         ;get the actual sound command that will be sent
2342   DD79 4C          			inca	
2343   DD7A             			ifeq						;If value is $FF, then this is complex sound
2343   DD7A             
2343   DD7A 26 FE       
2344   DD7C EE 00       				ldx	$00,X
2345   DD7E             			endif
2345   DD7E             
2345   DD7E             
2345   DD7E             
2345   DD7E             
2345   DD7E             
2345   DD7E~            			endif
2345   DD7E~            			endif
2345   DD7E             
2345   DD7E~            			endif
2345   DD7E~            			endif
2345   DD7E             
2345   DD7B             
2345   DD7B 02          
2345   DD7C             
2345   DD7C             
2345   DD7C~            			endif
2345   DD7C~            			endif
2345   DD7C~            			endif
2345   DD7C             
2345   DD7E             
2345   DD7E~            			endif
2345   DD7E~            			endif
2345   DD7E             
2346   DD7E A6 00       			ldaa	$00,X
2347   DD80 D6 D6       			ldab	cur_sndflags
2348   DD82 C5 40       			bitb	#$40
2349   DD84             			ifeq
2349   DD84             
2349   DD84 26 FE       
2350   DD86 8D 1D       				bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
2351   DD88             				ifcc
2351   DD88             
2351   DD88 25 FE       
2352   DD8A 33          b_04E					pulb	
2353   DD8B 32          					pula	
2354   DD8C 20 2A       					bra	b_051
2355   DD8E             				endif
2355   DD8E             
2355   DD8E             
2355   DD8E             
2355   DD8E             
2355   DD8E             
2355   DD8E~            				endif
2355   DD8E~            				endif
2355   DD8E             
2355   DD8E~            				endif
2355   DD8E~            				endif
2355   DD8E             
2355   DD89             
2355   DD89 04          
2355   DD8A             
2355   DD8A             
2355   DD8A~            				endif
2355   DD8A~            				endif
2355   DD8A~            				endif
2355   DD8A             
2355   DD8E             
2355   DD8E~            				endif
2355   DD8E~            				endif
2355   DD8E             
2356   DD8E             			endif
2356   DD8E             
2356   DD8E             
2356   DD8E             
2356   DD8E             
2356   DD8E             
2356   DD8E~            			endif
2356   DD8E~            			endif
2356   DD8E             
2356   DD8E~            			endif
2356   DD8E~            			endif
2356   DD8E             
2356   DD85             
2356   DD85 08          
2356   DD86             
2356   DD86             
2356   DD86~            			endif
2356   DD86~            			endif
2356   DD86~            			endif
2356   DD86             
2356   DD8E             
2356   DD8E~            			endif
2356   DD8E~            			endif
2356   DD8E             
2357   DD8E 4D          b_050		tsta	
2358   DD8F 2A 6B       			bpl	snd_exit_pull			;pula,pulb,rts.
2359   DD91 D6 E2       			ldab	next_sndcnt
2360   DD93             			ifne
2360   DD93             
2360   DD93 27 FE       
2361   DD95 D6 E1             			ldab	next_sndflags
2362   DD97 8D 0C             			bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
2363   DD99 25 61             			bcs	snd_exit_pull			;pula,pulb,rts.
2364   DD9B                   		endif
2364   DD9B             
2364   DD9B             
2364   DD9B             
2364   DD9B             
2364   DD9B             
2364   DD9B~                  		endif
2364   DD9B~                  		endif
2364   DD9B             
2364   DD9B~                  		endif
2364   DD9B~                  		endif
2364   DD9B             
2364   DD94             
2364   DD94 06          
2364   DD95             
2364   DD95             
2364   DD95~                  		endif
2364   DD95~                  		endif
2364   DD95~                  		endif
2364   DD95             
2364   DD9B             
2364   DD9B~                  		endif
2364   DD9B~                  		endif
2364   DD9B             
2365   DD9B 97 E1       			staa	next_sndflags
2366   DD9D 33          			pulb	
2367   DD9E 32          			pula	
2368   DD9F 97 E3       			staa	next_sndcmd
2369   DDA1 D7 E2       			stab	next_sndcnt
2370   DDA3 20 59       			bra	snd_exit					;rts
2371   DDA5             			
2372   DDA5 36          isnd_test	psha	
2373   DDA6 37          			pshb	
2374   DDA7 84 0F       			anda	#$0F
2375   DDA9 C4 0F       			andb	#$0F
2376   DDAB 11          			cba	
2377   DDAC 33          			pulb	
2378   DDAD 32          			pula	
2379   DDAE             			ifeq
2379   DDAE             
2379   DDAE 26 FE       
2380   DDB0 C5 20       				bitb	#$20
2381   DDB2             				ifeq
2381   DDB2             
2381   DDB2 26 FE       
2382   DDB4 0D          					sec
2383   DDB5             				endif
2383   DDB5             
2383   DDB5             
2383   DDB5             
2383   DDB5             
2383   DDB5             
2383   DDB5~            				endif
2383   DDB5~            				endif
2383   DDB5             
2383   DDB5~            				endif
2383   DDB5~            				endif
2383   DDB5             
2383   DDB3             
2383   DDB3 01          
2383   DDB4             
2383   DDB4             
2383   DDB4~            				endif
2383   DDB4~            				endif
2383   DDB4~            				endif
2383   DDB4             
2383   DDB5             
2383   DDB5~            				endif
2383   DDB5~            				endif
2383   DDB5             
2384   DDB5             			endif
2384   DDB5             
2384   DDB5             
2384   DDB5             
2384   DDB5             
2384   DDB5             
2384   DDB5~            			endif
2384   DDB5~            			endif
2384   DDB5             
2384   DDB5~            			endif
2384   DDB5~            			endif
2384   DDB5             
2384   DDAF             
2384   DDAF 05          
2384   DDB0             
2384   DDB0             
2384   DDB0~            			endif
2384   DDB0~            			endif
2384   DDB0~            			endif
2384   DDB0             
2384   DDB5             
2384   DDB5~            			endif
2384   DDB5~            			endif
2384   DDB5             
2385   DDB5 39          			rts
2386   DDB6             			
2387   DDB6             ;A=sound command
2388   DDB6             ;B=count
2389   DDB6 DF C6       isnd_mult	stx	thread_priority
2390   DDB8 36          b_051		psha	
2391   DDB9 37          			pshb	
2392   DDBA D7 D4       			stab	soundcount
2393   DDBC 16          			tab	                              ;store our sound in B temporarily
2394   DDBD 86 7F       			ldaa	#$7F
2395   DDBF 8D 42       			bsr	send_snd				;Send Sound Stop Command
2396   DDC1 17          			tba	                              ;get it back
2397   DDC2 97 DE       			staa	soundindex				;Sound Command Table Index
2398   DDC4 48          			asla	
2399   DDC5 1B          			aba						;Index * 3
2400   DDC6 FE D0 53    			ldx	gr_soundtable_ptr			;Game ROM: Sound Table Pointer
2401   DDC9 BD DF 62    isnd_mult_x	jsr	xplusa				;X = X + A
2402   DDCC A6 02       			ldaa	$02,X					;Sound Command
2403   DDCE 81 FF       			cmpa	#$FF
2404   DDD0             			ifne						;Simple Sound
2404   DDD0             
2404   DDD0 27 FE       
2405   DDD2 E6 00       				ldab	$00,X
2406   DDD4 C4 7F       				andb	#$7F
2407   DDD6 D7 D6       				stab	cur_sndflags			
2408   DDD8 E6 01       				ldab	$01,X
2409   DDDA D7 DA       				stab	soundirqcount+1			
2410   DDDC 7F 00 D9    				clr	soundirqcount
2411   DDDF DE D9       				ldx	soundirqcount			;Clear the MSB of the word counter ($BD,$BE)
2412   DDE1 DF DB       				stx	soundindex_com			;Store the whole counter in the Common Sound Index
2413   DDE3 C6 40       				ldab	#$40
2414   DDE5 D7 DD       				stab	sys_soundflags			;Sound Flag?
2415   DDE7 8D 18       				bsr	send_snd_save			;Send the Command, Save in 'lastsound'
2416   DDE9             			else						;Complex Sound
2416   DDE9             
2416   DDE9             
2416   DDE9             
2416   DDE9             
2416   DDD1             
2416   DDD1             
2416   DDD1             
2416   DDD1~            			else						;Complex Sound
2416   DDD1~            			else						;Complex Sound
2416   DDD1~            			else						;Complex Sound
2416   DDD1~            			else						;Complex Sound
2416   DDD1             
2416   DDD1~            			else						;Complex Sound
2416   DDD1~            			else						;Complex Sound
2416   DDD1~            			else						;Complex Sound
2416   DDD1~            			else						;Complex Sound
2416   DDD1             
2416   DDD1             
2416   DDD1 19          
2416   DDE9             
2416   DDE9 20 FE       
2416   DDEB             
2416   DDEB             
2416   DDEB             
2416   DDEB~            			else						;Complex Sound
2416   DDEB~            			else						;Complex Sound
2416   DDEB~            			else						;Complex Sound
2416   DDEB~            			else						;Complex Sound
2416   DDEB~            			else						;Complex Sound
2416   DDEB             
2416   DDEB~            			else						;Complex Sound
2416   DDEB~            			else						;Complex Sound
2416   DDEB             
2416   DDEB~            			else						;Complex Sound
2416   DDEB~            			else						;Complex Sound
2416   DDEB             
2417   DDEB EE 00       				ldx	$00,X					;Here if Complex Sound Command
2418   DDED C6 80       				ldab	#$80
2419   DDEF D7 DD       				stab	sys_soundflags			;Set Status Flag
2420   DDF1 EA 00       				orab	$00,X
2421   DDF3 D7 D6       				stab	cur_sndflags
2422   DDF5 08          				inx	
2423   DDF6 DF DB       				stx	soundindex_com
2424   DDF8 DF D7       				stx	soundptr
2425   DDFA 8D 0E       				bsr	do_complex_snd			;Process it and send
2426   DDFC             			endif
2426   DDFC             
2426   DDFC             
2426   DDFC             
2426   DDFC             
2426   DDFC             
2426   DDFC~            			endif
2426   DDFC~            			endif
2426   DDFC             
2426   DDFC~            			endif
2426   DDFC~            			endif
2426   DDFC             
2426   DDEA             
2426   DDEA 11          
2426   DDEB             
2426   DDEB             
2426   DDEB~            			endif
2426   DDEB~            			endif
2426   DDEB~            			endif
2426   DDEB             
2426   DDFC             
2426   DDFC~            			endif
2426   DDFC~            			endif
2426   DDFC             
2427   DDFC             snd_exit_pull	
2428   DDFC 33                      pulb	
2429   DDFD 32          			pula	
2430   DDFE DE C6       snd_exit	ldx	thread_priority
2431   DE00 39          			rts	
2432   DE01             
2433   DE01             ;*****************************************************************
2434   DE01             ;* Send the command to the sound board, stores the command sent
2435   DE01             ;* in 'lastsound' for reference.
2436   DE01             ;*****************************************************************			
2437   DE01             send_snd_save	
2438   DE01 97 D5                   staa	lastsound
2439   DE03 BD D0 B4    send_snd	jsr	    gr_sound_event			
2440   DE06 B7 21 00    			staa	pia_sound_data
2441   DE09 39          			rts	
2442   DE0A             
2443   DE0A             ;*****************************************************************
2444   DE0A             ;* This routine will send the next item in a complex sound
2445   DE0A             ;* index to the Sound board PIA.
2446   DE0A             ;*****************************************************************			
2447   DE0A DE D7       do_complex_snd	ldx	soundptr
2448   DE0C A6 00       _csnd_loop		ldaa	$00,X				;Load the first byte of this sequence
2449   DE0E 16                          tab	
2450   DE0F C4 C0                       andb	#$C0
2451   DE11                             ifne					;Check bits $80 or $40
2451   DE11             
2451   DE11 27 FE       
2452   DE13                                 ifpl				;If bit $80 is set, then sound is immediate
2452   DE13             
2452   DE13 2B FE       
2453   DE15 84 3F                               anda	#$3F
2454   DE17 97 DF                               staa	csound_timer
2455   DE19 08                                  inx	
2456   DE1A A6 00                               ldaa	$00,X
2457   DE1C 97 E0       b_05B					staa	csound_timer+1
2458   DE1E 96 D6                               ldaa	cur_sndflags
2459   DE20 84 EF                               anda	#$EF			;Flag this sound as non-immediate (timer based)
2460   DE22 97 D6       store_csndflg			staa	cur_sndflags	;Store Flag
2461   DE24 08                                  inx	
2462   DE25 20 E5                               bra	_csnd_loop
2463   DE27                                 endif
2463   DE27             
2463   DE27             
2463   DE27             
2463   DE27             
2463   DE27             
2463   DE27~                                endif
2463   DE27~                                endif
2463   DE27             
2463   DE27~                                endif
2463   DE27~                                endif
2463   DE27             
2463   DE14             
2463   DE14 12          
2463   DE15             
2463   DE15             
2463   DE15~                                endif
2463   DE15~                                endif
2463   DE15~                                endif
2463   DE15             
2463   DE27             
2463   DE27~                                endif
2463   DE27~                                endif
2463   DE27             
2464   DE27 7F 00 DF                        clr	csound_timer
2465   DE2A 84 7F                           anda	#$7F
2466   DE2C 26 EE                           bne	b_05B			;If the timer is not zero, then flag this sound as non-immediate
2467   DE2E 96 D6                           ldaa	cur_sndflags
2468   DE30 8A 10                           oraa	#$10			;Flag as non-immediate
2469   DE32 20 EE                           bra	store_csndflg
2470   DE34                             endif
2470   DE34             
2470   DE34             
2470   DE34             
2470   DE34             
2470   DE34             
2470   DE34~                            endif
2470   DE34~                            endif
2470   DE34             
2470   DE34~                            endif
2470   DE34~                            endif
2470   DE34             
2470   DE12             
2470   DE12 21          
2470   DE13             
2470   DE13             
2470   DE13~                            endif
2470   DE13~                            endif
2470   DE13~                            endif
2470   DE13             
2470   DE34             
2470   DE34~                            endif
2470   DE34~                            endif
2470   DE34             
2471   DE34 8D CB                       bsr	send_snd_save		;Send the Command, Save in 'lastsound'
2472   DE36 08                          inx	
2473   DE37 DF D7                       stx	soundptr			;Move pointer to next byte
2474   DE39 A6 00                       ldaa	$00,X
2475   DE3B 81 3F                       cmpa	#$3F				;Are we done?
2476   DE3D                             ifeq
2476   DE3D             
2476   DE3D 26 FE       
2477   DE3F 96 D6                           ldaa	cur_sndflags		;Yes 
2478   DE41 84 7F                           anda	#$7F				;Mark it as a simple sound now
2479   DE43 97 D6                           staa	cur_sndflags
2480   DE45                             endif
2480   DE45             
2480   DE45             
2480   DE45             
2480   DE45             
2480   DE45             
2480   DE45~                            endif
2480   DE45~                            endif
2480   DE45             
2480   DE45~                            endif
2480   DE45~                            endif
2480   DE45             
2480   DE3E             
2480   DE3E 06          
2480   DE3F             
2480   DE3F             
2480   DE3F~                            endif
2480   DE3F~                            endif
2480   DE3F~                            endif
2480   DE3F             
2480   DE45             
2480   DE45~                            endif
2480   DE45~                            endif
2480   DE45             
2481   DE45 DE DF                       ldx	csound_timer
2482   DE47 DF D9                       stx	soundirqcount
2483   DE49 39                          rts	
2484   DE4A             
2485   DE4A             ;**********************************************************
2486   DE4A             ;* This routine will check two of the switch flags in the
2487   DE4A             ;* B register (byte 1 of switch table). If the switch 
2488   DE4A             ;* is disabled for either flag (tilt and gameover) then
2489   DE4A             ;* the routine returns with the carry flag set.
2490   DE4A             ;**********************************************************			
2491   DE4A 36          check_sw_mask	psha	
2492   DE4B B6 D0 4D                    ldaa	gr_lastswitch			;Last Switch # for Game
2493   DE4E 91 C1                       cmpa	sw_encoded				;Switch #
2494   DE50                             ifge						;Out of Range!
2494   DE50             
2494   DE50 23 FE       
2495   DE52 C5 40                           bitb	#$40					;Flag 40: Active on Game Tilt
2496   DE54                                 ifeq
2496   DE54             
2496   DE54 26 FE       
2497   DE56 7D 00 E4                            tst	flag_tilt				;Tilt Flag
2498   DE59 26 09                               bne	sw_ignore
2499   DE5B                                 endif
2499   DE5B             
2499   DE5B             
2499   DE5B             
2499   DE5B             
2499   DE5B             
2499   DE5B~                                endif
2499   DE5B~                                endif
2499   DE5B             
2499   DE5B~                                endif
2499   DE5B~                                endif
2499   DE5B             
2499   DE55             
2499   DE55 05          
2499   DE56             
2499   DE56             
2499   DE56~                                endif
2499   DE56~                                endif
2499   DE56~                                endif
2499   DE56             
2499   DE5B             
2499   DE5B~                                endif
2499   DE5B~                                endif
2499   DE5B             
2500   DE5B C5 20                           bitb	#$20					;Flag 20: Active on Game Over
2501   DE5D 26 06                           bne	sw_active
2502   DE5F 7D 00 E5                        tst	flag_gameover			;Game Over?
2503   DE62 27 01                           beq	sw_active
2504   DE64                             endif
2504   DE64             
2504   DE64             
2504   DE64             
2504   DE64             
2504   DE64             
2504   DE64~                            endif
2504   DE64~                            endif
2504   DE64             
2504   DE64~                            endif
2504   DE64~                            endif
2504   DE64             
2504   DE51             
2504   DE51 12          
2504   DE52             
2504   DE52             
2504   DE52~                            endif
2504   DE52~                            endif
2504   DE52~                            endif
2504   DE52             
2504   DE64             
2504   DE64~                            endif
2504   DE64~                            endif
2504   DE64             
2505   DE64 0D          sw_ignore		sec						;Ignore this switch when carry is set
2506   DE65 32          sw_active		pula	
2507   DE66 39                          rts
2508   DE67             
2509   DE67             ;**********************************************************
2510   DE67             ;* Switch is in down position, see if we should run it.
2511   DE67             ;**********************************************************			
2512   DE67 BD DF 5A    sw_down		    jsr	sw_tbl_lookup		;Loads X with pointer to switch table entry
2513   DE6A E6 00                       ldab	$00,X				;GAME ROM Switch Data 1(Flags,etc)
2514   DE6C 96 C0                       ldaa	sys_temp5
2515   DE6E 95 BE                       bita	sys_temp3
2516   DE70 27 06                       beq	sw_dtime			;Is switch still down?
2517   DE72 C5 08                       bitb	#$08				;No, but check Flag 08 which is Instant Trigger
2518   DE74                             ifne					;Not instant,.. leave now.
2518   DE74             
2518   DE74 27 FE       
2519   DE76 20 04                           bra	sw_trig_yes			;Must have been instant, do it now.	
2520   DE78 C5 10       sw_dtime			bitb	#$10				;Switch has been down enough, but is it enabled?
2521   DE7A                                 ifne					;no.. leave now.
2521   DE7A             
2521   DE7A 27 FE       
2522   DE7C 8D CC       sw_trig_yes				bsr	check_sw_mask		;Checks Switch Flags for Tilt and Gameover and if switch is in range
2523   DE7E                                     ifcc					;If not okay to run... leave
2523   DE7E             
2523   DE7E 25 FE       
2524   DE80 4F                                      clra	
2525   DE81 C5 40                                   bitb	#$40				;Is it Active on Game Tilt?
2526   DE83                                         ifne					
2526   DE83             
2526   DE83 27 FE       
2527   DE85 8A 04                                       oraa	#$04				;Give this thread a different priority then
2528   DE87                                         endif
2528   DE87             
2528   DE87             
2528   DE87             
2528   DE87             
2528   DE87             
2528   DE87~                                        endif
2528   DE87~                                        endif
2528   DE87             
2528   DE87~                                        endif
2528   DE87~                                        endif
2528   DE87             
2528   DE84             
2528   DE84 02          
2528   DE85             
2528   DE85             
2528   DE85~                                        endif
2528   DE85~                                        endif
2528   DE85~                                        endif
2528   DE85             
2528   DE87             
2528   DE87~                                        endif
2528   DE87~                                        endif
2528   DE87             
2529   DE87 97 C6                                   staa	thread_priority
2530   DE89 96 C1                                   ldaa	sw_encoded			;Switch # (encoded)
2531   DE8B EE 01                                   ldx	$01,X
2532   DE8D C5 07                                   bitb	#$07				;Was this a inline defined switch type? Type = 0
2533   DE8F                                         ifeq					;Always?
2533   DE8F             
2533   DE8F 26 FE       
2534   DE91 EE 02                                       ldx	$02,X				;Get handler address at base pointer + 2
2535   DE93                                         endif
2535   DE93             
2535   DE93             
2535   DE93             
2535   DE93             
2535   DE93             
2535   DE93~                                        endif
2535   DE93~                                        endif
2535   DE93             
2535   DE93~                                        endif
2535   DE93~                                        endif
2535   DE93             
2535   DE90             
2535   DE90 02          
2535   DE91             
2535   DE91             
2535   DE91~                                        endif
2535   DE91~                                        endif
2535   DE91~                                        endif
2535   DE91             
2535   DE93             
2535   DE93~                                        endif
2535   DE93~                                        endif
2535   DE93             
2536   DE93 5D                                      tstb					;Is the handler code WML7 or Native?
2537   DE94                                         ifmi					;Minus = WML7
2537   DE94             
2537   DE94 2A FE       
2538   DE96 DF C2                                       stx	sys_temp_w2			;X = Handler Address
2539   DE98 CE E5 76                                    ldx	#macro_next		;Will put this routine into VM.
2540   DE9B                                         endif
2540   DE9B             
2540   DE9B             
2540   DE9B             
2540   DE9B             
2540   DE9B             
2540   DE9B~                                        endif
2540   DE9B~                                        endif
2540   DE9B             
2540   DE9B~                                        endif
2540   DE9B~                                        endif
2540   DE9B             
2540   DE95             
2540   DE95 05          
2540   DE96             
2540   DE96             
2540   DE96~                                        endif
2540   DE96~                                        endif
2540   DE96~                                        endif
2540   DE96             
2540   DE9B             
2540   DE9B~                                        endif
2540   DE9B~                                        endif
2540   DE9B             
2541   DE9B BD D0 B2                                jsr	gr_switch_event		;Game ROM switch event hook
2542   DE9E BD DA FC                                jsr	newthread_sp		;Push VM: Data in A,B,X,threadpriority,$A6,$A7
2543   DEA1 25 69                                   bcs	_clc_rts			;Carry set if VM was full and thread not added
2544   DEA3                                                             ;Exit now and don't mark switch as attended too.
2545   DEA3                                     endif
2545   DEA3             
2545   DEA3             
2545   DEA3             
2545   DEA3             
2545   DEA3             
2545   DEA3~                                    endif
2545   DEA3~                                    endif
2545   DEA3             
2545   DEA3~                                    endif
2545   DEA3~                                    endif
2545   DEA3             
2545   DE7F             
2545   DE7F 23          
2545   DE80             
2545   DE80             
2545   DE80~                                    endif
2545   DE80~                                    endif
2545   DE80~                                    endif
2545   DE80             
2545   DEA3             
2545   DEA3~                                    endif
2545   DEA3~                                    endif
2545   DEA3             
2546   DEA3                                 endif
2546   DEA3             
2546   DEA3             
2546   DEA3             
2546   DEA3             
2546   DEA3             
2546   DEA3~                                endif
2546   DEA3~                                endif
2546   DEA3             
2546   DEA3~                                endif
2546   DEA3~                                endif
2546   DEA3             
2546   DE7B             
2546   DE7B 27          
2546   DE7C             
2546   DE7C             
2546   DE7C~                                endif
2546   DE7C~                                endif
2546   DE7C~                                endif
2546   DE7C             
2546   DEA3             
2546   DEA3~                                endif
2546   DEA3~                                endif
2546   DEA3             
2547   DEA3                             endif
2547   DEA3             
2547   DEA3             
2547   DEA3             
2547   DEA3             
2547   DEA3             
2547   DEA3~                            endif
2547   DEA3~                            endif
2547   DEA3             
2547   DEA3~                            endif
2547   DEA3~                            endif
2547   DEA3             
2547   DE75             
2547   DE75 2D          
2547   DE76             
2547   DE76             
2547   DE76~                            endif
2547   DE76~                            endif
2547   DE76~                            endif
2547   DE76             
2547   DEA3             
2547   DEA3~                            endif
2547   DEA3~                            endif
2547   DEA3             
2548   DEA3 DE BC                       ldx	sys_temp1
2549   DEA5 96 BE                       ldaa	sys_temp3
2550   DEA7 A8 7B                       eora	switch_debounced,X		;Clear Switch Matrix Flag (switch attended too)
2551   DEA9 A7 7B                       staa	switch_debounced,X
2552   DEAB DE BC       sw_proc		    ldx	sys_temp1
2553   DEAD D6 BE                       ldab	sys_temp3
2554   DEAF 53                          comb	
2555   DEB0 17                          tba	
2556   DEB1 E4 83                       andb	switch_masked,X
2557   DEB3 E7 83                       stab	switch_masked,X
2558   DEB5 16                          tab	
2559   DEB6 E4 8B                       andb	switch_pending,X
2560   DEB8 E7 8B                       stab	switch_pending,X
2561   DEBA 16                          tab	
2562   DEBB A4 93                       anda	switch_aux,X
2563   DEBD A7 93                       staa	switch_aux,X
2564   DEBF E4 9B                       andb	switch_b4,X
2565   DEC1 E7 9B                       stab	switch_b4,X
2566   DEC3 39                          rts	
2567   DEC4             			
2568   DEC4             ;****************************************************************************
2569   DEC4             ;*
2570   DEC4             ;****************************************************************************			
2571   DEC4 DF BC       check_sw_close	stx	sys_temp1
2572   DEC6 E6 7B                       ldab	switch_debounced,X
2573   DEC8 D7 C0                       stab	sys_temp5				;Store 
2574   DECA 97 BF                       staa	sys_temp4
2575   DECC 8D 2D       _sc01			bsr	getswitch				;Clear Carry if Switch Active or Done
2576   DECE 25 28                       bcs	to_ldx_rts				;get outta here!
2577   DED0 8D 3C                       bsr	sw_pack				;$A5 = ($A1<<3)+BitPos($A2)
2578   DED2 8D 6A                       bsr	sw_get_time				;Gets Switch Trigger Data
2579   DED4                             ifne						;If it is not 0 then we must time it
2579   DED4             
2579   DED4 27 FE       
2580   DED6 9B C8                           adda	irqcount				;Number of IRQ's since last loop
2581   DED8 DE B2                           ldx	switch_queue_pointer
2582   DEDA 8C 11 18                        cpx	#switch_queue_end
2583   DEDD 27 ED                           beq	_sc01
2584   DEDF A7 00                           staa	$00,X
2585   DEE1 96 C1                           ldaa	sw_encoded				;Encoded Switch Number
2586   DEE3 A7 01                           staa	$01,X
2587   DEE5 08                              inx	
2588   DEE6 08                              inx	
2589   DEE7 DF B2                           stx	switch_queue_pointer
2590   DEE9 DE BC                           ldx	sys_temp1
2591   DEEB A6 9B                           ldaa	switch_b4,X
2592   DEED 9A BE                           oraa	sys_temp3
2593   DEEF A7 9B                           staa	switch_b4,X
2594   DEF1 20 D9                           bra	_sc01
2595   DEF3                             endif
2595   DEF3             
2595   DEF3             
2595   DEF3             
2595   DEF3             
2595   DEF3             
2595   DEF3~                            endif
2595   DEF3~                            endif
2595   DEF3             
2595   DEF3~                            endif
2595   DEF3~                            endif
2595   DEF3             
2595   DED5             
2595   DED5 1D          
2595   DED6             
2595   DED6             
2595   DED6~                            endif
2595   DED6~                            endif
2595   DED6~                            endif
2595   DED6             
2595   DEF3             
2595   DEF3~                            endif
2595   DEF3~                            endif
2595   DEF3             
2596   DEF3 BD DE 67                    jsr	sw_down				;Ready to do switch now!
2597   DEF6 20 D4                       bra	_sc01
2598   DEF8 DE BC       to_ldx_rts		ldx	sys_temp1
2599   DEFA 39                          rts
2600   DEFB             			
2601   DEFB             ;****************************************************************************
2602   DEFB             ;*
2603   DEFB             ;****************************************************************************				
2604   DEFB 4F          getswitch		clra	
2605   DEFC 0D                          sec	
2606   DEFD D6 BF                       ldab	sys_temp4			;Switch Data
2607   DEFF                             ifne
2607   DEFF             
2607   DEFF 27 FE       
2608   DF01                                 begin
2608   DF01             
2609   DF01 49                                  rola	
2610   DF02 95 BF                               bita	sys_temp4
2611   DF04                                 neend
2611   DF04             
2611   DF04             
2611   DF04~                                neend
2611   DF04~                                neend
2611   DF04~                                neend
2611   DF04             
2611   DF04 27 FB       
2611   DF06             
2611   DF06~                                neend
2611   DF06~                                neend
2611   DF06             
2612   DF06 97 BE                           staa	sys_temp3
2613   DF08 98 BF                           eora	sys_temp4
2614   DF0A 97 BF                           staa	sys_temp4
2615   DF0C 0C          _clc_rts			clc	
2616   DF0D                             endif
2616   DF0D             
2616   DF0D             
2616   DF0D             
2616   DF0D             
2616   DF0D             
2616   DF0D~                            endif
2616   DF0D~                            endif
2616   DF0D             
2616   DF0D~                            endif
2616   DF0D~                            endif
2616   DF0D             
2616   DF00             
2616   DF00 0C          
2616   DF01             
2616   DF01             
2616   DF01~                            endif
2616   DF01~                            endif
2616   DF01~                            endif
2616   DF01             
2616   DF0D             
2616   DF0D~                            endif
2616   DF0D~                            endif
2616   DF0D             
2617   DF0D 39                          rts 
2618   DF0E             
2619   DF0E             ;****************************************************************************
2620   DF0E             ;* Takes the decimal representation of the switch number contained in 
2621   DF0E             ;* sys_temp2 and sys_temp3 and converts it into a more compact form of 
2622   DF0E             ;* 	
2623   DF0E             ;* AAAAABBB
2624   DF0E             ;* 
2625   DF0E             ;* where AAAAA is the column number of the switch (sw 17 = 2)
2626   DF0E             ;*       BBB   is the bit position of the current switch (sw 17 = $01)
2627   DF0E             ;****************************************************************************	
2628   DF0E 96 BD       sw_pack		ldaa	sys_temp2
2629   DF10 48          			asla	
2630   DF11 48          			asla	
2631   DF12 48          			asla	
2632   DF13 D6 BE       			ldab	sys_temp3
2633   DF15             			begin
2633   DF15             
2634   DF15 56          				rorb	
2635   DF16 25 03       				bcs	pack_done
2636   DF18 4C          				inca	
2637   DF19             			loopend
2637   DF19             
2637   DF19             
2637   DF19~            			loopend
2637   DF19~            			loopend
2637   DF19~            			loopend
2637   DF19             
2637   DF19 20 FA       
2637   DF1B             
2637   DF1B~            			loopend
2637   DF1B~            			loopend
2637   DF1B             
2638   DF1B 97 C1       pack_done		staa	sw_encoded
2639   DF1D 39          			rts
2640   DF1E             
2641   DF1E             ;****************************************************************************
2642   DF1E             ;*
2643   DF1E             ;****************************************************************************				
2644   DF1E 97 BF       check_sw_open	staa	sys_temp4
2645   DF20 DF BC                       stx	sys_temp1
2646   DF22 8D D7       next_switch		bsr	getswitch				;Clear Carry if Switch Activated
2647   DF24 25 D2                       bcs	to_ldx_rts				;ldx $A0, rts.
2648   DF26 8D E6                       bsr	sw_pack				;$A5(A) = ($A1<<3)+BitPos($A2) Encode Matrix Position
2649   DF28 CE 11 00                    ldx	#switch_queue
2650   DF2B                             begin
2650   DF2B             
2651   DF2B 9C B2                           cpx	switch_queue_pointer
2652   DF2D 27 F3                           beq	next_switch
2653   DF2F A1 01                           cmpa	$01,X					;Is this switch in the buffer?
2654   DF31                                 ifeq
2654   DF31             
2654   DF31 26 FE       
2655   DF33 8D 3D                               bsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
2656   DF35 BD DE AB                            jsr	sw_proc
2657   DF38 20 E8                               bra	next_switch
2658   DF3A                                 endif
2658   DF3A             
2658   DF3A             
2658   DF3A             
2658   DF3A             
2658   DF3A             
2658   DF3A~                                endif
2658   DF3A~                                endif
2658   DF3A             
2658   DF3A~                                endif
2658   DF3A~                                endif
2658   DF3A             
2658   DF32             
2658   DF32 07          
2658   DF33             
2658   DF33             
2658   DF33~                                endif
2658   DF33~                                endif
2658   DF33~                                endif
2658   DF33             
2658   DF3A             
2658   DF3A~                                endif
2658   DF3A~                                endif
2658   DF3A             
2659   DF3A 08                              inx	
2660   DF3B 08                              inx	
2661   DF3C                             loopend
2661   DF3C             
2661   DF3C             
2661   DF3C~                            loopend
2661   DF3C~                            loopend
2661   DF3C~                            loopend
2661   DF3C             
2661   DF3C 20 ED       
2661   DF3E             
2661   DF3E~                            loopend
2661   DF3E~                            loopend
2661   DF3E             
2662   DF3E             
2663   DF3E             
2664   DF3E             ;****************************************************************************
2665   DF3E             ;* Looks up the trigger data (time up and time down requirements) for the
2666   DF3E             ;* switch contained in 'sw_encoded'. If the switch table lists the trigger
2667   DF3E             ;* type as 0, then the trigger data is pulled from the location in bytes
2668   DF3E             ;* 2 and 3 of the switch table entry.
2669   DF3E             ;****************************************************************************				
2670   DF3E 8D 1A       sw_get_time		bsr	sw_tbl_lookup		;X = Data@ (E051 + $A5*3)
2671   DF40 A6 00                       ldaa	$00,X
2672   DF42 84 07                       anda	#$07				;Get the trigger type for this switch
2673   DF44                             ifne					;If 1-7, then look up data in switch type table
2673   DF44             
2673   DF44 27 FE       
2674   DF46 48                              asla						
2675   DF47 CE D0 64                        ldx	#gr_switchtypetable-2		;Game ROM Table: Switch Trigger Table
2676   DF4A 8D 16                           bsr	xplusa				;X = X + A
2677   DF4C                             else					;Otherwise, this switch has inline trigger data pointer
2677   DF4C             
2677   DF4C             
2677   DF4C             
2677   DF4C             
2677   DF45             
2677   DF45             
2677   DF45             
2677   DF45~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF45~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF45~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF45~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF45             
2677   DF45~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF45~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF45~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF45~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF45             
2677   DF45             
2677   DF45 08          
2677   DF4C             
2677   DF4C 20 FE       
2677   DF4E             
2677   DF4E             
2677   DF4E             
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E             
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E             
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E~                            else					;Otherwise, this switch has inline trigger data pointer
2677   DF4E             
2678   DF4E EE 01                           ldx	$01,X
2679   DF50                             endif
2679   DF50             
2679   DF50             
2679   DF50             
2679   DF50             
2679   DF50             
2679   DF50~                            endif
2679   DF50~                            endif
2679   DF50             
2679   DF50~                            endif
2679   DF50~                            endif
2679   DF50             
2679   DF4D             
2679   DF4D 02          
2679   DF4E             
2679   DF4E             
2679   DF4E~                            endif
2679   DF4E~                            endif
2679   DF4E~                            endif
2679   DF4E             
2679   DF50             
2679   DF50~                            endif
2679   DF50~                            endif
2679   DF50             
2680   DF50 96 C0                       ldaa	sys_temp5			;Matrix Data
2681   DF52 94 BE                       anda	sys_temp3			;Bit Position
2682   DF54                             ifne
2682   DF54             
2682   DF54 27 FE       
2683   DF56 08                              inx					;Point to Switch Close Trigger data instead
2684   DF57                             endif
2684   DF57             
2684   DF57             
2684   DF57             
2684   DF57             
2684   DF57             
2684   DF57~                            endif
2684   DF57~                            endif
2684   DF57             
2684   DF57~                            endif
2684   DF57~                            endif
2684   DF57             
2684   DF55             
2684   DF55 01          
2684   DF56             
2684   DF56             
2684   DF56~                            endif
2684   DF56~                            endif
2684   DF56~                            endif
2684   DF56             
2684   DF57             
2684   DF57~                            endif
2684   DF57~                            endif
2684   DF57             
2685   DF57 A6 00                       ldaa	$00,X				;Load Trigger Data
2686   DF59 39                          rts
2687   DF5A             			
2688   DF5A 96 C1       sw_tbl_lookup	ldaa	sw_encoded
2689   DF5C 16                          tab	
2690   DF5D 48                          asla					;Times 3 for switch table entry length
2691   DF5E 1B                          aba	
2692   DF5F FE D0 51                    ldx	gr_switchtable_ptr		;*** Table Pointer ***
2693   DF62 36          xplusa		    psha	
2694   DF63 DF C2                       stx	sys_temp_w2
2695   DF65 9B C3                       adda	sys_temp_w2+1
2696   DF67 97 C3                       staa	sys_temp_w2+1
2697   DF69                             ifcs
2697   DF69             
2697   DF69 24 FE       
2698   DF6B 7C 00 C2                        inc	sys_temp_w2
2699   DF6E                             endif 
2699   DF6E             
2699   DF6E             
2699   DF6E             
2699   DF6E             
2699   DF6E             
2699   DF6E~                            endif 
2699   DF6E~                            endif 
2699   DF6E             
2699   DF6E~                            endif 
2699   DF6E~                            endif 
2699   DF6E             
2699   DF6A             
2699   DF6A 03          
2699   DF6B             
2699   DF6B             
2699   DF6B~                            endif 
2699   DF6B~                            endif 
2699   DF6B~                            endif 
2699   DF6B             
2699   DF6E             
2699   DF6E~                            endif 
2699   DF6E~                            endif 
2699   DF6E             
2700   DF6E DE C2                       ldx	sys_temp_w2
2701   DF70 32                          pula	
2702   DF71 39                          rts	  
2703   DF72             
2704   DF72 DF C2       copy_word		stx	sys_temp_w2
2705   DF74 DE B2                       ldx	switch_queue_pointer
2706   DF76 09                          dex	
2707   DF77 09                          dex	
2708   DF78 DF B2                       stx	switch_queue_pointer
2709   DF7A A6 00                       ldaa	$00,X
2710   DF7C E6 01                       ldab	$01,X
2711   DF7E DE C2                       ldx	sys_temp_w2
2712   DF80 A7 00                       staa	$00,X
2713   DF82 E7 01                       stab	$01,X
2714   DF84 39                          rts	
2715   DF85             
2716   DF85             ;**************************************************
2717   DF85             ;* Initializes the Virtual Machine stack. Routine
2718   DF85             ;* will set up all 'next' pointers for each thread
2719   DF85             ;* placeholder. The VM size is determined by the 
2720   DF85             ;* settings in the game ROM. This must be balanced
2721   DF85             ;* properly for each game so that the created
2722   DF85             ;* threads do not clobber the cpu stack since they
2723   DF85             ;* grow towards each other.
2724   DF85             ;**************************************************
2725   DF85 F6 D0 4B    setup_vm_stack	ldab	gr_maxthreads		;Max Size of VM
2726   DF88 CE 11 9C                    ldx	#threadpool_base
2727   DF8B DF CB                       stx	vm_nextslot
2728   DF8D                             begin
2728   DF8D             
2729   DF8D DF B8                           stx	temp2
2730   DF8F 96 B9                           ldaa	temp2+1
2731   DF91 8B 12                           adda	#$12
2732   DF93 A7 01                           staa	$01,X
2733   DF95 86 00                           ldaa	#$00
2734   DF97 99 B8                           adca	temp2
2735   DF99 A7 00                           staa	$00,X
2736   DF9B 5A                              decb	
2737   DF9C 27 04                           beq	stack_done
2738   DF9E EE 00                           ldx	$00,X
2739   DFA0                             loopend
2739   DFA0             
2739   DFA0             
2739   DFA0~                            loopend
2739   DFA0~                            loopend
2739   DFA0~                            loopend
2739   DFA0             
2739   DFA0 20 EB       
2739   DFA2             
2739   DFA2~                            loopend
2739   DFA2~                            loopend
2739   DFA2             
2740   DFA2 E7 00       stack_done		stab	$00,X
2741   DFA4 E7 01                       stab	$01,X
2742   DFA6 D7 C9                       stab	vm_base
2743   DFA8 D7 CA                       stab	vm_base+1
2744   DFAA CE 00 C9                    ldx	#vm_base
2745   DFAD DF CF                       stx	vm_tail_thread
2746   DFAF 39                          rts
2747   DFB0             
2748   DFB0             ;**************************************************
2749   DFB0             ;* Adds B to X, Protects A
2750   DFB0             ;**************************************************				
2751   DFB0 36          xplusb		    psha	
2752   DFB1 17                          tba	
2753   DFB2 8D AE                       bsr	xplusa		;X = X + A
2754   DFB4 32                          pula	
2755   DFB5 39                          rts	
2756   DFB6             
2757   DFB6             ;**************************************************
2758   DFB6             ;* Pulls data from CMOS location in X and X+1
2759   DFB6             ;* and puts it in A. X is double incremented.
2760   DFB6             ;*
2761   DFB6             ;* Requires:	X
2762   DFB6             ;* Protects:	B
2763   DFB6             ;* Output:		A
2764   DFB6             ;**************************************************		
2765   DFB6 37          cmosinc_a		pshb	
2766   DFB7 A6 00                       ldaa	$00,X
2767   DFB9 E6 01                       ldab	$01,X
2768   DFBB 08                          inx	
2769   DFBC 08                          inx	
2770   DFBD C4 0F                       andb	#$0F
2771   DFBF 48                          asla	
2772   DFC0 48                          asla	
2773   DFC1 48                          asla	
2774   DFC2 48                          asla	
2775   DFC3 1B                          aba	
2776   DFC4 33                          pulb	
2777   DFC5 39                          rts
2778   DFC6             
2779   DFC6             ;**************************************************
2780   DFC6             ;* Pulls data from CMOS location in X and X+1
2781   DFC6             ;* and puts it in B. X is double incremented.
2782   DFC6             ;*
2783   DFC6             ;* Requires:	X
2784   DFC6             ;* Protects:	A
2785   DFC6             ;* Output:		B
2786   DFC6             ;**************************************************				
2787   DFC6 36          cmosinc_b		psha	
2788   DFC7 8D ED                       bsr	cmosinc_a
2789   DFC9 16                          tab	
2790   DFCA 32                          pula	
2791   DFCB 39                          rts
2792   DFCC             
2793   DFCC             ;**************************************************
2794   DFCC             ;* Transfers the byte value in B to the CMOS RAM
2795   DFCC             ;* location contained in X. The byte is stored in
2796   DFCC             ;* two consecutive nybbles in CMOS. X is double 
2797   DFCC             ;* incremented.
2798   DFCC             ;*
2799   DFCC             ;* Requires: 	B,X
2800   DFCC             ;* Protects:	A
2801   DFCC             ;**************************************************
2802   DFCC 36          b_cmosinc		psha	
2803   DFCD 17                          tba	
2804   DFCE 8D 42                       bsr	a_cmosinc		;A -> CMOS,X++
2805   DFD0 32                          pula	
2806   DFD1 39                          rts	
2807   DFD2             			
2808   DFD2             ;**************************************************
2809   DFD2             ;* Reset Game Audits only
2810   DFD2             ;**************************************************			
2811   DFD2 CE 00 66    reset_audits	ldx	#aud_reset_end-cmos_base		;Clear RAM from 0100-0165
2812   DFD5 20 03                       bra	clr_ram
2813   DFD7 CE 01 00    clr_ram_100		ldx	#cmos_base
2814   DFDA             clr_ram		    begin
2814   DFDA             
2815   DFDA 6F FF                           clr	$FF,X
2816   DFDC 09                              dex	
2817   DFDD                             eqend
2817   DFDD             
2817   DFDD             
2817   DFDD~                            eqend
2817   DFDD~                            eqend
2817   DFDD~                            eqend
2817   DFDD             
2817   DFDD 26 FB       
2817   DFDF             
2817   DFDF~                            eqend
2817   DFDF~                            eqend
2817   DFDF             
2818   DFDF 39                          rts	
2819   DFE0             
2820   DFE0             ;**************************************************
2821   DFE0             ;* Restores Factory Settings and resets all audit 
2822   DFE0             ;* information, reloads pricing data and restores 
2823   DFE0             ;* the backup high score.
2824   DFE0             ;**************************************************			
2825   DFE0             factory_zeroaudits	
2826   DFE0 8D F5                       bsr	clr_ram_100				;Clear RAM 0100-01FF
2827   DFE2 CE 01 7D                    ldx	#adj_base
2828   DFE5 DF B6                       stx	temp1
2829   DFE7 CE D0 03                    ldx	#gr_cmoscsum			;Begining of Default Audit Data
2830   DFEA C6 18                       ldab	#$18
2831   DFEC 8D 59                       bsr	copyblock2				;Transfer Audit Data
2832   DFEE C6 01                       ldab	#$01
2833   DFF0 B6 21 00                    ldaa	pia_sound_data			;Read W29 Jumper Setting
2834   DFF3                             ifmi
2834   DFF3             
2834   DFF3 2A FE       
2835   DFF5 5C                              incb
2836   DFF6                             endif
2836   DFF6             
2836   DFF6             
2836   DFF6             
2836   DFF6             
2836   DFF6             
2836   DFF6~                            endif
2836   DFF6~                            endif
2836   DFF6             
2836   DFF6~                            endif
2836   DFF6~                            endif
2836   DFF6             
2836   DFF4             
2836   DFF4 01          
2836   DFF5             
2836   DFF5             
2836   DFF5~                            endif
2836   DFF5~                            endif
2836   DFF5~                            endif
2836   DFF5             
2836   DFF6             
2836   DFF6~                            endif
2836   DFF6~                            endif
2836   DFF6             
2837   DFF6 8D 3B                       bsr	loadpricing				;Load Pricing Data
2838   DFF8 8D 06                       bsr	restore_hstd			;Restore Backup High Score
2839   DFFA CE ED BE                    ldx	#to_audadj
2840   DFFD 7E DB 48                    jmp	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
2841   E000             
2842   E000             ;**************************************************
2843   E000             ;* Clears the CMOS High Score RAM then copies
2844   E000             ;* the backup high score.
2845   E000             ;**************************************************			
2846   E000 4F          restore_hstd	clra	
2847   E001 BD EC 8A                    jsr	fill_hstd_digits			;Fill HSTD Digits with A
2848   E004 CE 01 81                    ldx	#adj_backuphstd
2849   E007 8D AD                       bsr	cmosinc_a				;CMOS,X++ -> A
2850   E009 16                          tab	
2851   E00A BD DD 56                    jsr	split_ab				;Shift A<<4 B>>4
2852   E00D CE 01 66                    ldx	#aud_currenthstd			;CMOS: Current HSTD
2853   E010 8D BA                       bsr	b_cmosinc				;B -> CMOS,X++
2854   E012             
2855   E012             			
2856   E012             ;**************************************************
2857   E012             ;* Transfers the byte value in A to the CMOS RAM
2858   E012             ;* location contained in X. The byte is stored in
2859   E012             ;* two consecutive nybbles in CMOS. X is double 
2860   E012             ;* incremented.
2861   E012             ;*
2862   E012             ;* Requires: 	A,X
2863   E012             ;* Protects:	B
2864   E012             ;**************************************************			
2865   E012 36          a_cmosinc		psha	
2866   E013 A7 01                       staa	$01,X
2867   E015 44                          lsra	
2868   E016 44                          lsra	
2869   E017 44                          lsra	
2870   E018 44                          lsra	
2871   E019 A7 00                       staa	$00,X
2872   E01B 08                          inx	
2873   E01C 08                          inx	
2874   E01D 32                          pula	
2875   E01E 39                          rts	 
2876   E01F             
2877   E01F             ;********************************************************
2878   E01F             ;* Copies B bytes of data from address in X(temp2) to 
2879   E01F             ;* address in temp1
2880   E01F             ;*
2881   E01F             ;* Requires:	B,X,temp1
2882   E01F             ;* Protects:	A
2883   E01F             ;* Destroys:	B,X,temp1,temp2
2884   E01F             ;* Output:		B = 0
2885   E01F             ;******************************************************** 			
2886   E01F 36          copyblock		psha	
2887   E020                             begin
2887   E020             
2888   E020 A6 00                           ldaa	$00,X
2889   E022 08                              inx	
2890   E023 DF B8                           stx	temp2
2891   E025 DE B6                           ldx	temp1
2892   E027 A7 00                           staa	$00,X
2893   E029 08                              inx	
2894   E02A DF B6                           stx	temp1
2895   E02C DE B8                           ldx	temp2
2896   E02E 5A                              decb	
2897   E02F                             eqend
2897   E02F             
2897   E02F             
2897   E02F~                            eqend
2897   E02F~                            eqend
2897   E02F~                            eqend
2897   E02F             
2897   E02F 26 EF       
2897   E031             
2897   E031~                            eqend
2897   E031~                            eqend
2897   E031             
2898   E031 32                          pula	
2899   E032 39                          rts
2900   E033             
2901   E033             ;************************************************
2902   E033             ;* Copies the default pricing data block from
2903   E033             ;* the game ROM to CMOS RAM. Register B contains
2904   E033             ;* either $01 or $02 which specifies which 
2905   E033             ;* default table to copy based on MPU jumper W29
2906   E033             ;*
2907   E033             ;* Requires: B
2908   E033             ;************************************************				
2909   E033 F7 01 AE    loadpricing		stab	adj_pricecontrol+1		;Get the LSB of the pricing index
2910   E036 CE 01 AF                    ldx	#cmos_pricingbase   
2911   E039 DF B6                       stx	temp1
2912   E03B 58                          aslb						
2913   E03C 17                          tba	
2914   E03D 48                          asla	
2915   E03E 1B                          aba	
2916   E03F CE D0 15                    ldx	#gr_gameadjust7			;*** Table Pointer ***
2917   E042 BD DF 62                    jsr	xplusa				;X = X + A
2918   E045 C6 06                       ldab	#$06
2919   E047 36          copyblock2		psha
2920   E048                             begin	
2920   E048             
2921   E048 A6 00                           ldaa	$00,X
2922   E04A 08                              inx	
2923   E04B DF B8                           stx	temp2
2924   E04D DE B6                           ldx	temp1
2925   E04F 8D C1                           bsr	a_cmosinc				;A -> CMOS,X++
2926   E051 DF B6                           stx	temp1
2927   E053 DE B8                           ldx	temp2
2928   E055 5A                              decb	
2929   E056                             eqend
2929   E056             
2929   E056             
2929   E056~                            eqend
2929   E056~                            eqend
2929   E056~                            eqend
2929   E056             
2929   E056 26 F0       
2929   E058             
2929   E058~                            eqend
2929   E058~                            eqend
2929   E058             
2930   E058 32                          pula	
2931   E059 39                          rts
2932   E05A             			
2933   E05A             ;******************************************************
2934   E05A             ;* IRQ Routine
2935   E05A             ;*
2936   E05A             ;* This is the main timekeeping section of the code. 
2937   E05A             ;* All events are kept track of by couting the IRQ's
2938   E05A             ;* that have run.
2939   E05A             ;*
2940   E05A             ;* Tasks processed in the IRQ:
2941   E05A             ;*		
2942   E05A             ;*		Update Next Lamp
2943   E05A             ;******************************************************
2944   E05A             sys_irq_entry
2945   E05A D6 A3                       ldab  irq_counter
2946   E05C 7A 00 F3                    dec   randomseed
2947   E05F 56                          rorb  			;lamp strobe is changed every other irq_counter
2948   E060                             ifcc
2948   E060             
2948   E060 25 FE       
2949   E062 7C 00 A5                        inc   lamp_index_wordx
2950   E065 96 A6                           ldaa  cur_lampstrobe
2951   E067 48                              asla  
2952   E068                                 ifeq				;if strobes have cycled, then reset everything
2952   E068             
2952   E068 26 FE       
2953   E06A 97 A5                               staa   lamp_index_wordx
2954   E06C 97 A3                               staa   irq_counter
2955   E06E 97 AC                               staa   alpha_digit_cur+1
2956   E070 4C                                  inca  			;reset strobe to $01 and start again
2957   E071                                 endif
2957   E071             
2957   E071             
2957   E071             
2957   E071             
2957   E071             
2957   E071~                                endif
2957   E071~                                endif
2957   E071             
2957   E071~                                endif
2957   E071~                                endif
2957   E071             
2957   E069             
2957   E069 07          
2957   E06A             
2957   E06A             
2957   E06A~                                endif
2957   E06A~                                endif
2957   E06A~                                endif
2957   E06A             
2957   E071             
2957   E071~                                endif
2957   E071~                                endif
2957   E071             
2958   E071 97 A6                           staa   cur_lampstrobe
2959   E073                             endif
2959   E073             
2959   E073             
2959   E073             
2959   E073             
2959   E073             
2959   E073~                            endif
2959   E073~                            endif
2959   E073             
2959   E073~                            endif
2959   E073~                            endif
2959   E073             
2959   E061             
2959   E061 11          
2959   E062             
2959   E062             
2959   E062~                            endif
2959   E062~                            endif
2959   E062~                            endif
2959   E062             
2959   E073             
2959   E073~                            endif
2959   E073~                            endif
2959   E073             
2960   E073 DE A4                       ldx   lamp_index_word
2961   E075 D6 A3                       ldab   irq_counter
2962   E077 C4 07                       andb  #$07
2963   E079                             ifeq				;every 8th, blank the displays
2963   E079             
2963   E079 26 FE       
2964   E07B 86 FF                           ldaa  #$FF
2965   E07D B7 28 02                        staa  pia_disp_seg_data
2966   E080 7F 40 00                        clr	pia_alphanum_segl_data
2967   E083 7F 40 02                        clr   pia_alphanum_segh_data
2968   E086 D6 A3                           ldab  irq_counter
2969   E088 F7 28 00                        stab  pia_disp_digit_data
2970   E08B 27 19                           beq   b_082
2971   E08D 7E E1 3F                        jmp   skip_lots
2972   E090                             endif
2972   E090             
2972   E090             
2972   E090             
2972   E090             
2972   E090             
2972   E090~                            endif
2972   E090~                            endif
2972   E090             
2972   E090~                            endif
2972   E090~                            endif
2972   E090             
2972   E07A             
2972   E07A 15          
2972   E07B             
2972   E07B             
2972   E07B~                            endif
2972   E07B~                            endif
2972   E07B~                            endif
2972   E07B             
2972   E090             
2972   E090~                            endif
2972   E090~                            endif
2972   E090             
2973   E090 D7 AA                       stab   swap_player_displays
2974   E092 5A                          decb  
2975   E093                             ifne   
2975   E093             
2975   E093 27 FE       
2976   E095 C0 03                           subb  #03
2977   E097 26 2B                           bne   snd_wr0
2978   E099                             endif
2978   E099             
2978   E099             
2978   E099             
2978   E099             
2978   E099             
2978   E099~                            endif
2978   E099~                            endif
2978   E099             
2978   E099~                            endif
2978   E099~                            endif
2978   E099             
2978   E094             
2978   E094 04          
2978   E095             
2978   E095             
2978   E095~                            endif
2978   E095~                            endif
2978   E095~                            endif
2978   E095             
2978   E099             
2978   E099~                            endif
2978   E099~                            endif
2978   E099             
2979   E099 79 00 A7                    rol   comma_data_temp
2980   E09C 56                          rorb  
2981   E09D 79 00 A7                    rol   comma_data_temp
2982   E0A0 56                          rorb  
2983   E0A1 FA 21 02                    orab  pia_comma_data
2984   E0A4 20 23                       bra   snd_wr
2985   E0A6 7C 00 B1    b_082			inc   irqcount16
2986   E0A9             
2987   E0A9 78 13 9D                    asl	sparkle_rate
2988   E0AC                             ifcs
2988   E0AC             
2988   E0AC 24 FE       
2989   E0AE B6 13 9D                        ldaa	sparkle_rate
2990   E0B1 8A 01                           oraa	#$01
2991   E0B3 B7 13 9D                        staa	sparkle_rate
2992   E0B6                             endif				
2992   E0B6             
2992   E0B6             
2992   E0B6             
2992   E0B6             
2992   E0B6             
2992   E0B6~                            endif				
2992   E0B6~                            endif				
2992   E0B6             
2992   E0B6~                            endif				
2992   E0B6~                            endif				
2992   E0B6             
2992   E0AD             
2992   E0AD 08          
2992   E0AE             
2992   E0AE             
2992   E0AE~                            endif				
2992   E0AE~                            endif				
2992   E0AE~                            endif				
2992   E0AE             
2992   E0B6             
2992   E0B6~                            endif				
2992   E0B6~                            endif				
2992   E0B6             
2993   E0B6                             
2994   E0B6 96 7A                       ldaa  comma_flags
2995   E0B8 97 A7                       staa  comma_data_temp
2996   E0BA 96 76                       ldaa  dmask_p1
2997   E0BC 97 A8                       staa  credp1p2_bufferselect
2998   E0BE 96 78                       ldaa  dmask_p3
2999   E0C0 97 A9                       staa  alpha_bufferselect
3000   E0C2                             ;ldab  p2_ec_b0
3001   E0C2                             ;rol   credp1p2_bufferselect
3002   E0C2                             ;ifcs
3003   E0C2                             ;	ldab   p2_ec_b1
3004   E0C2                             ;endif
3005   E0C2                             ;ldaa  p1_ec_b0
3006   E0C2                             ;rol   alpha_bufferselect
3007   E0C2                             ;bcc   b_083
3008   E0C2                             ;ldaa  p1_ec_b1
3009   E0C2 20 73                       bra   b_083
3010   E0C4             
3011   E0C4             			;***********************************
3012   E0C4             			;* Sound command clear
3013   E0C4             			;***********************************
3014   E0C4 F6 21 02    snd_wr0		    ldab  pia_comma_data
3015   E0C7 C4 3F                       andb  #$3F
3016   E0C9 F7 21 02    snd_wr		    stab  pia_comma_data
3017   E0CC             
3018   E0CC             			;************************************
3019   E0CC             			;* Display Routines
3020   E0CC             			;************************************
3021   E0CC             			;reset displays
3022   E0CC 7F 40 00                    clr   pia_alphanum_segl_data
3023   E0CF 7F 40 02                    clr   pia_alphanum_segh_data
3024   E0D2 86 FF                       ldaa   #$FF
3025   E0D4 B7 28 02                    staa   pia_disp_seg_data
3026   E0D7 96 A3                       ldaa   irq_counter
3027   E0D9 B7 28 00                    staa   pia_disp_digit_data
3028   E0DC                             
3029   E0DC A6 4C                       ldaa   score_p1_b0,X
3030   E0DE 79 00 A8                    rol   credp1p2_bufferselect
3031   E0E1                             ifcs
3031   E0E1             
3031   E0E1 24 FE       
3032   E0E3 A6 54                           ldaa   score_p1_b1,X
3033   E0E5                             endif
3033   E0E5             
3033   E0E5             
3033   E0E5             
3033   E0E5             
3033   E0E5             
3033   E0E5~                            endif
3033   E0E5~                            endif
3033   E0E5             
3033   E0E5~                            endif
3033   E0E5~                            endif
3033   E0E5             
3033   E0E2             
3033   E0E2 02          
3033   E0E3             
3033   E0E3             
3033   E0E3~                            endif
3033   E0E3~                            endif
3033   E0E3~                            endif
3033   E0E3             
3033   E0E5             
3033   E0E5~                            endif
3033   E0E5~                            endif
3033   E0E5             
3034   E0E5 C6 03                       ldab   #03
3035   E0E7 D1 A3                       cmpb  irq_counter
3036   E0E9                             ifgt
3036   E0E9             
3036   E0E9 2F FE       
3037   E0EB 79 00 A9                        rol   alpha_bufferselect
3038   E0EE                             else
3038   E0EE             
3038   E0EE             
3038   E0EE             
3038   E0EE             
3038   E0EA             
3038   E0EA             
3038   E0EA             
3038   E0EA~                            else
3038   E0EA~                            else
3038   E0EA~                            else
3038   E0EA~                            else
3038   E0EA             
3038   E0EA~                            else
3038   E0EA~                            else
3038   E0EA~                            else
3038   E0EA~                            else
3038   E0EA             
3038   E0EA             
3038   E0EA 05          
3038   E0EE             
3038   E0EE 20 FE       
3038   E0F0             
3038   E0F0             
3038   E0F0             
3038   E0F0~                            else
3038   E0F0~                            else
3038   E0F0~                            else
3038   E0F0~                            else
3038   E0F0~                            else
3038   E0F0             
3038   E0F0~                            else
3038   E0F0~                            else
3038   E0F0             
3038   E0F0~                            else
3038   E0F0~                            else
3038   E0F0             
3039   E0F0 DE AB                           ldx	alpha_digit_cur
3040   E0F2 7C 00 AC                        inc   alpha_digit_cur+1 	;increment LSB
3041   E0F5 E6 5E                           ldab  alpha_b0,X
3042   E0F7 79 00 A9                        rol   alpha_bufferselect
3043   E0FA                                 ifcs
3043   E0FA             
3043   E0FA 24 FE       
3044   E0FC E6 6A                               ldab   alpha_b1,X
3045   E0FE                                 endif
3045   E0FE             
3045   E0FE             
3045   E0FE             
3045   E0FE             
3045   E0FE             
3045   E0FE~                                endif
3045   E0FE~                                endif
3045   E0FE             
3045   E0FE~                                endif
3045   E0FE~                                endif
3045   E0FE             
3045   E0FB             
3045   E0FB 02          
3045   E0FC             
3045   E0FC             
3045   E0FC~                                endif
3045   E0FC~                                endif
3045   E0FC~                                endif
3045   E0FC             
3045   E0FE             
3045   E0FE~                                endif
3045   E0FE~                                endif
3045   E0FE             
3046   E0FE FE D0 61                        ldx   gr_character_defs_ptr	;This is the index table for all characters
3047   E101 36                              psha  
3048   E102 17                              tba   
3049   E103 C4 3F                           andb  #$3F				;max 3F characters in lookup table
3050   E105 58                              aslb  
3051   E106 DF FC                           stx   character_ptr
3052   E108 DB FD                           addb  character_ptr+1
3053   E10A D7 FD                           stab  character_ptr+1
3054   E10C                                 ifcs
3054   E10C             
3054   E10C 24 FE       
3055   E10E 7C 00 FC                            inc   character_ptr
3056   E111                                 endif
3056   E111             
3056   E111             
3056   E111             
3056   E111             
3056   E111             
3056   E111~                                endif
3056   E111~                                endif
3056   E111             
3056   E111~                                endif
3056   E111~                                endif
3056   E111             
3056   E10D             
3056   E10D 03          
3056   E10E             
3056   E10E             
3056   E10E~                                endif
3056   E10E~                                endif
3056   E10E~                                endif
3056   E10E             
3056   E111             
3056   E111~                                endif
3056   E111~                                endif
3056   E111             
3057   E111 DE FC                           ldx   character_ptr
3058   E113 E6 00                           ldab   $00,X
3059   E115 BD E2 8A                        jsr	sparkleb
3060   E118 F7 40 00                        stab   pia_alphanum_segl_data	;write character data
3061   E11B E6 01                           ldab   $01,X
3062   E11D 85 80                           bita  #$80
3063   E11F                                 ifne
3063   E11F             
3063   E11F 27 FE       
3064   E121 CA 40                               orab   #$40
3065   E123                                 endif
3065   E123             
3065   E123             
3065   E123             
3065   E123             
3065   E123             
3065   E123~                                endif
3065   E123~                                endif
3065   E123             
3065   E123~                                endif
3065   E123~                                endif
3065   E123             
3065   E120             
3065   E120 02          
3065   E121             
3065   E121             
3065   E121~                                endif
3065   E121~                                endif
3065   E121~                                endif
3065   E121             
3065   E123             
3065   E123~                                endif
3065   E123~                                endif
3065   E123             
3066   E123 85 40                           bita  #$40
3067   E125                                 ifne   
3067   E125             
3067   E125 27 FE       
3068   E127 CA 80                               orab   #$80
3069   E129                                 endif
3069   E129             
3069   E129             
3069   E129             
3069   E129             
3069   E129             
3069   E129~                                endif
3069   E129~                                endif
3069   E129             
3069   E129~                                endif
3069   E129~                                endif
3069   E129             
3069   E126             
3069   E126 02          
3069   E127             
3069   E127             
3069   E127~                                endif
3069   E127~                                endif
3069   E127~                                endif
3069   E127             
3069   E129             
3069   E129~                                endif
3069   E129~                                endif
3069   E129             
3070   E129 BD E2 8A                        jsr	sparkleb
3071   E12C F7 40 02                        stab   pia_alphanum_segh_data	;write comma/dot data
3072   E12F 32                              pula  	
3073   E130                             endif
3073   E130             
3073   E130             
3073   E130             
3073   E130             
3073   E130             
3073   E130~                            endif
3073   E130~                            endif
3073   E130             
3073   E130~                            endif
3073   E130~                            endif
3073   E130             
3073   E0EF             
3073   E0EF 40          
3073   E0F0             
3073   E0F0             
3073   E0F0~                            endif
3073   E0F0~                            endif
3073   E0F0~                            endif
3073   E0F0             
3073   E130             
3073   E130~                            endif
3073   E130~                            endif
3073   E130             
3074   E130 C6 FF                       ldab   #$FF
3075   E132 76 00 AA                    ror	swap_player_displays
3076   E135                             ifcc
3076   E135             
3076   E135 25 FE       
3077   E137 54          b_083				lsrb						;Show BA
3078   E138 54                              lsrb	
3079   E139 54                              lsrb	
3080   E13A 54                              lsrb	
3081   E13B 84 F0                           anda	#$F0
3082   E13D 20 14                           bra	disp_save					;save it now to PIA
3083   E13F 96 77       skip_lots			ldaa	dmask_p2
3084   E141 97 A8                           staa	credp1p2_bufferselect
3085   E143 96 79                           ldaa	dmask_p4
3086   E145 97 A9                           staa	alpha_bufferselect
3087   E147                                 ;ldab	p2_ec_b0
3088   E147 79 00 A8                        rol	credp1p2_bufferselect
3089   E14A                                 ;ifcs
3090   E14A                                 ;	ldab	p2_ec_b1
3091   E14A                                 ;endif
3092   E14A                                 ;ldaa	p1_ec_b0
3093   E14A 79 00 A9                        rol	alpha_bufferselect
3094   E14D                                 ;ifcs
3095   E14D                                 ;	ldaa	p1_ec_b1
3096   E14D                                 ;endif
3097   E14D                             endif
3097   E14D             
3097   E14D             
3097   E14D             
3097   E14D             
3097   E14D             
3097   E14D~                            endif
3097   E14D~                            endif
3097   E14D             
3097   E14D~                            endif
3097   E14D~                            endif
3097   E14D             
3097   E136             
3097   E136 16          
3097   E137             
3097   E137             
3097   E137~                            endif
3097   E137~                            endif
3097   E137~                            endif
3097   E137             
3097   E14D             
3097   E14D~                            endif
3097   E14D~                            endif
3097   E14D             
3098   E14D 48                          asla						;Show AB
3099   E14E 48                          asla	
3100   E14F 48                          asla	
3101   E150 48                          asla	
3102   E151 C4 0F                       andb	#$0F					;Fall through to end
3103   E153 1B          disp_save		aba	
3104   E154 B7 28 02                    staa	pia_disp_seg_data			;Store Digit BCD Data
3105   E157             
3106   E157                             ;***********************************
3107   E157                             ;* Now do lamps...
3108   E157                             ;***********************************
3109   E157 86 FF                       ldaa	#$FF
3110   E159 D6 A3                       ldab	irq_counter
3111   E15B 56                          rorb	
3112   E15C                             ifcc						;Do Lamps every other IRQ
3112   E15C             
3112   E15C 25 FE       
3113   E15E CE 24 00                        ldx	#pia_lamp_row_data			;Lamp PIA Offset
3114   E161 A7 00                           staa	$00,X					;Blank Lamp Rows with an $FF
3115   E163 B7 22 00                        staa	pia_sol_low_data
3116   E166 E6 03                           ldab	$03,X
3117   E168 6F 03                           clr	$03,X
3118   E16A A7 02                           staa	$02,X					;Blank Lamp Columns with $FF
3119   E16C E7 03                           stab	$03,X
3120   E16E 96 A6                           ldaa	cur_lampstrobe			;Which strobe are we on
3121   E170 A7 02                           staa	$02,X					;Put the strobe out there
3122   E172 A1 02                           cmpa	$02,X					;Did it take?
3123   E174                                 ifeq
3123   E174             
3123   E174 26 FE       
3124   E176 DE A4                               ldx	lamp_index_word			;This will always be $0001-$0080, it is
3125   E178                                                             ;used to index the lamp buffer bit positions.			
3126   E178 A6 28                               ldaa	lampbufferselect,X		;0=buffer_0 1=buffer_1
3127   E17A 16                                  tab	
3128   E17B 53                                  comb	
3129   E17C E4 10                               andb	lampbuffer0,X
3130   E17E A4 34                               anda	lampbuffer1,X
3131   E180 1B                                  aba	
3132   E181 43                                  coma	
3133   E182 B7 24 00                            staa	pia_lamp_row_data			;Store Lamp Row Data
3134   E185             
3135   E185                                     ;* In Hyperball we have another half matrix of lamps too
3136   E185 96 A5                               ldaa  lamp_index_wordx
3137   E187 16                                  tab   
3138   E188 44                                  lsra  
3139   E189 97 A5                               staa	lamp_index_wordx
3140   E18B DE A4                               ldx   lamp_index_word
3141   E18D D7 A5                               stab  lamp_index_wordx
3142   E18F A6 30                               ldaa  lampbufferselectx,X
3143   E191 16                                  tab   
3144   E192 53                                  comb  
3145   E193 E4 18                               andb  lampbuffer0x,X
3146   E195 A4 3C                               anda  lampbuffer1x,X
3147   E197 1B                                  aba   
3148   E198 43                                  coma  
3149   E199 D6 A5                               ldab   lamp_index_wordx
3150   E19B 0C                                  clc   
3151   E19C 56                                  rorb  
3152   E19D                                     ifcs
3152   E19D             
3152   E19D 24 FE       
3153   E19F 44                                      lsra  
3154   E1A0 44                                      lsra  
3155   E1A1 44                                      lsra  
3156   E1A2 44                                      lsra  
3157   E1A3                                     endif
3157   E1A3             
3157   E1A3             
3157   E1A3             
3157   E1A3             
3157   E1A3             
3157   E1A3~                                    endif
3157   E1A3~                                    endif
3157   E1A3             
3157   E1A3~                                    endif
3157   E1A3~                                    endif
3157   E1A3             
3157   E19E             
3157   E19E 04          
3157   E19F             
3157   E19F             
3157   E19F~                                    endif
3157   E19F~                                    endif
3157   E19F~                                    endif
3157   E19F             
3157   E1A3             
3157   E1A3~                                    endif
3157   E1A3~                                    endif
3157   E1A3             
3158   E1A3 84 0F                               anda  #0F
3159   E1A5 B7 22 00                            staa   pia_sol_low_data
3160   E1A8                                 endif
3160   E1A8             
3160   E1A8             
3160   E1A8             
3160   E1A8             
3160   E1A8             
3160   E1A8~                                endif
3160   E1A8~                                endif
3160   E1A8             
3160   E1A8~                                endif
3160   E1A8~                                endif
3160   E1A8             
3160   E175             
3160   E175 32          
3160   E176             
3160   E176             
3160   E176~                                endif
3160   E176~                                endif
3160   E176~                                endif
3160   E176             
3160   E1A8             
3160   E1A8~                                endif
3160   E1A8~                                endif
3160   E1A8             
3161   E1A8                             endif
3161   E1A8             
3161   E1A8             
3161   E1A8             
3161   E1A8             
3161   E1A8             
3161   E1A8~                            endif
3161   E1A8~                            endif
3161   E1A8             
3161   E1A8~                            endif
3161   E1A8~                            endif
3161   E1A8             
3161   E15D             
3161   E15D 4A          
3161   E15E             
3161   E15E             
3161   E15E~                            endif
3161   E15E~                            endif
3161   E15E~                            endif
3161   E15E             
3161   E1A8             
3161   E1A8~                            endif
3161   E1A8~                            endif
3161   E1A8             
3162   E1A8                                 
3163   E1A8                             ;***********************************
3164   E1A8                             ;* Done with Lamps
3165   E1A8                             ;* Increment the IRQ counter
3166   E1A8                             ;***********************************
3167   E1A8 96 A3                       ldaa	irq_counter				;We need to increment this every time.
3168   E1AA 4C                          inca	
3169   E1AB 97 A3                       staa	irq_counter
3170   E1AD             
3171   E1AD                             ;******************************************************************
3172   E1AD                             ;* Now do switches, The switch logic has a total of 5 data buffers.
3173   E1AD                             ;* These are used for debouncing the switch through software. The
3174   E1AD                             ;* original Level7 code used an X indexed loop to do this, which was
3175   E1AD                             ;* much more compact, however because of the indexed addressing it
3176   E1AD                             ;* was substantially slower, while this takes more ROM space it ends
3177   E1AD                             ;* up being about 100 clock cycles faster
3178   E1AD                             ;******************************************************************
3179   E1AD 46                          rora	
3180   E1AE                             ifcs
3180   E1AE             
3180   E1AE 24 FE       
3181   E1B0 7E E2 78                        jmp	irq_sol
3182   E1B3                             endif
3182   E1B3             
3182   E1B3             
3182   E1B3             
3182   E1B3             
3182   E1B3             
3182   E1B3~                            endif
3182   E1B3~                            endif
3182   E1B3             
3182   E1B3~                            endif
3182   E1B3~                            endif
3182   E1B3             
3182   E1AF             
3182   E1AF 03          
3182   E1B0             
3182   E1B0             
3182   E1B0~                            endif
3182   E1B0~                            endif
3182   E1B0~                            endif
3182   E1B0             
3182   E1B3             
3182   E1B3~                            endif
3182   E1B3~                            endif
3182   E1B3             
3183   E1B3 86 01                       ldaa	#$01
3184   E1B5 B7 30 02                    staa	pia_switch_strobe_data		;Store Switch Column Drives
3185   E1B8                                         
3186   E1B8 96 7B                       ldaa	switch_debounced
3187   E1BA B8 30 00                    eora	pia_switch_return_data		;Switch Row Return Data
3188   E1BD 16                          tab	
3189   E1BE 94 83                       anda	switch_masked
3190   E1C0 9A 8B                       oraa	switch_pending
3191   E1C2 97 8B                       staa	switch_pending
3192   E1C4 D7 83                       stab	switch_masked
3193   E1C6 53                          comb	
3194   E1C7 D4 8B                       andb	switch_pending
3195   E1C9 DA 93                       orab	switch_aux
3196   E1CB D7 93                       stab	switch_aux
3197   E1CD 78 30 02                    asl	pia_switch_strobe_data		;Shift to Next Column Drive
3198   E1D0 96 7C                       ldaa	switch_debounced+1
3199   E1D2 B8 30 00                    eora	pia_switch_return_data		;Switch Row Return Data
3200   E1D5 16                          tab	
3201   E1D6 94 84                       anda	switch_masked+1
3202   E1D8 9A 8C                       oraa	switch_pending+1
3203   E1DA 97 8C                       staa	switch_pending+1
3204   E1DC D7 84                       stab	switch_masked+1
3205   E1DE 53                          comb	
3206   E1DF D4 8C                       andb	switch_pending+1
3207   E1E1 DA 94                       orab	switch_aux+1
3208   E1E3 D7 94                       stab	switch_aux+1
3209   E1E5 78 30 02                    asl	pia_switch_strobe_data		;Shift to Next Column Drive
3210   E1E8 96 7D                       ldaa	switch_debounced+2
3211   E1EA B8 30 00                    eora	pia_switch_return_data		;Switch Row Return Data
3212   E1ED 16                          tab	
3213   E1EE 94 85                       anda	switch_masked+2
3214   E1F0 9A 8D                       oraa	switch_pending+2
3215   E1F2 97 8D                       staa	switch_pending+2
3216   E1F4 D7 85                       stab	switch_masked+2
3217   E1F6 53                          comb	
3218   E1F7 D4 8D                       andb	switch_pending+2
3219   E1F9 DA 95                       orab	switch_aux+2
3220   E1FB D7 95                       stab	switch_aux+2
3221   E1FD 78 30 02                    asl	pia_switch_strobe_data		;Shift to Next Column Drive
3222   E200 96 7E                       ldaa	switch_debounced+3
3223   E202 B8 30 00                    eora	pia_switch_return_data		;Switch Row Return Data
3224   E205 16                          tab	
3225   E206 94 86                       anda	switch_masked+3
3226   E208 9A 8E                       oraa	switch_pending+3
3227   E20A 97 8E                       staa	switch_pending+3
3228   E20C D7 86                       stab	switch_masked+3
3229   E20E 53                          comb	
3230   E20F D4 8E                       andb	switch_pending+3
3231   E211 DA 96                       orab	switch_aux+3
3232   E213 D7 96                       stab	switch_aux+3
3233   E215 78 30 02                    asl	pia_switch_strobe_data		;Shift to Next Column Drive
3234   E218 96 7F                       ldaa	switch_debounced+4
3235   E21A B8 30 00                    eora	pia_switch_return_data		;Switch Row Return Data
3236   E21D 16                          tab	
3237   E21E 94 87                       anda	switch_masked+4
3238   E220 9A 8F                       oraa	switch_pending+4
3239   E222 97 8F                       staa	switch_pending+4
3240   E224 D7 87                       stab	switch_masked+4
3241   E226 53                          comb	
3242   E227 D4 8F                       andb	switch_pending+4
3243   E229 DA 97                       orab	switch_aux+4
3244   E22B D7 97                       stab	switch_aux+4
3245   E22D 78 30 02                    asl	pia_switch_strobe_data		;Shift to Next Column Drive
3246   E230 96 80                       ldaa	switch_debounced+5
3247   E232 B8 30 00                    eora	pia_switch_return_data		;Switch Row Return Data
3248   E235 16                          tab	
3249   E236 94 88                       anda	switch_masked+5
3250   E238 9A 90                       oraa	switch_pending+5
3251   E23A 97 90                       staa	switch_pending+5
3252   E23C D7 88                       stab	switch_masked+5
3253   E23E 53                          comb	
3254   E23F D4 90                       andb	switch_pending+5
3255   E241 DA 98                       orab	switch_aux+5
3256   E243 D7 98                       stab	switch_aux+5
3257   E245 78 30 02                    asl	    pia_switch_strobe_data		;Shift to Next Column Drive
3258   E248 96 81                       ldaa	switch_debounced+6
3259   E24A B8 30 00                    eora	pia_switch_return_data		;Switch Row Return Data
3260   E24D 16                          tab	
3261   E24E 94 89                       anda	switch_masked+6
3262   E250 9A 91                       oraa	switch_pending+6
3263   E252 97 91                       staa	switch_pending+6
3264   E254 D7 89                       stab	switch_masked+6
3265   E256 53                          comb	
3266   E257 D4 91                       andb	switch_pending+6
3267   E259 DA 99                       orab	switch_aux+6
3268   E25B D7 99                       stab	switch_aux+6
3269   E25D 78 30 02                    asl	    pia_switch_strobe_data		;Shift to Next Column Drive
3270   E260 96 82                       ldaa	switch_debounced+7
3271   E262 B8 30 00                    eora	pia_switch_return_data		;Switch Row Return Data
3272   E265 16                          tab	
3273   E266 94 8A                       anda	switch_masked+7
3274   E268 9A 92                       oraa	switch_pending+7
3275   E26A 97 92                       staa	switch_pending+7
3276   E26C D7 8A                       stab	switch_masked+7
3277   E26E 53                          comb	
3278   E26F D4 92                       andb	switch_pending+7
3279   E271 DA 9A                       orab	switch_aux+7
3280   E273 D7 9A                       stab	switch_aux+7
3281   E275 78 30 02                    asl	pia_switch_strobe_data		;Shift to Next Column Drive
3282   E278                             ;***********************************
3283   E278                             ;* Now do solenoids
3284   E278                             ;***********************************
3285   E278 96 B0       irq_sol		    ldaa	solenoid_counter			;Solenoid Counter
3286   E27A                             ifne
3286   E27A             
3286   E27A 27 FE       
3287   E27C 7A 00 B0                        dec	solenoid_counter			;Solenoid Counter
3288   E27F                                 ifeq
3288   E27F             
3288   E27F 26 FE       
3289   E281 DE AD                               ldx	solenoid_address
3290   E283 A6 00                               ldaa	$00,X
3291   E285 98 AF                               eora	solenoid_bitpos
3292   E287 A7 00                               staa	$00,X
3293   E289                                 endif
3293   E289             
3293   E289             
3293   E289             
3293   E289             
3293   E289             
3293   E289~                                endif
3293   E289~                                endif
3293   E289             
3293   E289~                                endif
3293   E289~                                endif
3293   E289             
3293   E280             
3293   E280 08          
3293   E281             
3293   E281             
3293   E281~                                endif
3293   E281~                                endif
3293   E281~                                endif
3293   E281             
3293   E289             
3293   E289~                                endif
3293   E289~                                endif
3293   E289             
3294   E289                             endif
3294   E289             
3294   E289             
3294   E289             
3294   E289             
3294   E289             
3294   E289~                            endif
3294   E289~                            endif
3294   E289             
3294   E289~                            endif
3294   E289~                            endif
3294   E289             
3294   E27B             
3294   E27B 0D          
3294   E27C             
3294   E27C             
3294   E27C~                            endif
3294   E27C~                            endif
3294   E27C~                            endif
3294   E27C             
3294   E289             
3294   E289~                            endif
3294   E289~                            endif
3294   E289             
3295   E289 3B                          rti
3296   E28A             
3297   E28A             ;*************************************************************************
3298   E28A             ;* End IRQ
3299   E28A             ;*************************************************************************
3300   E28A             
3301   E28A 37          sparkleb		pshb
3302   E28B D6 1C                       ldab 	 bitflags
3303   E28D 57                          asrb
3304   E28E 33                          pulb
3305   E28F                             ifcs
3305   E28F             
3305   E28F 24 FE       
3306   E291                                 ;sparkle is on. modify b
3307   E291 F4 13 9D                        andb	sparkle_rate
3308   E294                             endif
3308   E294             
3308   E294             
3308   E294             
3308   E294             
3308   E294             
3308   E294~                            endif
3308   E294~                            endif
3308   E294             
3308   E294~                            endif
3308   E294~                            endif
3308   E294             
3308   E290             
3308   E290 03          
3308   E291             
3308   E291             
3308   E291~                            endif
3308   E291~                            endif
3308   E291~                            endif
3308   E291             
3308   E294             
3308   E294~                            endif
3308   E294~                            endif
3308   E294             
3309   E294 39                          rts
3310   E295             
3311   E295             ;*************************************************************************
3312   E295             ;* PIA Data Direction Register Data - Loaded on Initialization
3313   E295             ;*************************************************************************
3314   E295 7F 3E C0 3E pia_ddr_data	.db $7F,$3E,$C0,$3E	;$2100 - Sound PIA
3315   E299 FF 3C FF 34                 .db $FF,$3C,$FF,$34	;$2200 - Solenoid PIA
3316   E29D FF 3C FF 3C                 .db $FF,$3C,$FF,$3C	;$2400 - Lamp PIA
3317   E2A1 FF 3C FF 3C                 .db $FF,$3C,$FF,$3C	;$2800 - Display PIA
3318   E2A5 00 3C FF 3C                 .db $00,$3C,$FF,$3C	;$3000 - Switch PIA
3319   E2A9 FF 3C FF 3C                 .db $FF,$3C,$FF,$3C	;$4000 - Alpha PIA
3320   E2AD             
3321   E2AD 00 10       lampbuffers		.dw lampbuffer0		;Lower Buffer for 1X Commands, $40 Flag Clear
3322   E2AF 00 1C                       .dw bitflags		;Upper Buffer for 1X Commands, $40 Flag Set
3323   E2B1 00 34                       .dw lampbuffer1		;Lower Buffer for 2X Commands, $40 Flag Clear
3324   E2B3 00 28                       .dw lampbufferselect	;Upper Buffer for 2X Commands, $40 Flag Set
3325   E2B5             
3326   E2B5             ;*************************************************************************
3327   E2B5             ;* Turn On Lamp: Lamp number is in A (packed format). This can also be 
3328   E2B5             ;*               used to set a bitflag.
3329   E2B5             ;*************************************************************************
3330   E2B5 DF BA       lamp_on		    stx	temp3
3331   E2B7 CE 00 10    lamp_onx		ldx	#lampbuffer0			;Set up correct index to lampbuffer
3332   E2BA 37          lamp_or		    pshb	
3333   E2BB 8D 79                       bsr	unpack_byte				
3334   E2BD 37                          pshb						;B now contains the bitpos
3335   E2BE EA 00                       orab	$00,X
3336   E2C0 E7 00       lamp_commit		stab	$00,X					;turn it on
3337   E2C2 DF B8                       stx	temp2
3338   E2C4 D6 B9                       ldab	temp2+1				;was item worked on within lampbuffer0
3339   E2C6 C1 1C                       cmpb	#(bitflags)&$FF			;compare index against start of bitflags
3340   E2C8 33                          pulb	
3341   E2C9 24 05                       bcc	lamp_done
3342   E2CB 53                          comb						;If we are here, then we must switch buffers.
3343   E2CC E4 30                       andb	lampbufferselectx,X		;We are now on buffer 0
3344   E2CE E7 30                       stab	lampbufferselectx,X
3345   E2D0 33          lamp_done		pulb	
3346   E2D1 DE BA                       ldx	temp3
3347   E2D3 39                          rts
3348   E2D4             
3349   E2D4             ;*************************************************************************
3350   E2D4             ;* Turn Off Lamp: Lamp number is in A (packed format). This can also be 
3351   E2D4             ;*               used to clear a bitflag.
3352   E2D4             ;*************************************************************************			
3353   E2D4 DF BA       lamp_off		stx	temp3
3354   E2D6 CE 00 10    lamp_offx		ldx	#lampbuffer0
3355   E2D9 37          lamp_and		pshb	
3356   E2DA 8D 5A                       bsr	unpack_byte				;seperate into X and B
3357   E2DC 37                          pshb	
3358   E2DD 53                          comb	
3359   E2DE E4 00                       andb	$00,X
3360   E2E0 20 DE                       bra	lamp_commit
3361   E2E2             
3362   E2E2             ;*************************************************************************
3363   E2E2             ;* Sets a Lamp to 'flashing' state
3364   E2E2             ;*************************************************************************			
3365   E2E2 DF BA       lamp_flash		stx	temp3
3366   E2E4 CE 00 40                    ldx	#lampflashflag
3367   E2E7 20 D1                       bra	lamp_or
3368   E2E9             
3369   E2E9             ;*************************************************************************
3370   E2E9             ;* Toggle Lamp from existing state. This may be used on bitflags as well.
3371   E2E9             ;*************************************************************************			
3372   E2E9 DF BA       lamp_invert		stx	temp3
3373   E2EB CE 00 10                    ldx	#lampbuffer0
3374   E2EE 37          lamp_eor		pshb	
3375   E2EF 8D 45                       bsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
3376   E2F1 E8 00                       eorb	$00,X
3377   E2F3 E7 00                       stab	$00,X
3378   E2F5 20 D9                       bra	lamp_done				;Leave now
3379   E2F7             				
3380   E2F7 DF BA       bsel_on		    stx	temp3
3381   E2F9 CE 00 28                    ldx	#lampbufferselect
3382   E2FC 20 BC                       bra	lamp_or
3383   E2FE             
3384   E2FE DF BA       bsel_off		stx	temp3
3385   E300 CE 00 28                    ldx	#lampbufferselect
3386   E303 20 D4                       bra	lamp_and
3387   E305             
3388   E305 DF BA       bsel_invert	    stx	temp3
3389   E307 CE 00 28                    ldx	#lampbufferselect
3390   E30A 20 E2                       bra	lamp_eor
3391   E30C             
3392   E30C DF BA       lamp_on_1		stx	temp3
3393   E30E CE 00 34    lamp_on_1x		ldx	#lampbuffer1
3394   E311 20 A7                       bra	lamp_or
3395   E313             
3396   E313 DF BA       lamp_off_1		stx	temp3
3397   E315 CE 00 34    lamp_off_1x		ldx	#lampbuffer1
3398   E318 20 BF                       bra	lamp_and
3399   E31A             
3400   E31A DF BA       lamp_invert_1	stx	temp3
3401   E31C CE 00 34                    ldx	#lampbuffer1
3402   E31F 20 CD                       bra	lamp_eor
3403   E321             			
3404   E321 DF BA       bit_on		    stx	temp3
3405   E323 CE 00 1C                    ldx	#bitflags
3406   E326 20 92                       bra	lamp_or
3407   E328             
3408   E328 DF BA       bit_off		    stx	temp3
3409   E32A CE 00 1C                    ldx	#bitflags
3410   E32D 20 AA                       bra	lamp_and
3411   E32F             
3412   E32F DF BA       bit_invert		stx	temp3
3413   E331 CE 00 1C                    ldx	#bitflags
3414   E334 20 B8                       bra	lamp_eor
3415   E336             
3416   E336             ;*********************************************************
3417   E336             ;* Converts Packed Byte data into an Index in X and a
3418   E336             ;* bitpos in B
3419   E336             ;*
3420   E336             ;* Packed Data Format: IIII IBBB
3421   E336             ;*
3422   E336             ;*	Where IIIII is the index to the lamp buffers.
3423   E336             ;*    Values between 
3424   E336             ;*      0-7		lampbuffer0
3425   E336             ;*      7-15	
3426   E336             ;*********************************************************	
3427   E336 36          unpack_byte		psha	
3428   E337 44                          lsra	
3429   E338 44                          lsra	
3430   E339 44                          lsra	
3431   E33A BD DF 62                    jsr	xplusa				;X = X + A
3432   E33D 32                          pula	
3433   E33E 7E DC 09                    jmp	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
3434   E341             
3435   E341             ;***************************************************************
3436   E341             ;* Lamp Range Manipulation Code Start Here
3437   E341             ;***************************************************************
3438   E341             ;Clears all lamps in specified buffer, sets active buffer to 0		
3439   E341 8D 71       lampm_clr0		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3440   E343                             begin
3440   E343             
3441   E343 17                              tba	
3442   E344 43                              coma	
3443   E345 A4 00                           anda	$00,X
3444   E347 8D 07                           bsr	lampm_buf0			;Set Lamp to Buffer 0
3445   E349 BD E3 EF                        jsr	lamp_left			;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3446   E34C                             csend						;Loop it!
3446   E34C             
3446   E34C             
3446   E34C~                            csend						;Loop it!
3446   E34C~                            csend						;Loop it!
3446   E34C~                            csend						;Loop it!
3446   E34C             
3446   E34C 24 F5       
3446   E34E             
3446   E34E~                            csend						;Loop it!
3446   E34E~                            csend						;Loop it!
3446   E34E             
3447   E34E 20 5D                       bra	abx_ret
3448   E350             
3449   E350 A7 00       lampm_buf0		staa	$00,X
3450   E352 DF B8                       stx	temp2
3451   E354 96 B9                       ldaa	temp2+1
3452   E356 81 1C                       cmpa	#$1C					;If we are not using Buffer $0010 then skip this
3453   E358                             ifcs
3453   E358             
3453   E358 24 FE       
3454   E35A 17                              tba	
3455   E35B 43                              coma	
3456   E35C A4 30                           anda	lampbufferselectx,X
3457   E35E A7 30                           staa	lampbufferselectx,X
3458   E360                             endif
3458   E360             
3458   E360             
3458   E360             
3458   E360             
3458   E360             
3458   E360~                            endif
3458   E360~                            endif
3458   E360             
3458   E360~                            endif
3458   E360~                            endif
3458   E360             
3458   E359             
3458   E359 06          
3458   E35A             
3458   E35A             
3458   E35A~                            endif
3458   E35A~                            endif
3458   E35A~                            endif
3458   E35A             
3458   E360             
3458   E360~                            endif
3458   E360~                            endif
3458   E360             
3459   E360 39                          rts	 
3460   E361             
3461   E361             ;Invert entire range
3462   E361 8D 51       lampm_f		    bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3463   E363                             begin
3463   E363             
3464   E363 17                              tba	
3465   E364 A8 00                           eora	$00,X
3466   E366 A7 00                           staa	$00,X
3467   E368 BD E3 EF                        jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3468   E36B                             csend
3468   E36B             
3468   E36B             
3468   E36B~                            csend
3468   E36B~                            csend
3468   E36B~                            csend
3468   E36B             
3468   E36B 24 F6       
3468   E36D             
3468   E36D~                            csend
3468   E36D~                            csend
3468   E36D             
3469   E36D 20 3E                       bra	abx_ret
3470   E36F             
3471   E36F             ;This is unused in the macros. You must call it directly at $F1D5
3472   E36F             ;The behavior of this command is probably the most complex. It 
3473   E36F             ;starts at the last lamp in the range. If it is already set, then
3474   E36F             ;the routine simply exits. If the last lamp is not set, the routine
3475   E36F             ;goes down through each lamp in the range. If if finds a lamp on,
3476   E36F             ;then it turns off that lamp, then goes back up to the next lamp
3477   E36F             ;and turns it on. If no lamps are on in the range, then the first
3478   E36F             ;lamp in the range is turned on.
3479   E36F             ;The best example of this routine is for the 10-20-30 lamps on 
3480   E36F             ;Jungle Lord. It will simply incrment the 10-20-30 lamps sequentially
3481   E36F             ;and then stop at 30. If none are on, then it will turn on 10.
3482   E36F             lampm_g				
3483   E36F 8D 4F                       bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
3484   E371 26 3A                       bne	abx_ret
3485   E373                             begin
3485   E373             
3486   E373 BD E3 FE                        jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
3487   E376 25 08                           bcs	b_098
3488   E378                             neend
3488   E378             
3488   E378             
3488   E378~                            neend
3488   E378~                            neend
3488   E378~                            neend
3488   E378             
3488   E378 27 F9       
3488   E37A             
3488   E37A~                            neend
3488   E37A~                            neend
3488   E37A             
3489   E37A 17                          tba	
3490   E37B 43                          coma	
3491   E37C A4 00                       anda	$00,X
3492   E37E A7 00                       staa	$00,X
3493   E380 8D 6D       b_098			bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3494   E382 EA 00       b_09A			orab	$00,X
3495   E384 E7 00                       stab	$00,X
3496   E386 20 25                       bra	abx_ret
3497   E388             
3498   E388             ;***************************************************
3499   E388             ;* Goes through range bits from low to high and
3500   E388             ;* finds first cleared bit, sets it and exits.	
3501   E388             ;***************************************************	
3502   E388 8D 2A       lampm_a		    bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3503   E38A                             begin
3503   E38A             
3504   E38A 27 F6                           beq	b_09A
3505   E38C 8D 61                           bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3506   E38E 25 1D                           bcs	abx_ret				;Return if we have reached end lamp
3507   E390                             loopend
3507   E390             
3507   E390             
3507   E390~                            loopend
3507   E390~                            loopend
3507   E390~                            loopend
3507   E390             
3507   E390 20 F8       
3507   E392             
3507   E392~                            loopend
3507   E392~                            loopend
3507   E392             
3508   E392             
3509   E392             ;***************************************************
3510   E392             ;* Goes through range bits from low to high and
3511   E392             ;* finds first cleared bit, sets it and exits. If 
3512   E392             ;* all bits in range are already set, then routine 
3513   E392             ;* clears all bits in range.
3514   E392             ;***************************************************			
3515   E392 8D 20       lampm_b		    bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3516   E394                             begin
3516   E394             
3517   E394 27 EC                           beq	b_09A
3518   E396 8D 57                           bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3519   E398                             csend
3519   E398             
3519   E398             
3519   E398~                            csend
3519   E398~                            csend
3519   E398~                            csend
3519   E398             
3519   E398 24 FA       
3519   E39A             
3519   E39A~                            csend
3519   E39A~                            csend
3519   E39A             
3520   E39A DE BA                       ldx	temp3
3521   E39C 96 BC                       ldaa	sys_temp1
3522   E39E D6 BD                       ldab	sys_temp2
3523   E3A0 20 9F                       bra	lampm_clr0				;Turn OFF All lamps in Range
3524   E3A2             
3525   E3A2             ;Sets all lamp bits specified buffer, sets active buffer to 0 if action is on buffer 0			
3526   E3A2 8D 10       lampm_set0		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3527   E3A4                             begin
3527   E3A4             
3528   E3A4 17                              tba	
3529   E3A5 AA 00                           oraa	$00,X
3530   E3A7 8D A7                           bsr	lampm_buf0			;Set Lamp to Buffer 0
3531   E3A9 8D 44                           bsr	lamp_left			;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3532   E3AB                             csend
3532   E3AB             
3532   E3AB             
3532   E3AB~                            csend
3532   E3AB~                            csend
3532   E3AB~                            csend
3532   E3AB             
3532   E3AB 24 F7       
3532   E3AD             
3532   E3AD~                            csend
3532   E3AD~                            csend
3532   E3AD             
3533   E3AD 96 BC       abx_ret		    ldaa	sys_temp1
3534   E3AF D6 BD                       ldab	sys_temp2
3535   E3B1 DE BA                       ldx	temp3
3536   E3B3 39                          rts	 
3537   E3B4             
3538   E3B4             ;************************************************************
3539   E3B4             ;* Lamp Group Routines: This take care of manipulating
3540   E3B4             ;*                      a collection of sequential lamps
3541   E3B4             ;*                      to create various lighting effects.
3542   E3B4             ;************************************************************
3543   E3B4             ;* Loads the Lamp Group data
3544   E3B4             ;*
3545   E3B4             ;* sys_temp3 = start lamp
3546   E3B4             ;* sys_temp4 = end lamp
3547   E3B4             ;* A = XX-YYYYY: XX = Buffer Selection, YYYYY = Lamp Group
3548   E3B4             ;* B = Bitpos
3549   E3B4             ;* X = Selected Buffer Address
3550   E3B4             ;*
3551   E3B4             ;************************************			
3552   E3B4 BD E3 C6    lampr_start		jsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Bitpos X=Buffer
3553   E3B7 96 BE                       ldaa	sys_temp3				;Starting lamp in range
3554   E3B9 BD E3 36    lr_ret		    jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
3555   E3BC 17                          tba	
3556   E3BD A4 00                       anda	$00,X
3557   E3BF 39                          rts	 
3558   E3C0             
3559   E3C0 8D 04       lampr_end		bsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Bitpos X=Buffer
3560   E3C2 96 BF                       ldaa	sys_temp4				;End Lamp In range
3561   E3C4 20 F3                       bra	lr_ret
3562   E3C6             			
3563   E3C6 DF BA       lampr_setup		stx	temp3
3564   E3C8 97 BC                       staa	sys_temp1
3565   E3CA D7 BD                       stab	sys_temp2
3566   E3CC FE D0 4F                    ldx	gr_lamptable_ptr			;Game ROM: Lamp Range Table
3567   E3CF 16                          tab	
3568   E3D0 58                          aslb	
3569   E3D1 C4 7F                       andb	#$7F
3570   E3D3 BD DF B0                    jsr	xplusb
3571   E3D6 EE 00                       ldx	$00,X					;Get the start lamp
3572   E3D8 DF BE                       stx	sys_temp3				;Save Lamp Range
3573   E3DA CE E2 AD                    ldx	#lampbuffers			;Lamp Buffer Locations, shifts bits 6+7 around into 1+2
3574   E3DD 49                          rola	
3575   E3DE 49                          rola	
3576   E3DF 49                          rola	
3577   E3E0 48                          asla	
3578   E3E1 84 07                       anda	#$07
3579   E3E3 BD DF 62                    jsr	xplusa				;X = X + A
3580   E3E6 EE 00                       ldx	$00,X					;Get the Buffer Pointer Specified
3581   E3E8 D6 BF                       ldab	sys_temp4
3582   E3EA D0 BE                       subb	sys_temp3
3583   E3EC D7 B6                       stab	temp1					;Store how many lamps affected
3584   E3EE 39                          rts	 
3585   E3EF             
3586   E3EF             ;*************************************************************
3587   E3EF             ;* Moves current lamp bit up one bit. If shifted off end of 
3588   E3EF             ;* current lamp buffer byte, then byte is incremented and bit
3589   E3EF             ;* is reset to $01.
3590   E3EF             ;*************************************************************			
3591   E3EF 58          lamp_left		aslb					;shift it
3592   E3F0                             ifcs					;did it go off end
3592   E3F0             
3592   E3F0 24 FE       
3593   E3F2 59                              rolb					;yes, rolb to #$01
3594   E3F3 08                              inx					;increment the byte position
3595   E3F4                             endif
3595   E3F4             
3595   E3F4             
3595   E3F4             
3595   E3F4             
3595   E3F4             
3595   E3F4~                            endif
3595   E3F4~                            endif
3595   E3F4             
3595   E3F4~                            endif
3595   E3F4~                            endif
3595   E3F4             
3595   E3F1             
3595   E3F1 02          
3595   E3F2             
3595   E3F2             
3595   E3F2~                            endif
3595   E3F2~                            endif
3595   E3F2~                            endif
3595   E3F2             
3595   E3F4             
3595   E3F4~                            endif
3595   E3F4~                            endif
3595   E3F4             
3596   E3F4 96 B6       ls_ret		    ldaa	temp1				;load up the original lamp counter until end lamp
3597   E3F6 80 01                       suba	#$01				;take one off
3598   E3F8 97 B6                       staa	temp1				;store it again
3599   E3FA 17                          tba					;get the bit back again
3600   E3FB A4 00                       anda	$00,X				;AND accum A with current buffer location
3601   E3FD 39                          rts	
3602   E3FE             
3603   E3FE             ;*************************************************************
3604   E3FE             ;* Moves current lamp bit down one bit. If shifted off start of 
3605   E3FE             ;* current lamp buffer byte, then byte is deincremented and bit
3606   E3FE             ;* is reset to #$80
3607   E3FE             ;*************************************************************			
3608   E3FE 54          lamp_right		lsrb	
3609   E3FF 24 F3                       bcc	ls_ret
3610   E401 56                          rorb	
3611   E402 09                          dex	
3612   E403 20 EF                       bra	ls_ret
3613   E405             
3614   E405             ;***************************************************
3615   E405             ;* Goes through range bits from high to low, routine
3616   E405             ;* finds first bit in range that is set and clears
3617   E405             ;* it and then exits.
3618   E405             ;***************************************************			
3619   E405 8D B9       lampm_c		    bsr	lampr_end				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3620   E407             lm_test		    ifeq
3620   E407             
3620   E407 26 FE       
3621   E409 8D F3                           bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
3622   E40B 24 FA                           bcc	lm_test
3623   E40D 20 9E                           bra	abx_ret
3624   E40F                             endif
3624   E40F             
3624   E40F             
3624   E40F             
3624   E40F             
3624   E40F             
3624   E40F~                            endif
3624   E40F~                            endif
3624   E40F             
3624   E40F~                            endif
3624   E40F~                            endif
3624   E40F             
3624   E408             
3624   E408 06          
3624   E409             
3624   E409             
3624   E409~                            endif
3624   E409~                            endif
3624   E409~                            endif
3624   E409             
3624   E40F             
3624   E40F~                            endif
3624   E40F~                            endif
3624   E40F             
3625   E40F 53                          comb	
3626   E410 E4 00                       andb	$00,X
3627   E412 E7 00                       stab	$00,X
3628   E414 20 97                       bra	abx_ret
3629   E416             
3630   E416             ;Rotate Up			
3631   E416 8D 9C       lampm_e		    bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3632   E418 DF B8                       stx	temp2
3633   E41A D7 B7                       stab	temp1+1
3634   E41C                             begin
3634   E41C             
3635   E41C 97 C0                           staa	sys_temp5
3636   E41E 8D CF                           bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3637   E420 25 04                           bcs	b_0A2					;Branch if we are at the end of the range
3638   E422 8D 1A                           bsr	b_0A3
3639   E424                             loopend
3639   E424             
3639   E424             
3639   E424~                            loopend
3639   E424~                            loopend
3639   E424~                            loopend
3639   E424             
3639   E424 20 F6       
3639   E426             
3639   E426~                            loopend
3639   E426~                            loopend
3639   E426             
3640   E426             			
3641   E426 DE B8       b_0A2			ldx	temp2					;Get the last Byte location
3642   E428 D6 B7                       ldab	temp1+1				;Get the last Bitpos
3643   E42A 8D 12                       bsr	b_0A3
3644   E42C 20 38                       bra	to_abx_ret
3645   E42E             
3646   E42E             ;Rotate Down			
3647   E42E 8D 90       lampm_d		    bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
3648   E430 DF B8                       stx	temp2
3649   E432 D7 B7                       stab	temp1+1
3650   E434                             begin
3650   E434             
3651   E434 97 C0                           staa	sys_temp5
3652   E436 8D C6                           bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
3653   E438 25 EC                           bcs	b_0A2
3654   E43A 8D 02                           bsr	b_0A3
3655   E43C                             loopend
3655   E43C             
3655   E43C             
3655   E43C~                            loopend
3655   E43C~                            loopend
3655   E43C~                            loopend
3655   E43C             
3655   E43C 20 F6       
3655   E43E             
3655   E43E~                            loopend
3655   E43E~                            loopend
3655   E43E             
3656   E43E             
3657   E43E 36          b_0A3			psha					
3658   E43F 17                          tba					;B has the bitpos
3659   E440 43                          coma	
3660   E441 A4 00                       anda	$00,X				;Mask it off
3661   E443 7D 00 C0                    tst	sys_temp5			;sys_temp5 has the first bit in range's value or 0s
3662   E446                             ifne					;if it was on
3662   E446             
3662   E446 27 FE       
3663   E448 1B                              aba					;make it on again
3664   E449                             endif
3664   E449             
3664   E449             
3664   E449             
3664   E449             
3664   E449             
3664   E449~                            endif
3664   E449~                            endif
3664   E449             
3664   E449~                            endif
3664   E449~                            endif
3664   E449             
3664   E447             
3664   E447 01          
3664   E448             
3664   E448             
3664   E448~                            endif
3664   E448~                            endif
3664   E448~                            endif
3664   E448             
3664   E449             
3664   E449~                            endif
3664   E449~                            endif
3664   E449             
3665   E449 A7 00                       staa	$00,X				;store it
3666   E44B 32                          pula	
3667   E44C 39                          rts
3668   E44D             
3669   E44D BD E3 C0    lampm_z		    jsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
3670   E450                             ifeq
3670   E450             
3670   E450 26 FE       
3671   E452                                 begin
3671   E452             
3672   E452 8D AA                               bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
3673   E454 25 10                               bcs	to_abx_ret
3674   E456                                 neend
3674   E456             
3674   E456             
3674   E456~                                neend
3674   E456~                                neend
3674   E456~                                neend
3674   E456             
3674   E456 27 FA       
3674   E458             
3674   E458~                                neend
3674   E458~                                neend
3674   E458             
3675   E458                             endif
3675   E458             
3675   E458             
3675   E458             
3675   E458             
3675   E458             
3675   E458~                            endif
3675   E458~                            endif
3675   E458             
3675   E458~                            endif
3675   E458~                            endif
3675   E458             
3675   E451             
3675   E451 06          
3675   E452             
3675   E452             
3675   E452~                            endif
3675   E452~                            endif
3675   E452~                            endif
3675   E452             
3675   E458             
3675   E458~                            endif
3675   E458~                            endif
3675   E458             
3676   E458 17                          tba	
3677   E459 A8 00                       eora	$00,X
3678   E45B A7 00                       staa	$00,X
3679   E45D BD E3 FE                    jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
3680   E460 25 04                       bcs	to_abx_ret
3681   E462 EA 00                       orab	$00,X
3682   E464 E7 00                       stab	$00,X
3683   E466 7E E3 AD    to_abx_ret		jmp	abx_ret
3684   E469             
3685   E469 BD E3 B4    lfill_a		    jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3686   E46C             b_0AB			ifne
3686   E46C             
3686   E46C 27 FE       
3687   E46E BD E3 EF                        jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3688   E471 24 F9                           bcc	b_0AB
3689   E473 20 F1                           bra	to_abx_ret
3690   E475                             endif
3690   E475             
3690   E475             
3690   E475             
3690   E475             
3690   E475             
3690   E475~                            endif
3690   E475~                            endif
3690   E475             
3690   E475~                            endif
3690   E475~                            endif
3690   E475             
3690   E46D             
3690   E46D 07          
3690   E46E             
3690   E46E             
3690   E46E~                            endif
3690   E46E~                            endif
3690   E46E~                            endif
3690   E46E             
3690   E475             
3690   E475~                            endif
3690   E475~                            endif
3690   E475             
3691   E475 0C          lmp_clc		    clc	
3692   E476 20 EE                       bra	to_abx_ret
3693   E478             
3694   E478 BD E3 B4    lfill_b		    jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3695   E47B                             begin
3695   E47B             
3696   E47B 26 F8                           bne	lmp_clc
3697   E47D BD E3 EF                        jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3698   E480                             csend
3698   E480             
3698   E480             
3698   E480~                            csend
3698   E480~                            csend
3698   E480~                            csend
3698   E480             
3698   E480 24 F9       
3698   E482             
3698   E482~                            csend
3698   E482~                            csend
3698   E482             
3699   E482 20 E2                       bra	to_abx_ret
3700   E484             
3701   E484 CE 00 7B    bit_switch		ldx	#switch_debounced
3702   E487 20 12                       bra	bit_main
3703   E489 CE 00 40    bit_lamp_flash	ldx	#lampflashflag
3704   E48C 20 0D                       bra	bit_main
3705   E48E CE 00 34    bit_lamp_buf_1	ldx	#lampbuffer1
3706   E491 20 08                       bra	bit_main
3707   E493 CE 00 1C    bit_flags	    ldx	#bitflags
3708   E496 20 03                       bra	bit_main
3709   E498 CE 00 10    bit_lamp_buf_0	ldx	#lampbuffer0
3710   E49B BD E3 36    bit_main		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
3711   E49E E5 00                       bitb	$00,X
3712   E4A0 39                          rts	
3713   E4A1             
3714   E4A1 84 3F       lampm_x		    anda	#$3F
3715   E4A3 BD E3 B4                    jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
3716   E4A6                             begin
3716   E4A6             
3717   E4A6 97 C6                           staa	thread_priority			;This is probably just a temp location?
3718   E4A8 17                              tba	
3719   E4A9 43                              coma	
3720   E4AA A4 24                           anda	bitflagsx,X
3721   E4AC 9A C6                           oraa	thread_priority			;Recall temp
3722   E4AE A7 24                           staa	bitflagsx,X
3723   E4B0 BD E3 EF                        jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
3724   E4B3                             csend
3724   E4B3             
3724   E4B3             
3724   E4B3~                            csend
3724   E4B3~                            csend
3724   E4B3~                            csend
3724   E4B3             
3724   E4B3 24 F1       
3724   E4B5             
3724   E4B5~                            csend
3724   E4B5~                            csend
3724   E4B5             
3725   E4B5 20 AF                       bra	to_abx_ret
3726   E4B7             			
3727   E4B7             ;***************************************************
3728   E4B7             ;* System Checksum #2: Set to make ROM csum from
3729   E4B7             ;*                     $F000-F7FF equal to $00
3730   E4B7             ;***************************************************
3731   E4B7             	
3732   E4B7 D8          csum2			.db $D8
3733   E4B8             
3734   E4B8             ;***************************************************
3735   E4B8             ;* VM Macro Pointers: Master Lookup Table
3736   E4B8             ;***************************************************
3737   E4B8             				
3738   E4B8 E5 7E       master_vm_lookup	.dw vm_control_0x		;Misc Functions
3739   E4BA E5 9F                           .dw vm_control_1x		;Lamp Functions
3740   E4BC E5 E5                           .dw vm_control_2x		;Lamp Functions
3741   E4BE E6 00                           .dw vm_control_3x		;Solenoid Functions
3742   E4C0 E6 0D                           .dw vm_control_4x		;Sound, Immediate Exe Functions
3743   E4C2 E6 5F                           .dw vm_control_5x		;RAM,Delay,Jump,SimpleBransh Functions
3744   E4C4 E6 FE                           .dw vm_control_6x		;Indexed Delay Functions
3745   E4C6 E7 02                           .dw vm_control_7x		;Immediate Delay Functions
3746   E4C8 E7 06                           .dw vm_control_8x		;Jump Relative 
3747   E4CA E7 16                           .dw vm_control_9x		;jsr Relative
3748   E4CC E7 20                           .dw vm_control_ax		;jsr to Code Relative
3749   E4CE E7 29                           .dw vm_control_bx		;Add RAM
3750   E4D0 E7 36                           .dw vm_control_cx		;Set RAM
3751   E4D2 E5 F1                           .dw vm_control_dx		;Extended Lamp Functions
3752   E4D4 E7 45                           .dw vm_control_ex		;Play Sound Once
3753   E4D6 E7 45                           .dw vm_control_fx		;Play Sound Once
3754   E4D8             
3755   E4D8 E5 86       vm_lookup_0x	.dw macro_pcminus100
3756   E4DA E5 60                       .dw macro_go
3757   E4DC E5 5A                       .dw macro_rts
3758   E4DE DA E8                       .dw killthread
3759   E4E0 E5 8D                       .dw macro_code_start
3760   E4E2 E5 95                       .dw macro_special
3761   E4E4 E5 9A                       .dw macro_extraball
3762   E4E6             	
3763   E4E6 E3 A2       vm_lookup_1x_a	.dw lampm_set0
3764   E4E8 E3 41                       .dw lampm_clr0
3765   E4EA E3 88                       .dw lampm_a
3766   E4EC E3 92                       .dw lampm_b
3767   E4EE E4 05                       .dw lampm_c
3768   E4F0 E4 2E                       .dw lampm_d
3769   E4F2 E4 16                       .dw lampm_e
3770   E4F4 E3 61                       .dw lampm_f 
3771   E4F6               
3772   E4F6 E2 B5       vm_lookup_1x_b	.dw lamp_on
3773   E4F8 E2 D4                       .dw lamp_off
3774   E4FA E2 E9                       .dw lamp_invert
3775   E4FC E2 E2                       .dw lamp_flash
3776   E4FE             
3777   E4FE             vm_lookup_2x
3778   E4FE E2 F7                       .dw bsel_on
3779   E500 E2 FE                       .dw bsel_off
3780   E502 E3 05                       .dw bsel_invert
3781   E504             
3782   E504             vm_lookup_dx_l
3783   E504 E3 0C                       .dw lamp_on_1
3784   E506 E3 13                       .dw lamp_off_1
3785   E508 E3 1A                       .dw lamp_invert_1
3786   E50A             
3787   E50A             vm_lookup_dx_h
3788   E50A E3 21                       .dw bit_on
3789   E50C E3 28                       .dw bit_off
3790   E50E E3 2F                       .dw bit_invert
3791   E510             
3792   E510             vm_lookup_4x
3793   E510 DC F7                       .dw add_points
3794   E512 DC 61                       .dw score_main  
3795   E514 DC 5A                       .dw dsnd_pts 
3796   E516             
3797   E516             vm_lookup_5x    
3798   E516 E6 68                       .dw macro_ramadd
3799   E518 E6 7D                       .dw macro_ramcopy
3800   E51A E6 88                       .dw macro_set_pri
3801   E51C E6 90                       .dw macro_delay_imm_b
3802   E51E E6 AD                       .dw macro_rem_th_s
3803   E520 E6 B4                       .dw macro_rem_th_m
3804   E522 E6 BB                       .dw macro_jsr_noreturn
3805   E524 E6 E5                       .dw macro_jsr_return
3806   E526 E7 8B                       .dw macro_branch
3807   E528 E7 8B                       .dw macro_branch
3808   E52A E7 8B                       .dw macro_branch
3809   E52C E7 8B                       .dw macro_branch
3810   E52E E7 0D                       .dw macro_jmp_cpu
3811   E530 E7 62                       .dw macro_setswitch
3812   E532 E7 7A                       .dw macro_clearswitch
3813   E534 E7 24                       .dw macro_jmp_abs
3814   E536             
3815   E536             branch_lookup
3816   E536 E8 17                       .dw branch_tilt		    ;Tilt Flag				
3817   E538 E8 1E                       .dw branch_gameover     ;Game Over Flag			
3818   E53A E6 53                       .dw macro_getnextbyte	;NextByte = Straight Data		
3819   E53C E7 FA                       .dw branch_invert		;Invert Result			
3820   E53E E7 FF                       .dw branch_lamp_on	    ;Check if Lamp is On or Flashing
3821   E540 E8 0B                       .dw branch_lamprangeoff	;Lamp Range All Off			
3822   E542 E8 12                       .dw branch_lamprangeon	;Lamp Range All On			
3823   E544 E8 25                       .dw branch_lampbuf1	    ;RAM Matrix $0028			
3824   E546 E8 31                       .dw branch_switch		;Check Encoded Switch		
3825   E548 E8 3B                       .dw branch_add		    ;A = A + B				
3826   E54A E8 36                       .dw branch_and		    ;Logical AND 				
3827   E54C E8 3D                       .dw branch_or		    ;Logical OR 				
3828   E54E E8 42                       .dw branch_equal		;A = B ??				
3829   E550 E8 47                       .dw branch_ge		    ;A >= B ??				
3830   E552 E8 4A                       .dw branch_threadpri	;Check for Priority Thread??	
3831   E554 E8 51                       .dw branch_bitwise	    ;A && B	
3832   E556             
3833   E556             ;*************************************************************
3834   E556             ;* Virtual Machine Routines:
3835   E556             ;*
3836   E556             ;* These are the main routines that are called to interpret
3837   E556             ;* the commands written in WML7.
3838   E556             ;*************************************************************
3839   E556             macro_start		
3840   E556 97 00                       staa	ram_base
3841   E558 D7 01                       stab	ram_base+1
3842   E55A             macro_rts		
3843   E55A 32                          pula	
3844   E55B 97 ED                       staa	vm_pc
3845   E55D 32                          pula	
3846   E55E 97 EE                       staa	vm_pc+1
3847   E560             macro_go		
3848   E560 BD D0 BC                    jsr	gr_macro_event
3849   E563 BD E6 53                    jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
3850   E566 16                          tab	
3851   E567 54                          lsrb	
3852   E568 54                          lsrb	
3853   E569 54                          lsrb	
3854   E56A C4 1E                       andb	#$1E
3855   E56C CE E4 B8                    ldx	#master_vm_lookup
3856   E56F BD DF B0                    jsr	xplusb
3857   E572 EE 00                       ldx	$00,X
3858   E574 6E 00                       jmp	$00,X
3859   E576             
3860   E576 DF ED       macro_next		stx	vm_pc
3861   E578 97 00       abreg_sto		staa	vm_reg_a
3862   E57A D7 01       breg_sto		stab	vm_reg_b
3863   E57C 20 E2                       bra	macro_go
3864   E57E             			
3865   E57E             
3866   E57E CE E4 D8    vm_control_0x	ldx	#vm_lookup_0x
3867   E581 BD E6 4C                    jsr	gettabledata_b			;X = data at (X + (A*2))
3868   E584 6E 00                       jmp	$00,X
3869   E586             			
3870   E586             macro_pcminus100	
3871   E586 DE ED                       ldx	vm_pc
3872   E588 09                          dex	
3873   E589 DF ED                       stx	vm_pc
3874   E58B 20 D3                       bra	macro_go
3875   E58D             
3876   E58D             macro_code_start	
3877   E58D DE ED                       ldx	vm_pc
3878   E58F 96 00                       ldaa	ram_base
3879   E591 D6 01                       ldab	ram_base+1
3880   E593 6E 00                       jmp	$00,X
3881   E595             
3882   E595 BD E8 70    macro_special	jsr	award_replay			;Award Special
3883   E598 20 C6                       bra	macro_go
3884   E59A             
3885   E59A BD E8 80    macro_extraball	jsr	award_extraball			;Award Extra Ball
3886   E59D 20 C1                       bra	macro_go
3887   E59F             			
3888   E59F 16          vm_control_1x	tab	
3889   E5A0 C4 0F                       andb	#$0F
3890   E5A2 C0 08                       subb	#$08
3891   E5A4 25 1D                       bcs	macro_17				;Branch for Macros 10-17
3892   E5A6 58          macro_x8f		aslb	
3893   E5A7 CE E4 E6                    ldx	#vm_lookup_1x_a
3894   E5AA BD DF B0                    jsr	xplusb				;X = X + B)
3895   E5AD EE 00                       ldx	$00,X
3896   E5AF 16                          tab						;Original Command #
3897   E5B0 58                          aslb	
3898   E5B1 58                          aslb	
3899   E5B2 C4 80                       andb	#$80
3900   E5B4             b_0AF			begin
3900   E5B4             
3901   E5B4 BD E6 53                        jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
3902   E5B7 36                              psha	
3903   E5B8 84 7F                           anda	#$7F
3904   E5BA 1B                              aba	
3905   E5BB AD 00                           jsr	$00,X
3906   E5BD 32                              pula	
3907   E5BE 4D                              tsta	
3908   E5BF                             plend
3908   E5BF             
3908   E5BF             
3908   E5BF~                            plend
3908   E5BF~                            plend
3908   E5BF~                            plend
3908   E5BF             
3908   E5BF 2B F3       
3908   E5C1             
3908   E5C1~                            plend
3908   E5C1~                            plend
3908   E5C1             
3909   E5C1 20 9D                       bra	macro_go
3910   E5C3                             
3911   E5C3 CE E4 F6    macro_17		ldx	#vm_lookup_1x_b
3912   E5C6 16          macro_x17		tab						;A = still instruction #
3913   E5C7 84 03                       anda	#$03
3914   E5C9 BD E6 4C                    jsr	gettabledata_b			;X = data at (X + (A*2))
3915   E5CC C5 04                       bitb	#$04
3916   E5CE                             ifeq					;Branch on 14-17
3916   E5CE             
3916   E5CE 26 FE       
3917   E5D0 5F                              clrb	
3918   E5D1 20 E1                           bra	b_0AF
3919   E5D3                             endif
3919   E5D3             
3919   E5D3             
3919   E5D3             
3919   E5D3             
3919   E5D3             
3919   E5D3~                            endif
3919   E5D3~                            endif
3919   E5D3             
3919   E5D3~                            endif
3919   E5D3~                            endif
3919   E5D3             
3919   E5CF             
3919   E5CF 03          
3919   E5D0             
3919   E5D0             
3919   E5D0~                            endif
3919   E5D0~                            endif
3919   E5D0~                            endif
3919   E5D0             
3919   E5D3             
3919   E5D3~                            endif
3919   E5D3~                            endif
3919   E5D3             
3920   E5D3                             begin
3920   E5D3             
3921   E5D3 8D 7E                           bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
3922   E5D5 16                              tab	
3923   E5D6 DF BA                           stx	temp3
3924   E5D8 BD E6 D6                        jsr	macro_b_ram				;$00,LSD(A)->A
3925   E5DB AD 00                           jsr	$00,X
3926   E5DD DE BA                           ldx	temp3
3927   E5DF 5D                              tstb	
3928   E5E0                             plend
3928   E5E0             
3928   E5E0             
3928   E5E0~                            plend
3928   E5E0~                            plend
3928   E5E0~                            plend
3928   E5E0             
3928   E5E0 2B F1       
3928   E5E2             
3928   E5E2~                            plend
3928   E5E2~                            plend
3928   E5E2             
3929   E5E2 7E E5 60    to_macro_go1	jmp	macro_go
3930   E5E5             
3931   E5E5 16          vm_control_2x	tab						;A= macro
3932   E5E6 C4 0F                       andb	#$0F
3933   E5E8 C0 08                       subb	#$08
3934   E5EA 24 BA                       bcc	macro_x8f				;Branch for Macros 28-2F
3935   E5EC CE E4 FE                    ldx	#vm_lookup_2x
3936   E5EF 20 D5                       bra	macro_x17
3937   E5F1             			
3938   E5F1 CE E5 04    vm_control_dx	ldx   #vm_lookup_dx_l
3939   E5F4 16                          tab   
3940   E5F5 C4 0F                       andb  #$0F
3941   E5F7 C0 08                       subb  #$08
3942   E5F9 25 CB                       bcs   macro_x17
3943   E5FB CE E5 0A                    ldx   #vm_lookup_dx_h
3944   E5FE 20 C6                       bra   macro_x17
3945   E600             
3946   E600 16          vm_control_3x	tab	
3947   E601 C4 0F                       andb	#$0F					;16 Solenoids Max 
3948   E603                             begin
3948   E603             
3949   E603 8D 4E                           bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
3950   E605 BD DB A7                        jsr	solbuf				;Turn On/Off Solenoid
3951   E608 5A                              decb	
3952   E609                             eqend
3952   E609             
3952   E609             
3952   E609~                            eqend
3952   E609~                            eqend
3952   E609~                            eqend
3952   E609             
3952   E609 26 F8       
3952   E60B             
3952   E60B~                            eqend
3952   E60B~                            eqend
3952   E60B             
3953   E60B 20 D5                       bra	to_macro_go1
3954   E60D             
3955   E60D 84 0F       vm_control_4x	anda	#$0F
3956   E60F                             ifeq
3956   E60F             
3956   E60F 26 FE       
3957   E611 BD E6 A8                        jsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
3958   E614 BD DC 56                        jsr	isnd_pts				;Play Sound Index(B)Once, Add Points(A)
3959   E617 20 C9                           bra	to_macro_go1
3960   E619                             endif
3960   E619             
3960   E619             
3960   E619             
3960   E619             
3960   E619             
3960   E619~                            endif
3960   E619~                            endif
3960   E619             
3960   E619~                            endif
3960   E619~                            endif
3960   E619             
3960   E610             
3960   E610 08          
3960   E611             
3960   E611             
3960   E611~                            endif
3960   E611~                            endif
3960   E611~                            endif
3960   E611             
3960   E619             
3960   E619~                            endif
3960   E619~                            endif
3960   E619             
3961   E619 81 04                       cmpa	#$04
3962   E61B 24 0C                       bcc	macro_exec				;Branch for Macros 44-4F (execute cpu)
3963   E61D CE E5 0E                    ldx	#vm_lookup_4x-2
3964   E620 BD E6 4C                    jsr	gettabledata_b			;X = data at (X + (A*2))
3965   E623 8D 2E                       bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
3966   E625 AD 00                       jsr	$00,X
3967   E627 20 B9                       bra	to_macro_go1			;Continue Executing Macros
3968   E629             
3969   E629 16          macro_exec		tab	
3970   E62A C0 02                       subb	#$02
3971   E62C CE 11 30                    ldx	#exe_buffer
3972   E62F                             begin
3972   E62F             
3973   E62F 8D 22                           bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
3974   E631 A7 00                           staa	$00,X
3975   E633 08                              inx	
3976   E634 5A                              decb	
3977   E635                             eqend						;Add B bytes to exe Buffer 
3977   E635             
3977   E635             
3977   E635~                            eqend						;Add B bytes to exe Buffer 
3977   E635~                            eqend						;Add B bytes to exe Buffer 
3977   E635~                            eqend						;Add B bytes to exe Buffer 
3977   E635             
3977   E635 26 F8       
3977   E637             
3977   E637~                            eqend						;Add B bytes to exe Buffer 
3977   E637~                            eqend						;Add B bytes to exe Buffer 
3977   E637             
3978   E637 86 7E                       ldaa	#$7E
3979   E639 A7 00                       staa	$00,X
3980   E63B 86 E5                       ldaa	#((abreg_sto>>8)&$FF)
3981   E63D A7 01                       staa	$01,X
3982   E63F 86 78                       ldaa	#((abreg_sto)&$FF)		;Tack a jmp macro_next at the end of the routine
3983   E641 A7 02                       staa	$02,X
3984   E643 96 00                       ldaa	vm_reg_a
3985   E645 D6 01                       ldab	vm_reg_b
3986   E647 7E 11 30                    jmp	exe_buffer				;Go there Now, put return A and B into RAM $00 and $01 
3987   E64A             
3988   E64A 84 0F       gettabledata_w	anda	#$0F
3989   E64C 48          gettabledata_b	asla	
3990   E64D BD DF 62                    jsr	xplusa
3991   E650 EE 00                       ldx	$00,X
3992   E652 39                          rts
3993   E653             			
3994   E653             macro_getnextbyte	
3995   E653 DF B6                       stx	temp1
3996   E655 DE ED                       ldx	vm_pc
3997   E657 A6 00                       ldaa	$00,X
3998   E659 08                          inx	
3999   E65A DF ED                       stx	vm_pc
4000   E65C DE B6       getx_rts		ldx	temp1
4001   E65E 39                          rts	
4002   E65F             
4003   E65F CE E5 16    vm_control_5x	ldx	#vm_lookup_5x
4004   E662 16                          tab						;Move our Data into B
4005   E663 BD E6 4A                    jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
4006   E666 6E 00                       jmp	$00,X
4007   E668             
4008   E668 8D E9       macro_ramadd	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4009   E66A 16                          tab	
4010   E66B 8D 69                       bsr	macro_b_ram				;$00,LSD(A)->A
4011   E66D 97 BA                       staa	temp3
4012   E66F 54                          lsrb	
4013   E670 54                          lsrb	
4014   E671 54                          lsrb	
4015   E672 54                          lsrb	
4016   E673 17                          tba	
4017   E674 8D 60                       bsr	macro_b_ram				;$00,LSD(A)->A
4018   E676 9B BA                       adda	temp3
4019   E678 8D 4D       ram_sto2		bsr	macro_a_ram				;A->$00,LSD(B)
4020   E67A 7E E5 60    to_macro_go2	jmp	macro_go
4021   E67D             
4022   E67D 8D D4       macro_ramcopy	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4023   E67F 16                          tab	
4024   E680 8D 54                       bsr	macro_b_ram				;$00,LSD(A)->A
4025   E682 54                          lsrb	
4026   E683 54                          lsrb	
4027   E684 54                          lsrb	
4028   E685 54                          lsrb	
4029   E686 20 F0                       bra	ram_sto2				;A->$00,LSD(B),jmp $F3B5
4030   E688             
4031   E688 8D C9       macro_set_pri	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4032   E68A DE CD                       ldx	current_thread			;Current VM Routine being run
4033   E68C A7 0D                       staa	threadobj_id,X
4034   E68E 20 EA                       bra	to_macro_go2			;Continue Executing Macros
4035   E690             
4036   E690             macro_delay_imm_b	
4037   E690 8D C1                       bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4038   E692 97 D3       dly_sto		    staa	thread_timer_byte
4039   E694 DE ED                       ldx	vm_pc
4040   E696 96 00                       ldaa	vm_reg_a
4041   E698 D6 01                       ldab	vm_reg_b
4042   E69A BD DA 95                    jsr	delaythread				;Push Next Address onto VM, Timer at thread_timer_byte
4043   E69D 7E E5 76                    jmp	macro_next
4044   E6A0             
4045   E6A0             macro_getnextword		
4046   E6A0 8D 06                       bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
4047   E6A2 D7 B6                       stab	temp1
4048   E6A4 97 B7                       staa	temp1+1
4049   E6A6 20 B4                       bra	getx_rts
4050   E6A8             			
4051   E6A8 8D A9       macro_get2bytes	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4052   E6AA 16                          tab	
4053   E6AB 20 A6                       bra	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4054   E6AD             			
4055   E6AD 8D F9       macro_rem_th_s	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
4056   E6AF BD DB 77                    jsr	kill_thread
4057   E6B2 20 C6                       bra	to_macro_go2			;Continue Executing Macros
4058   E6B4             			
4059   E6B4 8D F2       macro_rem_th_m	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
4060   E6B6 BD DB 7F                    jsr	kill_threads
4061   E6B9 20 BF                       bra	to_macro_go2			;Continue Executing Macros
4062   E6BB             
4063   E6BB             macro_jsr_noreturn	
4064   E6BB 8D E3                       bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
4065   E6BD 96 EE                       ldaa	vm_pc+1
4066   E6BF 36                          psha	
4067   E6C0 96 ED                       ldaa	vm_pc
4068   E6C2 36                          psha	
4069   E6C3 DF ED       pc_sto2		    stx	vm_pc
4070   E6C5 20 B3                       bra	to_macro_go2			;jContinue Executing Macros
4071   E6C7             			
4072   E6C7 DF B6       macro_a_ram		stx	temp1
4073   E6C9 C4 0F                       andb	#$0F
4074   E6CB D7 B9                       stab	temp2+1
4075   E6CD 7F 00 B8                    clr	temp2
4076   E6D0 DE B8                       ldx	temp2
4077   E6D2 A7 00                       staa	$00,X
4078   E6D4 20 86       to_getx_rts		bra	getx_rts
4079   E6D6             
4080   E6D6 DF B6       macro_b_ram		stx	temp1
4081   E6D8 84 0F                       anda	#$0F
4082   E6DA 97 B9                       staa	temp2+1
4083   E6DC 7F 00 B8                    clr	temp2
4084   E6DF DE B8                       ldx	temp2
4085   E6E1 A6 00                       ldaa	$00,X
4086   E6E3 20 EF                       bra	to_getx_rts				;ldx temp1, rts.
4087   E6E5             
4088   E6E5 8D B9       macro_jsr_return	bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
4089   E6E7 96 EE       ret_sto		    ldaa	vm_pc+1
4090   E6E9 36                          psha	
4091   E6EA 96 ED                       ldaa	vm_pc
4092   E6EC 36                          psha						;Push Macro PC
4093   E6ED 96 00                       ldaa	ram_base
4094   E6EF D6 01                       ldab	ram_base+1
4095   E6F1 AD 00                       jsr	$00,X
4096   E6F3 97 00                       staa	ram_base
4097   E6F5 32                          pula	
4098   E6F6 97 ED                       staa	vm_pc					;Pull Macro PC
4099   E6F8 32                          pula	
4100   E6F9 97 EE                       staa	vm_pc+1
4101   E6FB 7E E5 7A                    jmp	breg_sto
4102   E6FE             
4103   E6FE 8D D6       vm_control_6x	bsr	macro_b_ram				;Load RAM Data
4104   E700 20 90                       bra	dly_sto				;Delay it
4105   E702             			
4106   E702 84 0F       vm_control_7x	anda	#$0F
4107   E704 20 8C                       bra	dly_sto				;Delay it
4108   E706             			
4109   E706 8D 44       vm_control_8x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
4110   E708 DF ED       pc_sto		    stx	vm_pc					;Store X into VMPC
4111   E70A 7E E5 60    to_macro_go4	jmp	macro_go
4112   E70D             
4113   E70D BD E6 A0    macro_jmp_cpu	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
4114   E710 96 00                       ldaa	vm_reg_a
4115   E712 D6 01                       ldab	vm_reg_b
4116   E714 6E 00                       jmp	$00,X
4117   E716             			
4118   E716 8D 34       vm_control_9x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
4119   E718 D6 EE                       ldab	vm_pc+1
4120   E71A 37                          pshb	
4121   E71B D6 ED                       ldab	vm_pc
4122   E71D 37                          pshb	
4123   E71E 20 E8                       bra	pc_sto				;Store X into VMPC, continue
4124   E720             
4125   E720 8D 2A       vm_control_ax	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
4126   E722 20 C3                       bra	ret_sto
4127   E724             			
4128   E724 BD E6 A0    macro_jmp_abs	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
4129   E727 20 DF                       bra	pc_sto
4130   E729             			
4131   E729 16          vm_control_bx	tab	
4132   E72A 8D AA                       bsr	macro_b_ram				;RAM Data (A&0f)->A
4133   E72C 97 B8                       staa	temp2
4134   E72E 8D 58                       bsr	to_macro_getnextbyte
4135   E730 9B B8                       adda	temp2
4136   E732 8D 93       ram_sto		    bsr	macro_a_ram				;A->RAM(B&0f)
4137   E734 20 D4                       bra	to_macro_go4
4138   E736             
4139   E736 16          vm_control_cx	tab	
4140   E737 8D 4F                       bsr	to_macro_getnextbyte
4141   E739 20 F7                       bra	ram_sto				;Save to RAM and continue
4142   E73B             			
4143   E73B 84 0F       vm_control_nu	anda	#$0F
4144   E73D 16                          tab	
4145   E73E 8D 48                       bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
4146   E740 BD DD 66                    jsr	sound_sub
4147   E743 20 C5                       bra	to_macro_go4			;jmp  $F3B5 
4148   E745             
4149   E745             vm_control_ex
4150   E745 84 1F       vm_control_fx	anda	#$1F
4151   E747 BD DD 5F                    jsr	isnd_once				;Play Sound Index(A) Once
4152   E74A 20 BE                       bra	to_macro_go4
4153   E74C             			
4154   E74C 84 0F       macro_pcadd		anda	#$0F
4155   E74E 85 08                       bita	#$08
4156   E750                             ifne
4156   E750             
4156   E750 27 FE       
4157   E752 8A F0                           oraa	#$F0
4158   E754                             endif
4158   E754             
4158   E754             
4158   E754             
4158   E754             
4158   E754             
4158   E754~                            endif
4158   E754~                            endif
4158   E754             
4158   E754~                            endif
4158   E754~                            endif
4158   E754             
4158   E751             
4158   E751 02          
4158   E752             
4158   E752             
4158   E752~                            endif
4158   E752~                            endif
4158   E752~                            endif
4158   E752             
4158   E754             
4158   E754~                            endif
4158   E754~                            endif
4158   E754             
4159   E754 16                          tab	
4160   E755 8D 31                       bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
4161   E757 9B EE                       adda	vm_pc+1
4162   E759 97 B7                       staa	temp1+1
4163   E75B D9 ED                       adcb	vm_pc
4164   E75D D7 B6                       stab	temp1
4165   E75F DE B6                       ldx	temp1
4166   E761 39                          rts	
4167   E762             
4168   E762 8D 0A       macro_setswitch	bsr	load_sw_no				;Get switch number from the data
4169   E764 EA 00                       orab	$00,X
4170   E766 E7 00                       stab	$00,X
4171   E768 96 C4                       ldaa	sys_temp_w3
4172   E76A 2B F6                       bmi	macro_setswitch
4173   E76C 20 17                       bra	to_macro_go3			;jmp  $F3B5
4174   E76E             			
4175   E76E 8D 18       load_sw_no		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
4176   E770 97 C4                       staa	sys_temp_w3
4177   E772 84 3F                       anda	#$3F
4178   E774 CE 00 7B                    ldx	#switch_debounced
4179   E777 7E E3 36                    jmp	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
4180   E77A             
4181   E77A             macro_clearswitch	
4182   E77A 8D F2                       bsr	load_sw_no				;Get switch number from the data
4183   E77C 53                          comb	
4184   E77D E4 00                       andb	$00,X
4185   E77F E7 00                       stab	$00,X
4186   E781 96 C4                       ldaa	sys_temp_w3
4187   E783 2B F5                       bmi	macro_clearswitch
4188   E785 7E E5 60    to_macro_go3	jmp	macro_go
4189   E788             
4190   E788             to_macro_getnextbyte			
4191   E788 7E E6 53                    jmp	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
4192   E78B             
4193   E78B 37          macro_branch	pshb	
4194   E78C 8D 28                       bsr	branchdata				;Gets Main Result
4195   E78E BD E8 5D                    jsr	test_a				;Returns #80 or #81 in (A) based on Test of A
4196   E791 33                          pulb						;Get Back Command in B
4197   E792 1B                          aba	
4198   E793 36                          psha	
4199   E794 C5 02                       bitb	#$02					;Relative or Absolute Branch Flag
4200   E796                             ifeq
4200   E796             
4200   E796 26 FE       
4201   E798 BD E6 A0                        jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
4202   E79B                             else
4202   E79B             
4202   E79B             
4202   E79B             
4202   E79B             
4202   E797             
4202   E797             
4202   E797             
4202   E797~                            else
4202   E797~                            else
4202   E797~                            else
4202   E797~                            else
4202   E797             
4202   E797~                            else
4202   E797~                            else
4202   E797~                            else
4202   E797~                            else
4202   E797             
4202   E797             
4202   E797 05          
4202   E79B             
4202   E79B 20 FE       
4202   E79D             
4202   E79D             
4202   E79D             
4202   E79D~                            else
4202   E79D~                            else
4202   E79D~                            else
4202   E79D~                            else
4202   E79D~                            else
4202   E79D             
4202   E79D~                            else
4202   E79D~                            else
4202   E79D             
4202   E79D~                            else
4202   E79D~                            else
4202   E79D             
4203   E79D 8D E9                           bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
4204   E79F C6 FF                           ldab	#$FF
4205   E7A1 81 80                           cmpa	#$80
4206   E7A3 C9 00                           adcb	#$00
4207   E7A5 9B EE                           adda	vm_pc+1
4208   E7A7 D9 ED                           adcb	vm_pc
4209   E7A9 97 B7                           staa	temp1+1
4210   E7AB D7 B6                           stab	temp1
4211   E7AD DE B6                           ldx	temp1
4212   E7AF                             endif
4212   E7AF             
4212   E7AF             
4212   E7AF             
4212   E7AF             
4212   E7AF             
4212   E7AF~                            endif
4212   E7AF~                            endif
4212   E7AF             
4212   E7AF~                            endif
4212   E7AF~                            endif
4212   E7AF             
4212   E79C             
4212   E79C 12          
4212   E79D             
4212   E79D             
4212   E79D~                            endif
4212   E79D~                            endif
4212   E79D~                            endif
4212   E79D             
4212   E7AF             
4212   E7AF~                            endif
4212   E7AF~                            endif
4212   E7AF             
4213   E7AF 32                          pula						;Get our result from above push
4214   E7B0 46                          rora						;Test LSB
4215   E7B1 24 D2                       bcc	to_macro_go3			;If result was #80, then ignore this branch (jmp  $F3B5)
4216   E7B3 7E E6 C3                    jmp	pc_sto2				;Else, we will branch now. (stx  $D1, jmp $F3B5)
4217   E7B6             
4218   E7B6             
4219   E7B6 8D D0       branchdata		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
4220   E7B8 81 D0                       cmpa	#$D0
4221   E7BA 27 1D                       beq	cbra2
4222   E7BC 25 40                       bcs	to_rts3				;(rts) if data is below #D0
4223   E7BE 81 F0                       cmpa	#$F0
4224   E7C0 24 13                       bcc	complexbranch			;Branch if #F0 or above (Complex)
4225   E7C2 81 E0                       cmpa	#$E0
4226   E7C4                             ifcc						;Branch if less than #E0
4226   E7C4             
4226   E7C4 25 FE       
4227   E7C6 7E E6 D6                        jmp	macro_b_ram				;RAM Data (A&0f)->A (Data is E_)
4228   E7C9                             endif
4228   E7C9             
4228   E7C9             
4228   E7C9             
4228   E7C9             
4228   E7C9             
4228   E7C9~                            endif
4228   E7C9~                            endif
4228   E7C9             
4228   E7C9~                            endif
4228   E7C9~                            endif
4228   E7C9             
4228   E7C5             
4228   E7C5 03          
4228   E7C6             
4228   E7C6             
4228   E7C6~                            endif
4228   E7C6~                            endif
4228   E7C6~                            endif
4228   E7C6             
4228   E7C9             
4228   E7C9~                            endif
4228   E7C9~                            endif
4228   E7C9             
4229   E7C9 CE 01 95                    ldx	#adj_gamebase			;Pointer to Bottom of Game Adjustments
4230   E7CC 84 0F                       anda	#$0F					;A = Index for Game Adjustment Lookup
4231   E7CE 48                          asla	
4232   E7CF BD DF 62                    jsr	xplusa				;X = X + A
4233   E7D2 7E DF B6                    jmp	cmosinc_a				;CMOS,X++ -> A
4234   E7D5             
4235   E7D5 81 F3       complexbranch	cmpa	#$F3
4236   E7D7                             ifcc							;data is below #F3 (not complex)
4236   E7D7             
4236   E7D7 25 FE       
4237   E7D9 36          cbra2				psha						;Push Current Branch Inst.
4238   E7DA 8D DA                           bsr	branchdata				;Gets Encoded Data Type
4239   E7DC 16                              tab	
4240   E7DD D7 B6                           stab	temp1
4241   E7DF 32                              pula	
4242   E7E0 81 F9                           cmpa	#$F9
4243   E7E2                                 ifcc						;Branch if below #F9 (Lamp or Bit Test)
4243   E7E2             
4243   E7E2 25 FE       
4244   E7E4 36                                  psha	
4245   E7E5 37                                  pshb	
4246   E7E6 8D CE                               bsr	branchdata				;Gets Encoded Data Type
4247   E7E8 97 B6                               staa	temp1
4248   E7EA 33                                  pulb	
4249   E7EB 32                                  pula	
4250   E7EC                                 endif
4250   E7EC             
4250   E7EC             
4250   E7EC             
4250   E7EC             
4250   E7EC             
4250   E7EC~                                endif
4250   E7EC~                                endif
4250   E7EC             
4250   E7EC~                                endif
4250   E7EC~                                endif
4250   E7EC             
4250   E7E3             
4250   E7E3 08          
4250   E7E4             
4250   E7E4             
4250   E7E4~                                endif
4250   E7E4~                                endif
4250   E7E4~                                endif
4250   E7E4             
4250   E7EC             
4250   E7EC~                                endif
4250   E7EC~                                endif
4250   E7EC             
4251   E7EC                             endif
4251   E7EC             
4251   E7EC             
4251   E7EC             
4251   E7EC             
4251   E7EC             
4251   E7EC~                            endif
4251   E7EC~                            endif
4251   E7EC             
4251   E7EC~                            endif
4251   E7EC~                            endif
4251   E7EC             
4251   E7D8             
4251   E7D8 13          
4251   E7D9             
4251   E7D9             
4251   E7D9~                            endif
4251   E7D9~                            endif
4251   E7D9~                            endif
4251   E7D9             
4251   E7EC             
4251   E7EC~                            endif
4251   E7EC~                            endif
4251   E7EC             
4252   E7EC 81 D0                       cmpa	#$D0
4253   E7EE 27 3A                       beq	branch_bitflag
4254   E7F0 CE E5 36                    ldx	#branch_lookup
4255   E7F3 BD E6 4A                    jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
4256   E7F6 96 B6                       ldaa	temp1
4257   E7F8 6E 00                       jmp	$00,X
4258   E7FA             
4259   E7FA 8D 61       branch_invert	bsr	test_a
4260   E7FC 88 01                       eora	#$01
4261   E7FE 39          to_rts3		    rts	
4262   E7FF             
4263   E7FF BD E4 98    branch_lamp_on	jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
4264   E802 26 1E                       bne	ret_true				;return true
4265   E804 BD E4 89                    jsr	bit_lamp_flash			;Check Encoded #(A) with $0030
4266   E807 26 19       test_z		    bne	ret_true				;return true
4267   E809 20 10                       bra	ret_false				;return false
4268   E80B             			
4269   E80B             branch_lamprangeoff	
4270   E80B BD E4 78                    jsr	lfill_b
4271   E80E 25 12       test_c		    bcs	ret_true				;return true
4272   E810 20 09                       bra	ret_false				;return false
4273   E812             			
4274   E812             branch_lamprangeon	
4275   E812 BD E4 69                    jsr	lfill_a
4276   E815 20 F7                       bra	test_c
4277   E817             
4278   E817 96 E4       branch_tilt		ldaa	flag_tilt				;tilt flag?
4279   E819 26 07                       bne	ret_true				;return true
4280   E81B 86 80       ret_false		ldaa	#$80					;return false
4281   E81D 39                          rts	
4282   E81E             			
4283   E81E 96 E5       branch_gameover	ldaa	flag_gameover			;game over?
4284   E820 27 F9                       beq	ret_false				;return false
4285   E822 86 81       ret_true		ldaa	#$81
4286   E824 39                          rts
4287   E825             
4288   E825 BD E4 8E    branch_lampbuf1	jsr	bit_lamp_buf_1			;Check Encoded #(A) with $0028
4289   E828 20 DD                       bra	test_z				;Return Bool based on Z
4290   E82A             
4291   E82A             
4292   E82A 96 B6       branch_bitflag	ldaa  temp1					;Check Encoded #(A) with bitflags
4293   E82C BD E4 93                    jsr   bit_flags
4294   E82F 20 D6                       bra	test_z				;Return Boolean based on Z
4295   E831             
4296   E831 BD E4 84    branch_switch	jsr	bit_switch				;Check Encoded #(A) with $0061:
4297   E834 20 D1                       bra	test_z				;Return Boolean based on Z
4298   E836             			
4299   E836 8D 1E       branch_and		bsr	set_logic
4300   E838 94 B6                       anda	temp1
4301   E83A 39                          rts	
4302   E83B             			
4303   E83B 1B          branch_add		aba	
4304   E83C 39                          rts	
4305   E83D 8D 17       branch_or		bsr	set_logic
4306   E83F 9A B6                       oraa	temp1
4307   E841 39                          rts	
4308   E842             			
4309   E842 11          branch_equal	cba	
4310   E843 27 DD                       beq	ret_true				;lda  #$81, rts
4311   E845 20 D4                       bra	ret_false				;lda  #$80, rts
4312   E847             			
4313   E847 11          branch_ge		cba	
4314   E848 20 C4                       bra	test_c
4315   E84A             
4316   E84A             branch_threadpri	
4317   E84A BD DB 84                    jsr	check_threadid
4318   E84D 24 D3                       bcc	ret_true				;lda  #$81, rts
4319   E84F 20 CA                       bra	ret_false				;lda  #$80, rts
4320   E851             			
4321   E851 D7 B6       branch_bitwise	stab	temp1
4322   E853 94 B6                       anda	temp1
4323   E855 39          to_rts4		    rts	
4324   E856             
4325   E856 36          set_logic		psha	
4326   E857 17                          tba	
4327   E858 8D 03                       bsr	test_a
4328   E85A 97 B6                       staa	temp1
4329   E85C 32                          pula	
4330   E85D 4D          test_a		    tsta	
4331   E85E 2B F5                       bmi	to_rts4				;rts
4332   E860 BD E4 98                    jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
4333   E863 27 B6                       beq	ret_false				;return false
4334   E865 81 40                       cmpa	#$40					;Check Encoded Lamp #
4335   E867 24 B9                       bcc	ret_true				;return true
4336   E869 BD E4 89                    jsr	bit_lamp_flash			;Bittest with $0030
4337   E86C 26 AD                       bne	ret_false				;return false
4338   E86E 20 B2                       bra	ret_true				;return true
4339   E870             			
4340   E870             ;*******************************************************
4341   E870             ;* End VM Code Section
4342   E870             ;*******************************************************			
4343   E870             
4344   E870 36          award_replay	psha	
4345   E871 DF F8                       stx   credit_x_temp
4346   E873 CE 01 16                    ldx	#aud_replaycredits		;AUD: Replay Score Credits
4347   E876 BD E9 0B                    jsr	ptrx_plus_1				;Add 1 to data at X
4348   E879 BD D0 BA                    jsr	gr_special_event			;Game ROM Hook
4349   E87C DE F8                       ldx   credit_x_temp
4350   E87E 20 0E                       bra	eb_rts  
4351   E880             
4352   E880 36          award_extraball	psha	
4353   E881 DF F6       do_eb			stx	eb_x_temp				;Save X for later
4354   E883 BD D0 B8                    jsr	gr_eb_event
4355   E886 CE 01 22                    ldx	#aud_extraballs			;AUD: Total Extra Balls
4356   E889 BD E9 0B                    jsr	ptrx_plus_1				;Add 1 to data at X
4357   E88C DE F6                       ldx	eb_x_temp				;Restore X
4358   E88E 32          eb_rts		    pula	
4359   E88F 39                          rts
4360   E890             
4361   E890 DF F8       addcredits		stx	credit_x_temp			;Save X
4362   E892 36                          psha	
4363   E893 37          addcredit2		pshb	
4364   E894 8D 3C                       bsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
4365   E896                             ifcs						;No more if Carry Clear.
4365   E896             
4365   E896 24 FE       
4366   E898 BD DF C6                        jsr	cmosinc_b				;CMOS,X++ -> B
4367   E89B 09                              dex	
4368   E89C 09                              dex	
4369   E89D 1B                              aba						;Add the new credits.
4370   E89E 19                              daa						;Adjust
4371   E89F                                 ifcs
4371   E89F             
4371   E89F 24 FE       
4372   E8A1 86 99                               ldaa	#$99					;If it rolled, set it to 99
4373   E8A3                                 endif
4373   E8A3             
4373   E8A3             
4373   E8A3             
4373   E8A3             
4373   E8A3             
4373   E8A3~                                endif
4373   E8A3~                                endif
4373   E8A3             
4373   E8A3~                                endif
4373   E8A3~                                endif
4373   E8A3             
4373   E8A0             
4373   E8A0 02          
4373   E8A1             
4373   E8A1             
4373   E8A1~                                endif
4373   E8A1~                                endif
4373   E8A1~                                endif
4373   E8A1             
4373   E8A3             
4373   E8A3~                                endif
4373   E8A3~                                endif
4373   E8A3             
4374   E8A3 BD E0 12                        jsr	a_cmosinc				;A -> CMOS,X++
4375   E8A6 F1 11 9A                        cmpb	current_credits			;Actual Credits
4376   E8A9                                 ifeq						;Check against shown credits
4376   E8A9             
4376   E8A9 26 FE       
4377   E8AB C6 0E                               ldab	#$0E
4378   E8AD D7 C6                               stab	thread_priority
4379   E8AF CE E8 E8                            ldx	#creditq				;Thread: Add on Queued Credits
4380   E8B2 BD DA FC                            jsr	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
4381   E8B5                                     ifcs						;If Carry is set, thread was not added
4381   E8B5             
4381   E8B5 24 FE       
4382   E8B7 B7 11 9A                                staa	current_credits			;Actual Credits
4383   E8BA                                     endif
4383   E8BA             
4383   E8BA             
4383   E8BA             
4383   E8BA             
4383   E8BA             
4383   E8BA~                                    endif
4383   E8BA~                                    endif
4383   E8BA             
4383   E8BA~                                    endif
4383   E8BA~                                    endif
4383   E8BA             
4383   E8B6             
4383   E8B6 03          
4383   E8B7             
4383   E8B7             
4383   E8B7~                                    endif
4383   E8B7~                                    endif
4383   E8B7~                                    endif
4383   E8B7             
4383   E8BA             
4383   E8BA~                                    endif
4383   E8BA~                                    endif
4383   E8BA             
4384   E8BA                                 endif
4384   E8BA             
4384   E8BA             
4384   E8BA             
4384   E8BA             
4384   E8BA             
4384   E8BA~                                endif
4384   E8BA~                                endif
4384   E8BA             
4384   E8BA~                                endif
4384   E8BA~                                endif
4384   E8BA             
4384   E8AA             
4384   E8AA 0F          
4384   E8AB             
4384   E8AB             
4384   E8AB~                                endif
4384   E8AB~                                endif
4384   E8AB~                                endif
4384   E8AB             
4384   E8BA             
4384   E8BA~                                endif
4384   E8BA~                                endif
4384   E8BA             
4385   E8BA 8D 04                           bsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
4386   E8BC                             endif
4386   E8BC             
4386   E8BC             
4386   E8BC             
4386   E8BC             
4386   E8BC             
4386   E8BC~                            endif
4386   E8BC~                            endif
4386   E8BC             
4386   E8BC~                            endif
4386   E8BC~                            endif
4386   E8BC             
4386   E897             
4386   E897 24          
4386   E898             
4386   E898             
4386   E898~                            endif
4386   E898~                            endif
4386   E898~                            endif
4386   E898             
4386   E8BC             
4386   E8BC~                            endif
4386   E8BC~                            endif
4386   E8BC             
4387   E8BC DE F8                       ldx	credit_x_temp			;Restore X
4388   E8BE 20 25                       bra	pull_ba_rts				;pulb,pula,rts
4389   E8C0             
4390   E8C0             ;**********************************************
4391   E8C0             ;* Adjust the coin lockout solenoid and the 
4392   E8C0             ;* credit lamp on playfield if installed.
4393   E8C0             ;**********************************************			
4394   E8C0 36          coinlockout		psha	
4395   E8C1 BD E8 D2                    jsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
4396   E8C4 B6 D0 63                    ldaa	gr_coinlockout			;Get coil number
4397   E8C7 8A F0                       oraa	#$F0
4398   E8C9                             ifcc
4398   E8C9             
4398   E8C9 25 FE       
4399   E8CB 84 0F                           anda	#$0F
4400   E8CD                             endif
4400   E8CD             
4400   E8CD             
4400   E8CD             
4400   E8CD             
4400   E8CD             
4400   E8CD~                            endif
4400   E8CD~                            endif
4400   E8CD             
4400   E8CD~                            endif
4400   E8CD~                            endif
4400   E8CD             
4400   E8CA             
4400   E8CA 02          
4400   E8CB             
4400   E8CB             
4400   E8CB~                            endif
4400   E8CB~                            endif
4400   E8CB~                            endif
4400   E8CB             
4400   E8CD             
4400   E8CD~                            endif
4400   E8CD~                            endif
4400   E8CD             
4401   E8CD BD DB A7                    jsr	solbuf				;Turn Off Lockout Coils
4402   E8D0 32                          pula	
4403   E8D1 39                          rts	
4404   E8D2             
4405   E8D2             ;**********************************************
4406   E8D2             ;* See if we are at the adjustable maximum 
4407   E8D2             ;* credits allowed. If we are at max then
4408   E8D2             ;* carry flag is cleared, if we are not at
4409   E8D2             ;* max then the carry flag is set.
4410   E8D2             ;**********************************************			
4411   E8D2 36          checkmaxcredits	psha	
4412   E8D3 37                          pshb	
4413   E8D4 CE 01 AB                    ldx	#adj_max_credits			;ADJ: Max Credits
4414   E8D7 BD DF C6                    jsr	cmosinc_b				;CMOS,X++ -> B
4415   E8DA CE 01 6E                    ldx	#aud_currentcredits		;CMOS: Current Credits
4416   E8DD 5D                          tstb						;Max Credits allowed
4417   E8DE 0D                          sec	
4418   E8DF                             ifne
4418   E8DF             
4418   E8DF 27 FE       
4419   E8E1 BD EE D1                        jsr	cmos_a				;CMOS, X -> A
4420   E8E4 11                              cba	
4421   E8E5                             endif
4421   E8E5             
4421   E8E5             
4421   E8E5             
4421   E8E5             
4421   E8E5             
4421   E8E5~                            endif
4421   E8E5~                            endif
4421   E8E5             
4421   E8E5~                            endif
4421   E8E5~                            endif
4421   E8E5             
4421   E8E0             
4421   E8E0 04          
4421   E8E1             
4421   E8E1             
4421   E8E1~                            endif
4421   E8E1~                            endif
4421   E8E1~                            endif
4421   E8E1             
4421   E8E5             
4421   E8E5~                            endif
4421   E8E5~                            endif
4421   E8E5             
4422   E8E5 33          pull_ba_rts		pulb	
4423   E8E6 32                          pula	
4424   E8E7 39                          rts
4425   E8E8             
4426   E8E8             ;***********************************************
4427   E8E8             ;* This routine is spawned as a thread when the
4428   E8E8             ;* credits in memory space do not match
4429   E8E8             ;* the number of credits in the CMOS RAM. It 
4430   E8E8             ;* Takes care of bringing them equal in a timely
4431   E8E8             ;* fashion and calling the game ROM hook each
4432   E8E8             ;* time a credit is added to the memory location. 
4433   E8E8             ;* With this, the game ROM can control the credit 
4434   E8E8             ;* award process.
4435   E8E8             ;***********************************************			
4436   E8E8 CE 01 6E    creditq		    ldx	#aud_currentcredits		;CMOS: Current Credits
4437   E8EB BD DF C6                    jsr	cmosinc_b				;CMOS,X++ -> B
4438   E8EE F1 11 9A                    cmpb	current_credits
4439   E8F1                             ifne
4439   E8F1             
4439   E8F1 27 FE       
4440   E8F3 B6 11 9A                        ldaa	current_credits
4441   E8F6 8B 01                           adda	#$01
4442   E8F8 19                              daa	
4443   E8F9 B7 11 9A                        staa	current_credits
4444   E8FC FE D0 CA                        ldx	gr_coin_ptr			;Game ROM:
4445   E8FF 11                              cba	
4446   E900                                 ifne
4446   E900             
4446   E900 27 FE       
4447   E902 AD 00                               jsr	$00,X					;jsr to Game ROM Credit Hook
4448   E904 20 E2                               bra	creditq				;Loop it.
4449   E906                                 endif
4449   E906             
4449   E906             
4449   E906             
4449   E906             
4449   E906             
4449   E906~                                endif
4449   E906~                                endif
4449   E906             
4449   E906~                                endif
4449   E906~                                endif
4449   E906             
4449   E901             
4449   E901 04          
4449   E902             
4449   E902             
4449   E902~                                endif
4449   E902~                                endif
4449   E902~                                endif
4449   E902             
4449   E906             
4449   E906~                                endif
4449   E906~                                endif
4449   E906             
4450   E906 AD 00                           jsr	$00,X					;jsr to Game ROM/bell?
4451   E908                             endif
4451   E908             
4451   E908             
4451   E908             
4451   E908             
4451   E908             
4451   E908~                            endif
4451   E908~                            endif
4451   E908             
4451   E908~                            endif
4451   E908~                            endif
4451   E908             
4451   E8F2             
4451   E8F2 15          
4451   E8F3             
4451   E8F3             
4451   E8F3~                            endif
4451   E8F3~                            endif
4451   E8F3~                            endif
4451   E8F3             
4451   E908             
4451   E908~                            endif
4451   E908~                            endif
4451   E908             
4452   E908 7E DA E8                    jmp	killthread				;Remove Current Thread from VM
4453   E90B             
4454   E90B             ;*************************************************
4455   E90B             ;* Some utility routines for getting data from
4456   E90B             ;* the CMOS RAM areas.
4457   E90B             ;*************************************************
4458   E90B 36          ptrx_plus_1		psha	
4459   E90C 86 01                       ldaa	#$01
4460   E90E 20 01                       bra	ptrx_plus
4461   E910 36          ptrx_plus_a		psha	
4462   E911 37          ptrx_plus		pshb	
4463   E912 DF B6                       stx	temp1
4464   E914 BD DF C6                    jsr	cmosinc_b				;CMOS,X++ -> B
4465   E917 37                          pshb	
4466   E918 BD DF C6                    jsr	cmosinc_b				;CMOS,X++ -> B
4467   E91B 1B                          aba	
4468   E91C 19                          daa	
4469   E91D 16                          tab	
4470   E91E 32                          pula	
4471   E91F 89 00                       adca	#$00
4472   E921 19                          daa	
4473   E922 DE B6                       ldx	temp1
4474   E924 BD E0 12                    jsr	a_cmosinc				;A -> CMOS,X++
4475   E927 BD DF CC                    jsr	b_cmosinc				;B -> CMOS,X++
4476   E92A DE B6                       ldx	temp1
4477   E92C 20 B7                       bra	pull_ba_rts				;pula, pulb, rts.
4478   E92E                     
4479   E92E             coin_accepted	
4480   E92E                             ;Starts with macro
4481   E92E                             JSRR_(do_coin)	;MJSR $F7A7
4481   E92E~                            JSRR_(do_coin)	;MJSR $F7A7
4481   E92E~                            JSRR_(do_coin)	;MJSR $F7A7
4481   E92E             
4481   E92E~                            JSRR_(do_coin)	;MJSR $F7A7
4481   E92E~                            JSRR_(do_coin)	;MJSR $F7A7
4481   E92E             
4481   E92E             
4481   E92E 90          
4481   E92F 03          
4482   E930 7E DA E8                    jmp	killthread
4483   E933             			
4484   E933             do_coin		    PRI_($0E) 		;Set this loops priority to #0E
4484   E933 52 0E       
4485   E935                             SLEEP_($20) 	;Delay $20
4485   E935~                            SLEEP_($20) 	;Delay $20
4485   E935~                            SLEEP_($20) 	;Delay $20
4485   E935             
4485   E935 53 20       
4485   E937             
4486   E937                             CPUX_			;Resume CPU execution		
4486   E937 04          
4487   E938 43                          coma 
4488   E939 8B 06                       adda	#$06
4489   E93B 48                          asla 
4490   E93C 16                          tab  					;A is 0,2,4  
4491   E93D 58                          aslb 					;B is 0,4,8
4492   E93E CE 01 02                    ldx  	#aud_leftcoins		;AUD: Coins Left/Center/Right Chute Base for counter
4493   E941 BD DF B0                    jsr  	xplusb			;Adjust Pointer
4494   E944 BD E9 0B                    jsr  	ptrx_plus_1   		;Add 1 click to the counter
4495   E947 CE 01 AF                    ldx  	#cmos_pricingbase		;AUD: Coin Slot Multiplier Base
4496   E94A BD DF 62                    jsr  	xplusa   			;Adjust Pointer
4497   E94D BD DF C6                    jsr  	cmosinc_b    		;Get Multiplier into B
4498   E950 8D 6F                       bsr  	dec2hex    			;Make it hex
4499   E952 CE 01 62                    ldx  	#cmos_bonusunits	
4500   E955 8D 46                       bsr  	cmos_a_plus_b_cmos    	;Load Previous Coin Count, Add B, Save it in CMOS++
4501   E957 8D 44                       bsr  	cmos_a_plus_b_cmos    	;Load A with CMOS $0164, add B, Save in CMOS++
4502   E959 CE 01 B9                    ldx  	#cmos_minimumcoins	;ADJ: Minimum Coin Units
4503   E95C BD DF C6                    jsr  	cmosinc_b    		;Get Minimum Coin Amount into B
4504   E95F 8D 60                       bsr	dec2hex
4505   E961 11                          cba  
4506   E962                             ifcc					;Have we met inserted minimum coins?
4506   E962             
4506   E962 25 FE       
4507   E964                                                     ;Yes!
4508   E964 CE 01 B5                        ldx  	#cmos_coinsforcredit	;ADJ: Coin Units required for Credit
4509   E967 BD DF C6                        jsr  	cmosinc_b    		;Get Value
4510   E96A 8D 55                           bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
4511   E96C 8D 36                           bsr  	divide_ab
4512   E96E 97 B6                           staa  temp1
4513   E970 CE 01 64                        ldx  	#cmos_coinunits		;Save remainder coin units for next time
4514   E973 BD DF CC                        jsr  	b_cmosinc   		;( B -> CMOS,X++)
4515   E976 CE 01 B7                        ldx  	#cmos_bonuscoins		;ADJ: Coin Unit Bonus Point
4516   E979 BD DF C6                        jsr  	cmosinc_b    		;( CMOS,X++ -> B )
4517   E97C CE 01 62                        ldx  	#cmos_bonusunits	
4518   E97F BD DF B6                        jsr  	cmosinc_a 			;( CMOS,X++ -> A )
4519   E982 8D 3D                           bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
4520   E984 8D 1E                           bsr  	divide_ab
4521   E986 4D                              tsta 
4522   E987                                 ifne
4522   E987             
4522   E987 27 FE       
4523   E989 8D 2C                               bsr	clr_bonus_coins
4524   E98B                                 endif
4524   E98B             
4524   E98B             
4524   E98B             
4524   E98B             
4524   E98B             
4524   E98B~                                endif
4524   E98B~                                endif
4524   E98B             
4524   E98B~                                endif
4524   E98B~                                endif
4524   E98B             
4524   E988             
4524   E988 02          
4524   E989             
4524   E989             
4524   E989~                                endif
4524   E989~                                endif
4524   E989~                                endif
4524   E989             
4524   E98B             
4524   E98B~                                endif
4524   E98B~                                endif
4524   E98B             
4525   E98B 9B B6                           adda 	temp1
4526   E98D 19                              daa  
4527   E98E CE 01 0E                        ldx  	#aud_paidcredits		;AUD: Total Paid Credits
4528   E991 BD E9 10                        jsr  	ptrx_plus_a    		;Add A to data at X:
4529   E994 7E E8 90                        jmp  	addcredits    		;Add Credits if Possible
4530   E997                             endif
4530   E997             
4530   E997             
4530   E997             
4530   E997             
4530   E997             
4530   E997~                            endif
4530   E997~                            endif
4530   E997             
4530   E997~                            endif
4530   E997~                            endif
4530   E997             
4530   E963             
4530   E963 33          
4530   E964             
4530   E964             
4530   E964~                            endif
4530   E964~                            endif
4530   E964~                            endif
4530   E964             
4530   E997             
4530   E997~                            endif
4530   E997~                            endif
4530   E997             
4531   E997 B6 D0 5C                    ldaa 	gr_creditsound		;Game ROM Data: Credit Sound
4532   E99A 7E DD 5F                    jmp  	isnd_once			;Play Sound Index(A) Once
4533   E99D             
4534   E99D             ;*********************************************************
4535   E99D             ;* Load A with value in X, Add B, Save to CMOS and 
4536   E99D             ;* post increment
4537   E99D             ;*********************************************************
4538   E99D             cmos_a_plus_b_cmos	
4539   E99D BD EE D1                    jsr	cmos_a			;CMOS, X -> A 
4540   E9A0 1B                          aba	
4541   E9A1 7E E0 12                    jmp	a_cmosinc			;A -> CMOS,X++
4542   E9A4             
4543   E9A4             ;********************************************************
4544   E9A4             ;* Divides A by B, returns result in A and remainder in
4545   E9A4             ;* B. Input values are in Hex and not decimal.
4546   E9A4             ;********************************************************			
4547   E9A4 D7 B9       divide_ab		stab	temp2+1
4548   E9A6                             ifne
4548   E9A6             
4548   E9A6 27 FE       
4549   E9A8 16                              tab	
4550   E9A9 86 99                           ldaa	#$99	
4551   E9AB                                 begin
4551   E9AB             
4552   E9AB 8B 01                               adda	#$01
4553   E9AD 19                                  daa	
4554   E9AE D0 B9                               subb	temp2+1
4555   E9B0                                 csend
4555   E9B0             
4555   E9B0             
4555   E9B0~                                csend
4555   E9B0~                                csend
4555   E9B0~                                csend
4555   E9B0             
4555   E9B0 24 F9       
4555   E9B2             
4555   E9B2~                                csend
4555   E9B2~                                csend
4555   E9B2             
4556   E9B2 DB B9                           addb	temp2+1
4557   E9B4 39                              rts	
4558   E9B5                             endif
4558   E9B5             
4558   E9B5             
4558   E9B5             
4558   E9B5             
4558   E9B5             
4558   E9B5~                            endif
4558   E9B5~                            endif
4558   E9B5             
4558   E9B5~                            endif
4558   E9B5~                            endif
4558   E9B5             
4558   E9A7             
4558   E9A7 0D          
4558   E9A8             
4558   E9A8             
4558   E9A8~                            endif
4558   E9A8~                            endif
4558   E9A8~                            endif
4558   E9A8             
4558   E9B5             
4558   E9B5~                            endif
4558   E9B5~                            endif
4558   E9B5             
4559   E9B5 17                          tba	
4560   E9B6 39                          rts
4561   E9B7             
4562   E9B7             ;********************************************************
4563   E9B7             ;* Cleans out any half credits and bonus coins
4564   E9B7             ;********************************************************			
4565   E9B7 CE 00 00    clr_bonus_coins	ldx	#0000
4566   E9BA FF 01 64                    stx	cmos_coinunits
4567   E9BD FF 01 62                    stx	cmos_bonusunits
4568   E9C0 39                          rts	
4569   E9C1             
4570   E9C1             ;********************************************************
4571   E9C1             ;* Convert 2 digit decimal value into a hex number
4572   E9C1             ;*
4573   E9C1             ;* Requires:	Decimal Number in B
4574   E9C1             ;* Protects:	A
4575   E9C1             ;* Destroys:	
4576   E9C1             ;* Output:		Hex Number in B
4577   E9C1             ;********************************************************
4578   E9C1 36          dec2hex		    psha	
4579   E9C2 17                          tba	
4580   E9C3 5F                          clrb	
4581   E9C4                             begin
4581   E9C4             
4582   E9C4 4D                              tsta	
4583   E9C5 27 67                           beq	to_pula_rts		;done
4584   E9C7 8B 99                           adda	#$99
4585   E9C9 19                              daa	
4586   E9CA 5C                              incb	
4587   E9CB                             loopend			;Loop forever
4587   E9CB             
4587   E9CB             
4587   E9CB~                            loopend			;Loop forever
4587   E9CB~                            loopend			;Loop forever
4587   E9CB~                            loopend			;Loop forever
4587   E9CB             
4587   E9CB 20 F7       
4587   E9CD             
4587   E9CD~                            loopend			;Loop forever
4587   E9CD~                            loopend			;Loop forever
4587   E9CD             
4588   E9CD             
4589   E9CD             ;*********************************************************
4590   E9CD             ;* Stores A from X to X+B
4591   E9CD             ;* 
4592   E9CD             ;* Requires:	A,B,X
4593   E9CD             ;* Destroys:	B
4594   E9CD             ;********************************************************			
4595   E9CD             write_range		begin
4595   E9CD             
4596   E9CD A7 00                           staa	$00,X
4597   E9CF 08                              inx	
4598   E9D0 5A                              decb	
4599   E9D1                             eqend
4599   E9D1             
4599   E9D1             
4599   E9D1~                            eqend
4599   E9D1~                            eqend
4599   E9D1~                            eqend
4599   E9D1             
4599   E9D1 26 FA       
4599   E9D3             
4599   E9D3~                            eqend
4599   E9D3~                            eqend
4599   E9D3             
4600   E9D3 39                          rts	
4601   E9D4             
4602   E9D4             ;*********************************************************
4603   E9D4             ;* Initialzes a new game.
4604   E9D4             ;*********************************************************			
4605   E9D4 FE D0 CC    do_game_init	ldx	gr_gamestart_ptr			;Game Start Hook
4606   E9D7 AD 00                       jsr	$00,X					;jsr to Game ROM Hook
4607   E9D9 BD EB 3F                    jsr	dump_score_queue			;Clean the score queue
4608   E9DC 8D 52                       bsr	clear_displays			;Blank all Player Displays (buffer 0)
4609   E9DE                             ;deca
4610   E9DE                             ;staa	p1_ec_b0
4611   E9DE 8D 34                       bsr	initialize_game			;Remove one Credit, init some game variables
4612   E9E0 8D 03                       bsr	add_player				;Add one Player
4613   E9E2 7E EA 70                    jmp	init_player_up
4614   E9E5             
4615   E9E5             
4616   E9E5             ;****************************************************
4617   E9E5             ;* Add Player: Increments player count and loads    
4618   E9E5             ;*             default game data for that player.  
4619   E9E5             ;*             Plays start sound and inits display.
4620   E9E5             ;*
4621   E9E5             ;* Requires:   No Variables
4622   E9E5             ;****************************************************	
4623   E9E5 BD D0 C0    add_player		jsr   gr_addplayer_event
4624   E9E8 7C 00 E8                    inc   num_players
4625   E9EB D6 E8                       ldab  num_players
4626   E9ED 8D 5C                       bsr   init_player_game
4627   E9EF                         
4628   E9EF CE D0 57                    ldx	#gr_p1_startsound			;Game ROM Table: Player Start Sounds
4629   E9F2 BD DF B0                    jsr	xplusb				;X = X + B)
4630   E9F5 A6 00                       ldaa	$00,X
4631   E9F7 BD DD 5F                    jsr	isnd_once				;Play Player Start Sound From Game ROM Table
4632   E9FA CE 01 93                    ldx	#adj_wizardspergame
4633   E9FD BD DF B6                    jsr	cmosinc_a			
4634   EA00 5D                          tstb
4635   EA01                             ifne
4635   EA01             
4635   EA01 27 FE       
4636   EA03 97 5D                           staa	p2_wizards
4637   EA05                             else
4637   EA05             
4637   EA05             
4637   EA05             
4637   EA05             
4637   EA02             
4637   EA02             
4637   EA02             
4637   EA02~                            else
4637   EA02~                            else
4637   EA02~                            else
4637   EA02~                            else
4637   EA02             
4637   EA02~                            else
4637   EA02~                            else
4637   EA02~                            else
4637   EA02~                            else
4637   EA02             
4637   EA02             
4637   EA02 04          
4637   EA05             
4637   EA05 20 FE       
4637   EA07             
4637   EA07             
4637   EA07             
4637   EA07~                            else
4637   EA07~                            else
4637   EA07~                            else
4637   EA07~                            else
4637   EA07~                            else
4637   EA07             
4637   EA07~                            else
4637   EA07~                            else
4637   EA07             
4637   EA07~                            else
4637   EA07~                            else
4637   EA07             
4638   EA07 97 5C                           staa	p1_wizards
4639   EA09                             endif
4639   EA09             
4639   EA09             
4639   EA09             
4639   EA09             
4639   EA09             
4639   EA09~                            endif
4639   EA09~                            endif
4639   EA09             
4639   EA09~                            endif
4639   EA09~                            endif
4639   EA09             
4639   EA06             
4639   EA06 02          
4639   EA07             
4639   EA07             
4639   EA07~                            endif
4639   EA07~                            endif
4639   EA07~                            endif
4639   EA07             
4639   EA09             
4639   EA09~                            endif
4639   EA09~                            endif
4639   EA09             
4640   EA09 58          ap_shft		    aslb
4641   EA0A 58                          aslb
4642   EA0B CE 00 4C                    ldx	#score_p1_b0
4643   EA0E BD DF B0                    jsr	xplusb
4644   EA11 6F 03                       clr	$03,X
4645   EA13 39                          rts
4646   EA14             
4647   EA14             ;****************************************************	
4648   EA14             ;* Sets up all gameplay variables for a new game.
4649   EA14             ;****************************************************		
4650   EA14 4F          initialize_game	clra	
4651   EA15 97 F2                       staa	flag_timer_bip			;Ball in Play Flag
4652   EA17 97 E9                       staa	player_up				;Default player 1 DOH
4653   EA19 97 E5                       staa	flag_gameover			;Game Play On
4654   EA1B 97 7A                       staa	comma_flags
4655   EA1D C6 08                       ldab	#$08
4656   EA1F BD DB 7F                    jsr	kill_threads
4657   EA22 4A                          deca	
4658   EA23 97 E8                       staa	num_players				;Subtract one Credit
4659   EA25 C6 12                       ldab	#$12
4660   EA27 CE 00 1C                    ldx	#bitflags				;Clear all bitflags
4661   EA2A 36          clear_range		psha	
4662   EA2B 4F                          clra	
4663   EA2C 8D 9F                       bsr	write_range				;Store A from X to X+B
4664   EA2E 32          to_pula_rts		pula	
4665   EA2F 39                          rts	
4666   EA30             
4667   EA30             ;******************************************************
4668   EA30             ;* Resets all player display scores to Blank 'FFFFFFFF'
4669   EA30             ;******************************************************			
4670   EA30 86 FF       clear_displays	ldaa	#$FF
4671   EA32 C6 10                       ldab	#$10
4672   EA34 CE 00 4C                    ldx	#score_p1_b0
4673   EA37 8D 94                       bsr	write_range				;Store A from X to X+B
4674   EA39 4F                          clra	
4675   EA3A C6 0C                       ldab	#$0C
4676   EA3C CE 00 5E                    ldx	#alpha_b0
4677   EA3F 8D 8C                       bsr	write_range
4678   EA41                             
4679   EA41 4F          clr_dis_masks	clra
4680   EA42 97 79                       staa	dmask_p4				;These are the Display Buffer Toggles
4681   EA44 97 78                       staa	dmask_p3
4682   EA46 97 77       clr_dis_masks12	staa	dmask_p2
4683   EA48 97 76                       staa	dmask_p1
4684   EA4A 39                          rts	
4685   EA4B             
4686   EA4B             ;**********************************************************
4687   EA4B             ;* Loads the default game data into the player number 
4688   EA4B             ;* passed in B.
4689   EA4B             ;*
4690   EA4B             ;* Requires:    	Player Number to init in B
4691   EA4B             ;* Destroys:    	X
4692   EA4B             ;* Protects:	A,B
4693   EA4B             ;**********************************************************			
4694   EA4B             init_player_game	
4695   EA4B 36                          psha	
4696   EA4C 37                          pshb	
4697   EA4D 8D 0B                       bsr	setplayerbuffer			;Set up the Pointer to the Players Buffer
4698   EA4F 8D 15                       bsr	copyplayerdata			;Copy Default Player Data into Player Buffer (X)
4699   EA51 DE B6                       ldx	temp1
4700   EA53 C6 06                       ldab	#$06
4701   EA55 8D D3                       bsr	clear_range				;Clear Temp vars temp1,temp2,temp3
4702   EA57 33                          pulb	
4703   EA58 32                          pula	
4704   EA59 39                          rts	
4705   EA5A             
4706   EA5A             ;**********************************************************
4707   EA5A             ;* Will set up X to point at the start of the player 
4708   EA5A             ;* specified in B.
4709   EA5A             ;*
4710   EA5A             ;* Requires:   	Player Number in B
4711   EA5A             ;* Destroys:	A,B
4712   EA5A             ;* Protects:	None
4713   EA5A             ;* Output:		X
4714   EA5A             ;**********************************************************			
4715   EA5A 86 24       setplayerbuffer	ldaa	#gamedata_size			;Length of Player Buffer
4716   EA5C CE 11 1C                    ldx	#p1_gamedata-gamedata_size	;Player 1 base
4717   EA5F                             begin
4717   EA5F             
4718   EA5F BD DF 62                        jsr	xplusa	;X = X + A
4719   EA62 5A                              decb	
4720   EA63                             miend
4720   EA63             
4720   EA63             
4720   EA63~                            miend
4720   EA63~                            miend
4720   EA63~                            miend
4720   EA63             
4720   EA63 2A FA       
4720   EA65             
4720   EA65~                            miend
4720   EA65~                            miend
4720   EA65             
4721   EA65 39                          rts	
4722   EA66             
4723   EA66             ;***********************************************************
4724   EA66             ;* Copies Player default data from game ROM to the player 
4725   EA66             ;* buffer specified by X.
4726   EA66             ;*
4727   EA66             ;* Requires: Player Buffer to Fill in X
4728   EA66             ;***********************************************************			
4729   EA66 DF B6       copyplayerdata	stx	temp1
4730   EA68 CE D0 76                    ldx	#gr_playerstartdata		;*** Table Pointer ***
4731   EA6B C6 1E                       ldab	#$1E
4732   EA6D 7E E0 1F                    jmp	copyblock				;Copy Block: X -> temp1 B=Length
4733   EA70             
4734   EA70             ;***********************************************************
4735   EA70             ;
4736   EA70             ;***********************************************************
4737   EA70 8D 6C       init_player_up	bsr   init_player_sys
4738   EA72 CE 00 5C                    ldx   #p1_wizards
4739   EA75 D6 E9                       ldab   player_up
4740   EA77                             ifne
4740   EA77             
4740   EA77 27 FE       
4741   EA79 CE 00 5D                        ldx   #p2_wizards
4742   EA7C                             endif
4742   EA7C             
4742   EA7C             
4742   EA7C             
4742   EA7C             
4742   EA7C             
4742   EA7C~                            endif
4742   EA7C~                            endif
4742   EA7C             
4742   EA7C~                            endif
4742   EA7C~                            endif
4742   EA7C             
4742   EA78             
4742   EA78 03          
4742   EA79             
4742   EA79             
4742   EA79~                            endif
4742   EA79~                            endif
4742   EA79~                            endif
4742   EA79             
4742   EA7C             
4742   EA7C~                            endif
4742   EA7C~                            endif
4742   EA7C             
4743   EA7C A6 00                       ldaa   $00,X
4744   EA7E                             ;ifmi
4745   EA7E                             ;	anda  #0F
4746   EA7E                             ;endif
4747   EA7E 4A                          deca
4748   EA7F A7 00                       staa	$00,X
4749   EA81 8D 7A                       bsr   resetplayerdata
4750   EA83 FE D0 CE                    ldx   gr_playerinit_ptr
4751   EA86 AD 00                       jsr   $00,X
4752   EA88                             begin
4752   EA88             
4753   EA88             player_ready		SLEEP($05)		
4753   EA88 BD DA A0    
4753   EA8B 05          
4754   EA8C                                 ;This following loop makes the current players
4755   EA8C                                 ;score flash until any score is made.
4756   EA8C 8D 36                           bsr   disp_mask
4757   EA8E 43                              coma  
4758   EA8F 94 7A                           anda  comma_flags
4759   EA91 97 7A                           staa  comma_flags
4760   EA93 8D 3C                           bsr   disp_clear
4761   EA95 DE CD                           ldx   current_thread
4762   EA97 86 07                           ldaa  #07
4763   EA99 A7 0D                           staa  threadobj_id,X
4764   EA9B CE 00 76                        ldx   #dmask_p1
4765   EA9E BD DF B0                        jsr   xplusb
4766   EAA1 A6 00                           ldaa  $00,X
4767   EAA3 8A 7F                           oraa	#$7F
4768   EAA5 A7 00                           staa  $00,X
4769   EAA7                                 SLEEP($05)
4769   EAA7 BD DA A0    
4769   EAAA 05          
4770   EAAB BD D0 BE                        jsr   gr_ballstart_event			;Game ROM Hook
4771   EAAE A6 00                           ldaa  $00,X
4772   EAB0 84 80                           anda  #$80
4773   EAB2 A7 00                           staa  $00,X
4774   EAB4 BD DC 1C                        jsr   update_commas
4775   EAB7 DE CD                           ldx   current_thread
4776   EAB9 86 04                           ldaa  #04
4777   EABB A7 0D                           staa  threadobj_id,X
4778   EABD 96 F2                           ldaa  flag_timer_bip
4779   EABF                             neend
4779   EABF             
4779   EABF             
4779   EABF~                            neend
4779   EABF~                            neend
4779   EABF~                            neend
4779   EABF             
4779   EABF 27 C7       
4779   EAC1             
4779   EAC1~                            neend
4779   EAC1~                            neend
4779   EAC1             
4780   EAC1 7E DA E8                    jmp   killthread			;Remove Current Thread from Control Stack
4781   EAC4             
4782   EAC4 D6 E9       disp_mask		ldab	player_up				;Current Player Up (0-3)
4783   EAC6 CE DC 14                    ldx	#comma_million			;Comma Tables
4784   EAC9 BD DF B0                    jsr	xplusb				;X = X + B)
4785   EACC A6 00                       ldaa	$00,X					;comma_million: 40 04 80 08
4786   EACE AA 04                       oraa	$04,X					;comma_thousand: 10 01 20 02
4787   EAD0 39                          rts	
4788   EAD1                             
4789   EAD1 DE EA       disp_clear		ldx	pscore_buf				;Start of Current Player Score Buffer
4790   EAD3 86 FF                       ldaa	#$FF
4791   EAD5 A7 08                       staa	$08,X
4792   EAD7 A7 09                       staa	$09,X
4793   EAD9 A7 0A                       staa	$0A,X
4794   EADB A7 0B                       staa	$0B,X
4795   EADD 39                          rts	
4796   EADE             
4797   EADE             ;********************************************************
4798   EADE             ;* Initializes new player. Clears tilt counter, reset 
4799   EADE             ;* bonus ball enable, enables flippers, Loads Player 
4800   EADE             ;* score buffer pointer.
4801   EADE             ;********************************************************			
4802   EADE 96 7B       init_player_sys	ldaa	switch_debounced
4803   EAE0 84 FE                       anda	#$FE
4804   EAE2 97 7B                       staa	switch_debounced				;Blank the Tilt Lines?
4805   EAE4 4F                          clra	
4806   EAE5 97 E4                       staa	flag_tilt				;Clear Tilt Flag
4807   EAE7 97 EF                       staa	num_tilt				;Clear Plumb Bob Tilts
4808   EAE9 97 E6                       staa	random_bool				;Clear Random
4809   EAEB 86 F9                       ldaa	#$F9
4810   EAED BD DB A7                    jsr	solbuf				;Turn on Solenoid $09 (Ball Lift)
4811   EAF0 96 E9                       ldaa	player_up				;Current Player Up (0-3)
4812   EAF2 48                          asla	
4813   EAF3 48                          asla	
4814   EAF4 CE 00 4C                    ldx	#score_p1_b0
4815   EAF7 BD DF 62                    jsr	xplusa				;X= P1:0038 P2:003C P3:0040 P4:0044
4816   EAFA DF EA                       stx	pscore_buf				;Pointer to Start of Score Buffer 0
4817   EAFC 39                          rts	
4818   EAFD             
4819   EAFD             ;*********************************************************
4820   EAFD             ;* Applies Game ROM mask to player game data to reset 
4821   EAFD             ;* specific bits of data. Loads the flashing lamp data
4822   EAFD             ;* Resets Player game data at start of RAM.
4823   EAFD             ;*********************************************************	
4824   EAFD CE 00 10    resetplayerdata	ldx	#lampbuffer0
4825   EB00 DF B6                       stx	temp1					;temp1 Points to Base of Lamp Matrix Data
4826   EB02 BD EA 5A                    jsr	setplayerbuffer			
4827   EB05 DF B8                       stx	temp2					;temp2 Points to Base of Player Game Data Buffer
4828   EB07 CE D0 76                    ldx	#gr_playerstartdata		;X points to base of default player data
4829   EB0A                             begin
4829   EB0A             
4830   EB0A A6 1E                           ldaa	$1E,X					;Get Game Data Reset Data
4831   EB0C 16                              tab	
4832   EB0D 53                              comb	
4833   EB0E E4 00                           andb	$00,X					;AND !B with Players Last Lamps
4834   EB10 08                              inx	
4835   EB11 DF BA                           stx	temp3					;X points to base of default player data +1
4836   EB13 DE B8                           ldx	temp2					;Player Game Data Buffer
4837   EB15 A4 00                           anda	$00,X
4838   EB17 08                              inx	
4839   EB18 DF B8                           stx	temp2
4840   EB1A 1B                              aba	
4841   EB1B DE B6                           ldx	temp1
4842   EB1D A7 00                           staa	$00,X
4843   EB1F 08                              inx	
4844   EB20 8C 00 22                        cpx	#$0022
4845   EB23                                 ifeq
4845   EB23             
4845   EB23 26 FE       
4846   EB25 CE 00 40                            ldx	#lampflashflag
4847   EB28                                 endif
4847   EB28             
4847   EB28             
4847   EB28             
4847   EB28             
4847   EB28             
4847   EB28~                                endif
4847   EB28~                                endif
4847   EB28             
4847   EB28~                                endif
4847   EB28~                                endif
4847   EB28             
4847   EB24             
4847   EB24 03          
4847   EB25             
4847   EB25             
4847   EB25~                                endif
4847   EB25~                                endif
4847   EB25~                                endif
4847   EB25             
4847   EB28             
4847   EB28~                                endif
4847   EB28~                                endif
4847   EB28             
4848   EB28 DF B6                           stx	temp1
4849   EB2A DE BA                           ldx	temp3
4850   EB2C 8C D0 94                        cpx	#gr_playerresetdata		;End of Default Player Game Data
4851   EB2F                             eqend						;Loop it!
4851   EB2F             
4851   EB2F             
4851   EB2F~                            eqend						;Loop it!
4851   EB2F~                            eqend						;Loop it!
4851   EB2F~                            eqend						;Loop it!
4851   EB2F             
4851   EB2F 26 D9       
4851   EB31             
4851   EB31~                            eqend						;Loop it!
4851   EB31~                            eqend						;Loop it!
4851   EB31             
4852   EB31 CE 00 02                    ldx	#$0002
4853   EB34 DF B6                       stx	temp1
4854   EB36 DE B8                       ldx	temp2
4855   EB38 C6 06                       ldab	#$06
4856   EB3A 8D 50                       bsr	to_copyblock			;Copy Data Block: Current Game Data 0-6 -> Player Game Data 0-6
4857   EB3C 7E E8 C0                    jmp	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary 
4858   EB3F             
4859   EB3F             ;*********************************************************************
4860   EB3F             ;* Scoring Queue: This will bring all scores up to date with current *
4861   EB3F             ;*                scores waiting to be applied.                      *
4862   EB3F             ;*********************************************************************			
4863   EB3F             dump_score_queue	
4864   EB3F CE 11 28                    ldx	#score_queue
4865   EB42 86 0F                       ldaa	#$0F
4866   EB44                             begin
4866   EB44             
4867   EB44 E6 00                           ldab	$00,X
4868   EB46                                 ifne
4868   EB46             
4868   EB46 27 FE       
4869   EB48                                     begin
4869   EB48             
4870   EB48 BD DC 61                                jsr	score_main				;Main Add Points Routine
4871   EB4B 6A 00                                   dec	$00,X
4872   EB4D                                     eqend
4872   EB4D             
4872   EB4D             
4872   EB4D~                                    eqend
4872   EB4D~                                    eqend
4872   EB4D~                                    eqend
4872   EB4D             
4872   EB4D 26 F9       
4872   EB4F             
4872   EB4F~                                    eqend
4872   EB4F~                                    eqend
4872   EB4F             
4873   EB4F                                 endif
4873   EB4F             
4873   EB4F             
4873   EB4F             
4873   EB4F             
4873   EB4F             
4873   EB4F~                                endif
4873   EB4F~                                endif
4873   EB4F             
4873   EB4F~                                endif
4873   EB4F~                                endif
4873   EB4F             
4873   EB47             
4873   EB47 07          
4873   EB48             
4873   EB48             
4873   EB48~                                endif
4873   EB48~                                endif
4873   EB48~                                endif
4873   EB48             
4873   EB4F             
4873   EB4F~                                endif
4873   EB4F~                                endif
4873   EB4F             
4874   EB4F 08                              inx	
4875   EB50 4A                              deca	
4876   EB51 85 08                           bita	#$08
4877   EB53                             eqend
4877   EB53             
4877   EB53             
4877   EB53~                            eqend
4877   EB53~                            eqend
4877   EB53~                            eqend
4877   EB53             
4877   EB53 26 EF       
4877   EB55             
4877   EB55~                            eqend
4877   EB55~                            eqend
4877   EB55             
4878   EB55 39                          rts	
4879   EB56             
4880   EB56             ;*********************************************************************
4881   EB56             ;* Main Outhole Routine: The outhole switch will jump here on closure
4882   EB56             ;*********************************************************************			
4883   EB56 8D E7       outhole_main	bsr	dump_score_queue			
4884   EB58 3F                          swi			;Start Executing Macros
4885   EB59                             SLEEP_(1)        				;Delay 1
4885   EB59             
4885   EB59 71          
4885   EB5A~                            SLEEP_(1)        				;Delay 1
4885   EB5A~                            SLEEP_(1)        				;Delay 1
4885   EB5A             
4886   EB5A                             BEQR_($FE,$01,$01,$FA)	 		;Branch if Priority #01 to $F9B0
4886   EB5A~                            BEQR_($FE,$01,$01,$FA)	 		;Branch if Priority #01 to $F9B0
4886   EB5A~                            BEQR_($FE,$01,$01,$FA)	 		;Branch if Priority #01 to $F9B0
4886   EB5A             
4886   EB5A             
4886   EB5A 5AFE010165  
4886   EB5F~                            BEQR_($FE,$01,$01,$FA)	 		;Branch if Priority #01 to $F9B0
4886   EB5F~                            BEQR_($FE,$01,$01,$FA)	 		;Branch if Priority #01 to $F9B0
4886   EB5F             
4886   EB5F             
4887   EB5F                             REMTHREADS_($0A,$00)			;Reset Threads Based on Priority #0A	
4887   EB5F 55 0A 00    
4888   EB62                             CPUX_ 					;Resume CPU Execution
4888   EB62 04          
4889   EB63 FE D0 D0                    ldx  	gr_outhole_ptr			;Game ROM: Pointer
4890   EB66 AD 00                       jsr  	$00,X  				;JSR to GameROM
4891   EB68 7F 00 F2                    clr  	flag_timer_bip			;Ball in Play Flag (Stop Timer)
4892   EB6B D6 E9                       ldab  player_up     			;Current Player Up (0-3)
4893   EB6D 8D 05                       bsr  	saveplayertobuffer    		;Save Player Data to Buffer
4894   EB6F 8D 1E                       bsr  	balladjust				;Do Outhole Processing (EB, Bonus Ball)
4895   EB71 7E EA 70                    jmp  	init_player_up			;Init New Player Up
4896   EB74             
4897   EB74             ;*********************************************************************
4898   EB74             ;* Save Player Data: This will save lamp and game specific data to   
4899   EB74             ;*                   the holding area so information can carrry from 
4900   EB74             ;*                   ball to ball.            
4901   EB74             ;*********************************************************************
4902   EB74             saveplayertobuffer	
4903   EB74 BD EA 5A                    jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
4904   EB77 DF B6                       stx	temp1
4905   EB79 CE 00 10                    ldx	#lampbuffer0
4906   EB7C C6 12                       ldab	#$12
4907   EB7E 8D 0C                       bsr	to_copyblock			;Save current lamp settings
4908   EB80 CE 00 40                    ldx	#lampflashflag
4909   EB83 C6 0C                       ldab	#$0C
4910   EB85 8D 05                       bsr	to_copyblock			;Save Flashing lamps too!
4911   EB87 CE 00 02                    ldx	#$0002
4912   EB8A C6 06                       ldab	#$06
4913   EB8C 7E E0 1F    to_copyblock	jmp	copyblock				;Finally, save player game data.
4914   EB8F             
4915   EB8F             ;*********************************************************************
4916   EB8F             ;* Ball Update: This will increment to next player if there is one   
4917   EB8F             ;*              or will increment to next ball. If we are on the last
4918   EB8F             ;*              ball then it jumps to the gameover handler.
4919   EB8F             ;*********************************************************************
4920   EB8F CE 01 2A    balladjust		ldx   #aud_totalballs
4921   EB92 BD E9 0B                    jsr   ptrx_plus_1	 		;Add 1 to data in X
4922   EB95 5F          badj_loop		clrb  
4923   EB96 96 E8                       ldaa   num_players
4924   EB98                             ifne
4924   EB98             
4924   EB98 27 FE       
4925   EB9A 96 E9                           ldaa   player_up
4926   EB9C                                 ifeq
4926   EB9C             
4926   EB9C 26 FE       
4927   EB9E 5C                                  incb
4928   EB9F                                 endif
4928   EB9F             
4928   EB9F             
4928   EB9F             
4928   EB9F             
4928   EB9F             
4928   EB9F~                                endif
4928   EB9F~                                endif
4928   EB9F             
4928   EB9F~                                endif
4928   EB9F~                                endif
4928   EB9F             
4928   EB9D             
4928   EB9D 01          
4928   EB9E             
4928   EB9E             
4928   EB9E~                                endif
4928   EB9E~                                endif
4928   EB9E~                                endif
4928   EB9E             
4928   EB9F             
4928   EB9F~                                endif
4928   EB9F~                                endif
4928   EB9F             
4929   EB9F D7 E9                           stab   player_up
4930   EBA1                                 ifeq
4930   EBA1             
4930   EBA1 26 FE       
4931   EBA3 8D 16                               bsr   chk_p1
4932   EBA5 27 05                               beq   badj_p2
4933   EBA7 39          badj_rts				rts 
4934   EBA8                                 endif
4934   EBA8             
4934   EBA8             
4934   EBA8             
4934   EBA8             
4934   EBA8             
4934   EBA8~                                endif
4934   EBA8~                                endif
4934   EBA8             
4934   EBA8~                                endif
4934   EBA8~                                endif
4934   EBA8             
4934   EBA2             
4934   EBA2 05          
4934   EBA3             
4934   EBA3             
4934   EBA3~                                endif
4934   EBA3~                                endif
4934   EBA3~                                endif
4934   EBA3             
4934   EBA8             
4934   EBA8~                                endif
4934   EBA8~                                endif
4934   EBA8             
4935   EBA8 96 5D                           ldaa   p2_wizards
4936   EBAA                                 ;cmpa  #$00
4937   EBAA 26 FB                           bne   badj_rts
4938   EBAC 8D 0D       badj_p2		        bsr   chk_p1
4939   EBAE 26 E5                           bne   badj_loop
4940   EBB0 91 5D                           cmpa  p2_wizards
4941   EBB2 26 E1                           bne   badj_loop
4942   EBB4                             else
4942   EBB4             
4942   EBB4             
4942   EBB4             
4942   EBB4             
4942   EB99             
4942   EB99             
4942   EB99             
4942   EB99~                            else
4942   EB99~                            else
4942   EB99~                            else
4942   EB99~                            else
4942   EB99             
4942   EB99~                            else
4942   EB99~                            else
4942   EB99~                            else
4942   EB99~                            else
4942   EB99             
4942   EB99             
4942   EB99 1C          
4942   EBB4             
4942   EBB4 20 FE       
4942   EBB6             
4942   EBB6             
4942   EBB6             
4942   EBB6~                            else
4942   EBB6~                            else
4942   EBB6~                            else
4942   EBB6~                            else
4942   EBB6~                            else
4942   EBB6             
4942   EBB6~                            else
4942   EBB6~                            else
4942   EBB6             
4942   EBB6~                            else
4942   EBB6~                            else
4942   EBB6             
4943   EBB6 8D 03                           bsr   chk_p1
4944   EBB8                                 ifne
4944   EBB8             
4944   EBB8 27 FE       
4945   EBBA 39                                  rts 
4946   EBBB 96 5C       chk_p1			        ldaa   p1_wizards
4947   EBBD                                     ;cmpa  #$F0
4948   EBBD 39                                  rts   
4949   EBBE CE 00 54    show_hstd				ldx   #score_p1_b1
4950   EBC1 DF B6                               stx   temp1
4951   EBC3 86 02                               ldaa   #02
4952   EBC5                                     begin
4952   EBC5             
4953   EBC5 C6 04                                   ldab   #04
4954   EBC7 CE 01 66                                ldx   #aud_currenthstd
4955   EBCA BD F0 C3                                jsr   block_copy
4956   EBCD 4A                                      deca  
4957   EBCE                                     eqend
4957   EBCE             
4957   EBCE             
4957   EBCE~                                    eqend
4957   EBCE~                                    eqend
4957   EBCE~                                    eqend
4957   EBCE             
4957   EBCE 26 F5       
4957   EBD0             
4957   EBD0~                                    eqend
4957   EBD0~                                    eqend
4957   EBD0             
4958   EBD0 39                                  rts  				;all done, return
4959   EBD1                                 endif
4959   EBD1             
4959   EBD1             
4959   EBD1             
4959   EBD1             
4959   EBD1             
4959   EBD1~                                endif
4959   EBD1~                                endif
4959   EBD1             
4959   EBD1~                                endif
4959   EBD1~                                endif
4959   EBD1             
4959   EBB9             
4959   EBB9 17          
4959   EBBA             
4959   EBBA             
4959   EBBA~                                endif
4959   EBBA~                                endif
4959   EBBA~                                endif
4959   EBBA             
4959   EBD1             
4959   EBD1~                                endif
4959   EBD1~                                endif
4959   EBD1             
4960   EBD1                             endif
4960   EBD1             
4960   EBD1             
4960   EBD1             
4960   EBD1             
4960   EBD1             
4960   EBD1~                            endif
4960   EBD1~                            endif
4960   EBD1             
4960   EBD1~                            endif
4960   EBD1~                            endif
4960   EBD1             
4960   EBB5             
4960   EBB5 1B          
4960   EBB6             
4960   EBB6             
4960   EBB6~                            endif
4960   EBB6~                            endif
4960   EBB6~                            endif
4960   EBB6             
4960   EBD1             
4960   EBD1~                            endif
4960   EBD1~                            endif
4960   EBD1             
4961   EBD1                             ;fall through on game over
4962   EBD1 BD D0 C2    gameover		jsr   gr_gameover_event
4963   EBD4 CE 00 40                    ldx   #lampflashflag
4964   EBD7 C6 0C                       ldab  #$0C
4965   EBD9 BD EA 2A                    jsr   clear_range
4966   EBDC 20 29                       bra   check_hstd
4967   EBDE             
4968   EBDE B6 D0 5B    endgame		    ldaa  gr_gameoversound
4969   EBE1 BD DD 5F                    jsr   isnd_once
4970   EBE4                             ;fall through to init
4971   EBE4             
4972   EBE4 B6 D0 5D    powerup_init	ldaa	gr_gameover_lamp			;Game ROM: Game Over Lamp Location
4973   EBE7 3F                          swi	
4974   EBE8                             SOL_($09)				;Turn Off Solenoid: Shooter/BallLift Disabled
4974   EBE8 31 09       
4975   EBEA                             BITFLP_($00) 			;Flash Lamp: Lamp Locatation at RAM $00
4975   EBEA             
4975   EBEA 17 00       
4976   EBEC                             CPUX_ 				;Resume CPU execution
4976   EBEC 04          
4977   EBED 7C 00 E5    set_gameover	inc	flag_gameover			;Set Game Over
4978   EBF0 FE D0 5F                    ldx	gr_gameoverthread_ptr		;Game ROM: Init Pointer
4979   EBF3 BD DB 48                    jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
4980   EBF6 BD EA 41                    jsr	clr_dis_masks		
4981   EBF9 7E DA E8                    jmp	killthread				;Remove Current Thread from VM
4982   EBFC             
4983   EBFC             
4984   EBFC             get_aud_baseawd
4985   EBFC CE 01 46                    ldx   #aud_game7
4986   EBFF 96 E9                       ldaa   player_up
4987   EC01                             ifne   
4987   EC01             
4987   EC01 27 FE       
4988   EC03 CE 01 48                        ldx   #aud_game7+2
4989   EC06                             endif
4989   EC06             
4989   EC06             
4989   EC06             
4989   EC06             
4989   EC06             
4989   EC06~                            endif
4989   EC06~                            endif
4989   EC06             
4989   EC06~                            endif
4989   EC06~                            endif
4989   EC06             
4989   EC02             
4989   EC02 03          
4989   EC03             
4989   EC03             
4989   EC03~                            endif
4989   EC03~                            endif
4989   EC03~                            endif
4989   EC03             
4989   EC06             
4989   EC06~                            endif
4989   EC06~                            endif
4989   EC06             
4990   EC06 39                          rts   
4991   EC07             
4992   EC07 CE 01 81    check_hstd		ldx	#adj_backuphstd			;CMOS: Backup HSTD
4993   EC0A BD DF B6                    jsr	cmosinc_a				;CMOS,X++ -> A
4994   EC0D                             ifne						;No award if backup HSTD is 0,000,000
4994   EC0D             
4994   EC0D 27 FE       
4995   EC0F 7F 00 BD                        clr	sys_temp2
4996   EC12 C6 02                           ldab	#$02
4997   EC14 D7 BC                           stab	sys_temp1
4998   EC16 CE 00 49                        ldx	#score_p1_b0-3			;Start High and work down low on the digits
4999   EC19 DF C0                           stx	sys_temp5
5000   EC1B                                 begin
5000   EC1B             
5001   EC1B C6 04                               ldab	#$04
5002   EC1D D7 C4                               stab	sys_temp_w3				;Number of score Bytes Per Player
5003   EC1F CE 01 66                            ldx	#aud_currenthstd			;CMOS: Current HSTD
5004   EC22                                     begin
5004   EC22             
5005   EC22 BD DF C6                                jsr	cmosinc_b				;CMOS,X++ -> B
5006   EC25 DF C2                                   stx	sys_temp_w2
5007   EC27 DE C0                                   ldx	sys_temp5
5008   EC29 BD DC E7                                jsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
5009   EC2C 11                                      cba	
5010   EC2D 22 2B                                   bhi	update_hstd				;HSTD beat by this digit, adjust HSTD so we dont have multiple awards by each player beating HSTD.
5011   EC2F 26 48                                   bne	hstd_adddig				;$A4=$A4+$A8
5012   EC31 08                                      inx						;Next Digit
5013   EC32 DF C0                                   stx	sys_temp5				;Store it
5014   EC34 DE C2                                   ldx	sys_temp_w2				;Next HSDT Digit (pointer)
5015   EC36 7A 00 C4                                dec	sys_temp_w3				;Goto Next Set of Digits
5016   EC39                                     eqend						;Loop for all (4)2 digits
5016   EC39             
5016   EC39             
5016   EC39~                                    eqend						;Loop for all (4)2 digits
5016   EC39~                                    eqend						;Loop for all (4)2 digits
5016   EC39~                                    eqend						;Loop for all (4)2 digits
5016   EC39             
5016   EC39 26 E7       
5016   EC3B             
5016   EC3B~                                    eqend						;Loop for all (4)2 digits
5016   EC3B~                                    eqend						;Loop for all (4)2 digits
5016   EC3B             
5017   EC3B 7A 00 BC    hstd_nextp			    dec	sys_temp1				;Goto Next Player
5018   EC3E                                 eqend						;Loop for all 4 Players
5018   EC3E             
5018   EC3E             
5018   EC3E~                                eqend						;Loop for all 4 Players
5018   EC3E~                                eqend						;Loop for all 4 Players
5018   EC3E~                                eqend						;Loop for all 4 Players
5018   EC3E             
5018   EC3E 26 DB       
5018   EC40             
5018   EC40~                                eqend						;Loop for all 4 Players
5018   EC40~                                eqend						;Loop for all 4 Players
5018   EC40             
5019   EC40 96 BD                           ldaa	sys_temp2
5020   EC42                                 ifne
5020   EC42             
5020   EC42 27 FE       
5021   EC44 FE D0 64                            ldx	gr_highscore_ptr			;Game ROM Data: High Score Hook
5022   EC47 6E 00                               jmp   $00,X
5023   EC49 B6 01 66    set_hstd				ldaa	aud_currenthstd			;HSTD High Digit
5024   EC4C 84 0F                               anda	#$0F
5025   EC4E                                     ifne					;Branch if Score is under 10 million
5025   EC4E             
5025   EC4E 27 FE       
5026   EC50 86 99                                   ldaa	#$99
5027   EC52 8D 36                                   bsr	fill_hstd_digits			;Set HSTD to 9,999,999
5028   EC54 7F 01 66                                clr	aud_currenthstd			;Clear 10 Million Digit
5029   EC57                                     endif
5029   EC57             
5029   EC57             
5029   EC57             
5029   EC57             
5029   EC57             
5029   EC57~                                    endif
5029   EC57~                                    endif
5029   EC57             
5029   EC57~                                    endif
5029   EC57~                                    endif
5029   EC57             
5029   EC4F             
5029   EC4F 07          
5029   EC50             
5029   EC50             
5029   EC50~                                    endif
5029   EC50~                                    endif
5029   EC50~                                    endif
5029   EC50             
5029   EC57             
5029   EC57~                                    endif
5029   EC57~                                    endif
5029   EC57             
5030   EC57                                 endif
5030   EC57             
5030   EC57             
5030   EC57             
5030   EC57             
5030   EC57             
5030   EC57~                                endif
5030   EC57~                                endif
5030   EC57             
5030   EC57~                                endif
5030   EC57~                                endif
5030   EC57             
5030   EC43             
5030   EC43 13          
5030   EC44             
5030   EC44             
5030   EC44~                                endif
5030   EC44~                                endif
5030   EC44~                                endif
5030   EC44             
5030   EC57             
5030   EC57~                                endif
5030   EC57~                                endif
5030   EC57             
5031   EC57                             endif
5031   EC57             
5031   EC57             
5031   EC57             
5031   EC57             
5031   EC57             
5031   EC57~                            endif
5031   EC57~                            endif
5031   EC57             
5031   EC57~                            endif
5031   EC57~                            endif
5031   EC57             
5031   EC0E             
5031   EC0E 48          
5031   EC0F             
5031   EC0F             
5031   EC0F~                            endif
5031   EC0F~                            endif
5031   EC0F~                            endif
5031   EC0F             
5031   EC57             
5031   EC57~                            endif
5031   EC57~                            endif
5031   EC57             
5032   EC57 7E EB DE                    jmp   endgame
5033   EC5A             
5034   EC5A CE 01 66    update_hstd		ldx	#aud_currenthstd			;Current HSTD
5035   EC5D 96 BC                       ldaa	sys_temp1
5036   EC5F 97 BD                       staa	sys_temp2
5037   EC61 DF B6                       stx	temp1
5038   EC63 8D 18                       bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
5039   EC65 C6 04                       ldab	#$04
5040   EC67 09                          dex	
5041   EC68 BD E0 47                    jsr	copyblock2				;Transfer Data Block at X to temp1, Length B
5042   EC6B 7C 01 66                    inc	aud_currenthstd			;Adjust HSTD to new player score
5043   EC6E B6 01 67                    ldaa	aud_currenthstd+1
5044   EC71 4C                          inca	
5045   EC72 84 0F                       anda	#$0F
5046   EC74 26 C5                       bne	hstd_nextp				;Go Check Next Player Score
5047   EC76 7F 01 67                    clr	aud_currenthstd+1
5048   EC79 8D 02       hstd_adddig		bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
5049   EC7B 20 BE                       bra	hstd_nextp				;Go Check Next Player Score
5050   EC7D             			
5051   EC7D             ;*************************************************
5052   EC7D             ;* Add LSB of sys_temp_w3 to sys_temp5
5053   EC7D             ;*************************************************
5054   EC7D DE C0       wordplusbyte	ldx	sys_temp5
5055   EC7F 96 C4                       ldaa	sys_temp_w3
5056   EC81 7F 00 C4                    clr	sys_temp_w3
5057   EC84 BD DF 62                    jsr	xplusa				;X = X + A
5058   EC87 DF C0                       stx	sys_temp5
5059   EC89 39          to_rts1		    rts	
5060   EC8A             			
5061   EC8A             ;**************************************************
5062   EC8A             ;* This routine will fill the value of A into all
5063   EC8A             ;* high score digit data.
5064   EC8A             ;**************************************************
5065   EC8A             fill_hstd_digits	
5066   EC8A CE 01 66                    ldx	#aud_currenthstd			;CMOS: Current HSTD
5067   EC8D C6 04                       ldab	#$04
5068   EC8F                             begin
5068   EC8F             
5069   EC8F BD E0 12                        jsr	a_cmosinc				;A -> CMOS,X++)
5070   EC92 5A                              decb	
5071   EC93                             eqend
5071   EC93             
5071   EC93             
5071   EC93~                            eqend
5071   EC93~                            eqend
5071   EC93~                            eqend
5071   EC93             
5071   EC93 26 FA       
5071   EC95             
5071   EC95~                            eqend
5071   EC95~                            eqend
5071   EC95             
5072   EC95 39                          rts
5073   EC96             				
5074   EC96             send_sound		begin
5074   EC96             
5075   EC96                                 SLEEP($02)
5075   EC96 BD DA A0    
5075   EC99 02          
5076   EC9A 96 DD                           ldaa  sys_soundflags			
5077   EC9C                             eqend
5077   EC9C             
5077   EC9C             
5077   EC9C~                            eqend
5077   EC9C~                            eqend
5077   EC9C~                            eqend
5077   EC9C             
5077   EC9C 26 F8       
5077   EC9E             
5077   EC9E~                            eqend
5077   EC9E~                            eqend
5077   EC9E             
5078   EC9E 39                          rts 
5079   EC9F             
5080   EC9F             ;******************************************************
5081   EC9F             ;* Get Random: Will pull various system variables and
5082   EC9F             ;*             calculate a pseudo-random number.
5083   EC9F             ;******************************************************			
5084   EC9F 37          get_random		pshb	
5085   ECA0 96 F3                       ldaa	randomseed				;This is changed by Switch Closures
5086   ECA2 16                          tab	
5087   ECA3 56                          rorb	
5088   ECA4 56                          rorb	
5089   ECA5 97 B6                       staa	temp1					;Use some Temp variables for data
5090   ECA7 D8 B6                       eorb	temp1
5091   ECA9 49                          rola	
5092   ECAA 9B A3                       adda	irq_counter					;Throw in some switch matrix stuff
5093   ECAC 97 F3                       staa	randomseed
5094   ECAE 33                          pulb	
5095   ECAF 39          to_rts2		    rts
5096   ECB0             
5097   ECB0             ;********************************************************
5098   ECB0             ;* Credit Button Press: Called twice for 2-player game
5099   ECB0             ;********************************************************
5100   ECB0 CE 01 AB    credit_button	ldx	#adj_max_credits			;CMOS: Max. Credits
5101   ECB3 BD DF C6                    jsr	cmosinc_b				;CMOS,X++ -> B
5102   ECB6 CE 01 6E                    ldx	#aud_currentcredits		;CMOS: Current Credits
5103   ECB9 BD EE D1                    jsr	cmos_a				;CMOS, X -> A )
5104   ECBC 26 03                       bne	has_credit
5105   ECBE 5D                          tstb						;No credits, check for free play
5106   ECBF                             ifeq						;No Free Play, get outta here.
5106   ECBF             
5106   ECBF 26 FE       
5107   ECC1 D6 E5       has_credit			ldab	flag_gameover			;Has valid credit or freeplay, is Game Over?
5108   ECC3 26 0F                           bne	start_new_game			;No, goto Start New Game
5109   ECC5 D6 E8                           ldab	num_players				;Current # of Players
5110   ECC7 F1 D0 4E                        cmpb	gr_numplayers			;Max # of Players (Game ROM data)
5111   ECCA                                 ifcs						;Already max players, outta here.
5111   ECCA             
5111   ECCA 24 FE       
5112   ECCC 8D 0B                               bsr	lesscredit				;Subtract a credit
5113   ECCE BD E9 E5                            jsr	add_player				;Add a player.
5114   ECD1                                 endif
5114   ECD1             
5114   ECD1             
5114   ECD1             
5114   ECD1             
5114   ECD1             
5114   ECD1~                                endif
5114   ECD1~                                endif
5114   ECD1             
5114   ECD1~                                endif
5114   ECD1~                                endif
5114   ECD1             
5114   ECCB             
5114   ECCB 05          
5114   ECCC             
5114   ECCC             
5114   ECCC~                                endif
5114   ECCC~                                endif
5114   ECCC~                                endif
5114   ECCC             
5114   ECD1             
5114   ECD1~                                endif
5114   ECD1~                                endif
5114   ECD1             
5115   ECD1                             endif
5115   ECD1             
5115   ECD1             
5115   ECD1             
5115   ECD1             
5115   ECD1             
5115   ECD1~                            endif
5115   ECD1~                            endif
5115   ECD1             
5115   ECD1~                            endif
5115   ECD1~                            endif
5115   ECD1             
5115   ECC0             
5115   ECC0 10          
5115   ECC1             
5115   ECC1             
5115   ECC1~                            endif
5115   ECC1~                            endif
5115   ECC1~                            endif
5115   ECC1             
5115   ECD1             
5115   ECD1~                            endif
5115   ECD1~                            endif
5115   ECD1             
5116   ECD1 7E DA E8                    jmp	killthread				;Remove Current Thread from VM
5117   ECD4             
5118   ECD4             ;*********************************************************
5119   ECD4             ;* Resets Games and Starts Anew
5120   ECD4             ;*********************************************************
5121   ECD4 8D 03       start_new_game	bsr	lesscredit				;Subtract a credit
5122   ECD6 7E E9 D4                    jmp	do_game_init			;Init Player 1
5123   ECD9             
5124   ECD9             ;*********************************************************
5125   ECD9             ;* Removes a credit and adjusts coin lockout and credit 
5126   ECD9             ;* lamp appropriately. Also updates audits.
5127   ECD9             ;*
5128   ECD9             ;* 	Current Credits in A.
5129   ECD9             ;*********************************************************
5130   ECD9 4D          lesscredit		tsta	
5131   ECDA                             ifne						;Is it Zero?
5131   ECDA             
5131   ECDA 27 FE       
5132   ECDC 8B 99                           adda	#$99					;Subtract 1 credit
5133   ECDE 19                              daa						;dont' forget to adjust
5134   ECDF BD E0 12                        jsr	a_cmosinc				;A -> CMOS,X++)
5135   ECE2 B6 11 9A                        ldaa	current_credits				;Current Credits
5136   ECE5 8B 99                           adda	#$99					;Subtract 1
5137   ECE7 19                              daa	
5138   ECE8 B7 11 9A                        staa	current_credits				;Store Credits
5139   ECEB                             endif
5139   ECEB             
5139   ECEB             
5139   ECEB             
5139   ECEB             
5139   ECEB             
5139   ECEB~                            endif
5139   ECEB~                            endif
5139   ECEB             
5139   ECEB~                            endif
5139   ECEB~                            endif
5139   ECEB             
5139   ECDB             
5139   ECDB 0F          
5139   ECDC             
5139   ECDC             
5139   ECDC~                            endif
5139   ECDC~                            endif
5139   ECDC~                            endif
5139   ECDC             
5139   ECEB             
5139   ECEB~                            endif
5139   ECEB~                            endif
5139   ECEB             
5140   ECEB BD E8 C0                    jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
5141   ECEE BD E9 B7                    jsr	clr_bonus_coins			;Reset Any Bonus Coins... too bad!
5142   ECF1 CE 01 1E                    ldx	#aud_totalcredits			;Audit: Total Credits
5143   ECF4 7E E9 0B                    jmp	ptrx_plus_1				;Add 1 to data at X
5144   ECF7             
5145   ECF7             ;*********************************************************
5146   ECF7             ;* Tilt Contacts
5147   ECF7             ;*********************************************************			
5148   ECF7 7C 00 EF    tilt_warning	inc	num_tilt				;Add 1 Tilt
5149   ECFA B6 01 92                    ldaa	adj_maxplumbbobtilts+1		;ADJ: LSD Max Plumb Bob Tilts
5150   ECFD 84 0F                       anda	#$0F
5151   ECFF 91 EF                       cmpa	num_tilt				;Current # of Plumb Bob Tilts
5152   ED01 22 AC                       bhi	to_rts2				;Not enough warnings yet.. Leave now!
5153   ED03 B6 D0 5E    do_tilt		    ldaa	gr_tilt_lamp			;Game ROM: Tilt Lamp Location
5154   ED06 97 E4                       staa	flag_tilt				;Tilt Flag
5155   ED08 3F                          swi
5156   ED09                             ;BITONP_($00) 		;Turn on Tilt Lamp - but we don't have a tilt lamp in SB
5157   ED09                             REMTHREADS_($0C,$00)	;.db $55,$0C,$00  	;Get Rid of non-tilt threads
5157   ED09 55 0C 00    
5158   ED0C                             CPUX_				;Return to Program Execution 
5158   ED0C 04          
5159   ED0D 39                          rts
5160   ED0E             
5161   ED0E             
5162   ED0E             ;***********************************************************
5163   ED0E             ;* Self Test Routines Begin Here, first some data tables
5164   ED0E             ;***********************************************************
5165   ED0E             ;* Define our test entry points
5166   ED0E             ;***********************************************
5167   ED0E EE F5       testdata		.dw st_display
5168   ED10 EF 28                       .dw st_sound
5169   ED12 EF 53                       .dw st_lamp
5170   ED14 EF 92                       .dw st_solenoid
5171   ED16 EF CE                       .dw st_switch
5172   ED18             
5173   ED18             ;***********************************************
5174   ED18             ;* This table defines which routines
5175   ED18             ;* handel the various adjustment displays.
5176   ED18             ;***********************************************			
5177   ED18 00          testlists		.db $00		    ;Function 00:    Game Identification
5178   ED19 EE 3C                       .dw fn_gameid	;$FD,$23
5179   ED1B 01                          .db $01		    ;Function 01-11: System Audits
5180   ED1C EE 49                       .dw fn_sysaud	;$FD,$30
5181   ED1E 0C                          .db $0C		    ;Function 12:    Current HSTD
5182   ED1F EE 5C                       .dw fn_hstd		;$FD,$A9
5183   ED21 0D                          .db $0D		    ;Function 13-17: Backup HSTD and Replays
5184   ED22 EE 64                       .dw fn_replay	;$FD,$B1
5185   ED24 12                          .db $12		    ;Function 18:    Max Credits
5186   ED25 EE D8                       .dw fn_credit	;$FE,$26
5187   ED27 13                          .db $13		    ;Function 19:    Pricing Control
5188   ED28 EE A2                       .dw fn_pricec	;$FD,$EF
5189   ED2A 14                          .db $14		    ;Function 20-25: Pricing Settings
5190   ED2B EE BC                       .dw fn_prices	;$FE,$09
5191   ED2D 1A                          .db $1A		    ;Function 26-41: System and Game Adjustments
5192   ED2E EE E5                       .dw fn_adj		;$FE,$33
5193   ED30 2A                          .db $2A		    ;Function 42-49: Game Audits
5194   ED31 EE 47                       .dw fn_gameaud	;$FD,$2E
5195   ED33 32                          .db $32		    ;Function 50:    Command Mode
5196   ED34 EE F0                       .dw fn_command	;$FE,$3E
5197   ED36 33                          .db $33
5198   ED37             
5199   ED37             ;************************************************
5200   ED37             ;* Main Self-Test Routine
5201   ED37             ;************************************************
5202   ED37             test_number     =	$000e			;RAM Location to store where we are...
5203   ED37             test_lamptimer  =	$000f			;Timer for Lamp test loop
5204   ED37             
5205   ED37 8D 51       selftest_entry	bsr	check_adv				;Advance: - if Triggered
5206   ED39                             ifpl
5206   ED39             
5206   ED39 2B FE       
5207   ED3B 7E DA E8                        jmp	killthread				;Kill Current Thread
5208   ED3E                             endif
5208   ED3E             
5208   ED3E             
5208   ED3E             
5208   ED3E             
5208   ED3E             
5208   ED3E~                            endif
5208   ED3E~                            endif
5208   ED3E             
5208   ED3E~                            endif
5208   ED3E~                            endif
5208   ED3E             
5208   ED3A             
5208   ED3A 03          
5208   ED3B             
5208   ED3B             
5208   ED3B~                            endif
5208   ED3B~                            endif
5208   ED3B~                            endif
5208   ED3B             
5208   ED3E             
5208   ED3E~                            endif
5208   ED3E~                            endif
5208   ED3E             
5209   ED3E 86 09                       ldaa	#09
5210   ED40 BD DB A7                    jsr	solbuf
5211   ED43 8D 5B                       bsr	st_init				;Set up self test
5212   ED45 8D 4E                       bsr	check_aumd				;AUMD: + if Manual-Down
5213   ED47 2B 77                       bmi	do_audadj				;Auto-Up, go do audits and adjustments instead
5214   ED49 4F                          clra	
5215   ED4A 7F 00 0E    st_diagnostics	clr	test_number				;Start at 0
5216   ED4D CE ED 0E                    ldx	#testdata				;Macro Pointer
5217   ED50 36                          psha	
5218   ED51 86 09                       ldaa	#09
5219   ED53 BD DB A7                    jsr	solbuf
5220   ED56 32                          pula
5221   ED57 36                          psha
5222   ED58 BD E6 4C                    jsr	gettabledata_b			;Load up the pointer to our test routine in X
5223   ED5B 32                          pula	
5224   ED5C 16                          tab	
5225   ED5D 5A                          decb						;Adjust back down to where it was before table lookup incremented it
5226   ED5E D7 50                       stab	score_p2_b0				;Show the test number in display
5227   ED60 BD DB 48                    jsr	newthread_06			;Start a new thread with our test routine
5228   ED63                             SLEEP($10)	
5228   ED63 BD DA A0    
5228   ED66 10          
5229   ED67                             ;This is the Advance button handler, it runs as a seperate thread to the test routine
5230   ED67                             begin
5230   ED67             
5231   ED67                                 begin
5231   ED67             
5232   ED67 8D 21                               bsr	check_adv			;Advance: Stay here forever until pressed			   
5233   ED69                                 miend
5233   ED69             
5233   ED69             
5233   ED69~                                miend
5233   ED69~                                miend
5233   ED69~                                miend
5233   ED69             
5233   ED69 2A FC       
5233   ED6B             
5233   ED6B~                                miend
5233   ED6B~                                miend
5233   ED6B             
5234   ED6B 8D 28                           bsr	check_aumd				;AUMD: + if Manual-Down
5235   ED6D 2B 40                           bmi	st_nexttest				;Do next test...
5236   ED6F D7 0E                           stab	test_number
5237   ED71                                 begin
5237   ED71             
5238   ED71 8D 17                               bsr	check_adv			;Advance: Stay here forever until released
5239   ED73                                 plend
5239   ED73             
5239   ED73             
5239   ED73~                                plend
5239   ED73~                                plend
5239   ED73~                                plend
5239   ED73             
5239   ED73 2B FC       
5239   ED75             
5239   ED75~                                plend
5239   ED75~                                plend
5239   ED75             
5240   ED75                             loopend
5240   ED75             
5240   ED75             
5240   ED75~                            loopend
5240   ED75~                            loopend
5240   ED75~                            loopend
5240   ED75             
5240   ED75 20 F0       
5240   ED77             
5240   ED77~                            loopend
5240   ED77~                            loopend
5240   ED77             
5241   ED77             
5242   ED77             ;*******************************************************
5243   ED77             ;*
5244   ED77             ;*******************************************************			
5245   ED77 36          do_aumd		    psha	
5246   ED78 96 E7                       ldaa	flags_selftest
5247   ED7A                             ifpl
5247   ED7A             
5247   ED7A 2B FE       
5248   ED7C 8D 17                           bsr	check_aumd					;AUMD: + if Manual-Down
5249   ED7E                                 ifpl
5249   ED7E             
5249   ED7E 2B FE       
5250   ED80 96 0E                               ldaa	test_number
5251   ED82                                     ifne
5251   ED82             
5251   ED82 27 FE       
5252   ED84 4F                                      clra	
5253   ED85 97 0E                                   staa	test_number
5254   ED87 4A                                      deca	
5255   ED88                                     endif
5255   ED88             
5255   ED88             
5255   ED88             
5255   ED88             
5255   ED88             
5255   ED88~                                    endif
5255   ED88~                                    endif
5255   ED88             
5255   ED88~                                    endif
5255   ED88~                                    endif
5255   ED88             
5255   ED83             
5255   ED83 04          
5255   ED84             
5255   ED84             
5255   ED84~                                    endif
5255   ED84~                                    endif
5255   ED84~                                    endif
5255   ED84             
5255   ED88             
5255   ED88~                                    endif
5255   ED88~                                    endif
5255   ED88             
5256   ED88                                 endif
5256   ED88             
5256   ED88             
5256   ED88             
5256   ED88             
5256   ED88             
5256   ED88~                                endif
5256   ED88~                                endif
5256   ED88             
5256   ED88~                                endif
5256   ED88~                                endif
5256   ED88             
5256   ED7F             
5256   ED7F 08          
5256   ED80             
5256   ED80             
5256   ED80~                                endif
5256   ED80~                                endif
5256   ED80~                                endif
5256   ED80             
5256   ED88             
5256   ED88~                                endif
5256   ED88~                                endif
5256   ED88             
5257   ED88                             endif
5257   ED88             
5257   ED88             
5257   ED88             
5257   ED88             
5257   ED88             
5257   ED88~                            endif
5257   ED88~                            endif
5257   ED88             
5257   ED88~                            endif
5257   ED88~                            endif
5257   ED88             
5257   ED7B             
5257   ED7B 0C          
5257   ED7C             
5257   ED7C             
5257   ED7C~                            endif
5257   ED7C~                            endif
5257   ED7C~                            endif
5257   ED7C             
5257   ED88             
5257   ED88~                            endif
5257   ED88~                            endif
5257   ED88             
5258   ED88 32                          pula	
5259   ED89 39                          rts
5260   ED8A             
5261   ED8A             ;*********************************************************
5262   ED8A             ;* This will check the state of the advance switch and
5263   ED8A             ;* return the control register results
5264   ED8A             ;*********************************************************				
5265   ED8A F6 28 00    check_adv		ldab	pia_disp_digit_data		;Dummy read to clear previous results
5266   ED8D                             SLEEP($02)
5266   ED8D BD DA A0    
5266   ED90 02          
5267   ED91 F6 28 01                    ldab	pia_disp_digit_ctrl
5268   ED94 39                          rts
5269   ED95             
5270   ED95             ;*********************************************************
5271   ED95             ;* This routine will check the state of the Up/Down toggle
5272   ED95             ;* switch. First do a dummy read to clear previous results
5273   ED95             ;*********************************************************
5274   ED95 F6 28 02    check_aumd		ldab	pia_disp_seg_data			;Dummy read to clear previous results
5275   ED98                             SLEEP($02)
5275   ED98 BD DA A0    
5275   ED9B 02          
5276   ED9C F6 28 03                    ldab	pia_disp_seg_ctrl
5277   ED9F 39                          rts 
5278   EDA0             
5279   EDA0             ;**************************************************
5280   EDA0             ;* Self Test Initializations:
5281   EDA0             ;*	Remove all VM Threads
5282   EDA0             ;*	Disable Solenoids
5283   EDA0             ;*	Clear RAM
5284   EDA0             ;**************************************************
5285   EDA0 5F          st_init		    clrb	
5286   EDA1 BD DB 7F                    jsr	kill_threads			;Remove All VM Threads 
5287   EDA4 7C 00 E7                    inc	flags_selftest			;Set Test Flag
5288   EDA7 CE 00 00                    ldx	#ram_base
5289   EDAA C6 A5                       ldab	#$A5
5290   EDAC 7E EA 2A    to_clear_range	jmp	clear_range				;Clear RAM from $0000-0089
5291   EDAF             
5292   EDAF             ;**************************************************
5293   EDAF             ;* Next Test: Will advance diagnostics to next
5294   EDAF             ;*            test in sequence, if done, then fall
5295   EDAF             ;*            through to audits/adjustments
5296   EDAF             ;**************************************************
5297   EDAF C6 3C       st_nexttest		ldab	#$3C
5298   EDB1 CE 00 10                    ldx	#lampbuffer0
5299   EDB4 8D F6                       bsr	to_clear_range			;Clear RAM from $0010-0038
5300   EDB6 BD DB 7F                    jsr	kill_threads			;Remove all VM Threads
5301   EDB9 4C                          inca	
5302   EDBA 81 05                       cmpa	#$05					;are we done yet?
5303   EDBC 26 8C                       bne	st_diagnostics			;Goto back to Self-Test Diagnostics routine
5304   EDBE                             ;Fall through if finished
5305   EDBE                             
5306   EDBE             ;**************************************************
5307   EDBE             ;* Main Audit/Adjustments Process Entry
5308   EDBE             ;**************************************************			
5309   EDBE 8D E0       to_audadj		bsr	st_init				;Clear all RAM and set up self testing
5310   EDC0 7F 00 4C    do_audadj		clr	score_p1_b0
5311   EDC3 86 04                       ldaa	#$04					;Show test 04 by default
5312   EDC5 97 50                       staa	score_p2_b0
5313   EDC7                             SLEEP($10)
5313   EDC7 BD DA A0    
5313   EDCA 10          
5314   EDCB                             begin
5314   EDCB             
5315   EDCB BD EA 30                        jsr	clear_displays			;Blank all Player Displays (buffer 0)
5316   EDCE 8D 34                           bsr	b_129					;#08 -> $0F
5317   EDD0 D6 4C                           ldab	score_p1_b0
5318   EDD2 BD E9 C1                        jsr	dec2hex				;Convert Decimal(B) to Hex(B)
5319   EDD5 CE ED 15                        ldx	#testlists-3
5320   EDD8                                 begin
5320   EDD8             
5321   EDD8 08                                  inx	
5322   EDD9 08                                  inx	
5323   EDDA 08                                  inx	
5324   EDDB E1 03                               cmpb	$03,X					;Are we at next handler?
5325   EDDD                                 csend
5325   EDDD             
5325   EDDD             
5325   EDDD~                                csend
5325   EDDD~                                csend
5325   EDDD~                                csend
5325   EDDD             
5325   EDDD 24 F9       
5325   EDDF             
5325   EDDF~                                csend
5325   EDDF~                                csend
5325   EDDF             
5326   EDDF EE 01                           ldx	$01,X					;Load the routine
5327   EDE1 AD 00                           jsr	$00,X					;Do the routine to load up data into displays
5328   EDE3                                 begin
5328   EDE3             
5329   EDE3 8D A5                               bsr	check_adv			;Advance: - if Triggered
5330   EDE5                                 miend
5330   EDE5             
5330   EDE5             
5330   EDE5~                                miend
5330   EDE5~                                miend
5330   EDE5~                                miend
5330   EDE5             
5330   EDE5 2A FC       
5330   EDE7             
5330   EDE7~                                miend
5330   EDE7~                                miend
5330   EDE7             
5331   EDE7 8D 1B       b_133				bsr	b_129					;#08 -> $0F
5332   EDE9 8D 9F       show_func			bsr	check_adv				;Advance: - if Triggered
5333   EDEB                             miend
5333   EDEB             
5333   EDEB             
5333   EDEB~                            miend
5333   EDEB~                            miend
5333   EDEB~                            miend
5333   EDEB             
5333   EDEB 2A DE       
5333   EDED             
5333   EDED~                            miend
5333   EDED~                            miend
5333   EDED             
5334   EDED 8D 1A                       bsr	b_12D
5335   EDEF 26 F8                       bne	show_func				;Look at the buttons again
5336   EDF1 8D 31                       bsr	adjust_func				;Add or subtract the function number?
5337   EDF3 9B 4C                       adda	score_p1_b0				;Change it
5338   EDF5 19                          daa	
5339   EDF6 81 51                       cmpa	#$51					;Are we now on audit 51??
5340   EDF8 27 35                       beq	st_reset				;Yes, Blank displays, reboot game
5341   EDFA 81 99                       cmpa	#$99					;Going down, are we minus now??
5342   EDFC                             ifeq
5342   EDFC             
5342   EDFC 26 FE       
5343   EDFE 86 50                           ldaa	#$50					;Yes, wrap around to 50
5344   EE00                             endif
5344   EE00             
5344   EE00             
5344   EE00             
5344   EE00             
5344   EE00             
5344   EE00~                            endif
5344   EE00~                            endif
5344   EE00             
5344   EE00~                            endif
5344   EE00~                            endif
5344   EE00             
5344   EDFD             
5344   EDFD 02          
5344   EDFE             
5344   EDFE             
5344   EDFE~                            endif
5344   EDFE~                            endif
5344   EDFE~                            endif
5344   EDFE             
5344   EE00             
5344   EE00~                            endif
5344   EE00~                            endif
5344   EE00             
5345   EE00 97 4C                       staa	score_p1_b0				;Store new value
5346   EE02 20 E5                       bra	show_func				;Look at the buttons again
5347   EE04             
5348   EE04 86 08       b_129			ldaa	#$08
5349   EE06 97 0F                       staa	$000F
5350   EE08 39                          rts	
5351   EE09             			
5352   EE09 96 0F       b_12D			ldaa	$000F
5353   EE0B                             ifne
5353   EE0B             
5353   EE0B 27 FE       
5354   EE0D 7A 00 0F                        dec	$000F
5355   EE10 81 08                           cmpa	#$08
5356   EE12                             endif
5356   EE12             
5356   EE12             
5356   EE12             
5356   EE12             
5356   EE12             
5356   EE12~                            endif
5356   EE12~                            endif
5356   EE12             
5356   EE12~                            endif
5356   EE12~                            endif
5356   EE12             
5356   EE0C             
5356   EE0C 05          
5356   EE0D             
5356   EE0D             
5356   EE0D~                            endif
5356   EE0D~                            endif
5356   EE0D~                            endif
5356   EE0D             
5356   EE12             
5356   EE12~                            endif
5356   EE12~                            endif
5356   EE12             
5357   EE12 39                          rts
5358   EE13             
5359   EE13                             begin
5359   EE13             
5360   EE13 8D EF                           bsr	b_129					;#08 -> $0F
5361   EE15 BD ED 8A    b_135				jsr	check_adv				;Advance: - if Triggered
5362   EE18 2B CD                           bmi	b_133
5363   EE1A 96 83                           ldaa	switch_masked
5364   EE1C 85 04                           bita	#$04
5365   EE1E                             neend
5365   EE1E             
5365   EE1E             
5365   EE1E~                            neend
5365   EE1E~                            neend
5365   EE1E~                            neend
5365   EE1E             
5365   EE1E 27 F3       
5365   EE20             
5365   EE20~                            neend
5365   EE20~                            neend
5365   EE20             
5366   EE20 8D E7                       bsr	b_12D
5367   EE22 26 F1                       bne	b_135
5368   EE24 86 99       adjust_func		ldaa	#$99
5369   EE26 BD ED 95                    jsr	check_aumd				;AUMD: + if Manual-Down
5370   EE29                             ifmi
5370   EE29             
5370   EE29 2A FE       
5371   EE2B 86 01                           ldaa	#$01
5372   EE2D                             endif
5372   EE2D             
5372   EE2D             
5372   EE2D             
5372   EE2D             
5372   EE2D             
5372   EE2D~                            endif
5372   EE2D~                            endif
5372   EE2D             
5372   EE2D~                            endif
5372   EE2D~                            endif
5372   EE2D             
5372   EE2A             
5372   EE2A 02          
5372   EE2B             
5372   EE2B             
5372   EE2B~                            endif
5372   EE2B~                            endif
5372   EE2B~                            endif
5372   EE2B             
5372   EE2D             
5372   EE2D~                            endif
5372   EE2D~                            endif
5372   EE2D             
5373   EE2D 16                          tab	
5374   EE2E 39                          rts
5375   EE2F             
5376   EE2F 86 FF       st_reset		ldaa	#$FF
5377   EE31 97 4C                       staa	score_p1_b0
5378   EE33 97 50                       staa	score_p2_b0
5379   EE35                             SLEEP($50)
5379   EE35 BD DA A0    
5379   EE38 50          
5380   EE39 7E D8 59                    jmp	reset					;Goto Reset Entry
5381   EE3C             
5382   EE3C             ;************************************************************
5383   EE3C             ;* Self Test Audit and Adjustment Handlers:
5384   EE3C             ;* 	These routines are in charge of the functions shown
5385   EE3C             ;* 	in the self test routines. Each one handles one or
5386   EE3C             ;*    more functions to retrieve and display the proper 
5387   EE3C             ;*    data on the various displays.
5388   EE3C             ;************************************************************			
5389   EE3C FE D0 00    fn_gameid		ldx	gr_gamenumber
5390   EE3F DF 4D                       stx	score_p1_b0+1			;Game # -> Player 1 Display
5391   EE41 B6 D0 02                    ldaa	gr_romrevision
5392   EE44 97 4F                       staa	score_p1_b0+3			;ROM Rev -> Player Display
5393   EE46 39                          rts	   
5394   EE47             
5395   EE47 C0 1E       fn_gameaud		subb	#$1E
5396   EE49 58          fn_sysaud		aslb	
5397   EE4A 58                          aslb	
5398   EE4B CE 00 FE                    ldx	#$00FE
5399   EE4E BD DF B0                    jsr	xplusb				;X = X + B)
5400   EE51 BD DF B6                    jsr	cmosinc_a				;CMOS,X++ -> A
5401   EE54 97 4E                       staa	score_p1_b0+2
5402   EE56 BD DF B6                    jsr	cmosinc_a				;CMOS,X++ -> A
5403   EE59 97 4F                       staa	score_p1_b0+3			;Show Data in Player 1 Display
5404   EE5B 39                          rts
5405   EE5C             
5406   EE5C BD EB BE    fn_hstd		    jsr	show_hstd				;Puts HSTD in All Player Displays(Buffer 1)
5407   EE5F 86 7F                       ldaa	#$7F
5408   EE61 97 76                       staa	dmask_p1
5409   EE63 39                          rts
5410   EE64             
5411   EE64 CE 01 81    fn_replay		ldx	#adj_backuphstd			;Offset to Replay Levels
5412   EE67 C0 0D                       subb	#$0D					;Subtract 13 to get correct base
5413   EE69 58                          aslb						;*2  2 bytes data per level(replay score)
5414   EE6A BD DF B0                    jsr	xplusb				;X = X + B)
5415   EE6D DF ED                       stx	vm_pc					;Pointer to Current Replay Level Data
5416   EE6F 58                          aslb						;*2  4 bytes data per level(times exceeded)
5417   EE70 CE 01 4E                    ldx	#aud_hstdcredits			;Offset to Replay Level Times Exceeded
5418   EE73 BD DF B0                    jsr	xplusb				;X = X + B)
5419   EE76 BD DF B6                    jsr	cmosinc_a				;CMOS,X++ -> A
5420   EE79 97 52                       staa	score_p2_b0+2			;Show Times Exceeded MSD's in Player 2 Display
5421   EE7B BD DF B6                    jsr	cmosinc_a				;CMOS,X++ -> A
5422   EE7E 97 53                       staa	score_p2_b0+3			;Show Times Exceeded LSD's in Player 2 Display
5423   EE80 5F                          clrb	
5424   EE81                             begin
5424   EE81             
5425   EE81 DE ED                           ldx	vm_pc					;reload current offset * 2
5426   EE83 8D 14                           bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
5427   EE85 16                              tab	
5428   EE86 BD DD 56                        jsr	split_ab				;Shift the digits around for display
5429   EE89 84 F0                           anda	#$F0					;Blank MSD (10,000,000 digit)
5430   EE8B D7 4C                           stab	score_p1_b0				;Show it.
5431   EE8D 97 4D                           staa	score_p1_b0+1			;Player 1 Display
5432   EE8F 5F                              clrb	
5433   EE90 D7 4E                           stab	score_p1_b0+2			;Lay down some Zero's
5434   EE92 D7 4F                           stab	score_p1_b0+3			
5435   EE94 BD EE 15                        jsr	b_135
5436   EE97                             loopend
5436   EE97             
5436   EE97             
5436   EE97~                            loopend
5436   EE97~                            loopend
5436   EE97~                            loopend
5436   EE97             
5436   EE97 20 E8       
5436   EE99             
5436   EE99~                            loopend
5436   EE99~                            loopend
5436   EE99             
5437   EE99             
5438   EE99 8D 36       cmos_add_d		bsr	cmos_a				;CMOS, X -> A )
5439   EE9B 1B                          aba	
5440   EE9C 19                          daa	
5441   EE9D BD E0 12                    jsr	a_cmosinc				;A -> CMOS,X++)
5442   EEA0 20 32                       bra	fn_ret				;dex,dex,tsta,rts.
5443   EEA2             
5444   EEA2 5F          fn_pricec		clrb	
5445   EEA3                             begin
5445   EEA3             
5446   EEA3                                 begin
5446   EEA3             
5447   EEA3 CE 01 AD                            ldx	#adj_pricecontrol			;Standard/Custom Pricing Control
5448   EEA6 BD EE 99                            jsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
5449   EEA9 C6 99                               ldab	#$99
5450   EEAB 81 09                               cmpa	#$09
5451   EEAD                                 csend					;Custom Pricing = 09?
5451   EEAD             
5451   EEAD             
5451   EEAD~                                csend					;Custom Pricing = 09?
5451   EEAD~                                csend					;Custom Pricing = 09?
5451   EEAD~                                csend					;Custom Pricing = 09?
5451   EEAD             
5451   EEAD 24 F4       
5451   EEAF             
5451   EEAF~                                csend					;Custom Pricing = 09?
5451   EEAF~                                csend					;Custom Pricing = 09?
5451   EEAF             
5452   EEAF 97 4F                           staa	score_p1_b0+3			;Player 1 Display
5453   EEB1 16                              tab	
5454   EEB2                                 ifne
5454   EEB2             
5454   EEB2 27 FE       
5455   EEB4 BD E0 33                            jsr	loadpricing
5456   EEB7                                 endif
5456   EEB7             
5456   EEB7             
5456   EEB7             
5456   EEB7             
5456   EEB7             
5456   EEB7~                                endif
5456   EEB7~                                endif
5456   EEB7             
5456   EEB7~                                endif
5456   EEB7~                                endif
5456   EEB7             
5456   EEB3             
5456   EEB3 03          
5456   EEB4             
5456   EEB4             
5456   EEB4~                                endif
5456   EEB4~                                endif
5456   EEB4~                                endif
5456   EEB4             
5456   EEB7             
5456   EEB7~                                endif
5456   EEB7~                                endif
5456   EEB7             
5457   EEB7 BD EE 15                        jsr	b_135
5458   EEBA                             loopend
5458   EEBA             
5458   EEBA             
5458   EEBA~                            loopend
5458   EEBA~                            loopend
5458   EEBA~                            loopend
5458   EEBA             
5458   EEBA 20 E7       
5458   EEBC             
5458   EEBC~                            loopend
5458   EEBC~                            loopend
5458   EEBC             
5459   EEBC             
5460   EEBC CE 01 AF    fn_prices		ldx	#cmos_leftcoinmult		;Left Coin Slot Multiplier
5461   EEBF C0 14                       subb	#$14
5462   EEC1 58                          aslb	
5463   EEC2 BD DF B0                    jsr	xplusb				;X = X + B)
5464   EEC5 8D 0A                       bsr	cmos_a				;CMOS, X -> A )
5465   EEC7 97 4F                       staa	score_p1_b0+3			;Player 1 Display
5466   EEC9 B6 01 AE                    ldaa	adj_pricecontrol+1		;Standard/Custom Pricing Control LSD
5467   EECC 84 0F                       anda	#$0F
5468   EECE 27 0B                       beq	fn_cdtbtn
5469   EED0 39                          rts 
5470   EED1             
5471   EED1 BD DF B6    cmos_a		    jsr	cmosinc_a				;CMOS,X++ -> A
5472   EED4 09          fn_ret		    dex	
5473   EED5 09                          dex	
5474   EED6 4D                          tsta	
5475   EED7 39                          rts
5476   EED8             
5477   EED8 CE 01 AB    fn_credit		ldx	#adj_max_credits			;RAM Pointer Base
5478   EEDB 5F          fn_cdtbtn		clrb
5479   EEDC                             begin
5479   EEDC             
5480   EEDC 8D BB                           bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
5481   EEDE 97 4F                           staa	score_p1_b0+3			;Player 1 Display
5482   EEE0 BD EE 15                        jsr	b_135
5483   EEE3                             loopend
5483   EEE3             
5483   EEE3             
5483   EEE3~                            loopend
5483   EEE3~                            loopend
5483   EEE3~                            loopend
5483   EEE3             
5483   EEE3 20 F7       
5483   EEE5             
5483   EEE5~                            loopend
5483   EEE5~                            loopend
5483   EEE5             
5484   EEE5             
5485   EEE5 CE 01 8B    fn_adj		    ldx	#adj_matchenable			;RAM Pointer Base
5486   EEE8 C0 1A                       subb	#$1A
5487   EEEA 58                          aslb	
5488   EEEB BD DF B0                    jsr	xplusb				;X = X + B)
5489   EEEE 20 EB                       bra	fn_cdtbtn
5490   EEF0             			
5491   EEF0 CE 01 70    fn_command		ldx	#aud_command			;RAM Pointer Base
5492   EEF3 20 E6                       bra	fn_cdtbtn
5493   EEF5             
5494   EEF5             ;****************************************************
5495   EEF5             ;* Main Display Test Routine - Cycles all score 
5496   EEF5             ;*                             displays through 0-9
5497   EEF5             ;****************************************************			
5498   EEF5             st_display		begin
5498   EEF5             
5499   EEF5 4F                              clra
5500   EEF6                                 begin	
5500   EEF6             
5501   EEF6                                     begin
5501   EEF6             
5502   EEF6 CE 00 4C                                ldx	#score_p1_b0
5503   EEF9 C6 14                                   ldab	#$14
5504   EEFB BD E9 CD                                jsr	write_range				;RAM $38-$5B = A: Clear all Displays
5505   EEFE 36                                      psha
5506   EEFF 85 01                                   bita	#$01
5507   EF01                                         ifne
5507   EF01             
5507   EF01 27 FE       
5508   EF03 86 CF                                       ldaa	#$CF
5509   EF05                                         else
5509   EF05             
5509   EF05             
5509   EF05             
5509   EF05             
5509   EF02             
5509   EF02             
5509   EF02             
5509   EF02~                                        else
5509   EF02~                                        else
5509   EF02~                                        else
5509   EF02~                                        else
5509   EF02             
5509   EF02~                                        else
5509   EF02~                                        else
5509   EF02~                                        else
5509   EF02~                                        else
5509   EF02             
5509   EF02             
5509   EF02 04          
5509   EF05             
5509   EF05 20 FE       
5509   EF07             
5509   EF07             
5509   EF07             
5509   EF07~                                        else
5509   EF07~                                        else
5509   EF07~                                        else
5509   EF07~                                        else
5509   EF07~                                        else
5509   EF07             
5509   EF07~                                        else
5509   EF07~                                        else
5509   EF07             
5509   EF07~                                        else
5509   EF07~                                        else
5509   EF07             
5510   EF07 86 2C                                       ldaa	#$2C
5511   EF09                                         endif
5511   EF09             
5511   EF09             
5511   EF09             
5511   EF09             
5511   EF09             
5511   EF09~                                        endif
5511   EF09~                                        endif
5511   EF09             
5511   EF09~                                        endif
5511   EF09~                                        endif
5511   EF09             
5511   EF06             
5511   EF06 02          
5511   EF07             
5511   EF07             
5511   EF07~                                        endif
5511   EF07~                                        endif
5511   EF07~                                        endif
5511   EF07             
5511   EF09             
5511   EF09~                                        endif
5511   EF09~                                        endif
5511   EF09             
5512   EF09 C6 0C                                   ldab	#$0C
5513   EF0B CE 00 5E                                ldx	#alpha_b0
5514   EF0E BD E9 CD                                jsr	write_range
5515   EF11 32                                      pula
5516   EF12                                         SLEEP($18)
5516   EF12 BD DA A0    
5516   EF15 18          
5517   EF16 BD ED 77                                jsr	do_aumd				;Check Auto/Manual, return + if Manual
5518   EF19                                     miend
5518   EF19             
5518   EF19             
5518   EF19~                                    miend
5518   EF19~                                    miend
5518   EF19~                                    miend
5518   EF19             
5518   EF19 2A DB       
5518   EF1B             
5518   EF1B~                                    miend
5518   EF1B~                                    miend
5518   EF1B             
5519   EF1B 73 00 7A                            com	comma_flags				;Toggle commas on each count
5520   EF1E 8B 11                               adda	#$11					;Add one to each digit
5521   EF20 19                                  daa	
5522   EF21                                 csend
5522   EF21             
5522   EF21             
5522   EF21~                                csend
5522   EF21~                                csend
5522   EF21~                                csend
5522   EF21             
5522   EF21 24 D3       
5522   EF23             
5522   EF23~                                csend
5522   EF23~                                csend
5522   EF23             
5523   EF23 D6 E7                           ldab	flags_selftest
5524   EF25                             miend				;Clear All Displays
5524   EF25             
5524   EF25             
5524   EF25~                            miend				;Clear All Displays
5524   EF25~                            miend				;Clear All Displays
5524   EF25~                            miend				;Clear All Displays
5524   EF25             
5524   EF25 2A CE       
5524   EF27             
5524   EF27~                            miend				;Clear All Displays
5524   EF27~                            miend				;Clear All Displays
5524   EF27             
5525   EF27 39                          rts
5526   EF28             
5527   EF28             ;****************************************************
5528   EF28             ;* Main Sound Routine - Toggles each of the sound 
5529   EF28             ;*                      command line individually.
5530   EF28             ;****************************************************			
5531   EF28 BD EA 30    st_sound		jsr	clear_displays			;Blank all Player Displays (buffer 0)
5532   EF2B                             begin
5532   EF2B             
5533   EF2B 4F                              clra	
5534   EF2C 97 7A                           staa	comma_flags				;Turn off commas
5535   EF2E 97 4C                           staa	score_p1_b0				;Match/Ball in Play Display = 00
5536   EF30 86 FE                           ldaa	#$FE					;Initial Sound Command $1E
5537   EF32                                 begin
5537   EF32             
5538   EF32                                     begin
5538   EF32             
5539   EF32 C6 FF                                   ldab	#$FF
5540   EF34 F7 21 00                                stab	pia_sound_data			;Sound Blanking
5541   EF37                                         SLEEP($00)	
5541   EF37 BD DA A0    
5541   EF3A 00          
5542   EF3B B7 21 00                                staa	pia_sound_data			;Commands.. $1E,$1D,$1B,$17,$0F
5543   EF3E BD DA A0                                jsr	addthread				;Delay $40 IRQ's
5544   EF41 40                                      .db	$40
5545   EF42 BD ED 77                                jsr	do_aumd				;Either repeat same sound or move on to next
5546   EF45                                     miend
5546   EF45             
5546   EF45             
5546   EF45~                                    miend
5546   EF45~                                    miend
5546   EF45~                                    miend
5546   EF45             
5546   EF45 2A EB       
5546   EF47             
5546   EF47~                                    miend
5546   EF47~                                    miend
5546   EF47             
5547   EF47 7C 00 4C                            inc	score_p1_b0				;Increment Match/Ball in Play Display
5548   EF4A 48                                  asla	
5549   EF4B 4C                                  inca	
5550   EF4C                                 plend
5550   EF4C             
5550   EF4C             
5550   EF4C~                                plend
5550   EF4C~                                plend
5550   EF4C~                                plend
5550   EF4C             
5550   EF4C 2B E4       
5550   EF4E             
5550   EF4E~                                plend
5550   EF4E~                                plend
5550   EF4E             
5551   EF4E D6 E7                           ldab	flags_selftest
5552   EF50                             miend					;Start Over
5552   EF50             
5552   EF50             
5552   EF50~                            miend					;Start Over
5552   EF50~                            miend					;Start Over
5552   EF50~                            miend					;Start Over
5552   EF50             
5552   EF50 2A D9       
5552   EF52             
5552   EF52~                            miend					;Start Over
5552   EF52~                            miend					;Start Over
5552   EF52             
5553   EF52 39                          rts
5554   EF53             
5555   EF53             ;****************************************************
5556   EF53             ;* Main Lamp Routine - Flashes all lamps 
5557   EF53             ;****************************************************			
5558   EF53 C6 AA       st_lamp		    ldab	#$AA
5559   EF55 D7 4C                       stab	score_p1_b0				;Match/Ball in Play Display Buffer 0
5560   EF57 D7 0F                       stab	test_lamptimer
5561   EF59                             begin
5561   EF59             
5562   EF59                                 begin
5562   EF59             
5563   EF59 96 10                               ldaa	lampbuffer0
5564   EF5B 43                                  coma	
5565   EF5C CE 00 10                            ldx	#lampbuffer0
5566   EF5F C6 0C                               ldab	#$0C
5567   EF61 BD E9 CD                            jsr	write_range				;Store A from $0010-0017
5568   EF64 BD DA A0                            jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
5569   EF67 1B                                  .db	$1B
5570   EF68 7A 00 0F                            dec  	test_lamptimer
5571   EF6B                                 eqend
5571   EF6B             
5571   EF6B             
5571   EF6B~                                eqend
5571   EF6B~                                eqend
5571   EF6B~                                eqend
5571   EF6B             
5571   EF6B 26 EC       
5571   EF6D             
5571   EF6D~                                eqend
5571   EF6D~                                eqend
5571   EF6D             
5572   EF6D D6 E7                           ldab  flags_selftest			;Auto-Cycle??
5573   EF6F                             miend
5573   EF6F             
5573   EF6F             
5573   EF6F~                            miend
5573   EF6F~                            miend
5573   EF6F~                            miend
5573   EF6F             
5573   EF6F 2A E8       
5573   EF71             
5573   EF71~                            miend
5573   EF71~                            miend
5573   EF71             
5574   EF71 39                          rts 
5575   EF72             
5576   EF72             ;****************************************************
5577   EF72             ;* Auto-Cycle Routine - This is the timing thread to
5578   EF72             ;*                      allow each test routine to 
5579   EF72             ;*                      repeat indefinitely.
5580   EF72             ;****************************************************			
5581   EF72 BD ED A0    st_autocycle	jsr  	st_init
5582   EF75 5A                          decb 
5583   EF76 D7 E7                       stab  flags_selftest
5584   EF78                             begin
5584   EF78             
5585   EF78 BD EE F5                        jsr  	st_display    		;Clear All Displays
5586   EF7B 7F 00 50                        clr  	score_p2_b0
5587   EF7E 8D A8                           bsr  	st_sound
5588   EF80 7C 00 50                        inc  	score_p2_b0
5589   EF83 8D CE                           bsr  	st_lamp
5590   EF85 7C 00 50                        inc  	score_p2_b0
5591   EF88 8D 08                           bsr  	st_solenoid
5592   EF8A CE 01 4A                        ldx  	#aud_autocycles		;Audit: Auto-Cycles
5593   EF8D BD E9 0B                        jsr  	ptrx_plus_1 		;Add 1 to data at X
5594   EF90                             loopend
5594   EF90             
5594   EF90             
5594   EF90~                            loopend
5594   EF90~                            loopend
5594   EF90~                            loopend
5594   EF90             
5594   EF90 20 E6       
5594   EF92             
5594   EF92~                            loopend
5594   EF92~                            loopend
5594   EF92             
5595   EF92             
5596   EF92             ;****************************************************
5597   EF92             ;* Main Solenoid Routine - Steps through each solenoid 
5598   EF92             ;****************************************************			
5599   EF92 86 F9       st_solenoid		ldaa	#$F9
5600   EF94 BD DB A7                    jsr	solbuf
5601   EF97                             begin
5601   EF97             
5602   EF97 C6 01                           ldab  #$01
5603   EF99 D7 4C                           stab 	score_p1_b0	 
5604   EF9B 86 20                           ldaa 	#$20
5605   EF9D                                 begin
5605   EF9D             
5606   EF9D                                     begin
5606   EF9D             
5607   EF9D 85 08                                   bita	#$08
5608   EF9F                                         ifne
5608   EF9F             
5608   EF9F 27 FE       
5609   EFA1 8D 1F                                       bsr   solenoid_wait
5610   EFA3                                         else
5610   EFA3             
5610   EFA3             
5610   EFA3             
5610   EFA3             
5610   EFA0             
5610   EFA0             
5610   EFA0             
5610   EFA0~                                        else
5610   EFA0~                                        else
5610   EFA0~                                        else
5610   EFA0~                                        else
5610   EFA0             
5610   EFA0~                                        else
5610   EFA0~                                        else
5610   EFA0~                                        else
5610   EFA0~                                        else
5610   EFA0             
5610   EFA0             
5610   EFA0 04          
5610   EFA3             
5610   EFA3 20 FE       
5610   EFA5             
5610   EFA5             
5610   EFA5             
5610   EFA5~                                        else
5610   EFA5~                                        else
5610   EFA5~                                        else
5610   EFA5~                                        else
5610   EFA5~                                        else
5610   EFA5             
5610   EFA5~                                        else
5610   EFA5~                                        else
5610   EFA5             
5610   EFA5~                                        else
5610   EFA5~                                        else
5610   EFA5             
5611   EFA5 BD DB A7                                    jsr  	solbuf			;Turn On Outhole Solenoid
5612   EFA8                                             SLEEP($20)
5612   EFA8 BD DA A0    
5612   EFAB 20          
5613   EFAC                                             
5614   EFAC                                         endif
5614   EFAC             
5614   EFAC             
5614   EFAC             
5614   EFAC             
5614   EFAC             
5614   EFAC~                                        endif
5614   EFAC~                                        endif
5614   EFAC             
5614   EFAC~                                        endif
5614   EFAC~                                        endif
5614   EFAC             
5614   EFA4             
5614   EFA4 07          
5614   EFA5             
5614   EFA5             
5614   EFA5~                                        endif
5614   EFA5~                                        endif
5614   EFA5~                                        endif
5614   EFA5             
5614   EFAC             
5614   EFAC~                                        endif
5614   EFAC~                                        endif
5614   EFAC             
5615   EFAC                                         SLEEP($20)
5615   EFAC BD DA A0    
5615   EFAF 20          
5616   EFB0 BD ED 77                                jsr  	do_aumd			;AUMD: + if Manual-Down
5617   EFB3                                     miend
5617   EFB3             
5617   EFB3             
5617   EFB3~                                    miend
5617   EFB3~                                    miend
5617   EFB3~                                    miend
5617   EFB3             
5617   EFB3 2A E8       
5617   EFB5             
5617   EFB5~                                    miend
5617   EFB5~                                    miend
5617   EFB5             
5618   EFB5 4C                                  inca
5619   EFB6 7C 00 4C                            inc	score_p1_b0
5620   EFB9 81 09                               cmpa	#$09
5621   EFBB                                 eqend
5621   EFBB             
5621   EFBB             
5621   EFBB~                                eqend
5621   EFBB~                                eqend
5621   EFBB~                                eqend
5621   EFBB             
5621   EFBB 26 E0       
5621   EFBD             
5621   EFBD~                                eqend
5621   EFBD~                                eqend
5621   EFBD             
5622   EFBD D6 E7                           ldab  flags_selftest			;Auto-Cycle??
5623   EFBF                             miend
5623   EFBF             
5623   EFBF             
5623   EFBF~                            miend
5623   EFBF~                            miend
5623   EFBF~                            miend
5623   EFBF             
5623   EFBF 2A D6       
5623   EFC1             
5623   EFC1~                            miend
5623   EFC1~                            miend
5623   EFC1             
5624   EFC1 39                          rts  
5625   EFC2             
5626   EFC2             solenoid_wait
5627   EFC2                             begin
5627   EFC2             
5628   EFC2 D6 B0                           ldab   solenoid_counter
5629   EFC4                             eqend
5629   EFC4             
5629   EFC4             
5629   EFC4~                            eqend
5629   EFC4~                            eqend
5629   EFC4~                            eqend
5629   EFC4             
5629   EFC4 26 FC       
5629   EFC6             
5629   EFC6~                            eqend
5629   EFC6~                            eqend
5629   EFC6             
5630   EFC6 86 08                       ldaa   #08
5631   EFC8 C6 0E                       ldab   #0E
5632   EFCA 37                          pshb  
5633   EFCB 7E DB D5                    jmp   set_sol_counter
5634   EFCE             
5635   EFCE             ;****************************************************
5636   EFCE             ;* Main Switch Routine - Scans for closed switches
5637   EFCE             ;****************************************************			
5638   EFCE             st_switch		begin
5638   EFCE             
5639   EFCE 86 FF                           ldaa	#$FF
5640   EFD0 97 4C                           staa  score_p1_b0
5641   EFD2                                 SLEEP($00)
5641   EFD2 BD DA A0    
5641   EFD5 00          
5642   EFD6 B6 D0 4D                        ldaa 	gr_lastswitch		;Game ROM: Last Switch Used
5643   EFD9 4A                              deca 
5644   EFDA 36          st_swnext			psha
5645   EFDB FE D0 51                        ldx  	gr_switchtable_ptr
5646   EFDE C6 03                           ldab	#$03
5647   EFE0                                 begin
5647   EFE0             
5648   EFE0 4A                                  deca					;Switchtable entries are 3 bytes each
5649   EFE1 2B 05                               bmi	st_dosw		
5650   EFE3 BD DF B0                            jsr	xplusb
5651   EFE6                                 loopend
5651   EFE6             
5651   EFE6             
5651   EFE6~                                loopend
5651   EFE6~                                loopend
5651   EFE6~                                loopend
5651   EFE6             
5651   EFE6 20 F8       
5651   EFE8             
5651   EFE8~                                loopend
5651   EFE8~                                loopend
5651   EFE8             
5652   EFE8 A6 00       st_dosw			    ldaa	$00,X
5653   EFEA 84 10                           anda	#$10
5654   EFEC 97 00                           staa	vm_reg_a
5655   EFEE 32                              pula
5656   EFEF CE 00 83                        ldx	#switch_masked
5657   EFF2 BD E3 36                        jsr  	unpack_byte    		;Unpack Switch
5658   EFF5 7D 00 00                        tst	vm_reg_a
5659   EFF8                                 ifeq
5659   EFF8             
5659   EFF8 26 FE       
5660   EFFA E5 00                               bitb 	$00,X
5661   EFFC 26 18                               bne	st_swe
5662   EFFE                                 else
5662   EFFE             
5662   EFFE             
5662   EFFE             
5662   EFFE             
5662   EFF9             
5662   EFF9             
5662   EFF9             
5662   EFF9~                                else
5662   EFF9~                                else
5662   EFF9~                                else
5662   EFF9~                                else
5662   EFF9             
5662   EFF9~                                else
5662   EFF9~                                else
5662   EFF9~                                else
5662   EFF9~                                else
5662   EFF9             
5662   EFF9             
5662   EFF9 06          
5662   EFFE             
5662   EFFE 20 FE       
5662   F000             
5662   F000             
5662   F000             
5662   F000~                                else
5662   F000~                                else
5662   F000~                                else
5662   F000~                                else
5662   F000~                                else
5662   F000             
5662   F000~                                else
5662   F000~                                else
5662   F000             
5662   F000~                                else
5662   F000~                                else
5662   F000             
5663   F000 E5 00                               bitb 	$00,X
5664   F002 27 12                               beq   st_swe
5665   F004                                 endif
5665   F004             
5665   F004             
5665   F004             
5665   F004             
5665   F004             
5665   F004~                                endif
5665   F004~                                endif
5665   F004             
5665   F004~                                endif
5665   F004~                                endif
5665   F004             
5665   EFFF             
5665   EFFF 04          
5665   F000             
5665   F000             
5665   F000~                                endif
5665   F000~                                endif
5665   F000~                                endif
5665   F000             
5665   F004             
5665   F004~                                endif
5665   F004~                                endif
5665   F004             
5666   F004 36                              psha  
5667   F005 4C                              inca  
5668   F006 C6 01                           ldab  #01
5669   F008 BD E9 A4                        jsr   divide_ab
5670   F00B 97 4C                           staa  score_p1_b0
5671   F00D 4F                              clra  
5672   F00E BD DD 5F                        jsr   isnd_once
5673   F011 32                              pula  
5674   F012                                 SLEEP($40)
5674   F012 BD DA A0    
5674   F015 40          
5675   F016 4A          st_swe			    deca  
5676   F017                             plend
5676   F017             
5676   F017             
5676   F017~                            plend
5676   F017~                            plend
5676   F017~                            plend
5676   F017             
5676   F017 2B B5       
5676   F019             
5676   F019~                            plend
5676   F019~                            plend
5676   F019             
5677   F019 20 BF                       bra 	st_swnext
5678   F01B             
5679   F01B             ;**********************************************************************************
5680   F01B             ;* NMI Routines - This section of code is run only when the 
5681   F01B             ;*                diagnostic switch on the CPU board is pressed.
5682   F01B             ;*                It will test the hardware and report any errors
5683   F01B             ;*                via the LED display on the CPU board. If all tests
5684   F01B             ;*                are passed, the LED display will show '0' and
5685   F01B             ;*                the code jumps to the normal power-up routines.
5686   F01B             ;*
5687   F01B             ;* Errors are as Follows:
5688   F01B             ;*
5689   F01B             ;*      0 - Test Passed
5690   F01B             ;*      1 - IC13 RAM Fault (Most Significant Nybble)
5691   F01B             ;*      2 - IC16 RAM Fault (Least Significant Nybble)
5692   F01B             ;*      3 - IC17 ROM 2 Fault (Location $F000-$FFFF)
5693   F01B             ;*      4 - IC14 ROM 1 Fault (Location $E000-$EFFF)
5694   F01B             ;*      5 - IC20 ROM 0 Fault (Location $D000-$DFFF)
5695   F01B             ;*      6 - Not Used
5696   F01B             ;*      7 - Not Used
5697   F01B             ;*      8 - IC19 CMOS RAM Fault or Memory Protect Failure
5698   F01B             ;*      9 - Coin Door Closed or Memory Protect Failure or IC19 CMOS RAM Fault
5699   F01B             ;**********************************************************************************
5700   F01B C6 20       rambad		    ldab	#$20
5701   F01D A8 00                       eora	$00,X
5702   F01F 84 F0                       anda	#$F0
5703   F021 27 52                       beq	diag_showerror
5704   F023 C6 10                       ldab	#$10
5705   F025 20 4E                       bra	diag_showerror
5706   F027             
5707   F027             ;*******************************************************************
5708   F027             ;* Main NMI Entry 
5709   F027             ;*******************************************************************
5710   F027 0F          diag			sei	
5711   F028 CE 28 00                    ldx	#pia_disp_digit_data
5712   F02B 6F 01                       clr	$01,X
5713   F02D 86 F0                       ldaa	#$F0
5714   F02F A7 00                       staa	$00,X
5715   F031 C6 3C                       ldab	#$3C
5716   F033 E7 01                       stab	$01,X
5717   F035 A7 00                       staa	$00,X			;Blank Diagnostic Display
5718   F037 4F                          clra	
5719   F038                             begin
5719   F038             
5720   F038 CE 10 00                        ldx	#$1000
5721   F03B                                 begin					;\
5721   F03B             
5722   F03B A7 00                               staa	$00,X			;|
5723   F03D 08                                  inx				;| Clear RAM $1000-13FF
5724   F03E 8C 14 00                            cpx	#$1400		;|
5725   F041                                 eqend					;/
5725   F041             
5725   F041             
5725   F041~                                eqend					;/
5725   F041~                                eqend					;/
5725   F041~                                eqend					;/
5725   F041             
5725   F041 26 F8       
5725   F043             
5725   F043~                                eqend					;/
5725   F043~                                eqend					;/
5725   F043             
5726   F043 35                              txs	
5727   F044                                 begin
5727   F044             
5728   F044 09                                  dex	
5729   F045 A1 00                               cmpa	$00,X			;Test
5730   F047 26 D2                               bne	rambad		;Bad RAM
5731   F049 8C 10 00                            cpx	#$1000
5732   F04C                                 eqend
5732   F04C             
5732   F04C             
5732   F04C~                                eqend
5732   F04C~                                eqend
5732   F04C~                                eqend
5732   F04C             
5732   F04C 26 F6       
5732   F04E             
5732   F04E~                                eqend
5732   F04E~                                eqend
5732   F04E             
5733   F04E 43                              coma					;Test with #$FF
5734   F04F                             eqend
5734   F04F             
5734   F04F             
5734   F04F~                            eqend
5734   F04F~                            eqend
5734   F04F~                            eqend
5734   F04F             
5734   F04F 26 E7       
5734   F051             
5734   F051~                            eqend
5734   F051~                            eqend
5734   F051             
5735   F051 86 03                       ldaa	#$03
5736   F053 97 B8                       staa	temp2
5737   F055 C6 20                       ldab	#$20					;Begin ROM Test
5738   F057 CE FF FF                    ldx	#$FFFF
5739   F05A                             begin
5739   F05A             
5740   F05A DF B6                           stx	temp1
5741   F05C CB 10                           addb	#$10
5742   F05E 7A 00 B8                        dec	temp2
5743   F061 2B 18                           bmi	diag_ramtest
5744   F063 96 B6                           ldaa	temp1					
5745   F065 80 10                           suba	#$10
5746   F067 97 B6                           staa	temp1					;Set our stopping address
5747   F069 4F                              clra	
5748   F06A                                 begin
5748   F06A             
5749   F06A A9 00                               adca	$00,X					;Add with carry!!
5750   F06C 09                                  dex	
5751   F06D 9C B6                               cpx	temp1
5752   F06F                                 eqend
5752   F06F             
5752   F06F             
5752   F06F~                                eqend
5752   F06F~                                eqend
5752   F06F~                                eqend
5752   F06F             
5752   F06F 26 F9       
5752   F071             
5752   F071~                                eqend
5752   F071~                                eqend
5752   F071             
5753   F071 81 80                           cmpa	#$80					;Done changing data?
5754   F073                             neend						;CSUM must be = #00
5754   F073             
5754   F073             
5754   F073~                            neend						;CSUM must be = #00
5754   F073~                            neend						;CSUM must be = #00
5754   F073~                            neend						;CSUM must be = #00
5754   F073             
5754   F073 27 E5       
5754   F075             
5754   F075~                            neend						;CSUM must be = #00
5754   F075~                            neend						;CSUM must be = #00
5754   F075             
5755   F075                             ;fall through on error, B contains error code
5756   F075                             
5757   F075 53          diag_showerror	comb	
5758   F076 F7 28 00                    stab	pia_disp_digit_data		;Dump Error to Display
5759   F079 20 FE       tightloop		bra	tightloop				;Stay Here forever
5760   F07B             
5761   F07B             
5762   F07B             ;Define a single CMOS location to write test
5763   F07B             cmos_byteloc	=	$01BB
5764   F07B             
5765   F07B C6 90       diag_ramtest	ldab	#$90					;Begin CMOS RAM Test
5766   F07D B6 01 BB                    ldaa	cmos_byteloc			;Test a single byte
5767   F080 7C 01 BB                    inc	cmos_byteloc
5768   F083 B1 01 BB                    cmpa	cmos_byteloc
5769   F086 27 ED                       beq	diag_showerror			;Wrong
5770   F088 C6 80                       ldab	#$80					;Backup CMOS data now
5771   F08A CE 12 00                    ldx	#$1200
5772   F08D DF B6                       stx	temp1
5773   F08F CE 01 00                    ldx	#cmos_base
5774   F092 8D 2F                       bsr	block_copy					;Copy Block from X -> temp1, Length = B
5775   F094 86 F1                       ldaa	#$F1
5776   F096 97 BA                       staa	temp3
5777   F098                             begin				
5777   F098             
5778   F098 CE 01 00                        ldx	#cmos_base
5779   F09B 96 BA                           ldaa	temp3
5780   F09D                                 begin
5780   F09D             
5781   F09D A7 00                               staa	$00,X
5782   F09F 8D 43                               bsr	adjust_a
5783   F0A1                                 eqend
5783   F0A1             
5783   F0A1             
5783   F0A1~                                eqend
5783   F0A1~                                eqend
5783   F0A1~                                eqend
5783   F0A1             
5783   F0A1 26 FA       
5783   F0A3             
5783   F0A3~                                eqend
5783   F0A3~                                eqend
5783   F0A3             
5784   F0A3 CE 01 00                        ldx	#cmos_base
5785   F0A6 96 BA                           ldaa	temp3
5786   F0A8                                 begin
5786   F0A8             
5787   F0A8 16                                  tab	
5788   F0A9 E8 00                               eorb	$00,X
5789   F0AB C4 0F                               andb	#$0F
5790   F0AD 26 0E                               bne	cmos_error
5791   F0AF 8D 33                               bsr	adjust_a
5792   F0B1                                 eqend
5792   F0B1             
5792   F0B1             
5792   F0B1~                                eqend
5792   F0B1~                                eqend
5792   F0B1~                                eqend
5792   F0B1             
5792   F0B1 26 F5       
5792   F0B3             
5792   F0B3~                                eqend
5792   F0B3~                                eqend
5792   F0B3             
5793   F0B3 7C 00 BA                        inc	temp3
5794   F0B6                             eqend
5794   F0B6             
5794   F0B6             
5794   F0B6~                            eqend
5794   F0B6~                            eqend
5794   F0B6~                            eqend
5794   F0B6             
5794   F0B6 26 E0       
5794   F0B8             
5794   F0B8~                            eqend
5794   F0B8~                            eqend
5794   F0B8             
5795   F0B8 8D 1D                       bsr	cmos_restore			;Put back original CMOS data
5796   F0BA 7E D8 59                    jmp	reset					;Goto Reset Entry, Everything OK.
5797   F0BD             
5798   F0BD 8D 18       cmos_error		bsr	cmos_restore
5799   F0BF C6 80                       ldab	#$80
5800   F0C1 20 B2                       bra	diag_showerror
5801   F0C3             			
5802   F0C3 36          block_copy		psha	
5803   F0C4                             begin
5803   F0C4             
5804   F0C4 BD DF B6                        jsr	cmosinc_a				;CMOS,X++ -> A
5805   F0C7 DF B8                           stx	temp2
5806   F0C9 DE B6                           ldx	temp1
5807   F0CB A7 00                           staa	$00,X
5808   F0CD 08                              inx	
5809   F0CE DF B6                           stx	temp1
5810   F0D0 DE B8                           ldx	temp2
5811   F0D2 5A                              decb	
5812   F0D3                             eqend
5812   F0D3             
5812   F0D3             
5812   F0D3~                            eqend
5812   F0D3~                            eqend
5812   F0D3~                            eqend
5812   F0D3             
5812   F0D3 26 EF       
5812   F0D5             
5812   F0D5~                            eqend
5812   F0D5~                            eqend
5812   F0D5             
5813   F0D5 32                          pula	
5814   F0D6 39                          rts  
5815   F0D7             
5816   F0D7 CE 01 00    cmos_restore	ldx	#$0100
5817   F0DA DF B6                       stx	temp1
5818   F0DC CE 12 00                    ldx	#$1200
5819   F0DF C6 80                       ldab	#$80
5820   F0E1 7E E0 47                    jmp	copyblock2				;Transfer Data Block at X to temp1, Length B
5821   F0E4                             
5822   F0E4 4C          adjust_a		inca	
5823   F0E5                             ifeq
5823   F0E5             
5823   F0E5 26 FE       
5824   F0E7 86 F1                           ldaa	#$F1
5825   F0E9                             endif
5825   F0E9             
5825   F0E9             
5825   F0E9             
5825   F0E9             
5825   F0E9             
5825   F0E9~                            endif
5825   F0E9~                            endif
5825   F0E9             
5825   F0E9~                            endif
5825   F0E9~                            endif
5825   F0E9             
5825   F0E6             
5825   F0E6 02          
5825   F0E7             
5825   F0E7             
5825   F0E7~                            endif
5825   F0E7~                            endif
5825   F0E7~                            endif
5825   F0E7             
5825   F0E9             
5825   F0E9~                            endif
5825   F0E9~                            endif
5825   F0E9             
5826   F0E9 08                          inx
5827   F0EA 8C 02 00                    cpx	#$0200
5828   F0ED 39                          rts	
5829   F0EE             
5830   F0EE             ;*******************************************
5831   F0EE             ;* CPU Startup/Interrupt Vectors go here.
5832   F0EE             ;*******************************************
5833   FFF8             	.org $fff8
5834   FFF8             	
5835   FFF8 D0 D3       irq_entry		.dw gr_irq_entry	;Goes to Game ROM
5836   FFFA D0 D6       swi_entry		.dw gr_swi_entry	;Goes to Game ROM 
5837   FFFC F0 27       nmi_entry		.dw diag
5838   FFFE D8 59       res_entry		.dw reset
5839   10000             
5840   10000             	.end
5841   10000             
tasm: Number of errors = 15
