0001   0000             ;--------------------------------------------------------------
0002   0000             ;Barracora Game ROM Disassembly
0003   0000             ;Dumped by Pinbuilder ©2000-2001 Jess M. Askey
0004   0000             ;--------------------------------------------------------------
0005   0000             
0006   0000             #include  "level7.exp"	;Level 7 system defines
0001+  0000             .module noname
0002+  0000             
0003+  0000             aud_leftcoins    .EQU  $0102
0004+  0000             aud_centercoins  .EQU  $0106
0005+  0000             aud_rightcoins   .EQU  $010a
0006+  0000             aud_paidcredits  .EQU  $010e
0007+  0000             aud_specialcredits .EQU  $0112
0008+  0000             aud_replaycredits .EQU  $0116
0009+  0000             aud_matchcredits .EQU  $011a
0010+  0000             aud_totalcredits .EQU  $011e
0011+  0000             aud_extraballs   .EQU  $0122
0012+  0000             aud_avgballtime  .EQU  $0126
0013+  0000             aud_totalballs   .EQU  $012a
0014+  0000             aud_game1        .EQU  $012e
0015+  0000             aud_game2        .EQU  $0132
0016+  0000             aud_game3        .EQU  $0136
0017+  0000             aud_game4        .EQU  $013a
0018+  0000             aud_game5        .EQU  $013e
0019+  0000             aud_game6        .EQU  $0142
0020+  0000             aud_game7        .EQU  $0146
0021+  0000             aud_autocycles   .EQU  $014a
0022+  0000             aud_hstdcredits  .EQU  $014e
0023+  0000             aud_replay1times .EQU  $0150
0024+  0000             aud_replay2times .EQU  $0154
0025+  0000             aud_replay3times .EQU  $0158
0026+  0000             aud_replay4times .EQU  $015c
0027+  0000             aud_currenthstd  .EQU  $0166
0028+  0000             aud_currentcredits .EQU  $016e
0029+  0000             aud_command      .EQU  $0170
0030+  0000             adj_cmoscsum     .EQU  $017d
0031+  0000             adj_backuphstd   .EQU  $0181
0032+  0000             adj_replay1      .EQU  $0183
0033+  0000             adj_replay2      .EQU  $0185
0034+  0000             adj_replay3      .EQU  $0187
0035+  0000             adj_replay4      .EQU  $0189
0036+  0000             adj_matchenable  .EQU  $018b
0037+  0000             adj_specialaward .EQU  $018d
0038+  0000             adj_replayaward  .EQU  $018f
0039+  0000             adj_maxplumbbobtilts .EQU  $0191
0040+  0000             adj_numberofballs .EQU  $0193
0041+  0000             adj_gameadjust1  .EQU  $0195
0042+  0000             adj_gameadjust2  .EQU  $0197
0043+  0000             adj_gameadjust3  .EQU  $0199
0044+  0000             adj_gameadjust4  .EQU  $019b
0045+  0000             adj_gameadjust5  .EQU  $019d
0046+  0000             adj_gameadjust6  .EQU  $019f
0047+  0000             adj_gameadjust7  .EQU  $01a1
0048+  0000             adj_gameadjust8  .EQU  $01a3
0049+  0000             adj_gameadjust9  .EQU  $01a5
0050+  0000             adj_hstdcredits  .EQU  $01a7
0051+  0000             adj_max_extraballs .EQU  $01a9
0052+  0000             adj_max_credits  .EQU  $01ab
0053+  0000             adj_pricecontrol .EQU  $01ad
0054+  0000             addthread        .EQU  $ea2f
0055+  0000             add_points       .EQU  $ec96
0056+  0000             a_cmosinc        .EQU  $efaf
0057+  0000             abx_ret          .EQU  $f213
0058+  0000             award_special    .EQU  $f6a5
0059+  0000             award_replay     .EQU  $f6bf
0060+  0000             addcredits       .EQU  $f6fe
0061+  0000             addcredit2       .EQU  $f701
0062+  0000             add_player       .EQU  $f858
0063+  0000             adjust_func      .EQU  $fd0b
0064+  0000             adjust_a         .EQU  $fff2
0065+  0000             bitflags         .EQU  $0018
0066+  0000             b_plus10         .EQU  $ecee
0067+  0000             b_cmosinc        .EQU  $ef69
0068+  0000             bit_switch       .EQU  $f2ea
0069+  0000             bit_lamp_flash   .EQU  $f2ef
0070+  0000             bit_lamp_buf_1   .EQU  $f2f4
0071+  0000             bit_lamp_buf_0   .EQU  $f2f9
0072+  0000             bit_main         .EQU  $f2fc
0073+  0000             branch_lookup    .EQU  $f38b
0074+  0000             breg_sto         .EQU  $f3cf
0075+  0000             branchdata       .EQU  $f5f8
0076+  0000             branch_invert    .EQU  $f636
0077+  0000             branch_lamp_on   .EQU  $f63b
0078+  0000             branch_lamprangeoff .EQU  $f647
0079+  0000             branch_lamprangeon .EQU  $f64e
0080+  0000             branch_tilt      .EQU  $f653
0081+  0000             branch_gameover  .EQU  $f65a
0082+  0000             branch_lampbuf1  .EQU  $f661
0083+  0000             branch_switch    .EQU  $f666
0084+  0000             branch_and       .EQU  $f66b
0085+  0000             branch_add       .EQU  $f670
0086+  0000             branch_or        .EQU  $f672
0087+  0000             branch_equal     .EQU  $f677
0088+  0000             branch_ge        .EQU  $f67c
0089+  0000             branch_threadpri .EQU  $f67f
0090+  0000             branch_bitwise   .EQU  $f686
0091+  0000             balladjust       .EQU  $f9e6
0092+  0000             block_copy       .EQU  $ffd1
0093+  0000             cred_b0          .EQU  $005a
0094+  0000             cred_b1          .EQU  $005b
0095+  0000             comma_flags      .EQU  $0060
0096+  0000             comma_data_temp  .EQU  $008d
0097+  0000             credp1p2_bufferselect .EQU  $008e
0098+  0000             current_thread   .EQU  $00b1
0099+  0000             cur_sndflags     .EQU  $00ba
0100+  0000             csound_timer     .EQU  $00c3
0101+  0000             credit_x_temp    .EQU  $00dc
0102+  0000             cmos_base        .EQU  $0100
0103+  0000             cmos_csum        .EQU  $0100
0104+  0000             cmos_bonusunits  .EQU  $0162
0105+  0000             cmos_coinunits   .EQU  $0164
0106+  0000             cmos_leftcoinmult .EQU  $01af
0107+  0000             cmos_centercoinmult .EQU  $01b1
0108+  0000             cmos_rightcoinmult .EQU  $01b3
0109+  0000             cmos_coinsforcredit .EQU  $01b5
0110+  0000             cmos_bonuscoins  .EQU  $01b7
0111+  0000             cmos_minimumcoins .EQU  $01b9
0112+  0000             csum1            .EQU  $e83f
0113+  0000             clear_all        .EQU  $e86c
0114+  0000             checkswitch      .EQU  $e8d4
0115+  0000             check_threads    .EQU  $e9fc
0116+  0000             check_threadid   .EQU  $eb00
0117+  0000             comma_million    .EQU  $eb99
0118+  0000             comma_thousand   .EQU  $eb9d
0119+  0000             checkreplay      .EQU  $ecac
0120+  0000             check_sw_mask    .EQU  $ede7
0121+  0000             check_sw_close   .EQU  $ee61
0122+  0000             check_sw_open    .EQU  $eebb
0123+  0000             copy_word        .EQU  $ef0f
0124+  0000             cmosinc_a        .EQU  $ef53
0125+  0000             cmosinc_b        .EQU  $ef63
0126+  0000             clr_ram_100      .EQU  $ef74
0127+  0000             clr_ram          .EQU  $ef77
0128+  0000             copyblock        .EQU  $efbc
0129+  0000             copyblock2       .EQU  $efe4
0130+  0000             csum2            .EQU  $f318
0131+  0000             complexbranch    .EQU  $f615
0132+  0000             credit_special   .EQU  $f6b8
0133+  0000             coinlockout      .EQU  $f72c
0134+  0000             checkmaxcredits  .EQU  $f749
0135+  0000             creditq          .EQU  $f75f
0136+  0000             coin_accepted    .EQU  $f7a2
0137+  0000             cmos_a_plus_b_cmos .EQU  $f80f
0138+  0000             clr_bonus_coins  .EQU  $f829
0139+  0000             csum3            .EQU  $f833
0140+  0000             clear_range      .EQU  $f894
0141+  0000             clear_displays   .EQU  $f89a
0142+  0000             copyplayerdata   .EQU  $f8c8
0143+  0000             check_hstd       .EQU  $fa92
0144+  0000             credit_button    .EQU  $fb92
0145+  0000             check_adv        .EQU  $fc6a
0146+  0000             check_aumd       .EQU  $fc75
0147+  0000             cmos_add_d       .EQU  $fde6
0148+  0000             cmos_a           .EQU  $fe1f
0149+  0000             cmos_byteloc     .EQU  $01bb
0150+  0000             cmos_error       .EQU  $ffcb
0151+  0000             cmos_restore     .EQU  $ffe5
0152+  0000             dmask_p1         .EQU  $005c
0153+  0000             dmask_p2         .EQU  $005d
0154+  0000             dmask_p3         .EQU  $005e
0155+  0000             dmask_p4         .EQU  $005f
0156+  0000             delaythread      .EQU  $ea24
0157+  0000             dump_thread      .EQU  $ea39
0158+  0000             dsnd_pts         .EQU  $ebfe
0159+  0000             do_complex_snd   .EQU  $eda7
0160+  0000             dly_sto          .EQU  $f4d4
0161+  0000             do_eb            .EQU  $f6d6
0162+  0000             divide_ab        .EQU  $f816
0163+  0000             dec2hex          .EQU  $f834
0164+  0000             do_game_init     .EQU  $f847
0165+  0000             disp_mask        .EQU  $f919
0166+  0000             disp_clear       .EQU  $f926
0167+  0000             dump_score_queue .EQU  $f994
0168+  0000             do_match         .EQU  $fb39
0169+  0000             do_tilt          .EQU  $fbe9
0170+  0000             do_aumd          .EQU  $fc57
0171+  0000             do_audadj        .EQU  $fca5
0172+  0000             diag             .EQU  $ff2b
0173+  0000             diag_showerror   .EQU  $ff7b
0174+  0000             diag_ramtest     .EQU  $ff81
0175+  0000             eb_x_temp        .EQU  $00da
0176+  0000             exe_buffer       .EQU  $1130
0177+  0000             extraball        .EQU  $f6d5
0178+  0000             flag_tilt        .EQU  $00c8
0179+  0000             flag_gameover    .EQU  $00c9
0180+  0000             flag_bonusball   .EQU  $00ca
0181+  0000             flags_selftest   .EQU  $00cb
0182+  0000             flag_timer_bip   .EQU  $00d6
0183+  0000             flashlamp        .EQU  $e957
0184+  0000             factory_zeroaudits .EQU  $ef7d
0185+  0000             fill_hstd_digits .EQU  $fb24
0186+  0000             fn_gameid        .EQU  $fd23
0187+  0000             fn_gameaud       .EQU  $fd2e
0188+  0000             fn_sysaud        .EQU  $fd30
0189+  0000             fn_hstd          .EQU  $fda9
0190+  0000             fn_replay        .EQU  $fdb1
0191+  0000             fn_pricec        .EQU  $fdef
0192+  0000             fn_prices        .EQU  $fe09
0193+  0000             fn_ret           .EQU  $fe22
0194+  0000             fn_credit        .EQU  $fe26
0195+  0000             fn_cdtbtn        .EQU  $fe29
0196+  0000             fn_adj           .EQU  $fe33
0197+  0000             fn_command       .EQU  $fe3e
0198+  0000             game_ram_2       .EQU  $0002
0199+  0000             game_ram_3       .EQU  $0003
0200+  0000             game_ram_4       .EQU  $0004
0201+  0000             game_ram_5       .EQU  $0005
0202+  0000             game_ram_6       .EQU  $0006
0203+  0000             game_ram_7       .EQU  $0007
0204+  0000             game_ram_8       .EQU  $0008
0205+  0000             game_ram_9       .EQU  $0009
0206+  0000             game_ram_a       .EQU  $000a
0207+  0000             game_ram_b       .EQU  $000b
0208+  0000             game_ram_c       .EQU  $000c
0209+  0000             game_ram_d       .EQU  $000d
0210+  0000             get_hs_digits    .EQU  $ece4
0211+  0000             getswitch        .EQU  $ee98
0212+  0000             gettabledata_w   .EQU  $f48c
0213+  0000             gettabledata_b   .EQU  $f48e
0214+  0000             getx_rts         .EQU  $f49e
0215+  0000             give_credit      .EQU  $f6cb
0216+  0000             gameover         .EQU  $fa1e
0217+  0000             get_random       .EQU  $fb80
0218+  0000             hex2bitpos       .EQU  $eb8e
0219+  0000             hex2dec          .EQU  $ec7f
0220+  0000             hstd_nextp       .EQU  $fac6
0221+  0000             hstd_adddig      .EQU  $fb13
0222+  0000             has_credit       .EQU  $fba3
0223+  0000             irq_counter      .EQU  $0089
0224+  0000             irqcount16       .EQU  $0095
0225+  0000             irqcount         .EQU  $00ac
0226+  0000             init_done        .EQU  $e840
0227+  0000             isnd_pts         .EQU  $ebfa
0228+  0000             isnd_once        .EQU  $ecfc
0229+  0000             isnd_test        .EQU  $ed42
0230+  0000             isnd_mult        .EQU  $ed53
0231+  0000             initialize_game  .EQU  $f878
0232+  0000             init_player_game .EQU  $f8ad
0233+  0000             init_player_up   .EQU  $f8d2
0234+  0000             init_player_sys  .EQU  $f933
0235+  0000             irq_entry        .EQU  $fff8
0236+  0000             killthread       .EQU  $ea67
0237+  0000             killthread_sp    .EQU  $eacc
0238+  0000             kill_thread      .EQU  $eaf3
0239+  0000             kill_threads     .EQU  $eafb
0240+  0000             lampbuffer0      .EQU  $0010
0241+  0000             lampbufferselect .EQU  $0020
0242+  0000             lampbuffer1      .EQU  $0028
0243+  0000             lampflashflag    .EQU  $0030
0244+  0000             lamp_index_word  .EQU  $008a
0245+  0000             lamp_bit         .EQU  $008c
0246+  0000             lamp_flash_rate  .EQU  $00b5
0247+  0000             lamp_flash_count .EQU  $00b6
0248+  0000             lastsound        .EQU  $00b9
0249+  0000             loadpricing      .EQU  $efd0
0250+  0000             lampbuffers      .EQU  $f134
0251+  0000             lamp_on          .EQU  $f13c
0252+  0000             lamp_or          .EQU  $f141
0253+  0000             lamp_commit      .EQU  $f147
0254+  0000             lamp_done        .EQU  $f157
0255+  0000             lamp_off         .EQU  $f15b
0256+  0000             lamp_and         .EQU  $f160
0257+  0000             lamp_flash       .EQU  $f169
0258+  0000             lamp_invert      .EQU  $f170
0259+  0000             lamp_eor         .EQU  $f175
0260+  0000             lamp_on_b        .EQU  $f17e
0261+  0000             lamp_off_b       .EQU  $f183
0262+  0000             lamp_invert_b    .EQU  $f188
0263+  0000             lamp_on_1        .EQU  $f18d
0264+  0000             lamp_off_1       .EQU  $f192
0265+  0000             lamp_invert_1    .EQU  $f197
0266+  0000             lampm_off        .EQU  $f1a7
0267+  0000             lampm_noflash    .EQU  $f1b6
0268+  0000             lampm_f          .EQU  $f1c7
0269+  0000             lampm_a          .EQU  $f1ee
0270+  0000             lampm_b          .EQU  $f1f8
0271+  0000             lampm_8          .EQU  $f208
0272+  0000             lampr_start      .EQU  $f21a
0273+  0000             lr_ret           .EQU  $f21f
0274+  0000             lampr_end        .EQU  $f226
0275+  0000             lampr_setup      .EQU  $f22c
0276+  0000             lamp_left        .EQU  $f255
0277+  0000             ls_ret           .EQU  $f25a
0278+  0000             lamp_right       .EQU  $f264
0279+  0000             lampm_c          .EQU  $f26b
0280+  0000             lm_test          .EQU  $f26d
0281+  0000             lampm_e          .EQU  $f27c
0282+  0000             lampm_d          .EQU  $f294
0283+  0000             lampm_z          .EQU  $f2b3
0284+  0000             lampm_x          .EQU  $f302
0285+  0000             load_sw_no       .EQU  $f5b0
0286+  0000             lesscredit       .EQU  $fbc1
0287+  0000             mbip_b0          .EQU  $0058
0288+  0000             mbip_b1          .EQU  $0059
0289+  0000             mbipp3p4_bufferselect .EQU  $008f
0290+  0000             minutetimer      .EQU  $00d4
0291+  0000             main             .EQU  $e8ad
0292+  0000             master_vm_lookup .EQU  $f319
0293+  0000             macro_start      .EQU  $f3ab
0294+  0000             macro_rts        .EQU  $f3af
0295+  0000             macro_go         .EQU  $f3b5
0296+  0000             macro_pcminus100 .EQU  $f3db
0297+  0000             macro_code_start .EQU  $f3e2
0298+  0000             macro_special    .EQU  $f3ea
0299+  0000             macro_extraball  .EQU  $f3ef
0300+  0000             macro_x8f        .EQU  $f3fb
0301+  0000             macro_17         .EQU  $f418
0302+  0000             macro_x17        .EQU  $f41b
0303+  0000             macro_exec       .EQU  $f46b
0304+  0000             macro_getnextbyte .EQU  $f495
0305+  0000             macro_ramadd     .EQU  $f4aa
0306+  0000             macro_ramcopy    .EQU  $f4bf
0307+  0000             macro_set_pri    .EQU  $f4ca
0308+  0000             macro_delay_imm_b .EQU  $f4d2
0309+  0000             macro_getnextword .EQU  $f4e2
0310+  0000             macro_get2bytes  .EQU  $f4ea
0311+  0000             macro_rem_th_s   .EQU  $f4ef
0312+  0000             macro_rem_th_m   .EQU  $f4f6
0313+  0000             macro_jsr_noreturn .EQU  $f4fd
0314+  0000             macro_a_ram      .EQU  $f509
0315+  0000             macro_b_ram      .EQU  $f518
0316+  0000             macro_jsr_return .EQU  $f527
0317+  0000             macro_jmp_cpu    .EQU  $f54f
0318+  0000             macro_jmp_abs    .EQU  $f566
0319+  0000             macro_pcadd      .EQU  $f58e
0320+  0000             macro_setswitch  .EQU  $f5a4
0321+  0000             macro_clearswitch .EQU  $f5bc
0322+  0000             macro_branch     .EQU  $f5cd
0323+  0000             num_players      .EQU  $00cc
0324+  0000             num_eb           .EQU  $00d0
0325+  0000             num_tilt         .EQU  $00d3
0326+  0000             next_sw          .EQU  $e910
0327+  0000             nextthread       .EQU  $e9ff
0328+  0000             newthread_sp     .EQU  $ea78
0329+  0000             newthread_06     .EQU  $eac4
0330+  0000             nmi_entry        .EQU  $fffc
0331+  0000             outhole_main     .EQU  $f9ab
0332+  0000             player_up        .EQU  $00cd
0333+  0000             pscore_buf       .EQU  $00ce
0334+  0000             p1_gamedata      .EQU  $1140
0335+  0000             p2_gamedata      .EQU  $1159
0336+  0000             p3_gamedata      .EQU  $1172
0337+  0000             p4_gamedata      .EQU  $118b
0338+  0000             pia_sound_data   .EQU  $2100
0339+  0000             pia_sound_ctrl   .EQU  $2101
0340+  0000             pia_comma_data   .EQU  $2102
0341+  0000             pia_comma_ctrl   .EQU  $2103
0342+  0000             pia_sol_low_data .EQU  $2200
0343+  0000             pia_sol_low_ctrl .EQU  $2201
0344+  0000             pia_sol_high_data .EQU  $2202
0345+  0000             pia_sol_high_ctrl .EQU  $2203
0346+  0000             pia_lamp_row_data .EQU  $2400
0347+  0000             pia_lamp_row_ctrl .EQU  $2401
0348+  0000             pia_lamp_col_data .EQU  $2402
0349+  0000             pia_lamp_col_ctrl .EQU  $2403
0350+  0000             pia_disp_digit_data .EQU  $2800
0351+  0000             pia_disp_digit_ctrl .EQU  $2801
0352+  0000             pia_disp_seg_data .EQU  $2802
0353+  0000             pia_disp_seg_ctrl .EQU  $2803
0354+  0000             pia_switch_return_data .EQU  $3000
0355+  0000             pia_switch_return_ctrl .EQU  $3001
0356+  0000             pia_switch_strobe_data .EQU  $3002
0357+  0000             pia_switch_strobe_ctrl .EQU  $3003
0358+  0000             pia_alphanum_digit_data .EQU  $4000
0359+  0000             pia_alphanum_digit_ctrl .EQU  $4001
0360+  0000             pia_alphanum_seg_data .EQU  $4002
0361+  0000             pia_alphanum_seg_ctrl .EQU  $4003
0362+  0000             pri_next         .EQU  $eb0a
0363+  0000             pri_skipme       .EQU  $eb17
0364+  0000             pack_done        .EQU  $eeb8
0365+  0000             pia_ddr_data     .EQU  $f10e
0366+  0000             pc_sto2          .EQU  $f505
0367+  0000             pc_sto           .EQU  $f54a
0368+  0000             pull_ba_rts      .EQU  $f75c
0369+  0000             ptrx_plus_1      .EQU  $f77f
0370+  0000             ptrx_plus_a      .EQU  $f784
0371+  0000             ptrx_plus        .EQU  $f785
0372+  0000             player_ready     .EQU  $f8dd
0373+  0000             powerup_init     .EQU  $fa34
0374+  0000             randomseed       .EQU  $00d7
0375+  0000             reset            .EQU  $e800
0376+  0000             reset_audits     .EQU  $ef6f
0377+  0000             restore_hstd     .EQU  $ef9d
0378+  0000             ram_sto2         .EQU  $f4ba
0379+  0000             ret_sto          .EQU  $f529
0380+  0000             ram_sto          .EQU  $f574
0381+  0000             ret_false        .EQU  $f657
0382+  0000             ret_true         .EQU  $f65e
0383+  0000             resetplayerdata  .EQU  $f952
0384+  0000             rambad           .EQU  $ff1f
0385+  0000             res_entry        .EQU  $fffe
0386+  0000             score_p1_b0      .EQU  $0038
0387+  0000             score_p3_b0      .EQU  $0040
0388+  0000             score_p4_b0      .EQU  $0044
0389+  0000             score_p1_b1      .EQU  $0048
0390+  0000             score_p2_b1      .EQU  $004c
0391+  0000             score_p3_b1      .EQU  $0050
0392+  0000             score_p4_b1      .EQU  $0054
0393+  0000             switch_debounced .EQU  $0061
0394+  0000             switch_masked    .EQU  $0069
0395+  0000             switch_pending   .EQU  $0071
0396+  0000             switch_aux       .EQU  $0079
0397+  0000             switch_b4        .EQU  $0081
0398+  0000             swap_player_displays .EQU  $0090
0399+  0000             solenoid_address .EQU  $0091
0400+  0000             solenoid_bitpos  .EQU  $0093
0401+  0000             solenoid_counter .EQU  $0094
0402+  0000             switch_queue_pointer .EQU  $0096
0403+  0000             solenoid_queue_pointer .EQU  $0098
0404+  0000             sys_temp1        .EQU  $00a0
0405+  0000             sys_temp2        .EQU  $00a1
0406+  0000             sys_temp3        .EQU  $00a2
0407+  0000             sys_temp4        .EQU  $00a3
0408+  0000             sys_temp5        .EQU  $00a4
0409+  0000             sw_encoded       .EQU  $00a5
0410+  0000             sys_temp_w2      .EQU  $00a6
0411+  0000             sys_temp_w3      .EQU  $00a8
0412+  0000             soundcount       .EQU  $00b8
0413+  0000             soundptr         .EQU  $00bb
0414+  0000             soundirqcount    .EQU  $00bd
0415+  0000             soundindex_com   .EQU  $00bf
0416+  0000             sys_soundflags   .EQU  $00c1
0417+  0000             soundindex       .EQU  $00c2
0418+  0000             spare_ram        .EQU  $00e0
0419+  0000             switch_queue     .EQU  $1100
0420+  0000             sol_queue        .EQU  $1118
0421+  0000             score_queue      .EQU  $1128
0422+  0000             switches         .EQU  $e90d
0423+  0000             sw_break         .EQU  $e942
0424+  0000             solq             .EQU  $e970
0425+  0000             snd_queue        .EQU  $e98c
0426+  0000             solbuf           .EQU  $eb23
0427+  0000             set_solenoid     .EQU  $eb47
0428+  0000             set_ss_off       .EQU  $eb5f
0429+  0000             set_s_pia        .EQU  $eb62
0430+  0000             set_ss_on        .EQU  $eb6b
0431+  0000             soladdr          .EQU  $eb71
0432+  0000             ssoladdr         .EQU  $eb82
0433+  0000             set_comma_bit    .EQU  $ebc4
0434+  0000             snd_pts          .EQU  $ec01
0435+  0000             score_main       .EQU  $ec05
0436+  0000             score_update     .EQU  $ec1d
0437+  0000             score2hex        .EQU  $ec86
0438+  0000             sh_exit          .EQU  $ec95
0439+  0000             split_ab         .EQU  $ecf3
0440+  0000             sound_sub        .EQU  $ed03
0441+  0000             snd_exit_pull    .EQU  $ed99
0442+  0000             snd_exit         .EQU  $ed9b
0443+  0000             send_snd_save    .EQU  $ed9e
0444+  0000             send_snd         .EQU  $eda0
0445+  0000             store_csndflg    .EQU  $edbf
0446+  0000             sw_ignore        .EQU  $ee01
0447+  0000             sw_active        .EQU  $ee02
0448+  0000             sw_down          .EQU  $ee04
0449+  0000             sw_dtime         .EQU  $ee15
0450+  0000             sw_trig_yes      .EQU  $ee19
0451+  0000             sw_proc          .EQU  $ee48
0452+  0000             sw_pack          .EQU  $eeab
0453+  0000             sw_get_time      .EQU  $eedb
0454+  0000             sw_tbl_lookup    .EQU  $eef7
0455+  0000             setup_vm_stack   .EQU  $ef22
0456+  0000             stack_done       .EQU  $ef3f
0457+  0000             sys_irq          .EQU  $eff7
0458+  0000             spec_sol_def     .EQU  $f122
0459+  0000             switch_entry     .EQU  $f3cb
0460+  0000             set_logic        .EQU  $f68b
0461+  0000             store_display_mask .EQU  $f8a4
0462+  0000             setplayerbuffer  .EQU  $f8bc
0463+  0000             saveplayertobuffer .EQU  $f9cb
0464+  0000             show_hstd        .EQU  $fa0b
0465+  0000             set_gameover     .EQU  $fa44
0466+  0000             show_all_scores  .EQU  $fa58
0467+  0000             set_hstd         .EQU  $fad7
0468+  0000             send_sound       .EQU  $fb30
0469+  0000             start_new_game   .EQU  $fbbc
0470+  0000             selftest_entry   .EQU  $fc23
0471+  0000             st_diagnostics   .EQU  $fc31
0472+  0000             st_init          .EQU  $fc80
0473+  0000             st_nexttest      .EQU  $fc94
0474+  0000             show_func        .EQU  $fccf
0475+  0000             st_reset         .EQU  $fd16
0476+  0000             st_display       .EQU  $fe43
0477+  0000             st_sound         .EQU  $fe62
0478+  0000             st_lamp          .EQU  $fe8d
0479+  0000             st_autocycle     .EQU  $feac
0480+  0000             st_solenoid      .EQU  $fecb
0481+  0000             st_switch        .EQU  $fef0
0482+  0000             st_swnext        .EQU  $fefc
0483+  0000             swi_entry        .EQU  $fffa
0484+  0000             temp1            .EQU  $009a
0485+  0000             temp2            .EQU  $009c
0486+  0000             temp3            .EQU  $009e
0487+  0000             thread_priority  .EQU  $00aa
0488+  0000             thread_timer_byte .EQU  $00b7
0489+  0000             time             .EQU  $e8f0
0490+  0000             test_mask_b      .EQU  $ebd0
0491+  0000             to_ldx_rts       .EQU  $ee95
0492+  0000             to_macro_go1     .EQU  $f433
0493+  0000             to_macro_go2     .EQU  $f4bc
0494+  0000             to_getx_rts      .EQU  $f516
0495+  0000             to_macro_go4     .EQU  $f54c
0496+  0000             to_macro_go3     .EQU  $f5c7
0497+  0000             to_macro_getnextbyte .EQU  $f5ca
0498+  0000             to_rts3          .EQU  $f63a
0499+  0000             test_z           .EQU  $f643
0500+  0000             test_c           .EQU  $f64a
0501+  0000             to_rts4          .EQU  $f68a
0502+  0000             to_pula_rts      .EQU  $f898
0503+  0000             to_copyblock     .EQU  $f9e3
0504+  0000             to_rts1          .EQU  $fb23
0505+  0000             to_rts2          .EQU  $fb91
0506+  0000             tilt_warning     .EQU  $fbdd
0507+  0000             testdata         .EQU  $fbfa
0508+  0000             testlists        .EQU  $fc04
0509+  0000             to_clear_range   .EQU  $fc91
0510+  0000             to_audadj        .EQU  $fca3
0511+  0000             tightloop        .EQU  $ff7f
0512+  0000             unused_ram1      .EQU  $00ab
0513+  0000             unknown_ram4     .EQU  $00c5
0514+  0000             unknown_ram5     .EQU  $00c6
0515+  0000             unknown_ram6     .EQU  $00c7
0516+  0000             update_commas    .EQU  $eba1
0517+  0000             update_eb_count  .EQU  $ebdb
0518+  0000             unpack_byte      .EQU  $f19c
0519+  0000             update_hstd      .EQU  $faf5
0520+  0000             vm_reg_a         .EQU  $0000
0521+  0000             vm_reg_b         .EQU  $0001
0522+  0000             vm_base          .EQU  $00ad
0523+  0000             vm_nextslot      .EQU  $00af
0524+  0000             vm_tail_thread   .EQU  $00b3
0525+  0000             vm_pc            .EQU  $00d1
0526+  0000             vm_irqcheck      .EQU  $e946
0527+  0000             vm_lookup_0x     .EQU  $f339
0528+  0000             vm_lookup_1x_a   .EQU  $f347
0529+  0000             vm_lookup_1x_b   .EQU  $f357
0530+  0000             vm_lookup_2x     .EQU  $f35f
0531+  0000             vm_lookup_4x     .EQU  $f365
0532+  0000             vm_lookup_5x     .EQU  $f36b
0533+  0000             vm_control_0x    .EQU  $f3d3
0534+  0000             vm_control_1x    .EQU  $f3f4
0535+  0000             vm_control_2x    .EQU  $f436
0536+  0000             vm_control_3x    .EQU  $f442
0537+  0000             vm_control_4x    .EQU  $f44f
0538+  0000             vm_control_5x    .EQU  $f4a1
0539+  0000             vm_control_6x    .EQU  $f540
0540+  0000             vm_control_7x    .EQU  $f544
0541+  0000             vm_control_8x    .EQU  $f548
0542+  0000             vm_control_9x    .EQU  $f558
0543+  0000             vm_control_ax    .EQU  $f562
0544+  0000             vm_control_bx    .EQU  $f56b
0545+  0000             vm_control_cx    .EQU  $f578
0546+  0000             vm_control_dx    .EQU  $f57d
0547+  0000             vm_control_ex    .EQU  $f587
0548+  0000             vm_control_fx    .EQU  $f587
0549+  0000             write_range      .EQU  $f840
0550+  0000             wordplusbyte     .EQU  $fb17
0551+  0000             x_temp_1         .EQU  $00d8
0552+  0000             x_temp_2         .EQU  $00de
0553+  0000             xplusa           .EQU  $eeff
0554+  0000             xplusb           .EQU  $ef4d
0007   0000             #include  "wvm7.asm"	;Level 7 macro defines
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Level 7 Virtual Machine Macro Definitions
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             .module wml7
0012+  0000             .msfirst
0013+  0000             
0014+  0000             wml1_       .equ  $00
0015+  0000             wml2_       .equ  $00
0016+  0000             wml3_       .equ  $00
0017+  0000             wml4_       .equ  $00
0018+  0000             wml5_       .equ  $00
0019+  0000             wml6_       .equ  $00
0020+  0000             
0021+  0000             #define     FLAG_WML_IF       $10
0022+  0000             #define     FLAG_WML_ELSE     $20
0023+  0000             #define	FLAG_WML_BEGIN 	$40
0024+  0000             #define     FLAG_WML_EXE      $80
0025+  0000             
0026+  0000             ;********************************************************
0027+  0000             ;* First Define the Thread Structure used in the virtual 
0028+  0000             ;* machine linked list.
0029+  0000             ;********************************************************
0030+  0000             ;* Next:	This is the pointer to the next thread in 
0031+  0000             ;* 		the linked list. The VM requires this to 
0032+  0000             ;*		move about the list of threads. This is 
0033+  0000             ;* 		set by the VM thread handlers and does not
0034+  0000             ;*          need to be manually fiddled with by the 
0035+  0000             ;*          game program as it is automatic.
0036+  0000             ;*
0037+  0000             ;* Timer:	This is a byte timer (0-255) that holds the 
0038+  0000             ;*          number of IRQ's counts required before the 
0039+  0000             ;*          thread is executed. This is set by the 
0040+  0000             ;*          programmer for delays between executions.	
0041+  0000             ;*
0042+  0000             ;* Vars:	When a thread is created, the originating
0043+  0000             ;*          program may push up to 8 additional bytes
0044+  0000             ;* 		of data onto the stack which will then be
0045+  0000             ;*          placed into these 8 byte holders.
0046+  0000             ;*
0047+  0000             ;* PC:	This is the address of the program entry 
0048+  0000             ;*          point that will be executed when the thread
0049+  0000             ;*       	timer expires.
0050+  0000             ;*
0051+  0000             ;* ID:	The thread ID is a number that identifies 
0052+  0000             ;* 		the thread type. The ID defintions are all
0053+  0000             ;*		decided by the programmer except for thread
0054+  0000             ;*		ID #06 which is a general 'end-of-ball' terminated
0055+  0000             ;*		thread. Because the VM can destroy groups of 
0056+  0000             ;* 		threads by ID and branch on existence of threads
0057+  0000             ;*    	with certain ID's, this is a very important
0058+  0000             ;*		design consideration. See the programming 
0059+  0000             ;*  		manual for more information.
0060+  0000             ;*	
0061+  0000             ;* RegA:	This holds the value that was contained in 
0062+  0000             ;*		the CPU register A when the Thread was created.
0063+  0000             ;*
0064+  0000             ;* RegB:	Similar to above, holds the value of CPU reg B.
0065+  0000             ;*
0066+  0000             ;* RegX:	Again, holds the value of the X register upon
0067+  0000             ;*		thread creation.
0068+  0000             ;*
0069+  0000             ;************************************************************
0070+  0000             
0071+  0000             threadobj_next	.equ	$00
0072+  0000             threadobj_timer	.equ	$02
0073+  0000             threadobj_var1	.equ	$03
0074+  0000             threadobj_var2	.equ	$04
0075+  0000             threadobj_var3	.equ	$05
0076+  0000             threadobj_var4	.equ	$06
0077+  0000             threadobj_var5	.equ	$07
0078+  0000             threadobj_var6	.equ	$09
0079+  0000             threadobj_var7	.equ	$09
0080+  0000             threadobj_var8	.equ	$0a
0081+  0000             threadobj_pc	.equ	$0b
0082+  0000             threadobj_id	.equ	$0d
0083+  0000             threadobj_rega	.equ	$0e
0084+  0000             threadobj_regb	.equ	$0f
0085+  0000             threadobj_regx	.equ	$10
0086+  0000             
0087+  0000             ;********************************************************
0088+  0000             ;* Now define some standard RAM locations etc...
0089+  0000             ;********************************************************
0090+  0000             rega	.equ	$00
0091+  0000             regb	.equ	$01
0092+  0000             
0093+  0000             ;********************************************************
0094+  0000             ;* Switch Table Equates
0095+  0000             ;********************************************************
0096+  0000             #define	SWITCHENTRY(a,b)	\.db a \.dw b
0097+  0000             
0098+  0000             sf_wml7	      .equ	$80
0099+  0000             sf_code 	      .equ 	$00
0100+  0000             sf_tilt	      .equ	$40
0101+  0000             sf_notilt         .equ  $00
0102+  0000             sf_gameover	      .equ	$20
0103+  0000             sf_nogameover     .equ  $00
0104+  0000             sf_enabled	      .equ	$10
0105+  0000             sf_disabled       .equ  $00
0106+  0000             sf_instant	      .equ	$08
0107+  0000             sf_delayed        .equ  $00
0108+  0000             
0109+  0000             ;********************************************************
0110+  0000             ;* Test for our current execution mode, CODE or WML7
0111+  0000             ;* If we think the programmer has their code wrong, 
0112+  0000             ;* then throw an error.
0113+  0000             ;********************************************************
0114+  0000             ;_MODECPU_         .equ  $00
0115+  0000             ;_MODEWML_         .equ  $80
0116+  0000             ;_CURRENTMODE_     .equ  _MODECPU_
0117+  0000             ;
0118+  0000             ;#define     _SETMODECPU_      \_CURRENTMODE_     .set  _MODECPU_
0119+  0000             ;#define     _SETMODEWML_      \_CURRENTMODE_     .set  _MODEWML_
0120+  0000             ;
0121+  0000             ;#define     _CHECKWML_        \#if _CURRENTMODE_ != _MODEWML_
0122+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect WML codes now, are you sure your code is structured properly?"
0123+  0000             ;#defcont                      \#endif
0124+  0000             ;
0125+  0000             ;#define     _CHECKCPU_        \#if _CURRENTMODE_ != _MODECPU_
0126+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect CPU codes now, are you sure your code is structured properly?"
0127+  0000             ;#defcont                      \#endif
0128+  0000             ;********************************************************
0129+  0000             ;* Define our Level 7 macros.
0130+  0000             ;********************************************************
0131+  0000             
0132+  0000             #define 	PC100_	\.db $00	
0133+  0000             #define 	NOP_		\.db $01	
0134+  0000             #define	MRTS_		\.db $02
0135+  0000             #define	KILL_		\.db $03	
0136+  0000             #define 	CPUX_		\.db $04
0137+  0000             #define	SPEC_		\.db $05	
0138+  0000             #define	EB_		\.db $06	
0139+  0000             
0140+  0000             ;********************************************************
0141+  0000             ;* Lamp Macro Definition: These take care of turning lamps
0142+  0000             ;*                        on/off and doing the basic lamp
0143+  0000             ;*                        effects.
0144+  0000             ;********************************************************
0145+  0000             #define	BITX_(x,a)		      \.db x,a
0146+  0000             #define	BITX_(x,a,b)		\.db x,((a&$7F)+$80),b
0147+  0000             #define	BITX_(x,a,b,c)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),c
0148+  0000             #define	BITX_(x,a,b,c,d)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0149+  0000             #define	BITX_(x,a,b,c,d,e)	\.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0150+  0000             #define	BITX_(x,a,b,c,d,e,f)    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
0151+  0000             #define	BITX_(x,a,b,c,d,e,f,g)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
0152+  0000             
0153+  0000             #define	BITON_(a)		      \BITX_($10,a)
0154+  0000             #define	BITON_(a,b)		      \BITX_($10,a,b)
0155+  0000             #define	BITON_(a,b,c)	      \BITX_($10,a,b,c)
0156+  0000             #define	BITON_(a,b,c,d)	      \BITX_($10,a,b,c,d)
0157+  0000             #define	BITON_(a,b,c,d,e)	      \BITX_($10,a,b,c,d,e)
0158+  0000             #define	BITON_(a,b,c,d,e,f)     \BITX_($10,a,b,c,d,e,f)
0159+  0000             #define	BITON_(a,b,c,d,e,f,g)   \BITX_($10,a,b,c,d,e,f,g)
0160+  0000             
0161+  0000             #define	BITOFF_(a)		      \BITX_($11,a)            
0162+  0000             #define	BITOFF_(a,b)		\BITX_($11,a,b)          
0163+  0000             #define	BITOFF_(a,b,c)	      \BITX_($11,a,b,c)        
0164+  0000             #define	BITOFF_(a,b,c,d)	      \BITX_($11,a,b,c,d)      
0165+  0000             #define	BITOFF_(a,b,c,d,e)	\BITX_($11,a,b,c,d,e)    
0166+  0000             #define	BITOFF_(a,b,c,d,e,f)    \BITX_($11,a,b,c,d,e,f)  
0167+  0000             #define	BITOFF_(a,b,c,d,e,f,g)  \BITX_($11,a,b,c,d,e,f,g)
0168+  0000                                                 
0169+  0000             #define	BITINV_(a)		      \BITX_($12,a)            
0170+  0000             #define	BITINV_(a,b)		\BITX_($12,a,b)          
0171+  0000             #define	BITINV_(a,b,c)	      \BITX_($12,a,b,c)        
0172+  0000             #define	BITINV_(a,b,c,d)	      \BITX_($12,a,b,c,d)      
0173+  0000             #define	BITINV_(a,b,c,d,e)	\BITX_($12,a,b,c,d,e)    
0174+  0000             #define	BITINV_(a,b,c,d,e,f)    \BITX_($12,a,b,c,d,e,f)  
0175+  0000             #define	BITINV_(a,b,c,d,e,f,g)  \BITX_($12,a,b,c,d,e,f,g)
0176+  0000             
0177+  0000             #define	BITFL_(a)		      \BITX_($13,a)            
0178+  0000             #define	BITFL_(a,b)			\BITX_($13,a,b)          
0179+  0000             #define	BITFL_(a,b,c)	      \BITX_($13,a,b,c)        
0180+  0000             #define	BITFL_(a,b,c,d)	      \BITX_($13,a,b,c,d)      
0181+  0000             #define	BITFL_(a,b,c,d,e)		\BITX_($13,a,b,c,d,e)    
0182+  0000             #define	BITFL_(a,b,c,d,e,f)    	\BITX_($13,a,b,c,d,e,f)  
0183+  0000             #define	BITFL_(a,b,c,d,e,f,g)  	\BITX_($13,a,b,c,d,e,f,g)
0184+  0000              
0185+  0000             #define	BITONP_(a)		      \BITX_($14,a)            
0186+  0000             #define	BITONP_(a,b)		\BITX_($14,a,b)          
0187+  0000             #define	BITONP_(a,b,c)	      \BITX_($14,a,b,c)        
0188+  0000             #define	BITONP_(a,b,c,d)	      \BITX_($14,a,b,c,d)      
0189+  0000             #define	BITONP_(a,b,c,d,e)	\BITX_($14,a,b,c,d,e)    
0190+  0000             #define	BITONP_(a,b,c,d,e,f)    \BITX_($14,a,b,c,d,e,f)  
0191+  0000             #define	BITONP_(a,b,c,d,e,f,g)  \BITX_($14,a,b,c,d,e,f,g)
0192+  0000             
0193+  0000             #define	BITOFFP_(a)		      \BITX_($15,a)            
0194+  0000             #define	BITOFFP_(a,b)		\BITX_($15,a,b)          
0195+  0000             #define	BITOFFP_(a,b,c)	      \BITX_($15,a,b,c)        
0196+  0000             #define	BITOFFP_(a,b,c,d)	      \BITX_($15,a,b,c,d)      
0197+  0000             #define	BITOFFP_(a,b,c,d,e)	\BITX_($15,a,b,c,d,e)    
0198+  0000             #define	BITOFFP_(a,b,c,d,e,f)   \BITX_($15,a,b,c,d,e,f)  
0199+  0000             #define	BITOFFP_(a,b,c,d,e,f,g) \BITX_($15,a,b,c,d,e,f,g)
0200+  0000             
0201+  0000             #define	BITINVP_(a)		      \BITX_($16,a)            
0202+  0000             #define	BITINVP_(a,b)		\BITX_($16,a,b)          
0203+  0000             #define	BITINVP_(a,b,c)	      \BITX_($16,a,b,c)        
0204+  0000             #define	BITINVP_(a,b,c,d)	      \BITX_($16,a,b,c,d)      
0205+  0000             #define	BITINVP_(a,b,c,d,e)	\BITX_($16,a,b,c,d,e)    
0206+  0000             #define	BITINVP_(a,b,c,d,e,f)   \BITX_($16,a,b,c,d,e,f)  
0207+  0000             #define	BITINVP_(a,b,c,d,e,f,g) \BITX_($16,a,b,c,d,e,f,g)
0208+  0000             
0209+  0000             #define	BITFLP_(a)		      \BITX_($17,a)            
0210+  0000             #define	BITFLP_(a,b)		\BITX_($17,a,b)          
0211+  0000             #define	BITFLP_(a,b,c)	      \BITX_($17,a,b,c)        
0212+  0000             #define	BITFLP_(a,b,c,d)	      \BITX_($17,a,b,c,d)      
0213+  0000             #define	BITFLP_(a,b,c,d,e)	\BITX_($17,a,b,c,d,e)    
0214+  0000             #define	BITFLP_(a,b,c,d,e,f)   	\BITX_($17,a,b,c,d,e,f)  
0215+  0000             #define	BITFLP_(a,b,c,d,e,f,g) 	\BITX_($17,a,b,c,d,e,f,g)
0216+  0000             
0217+  0000             ;************************
0218+  0000             ;* Lamp/Bit Effects
0219+  0000             ;************************
0220+  0000             #define	BE18_(a)		      \BITX_($18,a)            
0221+  0000             #define	BE18_(a,b)			\BITX_($18,a,b)          
0222+  0000             #define	BE18_(a,b,c)	      \BITX_($18,a,b,c)        
0223+  0000             #define	BE18_(a,b,c,d)	      \BITX_($18,a,b,c,d)      
0224+  0000             #define	BE18_(a,b,c,d,e)		\BITX_($18,a,b,c,d,e)    
0225+  0000             #define	BE18_(a,b,c,d,e,f)   	\BITX_($18,a,b,c,d,e,f)  
0226+  0000             #define	BE18_(a,b,c,d,e,f,g) 	\BITX_($18,a,b,c,d,e,f,g)
0227+  0000             
0228+  0000             #define	BE19_(a)		      \BITX_($19,a)            
0229+  0000             #define	BE19_(a,b)			\BITX_($19,a,b)          
0230+  0000             #define	BE19_(a,b,c)	      \BITX_($19,a,b,c)        
0231+  0000             #define	BE19_(a,b,c,d)	      \BITX_($19,a,b,c,d)      
0232+  0000             #define	BE19_(a,b,c,d,e)		\BITX_($19,a,b,c,d,e)    
0233+  0000             #define	BE19_(a,b,c,d,e,f)   	\BITX_($19,a,b,c,d,e,f)  
0234+  0000             #define	BE19_(a,b,c,d,e,f,g) 	\BITX_($19,a,b,c,d,e,f,g)
0235+  0000             
0236+  0000             #define	BE1A_(a)		      \BITX_($1A,a)            
0237+  0000             #define	BE1A_(a,b)			\BITX_($1A,a,b)          
0238+  0000             #define	BE1A_(a,b,c)	      \BITX_($1A,a,b,c)        
0239+  0000             #define	BE1A_(a,b,c,d)	      \BITX_($1A,a,b,c,d)      
0240+  0000             #define	BE1A_(a,b,c,d,e)		\BITX_($1A,a,b,c,d,e)    
0241+  0000             #define	BE1A_(a,b,c,d,e,f)   	\BITX_($1A,a,b,c,d,e,f)  
0242+  0000             #define	BE1A_(a,b,c,d,e,f,g) 	\BITX_($1A,a,b,c,d,e,f,g)
0243+  0000             
0244+  0000             #define	BE1B_(a)		      \BITX_($1B,a)            
0245+  0000             #define	BE1B_(a,b)			\BITX_($1B,a,b)          
0246+  0000             #define	BE1B_(a,b,c)	      \BITX_($1B,a,b,c)        
0247+  0000             #define	BE1B_(a,b,c,d)	      \BITX_($1B,a,b,c,d)      
0248+  0000             #define	BE1B_(a,b,c,d,e)		\BITX_($1B,a,b,c,d,e)    
0249+  0000             #define	BE1B_(a,b,c,d,e,f)   	\BITX_($1B,a,b,c,d,e,f)  
0250+  0000             #define	BE1B_(a,b,c,d,e,f,g) 	\BITX_($1B,a,b,c,d,e,f,g)
0251+  0000             
0252+  0000             #define	BE1C_(a)		      \BITX_($1C,a)            
0253+  0000             #define	BE1C_(a,b)			\BITX_($1C,a,b)          
0254+  0000             #define	BE1C_(a,b,c)	      \BITX_($1C,a,b,c)        
0255+  0000             #define	BE1C_(a,b,c,d)	      \BITX_($1C,a,b,c,d)      
0256+  0000             #define	BE1C_(a,b,c,d,e)		\BITX_($1C,a,b,c,d,e)    
0257+  0000             #define	BE1C_(a,b,c,d,e,f)   	\BITX_($1C,a,b,c,d,e,f)  
0258+  0000             #define	BE1C_(a,b,c,d,e,f,g) 	\BITX_($1C,a,b,c,d,e,f,g)
0259+  0000             
0260+  0000             #define	BE1D_(a)		      \BITX_($1D,a)            
0261+  0000             #define	BE1D_(a,b)			\BITX_($1D,a,b)          
0262+  0000             #define	BE1D_(a,b,c)	      \BITX_($1D,a,b,c)        
0263+  0000             #define	BE1D_(a,b,c,d)	      \BITX_($1D,a,b,c,d)      
0264+  0000             #define	BE1D_(a,b,c,d,e)		\BITX_($1D,a,b,c,d,e)    
0265+  0000             #define	BE1D_(a,b,c,d,e,f)   	\BITX_($1D,a,b,c,d,e,f)  
0266+  0000             #define	BE1D_(a,b,c,d,e,f,g) 	\BITX_($1D,a,b,c,d,e,f,g)
0267+  0000             
0268+  0000             #define	BE1E_(a)		      \BITX_($1E,a)            
0269+  0000             #define	BE1E_(a,b)			\BITX_($1E,a,b)          
0270+  0000             #define	BE1E_(a,b,c)	      \BITX_($1E,a,b,c)        
0271+  0000             #define	BE1E_(a,b,c,d)	      \BITX_($1E,a,b,c,d)      
0272+  0000             #define	BE1E_(a,b,c,d,e)		\BITX_($1E,a,b,c,d,e)    
0273+  0000             #define	BE1E_(a,b,c,d,e,f)   	\BITX_($1E,a,b,c,d,e,f)  
0274+  0000             #define	BE1E_(a,b,c,d,e,f,g) 	\BITX_($1E,a,b,c,d,e,f,g)
0275+  0000             
0276+  0000             #define	BE1F_(a)		      \BITX_($1F,a)            
0277+  0000             #define	BE1F_(a,b)			\BITX_($1F,a,b)          
0278+  0000             #define	BE1F_(a,b,c)	      \BITX_($1F,a,b,c)        
0279+  0000             #define	BE1F_(a,b,c,d)	      \BITX_($1F,a,b,c,d)      
0280+  0000             #define	BE1F_(a,b,c,d,e)		\BITX_($1F,a,b,c,d,e)    
0281+  0000             #define	BE1F_(a,b,c,d,e,f)   	\BITX_($1F,a,b,c,d,e,f)  
0282+  0000             #define	BE1F_(a,b,c,d,e,f,g) 	\BITX_($1F,a,b,c,d,e,f,g)
0283+  0000             
0284+  0000             ;BUFFER 2
0285+  0000             
0286+  0000             #define	BITON2_(a)		      	\BITX_($20,a)
0287+  0000             #define	BITON2_(a,b)			\BITX_($20,a,b)
0288+  0000             #define	BITON2_(a,b,c)	      	\BITX_($20,a,b,c)
0289+  0000             #define	BITON2_(a,b,c,d)	      	\BITX_($20,a,b,c,d)
0290+  0000             #define	BITON2_(a,b,c,d,e)		\BITX_($20,a,b,c,d,e)
0291+  0000             #define	BITON2_(a,b,c,d,e,f)    	\BITX_($20,a,b,c,d,e,f)
0292+  0000             #define	BITON2_(a,b,c,d,e,f,g)  	\BITX_($20,a,b,c,d,e,f,g)
0293+  0000             
0294+  0000             #define	BITOFF2_(a)		      	\BITX_($21,a)            
0295+  0000             #define	BITOFF2_(a,b)			\BITX_($21,a,b)          
0296+  0000             #define	BITOFF2_(a,b,c)	      	\BITX_($21,a,b,c)        
0297+  0000             #define	BITOFF2_(a,b,c,d)	      	\BITX_($21,a,b,c,d)      
0298+  0000             #define	BITOFF2_(a,b,c,d,e)		\BITX_($21,a,b,c,d,e)    
0299+  0000             #define	BITOFF2_(a,b,c,d,e,f)   	\BITX_($21,a,b,c,d,e,f)  
0300+  0000             #define	BITOFF2_(a,b,c,d,e,f,g) 	\BITX_($21,a,b,c,d,e,f,g)
0301+  0000                                                 
0302+  0000             #define	BITINV2_(a)		      	\BITX_($22,a)            
0303+  0000             #define	BITINV2_(a,b)			\BITX_($22,a,b)          
0304+  0000             #define	BITINV2_(a,b,c)	      	\BITX_($22,a,b,c)        
0305+  0000             #define	BITINV2_(a,b,c,d)	      	\BITX_($22,a,b,c,d)      
0306+  0000             #define	BITINV2_(a,b,c,d,e)		\BITX_($22,a,b,c,d,e)    
0307+  0000             #define	BITINV2_(a,b,c,d,e,f)   	\BITX_($22,a,b,c,d,e,f)  
0308+  0000             #define	BITINV2_(a,b,c,d,e,f,g) 	\BITX_($22,a,b,c,d,e,f,g)
0309+  0000             
0310+  0000             #define	BITFL2_(a)		      	\BITX_($23,a)            
0311+  0000             #define	BITFL2_(a,b)			\BITX_($23,a,b)          
0312+  0000             #define	BITFL2_(a,b,c)	      	\BITX_($23,a,b,c)        
0313+  0000             #define	BITFL2_(a,b,c,d)	      	\BITX_($23,a,b,c,d)      
0314+  0000             #define	BITFL2_(a,b,c,d,e)		\BITX_($23,a,b,c,d,e)    
0315+  0000             #define	BITFL2_(a,b,c,d,e,f)    	\BITX_($23,a,b,c,d,e,f)  
0316+  0000             #define	BITFL2_(a,b,c,d,e,f,g)  	\BITX_($23,a,b,c,d,e,f,g)
0317+  0000              
0318+  0000             #define	BITONP2_(a)		      	\BITX_($24,a)            
0319+  0000             #define	BITONP2_(a,b)			\BITX_($24,a,b)          
0320+  0000             #define	BITONP2_(a,b,c)	      	\BITX_($24,a,b,c)        
0321+  0000             #define	BITONP2_(a,b,c,d)	      	\BITX_($24,a,b,c,d)      
0322+  0000             #define	BITONP2_(a,b,c,d,e)		\BITX_($24,a,b,c,d,e)    
0323+  0000             #define	BITONP2_(a,b,c,d,e,f)   	\BITX_($24,a,b,c,d,e,f)  
0324+  0000             #define	BITONP2_(a,b,c,d,e,f,g) 	\BITX_($24,a,b,c,d,e,f,g)
0325+  0000             
0326+  0000             #define	BITOFFP2_(a)			\BITX_($25,a)            
0327+  0000             #define	BITOFFP2_(a,b)			\BITX_($25,a,b)          
0328+  0000             #define	BITOFFP2_(a,b,c)	      	\BITX_($25,a,b,c)        
0329+  0000             #define	BITOFFP2_(a,b,c,d)		\BITX_($25,a,b,c,d)      
0330+  0000             #define	BITOFFP2_(a,b,c,d,e)		\BITX_($25,a,b,c,d,e)    
0331+  0000             #define	BITOFFP2_(a,b,c,d,e,f)  	\BITX_($25,a,b,c,d,e,f)  
0332+  0000             #define	BITOFFP2_(a,b,c,d,e,f,g)	\BITX_($25,a,b,c,d,e,f,g)
0333+  0000             
0334+  0000             #define	BITINVP2_(a)			\BITX_($26,a)            
0335+  0000             #define	BITINVP2_(a,b)			\BITX_($26,a,b)          
0336+  0000             #define	BITINVP2_(a,b,c)	      	\BITX_($26,a,b,c)        
0337+  0000             #define	BITINVP2_(a,b,c,d)		\BITX_($26,a,b,c,d)      
0338+  0000             #define	BITINVP2_(a,b,c,d,e)		\BITX_($26,a,b,c,d,e)    
0339+  0000             #define	BITINVP2_(a,b,c,d,e,f)   	\BITX_($26,a,b,c,d,e,f)  
0340+  0000             #define	BITINVP2_(a,b,c,d,e,f,g) 	\BITX_($26,a,b,c,d,e,f,g)
0341+  0000             
0342+  0000             #define	BITFLP2_(a)		      	\BITX_($27,a)            
0343+  0000             #define	BITFLP2_(a,b)			\BITX_($27,a,b)          
0344+  0000             #define	BITFLP2_(a,b,c)	      	\BITX_($27,a,b,c)        
0345+  0000             #define	BITFLP2_(a,b,c,d)	      	\BITX_($27,a,b,c,d)      
0346+  0000             #define	BITFLP2_(a,b,c,d,e)		\BITX_($27,a,b,c,d,e)    
0347+  0000             #define	BITFLP2_(a,b,c,d,e,f)   	\BITX_($27,a,b,c,d,e,f)  
0348+  0000             #define	BITFLP2_(a,b,c,d,e,f,g) 	\BITX_($27,a,b,c,d,e,f,g)
0349+  0000             
0350+  0000             ;************************
0351+  0000             ;* Lamp/Bit Effects
0352+  0000             ;************************
0353+  0000             #define	BE28_(a)		      \BITX_($28,a)            
0354+  0000             #define	BE28_(a,b)			\BITX_($28,a,b)          
0355+  0000             #define	BE28_(a,b,c)	      \BITX_($28,a,b,c)        
0356+  0000             #define	BE28_(a,b,c,d)	      \BITX_($28,a,b,c,d)      
0357+  0000             #define	BE28_(a,b,c,d,e)		\BITX_($28,a,b,c,d,e)    
0358+  0000             #define	BE28_(a,b,c,d,e,f)   	\BITX_($28,a,b,c,d,e,f)  
0359+  0000             #define	BE28_(a,b,c,d,e,f,g) 	\BITX_($28,a,b,c,d,e,f,g)
0360+  0000             
0361+  0000             #define	BE29_(a)		      \BITX_($29,a)            
0362+  0000             #define	BE29_(a,b)			\BITX_($29,a,b)          
0363+  0000             #define	BE29_(a,b,c)	      \BITX_($29,a,b,c)        
0364+  0000             #define	BE29_(a,b,c,d)	      \BITX_($29,a,b,c,d)      
0365+  0000             #define	BE29_(a,b,c,d,e)		\BITX_($29,a,b,c,d,e)    
0366+  0000             #define	BE29_(a,b,c,d,e,f)   	\BITX_($29,a,b,c,d,e,f)  
0367+  0000             #define	BE29_(a,b,c,d,e,f,g) 	\BITX_($29,a,b,c,d,e,f,g)
0368+  0000             
0369+  0000             #define	BE2A_(a)		      \BITX_($2A,a)            
0370+  0000             #define	BE2A_(a,b)			\BITX_($2A,a,b)          
0371+  0000             #define	BE2A_(a,b,c)	      \BITX_($2A,a,b,c)        
0372+  0000             #define	BE2A_(a,b,c,d)	      \BITX_($2A,a,b,c,d)      
0373+  0000             #define	BE2A_(a,b,c,d,e)		\BITX_($2A,a,b,c,d,e)    
0374+  0000             #define	BE2A_(a,b,c,d,e,f)   	\BITX_($2A,a,b,c,d,e,f)  
0375+  0000             #define	BE2A_(a,b,c,d,e,f,g) 	\BITX_($2A,a,b,c,d,e,f,g)
0376+  0000             
0377+  0000             #define	BE2B_(a)		      \BITX_($2B,a)            
0378+  0000             #define	BE2B_(a,b)			\BITX_($2B,a,b)          
0379+  0000             #define	BE2B_(a,b,c)	      \BITX_($2B,a,b,c)        
0380+  0000             #define	BE2B_(a,b,c,d)	      \BITX_($2B,a,b,c,d)      
0381+  0000             #define	BE2B_(a,b,c,d,e)		\BITX_($2B,a,b,c,d,e)    
0382+  0000             #define	BE2B_(a,b,c,d,e,f)   	\BITX_($2B,a,b,c,d,e,f)  
0383+  0000             #define	BE2B_(a,b,c,d,e,f,g) 	\BITX_($2B,a,b,c,d,e,f,g)
0384+  0000             
0385+  0000             #define	BE2C_(a)		      \BITX_($2C,a)            
0386+  0000             #define	BE2C_(a,b)			\BITX_($2C,a,b)          
0387+  0000             #define	BE2C_(a,b,c)	      \BITX_($2C,a,b,c)        
0388+  0000             #define	BE2C_(a,b,c,d)	      \BITX_($2C,a,b,c,d)      
0389+  0000             #define	BE2C_(a,b,c,d,e)		\BITX_($2C,a,b,c,d,e)    
0390+  0000             #define	BE2C_(a,b,c,d,e,f)   	\BITX_($2C,a,b,c,d,e,f)  
0391+  0000             #define	BE2C_(a,b,c,d,e,f,g) 	\BITX_($2C,a,b,c,d,e,f,g)
0392+  0000             
0393+  0000             #define	BE2D_(a)		      \BITX_($2D,a)            
0394+  0000             #define	BE2D_(a,b)			\BITX_($2D,a,b)          
0395+  0000             #define	BE2D_(a,b,c)	      \BITX_($2D,a,b,c)        
0396+  0000             #define	BE2D_(a,b,c,d)	      \BITX_($2D,a,b,c,d)      
0397+  0000             #define	BE2D_(a,b,c,d,e)		\BITX_($2D,a,b,c,d,e)    
0398+  0000             #define	BE2D_(a,b,c,d,e,f)   	\BITX_($2D,a,b,c,d,e,f)  
0399+  0000             #define	BE2D_(a,b,c,d,e,f,g) 	\BITX_($2D,a,b,c,d,e,f,g)
0400+  0000             
0401+  0000             #define	BE2E_(a)		      \BITX_($2E,a)            
0402+  0000             #define	BE2E_(a,b)			\BITX_($2E,a,b)          
0403+  0000             #define	BE2E_(a,b,c)	      \BITX_($2E,a,b,c)        
0404+  0000             #define	BE2E_(a,b,c,d)	      \BITX_($2E,a,b,c,d)      
0405+  0000             #define	BE2E_(a,b,c,d,e)		\BITX_($2E,a,b,c,d,e)    
0406+  0000             #define	BE2E_(a,b,c,d,e,f)   	\BITX_($2E,a,b,c,d,e,f)  
0407+  0000             #define	BE2E_(a,b,c,d,e,f,g) 	\BITX_($2E,a,b,c,d,e,f,g)
0408+  0000             
0409+  0000             #define	BE2F_(a)		      \BITX_($2F,a)            
0410+  0000             #define	BE2F_(a,b)			\BITX_($2F,a,b)          
0411+  0000             #define	BE2F_(a,b,c)	      \BITX_($2F,a,b,c)        
0412+  0000             #define	BE2F_(a,b,c,d)	      \BITX_($2F,a,b,c,d)      
0413+  0000             #define	BE2F_(a,b,c,d,e)		\BITX_($2F,a,b,c,d,e)    
0414+  0000             #define	BE2F_(a,b,c,d,e,f)   	\BITX_($2F,a,b,c,d,e,f)  
0415+  0000             #define	BE2F_(a,b,c,d,e,f,g) 	\BITX_($2F,a,b,c,d,e,f,g)
0416+  0000             
0417+  0000             ;********************************************************
0418+  0000             ;* Solenoid Macro Definition: Up to 15 Solenoids are Supported
0419+  0000             ;* 
0420+  0000             ;* The macro takes a coded value of the solenoid number 
0421+  0000             ;* and the number of IRQ's to leave the solenoid on.
0422+  0000             ;* You can define the solenoid number plus the time by using
0423+  0000             ;* the equates following this macro definition...
0424+  0000             ;* 
0425+  0000             ;* Example #1:  Turn on Solenoid #1 for 4 IRQ cycles
0426+  0000             ;*
0427+  0000             ;*          sol_1_on    .equ  $00+SOLENOID_ON_4_CYCLES
0428+  0000             ;*          sol_1_off   .equ  $00+SOLENOID_OFF
0429+  0000             ;* 
0430+  0000             ;* Then use the SOL_ macro...
0431+  0000             ;*
0432+  0000             ;*    Turn it on:       SOL_(sol_1_on)
0433+  0000             ;*    Turn it off:      SOL_(sol_1_off)
0434+  0000             ;*
0435+  0000             ;* Example #2:  Turn on Solenoid #15 indefinitely, and Solenoid #6 for 2 IRQ cycles
0436+  0000             ;*
0437+  0000             ;*          sol_15_on   .equ  $0E+SOLENOID_ON_LATCH
0438+  0000             ;*          sol_15_off  .equ  $0E+SOLENOID_OFF
0439+  0000             ;*
0440+  0000             ;*          sol_2_on    .equ  $01+SOLENOID_ON_2_CYCLES
0441+  0000             ;*          sol_2_off   .equ  $01+SOLENOID_OFF
0442+  0000             ;* 
0443+  0000             ;* Then use the SOL_ macro...
0444+  0000             ;*
0445+  0000             ;*    Turn them on:       SOL_(sol_15_on,sol_2_on)
0446+  0000             ;*    Turn them off:      SOL_(sol_15_off,sol_2_off)
0447+  0000             ;********************************************************
0448+  0000             #define	SOL_(a)		                  \.db $31,a
0449+  0000             #define	SOL_(a,b)		                  \.db $32,a,b
0450+  0000             #define 	SOL_(a,b,c)		                  \.db $33,a,b,c
0451+  0000             #define	SOL_(a,b,c,d)	                  \.db $34,a,b,c,d
0452+  0000             #define	SOL_(a,b,c,d,e)	                  \.db $35,a,b,c,d,e
0453+  0000             #define	SOL_(a,b,c,d,e,f)	                  \.db $36,a,b,c,d,e,f
0454+  0000             #define	SOL_(a,b,c,d,e,f,g)	            \.db $37,a,b,c,d,e,f,g
0455+  0000             #define	SOL_(a,b,c,d,e,f,g,h)	            \.db $38,a,b,c,d,e,f,g,h
0456+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i)	            \.db $39,a,b,c,d,e,f,g,h,i
0457+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j)	      \.db $3A,a,b,c,d,e,f,g,h,i,j
0458+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k)	      \.db $3B,a,b,c,d,e,f,g,h,i,j,k
0459+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l)	      \.db $3C,a,b,c,d,e,f,g,h,i,j,k,l
0460+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m)	\.db $3D,a,b,c,d,e,f,g,h,i,j,k,l,m
0461+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n)	\.db $3E,a,b,c,d,e,f,g,h,i,j,k,l,m,n
0462+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)	\.db $3F,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o
0463+  0000             
0464+  0000             ;********************************************************
0465+  0000             ;* some additional solenoid defines for timing
0466+  0000             ;* Use these in the top of your game definition to specify 
0467+  0000             ;* static lables for each solenoid
0468+  0000             ;********************************************************
0469+  0000             SOLENOID_ON_1_CYCLES       .equ  $20
0470+  0000             SOLENOID_ON_2_CYCLES       .equ  $40
0471+  0000             SOLENOID_ON_3_CYCLES       .equ  $60
0472+  0000             SOLENOID_ON_4_CYCLES       .equ  $80
0473+  0000             SOLENOID_ON_5_CYCLES       .equ  $A0
0474+  0000             SOLENOID_ON_6_CYCLES       .equ  $C0
0475+  0000             SOLENOID_ON_LATCH          .equ  $E0
0476+  0000             SOLENOID_OFF               .equ  $00
0477+  0000             
0478+  0000             ;********************************************************
0479+  0000             ;* Macros 40-43: Static Length, easy
0480+  0000             ;********************************************************
0481+  0000             #define	PTSND_(snd,count,unit)	\.db $40,snd      \ ADDPOINTS_(count,unit)
0482+  0000             
0483+  0000             #define	PTCHIME_(count,unit)	\.db $41    \ ADDPOINTS_(count,unit)
0484+  0000             
0485+  0000             #define	POINTS_(count,unit)	\.db $42    \ ADDPOINTS_(count,unit)
0486+  0000             
0487+  0000             #define	PTSDIG_(count,unit)	\.db $43    \ ADDPOINTS_(count,unit)
0488+  0000             
0489+  0000             #define     ADDPOINTS_(count,unit)  \#if ((unit < 10) & (count <= 32))
0490+  0000             #defcont				      \	.error "Point unit must be multples of 10 and count must be less than 33"
0491+  0000             #defcont				      \#else
0492+  0000             #defcont					      \#if (unit == 10)
0493+  0000             #defcont					      \	.db (((count)<<3)&$F8)+1
0494+  0000             #defcont					      \#else 
0495+  0000             #defcont					      	\#if (unit == 100)
0496+  0000             #defcont						      \	.db (((count)<<3)&$F8)+2
0497+  0000             #defcont						      \#else 
0498+  0000             #defcont							      \#if (unit == 1000)
0499+  0000             #defcont							      \	.db (((count)<<3)&$F8)+3
0500+  0000             #defcont							      \#else 
0501+  0000             #defcont								      \#if (unit == 10000)
0502+  0000             #defcont								      \	.db (((count)<<3)&$F8)+4
0503+  0000             #defcont								      \#else 
0504+  0000             #defcont									      \#if (unit == 100000)
0505+  0000             #defcont									      \	.db (((count)<<3)&$F8)+5
0506+  0000             #defcont									      \#else 
0507+  0000             #defcont									      \	.error "Macros only support points under 1,000,000 points"
0508+  0000             #defcont									      \#endif
0509+  0000             #defcont								      \#endif
0510+  0000             #defcont							      \#endif
0511+  0000             #defcont						      \#endif
0512+  0000             #defcont					      \#endif
0513+  0000             #defcont				      \#endif
0514+  0000             
0515+  0000             
0516+  0000             
0517+  0000             ;********************************************************
0518+  0000             ;* Macros 44-4F: Define temporary execution of CPU code.
0519+  0000             ;*               The length of bytes to execute is in 
0520+  0000             ;*               the lower nibble and must be between
0521+  0000             ;*               4-f. Therefore, number of bytes to 
0522+  0000             ;*               execute must be between 2 and 13.
0523+  0000             :*
0524+  0000             ;* There are two macros defined here, the first is the
0525+  0000             ;* new style macro where it will automatically calculate
0526+  0000             ;* the number of opcode bytes that are executed. This 
0527+  0000             ;* style requires and end tag for the macro called EXEEND_
0528+  0000             ;* that marks where execution returns to WML7.
0529+  0000             ;*
0530+  0000             ;* The old style macro does not require an end tag but
0531+  0000             ;* does require you to calcuate the number of bytes that
0532+  0000             ;* will be executed as native 680X code. This is obviously
0533+  0000             ;* more tedious but I left it here for some reason. 
0534+  0000             ;********************************************************
0535+  0000             #define     EXE_              \.push *,FLAG_WML_EXE
0536+  0000             #defcont                      \.db $44
0537+  0000             
0538+  0000             #define     EXEEND_           \wml4_ .set *
0539+  0000             #defcont                      \.pop wml1_,wml2_
0540+  0000             #defcont                      \#if wml1_ == FLAG_WML_EXE
0541+  0000             #defcont                            \wml3_ .set wml4_-wml2_
0542+  0000             #defcont                            \#if (wml3_>14)|(wml3_<3)
0543+  0000             #defcont                            \     .error "Macro EXE_: Number of executed bytes must be between 2 and 15"
0544+  0000             #defcont                            \#else
0545+  0000             #defcont                            \     .org wml2_
0546+  0000             #defcont                            \     .db $44+wml3_-3
0547+  0000             #defcont                            \#endif
0548+  0000             #defcont                            \.org wml4_
0549+  0000             #defcont                      \#else
0550+  0000             #defcont                            \.error "EXE_END did not have a starting EXE_ code"
0551+  0000             #defcont                      \#endif
0552+  0000             
0553+  0000                
0554+  0000             #define	EXE_(a)		\#if (a>13)|(a<2)
0555+  0000             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0556+  0000             #defcont				\#else
0557+  0000             #defcont				\    .db ($44+a-2)
0558+  0000             #defcont				\#endif
0559+  0000             
0560+  0000             ;********************************************************
0561+  0000             ;* Macros 50-57:
0562+  0000             ;********************************************************
0563+  0000             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0564+  0000             #defcont				\	.db $50,((a*16)+b) 
0565+  0000             #defcont				\#else
0566+  0000             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0567+  0000             #defcont				\#endif
0568+  0000             
0569+  0000             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0570+  0000             #defcont				\	.db $51,((a*16)+b) 
0571+  0000             #defcont				\#else
0572+  0000             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0573+  0000             #defcont				\#endif
0574+  0000             
0575+  0000             #define	PRI_(a)		\.db $52,a
0576+  0000             
0577+  0000             #define	SLEEP_(a)		\#if (a<16)
0578+  0000             #defcont				\	.db ($70+a)
0579+  0000             #defcont				\#else
0580+  0000             #defcont				\	.db $53,a
0581+  0000             #defcont				\#endif
0582+  0000             
0583+  0000             #define	REMTHREAD_(a,b)	\.db $54,a,b
0584+  0000             
0585+  0000             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0586+  0000             
0587+  0000             #define 	JSR_(a)		\.db $56 \.dw a
0588+  0000             #define	JSRD_(a)		\.db $57 \.dw a
0589+  0000             
0590+  0000             ;*******************************************************************
0591+  0000             ;* Branch Macros: 58-5B
0592+  0000             ;*******************************************************************
0593+  0000             #define     IFLOC_(type,vars)    \ .push  *, vars, type        
0594+  0000             
0595+  0000             ;*******************************************************************
0596+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0597+  0000             ;*        an 'XXEND_' statement.                                    *
0598+  0000             ;******************************************************************* 
0599+  0000             #define     BEGIN_	      IFLOC_(FLAG_WML_BEGIN,0)
0600+  0000             
0601+  0000             ;*******************************************************************
0602+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0603+  0000             ;*            pulls the pc location of the beginning of the loop   *
0604+  0000             ;*            and verifies that the 'type' is correct.             *
0605+  0000             ;*******************************************************************
0606+  0000             #define 	LOGIC_LOOPEND_(vars)	\ .pop wml1_, wml2_, wml3_
0607+  0000             #defcont						\wml2_ .set vars
0608+  0000             #defcont						\wml4_ .set *
0609+  0000             #defcont						\#if (wml1_ & FLAG_WML_BEGIN)
0610+  0000             #defcont							\#if ((wml4_-wml3_) <= 127)
0611+  0000             #defcont								\ .org wml4_-1
0612+  0000             #defcont								\ .db wml3_-wml4_
0613+  0000             #defcont								\ .org wml4_
0614+  0000             #defcont							\#else
0615+  0000             #defcont								\ .error "Loop Branch out of Range."
0616+  0000             #defcont							\#endif
0617+  0000             #defcont						\#else
0618+  0000             #defcont							\ .error "Inappropriate End for BEGIN Loop."
0619+  0000             #defcont						\#endif
0620+  0000             
0621+  0000             ;*******************************************************************
0622+  0000             ;* Basic Loop
0623+  0000             ;*******************************************************************
0624+  0000             #define	LOOP_		\ .pop wml1_, wml2_, wml3_ \ JMPR_(wml3_)
0625+  0000             
0626+  0000             ;*******************************************************************
0627+  0000             ;* Conditional Looping
0628+  0000             ;*******************************************************************
0629+  0000             #define	EQEND_(z)						BNER_(z,*+3) \ LOGIC_LOOPEND_(1)		
0630+  0000             #define	EQEND_(z,y)						BNER_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0631+  0000             #define	EQEND_(z,y,x)					BNER_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0632+  0000             #define	EQEND_(z,y,x,w)					BNER_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0633+  0000             #define	EQEND_(z,y,x,w,v)					BNER_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0634+  0000             #define     EQEND_(z,y,x,w,v,u)				BNER_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0635+  0000             #define     EQEND_(z,y,x,w,v,u,t)			     	BNER_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0636+  0000             #define     EQEND_(z,y,x,w,v,u,t,s)     			BNER_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0637+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r)     		BNER_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0638+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q)     		BNER_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0639+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p)     		BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0640+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0641+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0642+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0643+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0644+  0000             
0645+  0000             #define	NEEND_(z)						BEQR_(z,*+3) \ LOGIC_LOOPEND_(1)		
0646+  0000             #define	NEEND_(z,y)						BEQR_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0647+  0000             #define	NEEND_(z,y,x)					BEQR_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0648+  0000             #define	NEEND_(z,y,x,w)					BEQR_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0649+  0000             #define	NEEND_(z,y,x,w,v)					BEQR_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0650+  0000             #define     NEEND_(z,y,x,w,v,u)				BEQR_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0651+  0000             #define     NEEND_(z,y,x,w,v,u,t)			     	BEQR_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0652+  0000             #define     NEEND_(z,y,x,w,v,u,t,s)     			BEQR_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0653+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r)     		BEQR_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0654+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q)     		BEQR_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0655+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p)     		BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0656+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0657+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0658+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0659+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0660+  0000             ;*******************************************************************
0661+  0000             ;* IFxxx: These are the standard 'if' statements, they will always  
0662+  0000             ;*        be of type FLAG_WML_IF                                           
0663+  0000             ;*******************************************************************
0664+  0000             #define     IFEQR_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BNER_(z,*+3)     
0665+  0000             #define     IFEQR_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BNER_(z,y,*+3)   
0666+  0000             #define     IFEQR_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BNER_(z,y,x,*+3) 
0667+  0000             #define     IFEQR_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BNER_(z,y,x,w,*+3)   
0668+  0000             #define     IFEQR_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BNER_(z,y,x,w,v,*+3) 
0669+  0000             #define     IFEQR_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BNER_(z,y,x,w,v,u,*+3) 
0670+  0000             #define     IFEQR_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BNER_(z,y,x,w,v,u,t,*+3) 
0671+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BNER_(z,y,x,w,v,u,t,s,*+3) 
0672+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BNER_(z,y,x,w,v,u,t,s,r,*+3)
0673+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BNER_(z,y,x,w,v,u,t,s,r,q,*+3)
0674+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0675+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0676+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0677+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0678+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0679+  0000             
0680+  0000             #define     IFNER_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BEQR_(z,*+3)     
0681+  0000             #define     IFNER_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BEQR_(z,y,*+3)   
0682+  0000             #define     IFNER_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BEQR_(z,y,x,*+3) 
0683+  0000             #define     IFNER_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BEQR_(z,y,x,w,*+3) 
0684+  0000             #define     IFNER_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BEQR_(z,y,x,w,v,*+3) 
0685+  0000             #define     IFNER_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BEQR_(z,y,x,w,v,u,*+3) 
0686+  0000             #define     IFNER_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BEQR_(z,y,x,w,v,u,t,*+3) 
0687+  0000             #define     IFNER_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BEQR_(z,y,x,w,v,u,t,s,*+3) 
0688+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BEQR_(z,y,x,w,v,u,t,s,r,*+3)
0689+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BEQR_(z,y,x,w,v,u,t,s,r,q,*+3)
0690+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0691+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0692+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0693+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0694+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0695+  0000             
0696+  0000             #define     ENDIF_ \wml1_ .set *
0697+  0000             #defcont		 \ .pop wml3_, wml5_, wml4_
0698+  0000             #defcont		 \#if (wml3_ & FLAG_WML_BEGIN)==0
0699+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0700+  0000             #defcont  			      \wml2_ .set wml1_-wml4_-wml5_-2
0701+  0000             #defcont			      \#if wml2_+127 < 0
0702+  0000             #defcont				      \ .error "Branch Range < -127"
0703+  0000             #defcont			      \#else
0704+  0000             #defcont				      \#if wml2_-128 > 0
0705+  0000             #defcont					      \ .error "Branch Range > 128"
0706+  0000             #defcont				      \#else
0707+  0000             #defcont    				      \ .org wml4_+wml5_+1
0708+  0000             #defcont					      \ .byte wml2_
0709+  0000             #defcont				      \#endif
0710+  0000             #defcont			      \#endif
0711+  0000             #defcont                \#else
0712+  0000             #defcont                      \ .org  wml4_-2	
0713+  0000             #defcont				\ JMP_(wml1_)
0714+  0000             #defcont                      \ .error "123: Not Tested"
0715+  0000             #defcont                \#endif
0716+  0000             #defcont			\ .org	wml1_
0717+  0000             #defcont		 \#else
0718+  0000             #defcont			\.error "Wrong Endtype for IFXXR_ block"
0719+  0000             #defcont		 \#endif
0720+  0000             
0721+  0000             #define	ELSE_	\wml1_ .set $
0722+  0000             #defcont		\ .pop wml3_, wml5_, wml4_
0723+  0000             #defcont		\#if (wml3_ & FLAG_WML_BEGIN)==0
0724+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0725+  0000             #defcont				\ .org wml4_+wml5_+1
0726+  0000             #defcont				\wml2_ .set wml1_-wml4_
0727+  0000             #defcont					\#if wml2_+127 < 0
0728+  0000             #defcont						\ .org wml1_
0729+  0000             #defcont						\.push wml1_+3, wml5_, FLAG_WML_ELSE
0730+  0000             #defcont						\ JMP_($)
0731+  0000             #defcont                                  \ .error "(124)ELSE_: Not Tested with long JMP"
0732+  0000             #defcont					\#else
0733+  0000             #defcont						\#if wml2_-128>0
0734+  0000             #defcont							\ .org wml1_
0735+  0000             #defcont							\.push wml1_+3, wml5_, FLAG_WML_ELSE
0736+  0000             #defcont							\ JMP_($)
0737+  0000             #defcont                                  \ .error "(125)ELSE_: Not Tested with long JMP"
0738+  0000             #defcont						\#else
0739+  0000             #defcont							\.push wml1_-wml5_, wml5_, FLAG_WML_IF
0740+  0000             #defcont							\ .byte wml2_-wml5_
0741+  0000             #defcont							\ .org wml1_
0742+  0000             #defcont							\ JMPR_($+1)
0743+  0000             #defcont							\ .org wml1_+2
0744+  0000             #defcont						\#endif
0745+  0000             #defcont					\#endif
0746+  0000             #defcont			\#else
0747+  0000             #defcont				\.error "Duplicate ELSE Statement"
0748+  0000             #defcont			\#endif
0749+  0000             #defcont		\#else
0750+  0000             #defcont			\ .error "Misplaced Else"
0751+  0000             #defcont		\#endif
0752+  0000             
0753+  0000             #define     BEQR_(p1__,ba__)     \#if $+3-ba__ < 128
0754+  0000             #defcont                                 \.db $5A,p1__,ba__-$-3
0755+  0000             #defcont				\#else
0756+  0000             #defcont					\#if ba__-$+3 < 127
0757+  0000             #defcont                                 \.db $5A,p1__,$+3-ba__
0758+  0000             #defcont					\#else
0759+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0760+  0000             #defcont					\#endif
0761+  0000             #defcont				\#endif
0762+  0000             
0763+  0000             #define     BEQR_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0764+  0000             #defcont                                 \.db $5A,p1__,p2__,ba__-$-4
0765+  0000             #defcont				\#else
0766+  0000             #defcont					\#if ba__-$+4 < 127
0767+  0000             #defcont                                 \.db $5A,p1__,p2__,$+4-ba__
0768+  0000             #defcont					\#else
0769+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0770+  0000             #defcont					\#endif
0771+  0000             #defcont				\#endif
0772+  0000             
0773+  0000             #define     BEQR_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0774+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,ba__-$-5
0775+  0000             #defcont				\#else
0776+  0000             #defcont					\#if ba__-$+5 < 127
0777+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,$+5-ba__
0778+  0000             #defcont					\#else
0779+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0780+  0000             #defcont					\#endif
0781+  0000             #defcont				\#endif
0782+  0000             
0783+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0784+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,ba__-$-6
0785+  0000             #defcont				\#else
0786+  0000             #defcont					\#if ba__-$+6 < 127
0787+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,$+6-ba__
0788+  0000             #defcont					\#else
0789+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0790+  0000             #defcont					\#endif
0791+  0000             #defcont				\#endif
0792+  0000             
0793+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0794+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0795+  0000             #defcont				\#else
0796+  0000             #defcont					\#if ba__-$+7 < 127
0797+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0798+  0000             #defcont					\#else
0799+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0800+  0000             #defcont					\#endif
0801+  0000             #defcont				\#endif
0802+  0000             
0803+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0804+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0805+  0000             #defcont				\#else
0806+  0000             #defcont					\#if ba__-$+8 < 127
0807+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0808+  0000             #defcont					\#else
0809+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0810+  0000             #defcont					\#endif
0811+  0000             #defcont				\#endif
0812+  0000             
0813+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0814+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0815+  0000             #defcont				\#else
0816+  0000             #defcont					\#if ba__-$+9 < 127
0817+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0818+  0000             #defcont					\#else
0819+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0820+  0000             #defcont					\#endif
0821+  0000             #defcont				\#endif
0822+  0000             
0823+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0824+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0825+  0000             #defcont				\#else
0826+  0000             #defcont					\#if ba__-$+10 < 127
0827+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0828+  0000             #defcont					\#else
0829+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0830+  0000             #defcont					\#endif
0831+  0000             #defcont				\#endif
0832+  0000             
0833+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0834+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0835+  0000             #defcont				\#else
0836+  0000             #defcont					\#if ba__-$+11 < 127
0837+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0838+  0000             #defcont					\#else
0839+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0840+  0000             #defcont					\#endif
0841+  0000             #defcont				\#endif
0842+  0000             
0843+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0844+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0845+  0000             #defcont				\#else
0846+  0000             #defcont					\#if ba__-$+12 < 127
0847+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0848+  0000             #defcont					\#else
0849+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0850+  0000             #defcont					\#endif
0851+  0000             #defcont				\#endif
0852+  0000             
0853+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0854+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0855+  0000             #defcont				\#else
0856+  0000             #defcont					\#if ba__-$+13 < 127
0857+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0858+  0000             #defcont					\#else
0859+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0860+  0000             #defcont					\#endif
0861+  0000             #defcont				\#endif
0862+  0000             
0863+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0864+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0865+  0000             #defcont				\#else
0866+  0000             #defcont					\#if ba__-$+14 < 127
0867+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0868+  0000             #defcont					\#else
0869+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0870+  0000             #defcont					\#endif
0871+  0000             #defcont				\#endif
0872+  0000             
0873+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0874+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0875+  0000             #defcont				\#else
0876+  0000             #defcont					\#if ba__-$+15 < 127
0877+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0878+  0000             #defcont					\#else
0879+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0880+  0000             #defcont					\#endif
0881+  0000             #defcont				\#endif
0882+  0000             
0883+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0884+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0885+  0000             #defcont				\#else
0886+  0000             #defcont					\#if ba__-$+16 < 127
0887+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0888+  0000             #defcont					\#else
0889+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0890+  0000             #defcont					\#endif
0891+  0000             #defcont				\#endif
0892+  0000             
0893+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
0894+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
0895+  0000             #defcont				\#else
0896+  0000             #defcont					\#if ba__-$+17 < 127
0897+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
0898+  0000             #defcont					\#else
0899+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0900+  0000             #defcont					\#endif
0901+  0000             #defcont				\#endif
0902+  0000             
0903+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
0904+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
0905+  0000             #defcont				\#else
0906+  0000             #defcont					\#if ba__-$+18 < 127
0907+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
0908+  0000             #defcont					\#else
0909+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0910+  0000             #defcont					\#endif
0911+  0000             #defcont				\#endif
0912+  0000             
0913+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
0914+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
0915+  0000             #defcont				\#else
0916+  0000             #defcont					\#if ba__-$+19 < 127
0917+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
0918+  0000             #defcont					\#else
0919+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0920+  0000             #defcont					\#endif
0921+  0000             #defcont				\#endif
0922+  0000             
0923+  0000             #define     BEQA_(p1__,ba__)     \.db $58,p1__ \.dw ba__
0924+  0000             #define     BEQA_(p1__,p2__,ba__)     \.db $58,p1__,p2__ \.dw ba__
0925+  0000             #define     BEQA_(p1__,p2__,p3__,ba__)     \.db $58,p1__,p2__,p3__ \.dw ba__
0926+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,ba__)     \.db $58,p1__,p2__,p3__,p4__ \.dw ba__
0927+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__ \.dw ba__
0928+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
0929+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
0930+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
0931+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
0932+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
0933+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
0934+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
0935+  0000             
0936+  0000             #define     BNER_(p1__,ba__)     \#if $+3-ba__ < 128
0937+  0000             #defcont                                 \.db $5B,p1__,ba__-$-3
0938+  0000             #defcont				\#else
0939+  0000             #defcont					\#if ba__-$+3 < 127
0940+  0000             #defcont                                 \.db $5B,p1__,$+3-ba__
0941+  0000             #defcont					\#else
0942+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0943+  0000             #defcont					\#endif
0944+  0000             #defcont				\#endif
0945+  0000             
0946+  0000             #define     BNER_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0947+  0000             #defcont                                 \.db $5B,p1__,p2__,ba__-$-4
0948+  0000             #defcont				\#else
0949+  0000             #defcont					\#if ba__-$+4 < 127
0950+  0000             #defcont                                 \.db $5B,p1__,p2__,$+4-ba__
0951+  0000             #defcont					\#else
0952+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0953+  0000             #defcont					\#endif
0954+  0000             #defcont				\#endif
0955+  0000             
0956+  0000             #define     BNER_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0957+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,ba__-$-5
0958+  0000             #defcont				\#else
0959+  0000             #defcont					\#if ba__-$+5 < 127
0960+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,$+5-ba__
0961+  0000             #defcont					\#else
0962+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0963+  0000             #defcont					\#endif
0964+  0000             #defcont				\#endif
0965+  0000             
0966+  0000             #define     BNER_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0967+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,ba__-$-6
0968+  0000             #defcont				\#else
0969+  0000             #defcont					\#if ba__-$+6 < 127
0970+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,$+6-ba__
0971+  0000             #defcont					\#else
0972+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0973+  0000             #defcont					\#endif
0974+  0000             #defcont				\#endif
0975+  0000             
0976+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0977+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0978+  0000             #defcont				\#else
0979+  0000             #defcont					\#if ba__-$+7 < 127
0980+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0981+  0000             #defcont					\#else
0982+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0983+  0000             #defcont					\#endif
0984+  0000             #defcont				\#endif
0985+  0000             
0986+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0987+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0988+  0000             #defcont				\#else
0989+  0000             #defcont					\#if ba__-$+8 < 127
0990+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0991+  0000             #defcont					\#else
0992+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0993+  0000             #defcont					\#endif
0994+  0000             #defcont				\#endif
0995+  0000             
0996+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0997+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0998+  0000             #defcont				\#else
0999+  0000             #defcont					\#if ba__-$+9 < 127
1000+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
1001+  0000             #defcont					\#else
1002+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1003+  0000             #defcont					\#endif
1004+  0000             #defcont				\#endif
1005+  0000             
1006+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
1007+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
1008+  0000             #defcont				\#else
1009+  0000             #defcont					\#if ba__-$+10 < 127
1010+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
1011+  0000             #defcont					\#else
1012+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1013+  0000             #defcont					\#endif
1014+  0000             #defcont				\#endif
1015+  0000             
1016+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
1017+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
1018+  0000             #defcont				\#else
1019+  0000             #defcont					\#if ba__-$+11 < 127
1020+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
1021+  0000             #defcont					\#else
1022+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1023+  0000             #defcont					\#endif
1024+  0000             #defcont				\#endif
1025+  0000             
1026+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
1027+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
1028+  0000             #defcont				\#else
1029+  0000             #defcont					\#if ba__-$+12 < 127
1030+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
1031+  0000             #defcont					\#else
1032+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1033+  0000             #defcont					\#endif
1034+  0000             #defcont				\#endif
1035+  0000             
1036+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
1037+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
1038+  0000             #defcont				\#else
1039+  0000             #defcont					\#if ba__-$+13 < 127
1040+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
1041+  0000             #defcont					\#else
1042+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1043+  0000             #defcont					\#endif
1044+  0000             #defcont				\#endif
1045+  0000             
1046+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
1047+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
1048+  0000             #defcont				\#else
1049+  0000             #defcont					\#if ba__-$+14 < 127
1050+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
1051+  0000             #defcont					\#else
1052+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1053+  0000             #defcont					\#endif
1054+  0000             #defcont				\#endif
1055+  0000             
1056+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
1057+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
1058+  0000             #defcont				\#else
1059+  0000             #defcont					\#if ba__-$+15 < 127
1060+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
1061+  0000             #defcont					\#else
1062+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1063+  0000             #defcont					\#endif
1064+  0000             #defcont				\#endif
1065+  0000             
1066+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
1067+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
1068+  0000             #defcont				\#else
1069+  0000             #defcont					\#if ba__-$+16 < 127
1070+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
1071+  0000             #defcont					\#else
1072+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1073+  0000             #defcont					\#endif
1074+  0000             #defcont				\#endif
1075+  0000             
1076+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
1077+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
1078+  0000             #defcont				\#else
1079+  0000             #defcont					\#if ba__-$+17 < 127
1080+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
1081+  0000             #defcont					\#else
1082+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1083+  0000             #defcont					\#endif
1084+  0000             #defcont				\#endif
1085+  0000             
1086+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
1087+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
1088+  0000             #defcont				\#else
1089+  0000             #defcont					\#if ba__-$+18 < 127
1090+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
1091+  0000             #defcont					\#else
1092+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1093+  0000             #defcont					\#endif
1094+  0000             #defcont				\#endif
1095+  0000             
1096+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
1097+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
1098+  0000             #defcont				\#else
1099+  0000             #defcont					\#if ba__-$+19 < 127
1100+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
1101+  0000             #defcont					\#else
1102+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1103+  0000             #defcont					\#endif
1104+  0000             #defcont				\#endif
1105+  0000             
1106+  0000             #define     BNEA_(p1__,ba__)     \.db $59,p1__ \.dw ba__
1107+  0000             #define     BNEA_(p1__,p2__,ba__)     \.db $59,p1__,p2__ \.dw ba__
1108+  0000             #define     BNEA_(p1__,p2__,p3__,ba__)     \.db $59,p1__,p2__,p3__ \.dw ba__
1109+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,ba__)     \.db $59,p1__,p2__,p3__,p4__ \.dw ba__
1110+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__ \.dw ba__
1111+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
1112+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
1113+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
1114+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
1115+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
1116+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
1117+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
1118+  0000             ;**********************************************************
1119+  0000             ;* Macros 5C-5F
1120+  0000             ;**********************************************************
1121+  0000             #define	JMPD_(a)		.db $5c \.dw a
1122+  0000             
1123+  0000             #define	SWSET_(a)		      .db $5d,a
1124+  0000             #define	SWSET_(a,b)		      .db $5d,((a&$7F)+$80),b
1125+  0000             #define	SWSET_(a,b,c)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),c
1126+  0000             #define	SWSET_(a,b,c,d)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
1127+  0000             #define	SWSET_(a,b,c,d,e)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
1128+  0000             #define	SWSET_(a,b,c,d,e,f)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
1129+  0000             #define	SWSET_(a,b,c,d,e,f,g)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
1130+  0000             #define	SWSET_(a,b,c,d,e,f,g,h)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7F)+$80),h
1131+  0000             
1132+  0000             #define	SWCLR_(a)		      .db $5e,a
1133+  0000             #define	SWCLR_(a,b)		      .db $5e,((a&$7F)+$80),b
1134+  0000             #define	SWCLR_(a,b,c)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),c
1135+  0000             #define	SWCLR_(a,b,c,d)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
1136+  0000             #define	SWCLR_(a,b,c,d,e)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
1137+  0000             #define	SWCLR_(a,b,c,d,e,f)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
1138+  0000             #define	SWCLR_(a,b,c,d,e,f,g)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
1139+  0000             #define	SWCLR_(a,b,c,d,e,f,g,h)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7F)+$80),h
1140+  0000             
1141+  0000             #define	JMP_(a)		.db $5f \.dw a
1142+  0000             
1143+  0000             ;**********************************************************
1144+  0000             ;* Macro 6X:
1145+  0000             ;**********************************************************
1146+  0000             #define	SLEEPI_(a)		.db ($60+(a&$0f))
1147+  0000             
1148+  0000             ;**********************************************************
1149+  0000             ;* Macro 7X: 
1150+  0000             ;**********************************************************
1151+  0000             ;See SLEEP macro previous...
1152+  0000             
1153+  0000             ;**********************************************************
1154+  0000             ;* Macro 8X:
1155+  0000             ;**********************************************************
1156+  0000             #define 	JMPR_(a)		\#if a-$ > $7ff
1157+  0000             #defcont				\	.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1158+  0000             #defcont				\#else
1159+  0000             #defcont				\	#if $-a > $7ff
1160+  0000             #defcont				\		.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1161+  0000             #defcont				\	#endif
1162+  0000             #defcont				\#endif
1163+  0000             #defcont				\	.db ($80+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1164+  0000             
1165+  0000             ;**********************************************************
1166+  0000             ;* Macro 9X:
1167+  0000             ;**********************************************************
1168+  0000             #define 	JSRR_(a)		\#if a-$ > $7ff
1169+  0000             #defcont				\	.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1170+  0000             #defcont				\#else
1171+  0000             #defcont				\	#if $-a > $7ff
1172+  0000             #defcont				\		.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1173+  0000             #defcont				\	#endif
1174+  0000             #defcont				\#endif
1175+  0000             #defcont				\	.db ($90+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1176+  0000             ;**********************************************************
1177+  0000             ;* Macro AX:
1178+  0000             ;**********************************************************
1179+  0000             #define 	JSRDR_(a)		\#if a-$ > $7ff
1180+  0000             #defcont				\	.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1181+  0000             #defcont				\#else
1182+  0000             #defcont				\	#if $-a > $7ff
1183+  0000             #defcont				\		.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1184+  0000             #defcont				\	#endif
1185+  0000             #defcont				\#endif
1186+  0000             #defcont				\	.db ($a0+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1187+  0000             
1188+  0000             
1189+  0000             ;**********************************************************
1190+  0000             ;* Macro BX: Add NextByte to RAM LSD(command) 
1191+  0000             ;**********************************************************
1192+  0000             #define 	ADDRAM_(ramloc,data)	\#if ramloc > $0f
1193+  0000             #defcont					\	.error "Macro ADDRAM_: RAM Location must be between $00-$0F"
1194+  0000             #defcont					\#endif
1195+  0000             #defcont					\	.db ($b0+(ramloc&$0f)),data
1196+  0000             
1197+  0000             ;**********************************************************
1198+  0000             ;* Macro CX: Set NextByte to RAM LSD(command) 
1199+  0000             ;**********************************************************
1200+  0000             #define 	SETRAM_(ramloc,data)	\#if ramloc > $0f
1201+  0000             #defcont					\	.error "Macro SETRAM_: RAM Location must be between $00-$0F"
1202+  0000             #defcont					\#endif
1203+  0000             #defcont					\	.db ($c0+ramloc),data
1204+  0000             
1205+  0000             ;**********************************************************
1206+  0000             ;* Macro DX: Play Index Sound (NextByte)Times  
1207+  0000             ;**********************************************************
1208+  0000             #define	RSND_(snd,times)		.db $d0+(snd&0F),times
1209+  0000             
1210+  0000             ;**********************************************************
1211+  0000             ;* Macro EX,FX: Play Index Sound (NextByte)Times  
1212+  0000             ;**********************************************************
1213+  0000             #define	SSND_(a)		\#if (a<$20)
1214+  0000             #defcont				\	.db $e0+a
1215+  0000             #defcont				\#else
1216+  0000             #defcont				\	.db $e0
1217+  0000             #defcont				\	.error "Macro SSND_: Parameters must be less than $20"
1218+  0000             #defcont				\#endif
0008   0000             #include  "68logic.asm"	;680X logic definitions
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin		      logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ y	*+5
0050+  0000             #defcont						\ jmp	var2_
0051+  0000             #defcont					\#else
0052+  0000             #defcont						\ x	var2_
0053+  0000             #defcont					\#endif
0054+  0000             #defcont				\#else
0055+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0056+  0000             #defcont				\#endif
0057+  0000             
0058+  0000             ;*******************************************************************
0059+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0060+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0061+  0000             ;*             at that address to point to the current address.    *
0062+  0000             ;*******************************************************************
0063+  0000             #define logic_end \var1_ .set *
0064+  0000             #defcont		\ .pop var3_, var4_
0065+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0066+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0067+  0000             #defcont  				\var2_ .set var1_-var4_-2
0068+  0000             #defcont				\#if var2_+127 < 0
0069+  0000             #defcont					\ .error "Branch Range < -127"
0070+  0000             #defcont				\#else
0071+  0000             #defcont					\#if var2_-128 > 0
0072+  0000             #defcont						\ .error "Branch Range > 128"
0073+  0000             #defcont					\#else
0074+  0000             #defcont    					\ .org var4_+1
0075+  0000             #defcont						\ .byte var2_
0076+  0000             #defcont					\#endif
0077+  0000             #defcont				\#endif
0078+  0000             #defcont			\#else	
0079+  0000             #defcont    			\ .org  var4_-2	
0080+  0000             #defcont				\ .word var1_
0081+  0000             #defcont			\#endif
0082+  0000             #defcont			\ .org	var1_
0083+  0000             #defcont		\#else
0084+  0000             #defcont			\.error "Wrong Endtype for IF block"
0085+  0000             #defcont		\#endif
0086+  0000             
0087+  0000             ;*******************************************************************
0088+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0089+  0000             ;*             (ie. with additional logic as defined below). The   *
0090+  0000             ;*             ELSE block will resove how to terminate the current *
0091+  0000             ;*             code and then set the owning IF statement's data    *
0092+  0000             ;*             byte.                                               *
0093+  0000             ;*******************************************************************
0094+  0000             #define	logic_else(x,y)	\var1_ .set $
0095+  0000             #defcont		\ .pop var3_, var4_
0096+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0097+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0098+  0000             #defcont				\ .org var4_+1
0099+  0000             #defcont	      		\#if x==0
0100+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0101+  0000             #defcont					\#if var2_+127 < 0
0102+  0000             #defcont						\ .org var1_
0103+  0000             #defcont						\.push $+3, 1
0104+  0000             #defcont						\ jmp $
0105+  0000             #defcont					\#else
0106+  0000             #defcont						\#if var2_-128>0
0107+  0000             #defcont							\ .org var1_
0108+  0000             #defcont							\.push $+3, 1
0109+  0000             #defcont							\ jmp $
0110+  0000             #defcont						\#else
0111+  0000             #defcont							\.push var1_, 0
0112+  0000             #defcont							\ .byte var2_
0113+  0000             #defcont							\ .org var1_
0114+  0000             #defcont							\ BRA $
0115+  0000             #defcont							\ .org var1_+2
0116+  0000             #defcont						\#endif
0117+  0000             #defcont					\#endif
0118+  0000             #defcont				\#else
0119+  0000             #defcont					\ .byte var1_-var4_-2+2
0120+  0000             #defcont					\ .org var1_
0121+  0000             #defcont					\.push $, 0
0122+  0000             #defcont					\ y $		
0123+  0000             #defcont				\#endif
0124+  0000             #defcont			\#else
0125+  0000             #defcont				\.error "Duplicate ELSE Statement"
0126+  0000             #defcont			\#endif
0127+  0000             #defcont		\#else
0128+  0000             #defcont			\ .error "Misplaced Else"
0129+  0000             #defcont		\#endif
0130+  0000             
0131+  0000             
0132+  0000             ;*******************************************************************
0133+  0000             ;* Defines how to use the various logic macros defined above.      *
0134+  0000             ;*******************************************************************
0135+  0000             #define	ifeq	logic_ifxx(BNE)		
0136+  0000             #define	ifne	logic_ifxx(BEQ)
0137+  0000             #define	ifpl	logic_ifxx(BMI)
0138+  0000             #define	ifhi	logic_ifxx(BLO)
0139+  0000             #define	ifmi	logic_ifxx(BPL)
0140+  0000             #define	iflo	logic_ifxx(BHI)
0141+  0000             #define	ifcs	logic_ifxx(BCC)
0142+  0000             #define	ifcc	logic_ifxx(BCS)
0143+  0000             #define 	ifvc	logic_ifxx(BVS)
0144+  0000             #define 	ifvs	logic_ifxx(BVC)
0145+  0000             #define	ifge	logic_ifxx(BLO)
0146+  0000             #define	ifgt	logic_ifxx(BLS)
0147+  0000             
0148+  0000             #define	else  	logic_else(0,0)
0149+  0000             #define	else_eq	logic_else(1,BEQ)
0150+  0000             #define	else_ne	logic_else(1,BNE)
0151+  0000             #define	else_pl	logic_else(1,BPL)
0152+  0000             #define	else_mi	logic_else(1,BMI)
0153+  0000             #define	else_cc	logic_else(1,BCC)
0154+  0000             #define	else_cs	logic_else(1,BCS)
0155+  0000             
0156+  0000             #define 	endif		logic_end
0157+  0000             
0158+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0159+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0160+  0000             #define	plend	logic_loopend(BMI,BPL)
0161+  0000             #define	miend	logic_loopend(BPL,BMI)
0162+  0000             #define	csend	logic_loopend(BCC,BCS)
0163+  0000             #define	ccend	logic_loopend(BCS,BCC)
0164+  0000             #define	vcend	logic_loopend(BVS,BVC)
0165+  0000             #define	vsend	logic_loopend(BVC,BVS)
0166+  0000             #define     hiend logic_loopend(BLS,BHI)
0167+  0000             #define     lsend logic_loopend(BHI,BLS)
0168+  0000             
0169+  0000             #define	loopend	logic_loopend(BRA,BRA)
0170+  0000             
0171+  0000             #define	lsb(x)	x&$FF
0172+  0000             
0173+  0000             #define	msb(x)	(x>>8)&$FF0009   0000             #include  "7gen.asm"	;Level 7 general defines
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Level 7 General Macros
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             .module 7gen
0012+  0000             .msfirst
0013+  0000             ;*****************************************************************************
0014+  0000             ;* This is where you should put general timesaving macros above and beyond
0015+  0000             ;* the base logic and WML7 macros...
0016+  0000             ;*
0017+  0000             ;* An example is repetitive code such as...
0018+  0000             ;*
0019+  0000             ;* ldx	#gj_2B
0020+  0000             ;* jsr	newthread_06
0021+  0000             ;*
0022+  0000             ;* Is both long and it is easy to forget to reference the label properly, it
0023+  0000             ;* can be replaced with..
0024+  0000             ;*
0025+  0000             ;* NEWTHREAD(gj_2B) 
0026+  0000             ;* 
0027+  0000             ;* By using the macro defined below...
0028+  0000             ;*****************************************************************************
0029+  0000             
0030+  0000             #define	NEWTHREAD(x)	\ ldx #x	\ jsr newthread_06
0031+  0000             #define     NEWTHREAD_JMP(x)	\ ldx #x	\ jmp newthread_06
0010   0000             
0011   D800             	.org $d800
0012   D800             
0013   D800 BD F3 AB    gj_02			jsr	macro_start
0014   D803             			BITON_($53)				;Turn ON: Bit#13
0014   D803             
0014   D803 10 53       
0015   D805             gb_46			SLEEP_(4)
0015   D805             
0015   D805 74          
0015   D806~            gb_46			SLEEP_(4)
0015   D806~            gb_46			SLEEP_(4)
0015   D806             
0016   D806 5A 58 FC    			.db $5A,$58,$FC			;BEQ_BIT#18 to gb_46
0017   D809             			BE29_($81,$0D)			;Effect: Range #81 Range #0D
0017   D809             
0017   D809 29 81 0D    
0018   D80C             			BE2A_($0D)				;Effect: Range #0D
0018   D80C             
0018   D80C 2A 0D       
0019   D80E             			BE28_($4D)				;Effect: Range #4D
0019   D80E             
0019   D80E 28 4D       
0020   D810             gb_47			SLEEP_(6)
0020   D810             
0020   D810 76          
0020   D811~            gb_47			SLEEP_(6)
0020   D811~            gb_47			SLEEP_(6)
0020   D811             
0021   D811             			BE2A_($41)				;Effect: Range #41
0021   D811             
0021   D811 2A 41       
0022   D813             			EXE_($04)				;CPU Execute Next 4 Bytes
0022   D813~            			EXE_($04)				;CPU Execute Next 4 Bytes
0022   D813~            			EXE_($04)				;CPU Execute Next 4 Bytes
0022   D813             
0022   D813 46          
0022   D814             
0023   D814 96 27       			ldaa	$27
0024   D816 84 10       			anda	#$10
0025   D818 5AFCE000F3  			.db $5A,$FC,$E0,$00,$F3		;BEQ_RAM$00==#0 to gb_47
0026   D81D             			BE2E_($0D)				;Effect: Range #0D
0026   D81D             
0026   D81D 2E 0D       
0027   D81F             gb_48			SLEEP_(6)
0027   D81F             
0027   D81F 76          
0027   D820~            gb_48			SLEEP_(6)
0027   D820~            gb_48			SLEEP_(6)
0027   D820             
0028   D820             			BE2D_($41)				;Effect: Range #41
0028   D820             
0028   D820 2D 41       
0029   D822             			EXE_($04)				;CPU Execute Next 4 Bytes
0029   D822~            			EXE_($04)				;CPU Execute Next 4 Bytes
0029   D822~            			EXE_($04)				;CPU Execute Next 4 Bytes
0029   D822             
0029   D822 46          
0029   D823             
0030   D823 96 26       			ldaa	$26
0031   D825 84 20       			anda	#$20
0032   D827 5BFCE000F3  			.db $5B,$FC,$E0,$00,$F3		;BNE_RAM$00==#0 to gb_48
0033   D82C             			BE2E_($0D)				;Effect: Range #0D
0033   D82C             
0033   D82C 2E 0D       
0034   D82E             gb_49			SLEEP_(6)
0034   D82E             
0034   D82E 76          
0034   D82F~            gb_49			SLEEP_(6)
0034   D82F~            gb_49			SLEEP_(6)
0034   D82F             
0035   D82F             			BE2E_($41)				;Effect: Range #41
0035   D82F             
0035   D82F 2E 41       
0036   D831             			EXE_($04)				;CPU Execute Next 4 Bytes
0036   D831~            			EXE_($04)				;CPU Execute Next 4 Bytes
0036   D831~            			EXE_($04)				;CPU Execute Next 4 Bytes
0036   D831             
0036   D831 46          
0036   D832             
0037   D832 96 27       			ldaa	$27
0038   D834 84 20       			anda	#$20
0039   D836 5BFCE000F3  			.db $5B,$FC,$E0,$00,$F3		;BNE_RAM$00==#0 to gb_49
0040   D83B             			BE2E_($0D)				;Effect: Range #0D
0040   D83B             
0040   D83B 2E 0D       
0041   D83D             gb_4A			SLEEP_(6)
0041   D83D             
0041   D83D 76          
0041   D83E~            gb_4A			SLEEP_(6)
0041   D83E~            gb_4A			SLEEP_(6)
0041   D83E             
0042   D83E             			BE2C_($41)				;Effect: Range #41
0042   D83E             
0042   D83E 2C 41       
0043   D840             			EXE_($04)				;CPU Execute Next 4 Bytes
0043   D840~            			EXE_($04)				;CPU Execute Next 4 Bytes
0043   D840~            			EXE_($04)				;CPU Execute Next 4 Bytes
0043   D840             
0043   D840 46          
0043   D841             
0044   D841 96 26       			ldaa	$26
0045   D843 84 40       			anda	#$40
0046   D845 5BFCE000F3  			.db $5B,$FC,$E0,$00,$F3		;BNE_RAM$00==#0 to gb_4A
0047   D84A             			BE2E_($0D)				;Effect: Range #0D
0047   D84A             
0047   D84A 2E 0D       
0048   D84C             gb_4B			SLEEP_(6)
0048   D84C             
0048   D84C 76          
0048   D84D~            gb_4B			SLEEP_(6)
0048   D84D~            gb_4B			SLEEP_(6)
0048   D84D             
0049   D84D             			BE2E_($41)				;Effect: Range #41
0049   D84D             
0049   D84D 2E 41       
0050   D84F             			EXE_($04)				;CPU Execute Next 4 Bytes
0050   D84F~            			EXE_($04)				;CPU Execute Next 4 Bytes
0050   D84F~            			EXE_($04)				;CPU Execute Next 4 Bytes
0050   D84F             
0050   D84F 46          
0050   D850             
0051   D850 96 27       			ldaa	$27
0052   D852 84 20       			anda	#$20
0053   D854 5AFCE000F3  			.db $5A,$FC,$E0,$00,$F3		;BEQ_RAM$00==#0 to gb_4B
0054   D859             			BE2E_($0D)				;Effect: Range #0D
0054   D859             
0054   D859 2E 0D       
0055   D85B             gb_4C			SLEEP_(6)
0055   D85B             
0055   D85B 76          
0055   D85C~            gb_4C			SLEEP_(6)
0055   D85C~            gb_4C			SLEEP_(6)
0055   D85C             
0056   D85C             			BE2D_($41)				;Effect: Range #41
0056   D85C             
0056   D85C 2D 41       
0057   D85E             			EXE_($04)				;CPU Execute Next 4 Bytes
0057   D85E~            			EXE_($04)				;CPU Execute Next 4 Bytes
0057   D85E~            			EXE_($04)				;CPU Execute Next 4 Bytes
0057   D85E             
0057   D85E 46          
0057   D85F             
0058   D85F 96 26       			ldaa	$26
0059   D861 84 20       			anda	#$20
0060   D863 5AFCE000F3  			.db $5A,$FC,$E0,$00,$F3		;BEQ_RAM$00==#0 to gb_4C
0061   D868             			BE2E_($0D)				;Effect: Range #0D
0061   D868             
0061   D868 2E 0D       
0062   D86A             			JMPR_(gb_47)			
0062   D86A~            			JMPR_(gb_47)			
0062   D86A~            			JMPR_(gb_47)			
0062   D86A             
0062   D86A~            			JMPR_(gb_47)			
0062   D86A~            			JMPR_(gb_47)			
0062   D86A             
0062   D86A             
0062   D86A 8F          
0062   D86B A4          
0063   D86C BD F3 AB    gj_2E			jsr	macro_start
0064   D86F             			PRI_($32)				;Priority=#32
0064   D86F 52 32       
0065   D871             			BE28_($45)				;Effect: Range #45
0065   D871             
0065   D871 28 45       
0066   D873             			BE2A_($05)				;Effect: Range #05
0066   D873             
0066   D873 2A 05       
0067   D875             			SETRAM_($00,$10)			;RAM$00=$10
0067   D875~            			SETRAM_($00,$10)			;RAM$00=$10
0067   D875~            			SETRAM_($00,$10)			;RAM$00=$10
0067   D875             
0067   D875 C0 10       
0068   D877             gb_91			SLEEP_(4)
0068   D877             
0068   D877 74          
0068   D878~            gb_91			SLEEP_(4)
0068   D878~            gb_91			SLEEP_(4)
0068   D878             
0069   D878             			BE2E_($05)				;Effect: Range #05
0069   D878             
0069   D878 2E 05       
0070   D87A             			ADDRAM_($00,$FF)			;RAM$00+=$FF
0070   D87A~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0070   D87A~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0070   D87A             
0070   D87A B0 FF       
0071   D87C 5BFCE000F6  			.db $5B,$FC,$E0,$00,$F6		;BNE_RAM$00==#0 to gb_91
0072   D881             			SETRAM_($00,$10)			;RAM$00=$10
0072   D881~            			SETRAM_($00,$10)			;RAM$00=$10
0072   D881~            			SETRAM_($00,$10)			;RAM$00=$10
0072   D881             
0072   D881 C0 10       
0073   D883             gb_92			SLEEP_(3)
0073   D883             
0073   D883 73          
0073   D884~            gb_92			SLEEP_(3)
0073   D884~            gb_92			SLEEP_(3)
0073   D884             
0074   D884             			BE2D_($05)				;Effect: Range #05
0074   D884             
0074   D884 2D 05       
0075   D886             			ADDRAM_($00,$FF)			;RAM$00+=$FF
0075   D886~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0075   D886~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0075   D886             
0075   D886 B0 FF       
0076   D888 5BFCE000F6  			.db $5B,$FC,$E0,$00,$F6		;BNE_RAM$00==#0 to gb_92
0077   D88D             			BE29_($C5,$05)			;Effect: Range #C5 Range #05
0077   D88D             
0077   D88D 29 C5 05    
0078   D890             			KILL_					;Remove This Thread
0078   D890 03          
0079   D891             
0080   D891 BD F3 AB    gj_28			jsr	macro_start
0081   D894             			PRI_($32)				;Priority=#32
0081   D894 52 32       
0082   D896             			BE28_($46)				;Effect: Range #46
0082   D896             
0082   D896 28 46       
0083   D898             			SETRAM_($00,$10)			;RAM$00=$10
0083   D898~            			SETRAM_($00,$10)			;RAM$00=$10
0083   D898~            			SETRAM_($00,$10)			;RAM$00=$10
0083   D898             
0083   D898 C0 10       
0084   D89A             			BE2A_($06)				;Effect: Range #06
0084   D89A             
0084   D89A 2A 06       
0085   D89C             gb_84			SLEEP_(4)
0085   D89C             
0085   D89C 74          
0085   D89D~            gb_84			SLEEP_(4)
0085   D89D~            gb_84			SLEEP_(4)
0085   D89D             
0086   D89D             			BE2E_($06)				;Effect: Range #06
0086   D89D             
0086   D89D 2E 06       
0087   D89F             			ADDRAM_($00,$FF)			;RAM$00+=$FF
0087   D89F~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0087   D89F~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0087   D89F             
0087   D89F B0 FF       
0088   D8A1 5BFCE000F6  			.db $5B,$FC,$E0,$00,$F6		;BNE_RAM$00==#0 to gb_84
0089   D8A6             			SETRAM_($00,$10)			;RAM$00=$10
0089   D8A6~            			SETRAM_($00,$10)			;RAM$00=$10
0089   D8A6~            			SETRAM_($00,$10)			;RAM$00=$10
0089   D8A6             
0089   D8A6 C0 10       
0090   D8A8             gb_85			SLEEP_(3)
0090   D8A8             
0090   D8A8 73          
0090   D8A9~            gb_85			SLEEP_(3)
0090   D8A9~            gb_85			SLEEP_(3)
0090   D8A9             
0091   D8A9             			BE2D_($06)				;Effect: Range #06
0091   D8A9             
0091   D8A9 2D 06       
0092   D8AB             			ADDRAM_($00,$FF)			;RAM$00+=$FF
0092   D8AB~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0092   D8AB~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0092   D8AB             
0092   D8AB B0 FF       
0093   D8AD 5BFCE000F6  			.db $5B,$FC,$E0,$00,$F6		;BNE_RAM$00==#0 to gb_85
0094   D8B2             			BE29_($C6,$06)			;Effect: Range #C6 Range #06
0094   D8B2             
0094   D8B2 29 C6 06    
0095   D8B5             			KILL_					;Remove This Thread
0095   D8B5 03          
0096   D8B6             
0097   D8B6 BD F3 AB    gj_13			jsr	macro_start
0098   D8B9 5AFB585769  			.db $5A,$FB,$58,$57,$69		;BEQ_(BIT#17 || BIT#18) to gb_6C
0099   D8BE             			PRI_($32)				;Priority=#32
0099   D8BE 52 32       
0100   D8C0             			BITON_($57)				;Turn ON: Bit#17
0100   D8C0             
0100   D8C0 10 57       
0101   D8C2             			SLEEP_(15)
0101   D8C2             
0101   D8C2 7F          
0101   D8C3~            			SLEEP_(15)
0101   D8C3~            			SLEEP_(15)
0101   D8C3             
0102   D8C3             			BE28_($43)				;Effect: Range #43
0102   D8C3             
0102   D8C3 28 43       
0103   D8C5             			BE29_($03)				;Effect: Range #03
0103   D8C5             
0103   D8C5 29 03       
0104   D8C7             			SETRAM_($00,$06)			;RAM$00=$06
0104   D8C7~            			SETRAM_($00,$06)			;RAM$00=$06
0104   D8C7~            			SETRAM_($00,$06)			;RAM$00=$06
0104   D8C7             
0104   D8C7 C0 06       
0105   D8C9             			BITON2_($6D)			;Turn ON: Lamp#2D(super_2x)
0105   D8C9             
0105   D8C9 20 6D       
0106   D8CB             gb_6D			SLEEP_(5)
0106   D8CB             
0106   D8CB 75          
0106   D8CC~            gb_6D			SLEEP_(5)
0106   D8CC~            gb_6D			SLEEP_(5)
0106   D8CC             
0107   D8CC             			BE2E_($03)				;Effect: Range #03
0107   D8CC             
0107   D8CC 2E 03       
0108   D8CE 5B F7 30 F9 			.db $5B,$F7,$30,$F9		;BNE_BIT#30 to gb_6D
0109   D8D2             gb_6E			SLEEP_(5)
0109   D8D2             
0109   D8D2 75          
0109   D8D3~            gb_6E			SLEEP_(5)
0109   D8D3~            gb_6E			SLEEP_(5)
0109   D8D3             
0110   D8D3             			BE2D_($03)				;Effect: Range #03
0110   D8D3             
0110   D8D3 2D 03       
0111   D8D5 5B F7 2D F9 			.db $5B,$F7,$2D,$F9		;BNE_BIT#2D to gb_6E
0112   D8D9             			ADDRAM_($00,$FF)			;RAM$00+=$FF
0112   D8D9~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0112   D8D9~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0112   D8D9             
0112   D8D9 B0 FF       
0113   D8DB 5BFCE000EB  			.db $5B,$FC,$E0,$00,$EB		;BNE_RAM$00==#0 to gb_6D
0114   D8E0             			SETRAM_($00,$2D)			;RAM$00=$2D
0114   D8E0~            			SETRAM_($00,$2D)			;RAM$00=$2D
0114   D8E0~            			SETRAM_($00,$2D)			;RAM$00=$2D
0114   D8E0             
0114   D8E0 C0 2D       
0115   D8E2             gb_6F			BITOFFP2_($00)			;Turn OFF Lamp/Bit @RAM:00
0115   D8E2             
0115   D8E2 25 00       
0116   D8E4             			SLEEP_(8)
0116   D8E4             
0116   D8E4 78          
0116   D8E5~            			SLEEP_(8)
0116   D8E5~            			SLEEP_(8)
0116   D8E5             
0117   D8E5             			ADDRAM_($00,$01)			;RAM$00+=$01
0117   D8E5~            			ADDRAM_($00,$01)			;RAM$00+=$01
0117   D8E5~            			ADDRAM_($00,$01)			;RAM$00+=$01
0117   D8E5             
0117   D8E5 B0 01       
0118   D8E7 5BFDE030F6  			.db $5B,$FD,$E0,$30,$F6		;BNE_RAM$00>=#48 to gb_6F
0119   D8EC             			BITOFF_($57)			;Turn OFF: Bit#17
0119   D8EC             
0119   D8EC 11 57       
0120   D8EE             			KILL_					;Remove This Thread
0120   D8EE 03          
0121   D8EF             
0122   D8EF BD F3 AB    gj_15			jsr	macro_start
0123   D8F2 5AFB585630  			.db $5A,$FB,$58,$56,$30		;BEQ_(BIT#16 || BIT#18) to gb_6C
0124   D8F7             			PRI_($32)				;Priority=#32
0124   D8F7 52 32       
0125   D8F9             			BITON_($56)				;Turn ON: Bit#16
0125   D8F9             
0125   D8F9 10 56       
0126   D8FB             			SLEEP_(7)
0126   D8FB             
0126   D8FB 77          
0126   D8FC~            			SLEEP_(7)
0126   D8FC~            			SLEEP_(7)
0126   D8FC             
0127   D8FC             			BE28_($42)				;Effect: Range #42
0127   D8FC             
0127   D8FC 28 42       
0128   D8FE             			BE29_($02)				;Effect: Range #02
0128   D8FE             
0128   D8FE 29 02       
0129   D900             			SETRAM_($00,$06)			;RAM$00=$06
0129   D900~            			SETRAM_($00,$06)			;RAM$00=$06
0129   D900~            			SETRAM_($00,$06)			;RAM$00=$06
0129   D900             
0129   D900 C0 06       
0130   D902             			BITON2_($71)			;Turn ON: Lamp#31(2x_mult)
0130   D902             
0130   D902 20 71       
0131   D904             gb_73			SLEEP_(5)
0131   D904             
0131   D904 75          
0131   D905~            gb_73			SLEEP_(5)
0131   D905~            gb_73			SLEEP_(5)
0131   D905             
0132   D905             			BE2E_($02)				;Effect: Range #02
0132   D905             
0132   D905 2E 02       
0133   D907 5B F7 34 F9 			.db $5B,$F7,$34,$F9		;BNE_BIT#34 to gb_73
0134   D90B             gb_74			SLEEP_(5)
0134   D90B             
0134   D90B 75          
0134   D90C~            gb_74			SLEEP_(5)
0134   D90C~            gb_74			SLEEP_(5)
0134   D90C             
0135   D90C             			BE2D_($02)				;Effect: Range #02
0135   D90C             
0135   D90C 2D 02       
0136   D90E 5B F7 31 F9 			.db $5B,$F7,$31,$F9		;BNE_BIT#31 to gb_74
0137   D912             			ADDRAM_($00,$FF)			;RAM$00+=$FF
0137   D912~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0137   D912~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0137   D912             
0137   D912 B0 FF       
0138   D914 5BFCE000EB  			.db $5B,$FC,$E0,$00,$EB		;BNE_RAM$00==#0 to gb_73
0139   D919             			SETRAM_($00,$31)			;RAM$00=$31
0139   D919~            			SETRAM_($00,$31)			;RAM$00=$31
0139   D919~            			SETRAM_($00,$31)			;RAM$00=$31
0139   D919             
0139   D919 C0 31       
0140   D91B             gb_75			BITOFFP2_($00)			;Turn OFF Lamp/Bit @RAM:00
0140   D91B             
0140   D91B 25 00       
0141   D91D             			SLEEP_(8)
0141   D91D             
0141   D91D 78          
0141   D91E~            			SLEEP_(8)
0141   D91E~            			SLEEP_(8)
0141   D91E             
0142   D91E             			ADDRAM_($00,$01)			;RAM$00+=$01
0142   D91E~            			ADDRAM_($00,$01)			;RAM$00+=$01
0142   D91E~            			ADDRAM_($00,$01)			;RAM$00+=$01
0142   D91E             
0142   D91E B0 01       
0143   D920 5BFDE034F6  			.db $5B,$FD,$E0,$34,$F6		;BNE_RAM$00>=#52 to gb_75
0144   D925             			BITOFF_($56)			;Turn OFF: Bit#16
0144   D925             
0144   D925 11 56       
0145   D927             gb_6C			KILL_					;Remove This Thread
0145   D927 03          
0146   D928             
0147   D928             
0148   D928 2D 3F       lamptable	.db $2D ,$3F	;(00) super_2x -- bonus_20
0149   D92A 35 3D       			.db $35 ,$3D	;(01) bonus_1 -- bonus_9
0150   D92C 31 34       			.db $31 ,$34	;(02) 2x_mult -- 5x_mult
0151   D92E 2D 30       			.db $2D ,$30	;(03) super_2x -- super_5x
0152   D930 08 0F       			.db $08 ,$0F	;(04) lamp_b -- lamp_a3
0153   D932 1A 1C       			.db $1A ,$1C	;(05) lower_eject_30 -- lower_eject_90
0154   D934 20 22       			.db $20 ,$22	;(06) urbull_20k -- urbull_eb
0155   D936 16 17       			.db $16 ,$17	;(07) left_special -- right_special
0156   D938 10 15       			.db $10 ,$15	;(08) lamp_1 -- lamp_6
0157   D93A 10 12       			.db $10 ,$12	;(09) lamp_1 -- lamp_3
0158   D93C 13 15       			.db $13 ,$15	;(0A) lamp_4 -- lamp_6
0159   D93E 23 27       			.db $23 ,$27	;(0B) lbull_5k -- lbull_25k
0160   D940 28 2C       			.db $28 ,$2C	;(0C) rbull_2x -- rbull_10x
0161   D942 3E 3F       			.db $3E ,$3F	;(0D) bonus_10 -- bonus_20
0162   D944 1D 1F       			.db $1D ,$1F	;(0E) lower_eject_lock -- upper_eject_cb
0163   D946 48 4A       			.db $48 ,$4A	;(0F) lamp_b -- lamp_rr
0164   D948 4B 4F       			.db $4B ,$4F	;(10) lamp_a2 -- lamp_a3
0165   D94A 06 3F       			.db $06 ,$3F	;(11) barr_dt_bank -- bonus_20
0166   D94C 23 2C       			.db $23 ,$2C	;(12) lbull_5k -- rbull_10x
0167   D94E 1D 1E       			.db $1D ,$1E	;(13) lower_eject_lock -- upper_eject_lock
0168   D950 06 07       			.db $06 ,$07	;(14) barr_dt_bank -- acora_dt_bank
0169   D952             
0170   D952             
0171   D952 21 10 3D    soundtable		.db $21, $10,	$3D		;(00) 
0172   D955 AE 60 3E    			.db $AE, $60,	$3E		;(01) 
0173   D958 A4 50 3C    			.db $A4, $50,	$3C		;(02) 
0174   D95B 22 10 3B    			.db $22, $10,	$3B		;(03) 
0175   D95E A9 D0 3A    			.db $A9, $D0,	$3A		;(04) 
0176   D961 28 70 39    			.db $28, $70,	$39		;(05) 
0177   D964 22 20 38    			.db $22, $20,	$38		;(06) 
0178   D967 22 10 37    			.db $22, $10,	$37		;(07) 
0179   D96A A2 40 36    			.db $A2, $40,	$36		;(08) 
0180   D96D 22 30 35    			.db $22, $30,	$35		;(09) 
0181   D970 23 10 34    			.db $23, $10,	$34		;(0A) 
0182   D973 23 50 33    			.db $23, $50,	$33		;(0B) 
0183   D976 21 10 32    			.db $21, $10,	$32		;(0C) 
0184   D979 23 20 31    			.db $23, $20,	$31		;(0D) 
0185   D97C A2 30 30    			.db $A2, $30,	$30		;(0E) 
0186   D97F 22 90 2F    			.db $22, $90,	$2F		;(0F) 
0187   D982 A1 01 2E    			.db $A1, $01,	$2E		;(10) 
0188   D985 22 30 2D    			.db $22, $30,	$2D		;(11) 
0189   D988 CE 05 2C    			.db $CE, $05,	$2C		;(12) 
0190   D98B 21 10 2B    			.db $21, $10,	$2B		;(13) 
0191   D98E 23 40 2A    			.db $23, $40,	$2A		;(14) 
0192   D991 23 20 29    			.db $23, $20,	$29		;(15) 
0193   D994 21 10 28    			.db $21, $10,	$28		;(16) 
0194   D997 22 30 27    			.db $22, $30,	$27		;(17) 
0195   D99A 21 10 26    			.db $21, $10,	$26		;(18) 
0196   D99D 2A 50 25    			.db $2A, $50,	$25		;(19) 
0197   D9A0 AA 80 24    			.db $AA, $80,	$24		;(1A) 
0198   D9A3 AA 50 23    			.db $AA, $50,	$23		;(1B) 
0199   D9A6 AF 50 22    			.db $AF, $50,	$22		;(1C) 
0200   D9A9 AF 50 21    			.db $AF, $50,	$21		;(1D) 
0201   D9AC AF 50 20    			.db $AF, $50,	$20		;(1E) 
0202   D9AF             
0203   D9AF             
0204   D9AF 93          switchtable		.db %10010011	\.dw sw_plumbtilt		;(1) plumbtilt
0204   D9B0 E1 4A       
0205   D9B2 91          			.db %10010001	\.dw sw_balltilt		;(2) balltilt
0205   D9B3 E1 68       
0206   D9B5 F1          			.db %11110001	\.dw sw_credit_button	;(3) credit_button
0206   D9B6 E0 FF       
0207   D9B8 F2          			.db %11110010	\.dw coin_accepted	;(4) coin_right
0207   D9B9 F7 A2       
0208   D9BB F2          			.db %11110010	\.dw coin_accepted	;(5) coin_center
0208   D9BC F7 A2       
0209   D9BE F2          			.db %11110010	\.dw coin_accepted	;(6) coin_left
0209   D9BF F7 A2       
0210   D9C1 71          			.db %01110001	\.dw reset			;(7) slam
0210   D9C2 E8 00       
0211   D9C4 F1          			.db %11110001	\.dw sw_hstd_res		;(8) hstd_res
0211   D9C5 E0 DA       
0212   D9C7 93          			.db %10010011	\.dw sw_barracora_lane	;(9) barracora_lane
0212   D9C8 E2 8D       
0213   D9CA FE          			.db %11111110	\.dw sw_upper_eject	;(10) upper_eject
0213   D9CB E3 7B       
0214   D9CD FE          			.db %11111110	\.dw sw_lower_eject	;(11) lower_eject
0214   D9CE E3 BD       
0215   D9D0 F6          			.db %11110110	\.dw sw_outhole		;(12) outhole
0215   D9D1 E4 6C       
0216   D9D3 D4          			.db %11010100	\.dw sw_left_trough	;(13) left_trough
0216   D9D4 E4 22       
0217   D9D6 D4          			.db %11010100	\.dw sw_center_trough	;(14) center_trough
0217   D9D7 E4 22       
0218   D9D9 D4          			.db %11010100	\.dw sw_right_trough	;(15) right_trough
0218   D9DA E4 22       
0219   D9DC 9E          			.db %10011110	\.dw sw_ball_shooter	;(16) ball_shooter
0219   D9DD E4 B0       
0220   D9DF 93          			.db %10010011	\.dw sw_1_4_lane		;(17) 1_4_lane
0220   D9E0 E2 E5       
0221   D9E2 93          			.db %10010011	\.dw sw_2_5_lane		;(18) 2_5_lane
0221   D9E3 E2 E5       
0222   D9E5 93          			.db %10010011	\.dw sw_3_6_lane		;(19) 3_6_lane
0222   D9E6 E2 E5       
0223   D9E8 91          			.db %10010001	\.dw sw_left_jet		;(20) left_jet
0223   D9E9 E4 89       
0224   D9EB 91          			.db %10010001	\.dw sw_right_jet		;(21) right_jet
0224   D9EC E4 89       
0225   D9EE 91          			.db %10010001	\.dw sw_bottom_jet	;(22) bottom_jet
0225   D9EF E4 85       
0226   D9F1 93          			.db %10010011	\.dw sw_left_outlane	;(23) left_outlane
0226   D9F2 E4 97       
0227   D9F4 93          			.db %10010011	\.dw sw_right_outlane	;(24) right_outlane
0227   D9F5 E4 97       
0228   D9F7 97          			.db %10010111	\.dw sw_spinner		;(25) spinner
0228   D9F8 E5 3A       
0229   D9FA 93          			.db %10010011	\.dw sw_right_turnaround;(26) right_turnaround
0229   D9FB E6 AD       
0230   D9FD 92          			.db %10010010	\.dw sw_left_bull		;(27) left_bull
0230   D9FE E4 D9       
0231   DA00 92          			.db %10010010	\.dw sw_right_bull	;(28) right_bull
0231   DA01 E4 E6       
0232   DA03 91          			.db %10010001	\.dw sw_lsling_10		;(29) lsling_10
0232   DA04 E4 8D       
0233   DA06 91          			.db %10010001	\.dw sw_rsling_10		;(30) rsling_10
0233   DA07 E4 8D       
0234   DA09 93          			.db %10010011	\.dw sw_left_return	;(31) left_return
0234   DA0A E4 91       
0235   DA0C 93          			.db %10010011	\.dw sw_right_return	;(32) right_return
0235   DA0D E4 91       
0236   DA0F 92          			.db %10010010	\.dw sw_upper_right_bull;(33) upper_right_bull
0236   DA10 E4 EA       
0237   DA12 91          			.db %10010001	\.dw sw_left_flipper	;(34) left_flipper
0237   DA13 E2 DF       
0238   DA15 91          			.db %10010001	\.dw sw_right_flipper	;(35) right_flipper
0238   DA16 E2 E2       
0239   DA18 91          			.db %10010001	\.dw sw_pf_tilt		;(36) pf_tilt
0239   DA19 E1 68       
0240   DA1B 91          			.db %10010001	\.dw sw_upper_10		;(37) upper_10
0240   DA1C E4 8D       
0241   DA1E 91          			.db %10010001	\.dw sw_lower_10		;(38) lower_10
0241   DA1F E4 8D       
0242   DA21 91          			.db %10010001	\.dw sw_5bank_10		;(39) 5bank_10
0242   DA22 E4 8D       
0243   DA24 91          			.db %10010001	\.dw sw_lleft_10		;(40) lleft_10
0243   DA25 E4 8D       
0244   DA27 95          			.db %10010101	\.dw sw_dt_b		;(41) dt_b
0244   DA28 E6 1E       
0245   DA2A 95          			.db %10010101	\.dw sw_dt_a1		;(42) dt_a1
0245   DA2B E6 1E       
0246   DA2D 95          			.db %10010101	\.dw sw_dt_rr		;(43) dt_rr
0246   DA2E E6 1E       
0247   DA30 95          			.db %10010101	\.dw sw_dt_a2		;(44) dt_a2
0247   DA31 E6 1E       
0248   DA33 95          			.db %10010101	\.dw sw_dt_c		;(45) dt_c
0248   DA34 E6 1E       
0249   DA36 95          			.db %10010101	\.dw sw_dt_o		;(46) dt_o
0249   DA37 E6 1E       
0250   DA39 95          			.db %10010101	\.dw sw_dt_r		;(47) dt_r
0250   DA3A E6 1E       
0251   DA3C 95          			.db %10010101	\.dw sw_dt_a3		;(48) dt_a3
0251   DA3D E6 1E       
0252   DA3F             switchtable_end
0253   DA3F             
0254   DA3F 8D 19       gj_20			bsr	gb_58
0255   DA41 5F          			clrb	
0256   DA42 86 A0       			ldaa	#$A0
0257   DA44 D1 CD       gb_5C			cmpb	player_up
0258   DA46 27 08       			beq	gb_59
0259   DA48 97 AA       			staa	thread_priority
0260   DA4A CE DA 67    			ldx	#gj_2F
0261   DA4D BD EA 78    			jsr	newthread_sp
0262   DA50 C1 03       gb_59			cmpb	#$03
0263   DA52 27 05       			beq	gb_5A
0264   DA54 5C          			incb	
0265   DA55 8D 0B       			bsr	gb_5B
0266   DA57 20 EB       			bra	gb_5C
0267   DA59 39          gb_5A			rts	
0268   DA5A BD F9 19    gb_58			jsr	disp_mask
0269   DA5D 94 60       			anda	comma_flags
0270   DA5F 97 60       			staa	comma_flags
0271   DA61 39          			rts	
0272   DA62 BD EA 2F    gb_5B			jsr	addthread
0273   DA65 10          			.db $10
0274   DA66             
0275   DA66 39          			rts	
0276   DA67 17          gj_2F			tba	
0277   DA68 CE 00 5C    			ldx	#dmask_p1
0278   DA6B BD EF 4D    			jsr	xplusb
0279   DA6E C6 7F       			ldab	#$7F
0280   DA70 E7 00       			stab	$00,X
0281   DA72 BD DB 04    			jsr	gj_33
0282   DA75 86 FF       			ldaa	#$FF
0283   DA77 A7 00       			staa	$00,X
0284   DA79 A7 01       			staa	$01,X
0285   DA7B A7 02       			staa	$02,X
0286   DA7D A7 03       			staa	$03,X
0287   DA7F D6 E4       			ldab	spare_ram+4
0288   DA81 E7 00       			stab	$00,X
0289   DA83 E7 03       			stab	$03,X
0290   DA85 8D DB       			bsr	gb_5B
0291   DA87 E6 00       			ldab	$00,X
0292   DA89 BD DB 0C    			jsr	gj_34
0293   DA8C E7 01       			stab	$01,X
0294   DA8E E4 03       			andb	$03,X
0295   DA90 E7 03       			stab	$03,X
0296   DA92 8D CE       			bsr	gb_5B
0297   DA94 D6 E4       			ldab	spare_ram+4
0298   DA96 E7 02       			stab	$02,X
0299   DA98 E4 01       			andb	$01,X
0300   DA9A E7 01       			stab	$01,X
0301   DA9C 8D C4       			bsr	gb_5B
0302   DA9E E6 01       			ldab	$01,X
0303   DAA0 E7 02       			stab	$02,X
0304   DAA2 8D BE       			bsr	gb_5B
0305   DAA4 C6 FF       			ldab	#$FF
0306   DAA6 E7 00       			stab	$00,X
0307   DAA8 E6 03       			ldab	$03,X
0308   DAAA CA 0F       			orab	#$0F
0309   DAAC E7 03       			stab	$03,X
0310   DAAE 8D B2       			bsr	gb_5B
0311   DAB0 D6 E4       			ldab	spare_ram+4
0312   DAB2 E7 01       			stab	$01,X
0313   DAB4 EA 03       			orab	$03,X
0314   DAB6 E7 03       			stab	$03,X
0315   DAB8 8D A8       			bsr	gb_5B
0316   DABA E6 02       			ldab	$02,X
0317   DABC CA 0F       			orab	#$0F
0318   DABE E7 02       			stab	$02,X
0319   DAC0 EA 01       			orab	$01,X
0320   DAC2 E7 01       			stab	$01,X
0321   DAC4 8D 4D       			bsr	gb_7C
0322   DAC6 8D 4B       gb_7D			bsr	gb_7C
0323   DAC8 E7 02       			stab	$02,X
0324   DACA E7 01       			stab	$01,X
0325   DACC 8D 45       			bsr	gb_7C
0326   DACE 8D 3C       			bsr	gj_34
0327   DAD0 E7 01       			stab	$01,X
0328   DAD2 E7 03       			stab	$03,X
0329   DAD4 C6 FF       			ldab	#$FF
0330   DAD6 E7 02       			stab	$02,X
0331   DAD8 8D 39       			bsr	gb_7C
0332   DADA E7 00       			stab	$00,X
0333   DADC E7 03       			stab	$03,X
0334   DADE C6 FF       			ldab	#$FF
0335   DAE0 E7 01       			stab	$01,X
0336   DAE2 8D 2F       			bsr	gb_7C
0337   DAE4 8D 26       			bsr	gj_34
0338   DAE6 E7 03       			stab	$03,X
0339   DAE8 E7 01       			stab	$01,X
0340   DAEA C6 FF       			ldab	#$FF
0341   DAEC E7 00       			stab	$00,X
0342   DAEE 8D 23       			bsr	gb_7C
0343   DAF0 E7 01       			stab	$01,X
0344   DAF2 E7 02       			stab	$02,X
0345   DAF4 C6 FF       			ldab	#$FF
0346   DAF6 E7 03       			stab	$03,X
0347   DAF8 8D 19       			bsr	gb_7C
0348   DAFA 8D 10       			bsr	gj_34
0349   DAFC E7 02       			stab	$02,X
0350   DAFE C6 FF       			ldab	#$FF
0351   DB00 E7 01       			stab	$01,X
0352   DB02 20 C2       			bra	gb_7D
0353   DB04 48          gj_33			asla	
0354   DB05 48          			asla	
0355   DB06 CE 00 48    			ldx	#score_p1_b1
0356   DB09 7E EE FF    			jmp	xplusa
0357   DB0C 58          gj_34			aslb	
0358   DB0D 58          			aslb	
0359   DB0E 58          			aslb	
0360   DB0F 58          			aslb	
0361   DB10 CA 0F       			orab	#$0F
0362   DB12 39          			rts	
0363   DB13 DF E5       gb_7C			stx	spare_ram+5
0364   DB15 E6 02       			ldab	$02,X
0365   DB17 C4 F0       			andb	#$F0
0366   DB19 C1 F0       			cmpb	#$F0
0367   DB1B 27 09       			beq	gb_93
0368   DB1D BD FB 80    			jsr	get_random
0369   DB20 84 03       			anda	#$03
0370   DB22 8B 05       			adda	#$05
0371   DB24 DE E5       			ldx	spare_ram+5
0372   DB26 97 B7       gb_93			staa	thread_timer_byte
0373   DB28 BD EA 24    			jsr	delaythread
0374   DB2B D6 E4       			ldab	spare_ram+4
0375   DB2D 39          			rts	
0376   DB2E             gj_11			BITON_($61)				;Turn ON: Bit#21
0376   DB2E             
0376   DB2E 10 61       
0377   DB30             			SLEEP_(128)
0377   DB30~            			SLEEP_(128)
0377   DB30~            			SLEEP_(128)
0377   DB30             
0377   DB30 53 80       
0377   DB32             
0378   DB32             			CPUX_					;Resume CPU Execution
0378   DB32 04          
0379   DB33 96 60       			ldaa	comma_flags
0380   DB35 97 E1       			staa	spare_ram+1
0381   DB37 7F 00 C9    			clr	flag_gameover
0382   DB3A 4F          			clra	
0383   DB3B D6 CC       			ldab	num_players
0384   DB3D 8D 3B       gb_67			bsr	gb_66
0385   DB3F 5A          			decb	
0386   DB40 26 FB       			bne	gb_67
0387   DB42 97 CD       			staa	player_up
0388   DB44 C6 82       			ldab	#$82
0389   DB46 D7 AA       			stab	thread_priority
0390   DB48 CE DC 67    			ldx	#gj_31
0391   DB4B BD EA 78    			jsr	newthread_sp
0392   DB4E F6 01 9B    			ldab	adj_gameadjust4
0393   DB51 C4 0F       			andb	#$0F
0394   DB53 BD F3 AB    			jsr	macro_start
0395   DB56             			SETRAM_($0A,$00)			;RAM$0A=$00
0395   DB56~            			SETRAM_($0A,$00)			;RAM$0A=$00
0395   DB56~            			SETRAM_($0A,$00)			;RAM$0A=$00
0395   DB56             
0395   DB56 CA 00       
0396   DB58             gb_8E			ADDRAM_($0A,$01)			;RAM$0A+=$01
0396   DB58~            gb_8E			ADDRAM_($0A,$01)			;RAM$0A+=$01
0396   DB58~            gb_8E			ADDRAM_($0A,$01)			;RAM$0A+=$01
0396   DB58             
0396   DB58 BA 01       
0397   DB5A 5BFCE10008  			.db $5B,$FC,$E1,$00,$08		;BNE_RAM$01==#0 to gb_8D
0398   DB5F             			SOL_($EE)				;Turn ON Sol#14:bell
0398   DB5F 31 EE       
0399   DB61             			SLEEP_(40)
0399   DB61~            			SLEEP_(40)
0399   DB61~            			SLEEP_(40)
0399   DB61             
0399   DB61 53 28       
0399   DB63             
0400   DB63             			SOL_($0E)				;Turn OFF Sol#14:bell
0400   DB63 31 0E       
0401   DB65             			SLEEP_(32)
0401   DB65~            			SLEEP_(32)
0401   DB65~            			SLEEP_(32)
0401   DB65             
0401   DB65 53 20       
0401   DB67             
0402   DB67 5BFDEAE0EC  gb_8D			.db $5B,$FD,$EA,$E0,$EC		;BNE_RAM$0A>=#224 to gb_8E
0403   DB6C             			CPUX_					;Resume CPU Execution
0403   DB6C 04          
0404   DB6D 86 82       			ldaa	#$82
0405   DB6F 97 AA       			staa	thread_priority
0406   DB71 CE DB AA    			ldx	#gj_3D
0407   DB74 BD EA 78    			jsr	newthread_sp
0408   DB77 7E F8 D2    			jmp	init_player_up
0409   DB7A 37          gb_66			pshb	
0410   DB7B 36          			psha	
0411   DB7C CE 00 35    			ldx	#lampflashflag+5
0412   DB7F 48          			asla	
0413   DB80 48          			asla	
0414   DB81 BD EE FF    			jsr	xplusa
0415   DB84 DF 9A       			stx	temp1
0416   DB86 58          			aslb	
0417   DB87 58          			aslb	
0418   DB88 CE 00 35    			ldx	#lampflashflag+5
0419   DB8B BD EF 4D    			jsr	xplusb
0420   DB8E BD EC 86    gb_87			jsr	score2hex
0421   DB91 16          			tab	
0422   DB92 08          			inx	
0423   DB93 DF 9C       			stx	temp2
0424   DB95 DE 9A       			ldx	temp1
0425   DB97 BD EC 86    			jsr	score2hex
0426   DB9A 11          			cba	
0427   DB9B 26 07       			bne	gb_86
0428   DB9D 08          			inx	
0429   DB9E DF 9A       			stx	temp1
0430   DBA0 DE 9C       			ldx	temp2
0431   DBA2 20 EA       			bra	gb_87
0432   DBA4 32          gb_86			pula	
0433   DBA5 33          			pulb	
0434   DBA6 24 01       			bcc	gb_9C
0435   DBA8 17          			tba	
0436   DBA9 39          gb_9C			rts	
0437   DBAA C6 20       gj_3D			ldab	#$20
0438   DBAC CE 01 99    			ldx	#adj_gameadjust3
0439   DBAF BD EF 53    			jsr	cmosinc_a
0440   DBB2 97 0C       			staa	game_ram_c
0441   DBB4 7F 00 0B    			clr	game_ram_b
0442   DBB7 96 0C       gj_42			ldaa	game_ram_c
0443   DBB9 97 58       			staa	mbip_b0
0444   DBBB 5A          			decb	
0445   DBBC BD F3 AB    			jsr	macro_start
0446   DBBF             			PRI_($82)				;Priority=#82
0446   DBBF 52 82       
0447   DBC1 5AFBFCE100FD			.db $5A,$FB,$FC,$E1,$00,$FD,$EB,$00,$0B;BEQ_(RAM$0B>=#0 || RAM$01==#0) to gb_A5
0447   DBC7 EB000B
0448   DBCA             			SSND_($15)				;Sound #15
0448   DBCA             
0448   DBCA F5          
0448   DBCB~            			SSND_($15)				;Sound #15
0448   DBCB~            			SSND_($15)				;Sound #15
0448   DBCB~            			SSND_($15)				;Sound #15
0448   DBCB             
0449   DBCB 61          			SLEEPI_($1)				;Delay RAM$01
0450   DBCC             			EXE_($04)				;CPU Execute Next 4 Bytes
0450   DBCC~            			EXE_($04)				;CPU Execute Next 4 Bytes
0450   DBCC~            			EXE_($04)				;CPU Execute Next 4 Bytes
0450   DBCC             
0450   DBCC 46          
0450   DBCD             
0451   DBCD 86 FF       			ldaa	#$FF
0452   DBCF 97 58       			staa	mbip_b0
0453   DBD1 61          			SLEEPI_($1)				;Delay RAM$01
0454   DBD2 5C          			JMPD_(gj_42)			
0454   DBD3 DB B7       
0455   DBD5             
0456   DBD5             gb_A5			EXE_($0D)				;CPU Execute Next 13 Bytes
0456   DBD5~            gb_A5			EXE_($0D)				;CPU Execute Next 13 Bytes
0456   DBD5~            gb_A5			EXE_($0D)				;CPU Execute Next 13 Bytes
0456   DBD5             
0456   DBD5 4F          
0456   DBD6             
0457   DBD6 BD EB DB    			jsr	update_eb_count
0458   DBD9 86 82       			ldaa	#$82
0459   DBDB 97 AA       			staa	thread_priority
0460   DBDD CE DC B4    			ldx	#gj_45
0461   DBE0 BD EA 78    			jsr	newthread_sp
0462   DBE3             gj_44			EXE_($09)				;CPU Execute Next 9 Bytes
0462   DBE3~            gj_44			EXE_($09)				;CPU Execute Next 9 Bytes
0462   DBE3~            gj_44			EXE_($09)				;CPU Execute Next 9 Bytes
0462   DBE3             
0462   DBE3 4B          
0462   DBE4             
0463   DBE4 96 0C       			ldaa	game_ram_c
0464   DBE6 8B 99       			adda	#$99
0465   DBE8 19          			daa	
0466   DBE9 97 58       			staa	mbip_b0
0467   DBEB 97 0C       			staa	game_ram_c
0468   DBED 5AFCE0000D  			.db $5A,$FC,$E0,$00,$0D		;BEQ_RAM$00==#0 to gb_04
0469   DBF2             			SSND_($0D)				;Sound #0D
0469   DBF2             
0469   DBF2 ED          
0469   DBF3~            			SSND_($0D)				;Sound #0D
0469   DBF3~            			SSND_($0D)				;Sound #0D
0469   DBF3~            			SSND_($0D)				;Sound #0D
0469   DBF3             
0470   DBF3             			SLEEP_(32)
0470   DBF3~            			SLEEP_(32)
0470   DBF3~            			SLEEP_(32)
0470   DBF3             
0470   DBF3 53 20       
0470   DBF5             
0471   DBF5             			SSND_($15)				;Sound #15
0471   DBF5             
0471   DBF5 F5          
0471   DBF6~            			SSND_($15)				;Sound #15
0471   DBF6~            			SSND_($15)				;Sound #15
0471   DBF6~            			SSND_($15)				;Sound #15
0471   DBF6             
0472   DBF6             			EXE_($04)				;CPU Execute Next 4 Bytes
0472   DBF6~            			EXE_($04)				;CPU Execute Next 4 Bytes
0472   DBF6~            			EXE_($04)				;CPU Execute Next 4 Bytes
0472   DBF6             
0472   DBF6 46          
0472   DBF7             
0473   DBF7 86 FF       			ldaa	#$FF
0474   DBF9 97 58       			staa	mbip_b0
0475   DBFB             			SLEEP_(32)
0475   DBFB~            			SLEEP_(32)
0475   DBFB~            			SLEEP_(32)
0475   DBFB             
0475   DBFB 53 20       
0475   DBFD             
0476   DBFD             			JMPR_(gj_44)			
0476   DBFD~            			JMPR_(gj_44)			
0476   DBFD~            			JMPR_(gj_44)			
0476   DBFD             
0476   DBFD~            			JMPR_(gj_44)			
0476   DBFD~            			JMPR_(gj_44)			
0476   DBFD             
0476   DBFD             
0476   DBFD 8F          
0476   DBFE E4          
0477   DBFF             gb_04			PRI_($86)				;Priority=#86
0477   DBFF 52 86       
0478   DC01             			SOL_($F8)				;Turn ON Sol#8:dt_left_release
0478   DC01 31 F8       
0479   DC03             			REMTHREADS_($F8,$80)		;Remove Multiple Threads Based on Priority
0479   DC03 55 F8 80    
0480   DC06             			BITON_($60)				;Turn ON: Bit#20
0480   DC06             
0480   DC06 10 60       
0481   DC08             			EXE_($03)				;CPU Execute Next 3 Bytes
0481   DC08~            			EXE_($03)				;CPU Execute Next 3 Bytes
0481   DC08~            			EXE_($03)				;CPU Execute Next 3 Bytes
0481   DC08             
0481   DC08 45          
0481   DC09             
0482   DC09 7C 00 C9    			inc	flag_gameover
0483   DC0C             gb_2C			SLEEP_(15)
0483   DC0C             
0483   DC0C 7F          
0483   DC0D~            gb_2C			SLEEP_(15)
0483   DC0D~            gb_2C			SLEEP_(15)
0483   DC0D             
0484   DC0D             			JSRD_(gj_07)			
0484   DC0D 57          
0484   DC0E E2 77       
0485   DC10 5BFDE002F7  			.db $5B,$FD,$E0,$02,$F7		;BNE_RAM$00>=#2 to gb_2C
0486   DC15             			EXE_($0A)				;CPU Execute Next 10 Bytes
0486   DC15~            			EXE_($0A)				;CPU Execute Next 10 Bytes
0486   DC15~            			EXE_($0A)				;CPU Execute Next 10 Bytes
0486   DC15             
0486   DC15 4C          
0486   DC16             
0487   DC16 86 01       			ldaa	#$01
0488   DC18 97 AA       			staa	thread_priority
0489   DC1A CE F9 AB    			ldx	#outhole_main
0490   DC1D BD EA 78    			jsr	newthread_sp
0491   DC20             			SETRAM_($0C,$28)			;RAM$0C=$28
0491   DC20~            			SETRAM_($0C,$28)			;RAM$0C=$28
0491   DC20~            			SETRAM_($0C,$28)			;RAM$0C=$28
0491   DC20             
0491   DC20 CC 28       
0492   DC22             gb_2D			SLEEP_(15)
0492   DC22             
0492   DC22 7F          
0492   DC23~            gb_2D			SLEEP_(15)
0492   DC23~            gb_2D			SLEEP_(15)
0492   DC23             
0493   DC23             			ADDRAM_($0C,$FF)			;RAM$0C+=$FF
0493   DC23~            			ADDRAM_($0C,$FF)			;RAM$0C+=$FF
0493   DC23~            			ADDRAM_($0C,$FF)			;RAM$0C+=$FF
0493   DC23             
0493   DC23 BC FF       
0494   DC25 5AFE0101F8  			.db $5A,$FE,$01,$01,$F8		;BEQ_(LAMP#01(bip) P LAMP#01(bip)) to gb_2D
0495   DC2A             			BITOFF_($E0,$61)			;Turn OFF: Bit#20, Bit#21
0495   DC2A             
0495   DC2A 11 E0 61    
0496   DC2D             			EXE_($0D)				;CPU Execute Next 13 Bytes
0496   DC2D~            			EXE_($0D)				;CPU Execute Next 13 Bytes
0496   DC2D~            			EXE_($0D)				;CPU Execute Next 13 Bytes
0496   DC2D             
0496   DC2D 4F          
0496   DC2E             
0497   DC2E 4F          			clra	
0498   DC2F 97 D6       			staa	flag_timer_bip
0499   DC31 BD F8 A4    			jsr	store_display_mask
0500   DC34 96 E1       			ldaa	spare_ram+1
0501   DC36 97 60       			staa	comma_flags
0502   DC38 BD EB A1    			jsr	update_commas
0503   DC3B 5E 89 0A    			SWCLR_($89),($0A)			;Clear Sw#: $09(upper_eject) $0A(lower_eject)
0504   DC3E             			SLEEP_(64)
0504   DC3E~            			SLEEP_(64)
0504   DC3E~            			SLEEP_(64)
0504   DC3E             
0504   DC3E 53 40       
0504   DC40             
0505   DC40 58F419DB2E  			.db $58,$F4,$19,$DB,$2E		;BEQ_LampOn/Flash#19 to gj_11
0506   DC45 5C          			JMPD_($FA21)			
0506   DC46 FA 21       
0507   DC48             
0508   DC48 BD E1 C9    gj_1B			jsr	gb_02
0509   DC4B 86 7F       			ldaa	#$7F
0510   DC4D CE 00 5C    			ldx	#dmask_p1
0511   DC50 A7 00       			staa	$00,X
0512   DC52 A7 01       			staa	$01,X
0513   DC54 A7 02       			staa	$02,X
0514   DC56 A7 03       			staa	$03,X
0515   DC58 96 CD       			ldaa	player_up
0516   DC5A BD EE FF    			jsr	xplusa
0517   DC5D 6F 00       			clr	$00,X
0518   DC5F BD F9 19    			jsr	disp_mask
0519   DC62 94 60       			anda	comma_flags
0520   DC64 97 60       			staa	comma_flags
0521   DC66 39          			rts	
0522   DC67 8D DF       gj_31			bsr	gj_1B
0523   DC69 C6 40       gb_8B			ldab	#$40
0524   DC6B CE 00 48    gb_8C			ldx	#score_p1_b1
0525   DC6E 4F          			clra	
0526   DC6F 36          gb_8A			psha	
0527   DC70 91 CD       			cmpa	player_up
0528   DC72 27 04       			beq	gb_88
0529   DC74 96 0A       			ldaa	game_ram_a
0530   DC76 8D 13       			bsr	gb_89
0531   DC78 08          gb_88			inx	
0532   DC79 08          			inx	
0533   DC7A 08          			inx	
0534   DC7B 08          			inx	
0535   DC7C 32          			pula	
0536   DC7D 4C          			inca	
0537   DC7E 81 04       			cmpa	#$04
0538   DC80 26 ED       			bne	gb_8A
0539   DC82 BD EA 2F    			jsr	addthread
0540   DC85 04          			.db $04
0541   DC86             
0542   DC86 54          			lsrb	
0543   DC87 25 E0       			bcs	gb_8B
0544   DC89 20 E0       			bra	gb_8C
0545   DC8B DF 9A       gb_89			stx	temp1
0546   DC8D 37          			pshb	
0547   DC8E 97 9E       			staa	temp3
0548   DC90 86 04       			ldaa	#$04
0549   DC92 97 9C       			staa	temp2
0550   DC94 86 FF       gb_9F			ldaa	#$FF
0551   DC96 58          			aslb	
0552   DC97 24 08       			bcc	gb_9D
0553   DC99 96 9E       			ldaa	temp3
0554   DC9B 48          			asla	
0555   DC9C 48          			asla	
0556   DC9D 48          			asla	
0557   DC9E 48          			asla	
0558   DC9F 8A 0F       			oraa	#$0F
0559   DCA1 58          gb_9D			aslb	
0560   DCA2 24 04       			bcc	gb_9E
0561   DCA4 84 F0       			anda	#$F0
0562   DCA6 9B 9E       			adda	temp3
0563   DCA8 A7 00       gb_9E			staa	$00,X
0564   DCAA 08          			inx	
0565   DCAB 7A 00 9C    			dec	temp2
0566   DCAE 26 E4       			bne	gb_9F
0567   DCB0 33          			pulb	
0568   DCB1 DE 9A       			ldx	temp1
0569   DCB3 39          			rts	
0570   DCB4 BD F3 AB    gj_45			jsr	macro_start
0571   DCB7             gb_A7			JSRR_(gj_1F)			
0571   DCB7~            gb_A7			JSRR_(gj_1F)			
0571   DCB7~            gb_A7			JSRR_(gj_1F)			
0571   DCB7             
0571   DCB7~            gb_A7			JSRR_(gj_1F)			
0571   DCB7~            gb_A7			JSRR_(gj_1F)			
0571   DCB7             
0571   DCB7             
0571   DCB7 95          
0571   DCB8 8F          
0572   DCB9             			SLEEP_(80)
0572   DCB9~            			SLEEP_(80)
0572   DCB9~            			SLEEP_(80)
0572   DCB9             
0572   DCB9 53 50       
0572   DCBB             
0573   DCBB 5B 60 F9    			.db $5B,$60,$F9			;BNE_BIT#20 to gb_A7
0574   DCBE             gj_41			KILL_					;Remove This Thread
0574   DCBE 03          
0575   DCBF             
0576   DCBF 565957476061			.db $56,$59,$57,$47,$60,$61,$62,$DE,$D2,$55,$D1,$54,$DF,$D0,$53,$48
0576   DCC5 62DED255D154DFD05348
0577   DCCF 494A4B4CCD5D			.db $49,$4A,$4B,$4C,$CD,$5D,$CE,$5C,$CF,$5B,$5A,$58,$46
0577   DCD5 CE5CCF5B5A5846
0578   DCDC             
0579   DCDC CE DC BE    gj_40			ldx	#gj_41
0580   DCDF DF E2       			stx	spare_ram+2
0581   DCE1 DE E2       gb_A4			ldx	spare_ram+2
0582   DCE3 08          			inx	
0583   DCE4 8C DC DC    			cpx	#gj_40
0584   DCE7 27 13       			beq	gb_A3
0585   DCE9 E6 00       			ldab	$00,X
0586   DCEB DF E2       			stx	spare_ram+2
0587   DCED 17          			tba	
0588   DCEE 84 7F       			anda	#$7F
0589   DCF0 BD F1 7E    			jsr	lamp_on_b
0590   DCF3 5D          			tstb	
0591   DCF4 2B EB       			bmi	gb_A4
0592   DCF6 BD EA 2F    			jsr	addthread
0593   DCF9 03          			.db $03
0594   DCFA             
0595   DCFA 20 E5       			bra	gb_A4
0596   DCFC CE DC BE    gb_A3			ldx	#gj_41
0597   DCFF DF E2       			stx	spare_ram+2
0598   DD01 DE E2       gb_A6			ldx	spare_ram+2
0599   DD03 08          			inx	
0600   DD04 8C DC DC    			cpx	#gj_40
0601   DD07 27 D3       			beq	gj_40
0602   DD09 E6 00       			ldab	$00,X
0603   DD0B DF E2       			stx	spare_ram+2
0604   DD0D 17          			tba	
0605   DD0E 84 7F       			anda	#$7F
0606   DD10 BD F1 83    			jsr	lamp_off_b
0607   DD13 5D          			tstb	
0608   DD14 2B EB       			bmi	gb_A6
0609   DD16 BD EA 2F    			jsr	addthread
0610   DD19 03          			.db $03
0611   DD1A             
0612   DD1A 20 E5       			bra	gb_A6
0613   DD1C BD F3 AB    gj_27			jsr	macro_start
0614   DD1F             			JSRR_(gj_37)			
0614   DD1F~            			JSRR_(gj_37)			
0614   DD1F~            			JSRR_(gj_37)			
0614   DD1F             
0614   DD1F~            			JSRR_(gj_37)			
0614   DD1F~            			JSRR_(gj_37)			
0614   DD1F             
0614   DD1F             
0614   DD1F 90          
0614   DD20 04          
0615   DD21             			SLEEP_(192)
0615   DD21~            			SLEEP_(192)
0615   DD21~            			SLEEP_(192)
0615   DD21             
0615   DD21 53 C0       
0615   DD23             
0616   DD23             			JMPR_(gb_81)			
0616   DD23~            			JMPR_(gb_81)			
0616   DD23~            			JMPR_(gb_81)			
0616   DD23             
0616   DD23~            			JMPR_(gb_81)			
0616   DD23~            			JMPR_(gb_81)			
0616   DD23             
0616   DD23             
0616   DD23 80          
0616   DD24 9F          
0617   DD25             gj_37			PRI_($32)				;Priority=#32
0617   DD25 52 32       
0618   DD27             gb_94			SLEEP_(5)
0618   DD27             
0618   DD27 75          
0618   DD28~            gb_94			SLEEP_(5)
0618   DD28~            gb_94			SLEEP_(5)
0618   DD28             
0619   DD28 5AFBFBFEF2FF			.db $5A,$FB,$FB,$FE,$F2,$FF,$32,$55,$54,$F5;BEQ_(BIT#14 || (BIT#15 || (BIT#FFFFFFF2 P #FF))) to gb_94
0619   DD2E 325554F5
0620   DD32             			REMTHREADS_($FF,$60)		;Remove Multiple Threads Based on Priority
0620   DD32 55 FF 60    
0621   DD35             			BITON_($58)				;Turn ON: Bit#18
0621   DD35             
0621   DD35 10 58       
0622   DD37 5B 52 07    			.db $5B,$52,$07			;BNE_BIT#12 to gb_95
0623   DD3A             			EXE_($06)				;CPU Execute Next 6 Bytes
0623   DD3A~            			EXE_($06)				;CPU Execute Next 6 Bytes
0623   DD3A~            			EXE_($06)				;CPU Execute Next 6 Bytes
0623   DD3A             
0623   DD3A 48          
0623   DD3B             
0624   DD3B CE DD 55    			ldx	#gj_3F
0625   DD3E BD EA C4    			jsr	newthread_06
0626   DD41             gb_95			EXE_($0A)				;CPU Execute Next 10 Bytes
0626   DD41~            gb_95			EXE_($0A)				;CPU Execute Next 10 Bytes
0626   DD41~            gb_95			EXE_($0A)				;CPU Execute Next 10 Bytes
0626   DD41             
0626   DD41 4C          
0626   DD42             
0627   DD42 86 32       			ldaa	#$32
0628   DD44 97 AA       			staa	thread_priority
0629   DD46 CE DC DC    			ldx	#gj_40
0630   DD49 BD EA 78    			jsr	newthread_sp
0631   DD4C 5A F1 01    			.db $5A,$F1,$01			;BEQ_GAME to gb_96
0632   DD4F             			SSND_($04)				;Sound #04
0632   DD4F             
0632   DD4F E4          
0632   DD50~            			SSND_($04)				;Sound #04
0632   DD50~            			SSND_($04)				;Sound #04
0632   DD50~            			SSND_($04)				;Sound #04
0632   DD50             
0633   DD50             gb_96			BE28_($51)				;Effect: Range #51
0633   DD50             
0633   DD50 28 51       
0634   DD52             			BE29_($11)				;Effect: Range #11
0634   DD52             
0634   DD52 29 11       
0635   DD54             			MRTS_					;Macro RTS, Save MRA,MRB
0635   DD54 02          
0636   DD55             
0637   DD55 BD F3 AB    gj_3F			jsr	macro_start
0638   DD58             			PRI_($30)				;Priority=#30
0638   DD58 52 30       
0639   DD5A             gj_43			SSND_($1E)				;Sound #1E
0639   DD5A             
0639   DD5A FE          
0639   DD5B~            gj_43			SSND_($1E)				;Sound #1E
0639   DD5B~            gj_43			SSND_($1E)				;Sound #1E
0639   DD5B~            gj_43			SSND_($1E)				;Sound #1E
0639   DD5B             
0640   DD5B             			SLEEP_(5)
0640   DD5B             
0640   DD5B 75          
0640   DD5C~            			SLEEP_(5)
0640   DD5C~            			SLEEP_(5)
0640   DD5C             
0641   DD5C             			JMPR_(gj_43)			
0641   DD5C~            			JMPR_(gj_43)			
0641   DD5C~            			JMPR_(gj_43)			
0641   DD5C             
0641   DD5C~            			JMPR_(gj_43)			
0641   DD5C~            			JMPR_(gj_43)			
0641   DD5C             
0641   DD5C             
0641   DD5C 8F          
0641   DD5D FC          
0642   DD5E BD F3 AB    gj_24			jsr	macro_start
0643   DD61             			JSRR_(gj_37)			
0643   DD61~            			JSRR_(gj_37)			
0643   DD61~            			JSRR_(gj_37)			
0643   DD61             
0643   DD61~            			JSRR_(gj_37)			
0643   DD61~            			JSRR_(gj_37)			
0643   DD61             
0643   DD61             
0643   DD61 9F          
0643   DD62 C2          
0644   DD63             			SETRAM_($02,$03)			;RAM$02=$03
0644   DD63~            			SETRAM_($02,$03)			;RAM$02=$03
0644   DD63~            			SETRAM_($02,$03)			;RAM$02=$03
0644   DD63             
0644   DD63 C2 03       
0645   DD65             gb_80			BITON2_($7E)			;Turn ON: Lamp#3E(bonus_10)
0645   DD65             
0645   DD65 20 7E       
0646   DD67             			BITON2_($7F)			;Turn ON: Lamp#3F(bonus_20)
0646   DD67             
0646   DD67 20 7F       
0647   DD69             			SLEEP_(6)
0647   DD69             
0647   DD69 76          
0647   DD6A~            			SLEEP_(6)
0647   DD6A~            			SLEEP_(6)
0647   DD6A             
0648   DD6A             			BE28_($01)				;Effect: Range #01
0648   DD6A             
0648   DD6A 28 01       
0649   DD6C             			SLEEP_(6)
0649   DD6C             
0649   DD6C 76          
0649   DD6D~            			SLEEP_(6)
0649   DD6D~            			SLEEP_(6)
0649   DD6D             
0650   DD6D             			BE28_($02)				;Effect: Range #02
0650   DD6D             
0650   DD6D 28 02       
0651   DD6F             			SLEEP_(6)
0651   DD6F             
0651   DD6F 76          
0651   DD70~            			SLEEP_(6)
0651   DD70~            			SLEEP_(6)
0651   DD70             
0652   DD70             			BE28_($03)				;Effect: Range #03
0652   DD70             
0652   DD70 28 03       
0653   DD72             			SLEEP_(6)
0653   DD72             
0653   DD72 76          
0653   DD73~            			SLEEP_(6)
0653   DD73~            			SLEEP_(6)
0653   DD73             
0654   DD73             			SETRAM_($00,$63)			;RAM$00=$63
0654   DD73~            			SETRAM_($00,$63)			;RAM$00=$63
0654   DD73~            			SETRAM_($00,$63)			;RAM$00=$63
0654   DD73             
0654   DD73 C0 63       
0655   DD75             			SETRAM_($01,$68)			;RAM$01=$68
0655   DD75~            			SETRAM_($01,$68)			;RAM$01=$68
0655   DD75~            			SETRAM_($01,$68)			;RAM$01=$68
0655   DD75             
0655   DD75 C1 68       
0656   DD77             gb_7E			BITONP2_($00)			;Turn ON Lamp/Bit @RAM:00
0656   DD77             
0656   DD77 24 00       
0657   DD79             			BITONP2_($01)			;Turn ON Lamp/Bit @RAM:01
0657   DD79             
0657   DD79 24 01       
0658   DD7B             			SLEEP_(6)
0658   DD7B             
0658   DD7B 76          
0658   DD7C~            			SLEEP_(6)
0658   DD7C~            			SLEEP_(6)
0658   DD7C             
0659   DD7C             			EXE_($02)				;CPU Execute Next 2 Bytes
0659   DD7C~            			EXE_($02)				;CPU Execute Next 2 Bytes
0659   DD7C~            			EXE_($02)				;CPU Execute Next 2 Bytes
0659   DD7C             
0659   DD7C 44          
0659   DD7D             
0660   DD7D 4C          			inca	
0661   DD7E 5C          			incb	
0662   DD7F 5BFDE067F3  			.db $5B,$FD,$E0,$67,$F3		;BNE_RAM$00>=#103 to gb_7E
0663   DD84             			BITOFF2_($7E)			;Turn OFF: Lamp#3E(bonus_10)
0663   DD84             
0663   DD84 21 7E       
0664   DD86             			BITOFF2_($7F)			;Turn OFF: Lamp#3F(bonus_20)
0664   DD86             
0664   DD86 21 7F       
0665   DD88             			SLEEP_(6)
0665   DD88             
0665   DD88 76          
0665   DD89~            			SLEEP_(6)
0665   DD89~            			SLEEP_(6)
0665   DD89             
0666   DD89             			BE29_($01)				;Effect: Range #01
0666   DD89             
0666   DD89 29 01       
0667   DD8B             			SLEEP_(6)
0667   DD8B             
0667   DD8B 76          
0667   DD8C~            			SLEEP_(6)
0667   DD8C~            			SLEEP_(6)
0667   DD8C             
0668   DD8C             			BE29_($02)				;Effect: Range #02
0668   DD8C             
0668   DD8C 29 02       
0669   DD8E             			SLEEP_(6)
0669   DD8E             
0669   DD8E 76          
0669   DD8F~            			SLEEP_(6)
0669   DD8F~            			SLEEP_(6)
0669   DD8F             
0670   DD8F             			BE29_($03)				;Effect: Range #03
0670   DD8F             
0670   DD8F 29 03       
0671   DD91             			SLEEP_(6)
0671   DD91             
0671   DD91 76          
0671   DD92~            			SLEEP_(6)
0671   DD92~            			SLEEP_(6)
0671   DD92             
0672   DD92             			SETRAM_($00,$63)			;RAM$00=$63
0672   DD92~            			SETRAM_($00,$63)			;RAM$00=$63
0672   DD92~            			SETRAM_($00,$63)			;RAM$00=$63
0672   DD92             
0672   DD92 C0 63       
0673   DD94             			SETRAM_($01,$68)			;RAM$01=$68
0673   DD94~            			SETRAM_($01,$68)			;RAM$01=$68
0673   DD94~            			SETRAM_($01,$68)			;RAM$01=$68
0673   DD94             
0673   DD94 C1 68       
0674   DD96             gb_7F			BITOFFP2_($00)			;Turn OFF Lamp/Bit @RAM:00
0674   DD96             
0674   DD96 25 00       
0675   DD98             			BITOFFP2_($01)			;Turn OFF Lamp/Bit @RAM:01
0675   DD98             
0675   DD98 25 01       
0676   DD9A             			SLEEP_(6)
0676   DD9A             
0676   DD9A 76          
0676   DD9B~            			SLEEP_(6)
0676   DD9B~            			SLEEP_(6)
0676   DD9B             
0677   DD9B             			EXE_($02)				;CPU Execute Next 2 Bytes
0677   DD9B~            			EXE_($02)				;CPU Execute Next 2 Bytes
0677   DD9B~            			EXE_($02)				;CPU Execute Next 2 Bytes
0677   DD9B             
0677   DD9B 44          
0677   DD9C             
0678   DD9C 4C          			inca	
0679   DD9D 5C          			incb	
0680   DD9E 5BFDE067F3  			.db $5B,$FD,$E0,$67,$F3		;BNE_RAM$00>=#103 to gb_7F
0681   DDA3             			SLEEP_(6)
0681   DDA3             
0681   DDA3 76          
0681   DDA4~            			SLEEP_(6)
0681   DDA4~            			SLEEP_(6)
0681   DDA4             
0682   DDA4             			ADDRAM_($02,$FF)			;RAM$02+=$FF
0682   DDA4~            			ADDRAM_($02,$FF)			;RAM$02+=$FF
0682   DDA4~            			ADDRAM_($02,$FF)			;RAM$02+=$FF
0682   DDA4             
0682   DDA4 B2 FF       
0683   DDA6 5BFCE200BA  			.db $5B,$FC,$E2,$00,$BA		;BNE_RAM$02==#0 to gb_80
0684   DDAB 5B 52 16    			.db $5B,$52,$16			;BNE_BIT#12 to gb_81
0685   DDAE             			BITOFF_($52)			;Turn OFF: Bit#12
0685   DDAE             
0685   DDAE 11 52       
0686   DDB0             			JSRDR_(gj_38)		
0686   DDB0~            			JSRDR_(gj_38)		
0686   DDB0~            			JSRDR_(gj_38)		
0686   DDB0             
0686   DDB0~            			JSRDR_(gj_38)		
0686   DDB0~            			JSRDR_(gj_38)		
0686   DDB0             
0686   DDB0             
0686   DDB0 A0          
0686   DDB1 30          
0687   DDB2             			SETRAM_($00,$20)			;RAM$00=$20
0687   DDB2~            			SETRAM_($00,$20)			;RAM$00=$20
0687   DDB2~            			SETRAM_($00,$20)			;RAM$00=$20
0687   DDB2             
0687   DDB2 C0 20       
0688   DDB4             gb_82			BE2E_($8B,$02)			;Effect: Range #8B Range #02
0688   DDB4             
0688   DDB4 2E 8B 02    
0689   DDB7             			BE2D_($8C,$83,$01)		;Effect: Range #8C Range #83 Range #01
0689   DDB7             
0689   DDB7 2D 8C 83 01 
0690   DDBB             			SSND_($1E)				;Sound #1E
0690   DDBB             
0690   DDBB FE          
0690   DDBC~            			SSND_($1E)				;Sound #1E
0690   DDBC~            			SSND_($1E)				;Sound #1E
0690   DDBC~            			SSND_($1E)				;Sound #1E
0690   DDBC             
0691   DDBC             			SLEEP_(4)
0691   DDBC             
0691   DDBC 74          
0691   DDBD~            			SLEEP_(4)
0691   DDBD~            			SLEEP_(4)
0691   DDBD             
0692   DDBD             			ADDRAM_($00,$FF)			;RAM$00+=$FF
0692   DDBD~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0692   DDBD~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0692   DDBD             
0692   DDBD B0 FF       
0693   DDBF 5BFCE000F0  			.db $5B,$FC,$E0,$00,$F0		;BNE_RAM$00==#0 to gb_82
0694   DDC4             gb_81			REMTHREADS_($F0,$30)		;Remove Multiple Threads Based on Priority
0694   DDC4 55 F0 30    
0695   DDC7             			JSR_(gj_39)				
0695   DDC7 56          
0695   DDC8 E6 0D       
0696   DDCA             			BITOFF_($C6,$D6,$D7,$58)	;Turn OFF: Bit#06, Bit#16, Bit#17, Bit#18
0696   DDCA             
0696   DDCA 11C6D6D758  
0697   DDCF             			BE29_($D1,$11)			;Effect: Range #D1 Range #11
0697   DDCF             
0697   DDCF 29 D1 11    
0698   DDD2             			BITON2_($1E)			;Turn ON: Lamp#1E(upper_eject_lock)
0698   DDD2             
0698   DDD2 20 1E       
0699   DDD4             gj_3C			KILL_					;Remove This Thread
0699   DDD4 03          
0700   DDD5             
0701   DDD5 636567686A6C			.db $63,$65,$67,$68,$6A,$6C,$6D,$6F,$71,$73,$77,$7A,$7D
0701   DDDB 6D6F7173777A7D
0702   DDE2             
0703   DDE2 CE DD D4    gj_38			ldx	#gj_3C
0704   DDE5 DF A0       			stx	sys_temp1
0705   DDE7 DE A0       gb_98			ldx	sys_temp1
0706   DDE9 08          			inx	
0707   DDEA 8C DD E2    			cpx	#gj_38
0708   DDED 27 09       			beq	gb_97
0709   DDEF A6 00       			ldaa	$00,X
0710   DDF1 DF A0       			stx	sys_temp1
0711   DDF3 BD F1 7E    			jsr	lamp_on_b
0712   DDF6 20 EF       			bra	gb_98
0713   DDF8 39          gb_97			rts	
0714   DDF9 BD F3 AB    gj_01			jsr	macro_start
0715   DDFC             			PRI_($70)				;Priority=#70
0715   DDFC 52 70       
0716   DDFE             			BITON_($59)				;Turn ON: Bit#19
0716   DDFE             
0716   DDFE 10 59       
0717   DE00             			REMTHREADS_($F8,$70)		;Remove Multiple Threads Based on Priority
0717   DE00 55 F8 70    
0718   DE03             			JSRDR_(gj_2A)		
0718   DE03~            			JSRDR_(gj_2A)		
0718   DE03~            			JSRDR_(gj_2A)		
0718   DE03             
0718   DE03~            			JSRDR_(gj_2A)		
0718   DE03~            			JSRDR_(gj_2A)		
0718   DE03             
0718   DE03             
0718   DE03 A0          
0718   DE04 43          
0719   DE05             			EXE_($02)				;CPU Execute Next 2 Bytes
0719   DE05~            			EXE_($02)				;CPU Execute Next 2 Bytes
0719   DE05~            			EXE_($02)				;CPU Execute Next 2 Bytes
0719   DE05             
0719   DE05 44          
0719   DE06             
0720   DE06 4F          			clra	
0721   DE07 5F          			clrb	
0722   DE08             			SLEEP_(88)
0722   DE08~            			SLEEP_(88)
0722   DE08~            			SLEEP_(88)
0722   DE08             
0722   DE08 53 58       
0722   DE0A             
0723   DE0A 5A 40 1D    gj_3A			.db $5A,$40,$1D			;BEQ_BIT#00 to gb_45
0724   DE0D             			CPUX_					;Resume CPU Execution
0724   DE0D 04          
0725   DE0E 88 80       gb_65			eora	#$80
0726   DE10 C8 01       			eorb	#$01
0727   DE12 47          gb_64			asra	
0728   DE13 36          			psha	
0729   DE14 84 7F       			anda	#$7F
0730   DE16 8D 25       			bsr	gb_63
0731   DE18 A7 00       			staa	$00,X
0732   DE1A 37          			pshb	
0733   DE1B BD F9 19    			jsr	disp_mask
0734   DE1E 43          			coma	
0735   DE1F 94 60       			anda	comma_flags
0736   DE21 97 60       			staa	comma_flags
0737   DE23 BD EB A1    			jsr	update_commas
0738   DE26 33          			pulb	
0739   DE27 BD EA 2F    			jsr	addthread
0740   DE2A 03          			.db $03
0741   DE2B             
0742   DE2B 32          			pula	
0743   DE2C 36          			psha	
0744   DE2D 84 01       			anda	#$01
0745   DE2F 11          			cba	
0746   DE30 32          			pula	
0747   DE31 26 DF       			bne	gb_64
0748   DE33 5D          			tstb	
0749   DE34 26 D8       			bne	gb_65
0750   DE36 BD F3 AB    			jsr	macro_start
0751   DE39             			SLEEP_(24)
0751   DE39~            			SLEEP_(24)
0751   DE39~            			SLEEP_(24)
0751   DE39             
0751   DE39 53 18       
0751   DE3B             
0752   DE3B             			JMPR_(gj_3A)			
0752   DE3B~            			JMPR_(gj_3A)			
0752   DE3B~            			JMPR_(gj_3A)			
0752   DE3B             
0752   DE3B~            			JMPR_(gj_3A)			
0752   DE3B~            			JMPR_(gj_3A)			
0752   DE3B             
0752   DE3B             
0752   DE3B 8F          
0752   DE3C CD          
0753   DE3D 36          gb_63			psha	
0754   DE3E 96 CD       			ldaa	player_up
0755   DE40 CE 00 5C    			ldx	#dmask_p1
0756   DE43 BD EE FF    			jsr	xplusa
0757   DE46 32          			pula	
0758   DE47 39          			rts	
0759   DE48 8D F3       gj_2A			bsr	gb_63
0760   DE4A 6F 00       			clr	$00,X
0761   DE4C 7E EB A1    			jmp	update_commas
0762   DE4F BD F3 AB    gj_32			jsr	macro_start
0763   DE52             			PRI_($00)				;Priority=#00
0763   DE52 52 00       
0764   DE54             gj_3E			SSND_($10)				;Sound #10
0764   DE54             
0764   DE54 F0          
0764   DE55~            gj_3E			SSND_($10)				;Sound #10
0764   DE55~            gj_3E			SSND_($10)				;Sound #10
0764   DE55~            gj_3E			SSND_($10)				;Sound #10
0764   DE55             
0765   DE55             			BITOFF_($59)			;Turn OFF: Bit#19
0765   DE55             
0765   DE55 11 59       
0766   DE57             gb_A0			SLEEP_(192)
0766   DE57~            gb_A0			SLEEP_(192)
0766   DE57~            gb_A0			SLEEP_(192)
0766   DE57             
0766   DE57 53 C0       
0766   DE59             
0767   DE59 5B 59 FB    			.db $5B,$59,$FB			;BNE_BIT#19 to gb_A0
0768   DE5C             			JMPR_(gj_3E)			
0768   DE5C~            			JMPR_(gj_3E)			
0768   DE5C~            			JMPR_(gj_3E)			
0768   DE5C             
0768   DE5C~            			JMPR_(gj_3E)			
0768   DE5C~            			JMPR_(gj_3E)			
0768   DE5C             
0768   DE5C             
0768   DE5C 8F          
0768   DE5D F6          
0769   DE5E CE D8 00    gameover_entry	ldx	#gj_02
0770   DE61 BD EA C4    			jsr	newthread_06
0771   DE64 CE DE 9C    			ldx	#gj_03
0772   DE67 BD EA C4    			jsr	newthread_06
0773   DE6A CE DE BE    			ldx	#gj_04
0774   DE6D BD EA C4    			jsr	newthread_06
0775   DE70 CE DE E0    			ldx	#gj_05
0776   DE73 BD EA C4    			jsr	newthread_06
0777   DE76 CE E2 6B    			ldx	#gj_06
0778   DE79 BD EA C4    			jsr	newthread_06
0779   DE7C BD F3 AB    			jsr	macro_start
0780   DE7F             			BE29_($D1,$11)			;Effect: Range #D1 Range #11
0780   DE7F             
0780   DE7F 29 D1 11    
0781   DE82             			SSND_($12)				;Sound #12
0781   DE82             
0781   DE82 F2          
0781   DE83~            			SSND_($12)				;Sound #12
0781   DE83~            			SSND_($12)				;Sound #12
0781   DE83~            			SSND_($12)				;Sound #12
0781   DE83             
0782   DE83             			BE19_($11)				;Effect: Range #11
0782   DE83             
0782   DE83 19 11       
0783   DE85             			BE18_($93,$84,$92,$00)		;Effect: Range #93 Range #84 Range #92 Range #00
0783   DE85             
0783   DE85 1893849200  
0784   DE8A             			BITON_($86,$96,$BE,$1F)		;Turn ON: Lamp#06(barr_dt_bank), Lamp#16(left_special), Lamp#3E(bonus_10), Lamp#1F(upper_eject_cb)
0784   DE8A             
0784   DE8A 108696BE1F  
0785   DE8F             			BITFL_($98,$19)			;Flash: Lamp#18(lamp_spinner), Lamp#19(shootagain_pf)
0785   DE8F             
0785   DE8F 13 98 19    
0786   DE92             gj_17			BE1E_($87,$8D,$14)		;Effect: Range #87 Range #8D Range #14
0786   DE92             
0786   DE92 1E 87 8D 14 
0787   DE96             			BE1B_($85,$06)			;Effect: Range #85 Range #06
0787   DE96             
0787   DE96 1B 85 06    
0788   DE99             			SLEEP_(8)
0788   DE99             
0788   DE99 78          
0788   DE9A~            			SLEEP_(8)
0788   DE9A~            			SLEEP_(8)
0788   DE9A             
0789   DE9A             			JMPR_(gj_17)			
0789   DE9A~            			JMPR_(gj_17)			
0789   DE9A~            			JMPR_(gj_17)			
0789   DE9A             
0789   DE9A~            			JMPR_(gj_17)			
0789   DE9A~            			JMPR_(gj_17)			
0789   DE9A             
0789   DE9A             
0789   DE9A 8F          
0789   DE9B F6          
0790   DE9C BD F3 AB    gj_03			jsr	macro_start
0791   DE9F             gj_2B			BE19_($08)				;Effect: Range #08
0791   DE9F             
0791   DE9F 19 08       
0792   DEA1             			SETRAM_($00,$15)			;RAM$00=$15
0792   DEA1~            			SETRAM_($00,$15)			;RAM$00=$15
0792   DEA1~            			SETRAM_($00,$15)			;RAM$00=$15
0792   DEA1             
0792   DEA1 C0 15       
0793   DEA3             gb_4D			BE1A_($08)				;Effect: Range #08
0793   DEA3             
0793   DEA3 1A 08       
0794   DEA5             			SLEEP_(10)
0794   DEA5             
0794   DEA5 7A          
0794   DEA6~            			SLEEP_(10)
0794   DEA6~            			SLEEP_(10)
0794   DEA6             
0795   DEA6 5B F6 08 F9 			.db $5B,$F6,$08,$F9		;BNE_RangeON#08 to gb_4D
0796   DEAA             			BE19_($08)				;Effect: Range #08
0796   DEAA             
0796   DEAA 19 08       
0797   DEAC             			BE1A_($89,$0A)			;Effect: Range #89 Range #0A
0797   DEAC             
0797   DEAC 1A 89 0A    
0798   DEAF             gb_4E			BE1E_($09)				;Effect: Range #09
0798   DEAF             
0798   DEAF 1E 09       
0799   DEB1             			SLEEP_(2)
0799   DEB1             
0799   DEB1 72          
0799   DEB2~            			SLEEP_(2)
0799   DEB2~            			SLEEP_(2)
0799   DEB2             
0800   DEB2             			BE1D_($0A)				;Effect: Range #0A
0800   DEB2             
0800   DEB2 1D 0A       
0801   DEB4             			SLEEP_(4)
0801   DEB4             
0801   DEB4 74          
0801   DEB5~            			SLEEP_(4)
0801   DEB5~            			SLEEP_(4)
0801   DEB5             
0802   DEB5             			ADDRAM_($00,$FF)			;RAM$00+=$FF
0802   DEB5~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0802   DEB5~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
0802   DEB5             
0802   DEB5 B0 FF       
0803   DEB7 5BFCE000F3  			.db $5B,$FC,$E0,$00,$F3		;BNE_RAM$00==#0 to gb_4E
0804   DEBC             			JMPR_(gj_2B)			
0804   DEBC~            			JMPR_(gj_2B)			
0804   DEBC~            			JMPR_(gj_2B)			
0804   DEBC             
0804   DEBC~            			JMPR_(gj_2B)			
0804   DEBC~            			JMPR_(gj_2B)			
0804   DEBC             
0804   DEBC             
0804   DEBC 8F          
0804   DEBD E1          
0805   DEBE CE E7 3F    gj_04			ldx	#gj_12
0806   DEC1 BD EA C4    			jsr	newthread_06
0807   DEC4 CE D8 B6    			ldx	#gj_13
0808   DEC7 BD EA C4    			jsr	newthread_06
0809   DECA BD EA 2F    			jsr	addthread
0810   DECD FF          			.db $FF
0811   DECE             
0812   DECE CE E7 7C    			ldx	#gj_14
0813   DED1 BD EA C4    			jsr	newthread_06
0814   DED4 CE D8 EF    			ldx	#gj_15
0815   DED7 BD EA C4    			jsr	newthread_06
0816   DEDA BD EA 2F    			jsr	addthread
0817   DEDD FF          			.db $FF
0818   DEDE             
0819   DEDE 20 DE       			bra	gj_04
0820   DEE0 CE E2 AC    gj_05			ldx	#gj_16
0821   DEE3 BD EA C4    			jsr	newthread_06
0822   DEE6 BD EA 2F    			jsr	addthread
0823   DEE9 FF          			.db $FF
0824   DEEA             
0825   DEEA 20 F4       			bra	gj_05
0826   DEEC 0B          			.db $0B
0827   DEED             
0828   DEED 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0828   DEF3 00000000000000000000
0829   DEFD 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0829   DF03 00000000000000000000
0830   DF0D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0830   DF13 00000000000000000000
0831   DF1D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0831   DF23 00000000000000000000
0832   DF2D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0832   DF33 00000000000000000000
0833   DF3D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0833   DF43 00000000000000000000
0834   DF4D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0834   DF53 00000000000000000000
0835   DF5D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0835   DF63 00000000000000000000
0836   DF6D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0836   DF73 00000000000000000000
0837   DF7D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0837   DF83 00000000000000000000
0838   DF8D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0838   DF93 00000000000000000000
0839   DF9D 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0839   DFA3 00000000000000000000
0840   DFAD 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0840   DFB3 00000000000000000000
0841   DFBD 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0841   DFC3 00000000000000000000
0842   DFCD 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0842   DFD3 00000000000000000000
0843   DFDD 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0843   DFE3 00000000000000000000
0844   DFED 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0844   DFF3 00000000000000000000
0845   DFFD 00 00 00    			.db $00,$00,$00
0846   E000             
0847   E000              	.org $e000
0848   E000             
0849   E000             ;---------------------------------------------------------------------------
0850   E000             ;  Default game data and basic system tables start at $e000, these can not  
0851   E000             ;  ever be moved
0852   E000             ;---------------------------------------------------------------------------
0853   E000             
0854   E000 25 10       gr_gamenumber		.dw $2510
0855   E002 F1          gr_romrevision		.db $F1
0856   E003 B2 A5       gr_cmoscsum			.db $B2,$A5
0857   E005 25          gr_backuphstd		.db $25
0858   E006 12          gr_replay1			.db $12
0859   E007 25          gr_replay2			.db $25
0860   E008 00          gr_replay3			.db $00
0861   E009 00          gr_replay4			.db $00
0862   E00A 00          gr_matchenable		.db $00
0863   E00B 00          gr_specialaward		.db $00
0864   E00C 00          gr_replayaward		.db $00
0865   E00D 03          gr_maxplumbbobtilts	.db $03
0866   E00E 03          gr_numberofballs		.db $03
0867   E00F 01          gr_gameadjust1		.db $01
0868   E010 00          gr_gameadjust2		.db $00
0869   E011 30          gr_gameadjust3		.db $30
0870   E012 00          gr_gameadjust4		.db $00
0871   E013 00          gr_gameadjust5		.db $00
0872   E014 00          gr_gameadjust6		.db $00
0873   E015 00          gr_gameadjust7		.db $00
0874   E016 00          gr_gameadjust8		.db $00
0875   E017 01          gr_gameadjust9		.db $01
0876   E018 03          gr_hstdcredits		.db $03
0877   E019 04          gr_max_extraballs		.db $04
0878   E01A 30          gr_max_credits		.db $30
0879   E01B             ;---------------
0880   E01B             ;Pricing Data  |
0881   E01B             ;---------------
0882   E01B             
0883   E01B 01          gr_pricingdata		.db $01	;Left Coin Mult
0884   E01C 04          				.db $04	;Center Coin Mult
0885   E01D 01          				.db $01	;Right Coin Mult
0886   E01E 01          				.db $01	;Coin Units Required
0887   E01F 00          				.db $00	;Bonus Coins
0888   E020 00          				.db $00	;Minimum Coin Units
0889   E021             
0890   E021 09          				.db $09	;Left Coin Mult
0891   E022 45          				.db $45	;Center Coin Mult
0892   E023 18          				.db $18	;Right Coin Mult
0893   E024 05          				.db $05	;Coin Units Required
0894   E025 45          				.db $45	;Bonus Coins
0895   E026 00          				.db $00	;Minimum Coin Units
0896   E027             
0897   E027 01          				.db $01	;Left Coin Mult
0898   E028 04          				.db $04	;Center Coin Mult
0899   E029 01          				.db $01	;Right Coin Mult
0900   E02A 02          				.db $02	;Coin Units Required
0901   E02B 04          				.db $04	;Bonus Coins
0902   E02C 00          				.db $00	;Minimum Coin Units
0903   E02D             
0904   E02D 01          				.db $01	;Left Coin Mult
0905   E02E 16          				.db $16	;Center Coin Mult
0906   E02F 06          				.db $06	;Right Coin Mult
0907   E030 02          				.db $02	;Coin Units Required
0908   E031 00          				.db $00	;Bonus Coins
0909   E032 00          				.db $00	;Minimum Coin Units
0910   E033             
0911   E033 03          				.db $03	;Left Coin Mult
0912   E034 15          				.db $15	;Center Coin Mult
0913   E035 03          				.db $03	;Right Coin Mult
0914   E036 04          				.db $04	;Coin Units Required
0915   E037 15          				.db $15	;Bonus Coins
0916   E038 00          				.db $00	;Minimum Coin Units
0917   E039             
0918   E039 01          				.db $01	;Left Coin Mult
0919   E03A 00          				.db $00	;Center Coin Mult
0920   E03B 04          				.db $04	;Right Coin Mult
0921   E03C 01          				.db $01	;Coin Units Required
0922   E03D 00          				.db $00	;Bonus Coins
0923   E03E 00          				.db $00	;Minimum Coin Units
0924   E03F             
0925   E03F 01          				.db $01	;Left Coin Mult
0926   E040 00          				.db $00	;Center Coin Mult
0927   E041 02          				.db $02	;Right Coin Mult
0928   E042 01          				.db $01	;Coin Units Required
0929   E043 00          				.db $00	;Bonus Coins
0930   E044 00          				.db $00	;Minimum Coin Units
0931   E045             
0932   E045 01          				.db $01	;Left Coin Mult
0933   E046 00          				.db $00	;Center Coin Mult
0934   E047 02          				.db $02	;Right Coin Mult
0935   E048 02          				.db $02	;Coin Units Required
0936   E049 00          				.db $00	;Bonus Coins
0937   E04A 00          				.db $00	;Minimum Coin Units
0938   E04B             
0939   E04B             ;--------------
0940   E04B             ;System Data  |
0941   E04B             ;--------------
0942   E04B             
0943   E04B 1D          gr_maxthreads		.db $1D
0944   E04C 00          gr_extendedromtest	.db $00
0945   E04D 30          gr_lastswitch		.db (switchtable_end-switchtable)/3
0946   E04E 03          gr_numplayers		.db $03
0947   E04F             
0948   E04F D9 28       gr_lamptable_ptr		.dw lamptable
0949   E051 D9 AF       gr_switchtable_ptr	.dw switchtable
0950   E053 D9 52       gr_soundtable_ptr		.dw soundtable
0951   E055             
0952   E055 05          gr_lampflashrate		.db $05
0953   E056             
0954   E056 0D          gr_specialawardsound	.db $0D	;Special Sound
0955   E057 1A          gr_p1_startsound		.db $1A
0956   E058 1B          gr_p2_startsound		.db $1B
0957   E059 1B          gr_p3_startsound		.db $1B
0958   E05A 1B          gr_p4_startsound		.db $1B
0959   E05B 1C          gr_matchsound		.db $1C
0960   E05C 1E          gr_highscoresound		.db $1E
0961   E05D 1D          gr_gameoversound		.db $1D
0962   E05E 00          gr_creditsound		.db $00
0963   E05F             
0964   E05F 19          gr_eb_lamp_1		.db $19
0965   E060 00          gr_eb_lamp_2		.db $00
0966   E061 7F          gr_lastlamp			.db $7F
0967   E062 05          gr_hs_lamp			.db $05
0968   E063 04          gr_match_lamp		.db $04
0969   E064 01          gr_bip_lamp			.db $01
0970   E065 03          gr_gameover_lamp		.db $03
0971   E066 02          gr_tilt_lamp		.db $02
0972   E067             
0973   E067 DE 5E       gr_gameoverthread_ptr	.dw gameover_entry
0974   E069             
0975   E069             gr_switchtypetable
0976   E069 00 02       				.db $00,$02
0977   E06B 00 09       				.db $00,$09
0978   E06D 00 04       				.db $00,$04
0979   E06F 1A 14       				.db $1A,$14
0980   E071 02 05       				.db $02,$05
0981   E073 08 05       				.db $08,$05
0982   E075 00 01       				.db $00,$01
0983   E077             
0984   E077 0200000000  gr_playerstartdata	.db $02,$00,$00,$00,$00
0985   E07C 0020000000  				.db $00,$20,$00,$00,$00
0986   E081 0000000000  				.db $00,$00,$00,$00,$00
0987   E086 0000000000  				.db $00,$00,$00,$00,$00
0988   E08B             
0989   E08B C300FFFEFF  gr_playerresetdata	.db $C3,$00,$FF,$FE,$FF
0990   E090 FF010080FF  				.db $FF,$01,$00,$80,$FF
0991   E095 0304000000  				.db $03,$04,$00,$00,$00
0992   E09A 0000000000  				.db $00,$00,$00,$00,$00
0993   E09F             
0994   E09F 39          gr_switch_event		rts\ .db $00	;(Switch Event)
0994   E0A0 00          
0995   E0A1 39          gr_sound_event		rts\ .db $00	;(Sound Event )
0995   E0A2 00          
0996   E0A3 20 6E       gr_score_event		bra score_event	;(Score Event)
0997   E0A5 39          gr_eb_event		rts\ .db $00		;(Extra Ball Event)
0997   E0A6 00          
0998   E0A7 39          gr_special_event		rts\ .db $00	;(Special Event)
0998   E0A8 00          
0999   E0A9 39          gr_macro_event		rts\ .db $00	;(Start Macro Event)
0999   E0AA 00          
1000   E0AB 20 15       gr_ballstart_event		bra ballstart_event;(Ball Start Event)
1001   E0AD 39          gr_addplayer_event		rts\ .db $00;(Add Player Event)
1001   E0AE 00          
1002   E0AF 20 18       gr_gameover_event		bra gameover_event;(Game Over Event)
1003   E0B1 39          gr_hstdtoggle_event		rts\ .db $00;(HSTD Toggle Event)
1003   E0B2 00          
1004   E0B3             
1005   E0B3 E0 E5       			.dw hook_reset		;(From $E89F)Reset
1006   E0B5 E0 E5       			.dw hook_mainloop		;(From $E8B7)Main Loop Begin
1007   E0B7 E0 DE       			.dw hook_coin		;(From $F770)Coin Accepted
1008   E0B9 E0 E6       			.dw hook_gamestart	;(From $F847)New Game Start
1009   E0BB E1 D3       			.dw hook_playerinit	;(From $F8D8)Init New Player
1010   E0BD E1 A1       			.dw hook_outhole		;(From $F9BA)Outhole
1011   E0BF             
1012   E0BF             ;------------------------ end system data ---------------------------
1013   E0BF             
1014   E0BF 7E EF F7    gr_irq_entry	jmp	sys_irq
1015   E0C2             ballstart_event
1016   E0C2 96 C8       gr_swi_entry	ldaa	flag_tilt
1017   E0C4 27 1F       			beq	hook_mainloop
1018   E0C6 BD EA 67    			jsr	killthread
1019   E0C9 96 CC       gameover_event	ldaa	num_players
1020   E0CB BD F3 AB    			jsr	macro_start
1021   E0CE 5AFBFCD300FC			.db $5A,$FB,$FC,$D3,$00,$FC,$E0,$00,$0D;BEQ_(RAM$00==#0 || ADJ#3==#0) to gb_25
1021   E0D4 E0000D
1022   E0D7 5F          			JMP_(gj_11)				
1022   E0D8 DB 2E       
1023   E0DA             
1024   E0DA             sw_hstd_res		JSRD_(restore_hstd)		
1024   E0DA 57          
1024   E0DB EF 9D       
1025   E0DD             			KILL_					;Remove This Thread
1025   E0DD 03          
1026   E0DE             
1027   E0DE BD F3 AB    hook_coin		jsr	macro_start
1028   E0E1             			SOL_($6E)				;Turn ON Sol#14:bell
1028   E0E1 31 6E       
1029   E0E3             			SLEEP_(15)
1029   E0E3             
1029   E0E3 7F          
1029   E0E4~            			SLEEP_(15)
1029   E0E4~            			SLEEP_(15)
1029   E0E4             
1030   E0E4             gb_25			CPUX_					;Resume CPU Execution
1030   E0E4 04          
1031   E0E5             hook_mainloop
1032   E0E5 39          hook_reset		rts	
1033   E0E6 BD F3 AB    hook_gamestart	jsr	macro_start
1034   E0E9 5E 89 0A    			SWCLR_($89),($0A)			;Clear Sw#: $09(upper_eject) $0A(lower_eject)
1035   E0EC             			BITON_($41)				;Turn ON: Bit#01
1035   E0EC             
1035   E0EC 10 41       
1036   E0EE             gj_18			JSRD_(gj_0C)			
1036   E0EE 57          
1036   E0EF E2 85       
1037   E0F1 5B F8 0F 02 			.db $5B,$F8,$0F,$02		;BNE_SW#0F to gb_26
1038   E0F5             			ADDRAM_($00,$01)			;RAM$00+=$01
1038   E0F5~            			ADDRAM_($00,$01)			;RAM$00+=$01
1038   E0F5~            			ADDRAM_($00,$01)			;RAM$00+=$01
1038   E0F5             
1038   E0F5 B0 01       
1039   E0F7 5AFCE003E8  gb_26			.db $5A,$FC,$E0,$03,$E8		;BEQ_RAM$00==#3 to gb_25
1040   E0FC             			SLEEP_(15)
1040   E0FC             
1040   E0FC 7F          
1040   E0FD~            			SLEEP_(15)
1040   E0FD~            			SLEEP_(15)
1040   E0FD             
1041   E0FD             			JMPR_(gj_18)			
1041   E0FD~            			JMPR_(gj_18)			
1041   E0FD~            			JMPR_(gj_18)			
1041   E0FD             
1041   E0FD~            			JMPR_(gj_18)			
1041   E0FD~            			JMPR_(gj_18)			
1041   E0FD             
1041   E0FD             
1041   E0FD 8F          
1041   E0FE EF          
1042   E0FF             sw_credit_button	PRI_($08)				;Priority=#08
1042   E0FF 52 08       
1043   E101             			JSRDR_(gj_07)		
1043   E101~            			JSRDR_(gj_07)		
1043   E101~            			JSRDR_(gj_07)		
1043   E101             
1043   E101~            			JSRDR_(gj_07)		
1043   E101~            			JSRDR_(gj_07)		
1043   E101             
1043   E101             
1043   E101 A1          
1043   E102 74          
1044   E103 58FBFB41FAF3			.db $58,$FB,$FB,$41,$FA,$F3,$FC,$E0,$03,$F1,$61,$E1,$91;BEQ_(BIT#21 || ((GAME && (!RAM$00==#3)) || BIT#01)) to gb_05
1044   E109 FCE003F161E191
1045   E110 5C          			JMPD_(credit_button)		
1045   E111 FB 92       
1046   E113             
1047   E113 CE DD F9    score_event		ldx	#gj_01
1048   E116 BD EA C4    			jsr	newthread_06
1049   E119 7C 00 0B    			inc	game_ram_b
1050   E11C 31          			ins	
1051   E11D 31          			ins	
1052   E11E BD EB DB    			jsr	update_eb_count
1053   E121 BD EC 1D    			jsr	score_update
1054   E124 BD EB A1    			jsr	update_commas
1055   E127 CE 00 DE    			ldx	#x_temp_2
1056   E12A 8D 0C       			bsr	gb_01
1057   E12C D7 DE       			stab	x_temp_2
1058   E12E DE CE       			ldx	pscore_buf
1059   E130 8D 06       			bsr	gb_01
1060   E132 BD EC B7    			jsr	$ECB7
1061   E135 7E EC 18    			jmp	$EC18
1062   E138 A6 00       gb_01			ldaa	$00,X
1063   E13A E6 01       			ldab	$01,X
1064   E13C 8D 05       			bsr	gb_23
1065   E13E BD EC F3    			jsr	split_ab
1066   E141 1B          			aba	
1067   E142 16          			tab	
1068   E143 C1 A0       gb_23			cmpb	#$A0
1069   E145 25 02       			bcs	gb_24
1070   E147 CB 10       			addb	#$10
1071   E149 39          gb_24			rts	
1072   E14A             sw_plumbtilt	EXE_($06)				;CPU Execute Next 6 Bytes
1072   E14A~            sw_plumbtilt	EXE_($06)				;CPU Execute Next 6 Bytes
1072   E14A~            sw_plumbtilt	EXE_($06)				;CPU Execute Next 6 Bytes
1072   E14A             
1072   E14A 48          
1072   E14B             
1073   E14B CE E1 59    			ldx	#gj_1A
1074   E14E BD EA C4    			jsr	newthread_06
1075   E151             			SSND_($01)				;Sound #01
1075   E151             
1075   E151 E1          
1075   E152~            			SSND_($01)				;Sound #01
1075   E152~            			SSND_($01)				;Sound #01
1075   E152~            			SSND_($01)				;Sound #01
1075   E152             
1076   E152             			JSRD_(tilt_warning)		
1076   E152 57          
1076   E153 FB DD       
1077   E155 5A F0 13    			.db $5A,$F0,$13			;BEQ_TILT to gb_03
1078   E158             			KILL_					;Remove This Thread
1078   E158 03          
1079   E159             
1080   E159 BD F3 AB    gj_1A			jsr	macro_start
1081   E15C             			REMTHREADS_($F8,$A0)		;Remove Multiple Threads Based on Priority
1081   E15C 55 F8 A0    
1082   E15F             			PRI_($A6)				;Priority=#A6
1082   E15F 52 A6       
1083   E161             			BITON_($5F)				;Turn ON: Bit#1F
1083   E161             
1083   E161 10 5F       
1084   E163             			SLEEP_(160)
1084   E163~            			SLEEP_(160)
1084   E163~            			SLEEP_(160)
1084   E163             
1084   E163 53 A0       
1084   E165             
1085   E165             			BITOFF_($5F)			;Turn OFF: Bit#1F
1085   E165             
1085   E165 11 5F       
1086   E167             			KILL_					;Remove This Thread
1086   E167 03          
1087   E168             
1088   E168             sw_balltilt
1089   E168             sw_pf_tilt		JSRD_(do_tilt)			
1089   E168 57          
1089   E169 FB E9       
1090   E16B             gb_03			PRI_($A8)				;Priority=#A8
1090   E16B 52 A8       
1091   E16D             			BE29_($11)				;Effect: Range #11
1091   E16D             
1091   E16D 29 11       
1092   E16F             			BE28_($51)				;Effect: Range #51
1092   E16F             
1092   E16F 28 51       
1093   E171 5E 89 0A    			SWCLR_($89),($0A)			;Clear Sw#: $09(upper_eject) $0A(lower_eject)
1094   E174             			SOL_($0E)				;Turn OFF Sol#14:bell
1094   E174 31 0E       
1095   E176 58 61 DB FF 			.db $58,$61,$DB,$FF		;BEQ_BIT#21 to gb_04
1096   E17A             			CPUX_					;Resume CPU Execution
1096   E17A 04          
1097   E17B BD DC 48    			jsr	gj_1B
1098   E17E 4F          gb_30			clra	
1099   E17F 8D 4A       			bsr	gb_2E
1100   E181 8D 0F       			bsr	gb_2F
1101   E183 BD EA 2F    			jsr	addthread
1102   E186 03          			.db $03
1103   E187             
1104   E187 8D 40       			bsr	gb_02
1105   E189 8D 07       			bsr	gb_2F
1106   E18B BD EA 2F    			jsr	addthread
1107   E18E 03          			.db $03
1108   E18F             
1109   E18F 20 ED       			bra	gb_30
1110   E191             gb_05			KILL_					;Remove This Thread
1110   E191 03          
1111   E192             
1112   E192 96 CD       gb_2F			ldaa	player_up
1113   E194 CE 00 5C    			ldx	#dmask_p1
1114   E197 BD EE FF    			jsr	xplusa
1115   E19A 6F 00       			clr	$00,X
1116   E19C 86 19       			ldaa	#$19
1117   E19E 7E EC FC    			jmp	isnd_once
1118   E1A1 4F          hook_outhole	clra	
1119   E1A2 CE 00 5C    			ldx	#dmask_p1
1120   E1A5 A7 00       			staa	$00,X
1121   E1A7 A7 01       			staa	$01,X
1122   E1A9 A7 02       			staa	$02,X
1123   E1AB A7 03       			staa	$03,X
1124   E1AD 96 CA       			ldaa	flag_bonusball
1125   E1AF BD F3 AB    			jsr	macro_start
1126   E1B2             			SSND_($12)				;Sound #12
1126   E1B2             
1126   E1B2 F2          
1126   E1B3~            			SSND_($12)				;Sound #12
1126   E1B3~            			SSND_($12)				;Sound #12
1126   E1B3~            			SSND_($12)				;Sound #12
1126   E1B3             
1127   E1B3 5AFBFCE000F0			.db $5A,$FB,$FC,$E0,$00,$F0,$02	;BEQ_(TILT || RAM$00==#0) to gb_2B
1127   E1B9 02
1128   E1BA             			JSRR_(gj_0A)			
1128   E1BA~            			JSRR_(gj_0A)			
1128   E1BA~            			JSRR_(gj_0A)			
1128   E1BA             
1128   E1BA~            			JSRR_(gj_0A)			
1128   E1BA~            			JSRR_(gj_0A)			
1128   E1BA             
1128   E1BA             
1128   E1BA 93          
1128   E1BB E8          
1129   E1BC             gb_2B			BE29_($51)				;Effect: Range #51
1129   E1BC             
1129   E1BC 29 51       
1130   E1BE             			REMTHREADS_($F0,$70)		;Remove Multiple Threads Based on Priority
1130   E1BE 55 F0 70    
1131   E1C1             			REMTHREADS_($F0,$60)		;Remove Multiple Threads Based on Priority
1131   E1C1 55 F0 60    
1132   E1C4 5A 60 CA    			.db $5A,$60,$CA			;BEQ_BIT#20 to gb_05
1133   E1C7             			JMPR_(gb_25)			
1133   E1C7~            			JMPR_(gb_25)			
1133   E1C7~            			JMPR_(gb_25)			
1133   E1C7             
1133   E1C7~            			JMPR_(gb_25)			
1133   E1C7~            			JMPR_(gb_25)			
1133   E1C7             
1133   E1C7             
1133   E1C7 8F          
1133   E1C8 1B          
1134   E1C9 86 FF       gb_02			ldaa	#$FF
1135   E1CB CE 00 48    gb_2E			ldx	#score_p1_b1
1136   E1CE C6 10       			ldab	#$10
1137   E1D0 7E F8 40    			jmp	write_range
1138   E1D3 96 60       hook_playerinit	ldaa	comma_flags
1139   E1D5 97 E0       			staa	spare_ram
1140   E1D7 8D F0       			bsr	gb_02
1141   E1D9 BD F3 AB    			jsr	macro_start
1142   E1DC             			REMTHREADS_($F0,$60)		;Remove Multiple Threads Based on Priority
1142   E1DC 55 F0 60    
1143   E1DF             			BITOFF_($41)			;Turn OFF: Bit#01
1143   E1DF             
1143   E1DF 11 41       
1144   E1E1             			BE29_($D1,$11)			;Effect: Range #D1 Range #11
1144   E1E1             
1144   E1E1 29 D1 11    
1145   E1E4 5B 61 06    			.db $5B,$61,$06			;BNE_BIT#21 to gb_27
1146   E1E7             			BE19_($91,$90,$0F)		;Effect: Range #91 Range #90 Range #0F
1146   E1E7             
1146   E1E7 19 91 90 0F 
1147   E1EB             			BITON_($35)				;Turn ON: Lamp#35(bonus_1)
1147   E1EB             
1147   E1EB 10 35       
1148   E1ED 5B F6 0F 02 gb_27			.db $5B,$F6,$0F,$02		;BNE_RangeON#0F to gb_28
1149   E1F1             			BE19_($0F)				;Effect: Range #0F
1149   E1F1             
1149   E1F1 19 0F       
1150   E1F3 5B F6 10 02 gb_28			.db $5B,$F6,$10,$02		;BNE_RangeON#10 to gb_29
1151   E1F7             			BE19_($10)				;Effect: Range #10
1151   E1F7             
1151   E1F7 19 10       
1152   E1F9             gb_29			BITON_($45)				;Turn ON: Bit#05
1152   E1F9             
1152   E1F9 10 45       
1153   E1FB             			SOL_($48,$69)			;Turn ON Sol#8:dt_left_release Sol#8:dt_left_release
1153   E1FB 32 48 69    
1154   E1FE             			SLEEP_(32)
1154   E1FE~            			SLEEP_(32)
1154   E1FE~            			SLEEP_(32)
1154   E1FE             
1154   E1FE 53 20       
1154   E200             
1155   E200             			SETRAM_($01,$08)			;RAM$01=$08
1155   E200~            			SETRAM_($01,$08)			;RAM$01=$08
1155   E200~            			SETRAM_($01,$08)			;RAM$01=$08
1155   E200             
1155   E200 C1 08       
1156   E202             			SETRAM_($02,$48)			;RAM$02=$48
1156   E202~            			SETRAM_($02,$48)			;RAM$02=$48
1156   E202~            			SETRAM_($02,$48)			;RAM$02=$48
1156   E202             
1156   E202 C2 48       
1157   E204             			SETRAM_($00,$40)			;RAM$00=$40
1157   E204~            			SETRAM_($00,$40)			;RAM$00=$40
1157   E204~            			SETRAM_($00,$40)			;RAM$00=$40
1157   E204             
1157   E204 C0 40       
1158   E206 5A E2 06    gb_4F			.db $5A,$E2,$06			;BEQ_RAM$02 to gb_2A
1159   E209             			JSRD_(solbuf)			
1159   E209 57          
1159   E20A EB 23       
1160   E20C             			SLEEP_(7)
1160   E20C             
1160   E20C 77          
1160   E20D~            			SLEEP_(7)
1160   E20D~            			SLEEP_(7)
1160   E20D             
1161   E20D             			JMPR_(gj_19)			
1161   E20D~            			JMPR_(gj_19)			
1161   E20D~            			JMPR_(gj_19)			
1161   E20D             
1161   E20D~            			JMPR_(gj_19)			
1161   E20D~            			JMPR_(gj_19)			
1161   E20D             
1161   E20D             
1161   E20D 80          
1161   E20E 02          
1162   E20F             gb_2A			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1162   E20F             
1162   E20F 14 01       
1163   E211             gj_19			EXE_($02)				;CPU Execute Next 2 Bytes
1163   E211~            gj_19			EXE_($02)				;CPU Execute Next 2 Bytes
1163   E211~            gj_19			EXE_($02)				;CPU Execute Next 2 Bytes
1163   E211             
1163   E211 44          
1163   E212             
1164   E212 4C          			inca	
1165   E213 5C          			incb	
1166   E214             			ADDRAM_($02,$01)			;RAM$02+=$01
1166   E214~            			ADDRAM_($02,$01)			;RAM$02+=$01
1166   E214~            			ADDRAM_($02,$01)			;RAM$02+=$01
1166   E214             
1166   E214 B2 01       
1167   E216 5BFCE250EB  			.db $5B,$FC,$E2,$50,$EB		;BNE_RAM$02==#80 to gb_4F
1168   E21B             			BITOFF_($45)			;Turn OFF: Bit#05
1168   E21B             
1168   E21B 11 45       
1169   E21D 5BFCD50003  			.db $5B,$FC,$D5,$00,$03		;BNE_ADJ#5==#0 to gb_50
1170   E222             			BITON_($A3,$28)			;Turn ON: Lamp#23(lbull_5k), Lamp#28(rbull_2x)
1170   E222             
1170   E222 10 A3 28    
1171   E225 5AFB61FDD200gb_50			.db $5A,$FB,$61,$FD,$D2,$00,$07	;BEQ_(ADJ#2>=#0 || BIT#21) to gb_51
1171   E22B 07
1172   E22C             			EXE_($06)				;CPU Execute Next 6 Bytes
1172   E22C~            			EXE_($06)				;CPU Execute Next 6 Bytes
1172   E22C~            			EXE_($06)				;CPU Execute Next 6 Bytes
1172   E22C             
1172   E22C 48          
1172   E22D             
1173   E22D CE DE 4F    			ldx	#gj_32
1174   E230 BD EA C4    			jsr	newthread_06
1175   E233             gb_51			SOL_($10)				;Turn ON Sol#0:dt_b_reset
1175   E233 31 10       
1176   E235             			JSRDR_(gj_0C)		
1176   E235~            			JSRDR_(gj_0C)		
1176   E235~            			JSRDR_(gj_0C)		
1176   E235             
1176   E235~            			JSRDR_(gj_0C)		
1176   E235~            			JSRDR_(gj_0C)		
1176   E235             
1176   E235             
1176   E235 A0          
1176   E236 4E          
1177   E237 5BFCE00302  			.db $5B,$FC,$E0,$03,$02		;BNE_RAM$00==#3 to gb_52
1178   E23C             			JSRR_(gj_1F)			
1178   E23C~            			JSRR_(gj_1F)			
1178   E23C~            			JSRR_(gj_1F)			
1178   E23C             
1178   E23C~            			JSRR_(gj_1F)			
1178   E23C~            			JSRR_(gj_1F)			
1178   E23C             
1178   E23C             
1178   E23C 90          
1178   E23D 0A          
1179   E23E             gb_52			JSRR_(gj_1E)			
1179   E23E~            gb_52			JSRR_(gj_1E)			
1179   E23E~            gb_52			JSRR_(gj_1E)			
1179   E23E             
1179   E23E~            gb_52			JSRR_(gj_1E)			
1179   E23E~            gb_52			JSRR_(gj_1E)			
1179   E23E             
1179   E23E             
1179   E23E 92          
1179   E23F 33          
1180   E240             			EXE_($06)				;CPU Execute Next 6 Bytes
1180   E240~            			EXE_($06)				;CPU Execute Next 6 Bytes
1180   E240~            			EXE_($06)				;CPU Execute Next 6 Bytes
1180   E240             
1180   E240 48          
1180   E241             
1181   E241 CE E2 6B    			ldx	#gj_06
1182   E244 BD EA C4    			jsr	newthread_06
1183   E247             			KILL_					;Remove This Thread
1183   E247 03          
1184   E248             
1185   E248             gj_1F			JSRDR_(gj_0C)		
1185   E248~            gj_1F			JSRDR_(gj_0C)		
1185   E248~            gj_1F			JSRDR_(gj_0C)		
1185   E248             
1185   E248~            gj_1F			JSRDR_(gj_0C)		
1185   E248~            gj_1F			JSRDR_(gj_0C)		
1185   E248             
1185   E248             
1185   E248 A0          
1185   E249 3B          
1186   E24A 5AFBFB42F80F			.db $5A,$FB,$FB,$42,$F8,$0F,$FC,$E0,$00,$16;BEQ_(RAM$00==#0 || (SW#0F || BIT#02)) to gb_55
1186   E250 FCE00016
1187   E254             			SOL_($10)				;Turn ON Sol#0:dt_b_reset
1187   E254 31 10       
1188   E256             			BITON_($42)				;Turn ON: Bit#02
1188   E256             
1188   E256 10 42       
1189   E258             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1189   E258             
1189   E258 51 10       
1189   E25A~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1189   E25A~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1189   E25A             
1190   E25A             gb_56			SOL_($4B)				;Turn ON Sol#11:ball_thrower
1190   E25A 31 4B       
1191   E25C             			SLEEP_(96)
1191   E25C~            			SLEEP_(96)
1191   E25C~            			SLEEP_(96)
1191   E25C             
1191   E25C 53 60       
1191   E25E             
1192   E25E             			JSRDR_(gj_0C)		
1192   E25E~            			JSRDR_(gj_0C)		
1192   E25E~            			JSRDR_(gj_0C)		
1192   E25E             
1192   E25E~            			JSRDR_(gj_0C)		
1192   E25E~            			JSRDR_(gj_0C)		
1192   E25E             
1192   E25E             
1192   E25E A0          
1192   E25F 25          
1193   E260 5BFBFDE1E0F8			.db $5B,$FB,$FD,$E1,$E0,$F8,$0F,$F2	;BNE_(SW#0F || RAM$01>=#224) to gb_56
1193   E266 0FF2
1194   E268             			BITOFF_($42)			;Turn OFF: Bit#02
1194   E268             
1194   E268 11 42       
1195   E26A             gb_55			MRTS_					;Macro RTS, Save MRA,MRB
1195   E26A 02          
1196   E26B             
1197   E26B BD F3 AB    gj_06			jsr	macro_start
1198   E26E             			PRI_($00)				;Priority=#00
1198   E26E 52 00       
1199   E270             			BITON2_($1D)			;Turn ON: Lamp#1D(lower_eject_lock)
1199   E270             
1199   E270 20 1D       
1200   E272             gj_2C			SLEEP_(5)
1200   E272             
1200   E272 75          
1200   E273~            gj_2C			SLEEP_(5)
1200   E273~            gj_2C			SLEEP_(5)
1200   E273             
1201   E273             			BE2E_($4E)				;Effect: Range #4E
1201   E273             
1201   E273 2E 4E       
1202   E275             			JMPR_(gj_2C)			
1202   E275~            			JMPR_(gj_2C)			
1202   E275~            			JMPR_(gj_2C)			
1202   E275             
1202   E275~            			JMPR_(gj_2C)			
1202   E275~            			JMPR_(gj_2C)			
1202   E275             
1202   E275             
1202   E275 8F          
1202   E276 FB          
1203   E277 37          gj_07			pshb	
1204   E278 4F          			clra	
1205   E279 D6 62       			ldab	$62
1206   E27B C4 FE       			andb	#$FE
1207   E27D 2A 01       gb_32			bpl	gb_31
1208   E27F 4C          			inca	
1209   E280 58          gb_31			aslb	
1210   E281 26 FA       			bne	gb_32
1211   E283 33          			pulb	
1212   E284 39          			rts	
1213   E285 37          gj_0C			pshb	
1214   E286 4F          			clra	
1215   E287 D6 62       			ldab	$62
1216   E289 C4 70       			andb	#$70
1217   E28B 20 F0       			bra	gb_32
1218   E28D             sw_barracora_lane	SETRAM_($00,$0C)			;RAM$00=$0C
1218   E28D~            sw_barracora_lane	SETRAM_($00,$0C)			;RAM$00=$0C
1218   E28D~            sw_barracora_lane	SETRAM_($00,$0C)			;RAM$00=$0C
1218   E28D             
1218   E28D C0 0C       
1219   E28F             			JSRR_(gj_08)			
1219   E28F~            			JSRR_(gj_08)			
1219   E28F~            			JSRR_(gj_08)			
1219   E28F             
1219   E28F~            			JSRR_(gj_08)			
1219   E28F~            			JSRR_(gj_08)			
1219   E28F             
1219   E28F             
1219   E28F 92          
1219   E290 8D          
1220   E291             			SSND_($08)				;Sound #08
1220   E291             
1220   E291 E8          
1220   E292~            			SSND_($08)				;Sound #08
1220   E292~            			SSND_($08)				;Sound #08
1220   E292~            			SSND_($08)				;Sound #08
1220   E292             
1221   E292 5A F5 04 15 			.db $5A,$F5,$04,$15		;BEQ_RangeOFF#04 to gb_06
1222   E296             			SETRAM_($00,$08)			;RAM$00=$08
1222   E296~            			SETRAM_($00,$08)			;RAM$00=$08
1222   E296~            			SETRAM_($00,$08)			;RAM$00=$08
1222   E296             
1222   E296 C0 08       
1223   E298 5B E0 02    gb_08			.db $5B,$E0,$02			;BNE_RAM$00 to gb_07
1224   E29B             			JSRDR_(gj_09)		
1224   E29B~            			JSRDR_(gj_09)		
1224   E29B~            			JSRDR_(gj_09)		
1224   E29B             
1224   E29B~            			JSRDR_(gj_09)		
1224   E29B~            			JSRDR_(gj_09)		
1224   E29B             
1224   E29B             
1224   E29B A2          
1224   E29C B4          
1225   E29D             gb_07			ADDRAM_($00,$01)			;RAM$00+=$01
1225   E29D~            gb_07			ADDRAM_($00,$01)			;RAM$00+=$01
1225   E29D~            gb_07			ADDRAM_($00,$01)			;RAM$00+=$01
1225   E29D             
1225   E29D B0 01       
1226   E29F 5BFCE010F4  			.db $5B,$FC,$E0,$10,$F4		;BNE_RAM$00==#16 to gb_08
1227   E2A4             			EXE_($06)				;CPU Execute Next 6 Bytes
1227   E2A4~            			EXE_($06)				;CPU Execute Next 6 Bytes
1227   E2A4~            			EXE_($06)				;CPU Execute Next 6 Bytes
1227   E2A4             
1227   E2A4 48          
1227   E2A5             
1228   E2A5 CE E2 AC    			ldx	#gj_16
1229   E2A8 BD EA C4    			jsr	newthread_06
1230   E2AB             gb_06			KILL_					;Remove This Thread
1230   E2AB 03          
1231   E2AC             
1232   E2AC BD F3 AB    gj_16			jsr	macro_start
1233   E2AF             			PRI_($32)				;Priority=#32
1233   E2AF 52 32       
1234   E2B1 5A 58 F7    			.db $5A,$58,$F7			;BEQ_BIT#18 to gb_06
1235   E2B4             			BE29_($04)				;Effect: Range #04
1235   E2B4             
1235   E2B4 29 04       
1236   E2B6             			BE28_($44)				;Effect: Range #44
1236   E2B6             
1236   E2B6 28 44       
1237   E2B8             			SETRAM_($00,$18)			;RAM$00=$18
1237   E2B8~            			SETRAM_($00,$18)			;RAM$00=$18
1237   E2B8~            			SETRAM_($00,$18)			;RAM$00=$18
1237   E2B8             
1237   E2B8 C0 18       
1238   E2BA             			BITON2_($48)			;Turn ON: Lamp#08(lamp_b)
1238   E2BA             
1238   E2BA 20 48       
1239   E2BC             			BITON2_($49)			;Turn ON: Lamp#09(lamp_a1)
1239   E2BC             
1239   E2BC 20 49       
1240   E2BE             			BITON2_($4C)			;Turn ON: Lamp#0C(lamp_c)
1240   E2BE             
1240   E2BE 20 4C       
1241   E2C0             			BITON2_($4D)			;Turn ON: Lamp#0D(lamp_o)
1241   E2C0             
1241   E2C0 20 4D       
1242   E2C2             gb_77			BE2D_($04)				;Effect: Range #04
1242   E2C2             
1242   E2C2 2D 04       
1243   E2C4 5A F1 01    			.db $5A,$F1,$01			;BEQ_GAME to gb_76
1244   E2C7             			SSND_($09)				;Sound #09
1244   E2C7             
1244   E2C7 E9          
1244   E2C8~            			SSND_($09)				;Sound #09
1244   E2C8~            			SSND_($09)				;Sound #09
1244   E2C8~            			SSND_($09)				;Sound #09
1244   E2C8             
1245   E2C8             gb_76			SLEEP_(4)
1245   E2C8             
1245   E2C8 74          
1245   E2C9~            gb_76			SLEEP_(4)
1245   E2C9~            gb_76			SLEEP_(4)
1245   E2C9             
1246   E2C9             			ADDRAM_($00,$FF)			;RAM$00+=$FF
1246   E2C9~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1246   E2C9~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1246   E2C9             
1246   E2C9 B0 FF       
1247   E2CB 5BFCE000F2  			.db $5B,$FC,$E0,$00,$F2		;BNE_RAM$00==#0 to gb_77
1248   E2D0             			BE29_($04)				;Effect: Range #04
1248   E2D0             
1248   E2D0 29 04       
1249   E2D2             			SETRAM_($00,$08)			;RAM$00=$08
1249   E2D2~            			SETRAM_($00,$08)			;RAM$00=$08
1249   E2D2~            			SETRAM_($00,$08)			;RAM$00=$08
1249   E2D2             
1249   E2D2 C0 08       
1250   E2D4             gb_78			BITOFFP2_($00)			;Turn OFF Lamp/Bit @RAM:00
1250   E2D4             
1250   E2D4 25 00       
1251   E2D6             			SLEEP_(8)
1251   E2D6             
1251   E2D6 78          
1251   E2D7~            			SLEEP_(8)
1251   E2D7~            			SLEEP_(8)
1251   E2D7             
1252   E2D7             			ADDRAM_($00,$01)			;RAM$00+=$01
1252   E2D7~            			ADDRAM_($00,$01)			;RAM$00+=$01
1252   E2D7~            			ADDRAM_($00,$01)			;RAM$00+=$01
1252   E2D7             
1252   E2D7 B0 01       
1253   E2D9 5BFDE00FF6  			.db $5B,$FD,$E0,$0F,$F6		;BNE_RAM$00>=#15 to gb_78
1254   E2DE             			KILL_					;Remove This Thread
1254   E2DE 03          
1255   E2DF             
1256   E2DF             sw_left_flipper	BE1D_($0A)				;Effect: Range #0A
1256   E2DF             
1256   E2DF 1D 0A       
1257   E2E1             			KILL_					;Remove This Thread
1257   E2E1 03          
1258   E2E2             
1259   E2E2             sw_right_flipper	BE1E_($09)				;Effect: Range #09
1259   E2E2             
1259   E2E2 1E 09       
1260   E2E4             			KILL_					;Remove This Thread
1260   E2E4 03          
1261   E2E5             
1262   E2E5             sw_1_4_lane
1263   E2E5             sw_2_5_lane
1264   E2E5             sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E5 42          
1264   E2E6             
1264   E2E6~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E6~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E6             
1264   E2E6~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E6~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E6             
1264   E2E6~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E6~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E6             
1264   E2E6             
1264   E2E6 0B          
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7~            sw_3_6_lane		POINTS_(1,1000)			;1000 Points
1264   E2E7             
1264   E2E7             
1264   E2E7             
1264   E2E7             
1265   E2E7             			SSND_($03)				;Sound #03
1265   E2E7             
1265   E2E7 E3          
1265   E2E8~            			SSND_($03)				;Sound #03
1265   E2E8~            			SSND_($03)				;Sound #03
1265   E2E8~            			SSND_($03)				;Sound #03
1265   E2E8             
1266   E2E8             			JSRDR_(gj_09)		
1266   E2E8~            			JSRDR_(gj_09)		
1266   E2E8~            			JSRDR_(gj_09)		
1266   E2E8             
1266   E2E8~            			JSRDR_(gj_09)		
1266   E2E8~            			JSRDR_(gj_09)		
1266   E2E8             
1266   E2E8             
1266   E2E8 A2          
1266   E2E9 67          
1267   E2EA 5A E0 40    			.db $5A,$E0,$40			;BEQ_RAM$00 to gb_14
1268   E2ED             			BITONP_($00)			;Turn ON Lamp/Bit @RAM:00
1268   E2ED             
1268   E2ED 14 00       
1269   E2EF 5B F6 09 39 			.db $5B,$F6,$09,$39		;BNE_RangeON#09 to gb_15
1270   E2F3             			BE19_($09)				;Effect: Range #09
1270   E2F3             
1270   E2F3 19 09       
1271   E2F5             			BE1A_($05)				;Effect: Range #05
1271   E2F5             
1271   E2F5 1A 05       
1272   E2F7             			EXE_($07)				;CPU Execute Next 7 Bytes
1272   E2F7~            			EXE_($07)				;CPU Execute Next 7 Bytes
1272   E2F7~            			EXE_($07)				;CPU Execute Next 7 Bytes
1272   E2F7             
1272   E2F7 49          
1272   E2F8             
1273   E2F8 36          			psha	
1274   E2F9 86 32       			ldaa	#$32
1275   E2FB 97 AA       			staa	thread_priority
1276   E2FD 86 C5       			ldaa	#$C5
1277   E2FF             			EXE_($07)				;CPU Execute Next 7 Bytes
1277   E2FF~            			EXE_($07)				;CPU Execute Next 7 Bytes
1277   E2FF~            			EXE_($07)				;CPU Execute Next 7 Bytes
1277   E2FF             
1277   E2FF 49          
1277   E300             
1278   E300 CE E3 69    			ldx	#gj_23
1279   E303 BD EA 78    			jsr	newthread_sp
1280   E306 32          			pula	
1281   E307             			BITON_($50)				;Turn ON: Bit#10
1281   E307             
1281   E307 10 50       
1282   E309 5A 58 16    			.db $5A,$58,$16			;BEQ_BIT#18 to gb_16
1283   E30C             			BE28_($49)				;Effect: Range #49
1283   E30C             
1283   E30C 28 49       
1284   E30E             			BE29_($09)				;Effect: Range #09
1284   E30E             
1284   E30E 29 09       
1285   E310             			BE2A_($09)				;Effect: Range #09
1285   E310             
1285   E310 2A 09       
1286   E312             			SETRAM_($00,$10)			;RAM$00=$10
1286   E312~            			SETRAM_($00,$10)			;RAM$00=$10
1286   E312~            			SETRAM_($00,$10)			;RAM$00=$10
1286   E312             
1286   E312 C0 10       
1287   E314             			SSND_($02)				;Sound #02
1287   E314             
1287   E314 E2          
1287   E315~            			SSND_($02)				;Sound #02
1287   E315~            			SSND_($02)				;Sound #02
1287   E315~            			SSND_($02)				;Sound #02
1287   E315             
1288   E315             gb_17			SLEEP_(4)
1288   E315             
1288   E315 74          
1288   E316~            gb_17			SLEEP_(4)
1288   E316~            gb_17			SLEEP_(4)
1288   E316             
1289   E316             			BE2D_($09)				;Effect: Range #09
1289   E316             
1289   E316 2D 09       
1290   E318             			ADDRAM_($00,$FF)			;RAM$00+=$FF
1290   E318~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1290   E318~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1290   E318             
1290   E318 B0 FF       
1291   E31A 5BFCE000F6  			.db $5B,$FC,$E0,$00,$F6		;BNE_RAM$00==#0 to gb_17
1292   E31F             			BE29_($C9,$09)			;Effect: Range #C9 Range #09
1292   E31F             
1292   E31F 29 C9 09    
1293   E322 5BFA505105  gb_16			.db $5B,$FA,$50,$51,$05		;BNE_(BIT#11 && BIT#10) to gb_15
1294   E327             			BITON_($1F)				;Turn ON: Lamp#1F(upper_eject_cb)
1294   E327             
1294   E327 10 1F       
1295   E329             			BITOFF_($D0,$51)			;Turn OFF: Bit#10, Bit#11
1295   E329             
1295   E329 11 D0 51    
1296   E32C             gb_15			KILL_					;Remove This Thread
1296   E32C 03          
1297   E32D             
1298   E32D             gb_14			ADDRAM_($00,$03)			;RAM$00+=$03
1298   E32D~            gb_14			ADDRAM_($00,$03)			;RAM$00+=$03
1298   E32D~            gb_14			ADDRAM_($00,$03)			;RAM$00+=$03
1298   E32D             
1298   E32D B0 03       
1299   E32F 5A E0 FA    			.db $5A,$E0,$FA			;BEQ_RAM$00 to gb_15
1300   E332             			BITONP_($00)			;Turn ON Lamp/Bit @RAM:00
1300   E332             
1300   E332 14 00       
1301   E334 5B F6 0A F4 			.db $5B,$F6,$0A,$F4		;BNE_RangeON#0A to gb_15
1302   E338             			BE1A_($06)				;Effect: Range #06
1302   E338             
1302   E338 1A 06       
1303   E33A             			EXE_($07)				;CPU Execute Next 7 Bytes
1303   E33A~            			EXE_($07)				;CPU Execute Next 7 Bytes
1303   E33A~            			EXE_($07)				;CPU Execute Next 7 Bytes
1303   E33A             
1303   E33A 49          
1303   E33B             
1304   E33B 36          			psha	
1305   E33C 86 32       			ldaa	#$32
1306   E33E 97 AA       			staa	thread_priority
1307   E340 86 C6       			ldaa	#$C6
1308   E342             			EXE_($07)				;CPU Execute Next 7 Bytes
1308   E342~            			EXE_($07)				;CPU Execute Next 7 Bytes
1308   E342~            			EXE_($07)				;CPU Execute Next 7 Bytes
1308   E342             
1308   E342 49          
1308   E343             
1309   E343 CE E3 69    			ldx	#gj_23
1310   E346 BD EA 78    			jsr	newthread_sp
1311   E349 32          			pula	
1312   E34A             			BITON_($51)				;Turn ON: Bit#11
1312   E34A             
1312   E34A 10 51       
1313   E34C             			BE19_($0A)				;Effect: Range #0A
1313   E34C             
1313   E34C 19 0A       
1314   E34E 5A 58 D1    			.db $5A,$58,$D1			;BEQ_BIT#18 to gb_16
1315   E351             			BE28_($4A)				;Effect: Range #4A
1315   E351             
1315   E351 28 4A       
1316   E353             			BE29_($0A)				;Effect: Range #0A
1316   E353             
1316   E353 29 0A       
1317   E355             			BE2A_($0A)				;Effect: Range #0A
1317   E355             
1317   E355 2A 0A       
1318   E357             			SETRAM_($00,$10)			;RAM$00=$10
1318   E357~            			SETRAM_($00,$10)			;RAM$00=$10
1318   E357~            			SETRAM_($00,$10)			;RAM$00=$10
1318   E357             
1318   E357 C0 10       
1319   E359             			SSND_($02)				;Sound #02
1319   E359             
1319   E359 E2          
1319   E35A~            			SSND_($02)				;Sound #02
1319   E35A~            			SSND_($02)				;Sound #02
1319   E35A~            			SSND_($02)				;Sound #02
1319   E35A             
1320   E35A             gb_3F			SLEEP_(4)
1320   E35A             
1320   E35A 74          
1320   E35B~            gb_3F			SLEEP_(4)
1320   E35B~            gb_3F			SLEEP_(4)
1320   E35B             
1321   E35B             			BE2E_($0A)				;Effect: Range #0A
1321   E35B             
1321   E35B 2E 0A       
1322   E35D             			ADDRAM_($00,$FF)			;RAM$00+=$FF
1322   E35D~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1322   E35D~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1322   E35D             
1322   E35D B0 FF       
1323   E35F 5BFCE000F6  			.db $5B,$FC,$E0,$00,$F6		;BNE_RAM$00==#0 to gb_3F
1324   E364             			BE29_($CA,$0A)			;Effect: Range #CA Range #0A
1324   E364             
1324   E364 29 CA 0A    
1325   E367             			JMPR_(gb_16)			
1325   E367~            			JMPR_(gb_16)			
1325   E367~            			JMPR_(gb_16)			
1325   E367             
1325   E367~            			JMPR_(gb_16)			
1325   E367~            			JMPR_(gb_16)			
1325   E367             
1325   E367             
1325   E367 8F          
1325   E368 B9          
1326   E369 C6 10       gj_23			ldab	#$10
1327   E36B BD F1 C7    gb_5D			jsr	lampm_f
1328   E36E BD EA 2F    			jsr	addthread
1329   E371 04          			.db $04
1330   E372             
1331   E372 5A          			decb	
1332   E373 26 F6       			bne	gb_5D
1333   E375 BD F1 A7    			jsr	lampm_off
1334   E378 7E EA 67    			jmp	killthread
1335   E37B 5AFBF0F11D  sw_upper_eject	.db $5A,$FB,$F0,$F1,$1D		;BEQ_(GAME || TILT) to gb_09
1336   E380             			SETRAM_($00,$5E)			;RAM$00=$5E
1336   E380~            			SETRAM_($00,$5E)			;RAM$00=$5E
1336   E380~            			SETRAM_($00,$5E)			;RAM$00=$5E
1336   E380             
1336   E380 C0 5E       
1337   E382 5B F8 09 2F 			.db $5B,$F8,$09,$2F		;BNE_SW#09 to gb_0A
1338   E386 5A 43 20    			.db $5A,$43,$20			;BEQ_BIT#03 to gb_0B
1339   E389             			POINTS_(1,10000)			;10000 Points
1339   E389 42          
1339   E38A             
1339   E38A~            			POINTS_(1,10000)			;10000 Points
1339   E38A~            			POINTS_(1,10000)			;10000 Points
1339   E38A             
1339   E38A~            			POINTS_(1,10000)			;10000 Points
1339   E38A~            			POINTS_(1,10000)			;10000 Points
1339   E38A             
1339   E38A~            			POINTS_(1,10000)			;10000 Points
1339   E38A~            			POINTS_(1,10000)			;10000 Points
1339   E38A             
1339   E38A~            			POINTS_(1,10000)			;10000 Points
1339   E38A~            			POINTS_(1,10000)			;10000 Points
1339   E38A             
1339   E38A             
1339   E38A 0C          
1339   E38B~            			POINTS_(1,10000)			;10000 Points
1339   E38B~            			POINTS_(1,10000)			;10000 Points
1339   E38B~            			POINTS_(1,10000)			;10000 Points
1339   E38B~            			POINTS_(1,10000)			;10000 Points
1339   E38B~            			POINTS_(1,10000)			;10000 Points
1339   E38B~            			POINTS_(1,10000)			;10000 Points
1339   E38B             
1339   E38B             
1339   E38B             
1339   E38B             
1339   E38B             
1340   E38B 5B 1F 09    			.db $5B,$1F,$09			;BNE_LAMP#1F(upper_eject_cb) to gb_0C
1341   E38E             			JSRR_(gj_0A)			
1341   E38E~            			JSRR_(gj_0A)			
1341   E38E~            			JSRR_(gj_0A)			
1341   E38E             
1341   E38E~            			JSRR_(gj_0A)			
1341   E38E~            			JSRR_(gj_0A)			
1341   E38E             
1341   E38E             
1341   E38E 92          
1341   E38F 14          
1342   E390             			BE19_($81,$0D)			;Effect: Range #81 Range #0D
1342   E390             
1342   E390 19 81 0D    
1343   E393             			BITON_($35)				;Turn ON: Lamp#35(bonus_1)
1343   E393             
1343   E393 10 35       
1344   E395             			BITOFF_($1F)			;Turn OFF: Lamp#1F(upper_eject_cb)
1344   E395             
1344   E395 11 1F       
1345   E397             gb_0C			SETRAM_($00,$5E)			;RAM$00=$5E
1345   E397~            gb_0C			SETRAM_($00,$5E)			;RAM$00=$5E
1345   E397~            gb_0C			SETRAM_($00,$5E)			;RAM$00=$5E
1345   E397             
1345   E397 C0 5E       
1346   E399 5A 1E 0E    			.db $5A,$1E,$0E			;BEQ_LAMP#1E(upper_eject_lock) to gb_0D
1347   E39C             			SSND_($14)				;Sound #14
1347   E39C             
1347   E39C F4          
1347   E39D~            			SSND_($14)				;Sound #14
1347   E39D~            			SSND_($14)				;Sound #14
1347   E39D~            			SSND_($14)				;Sound #14
1347   E39D             
1348   E39D             gb_09			BITON_($43)				;Turn ON: Bit#03
1348   E39D             
1348   E39D 10 43       
1349   E39F             			SOL_($4C)				;Turn ON Sol#12:upper_eject
1349   E39F 31 4C       
1350   E3A1             			SLEEP_(64)
1350   E3A1~            			SLEEP_(64)
1350   E3A1~            			SLEEP_(64)
1350   E3A1             
1350   E3A1 53 40       
1350   E3A3             
1351   E3A3 5A F8 09 F6 gj_35			.db $5A,$F8,$09,$F6		;BEQ_SW#09 to gb_09
1352   E3A7             			BITOFF_($43)			;Turn OFF: Bit#03
1352   E3A7             
1352   E3A7 11 43       
1353   E3A9             gb_0B			KILL_					;Remove This Thread
1353   E3A9 03          
1354   E3AA             
1355   E3AA             gb_0D			BITONP2_($00)			;Turn ON Lamp/Bit @RAM:00
1355   E3AA             
1355   E3AA 24 00       
1356   E3AC             			SSND_($05)				;Sound #05
1356   E3AC             
1356   E3AC E5          
1356   E3AD~            			SSND_($05)				;Sound #05
1356   E3AD~            			SSND_($05)				;Sound #05
1356   E3AD~            			SSND_($05)				;Sound #05
1356   E3AD             
1357   E3AD             			REMTHREADS_($FF,$20)		;Remove Multiple Threads Based on Priority
1357   E3AD 55 FF 20    
1358   E3B0             			JSRR_(gj_1E)			
1358   E3B0~            			JSRR_(gj_1E)			
1358   E3B0~            			JSRR_(gj_1E)			
1358   E3B0             
1358   E3B0~            			JSRR_(gj_1E)			
1358   E3B0~            			JSRR_(gj_1E)			
1358   E3B0             
1358   E3B0             
1358   E3B0 90          
1358   E3B1 C1          
1359   E3B2             			JSRR_(gj_1F)			
1359   E3B2~            			JSRR_(gj_1F)			
1359   E3B2~            			JSRR_(gj_1F)			
1359   E3B2             
1359   E3B2~            			JSRR_(gj_1F)			
1359   E3B2~            			JSRR_(gj_1F)			
1359   E3B2             
1359   E3B2             
1359   E3B2 9E          
1359   E3B3 94          
1360   E3B4             			KILL_					;Remove This Thread
1360   E3B4 03          
1361   E3B5             
1362   E3B5             gb_0A			BITOFFP2_($00)			;Turn OFF Lamp/Bit @RAM:00
1362   E3B5             
1362   E3B5 25 00       
1363   E3B7             			KILL_					;Remove This Thread
1363   E3B7 03          
1364   E3B8             
1365   E3B8 BD F3 AB    gj_21			jsr	macro_start
1366   E3BB             			JMPR_(gj_35)			
1366   E3BB~            			JMPR_(gj_35)			
1366   E3BB~            			JMPR_(gj_35)			
1366   E3BB             
1366   E3BB~            			JMPR_(gj_35)			
1366   E3BB~            			JMPR_(gj_35)			
1366   E3BB             
1366   E3BB             
1366   E3BB 8F          
1366   E3BC E6          
1367   E3BD 5AFBF0F14E  sw_lower_eject	.db $5A,$FB,$F0,$F1,$4E		;BEQ_(GAME || TILT) to gb_0E
1368   E3C2             			SETRAM_($00,$5D)			;RAM$00=$5D
1368   E3C2~            			SETRAM_($00,$5D)			;RAM$00=$5D
1368   E3C2~            			SETRAM_($00,$5D)			;RAM$00=$5D
1368   E3C2             
1368   E3C2 C0 5D       
1369   E3C4 5B F8 0A ED 			.db $5B,$F8,$0A,$ED		;BNE_SW#0A to gb_0A
1370   E3C8 5A 44 51    			.db $5A,$44,$51			;BEQ_BIT#04 to gb_0F
1371   E3CB 5B F5 05 04 			.db $5B,$F5,$05,$04		;BNE_RangeOFF#05 to gb_10
1372   E3CF             			SETRAM_($00,$0C)			;RAM$00=$0C
1372   E3CF~            			SETRAM_($00,$0C)			;RAM$00=$0C
1372   E3CF~            			SETRAM_($00,$0C)			;RAM$00=$0C
1372   E3CF             
1372   E3CF C0 0C       
1373   E3D1             			JMPR_(gj_0B)			
1373   E3D1~            			JMPR_(gj_0B)			
1373   E3D1~            			JMPR_(gj_0B)			
1373   E3D1             
1373   E3D1~            			JMPR_(gj_0B)			
1373   E3D1~            			JMPR_(gj_0B)			
1373   E3D1             
1373   E3D1             
1373   E3D1 80          
1373   E3D2 11          
1374   E3D3             gb_10			SETRAM_($00,$04)			;RAM$00=$04
1374   E3D3~            gb_10			SETRAM_($00,$04)			;RAM$00=$04
1374   E3D3~            gb_10			SETRAM_($00,$04)			;RAM$00=$04
1374   E3D3             
1374   E3D3 C0 04       
1375   E3D5             gb_3B			BE1C_($05)				;Effect: Range #05
1375   E3D5             
1375   E3D5 1C 05       
1376   E3D7             			ADDRAM_($00,$18)			;RAM$00+=$18
1376   E3D7~            			ADDRAM_($00,$18)			;RAM$00+=$18
1376   E3D7~            			ADDRAM_($00,$18)			;RAM$00+=$18
1376   E3D7             
1376   E3D7 B0 18       
1377   E3D9 5B F5 05 F8 			.db $5B,$F5,$05,$F8		;BNE_RangeOFF#05 to gb_3B
1378   E3DD             			EXE_($06)				;CPU Execute Next 6 Bytes
1378   E3DD~            			EXE_($06)				;CPU Execute Next 6 Bytes
1378   E3DD~            			EXE_($06)				;CPU Execute Next 6 Bytes
1378   E3DD             
1378   E3DD 48          
1378   E3DE             
1379   E3DE CE D8 6C    			ldx	#gj_2E
1380   E3E1 BD EA C4    			jsr	newthread_06
1381   E3E4             gj_0B			JSRR_(gj_08)			
1381   E3E4~            gj_0B			JSRR_(gj_08)			
1381   E3E4~            gj_0B			JSRR_(gj_08)			
1381   E3E4             
1381   E3E4~            gj_0B			JSRR_(gj_08)			
1381   E3E4~            gj_0B			JSRR_(gj_08)			
1381   E3E4             
1381   E3E4             
1381   E3E4 91          
1381   E3E5 38          
1382   E3E6 5B 1D 26    			.db $5B,$1D,$26			;BNE_LAMP#1D(lower_eject_lock) to gb_3C
1383   E3E9             			BITON_($40)				;Turn ON: Bit#00
1383   E3E9             
1383   E3E9 10 40       
1384   E3EB             			REMTHREADS_($FF,$20)		;Remove Multiple Threads Based on Priority
1384   E3EB 55 FF 20    
1385   E3EE             			JSRDR_(gj_0C)		
1385   E3EE~            			JSRDR_(gj_0C)		
1385   E3EE~            			JSRDR_(gj_0C)		
1385   E3EE             
1385   E3EE~            			JSRDR_(gj_0C)		
1385   E3EE~            			JSRDR_(gj_0C)		
1385   E3EE             
1385   E3EE             
1385   E3EE AE          
1385   E3EF 95          
1386   E3F0             			EXE_($0A)				;CPU Execute Next 10 Bytes
1386   E3F0~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1386   E3F0~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1386   E3F0             
1386   E3F0 4C          
1386   E3F1             
1387   E3F1 C6 F3       			ldab	#$F3
1388   E3F3 81 01       			cmpa	#$01
1389   E3F5 27 02       			beq	gb_57
1390   E3F7 C6 F2       			ldab	#$F2
1391   E3F9 D7 E4       gb_57			stab	spare_ram+4
1392   E3FB             			JSRD_(gj_20)			
1392   E3FB 57          
1392   E3FC DA 3F       
1393   E3FE             			EXE_($0A)				;CPU Execute Next 10 Bytes
1393   E3FE~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1393   E3FE~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1393   E3FE             
1393   E3FE 4C          
1393   E3FF             
1394   E3FF 86 32       			ldaa	#$32
1395   E401 97 AA       			staa	thread_priority
1396   E403 CE DD 5E    			ldx	#gj_24
1397   E406 BD EA 78    			jsr	newthread_sp
1398   E409             			SLEEP_(128)
1398   E409~            			SLEEP_(128)
1398   E409~            			SLEEP_(128)
1398   E409             
1398   E409 53 80       
1398   E40B             
1399   E40B             			SETRAM_($00,$5D)			;RAM$00=$5D
1399   E40B~            			SETRAM_($00,$5D)			;RAM$00=$5D
1399   E40B~            			SETRAM_($00,$5D)			;RAM$00=$5D
1399   E40B             
1399   E40B C0 5D       
1400   E40D             			JMPR_(gb_0D)			
1400   E40D~            			JMPR_(gb_0D)			
1400   E40D~            			JMPR_(gb_0D)			
1400   E40D             
1400   E40D~            			JMPR_(gb_0D)			
1400   E40D~            			JMPR_(gb_0D)			
1400   E40D             
1400   E40D             
1400   E40D 8F          
1400   E40E 9B          
1401   E40F             gb_3C			SSND_($14)				;Sound #14
1401   E40F             
1401   E40F F4          
1401   E410~            gb_3C			SSND_($14)				;Sound #14
1401   E410~            gb_3C			SSND_($14)				;Sound #14
1401   E410~            gb_3C			SSND_($14)				;Sound #14
1401   E410             
1402   E410             gb_0E			BITON_($44)				;Turn ON: Bit#04
1402   E410             
1402   E410 10 44       
1403   E412             			SOL_($4D)				;Turn ON Sol#13:lower_eject
1403   E412 31 4D       
1404   E414             			SLEEP_(64)
1404   E414~            			SLEEP_(64)
1404   E414~            			SLEEP_(64)
1404   E414             
1404   E414 53 40       
1404   E416             
1405   E416 5A F8 0A F6 gj_36			.db $5A,$F8,$0A,$F6		;BEQ_SW#0A to gb_0E
1406   E41A             			BITOFF_($44)			;Turn OFF: Bit#04
1406   E41A             
1406   E41A 11 44       
1407   E41C             gb_0F			KILL_					;Remove This Thread
1407   E41C 03          
1408   E41D             
1409   E41D BD F3 AB    gj_22			jsr	macro_start
1410   E420             			JMPR_(gj_36)			
1410   E420~            			JMPR_(gj_36)			
1410   E420~            			JMPR_(gj_36)			
1410   E420             
1410   E420~            			JMPR_(gj_36)			
1410   E420~            			JMPR_(gj_36)			
1410   E420             
1410   E420             
1410   E420 8F          
1410   E421 F4          
1411   E422             sw_center_trough
1412   E422             sw_left_trough
1413   E422 5AFBFBFB4241sw_right_trough	.db $5A,$FB,$FB,$FB,$42,$41,$F8,$0F,$61,$F0;BEQ_(BIT#21 || (SW#0F || (BIT#01 || BIT#02))) to gb_0F
1413   E428 F80F61F0
1414   E42C             			JSRD_(gj_0C)			
1414   E42C 57          
1414   E42D E2 85       
1415   E42F 5BFCE00308  			.db $5B,$FC,$E0,$03,$08		;BNE_RAM$00==#3 to gb_11
1416   E434             			REMTHREADS_($F0,$A0)		;Remove Multiple Threads Based on Priority
1416   E434 55 F0 A0    
1417   E437             			JSRDR_(gj_0D)		
1417   E437~            			JSRDR_(gj_0D)		
1417   E437~            			JSRDR_(gj_0D)		
1417   E437             
1417   E437~            			JSRDR_(gj_0D)		
1417   E437~            			JSRDR_(gj_0D)		
1417   E437             
1417   E437             
1417   E437 A0          
1417   E438 2C          
1418   E439 5C          			JMPD_(outhole_main)		
1418   E43A F9 AB       
1419   E43C             
1420   E43C             gb_11			EXE_($03)				;CPU Execute Next 3 Bytes
1420   E43C~            gb_11			EXE_($03)				;CPU Execute Next 3 Bytes
1420   E43C~            gb_11			EXE_($03)				;CPU Execute Next 3 Bytes
1420   E43C             
1420   E43C 45          
1420   E43D             
1421   E43D 7A 00 E4    			dec	spare_ram+4
1422   E440 5BFDE0010C  			.db $5B,$FD,$E0,$01,$0C		;BNE_RAM$00>=#1 to gb_3D
1423   E445             			BITOFF_($40)			;Turn OFF: Bit#00
1423   E445             
1423   E445 11 40       
1424   E447             			REMTHREADS_($F0,$A0)		;Remove Multiple Threads Based on Priority
1424   E447 55 F0 A0    
1425   E44A             			JSRDR_(gb_02)		
1425   E44A~            			JSRDR_(gb_02)		
1425   E44A~            			JSRDR_(gb_02)		
1425   E44A             
1425   E44A~            			JSRDR_(gb_02)		
1425   E44A~            			JSRDR_(gb_02)		
1425   E44A             
1425   E44A             
1425   E44A AD          
1425   E44B 7D          
1426   E44C             			JSRD_($F8A3)			
1426   E44C 57          
1426   E44D F8 A3       
1427   E44F             			JSRDR_(gj_0D)		
1427   E44F~            			JSRDR_(gj_0D)		
1427   E44F~            			JSRDR_(gj_0D)		
1427   E44F             
1427   E44F~            			JSRDR_(gj_0D)		
1427   E44F~            			JSRDR_(gj_0D)		
1427   E44F             
1427   E44F             
1427   E44F A0          
1427   E450 14          
1428   E451             gb_3D			JSRDR_(gj_07)		
1428   E451~            gb_3D			JSRDR_(gj_07)		
1428   E451~            gb_3D			JSRDR_(gj_07)		
1428   E451             
1428   E451~            gb_3D			JSRDR_(gj_07)		
1428   E451~            gb_3D			JSRDR_(gj_07)		
1428   E451             
1428   E451             
1428   E451 AE          
1428   E452 24          
1429   E453 5AFBF3FCE003			.db $5A,$FB,$F3,$FC,$E0,$03,$F8,$0F,$08;BEQ_(SW#0F || (!RAM$00==#3)) to gb_3E
1429   E459 F80F08
1430   E45C             			BE29_($13)				;Effect: Range #13
1430   E45C             
1430   E45C 29 13       
1431   E45E             			BE19_($13)				;Effect: Range #13
1431   E45E             
1431   E45E 19 13       
1432   E460             			JSRR_(gj_1E)			
1432   E460~            			JSRR_(gj_1E)			
1432   E460~            			JSRR_(gj_1E)			
1432   E460             
1432   E460~            			JSRR_(gj_1E)			
1432   E460~            			JSRR_(gj_1E)			
1432   E460             
1432   E460             
1432   E460 90          
1432   E461 11          
1433   E462             			JSRDR_(gj_0E)		
1433   E462~            			JSRDR_(gj_0E)		
1433   E462~            			JSRDR_(gj_0E)		
1433   E462             
1433   E462~            			JSRDR_(gj_0E)		
1433   E462~            			JSRDR_(gj_0E)		
1433   E462             
1433   E462             
1433   E462 A0          
1433   E463 69          
1434   E464             gb_3E			KILL_					;Remove This Thread
1434   E464 03          
1435   E465             
1436   E465 96 E0       gj_0D			ldaa	spare_ram
1437   E467 97 60       			staa	comma_flags
1438   E469 7E EB A1    			jmp	update_commas
1439   E46C             sw_outhole		SOL_($4A)				;Turn ON Sol#10:ball_release
1439   E46C 31 4A       
1440   E46E             			SLEEP_(96)
1440   E46E~            			SLEEP_(96)
1440   E46E~            			SLEEP_(96)
1440   E46E             
1440   E46E 53 60       
1440   E470             
1441   E470 5E 0B       			SWCLR_($0B)				;Clear Sw#: $0B(outhole)
1442   E472             			KILL_					;Remove This Thread
1442   E472 03          
1443   E473             
1444   E473             gj_1E			REMTHREADS_($FF,$70)		;Remove Multiple Threads Based on Priority
1444   E473 55 FF 70    
1445   E476             			SETRAM_($00,$70)			;RAM$00=$70
1445   E476~            			SETRAM_($00,$70)			;RAM$00=$70
1445   E476~            			SETRAM_($00,$70)			;RAM$00=$70
1445   E476             
1445   E476 C0 70       
1446   E478             			EXE_($0B)				;CPU Execute Next 11 Bytes
1446   E478~            			EXE_($0B)				;CPU Execute Next 11 Bytes
1446   E478~            			EXE_($0B)				;CPU Execute Next 11 Bytes
1446   E478             
1446   E478 4D          
1446   E479             
1447   E479 97 AA       			staa	thread_priority
1448   E47B 7F 00 D6    			clr	flag_timer_bip
1449   E47E CE F8 DD    			ldx	#$F8DD
1450   E481 BD EA 78    			jsr	newthread_sp
1451   E484             			MRTS_					;Macro RTS, Save MRA,MRB
1451   E484 02          
1452   E485             
1453   E485             sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E485 42          
1453   E486             
1453   E486~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E486~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E486             
1453   E486~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E486~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E486             
1453   E486~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E486~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E486             
1453   E486             
1453   E486 0B          
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487~            sw_bottom_jet	POINTS_(1,1000)			;1000 Points
1453   E487             
1453   E487             
1453   E487             
1453   E487             
1454   E487             			SSND_($15)				;Sound #15
1454   E487             
1454   E487 F5          
1454   E488~            			SSND_($15)				;Sound #15
1454   E488~            			SSND_($15)				;Sound #15
1454   E488~            			SSND_($15)				;Sound #15
1454   E488             
1455   E488             			KILL_					;Remove This Thread
1455   E488 03          
1456   E489             
1457   E489             sw_left_jet
1458   E489             sw_right_jet	POINTS_(1,100)			;100 Points
1458   E489 42          
1458   E48A             
1458   E48A~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48A~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48A             
1458   E48A~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48A~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48A             
1458   E48A             
1458   E48A 0A          
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B~            sw_right_jet	POINTS_(1,100)			;100 Points
1458   E48B             
1458   E48B             
1458   E48B             
1459   E48B             			SSND_($15)				;Sound #15
1459   E48B             
1459   E48B F5          
1459   E48C~            			SSND_($15)				;Sound #15
1459   E48C~            			SSND_($15)				;Sound #15
1459   E48C~            			SSND_($15)				;Sound #15
1459   E48C             
1460   E48C             			KILL_					;Remove This Thread
1460   E48C 03          
1461   E48D             
1462   E48D             sw_5bank_10
1463   E48D             sw_lleft_10
1464   E48D             sw_lower_10
1465   E48D             sw_lsling_10
1466   E48D             sw_rsling_10
1467   E48D             sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48D 42          
1467   E48E             
1467   E48E~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48E~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48E             
1467   E48E             
1467   E48E 09          
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F~            sw_upper_10		POINTS_(1,10)			;10 Points
1467   E48F             
1467   E48F             
1468   E48F             			SSND_($00)				;Sound #00
1468   E48F             
1468   E48F E0          
1468   E490~            			SSND_($00)				;Sound #00
1468   E490~            			SSND_($00)				;Sound #00
1468   E490~            			SSND_($00)				;Sound #00
1468   E490             
1469   E490             			KILL_					;Remove This Thread
1469   E490 03          
1470   E491             
1471   E491             sw_left_return
1472   E491             sw_right_return	JSRDR_(gj_09)		
1472   E491~            sw_right_return	JSRDR_(gj_09)		
1472   E491~            sw_right_return	JSRDR_(gj_09)		
1472   E491             
1472   E491~            sw_right_return	JSRDR_(gj_09)		
1472   E491~            sw_right_return	JSRDR_(gj_09)		
1472   E491             
1472   E491             
1472   E491 A0          
1472   E492 BE          
1473   E493             			POINTS_(1,1000)			;1000 Points
1473   E493 42          
1473   E494             
1473   E494~            			POINTS_(1,1000)			;1000 Points
1473   E494~            			POINTS_(1,1000)			;1000 Points
1473   E494             
1473   E494~            			POINTS_(1,1000)			;1000 Points
1473   E494~            			POINTS_(1,1000)			;1000 Points
1473   E494             
1473   E494~            			POINTS_(1,1000)			;1000 Points
1473   E494~            			POINTS_(1,1000)			;1000 Points
1473   E494             
1473   E494             
1473   E494 0B          
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495~            			POINTS_(1,1000)			;1000 Points
1473   E495             
1473   E495             
1473   E495             
1473   E495             
1474   E495             			SSND_($0B)				;Sound #0B
1474   E495             
1474   E495 EB          
1474   E496~            			SSND_($0B)				;Sound #0B
1474   E496~            			SSND_($0B)				;Sound #0B
1474   E496~            			SSND_($0B)				;Sound #0B
1474   E496             
1475   E496             			KILL_					;Remove This Thread
1475   E496 03          
1476   E497             
1477   E497             sw_left_outlane
1478   E497             sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E497 42          
1478   E498             
1478   E498~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E498~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E498             
1478   E498~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E498~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E498             
1478   E498~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E498~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E498             
1478   E498             
1478   E498 2B          
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499~            sw_right_outlane	POINTS_(5,1000)			;5000 Points
1478   E499             
1478   E499             
1478   E499             
1478   E499             
1479   E499             			SSND_($0F)				;Sound #0F
1479   E499             
1479   E499 EF          
1479   E49A~            			SSND_($0F)				;Sound #0F
1479   E49A~            			SSND_($0F)				;Sound #0F
1479   E49A~            			SSND_($0F)				;Sound #0F
1479   E49A             
1480   E49A             			JSRDR_(gj_09)		
1480   E49A~            			JSRDR_(gj_09)		
1480   E49A~            			JSRDR_(gj_09)		
1480   E49A             
1480   E49A~            			JSRDR_(gj_09)		
1480   E49A~            			JSRDR_(gj_09)		
1480   E49A             
1480   E49A             
1480   E49A A0          
1480   E49B B5          
1481   E49C 5B E0 10    			.db $5B,$E0,$10			;BNE_RAM$00 to gb_18
1482   E49F             			BE19_($07)				;Effect: Range #07
1482   E49F             
1482   E49F 19 07       
1483   E4A1             			SPEC_					;Award Special
1483   E4A1 05          
1484   E4A2             			BITON_($52)				;Turn ON: Bit#12
1484   E4A2             
1484   E4A2 10 52       
1485   E4A4             			SETRAM_($00,$32)			;RAM$00=$32
1485   E4A4~            			SETRAM_($00,$32)			;RAM$00=$32
1485   E4A4~            			SETRAM_($00,$32)			;RAM$00=$32
1485   E4A4             
1485   E4A4 C0 32       
1486   E4A6             			EXE_($08)				;CPU Execute Next 8 Bytes
1486   E4A6~            			EXE_($08)				;CPU Execute Next 8 Bytes
1486   E4A6~            			EXE_($08)				;CPU Execute Next 8 Bytes
1486   E4A6             
1486   E4A6 4A          
1486   E4A7             
1487   E4A7 97 AA       			staa	thread_priority
1488   E4A9 CE DD 5E    			ldx	#gj_24
1489   E4AC BD EA 78    			jsr	newthread_sp
1490   E4AF             gb_18			KILL_					;Remove This Thread
1490   E4AF 03          
1491   E4B0             
1492   E4B0 5A F8 0F 13 sw_ball_shooter	.db $5A,$F8,$0F,$13		;BEQ_SW#0F to gb_12
1493   E4B4             			SSND_($14)				;Sound #14
1493   E4B4             
1493   E4B4 F4          
1493   E4B5~            			SSND_($14)				;Sound #14
1493   E4B5~            			SSND_($14)				;Sound #14
1493   E4B5~            			SSND_($14)				;Sound #14
1493   E4B5             
1494   E4B5             			PRI_($20)				;Priority=#20
1494   E4B5 52 20       
1495   E4B7             			SLEEP_(240)
1495   E4B7~            			SLEEP_(240)
1495   E4B7~            			SLEEP_(240)
1495   E4B7             
1495   E4B7 53 F0       
1495   E4B9             
1496   E4B9             			SLEEP_(64)
1496   E4B9~            			SLEEP_(64)
1496   E4B9~            			SLEEP_(64)
1496   E4B9             
1496   E4B9 53 40       
1496   E4BB             
1497   E4BB             			SOL_($F0)				;Turn ON Sol#0:dt_b_reset
1497   E4BB 31 F0       
1498   E4BD 5B 40 06    			.db $5B,$40,$06			;BNE_BIT#00 to gb_13
1499   E4C0             			BE19_($13)				;Effect: Range #13
1499   E4C0             
1499   E4C0 19 13       
1500   E4C2             			BE29_($13)				;Effect: Range #13
1500   E4C2             
1500   E4C2 29 13       
1501   E4C4             			JSRDR_(gj_0E)		
1501   E4C4~            			JSRDR_(gj_0E)		
1501   E4C4~            			JSRDR_(gj_0E)		
1501   E4C4             
1501   E4C4~            			JSRDR_(gj_0E)		
1501   E4C4~            			JSRDR_(gj_0E)		
1501   E4C4             
1501   E4C4             
1501   E4C4 A0          
1501   E4C5 07          
1502   E4C6             gb_13			KILL_					;Remove This Thread
1502   E4C6 03          
1503   E4C7             
1504   E4C7             gb_12			REMTHREADS_($F8,$20)		;Remove Multiple Threads Based on Priority
1504   E4C7 55 F8 20    
1505   E4CA             			SOL_($10)				;Turn ON Sol#0:dt_b_reset
1505   E4CA 31 10       
1506   E4CC             			KILL_					;Remove This Thread
1506   E4CC 03          
1507   E4CD             
1508   E4CD CE E3 B8    gj_0E			ldx	#gj_21
1509   E4D0 BD EA C4    			jsr	newthread_06
1510   E4D3 CE E4 1D    			ldx	#gj_22
1511   E4D6 7E EA C4    			jmp	newthread_06
1512   E4D9             sw_left_bull	BE1A_($0B)				;Effect: Range #0B
1512   E4D9             
1512   E4D9 1A 0B       
1513   E4DB             gj_10			POINTS_(1,100)			;100 Points
1513   E4DB 42          
1513   E4DC             
1513   E4DC~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DC~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DC             
1513   E4DC~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DC~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DC             
1513   E4DC             
1513   E4DC 0A          
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD~            gj_10			POINTS_(1,100)			;100 Points
1513   E4DD             
1513   E4DD             
1513   E4DD             
1514   E4DD             			SSND_($06)				;Sound #06
1514   E4DD             
1514   E4DD E6          
1514   E4DE~            			SSND_($06)				;Sound #06
1514   E4DE~            			SSND_($06)				;Sound #06
1514   E4DE~            			SSND_($06)				;Sound #06
1514   E4DE             
1515   E4DE 5AFA272C02  			.db $5A,$FA,$27,$2C,$02		;BEQ_(LAMP#2C(rbull_10x) && LAMP#27(lbull_25k)) to gb_1B
1516   E4E3             			BITOFF_($47)			;Turn OFF: Bit#07
1516   E4E3             
1516   E4E3 11 47       
1517   E4E5             gb_1B			KILL_					;Remove This Thread
1517   E4E5 03          
1518   E4E6             
1519   E4E6             sw_right_bull	BE1A_($0C)				;Effect: Range #0C
1519   E4E6             
1519   E4E6 1A 0C       
1520   E4E8             			JMPR_(gj_10)			
1520   E4E8~            			JMPR_(gj_10)			
1520   E4E8~            			JMPR_(gj_10)			
1520   E4E8             
1520   E4E8~            			JMPR_(gj_10)			
1520   E4E8~            			JMPR_(gj_10)			
1520   E4E8             
1520   E4E8             
1520   E4E8 8F          
1520   E4E9 F1          
1521   E4EA             sw_upper_right_bull	SETRAM_($00,$0C)		;RAM$00=$0C
1521   E4EA~            sw_upper_right_bull	SETRAM_($00,$0C)		;RAM$00=$0C
1521   E4EA~            sw_upper_right_bull	SETRAM_($00,$0C)		;RAM$00=$0C
1521   E4EA             
1521   E4EA C0 0C       
1522   E4EC             			SSND_($19)				;Sound #19
1522   E4EC             
1522   E4EC F9          
1522   E4ED~            			SSND_($19)				;Sound #19
1522   E4ED~            			SSND_($19)				;Sound #19
1522   E4ED~            			SSND_($19)				;Sound #19
1522   E4ED             
1523   E4ED 5A F5 06 2A 			.db $5A,$F5,$06,$2A		;BEQ_RangeOFF#06 to gb_1C
1524   E4F1             			SETRAM_($00,$24)			;RAM$00=$24
1524   E4F1~            			SETRAM_($00,$24)			;RAM$00=$24
1524   E4F1~            			SETRAM_($00,$24)			;RAM$00=$24
1524   E4F1             
1524   E4F1 C0 24       
1525   E4F3 5B 22 0F    			.db $5B,$22,$0F			;BNE_LAMP#22(urbull_eb) to gb_1D
1526   E4F6             			EB_					;Award Extra Ball
1526   E4F6 06          
1527   E4F7             			EXE_($06)				;CPU Execute Next 6 Bytes
1527   E4F7~            			EXE_($06)				;CPU Execute Next 6 Bytes
1527   E4F7~            			EXE_($06)				;CPU Execute Next 6 Bytes
1527   E4F7             
1527   E4F7 48          
1527   E4F8             
1528   E4F8 CE DD 1C    			ldx	#gj_27
1529   E4FB BD EA C4    			jsr	newthread_06
1530   E4FE 5A 19 02    			.db $5A,$19,$02			;BEQ_LAMP#19(shootagain_pf) to gb_1E
1531   E501             			POINTS_(1,100000)			;100000 Points
1531   E501 42          
1531   E502             
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502             
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502             
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502             
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502             
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502~            			POINTS_(1,100000)			;100000 Points
1531   E502             
1531   E502             
1531   E502 0D          
1531   E503~            			POINTS_(1,100000)			;100000 Points
1531   E503~            			POINTS_(1,100000)			;100000 Points
1531   E503             
1531   E503             
1531   E503             
1531   E503             
1531   E503             
1531   E503             
1532   E503             gb_1E			BE19_($06)				;Effect: Range #06
1532   E503             
1532   E503 19 06       
1533   E505 5A 21 02    gb_1D			.db $5A,$21,$02			;BEQ_LAMP#21(urbull_40k) to gb_1F
1534   E508             			SETRAM_($00,$14)			;RAM$00=$14
1534   E508~            			SETRAM_($00,$14)			;RAM$00=$14
1534   E508~            			SETRAM_($00,$14)			;RAM$00=$14
1534   E508             
1534   E508 C0 14       
1535   E50A 5AFAFDD100F3gb_1F			.db $5A,$FA,$FD,$D1,$00,$F3,$19,$02	;BEQ_((!LAMP#19(shootagain_pf)) && ADJ#1>=#0) to gb_20
1535   E510 1902
1536   E512             			BE19_($06)				;Effect: Range #06
1536   E512             
1536   E512 19 06       
1537   E514             gb_20			EXE_($06)				;CPU Execute Next 6 Bytes
1537   E514~            gb_20			EXE_($06)				;CPU Execute Next 6 Bytes
1537   E514~            gb_20			EXE_($06)				;CPU Execute Next 6 Bytes
1537   E514             
1537   E514 48          
1537   E515             
1538   E515 CE D8 91    			ldx	#gj_28
1539   E518 BD EA C4    			jsr	newthread_06
1540   E51B             gb_1C			JSRR_(gj_08)			
1540   E51B~            gb_1C			JSRR_(gj_08)			
1540   E51B~            gb_1C			JSRR_(gj_08)			
1540   E51B             
1540   E51B~            gb_1C			JSRR_(gj_08)			
1540   E51B~            gb_1C			JSRR_(gj_08)			
1540   E51B             
1540   E51B             
1540   E51B 90          
1540   E51C 01          
1541   E51D             			KILL_					;Remove This Thread
1541   E51D 03          
1542   E51E             
1543   E51E 5BFB614013  gj_08			.db $5B,$FB,$61,$40,$13		;BNE_(BIT#00 || BIT#21) to gb_33
1544   E523             			CPUX_					;Resume CPU Execution
1544   E523 04          
1545   E524 37          			pshb	
1546   E525 36          			psha	
1547   E526 84 F8       			anda	#$F8
1548   E528 16          			tab	
1549   E529 BD E2 85    			jsr	gj_0C
1550   E52C 4D          			tsta	
1551   E52D 32          			pula	
1552   E52E 26 01       			bne	gb_53
1553   E530 58          			aslb	
1554   E531 1B          gb_53			aba	
1555   E532 33          			pulb	
1556   E533 BD F3 AB    			jsr	macro_start
1557   E536             gb_33			JSRD_(score_main)			
1557   E536 57          
1557   E537 EC 05       
1558   E539             			MRTS_					;Macro RTS, Save MRA,MRB
1558   E539 02          
1559   E53A             
1560   E53A             sw_spinner		PRI_($11)				;Priority=#11
1560   E53A 52 11       
1561   E53C             			REMTHREADS_($F8,$10)		;Remove Multiple Threads Based on Priority
1561   E53C 55 F8 10    
1562   E53F 5B F4 18 0A 			.db $5B,$F4,$18,$0A		;BNE_LampOn/Flash#18 to gb_19
1563   E543             			POINTS_(1,1000)			;1000 Points
1563   E543 42          
1563   E544             
1563   E544~            			POINTS_(1,1000)			;1000 Points
1563   E544~            			POINTS_(1,1000)			;1000 Points
1563   E544             
1563   E544~            			POINTS_(1,1000)			;1000 Points
1563   E544~            			POINTS_(1,1000)			;1000 Points
1563   E544             
1563   E544~            			POINTS_(1,1000)			;1000 Points
1563   E544~            			POINTS_(1,1000)			;1000 Points
1563   E544             
1563   E544             
1563   E544 0B          
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545~            			POINTS_(1,1000)			;1000 Points
1563   E545             
1563   E545             
1563   E545             
1563   E545             
1564   E545             			SSND_($06)				;Sound #06
1564   E545             
1564   E545 E6          
1564   E546~            			SSND_($06)				;Sound #06
1564   E546~            			SSND_($06)				;Sound #06
1564   E546~            			SSND_($06)				;Sound #06
1564   E546             
1565   E546             			BITON_($18)				;Turn ON: Lamp#18(lamp_spinner)
1565   E546             
1565   E546 10 18       
1566   E548             			SLEEP_(64)
1566   E548~            			SLEEP_(64)
1566   E548~            			SLEEP_(64)
1566   E548             
1566   E548 53 40       
1566   E54A             
1567   E54A             			BITOFF_($18)			;Turn OFF: Lamp#18(lamp_spinner)
1567   E54A             
1567   E54A 11 18       
1568   E54C             			KILL_					;Remove This Thread
1568   E54C 03          
1569   E54D             
1570   E54D             gb_19			POINTS_(1,100)			;100 Points
1570   E54D 42          
1570   E54E             
1570   E54E~            gb_19			POINTS_(1,100)			;100 Points
1570   E54E~            gb_19			POINTS_(1,100)			;100 Points
1570   E54E             
1570   E54E~            gb_19			POINTS_(1,100)			;100 Points
1570   E54E~            gb_19			POINTS_(1,100)			;100 Points
1570   E54E             
1570   E54E             
1570   E54E 0A          
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F~            gb_19			POINTS_(1,100)			;100 Points
1570   E54F             
1570   E54F             
1570   E54F             
1571   E54F             			SSND_($07)				;Sound #07
1571   E54F             
1571   E54F E7          
1571   E550~            			SSND_($07)				;Sound #07
1571   E550~            			SSND_($07)				;Sound #07
1571   E550~            			SSND_($07)				;Sound #07
1571   E550             
1572   E550             			KILL_					;Remove This Thread
1572   E550 03          
1573   E551             
1574   E551 CE E5 5D    gj_09			ldx	#gj_1C
1575   E554 36          			psha	
1576   E555 86 01       			ldaa	#$01
1577   E557 97 AA       			staa	thread_priority
1578   E559 32          			pula	
1579   E55A 7E EA 78    			jmp	newthread_sp
1580   E55D BD F3 AB    gj_1C			jsr	macro_start
1581   E560             gb_79			SLEEP_(4)
1581   E560             
1581   E560 74          
1581   E561~            gb_79			SLEEP_(4)
1581   E561~            gb_79			SLEEP_(4)
1581   E561             
1582   E561 5AFBFB555458			.db $5A,$FB,$FB,$55,$54,$58,$F8	;BEQ_(BIT#18 || (BIT#14 || BIT#15)) to gb_79
1582   E567 F8
1583   E568             			BITON_($55)				;Turn ON: Bit#15
1583   E568             
1583   E568 10 55       
1584   E56A 5A 3D 19    			.db $5A,$3D,$19			;BEQ_BIT#FFFFFFFD to gb_7A
1585   E56D             			BE29_($C1,$01)			;Effect: Range #C1 Range #01
1585   E56D             
1585   E56D 29 C1 01    
1586   E570             			BE2A_($41)				;Effect: Range #41
1586   E570             
1586   E570 2A 41       
1587   E572             gb_7B			SLEEP_(4)
1587   E572             
1587   E572 74          
1587   E573~            gb_7B			SLEEP_(4)
1587   E573~            gb_7B			SLEEP_(4)
1587   E573             
1588   E573             			BE2E_($41)				;Effect: Range #41
1588   E573             
1588   E573 2E 41       
1589   E575             			EXE_($04)				;CPU Execute Next 4 Bytes
1589   E575~            			EXE_($04)				;CPU Execute Next 4 Bytes
1589   E575~            			EXE_($04)				;CPU Execute Next 4 Bytes
1589   E575             
1589   E575 46          
1589   E576             
1590   E576 96 27       			ldaa	$27
1591   E578 84 20       			anda	#$20
1592   E57A 5AFCE000F3  			.db $5A,$FC,$E0,$00,$F3		;BEQ_RAM$00==#0 to gb_7B
1593   E57F             			BE29_($41)				;Effect: Range #41
1593   E57F             
1593   E57F 29 41       
1594   E581             			BE1A_($01)				;Effect: Range #01
1594   E581             
1594   E581 1A 01       
1595   E583             gb_90			BITOFF_($55)			;Turn OFF: Bit#15
1595   E583             
1595   E583 11 55       
1596   E585             			KILL_					;Remove This Thread
1596   E585 03          
1597   E586             
1598   E586 5B 3F 09    gb_7A			.db $5B,$3F,$09			;BNE_BIT#FFFFFFFF to gb_8F
1599   E589             			POINTS_(1,1000)			;1000 Points
1599   E589 42          
1599   E58A             
1599   E58A~            			POINTS_(1,1000)			;1000 Points
1599   E58A~            			POINTS_(1,1000)			;1000 Points
1599   E58A             
1599   E58A~            			POINTS_(1,1000)			;1000 Points
1599   E58A~            			POINTS_(1,1000)			;1000 Points
1599   E58A             
1599   E58A~            			POINTS_(1,1000)			;1000 Points
1599   E58A~            			POINTS_(1,1000)			;1000 Points
1599   E58A             
1599   E58A             
1599   E58A 0B          
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B~            			POINTS_(1,1000)			;1000 Points
1599   E58B             
1599   E58B             
1599   E58B             
1599   E58B             
1600   E58B 5A 53 F5    			.db $5A,$53,$F5			;BEQ_BIT#13 to gb_90
1601   E58E             			JSRR_(gj_3B)			
1601   E58E~            			JSRR_(gj_3B)			
1601   E58E~            			JSRR_(gj_3B)			
1601   E58E             
1601   E58E~            			JSRR_(gj_3B)			
1601   E58E~            			JSRR_(gj_3B)			
1601   E58E             
1601   E58E             
1601   E58E 90          
1601   E58F 80          
1602   E590             			JMPR_(gb_90)			
1602   E590~            			JMPR_(gb_90)			
1602   E590~            			JMPR_(gb_90)			
1602   E590             
1602   E590~            			JMPR_(gb_90)			
1602   E590~            			JMPR_(gb_90)			
1602   E590             
1602   E590             
1602   E590 8F          
1602   E591 F1          
1603   E592             gb_8F			SLEEP_(5)
1603   E592             
1603   E592 75          
1603   E593~            gb_8F			SLEEP_(5)
1603   E593~            gb_8F			SLEEP_(5)
1603   E593             
1604   E593             			BE1C_($01)				;Effect: Range #01
1604   E593             
1604   E593 1C 01       
1605   E595 5B F5 01 F9 			.db $5B,$F5,$01,$F9		;BNE_RangeOFF#01 to gb_8F
1606   E599 5B 3E 04    			.db $5B,$3E,$04			;BNE_BIT#FFFFFFFE to gb_A1
1607   E59C             			BE1E_($0D)				;Effect: Range #0D
1607   E59C             
1607   E59C 1E 0D       
1608   E59E             			JMPR_(gb_90)			
1608   E59E~            			JMPR_(gb_90)			
1608   E59E~            			JMPR_(gb_90)			
1608   E59E             
1608   E59E~            			JMPR_(gb_90)			
1608   E59E~            			JMPR_(gb_90)			
1608   E59E             
1608   E59E             
1608   E59E 8F          
1608   E59F E3          
1609   E5A0             gb_A1			BITON_($3E)				;Turn ON: Lamp#3E(bonus_10)
1609   E5A0             
1609   E5A0 10 3E       
1610   E5A2             			JMPR_(gb_90)			
1610   E5A2~            			JMPR_(gb_90)			
1610   E5A2~            			JMPR_(gb_90)			
1610   E5A2             
1610   E5A2~            			JMPR_(gb_90)			
1610   E5A2~            			JMPR_(gb_90)			
1610   E5A2             
1610   E5A2             
1610   E5A2 8F          
1610   E5A3 DF          
1611   E5A4             gj_0A			SLEEP_(10)
1611   E5A4             
1611   E5A4 7A          
1611   E5A5~            gj_0A			SLEEP_(10)
1611   E5A5~            gj_0A			SLEEP_(10)
1611   E5A5             
1612   E5A5 5AFB5558FA  			.db $5A,$FB,$55,$58,$FA		;BEQ_(BIT#18 || BIT#15) to gj_0A
1613   E5AA             			SSND_($12)				;Sound #12
1613   E5AA             
1613   E5AA F2          
1613   E5AB~            			SSND_($12)				;Sound #12
1613   E5AB~            			SSND_($12)				;Sound #12
1613   E5AB~            			SSND_($12)				;Sound #12
1613   E5AB             
1614   E5AB             			BITON_($54)				;Turn ON: Bit#14
1614   E5AB             
1614   E5AB 10 54       
1615   E5AD             			REMTHREADS_($FF,$60)		;Remove Multiple Threads Based on Priority
1615   E5AD 55 FF 60    
1616   E5B0             			SETRAM_($00,$00)			;RAM$00=$00
1616   E5B0~            			SETRAM_($00,$00)			;RAM$00=$00
1616   E5B0~            			SETRAM_($00,$00)			;RAM$00=$00
1616   E5B0             
1616   E5B0 C0 00       
1617   E5B2             			JSRD_($F302)			
1617   E5B2 57          
1617   E5B3 F3 02       
1618   E5B5             			BE28_($40)				;Effect: Range #40
1618   E5B5             
1618   E5B5 28 40       
1619   E5B7             			SETRAM_($00,$08)			;RAM$00=$08
1619   E5B7~            			SETRAM_($00,$08)			;RAM$00=$08
1619   E5B7~            			SETRAM_($00,$08)			;RAM$00=$08
1619   E5B7             
1619   E5B7 C0 08       
1620   E5B9 5A F5 02 0A 			.db $5A,$F5,$02,$0A		;BEQ_RangeOFF#02 to gb_34
1621   E5BD             gb_35			ADDRAM_($00,$08)			;RAM$00+=$08
1621   E5BD~            gb_35			ADDRAM_($00,$08)			;RAM$00+=$08
1621   E5BD~            gb_35			ADDRAM_($00,$08)			;RAM$00+=$08
1621   E5BD             
1621   E5BD B0 08       
1622   E5BF             			BE2C_($02)				;Effect: Range #02
1622   E5BF             
1622   E5BF 2C 02       
1623   E5C1             			SSND_($15)				;Sound #15
1623   E5C1             
1623   E5C1 F5          
1623   E5C2~            			SSND_($15)				;Sound #15
1623   E5C2~            			SSND_($15)				;Sound #15
1623   E5C2~            			SSND_($15)				;Sound #15
1623   E5C2             
1624   E5C2             			SLEEP_(15)
1624   E5C2             
1624   E5C2 7F          
1624   E5C3~            			SLEEP_(15)
1624   E5C3~            			SLEEP_(15)
1624   E5C3             
1625   E5C3 5B F5 82 F6 			.db $5B,$F5,$82,$F6		;BNE_RangeOFF#82 to gb_35
1626   E5C7 5A F5 03 0C gb_34			.db $5A,$F5,$03,$0C		;BEQ_RangeOFF#03 to gb_36
1627   E5CB             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1627   E5CB             
1627   E5CB 51 10       
1627   E5CD~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1627   E5CD~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1627   E5CD             
1628   E5CD             gb_37			RAMADD_($0,$1)			;RAM,0 += RAM,1
1628   E5CD             
1628   E5CD 50 01       
1628   E5CF~            gb_37			RAMADD_($0,$1)			;RAM,0 += RAM,1
1628   E5CF~            gb_37			RAMADD_($0,$1)			;RAM,0 += RAM,1
1628   E5CF             
1629   E5CF             			BE2C_($03)				;Effect: Range #03
1629   E5CF             
1629   E5CF 2C 03       
1630   E5D1             			SSND_($15)				;Sound #15
1630   E5D1             
1630   E5D1 F5          
1630   E5D2~            			SSND_($15)				;Sound #15
1630   E5D2~            			SSND_($15)				;Sound #15
1630   E5D2~            			SSND_($15)				;Sound #15
1630   E5D2             
1631   E5D2             			SLEEP_(15)
1631   E5D2             
1631   E5D2 7F          
1631   E5D3~            			SLEEP_(15)
1631   E5D3~            			SLEEP_(15)
1631   E5D3             
1632   E5D3 5B F5 83 F6 			.db $5B,$F5,$83,$F6		;BNE_RangeOFF#83 to gb_37
1633   E5D7             gb_36			EXE_($02)				;CPU Execute Next 2 Bytes
1633   E5D7~            gb_36			EXE_($02)				;CPU Execute Next 2 Bytes
1633   E5D7~            gb_36			EXE_($02)				;CPU Execute Next 2 Bytes
1633   E5D7             
1633   E5D7 44          
1633   E5D8             
1634   E5D8 8A 03       			oraa	#$03
1635   E5DA             			SETRAM_($01,$0A)			;RAM$01=$0A
1635   E5DA~            			SETRAM_($01,$0A)			;RAM$01=$0A
1635   E5DA~            			SETRAM_($01,$0A)			;RAM$01=$0A
1635   E5DA             
1635   E5DA C1 0A       
1636   E5DC 5A F0 27    gj_1D			.db $5A,$F0,$27			;BEQ_TILT to gb_38
1637   E5DF 5A F5 81 11 			.db $5A,$F5,$81,$11		;BEQ_RangeOFF#81 to gb_39
1638   E5E3             			BE2C_($01)				;Effect: Range #01
1638   E5E3             
1638   E5E3 2C 01       
1639   E5E5             gj_2D			JSRD_(score_main)			
1639   E5E5 57          
1639   E5E6 EC 05       
1640   E5E8             			SSND_($11)				;Sound #11
1640   E5E8             
1640   E5E8 F1          
1640   E5E9~            			SSND_($11)				;Sound #11
1640   E5E9~            			SSND_($11)				;Sound #11
1640   E5E9~            			SSND_($11)				;Sound #11
1640   E5E9             
1641   E5E9             			SSND_($11)				;Sound #11
1641   E5E9             
1641   E5E9 F1          
1641   E5EA~            			SSND_($11)				;Sound #11
1641   E5EA~            			SSND_($11)				;Sound #11
1641   E5EA~            			SSND_($11)				;Sound #11
1641   E5EA             
1642   E5EA 5AFCE10202  			.db $5A,$FC,$E1,$02,$02		;BEQ_RAM$01==#2 to gb_3A
1643   E5EF             			ADDRAM_($01,$FF)			;RAM$01+=$FF
1643   E5EF~            			ADDRAM_($01,$FF)			;RAM$01+=$FF
1643   E5EF~            			ADDRAM_($01,$FF)			;RAM$01+=$FF
1643   E5EF             
1643   E5EF B1 FF       
1644   E5F1 61          gb_3A			SLEEPI_($1)				;Delay RAM$01
1645   E5F2             			JMPR_(gj_1D)			
1645   E5F2~            			JMPR_(gj_1D)			
1645   E5F2~            			JMPR_(gj_1D)			
1645   E5F2             
1645   E5F2~            			JMPR_(gj_1D)			
1645   E5F2~            			JMPR_(gj_1D)			
1645   E5F2             
1645   E5F2             
1645   E5F2 8F          
1645   E5F3 E8          
1646   E5F4 5A F5 8D 0E gb_39			.db $5A,$F5,$8D,$0E		;BEQ_RangeOFF#8D to gb_38
1647   E5F8             			BE28_($01)				;Effect: Range #01
1647   E5F8             
1647   E5F8 28 01       
1648   E5FA 5B F7 3E 04 			.db $5B,$F7,$3E,$04		;BNE_BIT#3E to gb_54
1649   E5FE             			BITOFF2_($7E)			;Turn OFF: Lamp#3E(bonus_10)
1649   E5FE             
1649   E5FE 21 7E       
1650   E600             			JMPR_(gj_2D)			
1650   E600~            			JMPR_(gj_2D)			
1650   E600~            			JMPR_(gj_2D)			
1650   E600             
1650   E600~            			JMPR_(gj_2D)			
1650   E600~            			JMPR_(gj_2D)			
1650   E600             
1650   E600             
1650   E600 8F          
1650   E601 E3          
1651   E602             gb_54			BE2D_($0D)				;Effect: Range #0D
1651   E602             
1651   E602 2D 0D       
1652   E604             			JMPR_(gj_2D)			
1652   E604~            			JMPR_(gj_2D)			
1652   E604~            			JMPR_(gj_2D)			
1652   E604             
1652   E604~            			JMPR_(gj_2D)			
1652   E604~            			JMPR_(gj_2D)			
1652   E604             
1652   E604             
1652   E604 8F          
1652   E605 DF          
1653   E606             gb_38			BE29_($40)				;Effect: Range #40
1653   E606             
1653   E606 29 40       
1654   E608             			BITOFF_($D4,$53)			;Turn OFF: Bit#14, Bit#13
1654   E608             
1654   E608 11 D4 53    
1655   E60B             			SSND_($12)				;Sound #12
1655   E60B             
1655   E60B F2          
1655   E60C~            			SSND_($12)				;Sound #12
1655   E60C~            			SSND_($12)				;Sound #12
1655   E60C~            			SSND_($12)				;Sound #12
1655   E60C             
1656   E60C             			MRTS_					;Macro RTS, Save MRA,MRB
1656   E60C 02          
1657   E60D             
1658   E60D 5B 53 0D    gj_39			.db $5B,$53,$0D			;BNE_BIT#13 to gb_99
1659   E610             gj_3B			EXE_($0C)				;CPU Execute Next 12 Bytes
1659   E610~            gj_3B			EXE_($0C)				;CPU Execute Next 12 Bytes
1659   E610~            gj_3B			EXE_($0C)				;CPU Execute Next 12 Bytes
1659   E610             
1659   E610 4E          
1659   E611             
1660   E611 36          			psha	
1661   E612 86 60       			ldaa	#$60
1662   E614 97 AA       			staa	thread_priority
1663   E616 32          			pula	
1664   E617 CE D8 00    			ldx	#gj_02
1665   E61A BD EA 78    			jsr	newthread_sp
1666   E61D             gb_99			MRTS_					;Macro RTS, Save MRA,MRB
1666   E61D 02          
1667   E61E             
1668   E61E             sw_dt_a1
1669   E61E             sw_dt_a2
1670   E61E             sw_dt_a3
1671   E61E             sw_dt_b
1672   E61E             sw_dt_c
1673   E61E             sw_dt_o
1674   E61E             sw_dt_r
1675   E61E 5A 45 1B    sw_dt_rr		.db $5A,$45,$1B			;BEQ_BIT#05 to gb_21
1676   E621             			SSND_($17)				;Sound #17
1676   E621             
1676   E621 F7          
1676   E622~            			SSND_($17)				;Sound #17
1676   E622~            			SSND_($17)				;Sound #17
1676   E622~            			SSND_($17)				;Sound #17
1676   E622             
1677   E622             			POINTS_(1,1000)			;1000 Points
1677   E622 42          
1677   E623             
1677   E623~            			POINTS_(1,1000)			;1000 Points
1677   E623~            			POINTS_(1,1000)			;1000 Points
1677   E623             
1677   E623~            			POINTS_(1,1000)			;1000 Points
1677   E623~            			POINTS_(1,1000)			;1000 Points
1677   E623             
1677   E623~            			POINTS_(1,1000)			;1000 Points
1677   E623~            			POINTS_(1,1000)			;1000 Points
1677   E623             
1677   E623             
1677   E623 0B          
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624~            			POINTS_(1,1000)			;1000 Points
1677   E624             
1677   E624             
1677   E624             
1677   E624             
1678   E624             			ADDRAM_($00,$20)			;RAM$00+=$20
1678   E624~            			ADDRAM_($00,$20)			;RAM$00+=$20
1678   E624~            			ADDRAM_($00,$20)			;RAM$00+=$20
1678   E624             
1678   E624 B0 20       
1679   E626             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1679   E626             
1679   E626 51 10       
1679   E628~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1679   E628~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1679   E628             
1680   E628             			ADDRAM_($01,$FF)			;RAM$01+=$FF
1680   E628~            			ADDRAM_($01,$FF)			;RAM$01+=$FF
1680   E628~            			ADDRAM_($01,$FF)			;RAM$01+=$FF
1680   E628             
1680   E628 B1 FF       
1681   E62A 5AFBFBFCE048			.db $5A,$FB,$FB,$FC,$E0,$48,$FC,$E0,$4B,$E1,$08;BEQ_(RAM$01 || (RAM$00==#75 || RAM$00==#72)) to gb_22
1681   E630 FCE04BE108
1682   E635             			SSND_($0E)				;Sound #0E
1682   E635             
1682   E635 EE          
1682   E636~            			SSND_($0E)				;Sound #0E
1682   E636~            			SSND_($0E)				;Sound #0E
1682   E636~            			SSND_($0E)				;Sound #0E
1682   E636             
1683   E636             			EXE_($05)				;CPU Execute Next 5 Bytes
1683   E636~            			EXE_($05)				;CPU Execute Next 5 Bytes
1683   E636~            			EXE_($05)				;CPU Execute Next 5 Bytes
1683   E636             
1683   E636 47          
1683   E637             
1684   E637 80 08       			suba	#$08
1685   E639 BD EB 23    			jsr	solbuf
1686   E63C             gb_21			KILL_					;Remove This Thread
1686   E63C 03          
1687   E63D             
1688   E63D             gb_22			EXE_($03)				;CPU Execute Next 3 Bytes
1688   E63D~            gb_22			EXE_($03)				;CPU Execute Next 3 Bytes
1688   E63D~            gb_22			EXE_($03)				;CPU Execute Next 3 Bytes
1688   E63D             
1688   E63D 45          
1688   E63E             
1689   E63E 80 40       			suba	#$40
1690   E640 5C          			incb	
1691   E641             			BITONP_($80,$01)			;Turn ON Lamp/Bit @RAM:80,80
1691   E641             
1691   E641 14 80 01    
1692   E644 5AFDE00A15  			.db $5A,$FD,$E0,$0A,$15		;BEQ_RAM$00>=#10 to gb_43
1693   E649 5B F6 0F EF 			.db $5B,$F6,$0F,$EF		;BNE_RangeON#0F to gb_21
1694   E64D             			BITON_($06)				;Turn ON: Lamp#06(barr_dt_bank)
1694   E64D             
1694   E64D 10 06       
1695   E64F 5AFB614002  			.db $5A,$FB,$61,$40,$02		;BEQ_(BIT#00 || BIT#21) to gb_44
1696   E654             			BITON_($1D)				;Turn ON: Lamp#1D(lower_eject_lock)
1696   E654             
1696   E654 10 1D       
1697   E656             gb_44			SOL_($42,$41,$40)			;Turn ON Sol#2:dt_rr_reset Sol#2:dt_rr_reset Sol#2:dt_rr_reset
1697   E656 33 42 41 40 
1698   E65A             			BE19_($0F)				;Effect: Range #0F
1698   E65A             
1698   E65A 19 0F       
1699   E65C             			JMPR_(gj_29)			
1699   E65C~            			JMPR_(gj_29)			
1699   E65C~            			JMPR_(gj_29)			
1699   E65C             
1699   E65C~            			JMPR_(gj_29)			
1699   E65C~            			JMPR_(gj_29)			
1699   E65C             
1699   E65C             
1699   E65C 80          
1699   E65D 15          
1700   E65E 5B F6 10 DA gb_43			.db $5B,$F6,$10,$DA		;BNE_RangeON#10 to gb_21
1701   E662             			BITON_($07)				;Turn ON: Lamp#07(acora_dt_bank)
1701   E662             
1701   E662 10 07       
1702   E664 5AFB614002  			.db $5A,$FB,$61,$40,$02		;BEQ_(BIT#00 || BIT#21) to gb_5F
1703   E669             			BITON_($1E)				;Turn ON: Lamp#1E(upper_eject_lock)
1703   E669             
1703   E669 10 1E       
1704   E66B             gb_5F			SOL_($47,$46,$45,$44,$43)	;Turn ON Sol#7:dt_a3_reset Sol#7:dt_a3_reset Sol#7:dt_a3_reset Sol#7:dt_a3_reset Sol#7:dt_a3_reset
1704   E66B 354746454443
1705   E671             			BE19_($10)				;Effect: Range #10
1705   E671             
1705   E671 19 10       
1706   E673             gj_29			BE1A_($02)				;Effect: Range #02
1706   E673             
1706   E673 1A 02       
1707   E675             			EXE_($06)				;CPU Execute Next 6 Bytes
1707   E675~            			EXE_($06)				;CPU Execute Next 6 Bytes
1707   E675~            			EXE_($06)				;CPU Execute Next 6 Bytes
1707   E675             
1707   E675 48          
1707   E676             
1708   E676 CE D8 EF    			ldx	#gj_15
1709   E679 BD EA C4    			jsr	newthread_06
1710   E67C 5BFA060717  			.db $5B,$FA,$06,$07,$17		;BNE_(LAMP#07(acora_dt_bank) && LAMP#06(barr_dt_bank)) to gb_60
1711   E681             			BE1A_($03)				;Effect: Range #03
1711   E681             
1711   E681 1A 03       
1712   E683 5BFAF603F35A			.db $5B,$FA,$F6,$03,$F3,$5A,$04	;BNE_((!BIT#1A) && RangeON#03) to gb_61
1712   E689 04
1713   E68A             			BITON_($5A)				;Turn ON: Bit#1A
1713   E68A             
1713   E68A 10 5A       
1714   E68C             			BE18_($07)				;Effect: Range #07
1714   E68C             
1714   E68C 18 07       
1715   E68E             gb_61			BITOFF_($86,$07)			;Turn OFF: Lamp#06(barr_dt_bank), Lamp#07(acora_dt_bank)
1715   E68E             
1715   E68E 11 86 07    
1716   E691             			EXE_($06)				;CPU Execute Next 6 Bytes
1716   E691~            			EXE_($06)				;CPU Execute Next 6 Bytes
1716   E691~            			EXE_($06)				;CPU Execute Next 6 Bytes
1716   E691             
1716   E691 48          
1716   E692             
1717   E692 CE D8 B6    			ldx	#gj_13
1718   E695 BD EA C4    			jsr	newthread_06
1719   E698             gb_60			BITFL_($18)				;Flash: Lamp#18(lamp_spinner)
1719   E698             
1719   E698 13 18       
1720   E69A             			REMTHREADS_($FF,$10)		;Remove Multiple Threads Based on Priority
1720   E69A 55 FF 10    
1721   E69D             			PRI_($10)				;Priority=#10
1721   E69D 52 10       
1722   E69F             			SETRAM_($00,$0A)			;RAM$00=$0A
1722   E69F~            			SETRAM_($00,$0A)			;RAM$00=$0A
1722   E69F~            			SETRAM_($00,$0A)			;RAM$00=$0A
1722   E69F             
1722   E69F C0 0A       
1723   E6A1             gb_62			SLEEP_(57)
1723   E6A1~            gb_62			SLEEP_(57)
1723   E6A1~            gb_62			SLEEP_(57)
1723   E6A1             
1723   E6A1 53 39       
1723   E6A3             
1724   E6A3             			ADDRAM_($00,$FF)			;RAM$00+=$FF
1724   E6A3~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1724   E6A3~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1724   E6A3             
1724   E6A3 B0 FF       
1725   E6A5 5BFCE000F7  			.db $5B,$FC,$E0,$00,$F7		;BNE_RAM$00==#0 to gb_62
1726   E6AA             			BITOFF_($18)			;Turn OFF: Lamp#18(lamp_spinner)
1726   E6AA             
1726   E6AA 11 18       
1727   E6AC             			KILL_					;Remove This Thread
1727   E6AC 03          
1728   E6AD             
1729   E6AD 5B F5 0B 04 sw_right_turnaround	.db $5B,$F5,$0B,$04	;BNE_RangeOFF#0B to gb_1A
1730   E6B1             			SETRAM_($00,$13)			;RAM$00=$13
1730   E6B1~            			SETRAM_($00,$13)			;RAM$00=$13
1730   E6B1~            			SETRAM_($00,$13)			;RAM$00=$13
1730   E6B1             
1730   E6B1 C0 13       
1731   E6B3             			JMPR_(gj_0F)			
1731   E6B3~            			JMPR_(gj_0F)			
1731   E6B3~            			JMPR_(gj_0F)			
1731   E6B3             
1731   E6B3~            			JMPR_(gj_0F)			
1731   E6B3~            			JMPR_(gj_0F)			
1731   E6B3             
1731   E6B3             
1731   E6B3 80          
1731   E6B4 12          
1732   E6B5             gb_1A			SETRAM_($00,$03)			;RAM$00=$03
1732   E6B5~            gb_1A			SETRAM_($00,$03)			;RAM$00=$03
1732   E6B5~            gb_1A			SETRAM_($00,$03)			;RAM$00=$03
1732   E6B5             
1732   E6B5 C0 03       
1733   E6B7             			SETRAM_($01,$23)			;RAM$01=$23
1733   E6B7~            			SETRAM_($01,$23)			;RAM$01=$23
1733   E6B7~            			SETRAM_($01,$23)			;RAM$01=$23
1733   E6B7             
1733   E6B7 C1 23       
1734   E6B9 5AFBF3E1FDE1gj_25			.db $5A,$FB,$F3,$E1,$FD,$E1,$27,$06	;BEQ_(RAM$01>=#39 || (!RAM$01)) to gj_0F
1734   E6BF 2706
1735   E6C1             			ADDRAM_($00,$28)			;RAM$00+=$28
1735   E6C1~            			ADDRAM_($00,$28)			;RAM$00+=$28
1735   E6C1~            			ADDRAM_($00,$28)			;RAM$00+=$28
1735   E6C1             
1735   E6C1 B0 28       
1736   E6C3             			ADDRAM_($01,$01)			;RAM$01+=$01
1736   E6C3~            			ADDRAM_($01,$01)			;RAM$01+=$01
1736   E6C3~            			ADDRAM_($01,$01)			;RAM$01+=$01
1736   E6C3             
1736   E6C3 B1 01       
1737   E6C5             			JMPR_(gj_25)			
1737   E6C5~            			JMPR_(gj_25)			
1737   E6C5~            			JMPR_(gj_25)			
1737   E6C5             
1737   E6C5~            			JMPR_(gj_25)			
1737   E6C5~            			JMPR_(gj_25)			
1737   E6C5             
1737   E6C5             
1737   E6C5 8F          
1737   E6C6 F2          
1738   E6C7             gj_0F			EXE_($02)				;CPU Execute Next 2 Bytes
1738   E6C7~            gj_0F			EXE_($02)				;CPU Execute Next 2 Bytes
1738   E6C7~            gj_0F			EXE_($02)				;CPU Execute Next 2 Bytes
1738   E6C7             
1738   E6C7 44          
1738   E6C8             
1739   E6C8 36          			psha	
1740   E6C9 5F          			clrb	
1741   E6CA 5A F5 0C 14 			.db $5A,$F5,$0C,$14		;BEQ_RangeOFF#0C to gb_40
1742   E6CE             			SETRAM_($00,$2C)			;RAM$00=$2C
1742   E6CE~            			SETRAM_($00,$2C)			;RAM$00=$2C
1742   E6CE~            			SETRAM_($00,$2C)			;RAM$00=$2C
1742   E6CE             
1742   E6CE C0 2C       
1743   E6D0             			SETRAM_($01,$09)			;RAM$01=$09
1743   E6D0~            			SETRAM_($01,$09)			;RAM$01=$09
1743   E6D0~            			SETRAM_($01,$09)			;RAM$01=$09
1743   E6D0             
1743   E6D0 C1 09       
1744   E6D2 5A E0 0D    			.db $5A,$E0,$0D			;BEQ_RAM$00 to gb_40
1745   E6D5             			SETRAM_($01,$05)			;RAM$01=$05
1745   E6D5~            			SETRAM_($01,$05)			;RAM$01=$05
1745   E6D5~            			SETRAM_($01,$05)			;RAM$01=$05
1745   E6D5             
1745   E6D5 C1 05       
1746   E6D7             gb_41			EXE_($02)				;CPU Execute Next 2 Bytes
1746   E6D7~            gb_41			EXE_($02)				;CPU Execute Next 2 Bytes
1746   E6D7~            gb_41			EXE_($02)				;CPU Execute Next 2 Bytes
1746   E6D7             
1746   E6D7 44          
1746   E6D8             
1747   E6D8 4A          			deca	
1748   E6D9 5A          			decb	
1749   E6DA 5AFAF3E0FDE0			.db $5A,$FA,$F3,$E0,$FD,$E0,$28,$F5	;BEQ_(RAM$00>=#40 && (!RAM$00)) to gb_41
1749   E6E0 28F5
1750   E6E2             gb_40			EXE_($02)				;CPU Execute Next 2 Bytes
1750   E6E2~            gb_40			EXE_($02)				;CPU Execute Next 2 Bytes
1750   E6E2~            gb_40			EXE_($02)				;CPU Execute Next 2 Bytes
1750   E6E2             
1750   E6E2 44          
1750   E6E3             
1751   E6E3 32          			pula	
1752   E6E4 01          			nop	
1753   E6E5             gj_26			JSRD_(score_main)			
1753   E6E5 57          
1753   E6E6 EC 05       
1754   E6E8 5AFCE10004  			.db $5A,$FC,$E1,$00,$04		;BEQ_RAM$01==#0 to gb_42
1755   E6ED             			ADDRAM_($01,$FF)			;RAM$01+=$FF
1755   E6ED~            			ADDRAM_($01,$FF)			;RAM$01+=$FF
1755   E6ED~            			ADDRAM_($01,$FF)			;RAM$01+=$FF
1755   E6ED             
1755   E6ED B1 FF       
1756   E6EF             			JMPR_(gj_26)			
1756   E6EF~            			JMPR_(gj_26)			
1756   E6EF~            			JMPR_(gj_26)			
1756   E6EF             
1756   E6EF~            			JMPR_(gj_26)			
1756   E6EF~            			JMPR_(gj_26)			
1756   E6EF             
1756   E6EF             
1756   E6EF 8F          
1756   E6F0 F4          
1757   E6F1             gb_42			SLEEP_(5)
1757   E6F1             
1757   E6F1 75          
1757   E6F2~            gb_42			SLEEP_(5)
1757   E6F2~            gb_42			SLEEP_(5)
1757   E6F2             
1758   E6F2 5AFB4658FA  			.db $5A,$FB,$46,$58,$FA		;BEQ_(BIT#18 || BIT#06) to gb_42
1759   E6F7             			SSND_($09)				;Sound #09
1759   E6F7             
1759   E6F7 E9          
1759   E6F8~            			SSND_($09)				;Sound #09
1759   E6F8~            			SSND_($09)				;Sound #09
1759   E6F8~            			SSND_($09)				;Sound #09
1759   E6F8             
1760   E6F8             			SETRAM_($00,$12)			;RAM$00=$12
1760   E6F8~            			SETRAM_($00,$12)			;RAM$00=$12
1760   E6F8~            			SETRAM_($00,$12)			;RAM$00=$12
1760   E6F8             
1760   E6F8 C0 12       
1761   E6FA             			JSRD_($F302)			
1761   E6FA 57          
1761   E6FB F3 02       
1762   E6FD             			EXE_($02)				;CPU Execute Next 2 Bytes
1762   E6FD~            			EXE_($02)				;CPU Execute Next 2 Bytes
1762   E6FD~            			EXE_($02)				;CPU Execute Next 2 Bytes
1762   E6FD             
1762   E6FD 44          
1762   E6FE             
1763   E6FE 4F          			clra	
1764   E6FF 5F          			clrb	
1765   E700 5A F5 8B 06 gj_30			.db $5A,$F5,$8B,$06		;BEQ_RangeOFF#8B to gb_5E
1766   E704             			BE2C_($0B)				;Effect: Range #0B
1766   E704             
1766   E704 2C 0B       
1767   E706             			ADDRAM_($00,$01)			;RAM$00+=$01
1767   E706~            			ADDRAM_($00,$01)			;RAM$00+=$01
1767   E706~            			ADDRAM_($00,$01)			;RAM$00+=$01
1767   E706             
1767   E706 B0 01       
1768   E708             			JMPR_(gj_30)			
1768   E708~            			JMPR_(gj_30)			
1768   E708~            			JMPR_(gj_30)			
1768   E708             
1768   E708~            			JMPR_(gj_30)			
1768   E708~            			JMPR_(gj_30)			
1768   E708             
1768   E708             
1768   E708 8F          
1768   E709 F6          
1769   E70A 5A F5 8C 06 gb_5E			.db $5A,$F5,$8C,$06		;BEQ_RangeOFF#8C to gb_83
1770   E70E             			BE2C_($0C)				;Effect: Range #0C
1770   E70E             
1770   E70E 2C 0C       
1771   E710             			ADDRAM_($01,$01)			;RAM$01+=$01
1771   E710~            			ADDRAM_($01,$01)			;RAM$01+=$01
1771   E710~            			ADDRAM_($01,$01)			;RAM$01+=$01
1771   E710             
1771   E710 B1 01       
1772   E712             			JMPR_(gb_5E)			
1772   E712~            			JMPR_(gb_5E)			
1772   E712~            			JMPR_(gb_5E)			
1772   E712             
1772   E712~            			JMPR_(gb_5E)			
1772   E712~            			JMPR_(gb_5E)			
1772   E712             
1772   E712             
1772   E712 8F          
1772   E713 F6          
1773   E714 5A F5 12 1E gb_83			.db $5A,$F5,$12,$1E		;BEQ_RangeOFF#12 to gb_9A
1774   E718 5AFAFCE0E1F3			.db $5A,$FA,$FC,$E0,$E1,$F3,$47,$0D	;BEQ_((!BIT#07) && RAM$00==#225) to gb_9B
1774   E71E 470D
1775   E720             			BE19_($12)				;Effect: Range #12
1775   E720             
1775   E720 19 12       
1776   E722             			EXE_($06)				;CPU Execute Next 6 Bytes
1776   E722~            			EXE_($06)				;CPU Execute Next 6 Bytes
1776   E722~            			EXE_($06)				;CPU Execute Next 6 Bytes
1776   E722             
1776   E722 48          
1776   E723             
1777   E723 CE E7 7C    			ldx	#gj_14
1778   E726 BD EA C4    			jsr	newthread_06
1779   E729             			BITOFF_($47)			;Turn OFF: Bit#07
1779   E729             
1779   E729 11 47       
1780   E72B             			JMPR_(gb_9A)			
1780   E72B~            			JMPR_(gb_9A)			
1780   E72B~            			JMPR_(gb_9A)			
1780   E72B             
1780   E72B~            			JMPR_(gb_9A)			
1780   E72B~            			JMPR_(gb_9A)			
1780   E72B             
1780   E72B             
1780   E72B 80          
1780   E72C 09          
1781   E72D             gb_9B			BITON_($47)				;Turn ON: Bit#07
1781   E72D             
1781   E72D 10 47       
1782   E72F             			EXE_($06)				;CPU Execute Next 6 Bytes
1782   E72F~            			EXE_($06)				;CPU Execute Next 6 Bytes
1782   E72F~            			EXE_($06)				;CPU Execute Next 6 Bytes
1782   E72F             
1782   E72F 48          
1782   E730             
1783   E730 CE E7 3F    			ldx	#gj_12
1784   E733 BD EA C4    			jsr	newthread_06
1785   E736 5BFCD50003  gb_9A			.db $5B,$FC,$D5,$00,$03		;BNE_ADJ#5==#0 to gb_A2
1786   E73B             			BITON_($A3,$28)			;Turn ON: Lamp#23(lbull_5k), Lamp#28(rbull_2x)
1786   E73B             
1786   E73B 10 A3 28    
1787   E73E             gb_A2			KILL_					;Remove This Thread
1787   E73E 03          
1788   E73F             
1789   E73F BD F3 AB    gj_12			jsr	macro_start
1790   E742             			PRI_($32)				;Priority=#32
1790   E742 52 32       
1791   E744 5A F5 12 33 			.db $5A,$F5,$12,$33		;BEQ_RangeOFF#12 to gb_68
1792   E748             			BITON_($46)				;Turn ON: Bit#06
1792   E748             
1792   E748 10 46       
1793   E74A             			BITON2_($64)			;Turn ON: Lamp#24(lbull_10k)
1793   E74A             
1793   E74A 20 64       
1794   E74C             			BITON2_($66)			;Turn ON: Lamp#26(lbull_20k)
1794   E74C             
1794   E74C 20 66       
1795   E74E             			BITON2_($69)			;Turn ON: Lamp#29(rbull_3x)
1795   E74E             
1795   E74E 20 69       
1796   E750             			BITON2_($6B)			;Turn ON: Lamp#2B(rbull_5x)
1796   E750             
1796   E750 20 6B       
1797   E752             			SETRAM_($00,$23)			;RAM$00=$23
1797   E752~            			SETRAM_($00,$23)			;RAM$00=$23
1797   E752~            			SETRAM_($00,$23)			;RAM$00=$23
1797   E752             
1797   E752 C0 23       
1798   E754             			BE28_($52)				;Effect: Range #52
1798   E754             
1798   E754 28 52       
1799   E756 5A F1 01    gb_6A			.db $5A,$F1,$01			;BEQ_GAME to gb_69
1800   E759             			SSND_($0A)				;Sound #0A
1800   E759             
1800   E759 EA          
1800   E75A~            			SSND_($0A)				;Sound #0A
1800   E75A~            			SSND_($0A)				;Sound #0A
1800   E75A~            			SSND_($0A)				;Sound #0A
1800   E75A             
1801   E75A             gb_69			SLEEP_(4)
1801   E75A             
1801   E75A 74          
1801   E75B~            gb_69			SLEEP_(4)
1801   E75B~            gb_69			SLEEP_(4)
1801   E75B             
1802   E75B             			BE2E_($0B)				;Effect: Range #0B
1802   E75B             
1802   E75B 2E 0B       
1803   E75D             			BE2D_($0C)				;Effect: Range #0C
1803   E75D             
1803   E75D 2D 0C       
1804   E75F             			ADDRAM_($00,$FF)			;RAM$00+=$FF
1804   E75F~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1804   E75F~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1804   E75F             
1804   E75F B0 FF       
1805   E761 5BFCE000F0  			.db $5B,$FC,$E0,$00,$F0		;BNE_RAM$00==#0 to gb_6A
1806   E766             			SETRAM_($00,$23)			;RAM$00=$23
1806   E766~            			SETRAM_($00,$23)			;RAM$00=$23
1806   E766~            			SETRAM_($00,$23)			;RAM$00=$23
1806   E766             
1806   E766 C0 23       
1807   E768             			SETRAM_($01,$28)			;RAM$01=$28
1807   E768~            			SETRAM_($01,$28)			;RAM$01=$28
1807   E768~            			SETRAM_($01,$28)			;RAM$01=$28
1807   E768             
1807   E768 C1 28       
1808   E76A             			BE29_($12)				;Effect: Range #12
1808   E76A             
1808   E76A 29 12       
1809   E76C             gb_6B			SLEEP_(7)
1809   E76C             
1809   E76C 77          
1809   E76D~            gb_6B			SLEEP_(7)
1809   E76D~            gb_6B			SLEEP_(7)
1809   E76D             
1810   E76D             			BITOFFP2_($00)			;Turn OFF Lamp/Bit @RAM:00
1810   E76D             
1810   E76D 25 00       
1811   E76F             			BITOFFP2_($01)			;Turn OFF Lamp/Bit @RAM:01
1811   E76F             
1811   E76F 25 01       
1812   E771             			EXE_($02)				;CPU Execute Next 2 Bytes
1812   E771~            			EXE_($02)				;CPU Execute Next 2 Bytes
1812   E771~            			EXE_($02)				;CPU Execute Next 2 Bytes
1812   E771             
1812   E771 44          
1812   E772             
1813   E772 4C          			inca	
1814   E773 5C          			incb	
1815   E774 5BFDE027F3  			.db $5B,$FD,$E0,$27,$F3		;BNE_RAM$00>=#39 to gb_6B
1816   E779             			BITOFF_($46)			;Turn OFF: Bit#06
1816   E779             
1816   E779 11 46       
1817   E77B             gb_68			KILL_					;Remove This Thread
1817   E77B 03          
1818   E77C             
1819   E77C BD F3 AB    gj_14			jsr	macro_start
1820   E77F             			PRI_($32)				;Priority=#32
1820   E77F 52 32       
1821   E781             			BITON_($46)				;Turn ON: Bit#06
1821   E781             
1821   E781 10 46       
1822   E783             			BE28_($52)				;Effect: Range #52
1822   E783             
1822   E783 28 52       
1823   E785             			BE29_($12)				;Effect: Range #12
1823   E785             
1823   E785 29 12       
1824   E787             			BITON2_($63)			;Turn ON: Lamp#23(lbull_5k)
1824   E787             
1824   E787 20 63       
1825   E789             			BITON2_($64)			;Turn ON: Lamp#24(lbull_10k)
1825   E789             
1825   E789 20 64       
1826   E78B             			BITON2_($68)			;Turn ON: Lamp#28(rbull_2x)
1826   E78B             
1826   E78B 20 68       
1827   E78D             			BITON2_($69)			;Turn ON: Lamp#29(rbull_3x)
1827   E78D             
1827   E78D 20 69       
1828   E78F             			SETRAM_($00,$06)			;RAM$00=$06
1828   E78F~            			SETRAM_($00,$06)			;RAM$00=$06
1828   E78F~            			SETRAM_($00,$06)			;RAM$00=$06
1828   E78F             
1828   E78F C0 06       
1829   E791 5A F1 01    gb_71			.db $5A,$F1,$01			;BEQ_GAME to gb_70
1830   E794             			SSND_($06)				;Sound #06
1830   E794             
1830   E794 E6          
1830   E795~            			SSND_($06)				;Sound #06
1830   E795~            			SSND_($06)				;Sound #06
1830   E795~            			SSND_($06)				;Sound #06
1830   E795             
1831   E795             gb_70			SLEEP_(4)
1831   E795             
1831   E795 74          
1831   E796~            gb_70			SLEEP_(4)
1831   E796~            gb_70			SLEEP_(4)
1831   E796             
1832   E796             			BE2E_($12)				;Effect: Range #12
1832   E796             
1832   E796 2E 12       
1833   E798 5B F7 2C F5 			.db $5B,$F7,$2C,$F5		;BNE_BIT#2C to gb_71
1834   E79C             gb_72			SLEEP_(4)
1834   E79C             
1834   E79C 74          
1834   E79D~            gb_72			SLEEP_(4)
1834   E79D~            gb_72			SLEEP_(4)
1834   E79D             
1835   E79D             			BE2D_($12)				;Effect: Range #12
1835   E79D             
1835   E79D 2D 12       
1836   E79F 5B F7 28 F9 			.db $5B,$F7,$28,$F9		;BNE_BIT#28 to gb_72
1837   E7A3             			ADDRAM_($00,$FF)			;RAM$00+=$FF
1837   E7A3~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1837   E7A3~            			ADDRAM_($00,$FF)			;RAM$00+=$FF
1837   E7A3             
1837   E7A3 B0 FF       
1838   E7A5 5BFCE000E7  			.db $5B,$FC,$E0,$00,$E7		;BNE_RAM$00==#0 to gb_71
1839   E7AA             			SLEEP_(4)
1839   E7AA             
1839   E7AA 74          
1839   E7AB~            			SLEEP_(4)
1839   E7AB~            			SLEEP_(4)
1839   E7AB             
1840   E7AB             			BE2C_($8B,$0C)			;Effect: Range #8B Range #0C
1840   E7AB             
1840   E7AB 2C 8B 0C    
1841   E7AE             			SLEEP_(4)
1841   E7AE             
1841   E7AE 74          
1841   E7AF~            			SLEEP_(4)
1841   E7AF~            			SLEEP_(4)
1841   E7AF             
1842   E7AF             			BE2C_($8B,$0C)			;Effect: Range #8B Range #0C
1842   E7AF             
1842   E7AF 2C 8B 0C    
1843   E7B2             			BE29_($52)				;Effect: Range #52
1843   E7B2             
1843   E7B2 29 52       
1844   E7B4             			BITOFF_($46)			;Turn OFF: Bit#06
1844   E7B4             
1844   E7B4 11 46       
1845   E7B6             			KILL_					;Remove This Thread
1845   E7B6 03          
1846   E7B7             
1847   E7B7 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
1847   E7BD 00000000000000000000
1848   E7C7 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
1848   E7CD 00000000000000000000
1849   E7D7 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
1849   E7DD 00000000000000000000
1850   E7E7 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
1850   E7ED 00000000000000000000
1851   E7F7 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00
1851   E7FD 000000
1852   E800             
1853   E800             
1854   E800             	.end
1855   E800             
1856   E800             ;**************************************
1857   E800             ;* Label Definitions                   
1858   E800             ;**************************************
1859   E800             ; D800 gj_02
1860   E800             ; D805 gb_46
1861   E800             ; D810 gb_47
1862   E800             ; D81F gb_48
1863   E800             ; D82E gb_49
1864   E800             ; D83D gb_4A
1865   E800             ; D84C gb_4B
1866   E800             ; D85B gb_4C
1867   E800             ; D86C gj_2E
1868   E800             ; D877 gb_91
1869   E800             ; D883 gb_92
1870   E800             ; D891 gj_28
1871   E800             ; D89C gb_84
1872   E800             ; D8A8 gb_85
1873   E800             ; D8B6 gj_13
1874   E800             ; D8CB gb_6D
1875   E800             ; D8D2 gb_6E
1876   E800             ; D8E2 gb_6F
1877   E800             ; D8EF gj_15
1878   E800             ; D904 gb_73
1879   E800             ; D90B gb_74
1880   E800             ; D91B gb_75
1881   E800             ; D927 gb_6C
1882   E800             ; DA3F gj_20
1883   E800             ; DA44 gb_5C
1884   E800             ; DA50 gb_59
1885   E800             ; DA59 gb_5A
1886   E800             ; DA5A gb_58
1887   E800             ; DA62 gb_5B
1888   E800             ; DA67 gj_2F
1889   E800             ; DAC6 gb_7D
1890   E800             ; DB04 gj_33
1891   E800             ; DB0C gj_34
1892   E800             ; DB13 gb_7C
1893   E800             ; DB26 gb_93
1894   E800             ; DB2E gj_11
1895   E800             ; DB3D gb_67
1896   E800             ; DB58 gb_8E
1897   E800             ; DB67 gb_8D
1898   E800             ; DB7A gb_66
1899   E800             ; DB8E gb_87
1900   E800             ; DBA4 gb_86
1901   E800             ; DBA9 gb_9C
1902   E800             ; DBAA gj_3D
1903   E800             ; DBB7 gj_42
1904   E800             ; DBD5 gb_A5
1905   E800             ; DBE3 gj_44
1906   E800             ; DBFF gb_04
1907   E800             ; DC0C gb_2C
1908   E800             ; DC22 gb_2D
1909   E800             ; DC48 gj_1B
1910   E800             ; DC67 gj_31
1911   E800             ; DC69 gb_8B
1912   E800             ; DC6B gb_8C
1913   E800             ; DC6F gb_8A
1914   E800             ; DC78 gb_88
1915   E800             ; DC8B gb_89
1916   E800             ; DC94 gb_9F
1917   E800             ; DCA1 gb_9D
1918   E800             ; DCA8 gb_9E
1919   E800             ; DCB4 gj_45
1920   E800             ; DCB7 gb_A7
1921   E800             ; DCBE gj_41
1922   E800             ; DCDC gj_40
1923   E800             ; DCE1 gb_A4
1924   E800             ; DCFC gb_A3
1925   E800             ; DD01 gb_A6
1926   E800             ; DD1C gj_27
1927   E800             ; DD25 gj_37
1928   E800             ; DD27 gb_94
1929   E800             ; DD41 gb_95
1930   E800             ; DD50 gb_96
1931   E800             ; DD55 gj_3F
1932   E800             ; DD5A gj_43
1933   E800             ; DD5E gj_24
1934   E800             ; DD65 gb_80
1935   E800             ; DD77 gb_7E
1936   E800             ; DD96 gb_7F
1937   E800             ; DDB4 gb_82
1938   E800             ; DDC4 gb_81
1939   E800             ; DDD4 gj_3C
1940   E800             ; DDE2 gj_38
1941   E800             ; DDE7 gb_98
1942   E800             ; DDF8 gb_97
1943   E800             ; DDF9 gj_01
1944   E800             ; DE0A gj_3A
1945   E800             ; DE0E gb_65
1946   E800             ; DE12 gb_64
1947   E800             ; DE2A gb_45
1948   E800             ; DE3D gb_63
1949   E800             ; DE48 gj_2A
1950   E800             ; DE4F gj_32
1951   E800             ; DE54 gj_3E
1952   E800             ; DE57 gb_A0
1953   E800             ; DE5E gameover_entry
1954   E800             ; DE92 gj_17
1955   E800             ; DE9C gj_03
1956   E800             ; DE9F gj_2B
1957   E800             ; DEA3 gb_4D
1958   E800             ; DEAF gb_4E
1959   E800             ; DEBE gj_04
1960   E800             ; DEE0 gj_05
1961   E800             ; E0C9 gameover_event
1962   E800             ; E0DA sw_hstd_res
1963   E800             ; E0DE hook_coin
1964   E800             ; E0E4 gb_25
1965   E800             ; E0E5 hook_mainloop
1966   E800             ; E0E5 hook_reset
1967   E800             ; E0E6 hook_gamestart
1968   E800             ; E0EE gj_18
1969   E800             ; E0F7 gb_26
1970   E800             ; E0FF sw_credit_button
1971   E800             ; E113 score_event
1972   E800             ; E138 gb_01
1973   E800             ; E143 gb_23
1974   E800             ; E149 gb_24
1975   E800             ; E14A sw_plumbtilt
1976   E800             ; E159 gj_1A
1977   E800             ; E168 sw_balltilt
1978   E800             ; E168 sw_pf_tilt
1979   E800             ; E16B gb_03
1980   E800             ; E17E gb_30
1981   E800             ; E191 gb_05
1982   E800             ; E192 gb_2F
1983   E800             ; E1A1 hook_outhole
1984   E800             ; E1BC gb_2B
1985   E800             ; E1C9 gb_02
1986   E800             ; E1CB gb_2E
1987   E800             ; E1D3 hook_playerinit
1988   E800             ; E1ED gb_27
1989   E800             ; E1F3 gb_28
1990   E800             ; E1F9 gb_29
1991   E800             ; E206 gb_4F
1992   E800             ; E20F gb_2A
1993   E800             ; E211 gj_19
1994   E800             ; E225 gb_50
1995   E800             ; E233 gb_51
1996   E800             ; E23E gb_52
1997   E800             ; E248 gj_1F
1998   E800             ; E25A gb_56
1999   E800             ; E26A gb_55
2000   E800             ; E26B gj_06
2001   E800             ; E272 gj_2C
2002   E800             ; E277 gj_07
2003   E800             ; E27D gb_32
2004   E800             ; E280 gb_31
2005   E800             ; E285 gj_0C
2006   E800             ; E28D sw_barracora_lane
2007   E800             ; E298 gb_08
2008   E800             ; E29D gb_07
2009   E800             ; E2AB gb_06
2010   E800             ; E2AC gj_16
2011   E800             ; E2C2 gb_77
2012   E800             ; E2C8 gb_76
2013   E800             ; E2D4 gb_78
2014   E800             ; E2DF sw_left_flipper
2015   E800             ; E2E2 sw_right_flipper
2016   E800             ; E2E5 sw_1_4_lane
2017   E800             ; E2E5 sw_2_5_lane
2018   E800             ; E2E5 sw_3_6_lane
2019   E800             ; E315 gb_17
2020   E800             ; E322 gb_16
2021   E800             ; E32C gb_15
2022   E800             ; E32D gb_14
2023   E800             ; E35A gb_3F
2024   E800             ; E369 gj_23
2025   E800             ; E36B gb_5D
2026   E800             ; E37B sw_upper_eject
2027   E800             ; E397 gb_0C
2028   E800             ; E39D gb_09
2029   E800             ; E3A3 gj_35
2030   E800             ; E3A9 gb_0B
2031   E800             ; E3AA gb_0D
2032   E800             ; E3B5 gb_0A
2033   E800             ; E3B8 gj_21
2034   E800             ; E3BD sw_lower_eject
2035   E800             ; E3D3 gb_10
2036   E800             ; E3D5 gb_3B
2037   E800             ; E3E4 gj_0B
2038   E800             ; E3F9 gb_57
2039   E800             ; E40F gb_3C
2040   E800             ; E410 gb_0E
2041   E800             ; E416 gj_36
2042   E800             ; E41C gb_0F
2043   E800             ; E41D gj_22
2044   E800             ; E422 sw_center_trough
2045   E800             ; E422 sw_left_trough
2046   E800             ; E422 sw_right_trough
2047   E800             ; E43C gb_11
2048   E800             ; E451 gb_3D
2049   E800             ; E464 gb_3E
2050   E800             ; E465 gj_0D
2051   E800             ; E46C sw_outhole
2052   E800             ; E473 gj_1E
2053   E800             ; E485 sw_bottom_jet
2054   E800             ; E489 sw_left_jet
2055   E800             ; E489 sw_right_jet
2056   E800             ; E48D sw_5bank_10
2057   E800             ; E48D sw_lleft_10
2058   E800             ; E48D sw_lower_10
2059   E800             ; E48D sw_lsling_10
2060   E800             ; E48D sw_rsling_10
2061   E800             ; E48D sw_upper_10
2062   E800             ; E491 sw_left_return
2063   E800             ; E491 sw_right_return
2064   E800             ; E497 sw_left_outlane
2065   E800             ; E497 sw_right_outlane
2066   E800             ; E4AF gb_18
2067   E800             ; E4B0 sw_ball_shooter
2068   E800             ; E4C6 gb_13
2069   E800             ; E4C7 gb_12
2070   E800             ; E4CD gj_0E
2071   E800             ; E4D9 sw_left_bull
2072   E800             ; E4DB gj_10
2073   E800             ; E4E5 gb_1B
2074   E800             ; E4E6 sw_right_bull
2075   E800             ; E4EA sw_upper_right_bull
2076   E800             ; E503 gb_1E
2077   E800             ; E505 gb_1D
2078   E800             ; E50A gb_1F
2079   E800             ; E514 gb_20
2080   E800             ; E51B gb_1C
2081   E800             ; E51E gj_08
2082   E800             ; E531 gb_53
2083   E800             ; E536 gb_33
2084   E800             ; E53A sw_spinner
2085   E800             ; E54D gb_19
2086   E800             ; E551 gj_09
2087   E800             ; E55D gj_1C
2088   E800             ; E560 gb_79
2089   E800             ; E572 gb_7B
2090   E800             ; E583 gb_90
2091   E800             ; E586 gb_7A
2092   E800             ; E592 gb_8F
2093   E800             ; E5A0 gb_A1
2094   E800             ; E5A4 gj_0A
2095   E800             ; E5BD gb_35
2096   E800             ; E5C7 gb_34
2097   E800             ; E5CD gb_37
2098   E800             ; E5D7 gb_36
2099   E800             ; E5DC gj_1D
2100   E800             ; E5E5 gj_2D
2101   E800             ; E5F1 gb_3A
2102   E800             ; E5F4 gb_39
2103   E800             ; E602 gb_54
2104   E800             ; E606 gb_38
2105   E800             ; E60D gj_39
2106   E800             ; E610 gj_3B
2107   E800             ; E61D gb_99
2108   E800             ; E61E sw_dt_a1
2109   E800             ; E61E sw_dt_a2
2110   E800             ; E61E sw_dt_a3
2111   E800             ; E61E sw_dt_b
2112   E800             ; E61E sw_dt_c
2113   E800             ; E61E sw_dt_o
2114   E800             ; E61E sw_dt_r
2115   E800             ; E61E sw_dt_rr
2116   E800             ; E63C gb_21
2117   E800             ; E63D gb_22
2118   E800             ; E656 gb_44
2119   E800             ; E65E gb_43
2120   E800             ; E66B gb_5F
2121   E800             ; E673 gj_29
2122   E800             ; E68E gb_61
2123   E800             ; E698 gb_60
2124   E800             ; E6A1 gb_62
2125   E800             ; E6AD sw_right_turnaround
2126   E800             ; E6B5 gb_1A
2127   E800             ; E6B9 gj_25
2128   E800             ; E6C7 gj_0F
2129   E800             ; E6D7 gb_41
2130   E800             ; E6E2 gb_40
2131   E800             ; E6E5 gj_26
2132   E800             ; E6F1 gb_42
2133   E800             ; E700 gj_30
2134   E800             ; E70A gb_5E
2135   E800             ; E714 gb_83
2136   E800             ; E72D gb_9B
2137   E800             ; E736 gb_9A
2138   E800             ; E73E gb_A2
2139   E800             ; E73F gj_12
2140   E800             ; E756 gb_6A
2141   E800             ; E75A gb_69
2142   E800             ; E76C gb_6B
2143   E800             ; E77B gb_68
2144   E800             ; E77C gj_14
2145   E800             ; E791 gb_71
2146   E800             ; E795 gb_70
2147   E800             ; E79C gb_72
tasm: Number of errors = 0
