0001   0000             ;--------------------------------------------------------------
0002   0000             ;Jungle Lord Game ROM Disassembly
0003   0000             ;Dumped by Pinbuilder ©2000-2005 Jess M. Askey
0004   0000             ;--------------------------------------------------------------
0005   0000             #include  "68logic.asm"	;680X logic definitions
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin		      logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ y	*+5
0050+  0000             #defcont						\ jmp	var2_
0051+  0000             #defcont					\#else
0052+  0000             #defcont						\ x	var2_
0053+  0000             #defcont					\#endif
0054+  0000             #defcont				\#else
0055+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0056+  0000             #defcont				\#endif
0057+  0000             
0058+  0000             ;*******************************************************************
0059+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0060+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0061+  0000             ;*             at that address to point to the current address.    *
0062+  0000             ;*******************************************************************
0063+  0000             #define logic_end \var1_ .set *
0064+  0000             #defcont		\ .pop var3_, var4_
0065+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0066+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0067+  0000             #defcont  				\var2_ .set var1_-var4_-2
0068+  0000             #defcont				\#if var2_+127 < 0
0069+  0000             #defcont					\ .error "Branch Range < -127"
0070+  0000             #defcont				\#else
0071+  0000             #defcont					\#if var2_-128 > 0
0072+  0000             #defcont						\ .error "Branch Range > 128"
0073+  0000             #defcont					\#else
0074+  0000             #defcont    					\ .org var4_+1
0075+  0000             #defcont						\ .byte var2_
0076+  0000             #defcont					\#endif
0077+  0000             #defcont				\#endif
0078+  0000             #defcont			\#else	
0079+  0000             #defcont    			\ .org  var4_-2	
0080+  0000             #defcont				\ .word var1_
0081+  0000             #defcont			\#endif
0082+  0000             #defcont			\ .org	var1_
0083+  0000             #defcont		\#else
0084+  0000             #defcont			\.error "Wrong Endtype for IF block"
0085+  0000             #defcont		\#endif
0086+  0000             
0087+  0000             ;*******************************************************************
0088+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0089+  0000             ;*             (ie. with additional logic as defined below). The   *
0090+  0000             ;*             ELSE block will resove how to terminate the current *
0091+  0000             ;*             code and then set the owning IF statement's data    *
0092+  0000             ;*             byte.                                               *
0093+  0000             ;*******************************************************************
0094+  0000             #define	logic_else(x,y)	\var1_ .set $
0095+  0000             #defcont		\ .pop var3_, var4_
0096+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0097+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0098+  0000             #defcont				\ .org var4_+1
0099+  0000             #defcont	      		\#if x==0
0100+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0101+  0000             #defcont					\#if var2_+127 < 0
0102+  0000             #defcont						\ .org var1_
0103+  0000             #defcont						\.push $+3, 1
0104+  0000             #defcont						\ jmp $
0105+  0000             #defcont					\#else
0106+  0000             #defcont						\#if var2_-128>0
0107+  0000             #defcont							\ .org var1_
0108+  0000             #defcont							\.push $+3, 1
0109+  0000             #defcont							\ jmp $
0110+  0000             #defcont						\#else
0111+  0000             #defcont							\.push var1_, 0
0112+  0000             #defcont							\ .byte var2_
0113+  0000             #defcont							\ .org var1_
0114+  0000             #defcont							\ BRA $
0115+  0000             #defcont							\ .org var1_+2
0116+  0000             #defcont						\#endif
0117+  0000             #defcont					\#endif
0118+  0000             #defcont				\#else
0119+  0000             #defcont					\ .byte var1_-var4_-2+2
0120+  0000             #defcont					\ .org var1_
0121+  0000             #defcont					\.push $, 0
0122+  0000             #defcont					\ y $		
0123+  0000             #defcont				\#endif
0124+  0000             #defcont			\#else
0125+  0000             #defcont				\.error "Duplicate ELSE Statement"
0126+  0000             #defcont			\#endif
0127+  0000             #defcont		\#else
0128+  0000             #defcont			\ .error "Misplaced Else"
0129+  0000             #defcont		\#endif
0130+  0000             
0131+  0000             
0132+  0000             ;*******************************************************************
0133+  0000             ;* Defines how to use the various logic macros defined above.      *
0134+  0000             ;*******************************************************************
0135+  0000             #define	ifeq	logic_ifxx(BNE)		
0136+  0000             #define	ifne	logic_ifxx(BEQ)
0137+  0000             #define	ifpl	logic_ifxx(BMI)
0138+  0000             #define	ifhi	logic_ifxx(BLO)
0139+  0000             #define	ifmi	logic_ifxx(BPL)
0140+  0000             #define	iflo	logic_ifxx(BHI)
0141+  0000             #define	ifcs	logic_ifxx(BCC)
0142+  0000             #define	ifcc	logic_ifxx(BCS)
0143+  0000             #define 	ifvc	logic_ifxx(BVS)
0144+  0000             #define 	ifvs	logic_ifxx(BVC)
0145+  0000             #define	ifge	logic_ifxx(BLO)
0146+  0000             #define	ifgt	logic_ifxx(BLS)
0147+  0000             
0148+  0000             #define	else  	logic_else(0,0)
0149+  0000             #define	else_eq	logic_else(1,BEQ)
0150+  0000             #define	else_ne	logic_else(1,BNE)
0151+  0000             #define	else_pl	logic_else(1,BPL)
0152+  0000             #define	else_mi	logic_else(1,BMI)
0153+  0000             #define	else_cc	logic_else(1,BCC)
0154+  0000             #define	else_cs	logic_else(1,BCS)
0155+  0000             
0156+  0000             #define 	endif		logic_end
0157+  0000             
0158+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0159+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0160+  0000             #define	plend	logic_loopend(BMI,BPL)
0161+  0000             #define	miend	logic_loopend(BPL,BMI)
0162+  0000             #define	csend	logic_loopend(BCC,BCS)
0163+  0000             #define	ccend	logic_loopend(BCS,BCC)
0164+  0000             #define	vcend	logic_loopend(BVS,BVC)
0165+  0000             #define	vsend	logic_loopend(BVC,BVS)
0166+  0000             #define     hiend logic_loopend(BLS,BHI)
0167+  0000             #define     lsend logic_loopend(BHI,BLS)
0168+  0000             
0169+  0000             #define	loopend	logic_loopend(BRA,BRA)
0170+  0000             
0171+  0000             #define	lsb(x)	x&$FF
0172+  0000             
0173+  0000             #define	msb(x)	(x>>8)&$FF0006   0000             #include  "level7.exp"	;Level 7 system defines
0001+  0000             .module noname
0002+  0000             
0003+  0000             aud_leftcoins    .EQU  $0102
0004+  0000             aud_centercoins  .EQU  $0106
0005+  0000             aud_rightcoins   .EQU  $010a
0006+  0000             aud_paidcredits  .EQU  $010e
0007+  0000             aud_specialcredits .EQU  $0112
0008+  0000             aud_replaycredits .EQU  $0116
0009+  0000             aud_matchcredits .EQU  $011a
0010+  0000             aud_totalcredits .EQU  $011e
0011+  0000             aud_extraballs   .EQU  $0122
0012+  0000             aud_avgballtime  .EQU  $0126
0013+  0000             aud_totalballs   .EQU  $012a
0014+  0000             aud_game1        .EQU  $012e
0015+  0000             aud_game2        .EQU  $0132
0016+  0000             aud_game3        .EQU  $0136
0017+  0000             aud_game4        .EQU  $013a
0018+  0000             aud_game5        .EQU  $013e
0019+  0000             aud_game6        .EQU  $0142
0020+  0000             aud_game7        .EQU  $0146
0021+  0000             aud_autocycles   .EQU  $014a
0022+  0000             aud_hstdcredits  .EQU  $014e
0023+  0000             aud_replay1times .EQU  $0150
0024+  0000             aud_replay2times .EQU  $0154
0025+  0000             aud_replay3times .EQU  $0158
0026+  0000             aud_replay4times .EQU  $015c
0027+  0000             aud_currenthstd  .EQU  $0166
0028+  0000             aud_currentcredits .EQU  $016e
0029+  0000             aud_command      .EQU  $0170
0030+  0000             adj_cmoscsum     .EQU  $017d
0031+  0000             adj_backuphstd   .EQU  $0181
0032+  0000             adj_replay1      .EQU  $0183
0033+  0000             adj_replay2      .EQU  $0185
0034+  0000             adj_replay3      .EQU  $0187
0035+  0000             adj_replay4      .EQU  $0189
0036+  0000             adj_matchenable  .EQU  $018b
0037+  0000             adj_specialaward .EQU  $018d
0038+  0000             adj_replayaward  .EQU  $018f
0039+  0000             adj_maxplumbbobtilts .EQU  $0191
0040+  0000             adj_numberofballs .EQU  $0193
0041+  0000             adj_gameadjust1  .EQU  $0195
0042+  0000             adj_gameadjust2  .EQU  $0197
0043+  0000             adj_gameadjust3  .EQU  $0199
0044+  0000             adj_gameadjust4  .EQU  $019b
0045+  0000             adj_gameadjust5  .EQU  $019d
0046+  0000             adj_gameadjust6  .EQU  $019f
0047+  0000             adj_gameadjust7  .EQU  $01a1
0048+  0000             adj_gameadjust8  .EQU  $01a3
0049+  0000             adj_gameadjust9  .EQU  $01a5
0050+  0000             adj_hstdcredits  .EQU  $01a7
0051+  0000             adj_max_extraballs .EQU  $01a9
0052+  0000             adj_max_credits  .EQU  $01ab
0053+  0000             adj_pricecontrol .EQU  $01ad
0054+  0000             addthread        .EQU  $ea2f
0055+  0000             add_points       .EQU  $ec96
0056+  0000             a_cmosinc        .EQU  $efaf
0057+  0000             abx_ret          .EQU  $f213
0058+  0000             award_special    .EQU  $f6a5
0059+  0000             award_replay     .EQU  $f6bf
0060+  0000             addcredits       .EQU  $f6fe
0061+  0000             addcredit2       .EQU  $f701
0062+  0000             add_player       .EQU  $f858
0063+  0000             adjust_func      .EQU  $fd0b
0064+  0000             adjust_a         .EQU  $fff2
0065+  0000             bitflags         .EQU  $0018
0066+  0000             b_plus10         .EQU  $ecee
0067+  0000             b_cmosinc        .EQU  $ef69
0068+  0000             bit_switch       .EQU  $f2ea
0069+  0000             bit_lamp_flash   .EQU  $f2ef
0070+  0000             bit_lamp_buf_1   .EQU  $f2f4
0071+  0000             bit_lamp_buf_0   .EQU  $f2f9
0072+  0000             bit_main         .EQU  $f2fc
0073+  0000             branch_lookup    .EQU  $f38b
0074+  0000             breg_sto         .EQU  $f3cf
0075+  0000             branchdata       .EQU  $f5f8
0076+  0000             branch_invert    .EQU  $f636
0077+  0000             branch_lamp_on   .EQU  $f63b
0078+  0000             branch_lamprangeoff .EQU  $f647
0079+  0000             branch_lamprangeon .EQU  $f64e
0080+  0000             branch_tilt      .EQU  $f653
0081+  0000             branch_gameover  .EQU  $f65a
0082+  0000             branch_lampbuf1  .EQU  $f661
0083+  0000             branch_switch    .EQU  $f666
0084+  0000             branch_and       .EQU  $f66b
0085+  0000             branch_add       .EQU  $f670
0086+  0000             branch_or        .EQU  $f672
0087+  0000             branch_equal     .EQU  $f677
0088+  0000             branch_ge        .EQU  $f67c
0089+  0000             branch_threadpri .EQU  $f67f
0090+  0000             branch_bitwise   .EQU  $f686
0091+  0000             balladjust       .EQU  $f9e6
0092+  0000             block_copy       .EQU  $ffd1
0093+  0000             cred_b0          .EQU  $005a
0094+  0000             cred_b1          .EQU  $005b
0095+  0000             comma_flags      .EQU  $0060
0096+  0000             comma_data_temp  .EQU  $008d
0097+  0000             credp1p2_bufferselect .EQU  $008e
0098+  0000             current_thread   .EQU  $00b1
0099+  0000             cur_sndflags     .EQU  $00ba
0100+  0000             csound_timer     .EQU  $00c3
0101+  0000             credit_x_temp    .EQU  $00dc
0102+  0000             cmos_base        .EQU  $0100
0103+  0000             cmos_csum        .EQU  $0100
0104+  0000             cmos_bonusunits  .EQU  $0162
0105+  0000             cmos_coinunits   .EQU  $0164
0106+  0000             cmos_leftcoinmult .EQU  $01af
0107+  0000             cmos_centercoinmult .EQU  $01b1
0108+  0000             cmos_rightcoinmult .EQU  $01b3
0109+  0000             cmos_coinsforcredit .EQU  $01b5
0110+  0000             cmos_bonuscoins  .EQU  $01b7
0111+  0000             cmos_minimumcoins .EQU  $01b9
0112+  0000             csum1            .EQU  $e83f
0113+  0000             clear_all        .EQU  $e86c
0114+  0000             checkswitch      .EQU  $e8d4
0115+  0000             check_threads    .EQU  $e9fc
0116+  0000             check_threadid   .EQU  $eb00
0117+  0000             comma_million    .EQU  $eb99
0118+  0000             comma_thousand   .EQU  $eb9d
0119+  0000             checkreplay      .EQU  $ecac
0120+  0000             check_sw_mask    .EQU  $ede7
0121+  0000             check_sw_close   .EQU  $ee61
0122+  0000             check_sw_open    .EQU  $eebb
0123+  0000             copy_word        .EQU  $ef0f
0124+  0000             cmosinc_a        .EQU  $ef53
0125+  0000             cmosinc_b        .EQU  $ef63
0126+  0000             clr_ram_100      .EQU  $ef74
0127+  0000             clr_ram          .EQU  $ef77
0128+  0000             copyblock        .EQU  $efbc
0129+  0000             copyblock2       .EQU  $efe4
0130+  0000             csum2            .EQU  $f318
0131+  0000             complexbranch    .EQU  $f615
0132+  0000             credit_special   .EQU  $f6b8
0133+  0000             coinlockout      .EQU  $f72c
0134+  0000             checkmaxcredits  .EQU  $f749
0135+  0000             creditq          .EQU  $f75f
0136+  0000             coin_accepted    .EQU  $f7a2
0137+  0000             cmos_a_plus_b_cmos .EQU  $f80f
0138+  0000             clr_bonus_coins  .EQU  $f829
0139+  0000             csum3            .EQU  $f833
0140+  0000             clear_range      .EQU  $f894
0141+  0000             clear_displays   .EQU  $f89a
0142+  0000             copyplayerdata   .EQU  $f8c8
0143+  0000             check_hstd       .EQU  $fa92
0144+  0000             credit_button    .EQU  $fb92
0145+  0000             check_adv        .EQU  $fc6a
0146+  0000             check_aumd       .EQU  $fc75
0147+  0000             cmos_add_d       .EQU  $fde6
0148+  0000             cmos_a           .EQU  $fe1f
0149+  0000             cmos_byteloc     .EQU  $01bb
0150+  0000             cmos_error       .EQU  $ffcb
0151+  0000             cmos_restore     .EQU  $ffe5
0152+  0000             dmask_p1         .EQU  $005c
0153+  0000             dmask_p2         .EQU  $005d
0154+  0000             dmask_p3         .EQU  $005e
0155+  0000             dmask_p4         .EQU  $005f
0156+  0000             delaythread      .EQU  $ea24
0157+  0000             dump_thread      .EQU  $ea39
0158+  0000             dsnd_pts         .EQU  $ebfe
0159+  0000             do_complex_snd   .EQU  $eda7
0160+  0000             dly_sto          .EQU  $f4d4
0161+  0000             do_eb            .EQU  $f6d6
0162+  0000             divide_ab        .EQU  $f816
0163+  0000             dec2hex          .EQU  $f834
0164+  0000             do_game_init     .EQU  $f847
0165+  0000             disp_mask        .EQU  $f919
0166+  0000             disp_clear       .EQU  $f926
0167+  0000             dump_score_queue .EQU  $f994
0168+  0000             do_match         .EQU  $fb39
0169+  0000             do_tilt          .EQU  $fbe9
0170+  0000             do_aumd          .EQU  $fc57
0171+  0000             do_audadj        .EQU  $fca5
0172+  0000             diag             .EQU  $ff2b
0173+  0000             diag_showerror   .EQU  $ff7b
0174+  0000             diag_ramtest     .EQU  $ff81
0175+  0000             eb_x_temp        .EQU  $00da
0176+  0000             exe_buffer       .EQU  $1130
0177+  0000             extraball        .EQU  $f6d5
0178+  0000             flag_tilt        .EQU  $00c8
0179+  0000             flag_gameover    .EQU  $00c9
0180+  0000             flag_bonusball   .EQU  $00ca
0181+  0000             flags_selftest   .EQU  $00cb
0182+  0000             flag_timer_bip   .EQU  $00d6
0183+  0000             flashlamp        .EQU  $e957
0184+  0000             factory_zeroaudits .EQU  $ef7d
0185+  0000             fill_hstd_digits .EQU  $fb24
0186+  0000             fn_gameid        .EQU  $fd23
0187+  0000             fn_gameaud       .EQU  $fd2e
0188+  0000             fn_sysaud        .EQU  $fd30
0189+  0000             fn_hstd          .EQU  $fda9
0190+  0000             fn_replay        .EQU  $fdb1
0191+  0000             fn_pricec        .EQU  $fdef
0192+  0000             fn_prices        .EQU  $fe09
0193+  0000             fn_ret           .EQU  $fe22
0194+  0000             fn_credit        .EQU  $fe26
0195+  0000             fn_cdtbtn        .EQU  $fe29
0196+  0000             fn_adj           .EQU  $fe33
0197+  0000             fn_command       .EQU  $fe3e
0198+  0000             game_ram_2       .EQU  $0002
0199+  0000             game_ram_3       .EQU  $0003
0200+  0000             game_ram_4       .EQU  $0004
0201+  0000             game_ram_5       .EQU  $0005
0202+  0000             game_ram_6       .EQU  $0006
0203+  0000             game_ram_7       .EQU  $0007
0204+  0000             game_ram_8       .EQU  $0008
0205+  0000             game_ram_9       .EQU  $0009
0206+  0000             game_ram_a       .EQU  $000a
0207+  0000             game_ram_b       .EQU  $000b
0208+  0000             game_ram_c       .EQU  $000c
0209+  0000             game_ram_d       .EQU  $000d
0210+  0000             get_hs_digits    .EQU  $ece4
0211+  0000             getswitch        .EQU  $ee98
0212+  0000             gettabledata_w   .EQU  $f48c
0213+  0000             gettabledata_b   .EQU  $f48e
0214+  0000             getx_rts         .EQU  $f49e
0215+  0000             give_credit      .EQU  $f6cb
0216+  0000             gameover         .EQU  $fa1e
0217+  0000             get_random       .EQU  $fb80
0218+  0000             hex2bitpos       .EQU  $eb8e
0219+  0000             hex2dec          .EQU  $ec7f
0220+  0000             hstd_nextp       .EQU  $fac6
0221+  0000             hstd_adddig      .EQU  $fb13
0222+  0000             has_credit       .EQU  $fba3
0223+  0000             irq_counter      .EQU  $0089
0224+  0000             irqcount16       .EQU  $0095
0225+  0000             irqcount         .EQU  $00ac
0226+  0000             init_done        .EQU  $e840
0227+  0000             isnd_pts         .EQU  $ebfa
0228+  0000             isnd_once        .EQU  $ecfc
0229+  0000             isnd_test        .EQU  $ed42
0230+  0000             isnd_mult        .EQU  $ed53
0231+  0000             initialize_game  .EQU  $f878
0232+  0000             init_player_game .EQU  $f8ad
0233+  0000             init_player_up   .EQU  $f8d2
0234+  0000             init_player_sys  .EQU  $f933
0235+  0000             irq_entry        .EQU  $fff8
0236+  0000             killthread       .EQU  $ea67
0237+  0000             killthread_sp    .EQU  $eacc
0238+  0000             kill_thread      .EQU  $eaf3
0239+  0000             kill_threads     .EQU  $eafb
0240+  0000             lampbuffer0      .EQU  $0010
0241+  0000             lampbufferselect .EQU  $0020
0242+  0000             lampbuffer1      .EQU  $0028
0243+  0000             lampflashflag    .EQU  $0030
0244+  0000             lamp_index_word  .EQU  $008a
0245+  0000             lamp_bit         .EQU  $008c
0246+  0000             lamp_flash_rate  .EQU  $00b5
0247+  0000             lamp_flash_count .EQU  $00b6
0248+  0000             lastsound        .EQU  $00b9
0249+  0000             loadpricing      .EQU  $efd0
0250+  0000             lampbuffers      .EQU  $f134
0251+  0000             lamp_on          .EQU  $f13c
0252+  0000             lamp_or          .EQU  $f141
0253+  0000             lamp_commit      .EQU  $f147
0254+  0000             lamp_done        .EQU  $f157
0255+  0000             lamp_off         .EQU  $f15b
0256+  0000             lamp_and         .EQU  $f160
0257+  0000             lamp_flash       .EQU  $f169
0258+  0000             lamp_invert      .EQU  $f170
0259+  0000             lamp_eor         .EQU  $f175
0260+  0000             lamp_on_b        .EQU  $f17e
0261+  0000             lamp_off_b       .EQU  $f183
0262+  0000             lamp_invert_b    .EQU  $f188
0263+  0000             lamp_on_1        .EQU  $f18d
0264+  0000             lamp_off_1       .EQU  $f192
0265+  0000             lamp_invert_1    .EQU  $f197
0266+  0000             lampm_off        .EQU  $f1a7
0267+  0000             lampm_noflash    .EQU  $f1b6
0268+  0000             lampm_f          .EQU  $f1c7
0269+  0000             lampm_a          .EQU  $f1ee
0270+  0000             lampm_b          .EQU  $f1f8
0271+  0000             lampm_8          .EQU  $f208
0272+  0000             lampr_start      .EQU  $f21a
0273+  0000             lr_ret           .EQU  $f21f
0274+  0000             lampr_end        .EQU  $f226
0275+  0000             lampr_setup      .EQU  $f22c
0276+  0000             lamp_left        .EQU  $f255
0277+  0000             ls_ret           .EQU  $f25a
0278+  0000             lamp_right       .EQU  $f264
0279+  0000             lampm_c          .EQU  $f26b
0280+  0000             lm_test          .EQU  $f26d
0281+  0000             lampm_e          .EQU  $f27c
0282+  0000             lampm_d          .EQU  $f294
0283+  0000             lampm_z          .EQU  $f2b3
0284+  0000             lampm_x          .EQU  $f302
0285+  0000             load_sw_no       .EQU  $f5b0
0286+  0000             lesscredit       .EQU  $fbc1
0287+  0000             mbip_b0          .EQU  $0058
0288+  0000             mbip_b1          .EQU  $0059
0289+  0000             mbipp3p4_bufferselect .EQU  $008f
0290+  0000             minutetimer      .EQU  $00d4
0291+  0000             main             .EQU  $e8ad
0292+  0000             master_vm_lookup .EQU  $f319
0293+  0000             macro_start      .EQU  $f3ab
0294+  0000             macro_rts        .EQU  $f3af
0295+  0000             macro_go         .EQU  $f3b5
0296+  0000             macro_pcminus100 .EQU  $f3db
0297+  0000             macro_code_start .EQU  $f3e2
0298+  0000             macro_special    .EQU  $f3ea
0299+  0000             macro_extraball  .EQU  $f3ef
0300+  0000             macro_x8f        .EQU  $f3fb
0301+  0000             macro_17         .EQU  $f418
0302+  0000             macro_x17        .EQU  $f41b
0303+  0000             macro_exec       .EQU  $f46b
0304+  0000             macro_getnextbyte .EQU  $f495
0305+  0000             macro_ramadd     .EQU  $f4aa
0306+  0000             macro_ramcopy    .EQU  $f4bf
0307+  0000             macro_set_pri    .EQU  $f4ca
0308+  0000             macro_delay_imm_b .EQU  $f4d2
0309+  0000             macro_getnextword .EQU  $f4e2
0310+  0000             macro_get2bytes  .EQU  $f4ea
0311+  0000             macro_rem_th_s   .EQU  $f4ef
0312+  0000             macro_rem_th_m   .EQU  $f4f6
0313+  0000             macro_jsr_noreturn .EQU  $f4fd
0314+  0000             macro_a_ram      .EQU  $f509
0315+  0000             macro_b_ram      .EQU  $f518
0316+  0000             macro_jsr_return .EQU  $f527
0317+  0000             macro_jmp_cpu    .EQU  $f54f
0318+  0000             macro_jmp_abs    .EQU  $f566
0319+  0000             macro_pcadd      .EQU  $f58e
0320+  0000             macro_setswitch  .EQU  $f5a4
0321+  0000             macro_clearswitch .EQU  $f5bc
0322+  0000             macro_branch     .EQU  $f5cd
0323+  0000             num_players      .EQU  $00cc
0324+  0000             num_eb           .EQU  $00d0
0325+  0000             num_tilt         .EQU  $00d3
0326+  0000             next_sw          .EQU  $e910
0327+  0000             nextthread       .EQU  $e9ff
0328+  0000             newthread_sp     .EQU  $ea78
0329+  0000             newthread_06     .EQU  $eac4
0330+  0000             nmi_entry        .EQU  $fffc
0331+  0000             outhole_main     .EQU  $f9ab
0332+  0000             player_up        .EQU  $00cd
0333+  0000             pscore_buf       .EQU  $00ce
0334+  0000             p1_gamedata      .EQU  $1140
0335+  0000             p2_gamedata      .EQU  $1159
0336+  0000             p3_gamedata      .EQU  $1172
0337+  0000             p4_gamedata      .EQU  $118b
0338+  0000             pia_sound_data   .EQU  $2100
0339+  0000             pia_sound_ctrl   .EQU  $2101
0340+  0000             pia_comma_data   .EQU  $2102
0341+  0000             pia_comma_ctrl   .EQU  $2103
0342+  0000             pia_sol_low_data .EQU  $2200
0343+  0000             pia_sol_low_ctrl .EQU  $2201
0344+  0000             pia_sol_high_data .EQU  $2202
0345+  0000             pia_sol_high_ctrl .EQU  $2203
0346+  0000             pia_lamp_row_data .EQU  $2400
0347+  0000             pia_lamp_row_ctrl .EQU  $2401
0348+  0000             pia_lamp_col_data .EQU  $2402
0349+  0000             pia_lamp_col_ctrl .EQU  $2403
0350+  0000             pia_disp_digit_data .EQU  $2800
0351+  0000             pia_disp_digit_ctrl .EQU  $2801
0352+  0000             pia_disp_seg_data .EQU  $2802
0353+  0000             pia_disp_seg_ctrl .EQU  $2803
0354+  0000             pia_switch_return_data .EQU  $3000
0355+  0000             pia_switch_return_ctrl .EQU  $3001
0356+  0000             pia_switch_strobe_data .EQU  $3002
0357+  0000             pia_switch_strobe_ctrl .EQU  $3003
0358+  0000             pia_alphanum_digit_data .EQU  $4000
0359+  0000             pia_alphanum_digit_ctrl .EQU  $4001
0360+  0000             pia_alphanum_seg_data .EQU  $4002
0361+  0000             pia_alphanum_seg_ctrl .EQU  $4003
0362+  0000             pri_next         .EQU  $eb0a
0363+  0000             pri_skipme       .EQU  $eb17
0364+  0000             pack_done        .EQU  $eeb8
0365+  0000             pia_ddr_data     .EQU  $f10e
0366+  0000             pc_sto2          .EQU  $f505
0367+  0000             pc_sto           .EQU  $f54a
0368+  0000             pull_ba_rts      .EQU  $f75c
0369+  0000             ptrx_plus_1      .EQU  $f77f
0370+  0000             ptrx_plus_a      .EQU  $f784
0371+  0000             ptrx_plus        .EQU  $f785
0372+  0000             player_ready     .EQU  $f8dd
0373+  0000             powerup_init     .EQU  $fa34
0374+  0000             randomseed       .EQU  $00d7
0375+  0000             reset            .EQU  $e800
0376+  0000             reset_audits     .EQU  $ef6f
0377+  0000             restore_hstd     .EQU  $ef9d
0378+  0000             ram_sto2         .EQU  $f4ba
0379+  0000             ret_sto          .EQU  $f529
0380+  0000             ram_sto          .EQU  $f574
0381+  0000             ret_false        .EQU  $f657
0382+  0000             ret_true         .EQU  $f65e
0383+  0000             resetplayerdata  .EQU  $f952
0384+  0000             rambad           .EQU  $ff1f
0385+  0000             res_entry        .EQU  $fffe
0386+  0000             score_p1_b0      .EQU  $0038
0387+  0000             score_p3_b0      .EQU  $0040
0388+  0000             score_p4_b0      .EQU  $0044
0389+  0000             score_p1_b1      .EQU  $0048
0390+  0000             score_p2_b1      .EQU  $004c
0391+  0000             score_p3_b1      .EQU  $0050
0392+  0000             score_p4_b1      .EQU  $0054
0393+  0000             switch_debounced .EQU  $0061
0394+  0000             switch_masked    .EQU  $0069
0395+  0000             switch_pending   .EQU  $0071
0396+  0000             switch_aux       .EQU  $0079
0397+  0000             switch_b4        .EQU  $0081
0398+  0000             swap_player_displays .EQU  $0090
0399+  0000             solenoid_address .EQU  $0091
0400+  0000             solenoid_bitpos  .EQU  $0093
0401+  0000             solenoid_counter .EQU  $0094
0402+  0000             switch_queue_pointer .EQU  $0096
0403+  0000             solenoid_queue_pointer .EQU  $0098
0404+  0000             sys_temp1        .EQU  $00a0
0405+  0000             sys_temp2        .EQU  $00a1
0406+  0000             sys_temp3        .EQU  $00a2
0407+  0000             sys_temp4        .EQU  $00a3
0408+  0000             sys_temp5        .EQU  $00a4
0409+  0000             sw_encoded       .EQU  $00a5
0410+  0000             sys_temp_w2      .EQU  $00a6
0411+  0000             sys_temp_w3      .EQU  $00a8
0412+  0000             soundcount       .EQU  $00b8
0413+  0000             soundptr         .EQU  $00bb
0414+  0000             soundirqcount    .EQU  $00bd
0415+  0000             soundindex_com   .EQU  $00bf
0416+  0000             sys_soundflags   .EQU  $00c1
0417+  0000             soundindex       .EQU  $00c2
0418+  0000             spare_ram        .EQU  $00e0
0419+  0000             switch_queue     .EQU  $1100
0420+  0000             sol_queue        .EQU  $1118
0421+  0000             score_queue      .EQU  $1128
0422+  0000             switches         .EQU  $e90d
0423+  0000             sw_break         .EQU  $e942
0424+  0000             solq             .EQU  $e970
0425+  0000             snd_queue        .EQU  $e98c
0426+  0000             solbuf           .EQU  $eb23
0427+  0000             set_solenoid     .EQU  $eb47
0428+  0000             set_ss_off       .EQU  $eb5f
0429+  0000             set_s_pia        .EQU  $eb62
0430+  0000             set_ss_on        .EQU  $eb6b
0431+  0000             soladdr          .EQU  $eb71
0432+  0000             ssoladdr         .EQU  $eb82
0433+  0000             set_comma_bit    .EQU  $ebc4
0434+  0000             snd_pts          .EQU  $ec01
0435+  0000             score_main       .EQU  $ec05
0436+  0000             score_update     .EQU  $ec1d
0437+  0000             score2hex        .EQU  $ec86
0438+  0000             sh_exit          .EQU  $ec95
0439+  0000             split_ab         .EQU  $ecf3
0440+  0000             sound_sub        .EQU  $ed03
0441+  0000             snd_exit_pull    .EQU  $ed99
0442+  0000             snd_exit         .EQU  $ed9b
0443+  0000             send_snd_save    .EQU  $ed9e
0444+  0000             send_snd         .EQU  $eda0
0445+  0000             store_csndflg    .EQU  $edbf
0446+  0000             sw_ignore        .EQU  $ee01
0447+  0000             sw_active        .EQU  $ee02
0448+  0000             sw_down          .EQU  $ee04
0449+  0000             sw_dtime         .EQU  $ee15
0450+  0000             sw_trig_yes      .EQU  $ee19
0451+  0000             sw_proc          .EQU  $ee48
0452+  0000             sw_pack          .EQU  $eeab
0453+  0000             sw_get_time      .EQU  $eedb
0454+  0000             sw_tbl_lookup    .EQU  $eef7
0455+  0000             setup_vm_stack   .EQU  $ef22
0456+  0000             stack_done       .EQU  $ef3f
0457+  0000             sys_irq          .EQU  $eff7
0458+  0000             spec_sol_def     .EQU  $f122
0459+  0000             switch_entry     .EQU  $f3cb
0460+  0000             set_logic        .EQU  $f68b
0461+  0000             store_display_mask .EQU  $f8a4
0462+  0000             setplayerbuffer  .EQU  $f8bc
0463+  0000             saveplayertobuffer .EQU  $f9cb
0464+  0000             show_hstd        .EQU  $fa0b
0465+  0000             set_gameover     .EQU  $fa44
0466+  0000             show_all_scores  .EQU  $fa58
0467+  0000             set_hstd         .EQU  $fad7
0468+  0000             send_sound       .EQU  $fb30
0469+  0000             start_new_game   .EQU  $fbbc
0470+  0000             selftest_entry   .EQU  $fc23
0471+  0000             st_diagnostics   .EQU  $fc31
0472+  0000             st_init          .EQU  $fc80
0473+  0000             st_nexttest      .EQU  $fc94
0474+  0000             show_func        .EQU  $fccf
0475+  0000             st_reset         .EQU  $fd16
0476+  0000             st_display       .EQU  $fe43
0477+  0000             st_sound         .EQU  $fe62
0478+  0000             st_lamp          .EQU  $fe8d
0479+  0000             st_autocycle     .EQU  $feac
0480+  0000             st_solenoid      .EQU  $fecb
0481+  0000             st_switch        .EQU  $fef0
0482+  0000             st_swnext        .EQU  $fefc
0483+  0000             swi_entry        .EQU  $fffa
0484+  0000             temp1            .EQU  $009a
0485+  0000             temp2            .EQU  $009c
0486+  0000             temp3            .EQU  $009e
0487+  0000             thread_priority  .EQU  $00aa
0488+  0000             thread_timer_byte .EQU  $00b7
0489+  0000             time             .EQU  $e8f0
0490+  0000             test_mask_b      .EQU  $ebd0
0491+  0000             to_ldx_rts       .EQU  $ee95
0492+  0000             to_macro_go1     .EQU  $f433
0493+  0000             to_macro_go2     .EQU  $f4bc
0494+  0000             to_getx_rts      .EQU  $f516
0495+  0000             to_macro_go4     .EQU  $f54c
0496+  0000             to_macro_go3     .EQU  $f5c7
0497+  0000             to_macro_getnextbyte .EQU  $f5ca
0498+  0000             to_rts3          .EQU  $f63a
0499+  0000             test_z           .EQU  $f643
0500+  0000             test_c           .EQU  $f64a
0501+  0000             to_rts4          .EQU  $f68a
0502+  0000             to_pula_rts      .EQU  $f898
0503+  0000             to_copyblock     .EQU  $f9e3
0504+  0000             to_rts1          .EQU  $fb23
0505+  0000             to_rts2          .EQU  $fb91
0506+  0000             tilt_warning     .EQU  $fbdd
0507+  0000             testdata         .EQU  $fbfa
0508+  0000             testlists        .EQU  $fc04
0509+  0000             to_clear_range   .EQU  $fc91
0510+  0000             to_audadj        .EQU  $fca3
0511+  0000             tightloop        .EQU  $ff7f
0512+  0000             unused_ram1      .EQU  $00ab
0513+  0000             unknown_ram4     .EQU  $00c5
0514+  0000             unknown_ram5     .EQU  $00c6
0515+  0000             unknown_ram6     .EQU  $00c7
0516+  0000             update_commas    .EQU  $eba1
0517+  0000             update_eb_count  .EQU  $ebdb
0518+  0000             unpack_byte      .EQU  $f19c
0519+  0000             update_hstd      .EQU  $faf5
0520+  0000             vm_reg_a         .EQU  $0000
0521+  0000             vm_reg_b         .EQU  $0001
0522+  0000             vm_base          .EQU  $00ad
0523+  0000             vm_nextslot      .EQU  $00af
0524+  0000             vm_tail_thread   .EQU  $00b3
0525+  0000             vm_pc            .EQU  $00d1
0526+  0000             vm_irqcheck      .EQU  $e946
0527+  0000             vm_lookup_0x     .EQU  $f339
0528+  0000             vm_lookup_1x_a   .EQU  $f347
0529+  0000             vm_lookup_1x_b   .EQU  $f357
0530+  0000             vm_lookup_2x     .EQU  $f35f
0531+  0000             vm_lookup_4x     .EQU  $f365
0532+  0000             vm_lookup_5x     .EQU  $f36b
0533+  0000             vm_control_0x    .EQU  $f3d3
0534+  0000             vm_control_1x    .EQU  $f3f4
0535+  0000             vm_control_2x    .EQU  $f436
0536+  0000             vm_control_3x    .EQU  $f442
0537+  0000             vm_control_4x    .EQU  $f44f
0538+  0000             vm_control_5x    .EQU  $f4a1
0539+  0000             vm_control_6x    .EQU  $f540
0540+  0000             vm_control_7x    .EQU  $f544
0541+  0000             vm_control_8x    .EQU  $f548
0542+  0000             vm_control_9x    .EQU  $f558
0543+  0000             vm_control_ax    .EQU  $f562
0544+  0000             vm_control_bx    .EQU  $f56b
0545+  0000             vm_control_cx    .EQU  $f578
0546+  0000             vm_control_dx    .EQU  $f57d
0547+  0000             vm_control_ex    .EQU  $f587
0548+  0000             vm_control_fx    .EQU  $f587
0549+  0000             write_range      .EQU  $f840
0550+  0000             wordplusbyte     .EQU  $fb17
0551+  0000             x_temp_1         .EQU  $00d8
0552+  0000             x_temp_2         .EQU  $00de
0553+  0000             xplusa           .EQU  $eeff
0554+  0000             xplusb           .EQU  $ef4d
0007   0000             #include  "wvm7.asm"	;Level 7 macro defines
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Level 7 Virtual Machine Macro Definitions
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             .module wml7
0012+  0000             .msfirst
0013+  0000             
0014+  0000             wml1_       .equ  $00
0015+  0000             wml2_       .equ  $00
0016+  0000             wml3_       .equ  $00
0017+  0000             wml4_       .equ  $00
0018+  0000             wml5_       .equ  $00
0019+  0000             wml6_       .equ  $00
0020+  0000             
0021+  0000             #define     FLAG_WML_IF       $10
0022+  0000             #define     FLAG_WML_ELSE     $20
0023+  0000             #define	FLAG_WML_BEGIN 	$40
0024+  0000             #define     FLAG_WML_EXE      $80
0025+  0000             
0026+  0000             ;********************************************************
0027+  0000             ;* First Define the Thread Structure used in the virtual 
0028+  0000             ;* machine linked list.
0029+  0000             ;********************************************************
0030+  0000             ;* Next:	This is the pointer to the next thread in 
0031+  0000             ;* 		the linked list. The VM requires this to 
0032+  0000             ;*		move about the list of threads. This is 
0033+  0000             ;* 		set by the VM thread handlers and does not
0034+  0000             ;*          need to be manually fiddled with by the 
0035+  0000             ;*          game program as it is automatic.
0036+  0000             ;*
0037+  0000             ;* Timer:	This is a byte timer (0-255) that holds the 
0038+  0000             ;*          number of IRQ's counts required before the 
0039+  0000             ;*          thread is executed. This is set by the 
0040+  0000             ;*          programmer for delays between executions.	
0041+  0000             ;*
0042+  0000             ;* Vars:	When a thread is created, the originating
0043+  0000             ;*          program may push up to 8 additional bytes
0044+  0000             ;* 		of data onto the stack which will then be
0045+  0000             ;*          placed into these 8 byte holders.
0046+  0000             ;*
0047+  0000             ;* PC:	This is the address of the program entry 
0048+  0000             ;*          point that will be executed when the thread
0049+  0000             ;*       	timer expires.
0050+  0000             ;*
0051+  0000             ;* ID:	The thread ID is a number that identifies 
0052+  0000             ;* 		the thread type. The ID defintions are all
0053+  0000             ;*		decided by the programmer except for thread
0054+  0000             ;*		ID #06 which is a general 'end-of-ball' terminated
0055+  0000             ;*		thread. Because the VM can destroy groups of 
0056+  0000             ;* 		threads by ID and branch on existence of threads
0057+  0000             ;*    	with certain ID's, this is a very important
0058+  0000             ;*		design consideration. See the programming 
0059+  0000             ;*  		manual for more information.
0060+  0000             ;*	
0061+  0000             ;* RegA:	This holds the value that was contained in 
0062+  0000             ;*		the CPU register A when the Thread was created.
0063+  0000             ;*
0064+  0000             ;* RegB:	Similar to above, holds the value of CPU reg B.
0065+  0000             ;*
0066+  0000             ;* RegX:	Again, holds the value of the X register upon
0067+  0000             ;*		thread creation.
0068+  0000             ;*
0069+  0000             ;************************************************************
0070+  0000             
0071+  0000             threadobj_next	.equ	$00
0072+  0000             threadobj_timer	.equ	$02
0073+  0000             threadobj_var1	.equ	$03
0074+  0000             threadobj_var2	.equ	$04
0075+  0000             threadobj_var3	.equ	$05
0076+  0000             threadobj_var4	.equ	$06
0077+  0000             threadobj_var5	.equ	$07
0078+  0000             threadobj_var6	.equ	$09
0079+  0000             threadobj_var7	.equ	$09
0080+  0000             threadobj_var8	.equ	$0a
0081+  0000             threadobj_pc	.equ	$0b
0082+  0000             threadobj_id	.equ	$0d
0083+  0000             threadobj_rega	.equ	$0e
0084+  0000             threadobj_regb	.equ	$0f
0085+  0000             threadobj_regx	.equ	$10
0086+  0000             
0087+  0000             ;********************************************************
0088+  0000             ;* Now define some standard RAM locations etc...
0089+  0000             ;********************************************************
0090+  0000             rega	.equ	$00
0091+  0000             regb	.equ	$01
0092+  0000             
0093+  0000             ;********************************************************
0094+  0000             ;* Switch Table Equates
0095+  0000             ;********************************************************
0096+  0000             #define	SWITCHENTRY(a,b)	\.db a \.dw b
0097+  0000             
0098+  0000             sf_wml7	      .equ	$80
0099+  0000             sf_code 	      .equ 	$00
0100+  0000             sf_tilt	      .equ	$40
0101+  0000             sf_notilt         .equ  $00
0102+  0000             sf_gameover	      .equ	$20
0103+  0000             sf_nogameover     .equ  $00
0104+  0000             sf_enabled	      .equ	$10
0105+  0000             sf_disabled       .equ  $00
0106+  0000             sf_instant	      .equ	$08
0107+  0000             sf_delayed        .equ  $00
0108+  0000             
0109+  0000             ;********************************************************
0110+  0000             ;* Test for our current execution mode, CODE or WML7
0111+  0000             ;* If we think the programmer has their code wrong, 
0112+  0000             ;* then throw an error.
0113+  0000             ;********************************************************
0114+  0000             ;_MODECPU_         .equ  $00
0115+  0000             ;_MODEWML_         .equ  $80
0116+  0000             ;_CURRENTMODE_     .equ  _MODECPU_
0117+  0000             ;
0118+  0000             ;#define     _SETMODECPU_      \_CURRENTMODE_     .set  _MODECPU_
0119+  0000             ;#define     _SETMODEWML_      \_CURRENTMODE_     .set  _MODEWML_
0120+  0000             ;
0121+  0000             ;#define     _CHECKWML_        \#if _CURRENTMODE_ != _MODEWML_
0122+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect WML codes now, are you sure your code is structured properly?"
0123+  0000             ;#defcont                      \#endif
0124+  0000             ;
0125+  0000             ;#define     _CHECKCPU_        \#if _CURRENTMODE_ != _MODECPU_
0126+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect CPU codes now, are you sure your code is structured properly?"
0127+  0000             ;#defcont                      \#endif
0128+  0000             ;********************************************************
0129+  0000             ;* Define our Level 7 macros.
0130+  0000             ;********************************************************
0131+  0000             
0132+  0000             #define 	PC100_	\.db $00	
0133+  0000             #define 	NOP_		\.db $01	
0134+  0000             #define	MRTS_		\.db $02
0135+  0000             #define	KILL_		\.db $03	
0136+  0000             #define 	CPUX_		\.db $04
0137+  0000             #define	SPEC_		\.db $05	
0138+  0000             #define	EB_		\.db $06	
0139+  0000             
0140+  0000             ;********************************************************
0141+  0000             ;* Lamp Macro Definition: These take care of turning lamps
0142+  0000             ;*                        on/off and doing the basic lamp
0143+  0000             ;*                        effects.
0144+  0000             ;********************************************************
0145+  0000             #define	BITON_(a)		      \.db $10,a
0146+  0000             #define	BITON_(a,b)		      \.db $10,((a&$7F)+$80),b
0147+  0000             #define	BITON_(a,b,c)	      \.db $10,((a&$7F)+$80),((b&$7F)+$80),c
0148+  0000             #define	BITON_(a,b,c,d)	      \.db $10,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0149+  0000             #define	BITON_(a,b,c,d,e)	      \.db $10,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0150+  0000             
0151+  0000             #define	BITOFF_(a)		      \.db $11,a
0152+  0000             #define	BITOFF_(a,b)		\.db $11,((a&$7F)+$80),b
0153+  0000             #define	BITOFF_(a,b,c)	      \.db $11,((a&$7F)+$80),((b&$7F)+$80),c
0154+  0000             #define	BITOFF_(a,b,c,d)	      \.db $11,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0155+  0000             #define	BITOFF_(a,b,c,d,e)	\.db $11,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0156+  0000             
0157+  0000             #define	BITINV_(a)		      \.db $12,a
0158+  0000             #define	BITINV_(a,b)		\.db $12,((a&$7F)+$80),b
0159+  0000             #define	BITINV_(a,b,c)	      \.db $12,((a&$7F)+$80),((b&$7F)+$80),c
0160+  0000             #define	BITINV_(a,b,c,d)	      \.db $12,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0161+  0000             #define	BITINV_(a,b,c,d,e)	\.db $12,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0162+  0000             
0163+  0000             #define	BITFL_(a)		      \.db $13,a
0164+  0000             #define	BITFL_(a,b)		      \.db $13,((a&$7F)+$80),b
0165+  0000             #define	BITFL_(a,b,c)	      \.db $13,((a&$7F)+$80),((b&$7F)+$80),c
0166+  0000             #define	BITFL_(a,b,c,d)	      \.db $13,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0167+  0000             #define	BITFL_(a,b,c,d,e)	      \.db $13,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0168+  0000              
0169+  0000             #define	BITONP_(a)		      \.db $14,a
0170+  0000             #define	BITONP_(a,b)		\.db $14,((a&$7F)+$80),b
0171+  0000             #define	BITONP_(a,b,c)	      \.db $14,((a&$7F)+$80),((b&$7F)+$80),c
0172+  0000             #define	BITONP_(a,b,c,d)	      \.db $14,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0173+  0000             #define	BITONP_(a,b,c,d,e)	\.db $14,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0174+  0000             
0175+  0000             #define	BITOFFP_(a)		      \.db $15,a
0176+  0000             #define	BITOFFP_(a,b)		\.db $15,((a&$7F)+$80),b
0177+  0000             #define	BITOFFP_(a,b,c)	      \.db $15,((a&$7F)+$80),((b&$7F)+$80),c
0178+  0000             #define	BITOFFP_(a,b,c,d)	      \.db $15,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0179+  0000             #define	BITOFFP_(a,b,c,d,e)	\.db $15,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0180+  0000             
0181+  0000             #define	BITINVP_(a)		      \.db $16,a
0182+  0000             #define	BITINVP_(a,b)		\.db $16,((a&$7F)+$80),b
0183+  0000             #define	BITINVP_(a,b,c)	      \.db $16,((a&$7F)+$80),((b&$7F)+$80),c
0184+  0000             #define	BITINVP_(a,b,c,d)	      \.db $16,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0185+  0000             #define	BITINVP_(a,b,c,d,e)	\.db $16,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0186+  0000             
0187+  0000             #define	BITFLP_(a)		      \.db $17,a
0188+  0000             #define	BITFLP_(a,b)		\.db $17,((a&$7F)+$80),b
0189+  0000             #define	BITFLP_(a,b,c)	      \.db $17,((a&$7F)+$80),((b&$7F)+$80),c
0190+  0000             #define	BITFLP_(a,b,c,d)	      \.db $17,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0191+  0000             #define	BITFLP_(a,b,c,d,e)	\.db $17,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0192+  0000             
0193+  0000             ;************************
0194+  0000             ;* Lamp/Bit Effects
0195+  0000             ;************************
0196+  0000             #define	BE18_(a)		      \.db $18,a
0197+  0000             #define	BE18_(a,b)		      \.db $18,((a&$7F)+$80),b
0198+  0000             #define	BE18_(a,b,c)	      \.db $18,((a&$7F)+$80),((b&$7F)+$80),c
0199+  0000             #define	BE18_(a,b,c,d)	      \.db $18,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0200+  0000             #define	BE18_(a,b,c,d,e)	      \.db $18,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0201+  0000             
0202+  0000             #define	BE19_(a)		      \.db $19,a
0203+  0000             #define	BE19_(a,b)		      \.db $19,((a&$7F)+$80),b
0204+  0000             #define	BE19_(a,b,c)	      \.db $19,((a&$7F)+$80),((b&$7F)+$80),c
0205+  0000             #define	BE19_(a,b,c,d)	      \.db $19,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0206+  0000             #define	BE19_(a,b,c,d,e)	      \.db $19,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0207+  0000             
0208+  0000             #define	BE1A_(a)		      \.db $1A,a
0209+  0000             #define	BE1A_(a,b)		      \.db $1A,((a&$7F)+$80),b
0210+  0000             #define	BE1A_(a,b,c)	      \.db $1A,((a&$7F)+$80),((b&$7F)+$80),c
0211+  0000             #define	BE1A_(a,b,c,d)	      \.db $1A,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0212+  0000             #define	BE1A_(a,b,c,d,e)	      \.db $1A,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0213+  0000             
0214+  0000             #define	BE1B_(a)		      \.db $1B,a
0215+  0000             #define	BE1B_(a,b)		      \.db $1B,((a&$7F)+$80),b
0216+  0000             #define	BE1B_(a,b,c)	      \.db $1B,((a&$7F)+$80),((b&$7F)+$80),c
0217+  0000             #define	BE1B_(a,b,c,d)	      \.db $1B,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0218+  0000             #define	BE1B_(a,b,c,d,e)	      \.db $1B,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0219+  0000             
0220+  0000             #define	BE1C_(a)		      \.db $1C,a
0221+  0000             #define	BE1C_(a,b)		      \.db $1C,((a&$7F)+$80),b
0222+  0000             #define	BE1C_(a,b,c)	      \.db $1C,((a&$7F)+$80),((b&$7F)+$80),c
0223+  0000             #define	BE1C_(a,b,c,d)	      \.db $1C,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0224+  0000             #define	BE1C_(a,b,c,d,e)	      \.db $1C,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0225+  0000             
0226+  0000             #define	BE1D_(a)		      \.db $1D,a
0227+  0000             #define	BE1D_(a,b)		      \.db $1D,((a&$7F)+$80),b
0228+  0000             #define	BE1D_(a,b,c)	      \.db $1D,((a&$7F)+$80),((b&$7F)+$80),c
0229+  0000             #define	BE1D_(a,b,c,d)	      \.db $1D,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0230+  0000             #define	BE1D_(a,b,c,d,e)	      \.db $1D,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0231+  0000             
0232+  0000             #define	BE1E_(a)		      \.db $1E,a
0233+  0000             #define	BE1E_(a,b)		      \.db $1E,((a&$7F)+$80),b
0234+  0000             #define	BE1E_(a,b,c)	      \.db $1E,((a&$7F)+$80),((b&$7F)+$80),c
0235+  0000             #define	BE1E_(a,b,c,d)	      \.db $1E,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0236+  0000             #define	BE1E_(a,b,c,d,e)	      \.db $1E,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0237+  0000             
0238+  0000             #define	BE1F_(a)		      \.db $1F,a
0239+  0000             #define	BE1F_(a,b)		      \.db $1F,((a&$7F)+$80),b
0240+  0000             #define	BE1F_(a,b,c)	      \.db $1F,((a&$7F)+$80),((b&$7F)+$80),c
0241+  0000             #define	BE1F_(a,b,c,d)	      \.db $1F,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0242+  0000             #define	BE1F_(a,b,c,d,e)	      \.db $1F,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0243+  0000             
0244+  0000             #define	BITON2_(a)		      \.db $20,a
0245+  0000             #define	BITON2_(a,b)		\.db $20,((a&$7F)+$80),b
0246+  0000             #define	BITON2_(a,b,c)	      \.db $20,((a&$7F)+$80),((b&$7F)+$80),c
0247+  0000             #define	BITON2_(a,b,c,d)	      \.db $20,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0248+  0000             #define	BITON2_(a,b,c,d,e)	\.db $20,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0249+  0000             
0250+  0000             #define	BITOFF2_(a)		      \.db $21,a
0251+  0000             #define	BITOFF2_(a,b)		\.db $21,((a&$7F)+$80),b
0252+  0000             #define	BITOFF2_(a,b,c)	      \.db $21,((a&$7F)+$80),((b&$7F)+$80),c
0253+  0000             #define	BITOFF2_(a,b,c,d)	      \.db $21,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0254+  0000             #define	BITOFF2_(a,b,c,d,e)	\.db $21,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0255+  0000             
0256+  0000             #define	BITINV2_(a)		      \.db $22,a
0257+  0000             #define	BITINV2_(a,b)		\.db $22,((a&$7F)+$80),b
0258+  0000             #define	BITINV2_(a,b,c)	      \.db $22,((a&$7F)+$80),((b&$7F)+$80),c
0259+  0000             #define	BITINV2_(a,b,c,d)	      \.db $22,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0260+  0000             #define	BITINV2_(a,b,c,d,e)	\.db $22,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0261+  0000             
0262+  0000             #define	BITFL2_(a)		      \.db $23,a
0263+  0000             #define	BITFL2_(a,b)		\.db $23,((a&$7F)+$80),b
0264+  0000             #define	BITFL2_(a,b,c)	      \.db $23,((a&$7F)+$80),((b&$7F)+$80),c
0265+  0000             #define	BITFL2_(a,b,c,d)	      \.db $23,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0266+  0000             #define	BITFL2_(a,b,c,d,e)	\.db $23,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0267+  0000              
0268+  0000             #define	BITONP2_(a)		      \.db $24,a
0269+  0000             #define	BITONP2_(a,b)		\.db $24,((a&$7F)+$80),b
0270+  0000             #define	BITONP2_(a,b,c)	      \.db $24,((a&$7F)+$80),((b&$7F)+$80),c
0271+  0000             #define	BITONP2_(a,b,c,d)	      \.db $24,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0272+  0000             #define	BITONP2_(a,b,c,d,e)	\.db $24,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0273+  0000             
0274+  0000             #define	BITOFFP2_(a)		\.db $25,a
0275+  0000             #define	BITOFFP2_(a,b)		\.db $25,((a&$7F)+$80),b
0276+  0000             #define	BITOFFP2_(a,b,c)	      \.db $25,((a&$7F)+$80),((b&$7F)+$80),c
0277+  0000             #define	BITOFFP2_(a,b,c,d)	\.db $25,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0278+  0000             #define	BITOFFP2_(a,b,c,d,e)	\.db $25,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0279+  0000             
0280+  0000             #define	BITINVP2_(a)		\.db $26,a
0281+  0000             #define	BITINVP2_(a,b)		\.db $26,((a&$7F)+$80),b
0282+  0000             #define	BITINVP2_(a,b,c)	      \.db $26,((a&$7F)+$80),((b&$7F)+$80),c
0283+  0000             #define	BITINVP2_(a,b,c,d)	\.db $26,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0284+  0000             #define	BITINVP2_(a,b,c,d,e)	\.db $26,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0285+  0000             
0286+  0000             #define	BITFLP2_(a)		      \.db $27,a
0287+  0000             #define	BITFLP2_(a,b)		\.db $27,((a&$7F)+$80),b
0288+  0000             #define	BITFLP2_(a,b,c)	      \.db $27,((a&$7F)+$80),((b&$7F)+$80),c
0289+  0000             #define	BITFLP2_(a,b,c,d)	      \.db $27,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0290+  0000             #define	BITFLP2_(a,b,c,d,e)	\.db $27,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0291+  0000             
0292+  0000             ;************************
0293+  0000             ;* Lamp/Bit Effects
0294+  0000             ;************************
0295+  0000             #define	BE28_(a)		      \.db $28,a
0296+  0000             #define	BE28_(a,b)		      \.db $28,((a&$7F)+$80),b
0297+  0000             #define	BE28_(a,b,c)	      \.db $28,((a&$7F)+$80),((b&$7F)+$80),c
0298+  0000             #define	BE28_(a,b,c,d)	      \.db $28,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0299+  0000             #define	BE28_(a,b,c,d,e)	      \.db $28,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0300+  0000             
0301+  0000             #define	BE29_(a)		      \.db $29,a
0302+  0000             #define	BE29_(a,b)		      \.db $29,((a&$7F)+$80),b
0303+  0000             #define	BE29_(a,b,c)	      \.db $29,((a&$7F)+$80),((b&$7F)+$80),c
0304+  0000             #define	BE29_(a,b,c,d)	      \.db $29,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0305+  0000             #define	BE29_(a,b,c,d,e)	      \.db $29,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0306+  0000             
0307+  0000             #define	BE2A_(a)		      \.db $2A,a
0308+  0000             #define	BE2A_(a,b)		      \.db $2A,((a&$7F)+$80),b
0309+  0000             #define	BE2A_(a,b,c)	      \.db $2A,((a&$7F)+$80),((b&$7F)+$80),c
0310+  0000             #define	BE2A_(a,b,c,d)	      \.db $2A,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0311+  0000             #define	BE2A_(a,b,c,d,e)	      \.db $2A,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0312+  0000             
0313+  0000             #define	BE2B_(a)		      \.db $2B,a
0314+  0000             #define	BE2B_(a,b)		      \.db $2B,((a&$7F)+$80),b
0315+  0000             #define	BE2B_(a,b,c)	      \.db $2B,((a&$7F)+$80),((b&$7F)+$80),c
0316+  0000             #define	BE2B_(a,b,c,d)	      \.db $2B,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0317+  0000             #define	BE2B_(a,b,c,d,e)	      \.db $2B,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0318+  0000             
0319+  0000             #define	BE2C_(a)		      \.db $2C,a
0320+  0000             #define	BE2C_(a,b)		      \.db $2C,((a&$7F)+$80),b
0321+  0000             #define	BE2C_(a,b,c)	      \.db $2C,((a&$7F)+$80),((b&$7F)+$80),c
0322+  0000             #define	BE2C_(a,b,c,d)	      \.db $2C,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0323+  0000             #define	BE2C_(a,b,c,d,e)	      \.db $2C,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0324+  0000             
0325+  0000             #define	BE2D_(a)		      \.db $2D,a
0326+  0000             #define	BE2D_(a,b)		      \.db $2D,((a&$7F)+$80),b
0327+  0000             #define	BE2D_(a,b,c)	      \.db $2D,((a&$7F)+$80),((b&$7F)+$80),c
0328+  0000             #define	BE2D_(a,b,c,d)	      \.db $2D,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0329+  0000             #define	BE2D_(a,b,c,d,e)	      \.db $2D,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0330+  0000             
0331+  0000             #define	BE2E_(a)		      \.db $2E,a
0332+  0000             #define	BE2E_(a,b)		      \.db $2E,((a&$7F)+$80),b
0333+  0000             #define	BE2E_(a,b,c)	      \.db $2E,((a&$7F)+$80),((b&$7F)+$80),c
0334+  0000             #define	BE2E_(a,b,c,d)	      \.db $2E,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0335+  0000             #define	BE2E_(a,b,c,d,e)	      \.db $2E,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0336+  0000             
0337+  0000             #define	BE2F_(a)		      \.db $2F,a
0338+  0000             #define	BE2F_(a,b)		      \.db $2F,((a&$7F)+$80),b
0339+  0000             #define	BE2F_(a,b,c)	      \.db $2F,((a&$7F)+$80),((b&$7F)+$80),c
0340+  0000             #define	BE2F_(a,b,c,d)	      \.db $2F,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0341+  0000             #define	BE2F_(a,b,c,d,e)	      \.db $2F,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0342+  0000             
0343+  0000             ;********************************************************
0344+  0000             ;* Solenoid Macro Definition: Up to 15 Solenoids are Supported
0345+  0000             ;* 
0346+  0000             ;* The macro takes a coded value of the solenoid number 
0347+  0000             ;* and the number of IRQ's to leave the solenoid on.
0348+  0000             ;* You can define the solenoid number plus the time by using
0349+  0000             ;* the equates following this macro definition...
0350+  0000             ;* 
0351+  0000             ;* Example #1:  Turn on Solenoid #1 for 4 IRQ cycles
0352+  0000             ;*
0353+  0000             ;*          sol_1_on    .equ  $00+SOLENOID_ON_4_CYCLES
0354+  0000             ;*          sol_1_off   .equ  $00+SOLENOID_OFF
0355+  0000             ;* 
0356+  0000             ;* Then use the SOL_ macro...
0357+  0000             ;*
0358+  0000             ;*    Turn it on:       SOL_(sol_1_on)
0359+  0000             ;*    Turn it off:      SOL_(sol_1_off)
0360+  0000             ;*
0361+  0000             ;* Example #2:  Turn on Solenoid #15 indefinitely, and Solenoid #6 for 2 IRQ cycles
0362+  0000             ;*
0363+  0000             ;*          sol_15_on   .equ  $0E+SOLENOID_ON_LATCH
0364+  0000             ;*          sol_15_off  .equ  $0E+SOLENOID_OFF
0365+  0000             ;*
0366+  0000             ;*          sol_2_on    .equ  $01+SOLENOID_ON_2_CYCLES
0367+  0000             ;*          sol_2_off   .equ  $01+SOLENOID_OFF
0368+  0000             ;* 
0369+  0000             ;* Then use the SOL_ macro...
0370+  0000             ;*
0371+  0000             ;*    Turn them on:       SOL_(sol_15_on,sol_2_on)
0372+  0000             ;*    Turn them off:      SOL_(sol_15_off,sol_2_off)
0373+  0000             ;********************************************************
0374+  0000             #define	SOL_(a)		                  \.db $31,a
0375+  0000             #define	SOL_(a,b)		                  \.db $32,a,b
0376+  0000             #define 	SOL_(a,b,c)		                  \.db $33,a,b,c
0377+  0000             #define	SOL_(a,b,c,d)	                  \.db $34,a,b,c,d
0378+  0000             #define	SOL_(a,b,c,d,e)	                  \.db $35,a,b,c,d,e
0379+  0000             #define	SOL_(a,b,c,d,e,f)	                  \.db $36,a,b,c,d,e,f
0380+  0000             #define	SOL_(a,b,c,d,e,f,g)	            \.db $37,a,b,c,d,e,f,g
0381+  0000             #define	SOL_(a,b,c,d,e,f,g,h)	            \.db $38,a,b,c,d,e,f,g,h
0382+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i)	            \.db $39,a,b,c,d,e,f,g,h,i
0383+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j)	      \.db $3A,a,b,c,d,e,f,g,h,i,j
0384+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k)	      \.db $3B,a,b,c,d,e,f,g,h,i,j,k
0385+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l)	      \.db $3C,a,b,c,d,e,f,g,h,i,j,k,l
0386+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m)	\.db $3D,a,b,c,d,e,f,g,h,i,j,k,l,m
0387+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n)	\.db $3E,a,b,c,d,e,f,g,h,i,j,k,l,m,n
0388+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)	\.db $3F,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o
0389+  0000             
0390+  0000             ;********************************************************
0391+  0000             ;* some additional solenoid defines for timing
0392+  0000             ;* Use these in the top of your game definition to specify 
0393+  0000             ;* static lables for each solenoid
0394+  0000             ;********************************************************
0395+  0000             SOLENOID_ON_1_CYCLES       .equ  $20
0396+  0000             SOLENOID_ON_2_CYCLES       .equ  $40
0397+  0000             SOLENOID_ON_3_CYCLES       .equ  $60
0398+  0000             SOLENOID_ON_4_CYCLES       .equ  $80
0399+  0000             SOLENOID_ON_5_CYCLES       .equ  $A0
0400+  0000             SOLENOID_ON_6_CYCLES       .equ  $C0
0401+  0000             SOLENOID_ON_LATCH          .equ  $E0
0402+  0000             SOLENOID_OFF               .equ  $00
0403+  0000             
0404+  0000             ;********************************************************
0405+  0000             ;* Macros 40-43: Static Length, easy
0406+  0000             ;********************************************************
0407+  0000             #define	PTSND_(snd,count,unit)	\.db $40,snd      \ ADDPOINTS(count,unit)
0408+  0000             
0409+  0000             #define	PTCHIME_(count,unit)	\.db $41    \ ADDPOINTS(count,unit)
0410+  0000             
0411+  0000             #define	POINTS_(count,unit)	\.db $42    \ ADDPOINTS(count,unit)
0412+  0000             
0413+  0000             #define	PTSDIG_(count,unit)	\.db $43    \ ADDPOINTS(count,unit)
0414+  0000             
0415+  0000             #define     ADDPOINTS(count,unit)  \#if ((unit < 10) & (count <= 32))
0416+  0000             #defcont				      \	.error "Point unit must be multples of 10 and count must be less than 33"
0417+  0000             #defcont				      \#else
0418+  0000             #defcont					      \#if (unit == 10)
0419+  0000             #defcont					      \	.db (((count)<<3)&$F8)+1
0420+  0000             #defcont					      \#else 
0421+  0000             #defcont					      	\#if (unit == 100)
0422+  0000             #defcont						      \	.db (((count)<<3)&$F8)+2
0423+  0000             #defcont						      \#else 
0424+  0000             #defcont							      \#if (unit == 1000)
0425+  0000             #defcont							      \	.db (((count)<<3)&$F8)+3
0426+  0000             #defcont							      \#else 
0427+  0000             #defcont								      \#if (unit == 10000)
0428+  0000             #defcont								      \	.db (((count)<<3)&$F8)+4
0429+  0000             #defcont								      \#else 
0430+  0000             #defcont									      \#if (unit == 100000)
0431+  0000             #defcont									      \	.db (((count)<<3)&$F8)+5
0432+  0000             #defcont									      \#else 
0433+  0000             #defcont									      \	.error "Macros only support points under 1,000,000 points"
0434+  0000             #defcont									      \#endif
0435+  0000             #defcont								      \#endif
0436+  0000             #defcont							      \#endif
0437+  0000             #defcont						      \#endif
0438+  0000             #defcont					      \#endif
0439+  0000             #defcont				      \#endif
0440+  0000             
0441+  0000             
0442+  0000             
0443+  0000             ;********************************************************
0444+  0000             ;* Macros 44-4F: Define temporary execution of CPU code.
0445+  0000             ;*               The length of bytes to execute is in 
0446+  0000             ;*               the lower nibble and must be between
0447+  0000             ;*               4-f. Therefore, number of bytes to 
0448+  0000             ;*               execute must be between 2 and 13.
0449+  0000             :*
0450+  0000             ;* There are two macros defined here, the first is the
0451+  0000             ;* new style macro where it will automatically calculate
0452+  0000             ;* the number of opcode bytes that are executed. This 
0453+  0000             ;* style requires and end tag for the macro called EXEEND_
0454+  0000             ;* that marks where execution returns to WML7.
0455+  0000             ;*
0456+  0000             ;* The old style macro does not require an end tag but
0457+  0000             ;* does require you to calcuate the number of bytes that
0458+  0000             ;* will be executed as native 680X code. This is obviously
0459+  0000             ;* more tedious but I left it here for some reason. 
0460+  0000             ;********************************************************
0461+  0000             #define     EXE_              \.push *,FLAG_WML_EXE
0462+  0000             #defcont                      \.db $44
0463+  0000             
0464+  0000             #define     EXEEND_           \wml4_ .set *
0465+  0000             #defcont                      \.pop wml1_,wml2_
0466+  0000             #defcont                      \#if wml1_ == FLAG_WML_EXE
0467+  0000             #defcont                            \wml3_ .set wml4_-wml2_
0468+  0000             #defcont                            \#if (wml3_>14)|(wml3_<3)
0469+  0000             #defcont                            \     .error "Macro EXE_: Number of executed bytes must be between 2 and 15"
0470+  0000             #defcont                            \#else
0471+  0000             #defcont                            \     .org wml2_
0472+  0000             #defcont                            \     .db $44+wml3_-3
0473+  0000             #defcont                            \#endif
0474+  0000             #defcont                            \.org wml4_
0475+  0000             #defcont                      \#else
0476+  0000             #defcont                            \.error "EXE_END did not have a starting EXE_ code"
0477+  0000             #defcont                      \#endif
0478+  0000             
0479+  0000                
0480+  0000             #define	EXE_(a)		\#if (a>13)|(a<2)
0481+  0000             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0482+  0000             #defcont				\#else
0483+  0000             #defcont				\    .db ($44+a-2)
0484+  0000             #defcont				\#endif
0485+  0000             
0486+  0000             ;********************************************************
0487+  0000             ;* Macros 50-57:
0488+  0000             ;********************************************************
0489+  0000             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0490+  0000             #defcont				\	.db $50,((a*16)+b) 
0491+  0000             #defcont				\#else
0492+  0000             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0493+  0000             #defcont				\#endif
0494+  0000             
0495+  0000             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0496+  0000             #defcont				\	.db $51,((a*16)+b) 
0497+  0000             #defcont				\#else
0498+  0000             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0499+  0000             #defcont				\#endif
0500+  0000             
0501+  0000             #define	PRI_(a)		\.db $52,a
0502+  0000             
0503+  0000             #define	SLEEP_(a)		\#if (a<16)
0504+  0000             #defcont				\	.db ($70+a)
0505+  0000             #defcont				\#else
0506+  0000             #defcont				\	.db $53,a
0507+  0000             #defcont				\#endif
0508+  0000             
0509+  0000             #define	REMTHREAD_(a,b)	\.db $54,a,b
0510+  0000             
0511+  0000             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0512+  0000             
0513+  0000             #define 	JSR_(a)		\.db $56 \.dw a
0514+  0000             #define	JSRD_(a)		\.db $57 \.dw a
0515+  0000             
0516+  0000             ;*******************************************************************
0517+  0000             ;* Branch Macros: 58-5B
0518+  0000             ;*******************************************************************
0519+  0000             #define     IFLOC_(type,vars)    \ .push  *, vars, type        
0520+  0000             
0521+  0000             ;*******************************************************************
0522+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0523+  0000             ;*        an 'XXEND_' statement.                                    *
0524+  0000             ;******************************************************************* 
0525+  0000             #define     BEGIN_	      IFLOC_(FLAG_WML_BEGIN,0)
0526+  0000             
0527+  0000             ;*******************************************************************
0528+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0529+  0000             ;*            pulls the pc location of the beginning of the loop   *
0530+  0000             ;*            and verifies that the 'type' is correct.             *
0531+  0000             ;*******************************************************************
0532+  0000             #define 	LOGIC_LOOPEND_(vars)	\ .pop wml1_, wml2_, wml3_
0533+  0000             #defcont						\wml2_ .set vars
0534+  0000             #defcont						\wml4_ .set *
0535+  0000             #defcont						\#if (wml1_ & FLAG_WML_BEGIN)
0536+  0000             #defcont							\#if ((wml4_-wml3_) <= 127)
0537+  0000             #defcont								\ .org wml4_-1
0538+  0000             #defcont								\ .db wml3_-wml4_
0539+  0000             #defcont								\ .org wml4_
0540+  0000             #defcont							\#else
0541+  0000             #defcont								\ .error "Loop Branch out of Range."
0542+  0000             #defcont							\#endif
0543+  0000             #defcont						\#else
0544+  0000             #defcont							\ .error "Inappropriate End for BEGIN Loop."
0545+  0000             #defcont						\#endif
0546+  0000             
0547+  0000             ;*******************************************************************
0548+  0000             ;* Basic Loop
0549+  0000             ;*******************************************************************
0550+  0000             #define	LOOP_		\ .pop wml1_, wml2_, wml3_ \ JMPR_(wml3_)
0551+  0000             
0552+  0000             ;*******************************************************************
0553+  0000             ;* Conditional Looping
0554+  0000             ;*******************************************************************
0555+  0000             #define	EQEND_(z)						BNER_(z,*+3) \ LOGIC_LOOPEND_(1)		
0556+  0000             #define	EQEND_(z,y)						BNER_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0557+  0000             #define	EQEND_(z,y,x)					BNER_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0558+  0000             #define	EQEND_(z,y,x,w)					BNER_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0559+  0000             #define	EQEND_(z,y,x,w,v)					BNER_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0560+  0000             #define     EQEND_(z,y,x,w,v,u)				BNER_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0561+  0000             #define     EQEND_(z,y,x,w,v,u,t)			     	BNER_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0562+  0000             #define     EQEND_(z,y,x,w,v,u,t,s)     			BNER_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0563+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r)     		BNER_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0564+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q)     		BNER_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0565+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p)     		BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0566+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0567+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0568+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0569+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0570+  0000             
0571+  0000             #define	NEEND_(z)						BEQR_(z,*+3) \ LOGIC_LOOPEND_(1)		
0572+  0000             #define	NEEND_(z,y)						BEQR_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0573+  0000             #define	NEEND_(z,y,x)					BEQR_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0574+  0000             #define	NEEND_(z,y,x,w)					BEQR_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0575+  0000             #define	NEEND_(z,y,x,w,v)					BEQR_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0576+  0000             #define     NEEND_(z,y,x,w,v,u)				BEQR_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0577+  0000             #define     NEEND_(z,y,x,w,v,u,t)			     	BEQR_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0578+  0000             #define     NEEND_(z,y,x,w,v,u,t,s)     			BEQR_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0579+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r)     		BEQR_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0580+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q)     		BEQR_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0581+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p)     		BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0582+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0583+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0584+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0585+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0586+  0000             ;*******************************************************************
0587+  0000             ;* IFxxx: These are the standard 'if' statements, they will always  
0588+  0000             ;*        be of type FLAG_WML_IF                                           
0589+  0000             ;*******************************************************************
0590+  0000             #define     IFEQR_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BNER_(z,*+3)     
0591+  0000             #define     IFEQR_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BNER_(z,y,*+3)   
0592+  0000             #define     IFEQR_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BNER_(z,y,x,*+3) 
0593+  0000             #define     IFEQR_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BNER_(z,y,x,w,*+3)   
0594+  0000             #define     IFEQR_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BNER_(z,y,x,w,v,*+3) 
0595+  0000             #define     IFEQR_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BNER_(z,y,x,w,v,u,*+3) 
0596+  0000             #define     IFEQR_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BNER_(z,y,x,w,v,u,t,*+3) 
0597+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BNER_(z,y,x,w,v,u,t,s,*+3) 
0598+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BNER_(z,y,x,w,v,u,t,s,r,*+3)
0599+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BNER_(z,y,x,w,v,u,t,s,r,q,*+3)
0600+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0601+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0602+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0603+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0604+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0605+  0000             
0606+  0000             #define     IFNER_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BEQR_(z,*+3)     
0607+  0000             #define     IFNER_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BEQR_(z,y,*+3)   
0608+  0000             #define     IFNER_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BEQR_(z,y,x,*+3) 
0609+  0000             #define     IFNER_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BEQR_(z,y,x,w,*+3) 
0610+  0000             #define     IFNER_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BEQR_(z,y,x,w,v,*+3) 
0611+  0000             #define     IFNER_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BEQR_(z,y,x,w,v,u,*+3) 
0612+  0000             #define     IFNER_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BEQR_(z,y,x,w,v,u,t,*+3) 
0613+  0000             #define     IFNER_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BEQR_(z,y,x,w,v,u,t,s,*+3) 
0614+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BEQR_(z,y,x,w,v,u,t,s,r,*+3)
0615+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BEQR_(z,y,x,w,v,u,t,s,r,q,*+3)
0616+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0617+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0618+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0619+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0620+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0621+  0000             
0622+  0000             #define     ENDIF_ \wml1_ .set *
0623+  0000             #defcont		 \ .pop wml3_, wml5_, wml4_
0624+  0000             #defcont		 \#if (wml3_ & FLAG_WML_BEGIN)==0
0625+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0626+  0000             #defcont  			      \wml2_ .set wml1_-wml4_-wml5_-2
0627+  0000             #defcont			      \#if wml2_+127 < 0
0628+  0000             #defcont				      \ .error "Branch Range < -127"
0629+  0000             #defcont			      \#else
0630+  0000             #defcont				      \#if wml2_-128 > 0
0631+  0000             #defcont					      \ .error "Branch Range > 128"
0632+  0000             #defcont				      \#else
0633+  0000             #defcont    				      \ .org wml4_+wml5_+1
0634+  0000             #defcont					      \ .byte wml2_
0635+  0000             #defcont				      \#endif
0636+  0000             #defcont			      \#endif
0637+  0000             #defcont                \#else
0638+  0000             #defcont                      \ .org  wml4_-2	
0639+  0000             #defcont				\ JMP_(wml1_)
0640+  0000             #defcont                      \ .error "123: Not Tested"
0641+  0000             #defcont                \#endif
0642+  0000             #defcont			\ .org	wml1_
0643+  0000             #defcont		 \#else
0644+  0000             #defcont			\.error "Wrong Endtype for IFXXR_ block"
0645+  0000             #defcont		 \#endif
0646+  0000             
0647+  0000             #define	ELSE_	\wml1_ .set $
0648+  0000             #defcont		\ .pop wml3_, wml5_, wml4_
0649+  0000             #defcont		\#if (wml3_ & FLAG_WML_BEGIN)==0
0650+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0651+  0000             #defcont				\ .org wml4_+wml5_+1
0652+  0000             #defcont				\wml2_ .set wml1_-wml4_
0653+  0000             #defcont					\#if wml2_+127 < 0
0654+  0000             #defcont						\ .org wml1_
0655+  0000             #defcont						\.push wml1_+3, wml5_, FLAG_WML_ELSE
0656+  0000             #defcont						\ JMP_($)
0657+  0000             #defcont                                  \ .error "(124)ELSE_: Not Tested with long JMP"
0658+  0000             #defcont					\#else
0659+  0000             #defcont						\#if wml2_-128>0
0660+  0000             #defcont							\ .org wml1_
0661+  0000             #defcont							\.push wml1_+3, wml5_, FLAG_WML_ELSE
0662+  0000             #defcont							\ JMP_($)
0663+  0000             #defcont                                  \ .error "(125)ELSE_: Not Tested with long JMP"
0664+  0000             #defcont						\#else
0665+  0000             #defcont							\.push wml1_-wml5_, wml5_, FLAG_WML_IF
0666+  0000             #defcont							\ .byte wml2_-wml5_
0667+  0000             #defcont							\ .org wml1_
0668+  0000             #defcont							\ JMPR_($+1)
0669+  0000             #defcont							\ .org wml1_+2
0670+  0000             #defcont						\#endif
0671+  0000             #defcont					\#endif
0672+  0000             #defcont			\#else
0673+  0000             #defcont				\.error "Duplicate ELSE Statement"
0674+  0000             #defcont			\#endif
0675+  0000             #defcont		\#else
0676+  0000             #defcont			\ .error "Misplaced Else"
0677+  0000             #defcont		\#endif
0678+  0000             
0679+  0000             #define     BEQR_(p1__,ba__)     \#if $+3-ba__ < 128
0680+  0000             #defcont                                 \.db $5A,p1__,ba__-$-3
0681+  0000             #defcont				\#else
0682+  0000             #defcont					\#if ba__-$+3 < 127
0683+  0000             #defcont                                 \.db $5A,p1__,$+3-ba__
0684+  0000             #defcont					\#else
0685+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0686+  0000             #defcont					\#endif
0687+  0000             #defcont				\#endif
0688+  0000             
0689+  0000             #define     BEQR_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0690+  0000             #defcont                                 \.db $5A,p1__,p2__,ba__-$-4
0691+  0000             #defcont				\#else
0692+  0000             #defcont					\#if ba__-$+4 < 127
0693+  0000             #defcont                                 \.db $5A,p1__,p2__,$+4-ba__
0694+  0000             #defcont					\#else
0695+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0696+  0000             #defcont					\#endif
0697+  0000             #defcont				\#endif
0698+  0000             
0699+  0000             #define     BEQR_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0700+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,ba__-$-5
0701+  0000             #defcont				\#else
0702+  0000             #defcont					\#if ba__-$+5 < 127
0703+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,$+5-ba__
0704+  0000             #defcont					\#else
0705+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0706+  0000             #defcont					\#endif
0707+  0000             #defcont				\#endif
0708+  0000             
0709+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0710+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,ba__-$-6
0711+  0000             #defcont				\#else
0712+  0000             #defcont					\#if ba__-$+6 < 127
0713+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,$+6-ba__
0714+  0000             #defcont					\#else
0715+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0716+  0000             #defcont					\#endif
0717+  0000             #defcont				\#endif
0718+  0000             
0719+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0720+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0721+  0000             #defcont				\#else
0722+  0000             #defcont					\#if ba__-$+7 < 127
0723+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0724+  0000             #defcont					\#else
0725+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0726+  0000             #defcont					\#endif
0727+  0000             #defcont				\#endif
0728+  0000             
0729+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0730+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0731+  0000             #defcont				\#else
0732+  0000             #defcont					\#if ba__-$+8 < 127
0733+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0734+  0000             #defcont					\#else
0735+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0736+  0000             #defcont					\#endif
0737+  0000             #defcont				\#endif
0738+  0000             
0739+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0740+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0741+  0000             #defcont				\#else
0742+  0000             #defcont					\#if ba__-$+9 < 127
0743+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0744+  0000             #defcont					\#else
0745+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0746+  0000             #defcont					\#endif
0747+  0000             #defcont				\#endif
0748+  0000             
0749+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0750+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0751+  0000             #defcont				\#else
0752+  0000             #defcont					\#if ba__-$+10 < 127
0753+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0754+  0000             #defcont					\#else
0755+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0756+  0000             #defcont					\#endif
0757+  0000             #defcont				\#endif
0758+  0000             
0759+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0760+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0761+  0000             #defcont				\#else
0762+  0000             #defcont					\#if ba__-$+11 < 127
0763+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0764+  0000             #defcont					\#else
0765+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0766+  0000             #defcont					\#endif
0767+  0000             #defcont				\#endif
0768+  0000             
0769+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0770+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0771+  0000             #defcont				\#else
0772+  0000             #defcont					\#if ba__-$+12 < 127
0773+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0774+  0000             #defcont					\#else
0775+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0776+  0000             #defcont					\#endif
0777+  0000             #defcont				\#endif
0778+  0000             
0779+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0780+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0781+  0000             #defcont				\#else
0782+  0000             #defcont					\#if ba__-$+13 < 127
0783+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0784+  0000             #defcont					\#else
0785+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0786+  0000             #defcont					\#endif
0787+  0000             #defcont				\#endif
0788+  0000             
0789+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0790+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0791+  0000             #defcont				\#else
0792+  0000             #defcont					\#if ba__-$+14 < 127
0793+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0794+  0000             #defcont					\#else
0795+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0796+  0000             #defcont					\#endif
0797+  0000             #defcont				\#endif
0798+  0000             
0799+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0800+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0801+  0000             #defcont				\#else
0802+  0000             #defcont					\#if ba__-$+15 < 127
0803+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0804+  0000             #defcont					\#else
0805+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0806+  0000             #defcont					\#endif
0807+  0000             #defcont				\#endif
0808+  0000             
0809+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0810+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0811+  0000             #defcont				\#else
0812+  0000             #defcont					\#if ba__-$+16 < 127
0813+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0814+  0000             #defcont					\#else
0815+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0816+  0000             #defcont					\#endif
0817+  0000             #defcont				\#endif
0818+  0000             
0819+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
0820+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
0821+  0000             #defcont				\#else
0822+  0000             #defcont					\#if ba__-$+17 < 127
0823+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
0824+  0000             #defcont					\#else
0825+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0826+  0000             #defcont					\#endif
0827+  0000             #defcont				\#endif
0828+  0000             
0829+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
0830+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
0831+  0000             #defcont				\#else
0832+  0000             #defcont					\#if ba__-$+18 < 127
0833+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
0834+  0000             #defcont					\#else
0835+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0836+  0000             #defcont					\#endif
0837+  0000             #defcont				\#endif
0838+  0000             
0839+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
0840+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
0841+  0000             #defcont				\#else
0842+  0000             #defcont					\#if ba__-$+19 < 127
0843+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
0844+  0000             #defcont					\#else
0845+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0846+  0000             #defcont					\#endif
0847+  0000             #defcont				\#endif
0848+  0000             
0849+  0000             #define     BEQA_(p1__,ba__)     \.db $58,p1__ \.dw ba__
0850+  0000             #define     BEQA_(p1__,p2__,ba__)     \.db $58,p1__,p2__ \.dw ba__
0851+  0000             #define     BEQA_(p1__,p2__,p3__,ba__)     \.db $58,p1__,p2__,p3__ \.dw ba__
0852+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,ba__)     \.db $58,p1__,p2__,p3__,p4__ \.dw ba__
0853+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__ \.dw ba__
0854+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
0855+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
0856+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
0857+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
0858+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
0859+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
0860+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
0861+  0000             
0862+  0000             #define     BNER_(p1__,ba__)     \#if $+3-ba__ < 128
0863+  0000             #defcont                                 \.db $5B,p1__,ba__-$-3
0864+  0000             #defcont				\#else
0865+  0000             #defcont					\#if ba__-$+3 < 127
0866+  0000             #defcont                                 \.db $5B,p1__,$+3-ba__
0867+  0000             #defcont					\#else
0868+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0869+  0000             #defcont					\#endif
0870+  0000             #defcont				\#endif
0871+  0000             
0872+  0000             #define     BNER_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0873+  0000             #defcont                                 \.db $5B,p1__,p2__,ba__-$-4
0874+  0000             #defcont				\#else
0875+  0000             #defcont					\#if ba__-$+4 < 127
0876+  0000             #defcont                                 \.db $5B,p1__,p2__,$+4-ba__
0877+  0000             #defcont					\#else
0878+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0879+  0000             #defcont					\#endif
0880+  0000             #defcont				\#endif
0881+  0000             
0882+  0000             #define     BNER_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0883+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,ba__-$-5
0884+  0000             #defcont				\#else
0885+  0000             #defcont					\#if ba__-$+5 < 127
0886+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,$+5-ba__
0887+  0000             #defcont					\#else
0888+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0889+  0000             #defcont					\#endif
0890+  0000             #defcont				\#endif
0891+  0000             
0892+  0000             #define     BNER_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0893+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,ba__-$-6
0894+  0000             #defcont				\#else
0895+  0000             #defcont					\#if ba__-$+6 < 127
0896+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,$+6-ba__
0897+  0000             #defcont					\#else
0898+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0899+  0000             #defcont					\#endif
0900+  0000             #defcont				\#endif
0901+  0000             
0902+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0903+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0904+  0000             #defcont				\#else
0905+  0000             #defcont					\#if ba__-$+7 < 127
0906+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0907+  0000             #defcont					\#else
0908+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0909+  0000             #defcont					\#endif
0910+  0000             #defcont				\#endif
0911+  0000             
0912+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0913+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0914+  0000             #defcont				\#else
0915+  0000             #defcont					\#if ba__-$+8 < 127
0916+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0917+  0000             #defcont					\#else
0918+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0919+  0000             #defcont					\#endif
0920+  0000             #defcont				\#endif
0921+  0000             
0922+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0923+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0924+  0000             #defcont				\#else
0925+  0000             #defcont					\#if ba__-$+9 < 127
0926+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0927+  0000             #defcont					\#else
0928+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0929+  0000             #defcont					\#endif
0930+  0000             #defcont				\#endif
0931+  0000             
0932+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0933+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0934+  0000             #defcont				\#else
0935+  0000             #defcont					\#if ba__-$+10 < 127
0936+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0937+  0000             #defcont					\#else
0938+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0939+  0000             #defcont					\#endif
0940+  0000             #defcont				\#endif
0941+  0000             
0942+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0943+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0944+  0000             #defcont				\#else
0945+  0000             #defcont					\#if ba__-$+11 < 127
0946+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0947+  0000             #defcont					\#else
0948+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0949+  0000             #defcont					\#endif
0950+  0000             #defcont				\#endif
0951+  0000             
0952+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0953+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0954+  0000             #defcont				\#else
0955+  0000             #defcont					\#if ba__-$+12 < 127
0956+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0957+  0000             #defcont					\#else
0958+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0959+  0000             #defcont					\#endif
0960+  0000             #defcont				\#endif
0961+  0000             
0962+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0963+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0964+  0000             #defcont				\#else
0965+  0000             #defcont					\#if ba__-$+13 < 127
0966+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0967+  0000             #defcont					\#else
0968+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0969+  0000             #defcont					\#endif
0970+  0000             #defcont				\#endif
0971+  0000             
0972+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0973+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0974+  0000             #defcont				\#else
0975+  0000             #defcont					\#if ba__-$+14 < 127
0976+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0977+  0000             #defcont					\#else
0978+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0979+  0000             #defcont					\#endif
0980+  0000             #defcont				\#endif
0981+  0000             
0982+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0983+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0984+  0000             #defcont				\#else
0985+  0000             #defcont					\#if ba__-$+15 < 127
0986+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0987+  0000             #defcont					\#else
0988+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0989+  0000             #defcont					\#endif
0990+  0000             #defcont				\#endif
0991+  0000             
0992+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0993+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0994+  0000             #defcont				\#else
0995+  0000             #defcont					\#if ba__-$+16 < 127
0996+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0997+  0000             #defcont					\#else
0998+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0999+  0000             #defcont					\#endif
1000+  0000             #defcont				\#endif
1001+  0000             
1002+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
1003+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
1004+  0000             #defcont				\#else
1005+  0000             #defcont					\#if ba__-$+17 < 127
1006+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
1007+  0000             #defcont					\#else
1008+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1009+  0000             #defcont					\#endif
1010+  0000             #defcont				\#endif
1011+  0000             
1012+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
1013+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
1014+  0000             #defcont				\#else
1015+  0000             #defcont					\#if ba__-$+18 < 127
1016+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
1017+  0000             #defcont					\#else
1018+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1019+  0000             #defcont					\#endif
1020+  0000             #defcont				\#endif
1021+  0000             
1022+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
1023+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
1024+  0000             #defcont				\#else
1025+  0000             #defcont					\#if ba__-$+19 < 127
1026+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
1027+  0000             #defcont					\#else
1028+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1029+  0000             #defcont					\#endif
1030+  0000             #defcont				\#endif
1031+  0000             
1032+  0000             #define     BNEA_(p1__,ba__)     \.db $59,p1__ \.dw ba__
1033+  0000             #define     BNEA_(p1__,p2__,ba__)     \.db $59,p1__,p2__ \.dw ba__
1034+  0000             #define     BNEA_(p1__,p2__,p3__,ba__)     \.db $59,p1__,p2__,p3__ \.dw ba__
1035+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,ba__)     \.db $59,p1__,p2__,p3__,p4__ \.dw ba__
1036+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__ \.dw ba__
1037+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
1038+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
1039+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
1040+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
1041+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
1042+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
1043+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
1044+  0000             ;**********************************************************
1045+  0000             ;* Macros 5C-5F
1046+  0000             ;**********************************************************
1047+  0000             #define	JMPD_(a)		.db $5c \.dw a
1048+  0000             
1049+  0000             #define	SWSET_(a)		      .db $5d,a
1050+  0000             #define	SWSET_(a,b)		      .db $5d,((a&$7F)+$80),b
1051+  0000             #define	SWSET_(a,b,c)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),c
1052+  0000             #define	SWSET_(a,b,c,d)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
1053+  0000             #define	SWSET_(a,b,c,d,e)	      .db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
1054+  0000             #define	SWSET_(a,b,c,d,e,f)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
1055+  0000             #define	SWSET_(a,b,c,d,e,f,g)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
1056+  0000             #define	SWSET_(a,b,c,d,e,f,g,h)	.db $5d,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7F)+$80),h
1057+  0000             
1058+  0000             #define	SWCLR_(a)		      .db $5e,a
1059+  0000             #define	SWCLR_(a,b)		      .db $5e,((a&$7F)+$80),b
1060+  0000             #define	SWCLR_(a,b,c)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),c
1061+  0000             #define	SWCLR_(a,b,c,d)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
1062+  0000             #define	SWCLR_(a,b,c,d,e)	      .db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
1063+  0000             #define	SWCLR_(a,b,c,d,e,f)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
1064+  0000             #define	SWCLR_(a,b,c,d,e,f,g)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
1065+  0000             #define	SWCLR_(a,b,c,d,e,f,g,h)	.db $5e,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7F)+$80),h
1066+  0000             
1067+  0000             #define	JMP_(a)		.db $5f \.dw a
1068+  0000             
1069+  0000             ;**********************************************************
1070+  0000             ;* Macro 6X:
1071+  0000             ;**********************************************************
1072+  0000             #define	SLEEPI_(a)		.db ($60+(a&$0f))
1073+  0000             
1074+  0000             ;**********************************************************
1075+  0000             ;* Macro 7X: 
1076+  0000             ;**********************************************************
1077+  0000             ;See SLEEP macro previous...
1078+  0000             
1079+  0000             ;**********************************************************
1080+  0000             ;* Macro 8X:
1081+  0000             ;**********************************************************
1082+  0000             #define 	JMPR_(a)		.db ($80+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1083+  0000             
1084+  0000             ;**********************************************************
1085+  0000             ;* Macro 9X:
1086+  0000             ;**********************************************************
1087+  0000             #define 	JSRR_(a)		.db ($90+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1088+  0000             
1089+  0000             ;**********************************************************
1090+  0000             ;* Macro AX:
1091+  0000             ;**********************************************************
1092+  0000             #define 	JSRDR_(a)		.db ($a0+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1093+  0000             
1094+  0000             ;**********************************************************
1095+  0000             ;* Macro BX: Add NextByte to RAM LSD(command) 
1096+  0000             ;**********************************************************
1097+  0000             #define 	ADDRAM_(ramloc,data)	.db ($b0+(ramloc&$0f)),data
1098+  0000             
1099+  0000             ;**********************************************************
1100+  0000             ;* Macro CX: Set NextByte to RAM LSD(command) 
1101+  0000             ;**********************************************************
1102+  0000             #define 	SETRAM_(ramloc,data)	.db ($c0+ramloc),data
1103+  0000             
1104+  0000             ;**********************************************************
1105+  0000             ;* Macro DX: Play Index Sound (NextByte)Times  
1106+  0000             ;**********************************************************
1107+  0000             #define	RSND_(snd,times)		.db $d0+(snd&0F),times
1108+  0000             
1109+  0000             ;**********************************************************
1110+  0000             ;* Macro EX,FX: Play Index Sound (NextByte)Times  
1111+  0000             ;**********************************************************
1112+  0000             #define	SSND_(a)		\#if (a<$20)
1113+  0000             #defcont				\	.db $e0+a
1114+  0000             #defcont				\#else
1115+  0000             #defcont				\	.error "Macro SSND_: Parameters must be less than $20"
1116+  0000             #defcont				\#endif
0008   0000             #include  "7gen.asm"	;Level 7 general defines
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Level 7 General Macros
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             .module 7gen
0012+  0000             .msfirst
0013+  0000             ;*****************************************************************************
0014+  0000             ;* This is where you should put general timesaving macros above and beyond
0015+  0000             ;* the base logic and WML7 macros...
0016+  0000             ;*
0017+  0000             ;* An example is repetitive code such as...
0018+  0000             ;*
0019+  0000             ;* ldx	#gj_2B
0020+  0000             ;* jsr	newthread_06
0021+  0000             ;*
0022+  0000             ;* Is both long and it is easy to forget to reference the label properly, it
0023+  0000             ;* can be replaced with..
0024+  0000             ;*
0025+  0000             ;* NEWTHREAD(gj_2B) 
0026+  0000             ;* 
0027+  0000             ;* By using the macro defined below...
0028+  0000             ;*****************************************************************************
0029+  0000             
0030+  0000             #define	NEWTHREAD(x)	\ ldx #x	\ jsr newthread_06
0031+  0000             #define     NEWTHREAD_JMP(x)	\ ldx #x	\ jmp newthread_06
0009   0000             ;--------------------------------------------------------------
0010   0000             ; GAME RAM Locations:
0011   0000             ;
0012   0000             ; $02 - Last Random Drop Target
0013   0000             ; $03 - Not Used?
0014   0000             ; $04 - Not Used?
0015   0000             ; $05 - Not Used?
0016   0000             ; $06 - Not Used?
0017   0000             ; $07 - Not Used?
0018   0000             ; $08 - Outhole Bonus Delay Value
0019   0000             ; $09 - Not Used?
0020   0000             ; $0a - Current Timer Value for display
0021   0000             ; $0b - Background Sound Flag (00=constant,01=increment)
0022   0000             ; $0c - GI Counter
0023   0000             ; $0d - Temp holder for Multiball timer animation
0024   0000             ; $0e	- Bell Counter
0025   0000             ; $0f - Buzzer Counter
0026   0000             ;--------------------------------------------------
0027   0000             ; Extra RAM Locations Used:
0028   0000             ; 
0029   0000             ; $00E0: Double Trouble Value ($00,$01,$02,$04,$08,$16)
0030   0000             ; $00E1: Comma Flags Temp Holder
0031   0000             ;
0032   0000             ;
0033   0000             ;--------------------------------------------------
0034   0000             ; Game Bit Definitions:
0035   0000             ; 1.1(00) - Set when game is in multiball fancy display
0036   0000             ; 1.2(01) - Set when lock is lit?
0037   0000             ; 1.3(02)
0038   0000             ; 1.4(03)
0039   0000             ; 1.5(04) - Not Used?
0040   0000             ; 1.6(05) - Not Used?
0041   0000             ; 1.7(06) - Not Used?
0042   0000             ; 1.8(07) - Not Used?
0043   0000             ; 2.1(08) - Not Used?
0044   0000             ; 2.2(09) - Not Used?
0045   0000             ; 2.3(0A) - Not Used?
0046   0000             ; 2.4(0B) - Not Used?
0047   0000             ; 2.5(0C) - Not Used?
0048   0000             ; 2.6(0D) - Not Used?
0049   0000             ; 2.7(0E) - Not Used?
0050   0000             ; 2.8(0F) - Game Play Disable: This is set when a player is being initialized
0051   0000             ; 3.1(10)
0052   0000             ; 3.2(11) - Tilt Timer: Set for 2.5 seconds after a plumb bob tilt
0053   0000             ; 3.3(12) - Double Trouble: Set when player has double trouble lit
0054   0000             ; 3.4(13) - Mini Playfied: Set when the Mini-PF is active
0055   0000             ; 3.5(14) - Eject Hole Bit: Set for upper eject, clear for lower eject
0056   0000             ; 3.6(15) - Outhole: Set when ball enters outhole, cleared when ejected to shooter
0057   0000             ; 3.7(16)
0058   0000             ; 3.8(17)
0059   0000             ; 4.1(18)
0060   0000             ; 4.2(19)
0061   0000             ; 4.3(1A) - Lower Loop Switch: This bit is set for a number of cycles looking for the upper loop
0062   0000             ; 4.4(1B) - Upper Loop Switch: This bit is set for a number of cycles looking for the lower loop
0063   0000             ; 4.5(1C)
0064   0000             ; 4.6(1D)
0065   0000             ; 4.7(1E) - Playfield Entry Flag
0066   0000             ; 4.8(1F) - Multiball Flag: Set when two balls are in play?
0067   0000             ; 5.1(20) - Replay has been awarded if set
0068   0000             ; 5.2(21)
0069   0000             ; 5.3(22) - Fancy Bell Active
0070   0000             ; 5.4(23)
0071   0000             ; 5.5(24)
0072   0000             ; 5.6(25)
0073   0000             ; 5.7(26)
0074   0000             ; 5.8(27) - Set when timer counting down
0075   0000             ; 6.1(28)
0076   0000             ; 6.2(29)
0077   0000             ; 6.3(2A)
0078   0000             ; 6.4(2B)
0079   0000             ; 6.5(2C)
0080   0000             ; 6.6(2D) - Left Magnet Active
0081   0000             ; 6.7(2E) - Right Magnet Active
0082   0000             ; 6.8(2F)
0083   0000             ; 7.1(30)
0084   0000             ; 7.2(31)
0085   0000             ; 7.3(32)
0086   0000             ; 7.4(33)
0087   0000             ; 7.5(34)
0088   0000             ; 7.6(35)
0089   0000             ; 7.7(36)
0090   0000             ; 7.8(37)
0091   0000             ; 8.1(38)
0092   0000             ; 8.2(39)
0093   0000             ; 8.3(3A)
0094   0000             ; 8.4(3B)
0095   0000             ; 8.5(3C)
0096   0000             ; 8.6(3D)
0097   0000             ; 8.7(3E)
0098   0000             ; 8.8(3F)
0099   0000             ;
0100   0000             ;*************************************
0101   0000             ;* Thread ID's
0102   0000             ;*************************************
0103   0000             ;* $05 - Fancy Bell, DT Switches
0104   0000             ;* $09 - Magnet Threads
0105   0000             ;* $30 - Upper Drop Target
0106   0000             ;* $43 - Attract Mode
0107   0000             ;* $60 - Lock Lit
0108   0000             ;* $E0 - Backgroud Sound
0109   0000             ;*
0110   0000             ;*
0111   0000             ;*
0112   0000             ;*************************************
0113   0000             ;* Define Our Solenoids and the
0114   0000             ;* time they should be on for each
0115   0000             ;* trigger.
0116   0000             ;*************************************
0117   0000             outhole_on        .equ	$00+SOLENOID_ON_2_CYCLES
0118   0000             outhole_off       .equ	$00+SOLENOID_OFF
0119   0000             trough_on         .equ	$01+SOLENOID_ON_2_CYCLES
0120   0000             trough_off        .equ	$01+SOLENOID_OFF
0121   0000             gi_on	            .equ	$02+SOLENOID_ON_LATCH
0122   0000             gi_off            .equ  $02+SOLENOID_OFF
0123   0000             dtleft_on         .equ	$03+SOLENOID_ON_3_CYCLES
0124   0000             dtleft_off        .equ	$03+SOLENOID_OFF
0125   0000             dtright_on        .equ	$04+SOLENOID_ON_3_CYCLES
0126   0000             dtright_off       .equ	$04+SOLENOID_OFF
0127   0000             buzzer_on         .equ	$05+SOLENOID_ON_LATCH
0128   0000             buzzer_off        .equ	$05+SOLENOID_OFF
0129   0000             lowereject_on     .equ	$06+SOLENOID_ON_2_CYCLES
0130   0000             lowereject_off    .equ	$06+SOLENOID_OFF
0131   0000             uppereject_on     .equ	$07+SOLENOID_ON_2_CYCLES
0132   0000             uppereject_off    .equ	$07+SOLENOID_OFF
0133   0000             dt1_on	      .equ	$08+SOLENOID_ON_2_CYCLES
0134   0000             dt1_off 	      .equ	$08+SOLENOID_OFF
0135   0000             dt2_on            .equ	$09+SOLENOID_ON_2_CYCLES
0136   0000             dt2_off           .equ	$09+SOLENOID_OFF
0137   0000             dt3_on            .equ	$0A+SOLENOID_ON_2_CYCLES
0138   0000             dt3_off    	      .equ	$0A+SOLENOID_OFF
0139   0000             dt4_on	      .equ	$0B+SOLENOID_ON_2_CYCLES
0140   0000             dt4_off	      .equ	$0B+SOLENOID_OFF
0141   0000             dt5_on	      .equ	$0C+SOLENOID_ON_2_CYCLES
0142   0000             dt5_off	      .equ	$0C+SOLENOID_OFF
0143   0000             dtrelease_on	.equ	$0D+SOLENOID_ON_3_CYCLES
0144   0000             dtrelease_off     .equ	$0D+SOLENOID_OFF
0145   0000             bell_on_short     .equ	$0E+SOLENOID_ON_6_CYCLES
0146   0000             bell_on	      .equ	$0E+SOLENOID_ON_LATCH
0147   0000             bell_off	      .equ	$0E+SOLENOID_OFF
0148   0000             minikick_on       .equ	$13+SOLENOID_ON_1_CYCLES
0149   0000             minikick_on_hard  .equ	$13+SOLENOID_ON_2_CYCLES
0150   0000             minikick_off      .equ	$13+SOLENOID_OFF
0151   0000             leftmag_on        .equ	$14+SOLENOID_ON_LATCH
0152   0000             leftmag_off       .equ	$14+SOLENOID_OFF
0153   0000             rightmag_on       .equ	$15+SOLENOID_ON_LATCH
0154   0000             rightmag_off      .equ	$15+SOLENOID_OFF
0155   0000             flippers_on       .equ	$18+SOLENOID_ON_LATCH
0156   0000             flippers_off      .equ	$18+SOLENOID_OFF
0157   0000             ;******************************************************
0158   0000             
0159   D800             	.org $d800
0160   D800             
0161   D800             ;******************************************************
0162   D800             ;* FancyBell - This is the ring pattern that jungle 
0163   D800             ;*             Lord plays on replays. It is the standard
0164   D800             ;*             
0165   D800             ;*             Shave-and-a-hair-cut
0166   D800             ;*
0167   D800             ;*             pattern...
0168   D800             ;******************************************************
0169   D800 BD F3 AB    fancybell		jsr	macro_start
0170   D803             			PRI_($05)				;Priority=#05
0170   D803 52 05       
0171   D805             			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0171   D805             
0171   D805             
0171   D805             
0171   D805 5AFCFFD8F2F0
0171   D80B 00FB
0171   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0171   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0171   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0171   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0171   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0171   D80D~            			IFNER_($FC,$FF,$D8,$F2,$F0,$00)	;BEQR_(#F0 & ADJ#8)==#0 
0171   D80D             
0172   D80D             				SOL_(bell_on_short)	      ;Turn ON Sol#15:bell
0172   D80D 31 CE       
0173   D80F             			ENDIF_
0173   D80F             
0173   D80F             
0173   D80F             
0173   D80F             
0173   D80F             
0173   D80F~            			ENDIF_
0173   D80F~            			ENDIF_
0173   D80F             
0173   D80F~            			ENDIF_
0173   D80F~            			ENDIF_
0173   D80F             
0173   D80C             
0173   D80C 02          
0173   D80D             
0173   D80D             
0173   D80D~            			ENDIF_
0173   D80D~            			ENDIF_
0173   D80D~            			ENDIF_
0173   D80D~            			ENDIF_
0173   D80D~            			ENDIF_
0173   D80D             
0173   D80F             
0173   D80F~            			ENDIF_
0173   D80F~            			ENDIF_
0173   D80F             
0174   D80F             			BITON_($E0,$62)			;Turn ON: Bit#20, Bit#22
0174   D80F 10 E0 62    
0175   D812 90          			JSRR_(gi_bell_long)		
0175   D813 19          
0176   D814 90          			JSRR_(gi_bell_long)		
0176   D815 17          
0177   D816 90          			JSRR_(gi_bell_short)		
0177   D817 20          
0178   D818 90          			JSRR_(gi_bell_long)		
0178   D819 13          
0179   D81A 90          			JSRR_(gi_bell_long)		
0179   D81B 11          
0180   D81C             			SLEEP_(24)
0180   D81C~            			SLEEP_(24)
0180   D81C~            			SLEEP_(24)
0180   D81C             
0180   D81C 53 18       
0180   D81E             
0181   D81E 94          			JSRR_(buzz_on_inc)			
0181   D81F A1          
0182   D820             			SLEEP_(12)
0182   D820             
0182   D820 7C          
0182   D821~            			SLEEP_(12)
0182   D821~            			SLEEP_(12)
0182   D821             
0183   D821 94          			JSRR_(buzz_off_dec)			
0183   D822 AA          
0184   D823             			SLEEP_(8)
0184   D823             
0184   D823 78          
0184   D824~            			SLEEP_(8)
0184   D824~            			SLEEP_(8)
0184   D824             
0185   D824 94          			JSRR_(buzz_on_inc)			
0185   D825 9B          
0186   D826             			SLEEP_(12)
0186   D826             
0186   D826 7C          
0186   D827~            			SLEEP_(12)
0186   D827~            			SLEEP_(12)
0186   D827             
0187   D827 94          			JSRR_(buzz_off_dec)			
0187   D828 A4          
0188   D829             			BITOFF_($62)			;Turn OFF: Bit#22
0188   D829 11 62       
0189   D82B             			SSND_($11)				;Sound #11
0189   D82B             
0189   D82B F1          
0189   D82C~            			SSND_($11)				;Sound #11
0189   D82C~            			SSND_($11)				;Sound #11
0189   D82C             
0190   D82C             			KILL_					;Remove This Thread
0190   D82C 03          
0191   D82D             
0192   D82D 92          gi_bell_long	JSRR_(gi_off_inc)			
0192   D82E 6E          
0193   D82F 94          			JSRR_(bell_on_inc)		
0193   D830 74          
0194   D831             			SLEEP_(12)
0194   D831             
0194   D831 7C          
0194   D832~            			SLEEP_(12)
0194   D832~            			SLEEP_(12)
0194   D832             
0195   D832 94          gi_bell_com		JSRR_(bell_off_dec)		
0195   D833 7E          
0196   D834 92          			JSRR_(gi_on_dec)			
0196   D835 58          
0197   D836             			SLEEP_(6)
0197   D836             
0197   D836 76          
0197   D837~            			SLEEP_(6)
0197   D837~            			SLEEP_(6)
0197   D837             
0198   D837             			MRTS_					;Macro RTS, Save MRA,MRB
0198   D837 02          
0199   D838             
0200   D838 92          gi_bell_short	JSRR_(gi_off_inc)			
0200   D839 63          
0201   D83A 94          			JSRR_(bell_on_inc)		
0201   D83B 69          
0202   D83C             			SLEEP_(6)
0202   D83C             
0202   D83C 76          
0202   D83D~            			SLEEP_(6)
0202   D83D~            			SLEEP_(6)
0202   D83D             
0203   D83D 8F          			JMPR_(gi_bell_com)
0203   D83E F3          
0204   D83F             
0205   D83F             ;******************************************************
0206   D83F             ;* System Coin Accepted Hook - This will ring the bell
0207   D83F             ;*                             if bit29 is 0
0208   D83F             ;******************************************************					
0209   D83F BD F3 AB    hook_coin		jsr	macro_start		
0210   D842             			IFEQR_($69)                   ;BNER_BIT#29
0210   D842             
0210   D842             
0210   D842             
0210   D842 5B 69 00    
0210   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0210   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0210   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0210   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0210   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0210   D845~            			IFEQR_($69)                   ;BNER_BIT#29
0210   D845             
0211   D845             			      SOL_(bell_on_short)		;Turn ON Sol#15:bell
0211   D845 31 CE       
0212   D847             			      SLEEP_(20)
0212   D847~            			      SLEEP_(20)
0212   D847~            			      SLEEP_(20)
0212   D847             
0212   D847 53 14       
0212   D849             
0213   D849             			ENDIF_			
0213   D849             
0213   D849             
0213   D849             
0213   D849             
0213   D849             
0213   D849~            			ENDIF_			
0213   D849~            			ENDIF_			
0213   D849             
0213   D849~            			ENDIF_			
0213   D849~            			ENDIF_			
0213   D849             
0213   D844             
0213   D844 04          
0213   D845             
0213   D845             
0213   D845~            			ENDIF_			
0213   D845~            			ENDIF_			
0213   D845~            			ENDIF_			
0213   D845~            			ENDIF_			
0213   D845~            			ENDIF_			
0213   D845             
0213   D849             
0213   D849~            			ENDIF_			
0213   D849~            			ENDIF_			
0213   D849             
0214   D849                               CPUX_					;Resume CPU Execution
0214   D849 04          
0215   D84A 39          			rts	
0216   D84B             
0217   D84B             ;********************************************************
0218   D84B             ;* Outlane Switches:
0219   D84B             ;********************************************************			
0220   D84B             sw_leftdrain
0221   D84B             sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84B 43          
0221   D84C             
0221   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84C             
0221   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84C             
0221   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84C~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84C             
0221   D84C             
0221   D84C 2B          
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D~            sw_rightdrain	PTSDIG_(5,1000)			;5000 Points/Digit Sound
0221   D84D             
0221   D84D             
0221   D84D             
0221   D84D             
0222   D84D C1 02       			SETRAM_(regb,$02)			;RAM$01=$02
0223   D84F 94          			JSRR_(add_bonus_dly)			
0223   D850 A4          
0224   D851             			IFEQR_($E0)			      ;BNER_RAM$00
0224   D851             
0224   D851             
0224   D851             
0224   D851 5B E0 00    
0224   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0224   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0224   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0224   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0224   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0224   D854~            			IFEQR_($E0)			      ;BNER_RAM$00
0224   D854             
0225   D854                   			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
0225   D854 15 00       
0226   D856                   			EXE_
0226   D856             
0226   D856 44          
0227   D857 CE 01 36          			      ldx	#aud_game3			;Increment Drain Shield Counter
0228   D85A BD F7 7F          			      jsr	ptrx_plus_1
0229   D85D                   			EXEEND_
0229   D85D             
0229   D85D             
0229   D85D             
0229   D85D             
0229   D85D~                  			EXEEND_
0229   D85D~                  			EXEEND_
0229   D85D             
0229   D856             
0229   D856 48          
0229   D857             
0229   D85D             
0229   D85D~                  			EXEEND_
0229   D85D~                  			EXEEND_
0229   D85D             
0230   D85D                   			SSND_($13)				;Sound #13
0230   D85D             
0230   D85D F3          
0230   D85E~                  			SSND_($13)				;Sound #13
0230   D85E~                  			SSND_($13)				;Sound #13
0230   D85E             
0231   D85E                   			BE29_($08)				;Effect: Range #08
0231   D85E 29 08       
0232   D860 A4                			JSRDR_(timer_inc)		
0232   D861 25          
0233   D862 B0 40             			ADDRAM_(rega,$40)			;RAM$00+=$40
0234   D864                   			BITONP2_(rega)			;Turn ON Lamp/Bit @RAM:00
0234   D864 24 00       
0235   D866 B0 F8             			ADDRAM_(rega,$F8)			;RAM$00+=$F8
0236   D868                   			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
0236   D868 15 00       
0237   D86A                   			BITOFF2_($1A)			;Turn OFF: Lamp#1A(keepshooting)
0237   D86A 21 1A       
0238   D86C                   			BITFL_($1A)				;Flash: Lamp#1A(keepshooting)
0238   D86C 13 1A       
0239   D86E                   			BITON_($66)				;Turn ON: Bit#26
0239   D86E 10 66       
0240   D870                   			SOL_(flippers_on)             ;Turn ON Sol#25:flippers?
0240   D870 31 F8       
0241   D872 92                			JSRR_(gi_off_inc)			
0241   D873 29          
0242   D874                   			EXE_				      
0242   D874             
0242   D874 44          
0243   D875 7C 00 C8          			      inc	flag_tilt
0244   D878                   			EXEEND_
0244   D878             
0244   D878             
0244   D878             
0244   D878             
0244   D878~                  			EXEEND_
0244   D878~                  			EXEEND_
0244   D878             
0244   D874             
0244   D874 45          
0244   D875             
0244   D878             
0244   D878~                  			EXEEND_
0244   D878~                  			EXEEND_
0244   D878             
0245   D878             			ENDIF_
0245   D878             
0245   D878             
0245   D878             
0245   D878             
0245   D878             
0245   D878~            			ENDIF_
0245   D878~            			ENDIF_
0245   D878             
0245   D878~            			ENDIF_
0245   D878~            			ENDIF_
0245   D878             
0245   D853             
0245   D853 24          
0245   D854             
0245   D854             
0245   D854~            			ENDIF_
0245   D854~            			ENDIF_
0245   D854~            			ENDIF_
0245   D854~            			ENDIF_
0245   D854~            			ENDIF_
0245   D854             
0245   D878             
0245   D878~            			ENDIF_
0245   D878~            			ENDIF_
0245   D878             
0246   D878             			KILL_					;Remove This Thread
0246   D878 03          
0247   D879             
0248   D879             ;***********************************************************
0249   D879             ;* Attract Mode Lamps 1:
0250   D879             ;***********************************************************
0251   D879 BD F3 AB    attract_1		jsr	macro_start
0252   D87C             			PRI_($43)				;Priority=#43
0252   D87C 52 43       
0253   D87E             			REMTHREADS_($FA,$42)		;Remove Multiple Threads Based on Priority
0253   D87E 55 FA 42    
0254   D881             			BEGIN_
0254   D881             
0255   D881 C1 0B       				SETRAM_(regb,$0B)			;RAM$01=$0B
0256   D883             				BE28_($02)				;Effect: Range #02
0256   D883 28 02       
0257   D885             				BEGIN_
0257   D885             
0258   D885             					BEGIN_
0258   D885             
0259   D885             						BE28_($42)				;Effect: Range #02
0259   D885 28 42       
0260   D887             						BITOFF2_($4F)			;Turn OFF: Lamp#0F(D)
0260   D887 21 4F       
0261   D889             						BE2E_($02)				;Effect: Range #02
0261   D889 2E 02       
0262   D88B             						SLEEP_(3)
0262   D88B             
0262   D88B 73          
0262   D88C~            						SLEEP_(3)
0262   D88C~            						SLEEP_(3)
0262   D88C             
0263   D88C             					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D88C             
0263   D88C 5B F5 82 FF 
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890             
0263   D890             
0263   D890             
0263   D890             
0263   D890             
0263   D890             
0263   D890             
0263   D88F             
0263   D88F F5          
0263   D890             
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890             
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890~            					EQEND_($F5,$82)			;BNER_RangeOFF#82
0263   D890             
0264   D890             					BEGIN_
0264   D890             
0265   D890             						BE2A_($02)				;Effect: Range #02
0265   D890 2A 02       
0266   D892             						SLEEP_(3)
0266   D892             
0266   D892 73          
0266   D893~            						SLEEP_(3)
0266   D893~            						SLEEP_(3)
0266   D893             
0267   D893             					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D893             
0267   D893 5B F6 82 FF 
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897             
0267   D897             
0267   D897             
0267   D897             
0267   D897             
0267   D897             
0267   D897             
0267   D896             
0267   D896 F9          
0267   D897             
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897             
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897~            					EQEND_($F6,$82)			;BNER_RangeON#82 to gb_7E
0267   D897             
0268   D897 B1 FF       					ADDRAM_(regb,-1)			;RAM$01-=1
0269   D899             				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D899             
0269   D899 5BFCE100FE  
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E             
0269   D89E             
0269   D89E             
0269   D89E             
0269   D89E             
0269   D89E             
0269   D89E             
0269   D89D             
0269   D89D E7          
0269   D89E             
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E             
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0 
0269   D89E             
0270   D89E             			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D89E             
0270   D89E 5AFB40F1FE  
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3             
0270   D8A3             
0270   D8A3             
0270   D8A3             
0270   D8A3             
0270   D8A3             
0270   D8A3             
0270   D8A2             
0270   D8A2 DE          
0270   D8A3             
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3             
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3~            			NEEND_($FB,$40,$F1)		;BEQR_(GAME || BIT#00)
0270   D8A3             
0271   D8A3             			BE29_($42)				;Effect: Range #02
0271   D8A3 29 42       
0272   D8A5             			KILL_					;Remove This Thread
0272   D8A5 03          
0273   D8A6             
0274   D8A6             ;************************************************************************
0275   D8A6             ;* Left Drop Target Timer Thread:
0276   D8A6             ;************************************************************************
0277   D8A6 BD F3 AB    left_timer		jsr	macro_start
0278   D8A9             			EXE_				
0278   D8A9             
0278   D8A9 44          
0279   D8AA BD E5 9F    			      jsr	get_lord			;Get Number of L-O-R-D lamps to go
0280   D8AD 48          			      asla	
0281   D8AE 8B 0D       			      adda	#$0D
0282   D8B0 C6 08       			      ldab	#$08
0283   D8B2             			EXEEND_
0283   D8B2             
0283   D8B2             
0283   D8B2             
0283   D8B2             
0283   D8B2~            			EXEEND_
0283   D8B2~            			EXEEND_
0283   D8B2             
0283   D8A9             
0283   D8A9 4A          
0283   D8AA             
0283   D8B2             
0283   D8B2~            			EXEEND_
0283   D8B2~            			EXEEND_
0283   D8B2             
0284   D8B2             			BEGIN_
0284   D8B2             
0285   D8B2 B0 FF       				ADDRAM_(rega,-1)			;RAM$00-=1
0286   D8B4             lt_outer_loop		BITON_($1C)		            ;Turn ON: Lamp#1C(dt_left)
0286   D8B4 10 1C       
0287   D8B6             				SSND_($09)				;Sound #09
0287   D8B6             
0287   D8B6 E9          
0287   D8B7~            				SSND_($09)				;Sound #09
0287   D8B7~            				SSND_($09)				;Sound #09
0287   D8B7             
0288   D8B7 60          				SLEEPI_(rega)				;Delay RAM$00
0289   D8B8             				BITOFF_($1C)			;Turn OFF: Lamp#1C(dt_left)
0289   D8B8 11 1C       
0290   D8BA             				BEGIN_
0290   D8BA             
0291   D8BA 60          					SLEEPI_(rega)			;Delay RAM$00
0292   D8BB             				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8BB             
0292   D8BB 5AFEF2F010FD
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1             
0292   D8C1             
0292   D8C1             
0292   D8C1             
0292   D8C1             
0292   D8C1             
0292   D8C1             
0292   D8C0             
0292   D8C0 F9          
0292   D8C1             
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1             
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1~            				NEEND_($FE,$F2,$F0,$10)  	;BEQR_(LAMP#10(1_target) P $F0,$10)
0292   D8C1             
0293   D8C1             			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C1             
0293   D8C1 5BFCE003FE  
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6             
0293   D8C6             
0293   D8C6             
0293   D8C6             
0293   D8C6             
0293   D8C6             
0293   D8C6             
0293   D8C5             
0293   D8C5 EC          
0293   D8C6             
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6             
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0293   D8C6             
0294   D8C6 B1 FF       			ADDRAM_(regb,-1)			;RAM$01-=1
0295   D8C8             			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0295   D8C8             
0295   D8C8 5BFCE100E7  
0295   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0295   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0295   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0295   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0295   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0295   D8CD~            			BNER_($FC,$E1,$00,lt_outer_loop)	;BNER_RAM$01==#0 to lt_outer_loop
0295   D8CD             
0296   D8CD             			BITON_($5D)				;Turn ON: Bit#1D
0296   D8CD 10 5D       
0297   D8CF             			SOL_(dtleft_on)               ;Turn ON Sol#4:dt_left
0297   D8CF 31 63       
0298   D8D1             			SLEEP_(48)
0298   D8D1~            			SLEEP_(48)
0298   D8D1~            			SLEEP_(48)
0298   D8D1             
0298   D8D1 53 30       
0298   D8D3             
0299   D8D3             			BITOFF_($DC,$DD,$1C)		;Turn OFF: Bit#1C, Bit#1D, Lamp#1C(dt_left)
0299   D8D3 11 DC DD 1C 
0300   D8D7             			KILL_					;Remove This Thread
0300   D8D7 03          
0301   D8D8             
0302   D8D8             ;************************************************************************
0303   D8D8             ;* Right Drop Target Timer Thread:
0304   D8D8             ;************************************************************************
0305   D8D8 BD F3 AB    right_timer		jsr	macro_start
0306   D8DB             			PRI_($70)				;Priority=#70
0306   D8DB 52 70       
0307   D8DD             			EXE_				
0307   D8DD             
0307   D8DD 44          
0308   D8DE BD E5 9F    			      jsr	get_lord
0309   D8E1 48          			      asla	
0310   D8E2 8B 0D       			      adda	#$0D
0311   D8E4 C6 08       			      ldab	#$08
0312   D8E6             			EXEEND_
0312   D8E6             
0312   D8E6             
0312   D8E6             
0312   D8E6             
0312   D8E6~            			EXEEND_
0312   D8E6~            			EXEEND_
0312   D8E6             
0312   D8DD             
0312   D8DD 4A          
0312   D8DE             
0312   D8E6             
0312   D8E6~            			EXEEND_
0312   D8E6~            			EXEEND_
0312   D8E6             
0313   D8E6             			BEGIN_
0313   D8E6             
0314   D8E6 B0 FF       				ADDRAM_(rega,-1)			;RAM$00-=1
0315   D8E8             rt_outer_loop		BITON_($18)				;Turn ON: Lamp#18(dt_right)
0315   D8E8 10 18       
0316   D8EA             				SSND_($09)				;Sound #09
0316   D8EA             
0316   D8EA E9          
0316   D8EB~            				SSND_($09)				;Sound #09
0316   D8EB~            				SSND_($09)				;Sound #09
0316   D8EB             
0317   D8EB 60          				SLEEPI_(rega)			;Delay RAM$00
0318   D8EC             				BITOFF_($18)			;Turn OFF: Lamp#18(dt_right)
0318   D8EC 11 18       
0319   D8EE             				BEGIN_
0319   D8EE             
0320   D8EE 60          					SLEEPI_(rega)			;Delay RAM$00
0321   D8EF             				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8EF             
0321   D8EF 5AFEF2F010FD
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5             
0321   D8F5             
0321   D8F5             
0321   D8F5             
0321   D8F5             
0321   D8F5             
0321   D8F5             
0321   D8F4             
0321   D8F4 F9          
0321   D8F5             
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5             
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5~            				NEEND_($FE,$F2,$F0,$10)		;BEQR_(LAMP#10(1_target) P $F0,$10)
0321   D8F5             
0322   D8F5             			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8F5             
0322   D8F5 5BFCE003FE  
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA             
0322   D8FA             
0322   D8FA             
0322   D8FA             
0322   D8FA             
0322   D8FA             
0322   D8FA             
0322   D8F9             
0322   D8F9 EC          
0322   D8FA             
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA             
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA~            			EQEND_($FC,$E0,$03)		;BNER_RAM$00==#3
0322   D8FA             
0323   D8FA B1 FF       			ADDRAM_(regb,-1)			;RAM$01-=1
0324   D8FC             			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0324   D8FC             
0324   D8FC 5BFCE100E7  
0324   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0324   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0324   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0324   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0324   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0324   D901~            			BNER_($FC,$E1,$00,rt_outer_loop)	;BNER_RAM$01==#0 to rt_outer_loop
0324   D901             
0325   D901             			BITON_($59)				;Turn ON: Bit#19
0325   D901 10 59       
0326   D903             			SOL_(dtright_on)              ;Turn ON Sol#5:dt_right
0326   D903 31 64       
0327   D905             			SLEEP_(48)
0327   D905~            			SLEEP_(48)
0327   D905~            			SLEEP_(48)
0327   D905             
0327   D905 53 30       
0327   D907             
0328   D907             			BITOFF_($D8,$D9,$18)		;Turn OFF: Bit#18, Bit#19, Lamp#18(dt_right)
0328   D907 11 D8 D9 18 
0329   D90B             			KILL_					;Remove This Thread
0329   D90B 03          
0330   D90C             
0331   D90C             ;**********************************************************
0332   D90C             ;* Plunger Thread
0333   D90C             ;**********************************************************
0334   D90C             sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0334   D90C             
0334   D90C             
0334   D90C             
0334   D90C 5B F8 E0 FF 
0334   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0334   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0334   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0334   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0334   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0334   D910~            sw_ballshooter	IFEQR_($F8,$E0)    	      ;BNER_SW#E0
0334   D910             
0335   D910             			      REMTHREADS_($F8,$C0)		;Remove Multiple Threads Based on Priority
0335   D910 55 F8 C0    
0336   D913             			      KILL_					;Remove This Thread
0336   D913 03          
0337   D914                               ENDIF_
0337   D914             
0337   D914             
0337   D914             
0337   D914             
0337   D914             
0337   D914~                              ENDIF_
0337   D914~                              ENDIF_
0337   D914             
0337   D914~                              ENDIF_
0337   D914~                              ENDIF_
0337   D914             
0337   D90F             
0337   D90F 04          
0337   D910             
0337   D910             
0337   D910~                              ENDIF_
0337   D910~                              ENDIF_
0337   D910~                              ENDIF_
0337   D910~                              ENDIF_
0337   D910~                              ENDIF_
0337   D910             
0337   D914             
0337   D914~                              ENDIF_
0337   D914~                              ENDIF_
0337   D914             
0338   D914 D9 1E       			RSND_($09,$1E)			;Sound #09(x30)
0339   D916             			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0339   D916             
0339   D916             
0339   D916             
0339   D916 5BFB505EFE  
0339   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0339   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0339   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0339   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0339   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0339   D91B~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0339   D91B             
0340   D91B             			      PRI_($C0)				;Priority=#C0
0340   D91B 52 C0       
0341   D91D             			      SLEEP_(255)
0341   D91D~            			      SLEEP_(255)
0341   D91D~            			      SLEEP_(255)
0341   D91D             
0341   D91D 53 FF       
0341   D91F             
0342   D91F             			      SLEEP_(129)
0342   D91F~            			      SLEEP_(129)
0342   D91F~            			      SLEEP_(129)
0342   D91F             
0342   D91F 53 81       
0342   D921             
0343   D921             			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0343   D921             
0343   D921 5A 5E 0B    
0343   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0343   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0343   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0343   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0343   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0343   D924~            			      BEQR_($5E,gb_56)			;BEQR_BIT#1E to gb_56
0343   D924             
0344   D924             			ENDIF_
0344   D924             
0344   D924             
0344   D924             
0344   D924             
0344   D924             
0344   D924~            			ENDIF_
0344   D924~            			ENDIF_
0344   D924             
0344   D924~            			ENDIF_
0344   D924~            			ENDIF_
0344   D924             
0344   D91A             
0344   D91A 09          
0344   D91B             
0344   D91B             
0344   D91B~            			ENDIF_
0344   D91B~            			ENDIF_
0344   D91B~            			ENDIF_
0344   D91B~            			ENDIF_
0344   D91B~            			ENDIF_
0344   D91B             
0344   D924             
0344   D924~            			ENDIF_
0344   D924~            			ENDIF_
0344   D924             
0345   D924             kill_1		KILL_					;Remove This Thread
0345   D924 03          
0346   D925             
0347   D925             ;**************************************************************
0348   D925             ;* Playfield Entry Switch - Always scores 10 points
0349   D925             ;**************************************************************
0350   D925 BD F3 AB    pf_entry_cpu	jsr	macro_start
0351   D928             sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D928 43          
0351   D929             
0351   D929~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D929~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D929             
0351   D929             
0351   D929 09          
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A~            sw_pf_entry		PTSDIG_(1,10)			;10 Points/Digit Sound
0351   D92A             
0351   D92A             
0352   D92A             			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0352   D92A             
0352   D92A 5BFB505EF5  
0352   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0352   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0352   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0352   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0352   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0352   D92F~            			BNER_($FB,$50,$5E,kill_1)	;BNER_(BIT#1E || BIT#10) to kill_1
0352   D92F             
0353   D92F             gb_56			BITOFF_($DE,$50)			;Turn OFF: Bit#1E, Bit#10
0353   D92F 11 DE 50    
0354   D932             			REMTHREADS_($F8,$C0)		;Remove Multiple Threads Based on Priority
0354   D932 55 F8 C0    
0355   D935             			BNEA_($57,gb_24)        	;BNEA_BIT#17 to gb_24
0355   D935 59 57       
0355   D937 E3 56       
0356   D939             			BITOFF_($57)			;Turn OFF: Bit#17
0356   D939 11 57       
0357   D93B             			KILL_					;Remove This Thread
0357   D93B 03          
0358   D93C             
0359   D93C             ;***************************************************************
0360   D93C             ;* Outhole Thread
0361   D93C             ;***************************************************************
0362   D93C             sw_outhole		SOL_(outhole_on)              ;Turn ON Sol#1:outhole
0362   D93C 31 40       
0363   D93E             			BITON_($55)				;Turn ON: Bit#15
0363   D93E 10 55       
0364   D940             			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0364   D940             
0364   D940             
0364   D940             
0364   D940 5BFB505EFE  
0364   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0364   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0364   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0364   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0364   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0364   D945~            			IFEQR_($FB,$50,$5E)	      ;BNER_(BIT#1E || BIT#10)
0364   D945             
0365   D945             			      EXE_	
0365   D945             
0365   D945 44          
0366   D946             			      	NEWTHREAD(gj_2B)			
0366   D946 CE D9 51    
0366   D949 BD EA C4    
0367   D94C             			      EXEEND_
0367   D94C             
0367   D94C             
0367   D94C             
0367   D94C             
0367   D94C~            			      EXEEND_
0367   D94C~            			      EXEEND_
0367   D94C             
0367   D945             
0367   D945 48          
0367   D946             
0367   D94C             
0367   D94C~            			      EXEEND_
0367   D94C~            			      EXEEND_
0367   D94C             
0368   D94C             			ENDIF_
0368   D94C             
0368   D94C             
0368   D94C             
0368   D94C             
0368   D94C             
0368   D94C~            			ENDIF_
0368   D94C~            			ENDIF_
0368   D94C             
0368   D94C~            			ENDIF_
0368   D94C~            			ENDIF_
0368   D94C             
0368   D944             
0368   D944 07          
0368   D945             
0368   D945             
0368   D945~            			ENDIF_
0368   D945~            			ENDIF_
0368   D945~            			ENDIF_
0368   D945~            			ENDIF_
0368   D945~            			ENDIF_
0368   D945             
0368   D94C             
0368   D94C~            			ENDIF_
0368   D94C~            			ENDIF_
0368   D94C             
0369   D94C             			SLEEP_(192)
0369   D94C~            			SLEEP_(192)
0369   D94C~            			SLEEP_(192)
0369   D94C             
0369   D94C 53 C0       
0369   D94E             
0370   D94E 5E 29       			SWCLR_($29)				;Clear Sw#: $29(outhole)
0371   D950             			KILL_					;Remove This Thread
0371   D950 03          
0372   D951             
0373   D951             ;***************************************************************
0374   D951             ;*
0375   D951             ;***************************************************************
0376   D951 BD F3 AB    gj_2B			jsr	macro_start
0377   D954 8F          			JMPR_(gb_56)	
0377   D955 D9          
0378   D956             			
0379   D956             ;***************************************************************
0380   D956             ;* Multiball counter: This routine is responsible for incrementing
0381   D956             ;* the count in the player 1 score display at the start of the
0382   D956             ;* multiball animation process. It resets game_ram_d and increments
0383   D956             ;* it until it matches the value of game_ram_a
0384   D956             ;***************************************************************					
0385   D956 4F          mb_countup		clra	
0386   D957 97 0D       			staa	game_ram_d
0387   D959             			begin
0387   D959             
0388   D959 16          				tab	
0389   D95A BD EC F3    				jsr	split_ab
0390   D95D 8A 0F       				oraa	#$0F
0391   D95F CA F0       				orab	#$F0
0392   D961 97 49       				staa	$49
0393   D963 D7 48       				stab	score_p1_b1
0394   D965 86 0C       				ldaa	#$0C
0395   D967 BD EC FC    				jsr	isnd_once
0396   D96A BD EA 2F    				jsr	addthread
0397   D96D 05          				.db $05
0398   D96E 96 0D       				ldaa	game_ram_d
0399   D970 8B 01       				adda	#$01
0400   D972 19          				daa	
0401   D973 25 06       				bcs	countup_end
0402   D975 97 0D       				staa	game_ram_d
0403   D977 91 0A       				cmpa	game_ram_a
0404   D979             			hiend
0404   D979             
0404   D979             
0404   D979~            			hiend
0404   D979~            			hiend
0404   D979~            			hiend
0404   D979             
0404   D979 23 DE       
0404   D97B             
0404   D97B~            			hiend
0404   D97B~            			hiend
0404   D97B             
0405   D97B 39          countup_end		rts	
0406   D97C             
0407   D97C             ;******************************************************
0408   D97C             ;* This will show the current timer value in the digit
0409   D97C             ;* specified in X.
0410   D97C             ;******************************************************
0411   D97C D6 0A       show_timer		ldab	game_ram_a			;Get timer value
0412   D97E 96 E3       time_disp		ldaa	spare_ram+3			;If spare_ram+3 != zero then numbers span digit bytes
0413   D980             			ifne
0413   D980             
0413   D980 27 FE       
0414   D982 17          				tba	
0415   D983 BD EC F3    				jsr	split_ab
0416   D986 8A 0F       				oraa	#$0F
0417   D988 CA F0       				orab	#$F0
0418   D98A A7 01       				staa	$01,X				;Split them up
0419   D98C             			endif
0419   D98C             
0419   D98C             
0419   D98C             
0419   D98C             
0419   D98C             
0419   D98C~            			endif
0419   D98C~            			endif
0419   D98C             
0419   D98C~            			endif
0419   D98C~            			endif
0419   D98C             
0419   D981             
0419   D981 0A          
0419   D982             
0419   D982             
0419   D982~            			endif
0419   D982~            			endif
0419   D982~            			endif
0419   D982             
0419   D98C             
0419   D98C~            			endif
0419   D98C~            			endif
0419   D98C             
0420   D98C E7 00       			stab	$00,X				;Store them...
0421   D98E 8C 00 4B    			cpx	#score_p2_b1-1		;Are we at the right side of player 2?
0422   D991             			ifeq
0422   D991             
0422   D991 26 FE       
0423   D993 96 E3       				ldaa	spare_ram+3
0424   D995             				ifne
0424   D995             
0424   D995 27 FE       
0425   D997 96 0A       					ldaa	game_ram_a
0426   D999 97 4C       					staa	score_p2_b1
0427   D99B             				endif
0427   D99B             
0427   D99B             
0427   D99B             
0427   D99B             
0427   D99B             
0427   D99B~            				endif
0427   D99B~            				endif
0427   D99B             
0427   D99B~            				endif
0427   D99B~            				endif
0427   D99B             
0427   D996             
0427   D996 04          
0427   D997             
0427   D997             
0427   D997~            				endif
0427   D997~            				endif
0427   D997~            				endif
0427   D997             
0427   D99B             
0427   D99B~            				endif
0427   D99B~            				endif
0427   D99B             
0428   D99B             			endif
0428   D99B             
0428   D99B             
0428   D99B             
0428   D99B             
0428   D99B             
0428   D99B~            			endif
0428   D99B~            			endif
0428   D99B             
0428   D99B~            			endif
0428   D99B~            			endif
0428   D99B             
0428   D992             
0428   D992 08          
0428   D993             
0428   D993             
0428   D993~            			endif
0428   D993~            			endif
0428   D993~            			endif
0428   D993             
0428   D99B             
0428   D99B~            			endif
0428   D99B~            			endif
0428   D99B             
0429   D99B 39          			rts	
0430   D99C             
0431   D99C             ;*******************************************************
0432   D99C             ;* This thread follows behind and erases the previous
0433   D99C             ;* displayed value.
0434   D99C             ;*******************************************************
0435   D99C C6 FF       erase_timer		ldab	#$FF
0436   D99E 20 DE       			bra	time_disp
0437   D9A0             
0438   D9A0             ;*******************************************************
0439   D9A0             ;* Fix edges
0440   D9A0             ;*******************************************************			
0441   D9A0 96 E4       fix_edges		ldaa	spare_ram+4		;Moving Right or Left?
0442   D9A2             			ifne				;Left
0442   D9A2             
0442   D9A2 27 FE       
0443   D9A4 96 E3       				ldaa	spare_ram+3		;Spanning digit
0444   D9A6             				ifeq
0444   D9A6             
0444   D9A6 26 FE       
0445   D9A8 09          					dex	
0446   D9A9 8C 00 53    					cpx	#score_p4_b1-1
0447   D9AC 26 11       					bne	fix_end
0448   D9AE 0D          					sec	
0449   D9AF 39          					rts				;We are done	
0450   D9B0             				endif
0450   D9B0             
0450   D9B0             
0450   D9B0             
0450   D9B0             
0450   D9B0             
0450   D9B0~            				endif
0450   D9B0~            				endif
0450   D9B0             
0450   D9B0~            				endif
0450   D9B0~            				endif
0450   D9B0             
0450   D9A7             
0450   D9A7 08          
0450   D9A8             
0450   D9A8             
0450   D9A8~            				endif
0450   D9A8~            				endif
0450   D9A8~            				endif
0450   D9A8             
0450   D9B0             
0450   D9B0~            				endif
0450   D9B0~            				endif
0450   D9B0             
0451   D9B0 8C 00 54    				cpx	#score_p4_b1
0452   D9B3             				ifeq				;Put half in MBIP 
0452   D9B3             
0452   D9B3 26 FE       
0453   D9B5 96 0A       					ldaa	game_ram_a
0454   D9B7 44          					lsra	
0455   D9B8 44          					lsra	
0456   D9B9 44          					lsra	
0457   D9BA 44          					lsra	
0458   D9BB 8A F0       					oraa	#$F0
0459   D9BD 97 59       					staa	mbip_b1
0460   D9BF             				endif
0460   D9BF             
0460   D9BF             
0460   D9BF             
0460   D9BF             
0460   D9BF             
0460   D9BF~            				endif
0460   D9BF~            				endif
0460   D9BF             
0460   D9BF~            				endif
0460   D9BF~            				endif
0460   D9BF             
0460   D9B4             
0460   D9B4 0A          
0460   D9B5             
0460   D9B5             
0460   D9B5~            				endif
0460   D9B5~            				endif
0460   D9B5~            				endif
0460   D9B5             
0460   D9BF             
0460   D9BF~            				endif
0460   D9BF~            				endif
0460   D9BF             
0461   D9BF 73 00 E3    fix_end			com	spare_ram+3
0462   D9C2 0C          				clc	
0463   D9C3 39          				rts
0464   D9C4             			endif	
0464   D9C4             
0464   D9C4             
0464   D9C4             
0464   D9C4             
0464   D9C4             
0464   D9C4~            			endif	
0464   D9C4~            			endif	
0464   D9C4             
0464   D9C4~            			endif	
0464   D9C4~            			endif	
0464   D9C4             
0464   D9A3             
0464   D9A3 20          
0464   D9A4             
0464   D9A4             
0464   D9A4~            			endif	
0464   D9A4~            			endif	
0464   D9A4~            			endif	
0464   D9A4             
0464   D9C4             
0464   D9C4~            			endif	
0464   D9C4~            			endif	
0464   D9C4             
0465   D9C4             			;Here if was moving right
0466   D9C4 96 E3       			ldaa	spare_ram+3
0467   D9C6 27 F7       			beq	fix_end
0468   D9C8 08          			inx	
0469   D9C9 20 F4       			bra	fix_end
0470   D9CB             
0471   D9CB             ;*******************************************************
0472   D9CB             ;* Adjusts X value for display animation
0473   D9CB             ;*******************************************************			
0474   D9CB 8C 00 4F    adj_anix		cpx	#score_p3_b1-1		;Are we at the end of Player 2
0475   D9CE             			ifeq					;yes
0475   D9CE             
0475   D9CE 26 FE       
0476   D9D0 CE 00 53    				ldx	#score_p4_b1-1		;then, adjust to the end of Player 3
0477   D9D3 73 00 E4    chng_dir			com	spare_ram+4			;Chage direction
0478   D9D6 0D          				sec	
0479   D9D7 39          				rts	
0480   D9D8             			endif			
0480   D9D8             
0480   D9D8             
0480   D9D8             
0480   D9D8             
0480   D9D8             
0480   D9D8~            			endif			
0480   D9D8~            			endif			
0480   D9D8             
0480   D9D8~            			endif			
0480   D9D8~            			endif			
0480   D9D8             
0480   D9CF             
0480   D9CF 08          
0480   D9D0             
0480   D9D0             
0480   D9D0~            			endif			
0480   D9D0~            			endif			
0480   D9D0~            			endif			
0480   D9D0             
0480   D9D8             
0480   D9D8~            			endif			
0480   D9D8~            			endif			
0480   D9D8             
0481   D9D8 8C 00 50    			cpx	#score_p3_b1		;Are we at the start of Player 3
0482   D9DB             			ifeq					;yes
0482   D9DB             
0482   D9DB 26 FE       
0483   D9DD CE 00 54    				ldx	#score_p4_b1		;then, adjust to the start of Player 4
0484   D9E0 20 F1       				bra	chng_dir
0485   D9E2             			endif
0485   D9E2             
0485   D9E2             
0485   D9E2             
0485   D9E2             
0485   D9E2             
0485   D9E2~            			endif
0485   D9E2~            			endif
0485   D9E2             
0485   D9E2~            			endif
0485   D9E2~            			endif
0485   D9E2             
0485   D9DC             
0485   D9DC 05          
0485   D9DD             
0485   D9DD             
0485   D9DD~            			endif
0485   D9DD~            			endif
0485   D9DD~            			endif
0485   D9DD             
0485   D9E2             
0485   D9E2~            			endif
0485   D9E2~            			endif
0485   D9E2             
0486   D9E2 8C 00 4B    			cpx	#score_p2_b1-1		;Are we at the end of Player 1
0487   D9E5             			ifeq					;Yes
0487   D9E5             
0487   D9E5 26 FE       
0488   D9E7 96 E3       				ldaa	spare_ram+3			
0489   D9E9 27 0B       				beq	ret_clr
0490   D9EB 08          				inx	
0491   D9EC 0D          				sec	
0492   D9ED 39          				rts
0493   D9EE             			endif	
0493   D9EE             
0493   D9EE             
0493   D9EE             
0493   D9EE             
0493   D9EE             
0493   D9EE~            			endif	
0493   D9EE~            			endif	
0493   D9EE             
0493   D9EE~            			endif	
0493   D9EE~            			endif	
0493   D9EE             
0493   D9E6             
0493   D9E6 07          
0493   D9E7             
0493   D9E7             
0493   D9E7~            			endif	
0493   D9E7~            			endif	
0493   D9E7~            			endif	
0493   D9E7             
0493   D9EE             
0493   D9EE~            			endif	
0493   D9EE~            			endif	
0493   D9EE             
0494   D9EE 8C 00 57    			cpx	#mbip_b0-1			;Are we at the end of Player 4
0495   D9F1             			ifeq					;Yes...
0495   D9F1             
0495   D9F1 26 FE       
0496   D9F3 73 00 E4    				com	spare_ram+4			;change direction
0497   D9F6             			endif
0497   D9F6             
0497   D9F6             
0497   D9F6             
0497   D9F6             
0497   D9F6             
0497   D9F6~            			endif
0497   D9F6~            			endif
0497   D9F6             
0497   D9F6~            			endif
0497   D9F6~            			endif
0497   D9F6             
0497   D9F2             
0497   D9F2 03          
0497   D9F3             
0497   D9F3             
0497   D9F3~            			endif
0497   D9F3~            			endif
0497   D9F3~            			endif
0497   D9F3             
0497   D9F6             
0497   D9F6~            			endif
0497   D9F6~            			endif
0497   D9F6             
0498   D9F6 0C          ret_clr		clc	
0499   D9F7 39          			rts
0500   D9F8             			
0501   D9F8             ;***********************************************************
0502   D9F8             ;* This routine takes care of the fancy display during the
0503   D9F8             ;* start of multiball.
0504   D9F8             ;***********************************************************			
0505   D9F8             mb_fancy		BITON_($40)				;Turn ON: Bit#00
0505   D9F8 10 40       
0506   D9FA             			PRI_($B5)				;Priority=#B5
0506   D9FA 52 B5       
0507   D9FC             			BEGIN_
0507   D9FC             
0508   D9FC             				SLEEP_(11)
0508   D9FC             
0508   D9FC 7B          
0508   D9FD~            				SLEEP_(11)
0508   D9FD~            				SLEEP_(11)
0508   D9FD             
0509   D9FD             			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   D9FD             
0509   D9FD 5AFEF2F240FD
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03             
0509   DA03             
0509   DA03             
0509   DA03             
0509   DA03             
0509   DA03             
0509   DA03             
0509   DA02             
0509   DA02 F9          
0509   DA03             
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03             
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03~            			NEEND_($FE,$F2,$F2,$40)		;BEQR_(BIT#00 P $F2,$40)
0509   DA03             
0510   DA03             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
0510   DA03 55 F8 D0    
0511   DA06 A4          			JSRDR_(cpdisp_show)		
0511   DA07 03          
0512   DA08 90          			JSRR_(gi_off_inc)			
0512   DA09 93          
0513   DA0A             			BE29_($08)				;Effect: Range #08
0513   DA0A 29 08       
0514   DA0C A2          			JSRDR_(timer_inc)		
0514   DA0D 79          
0515   DA0E             			CPUX_					;Resume CPU Execution
0515   DA0E 04          
0516   DA0F             			NEWTHREAD(attract_1)
0516   DA0F CE D8 79    
0516   DA12 BD EA C4    
0517   DA15             			NEWTHREAD(attract_2)
0517   DA15 CE DA A2    
0517   DA18 BD EA C4    
0518   DA1B 7F 00 60    			clr	comma_flags
0519   DA1E CE 00 48    			ldx	#score_p1_b1
0520   DA21 C6 10       			ldab	#$10
0521   DA23 86 FF       			ldaa	#$FF
0522   DA25 97 59       			staa	mbip_b1
0523   DA27 97 5B       			staa	cred_b1
0524   DA29 BD F8 40    			jsr	write_range			;Blank all displays in Buffer 1
0525   DA2C 86 FF       			ldaa	#$FF
0526   DA2E BD F8 A4    			jsr	store_display_mask
0527   DA31 BD D9 56    			jsr	mb_countup			;Increment counter in Player 1 score display
0528   DA34 BD F3 AB    			jsr	macro_start
0529   DA37 92          			JSRR_(bell_on_inc)		;Turn on the damn bell!		
0529   DA38 6C          
0530   DA39             			CPUX_					;Resume CPU Execution
0530   DA39 04          
0531   DA3A CE 00 48    			ldx	#score_p1_b1
0532   DA3D 4F          			clra	
0533   DA3E 97 E4       			staa	spare_ram+4			;Store direction: 00=right ff=left
0534   DA40 43          			coma	
0535   DA41 97 E3       			staa	spare_ram+3			;Store Digit Span info: 00=normal ff=split
0536   DA43             			begin
0536   DA43             
0537   DA43             				begin
0537   DA43             
0538   DA43 BD D9 7C    					jsr	show_timer			;Show the digit
0539   DA46 BD EA 2F    					jsr	addthread			;Wait a bit
0540   DA49 08          					.db $08
0541   DA4A BD D9 9C    					jsr	erase_timer			;Erase trailing digits
0542   DA4D BD D9 CB    					jsr	adj_anix			;Adjust X value
0543   DA50             				ccend
0543   DA50             
0543   DA50             
0543   DA50~            				ccend
0543   DA50~            				ccend
0543   DA50~            				ccend
0543   DA50             
0543   DA50 25 F1       
0543   DA52             
0543   DA52~            				ccend
0543   DA52~            				ccend
0543   DA52             
0544   DA52 BD D9 A0    				jsr	fix_edges			;Fix transistions
0545   DA55             			csend
0545   DA55             
0545   DA55             
0545   DA55~            			csend
0545   DA55~            			csend
0545   DA55~            			csend
0545   DA55             
0545   DA55 24 EC       
0545   DA57             
0545   DA57~            			csend
0545   DA57~            			csend
0545   DA57             
0546   DA57             			;Now we are done with the walking animation
0547   DA57 96 0A       			ldaa	game_ram_a
0548   DA59 97 59       			staa	mbip_b1			;Put timer back in MBIP
0549   DA5B BD F3 AB    			jsr	macro_start
0550   DA5E             			;This next section will flash the time in the MBIP display 4 times...
0551   DA5E C1 04       			SETRAM_(regb,$04)			;RAM$01=$04
0552   DA60             			BEGIN_
0552   DA60             
0553   DA60             				SLEEP_(16)
0553   DA60~            				SLEEP_(16)
0553   DA60~            				SLEEP_(16)
0553   DA60             
0553   DA60 53 10       
0553   DA62             
0554   DA62             				EXE_
0554   DA62             
0554   DA62 44          
0555   DA63 86 FF       				      ldaa	#$FF
0556   DA65 97 59       				      staa	mbip_b1
0557   DA67             				EXEEND_
0557   DA67             
0557   DA67             
0557   DA67             
0557   DA67             
0557   DA67~            				EXEEND_
0557   DA67~            				EXEEND_
0557   DA67             
0557   DA62             
0557   DA62 46          
0557   DA63             
0557   DA67             
0557   DA67~            				EXEEND_
0557   DA67~            				EXEEND_
0557   DA67             
0558   DA67             				SLEEP_(16)
0558   DA67~            				SLEEP_(16)
0558   DA67~            				SLEEP_(16)
0558   DA67             
0558   DA67 53 10       
0558   DA69             
0559   DA69             				EXE_
0559   DA69             
0559   DA69 44          
0560   DA6A 96 0A       				      ldaa	game_ram_a
0561   DA6C 97 59       				      staa	mbip_b1
0562   DA6E             				EXEEND_
0562   DA6E             
0562   DA6E             
0562   DA6E             
0562   DA6E             
0562   DA6E~            				EXEEND_
0562   DA6E~            				EXEEND_
0562   DA6E             
0562   DA69             
0562   DA69 46          
0562   DA6A             
0562   DA6E             
0562   DA6E~            				EXEEND_
0562   DA6E~            				EXEEND_
0562   DA6E             
0563   DA6E B1 FF       				ADDRAM_(regb,-1)			;RAM$01-=1
0564   DA70             			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA70             
0564   DA70 5BFCE100FE  
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75             
0564   DA75             
0564   DA75             
0564   DA75             
0564   DA75             
0564   DA75             
0564   DA75             
0564   DA74             
0564   DA74 EB          
0564   DA75             
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75             
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75~            			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
0564   DA75             
0565   DA75             			EXE_
0565   DA75             
0565   DA75 44          
0566   DA76             			      ;Put back all the scores
0567   DA76 CE 00 00    			      ldx	#vm_reg_a
0568   DA79 DF 5C       			      stx	dmask_p1
0569   DA7B DF 5E       			      stx	dmask_p3
0570   DA7D 96 E1       			      ldaa	spare_ram+1
0571   DA7F 97 60       			      staa	comma_flags
0572   DA81             			EXEEND_
0572   DA81             
0572   DA81             
0572   DA81             
0572   DA81             
0572   DA81~            			EXEEND_
0572   DA81~            			EXEEND_
0572   DA81             
0572   DA75             
0572   DA75 4D          
0572   DA76             
0572   DA81             
0572   DA81~            			EXEEND_
0572   DA81~            			EXEEND_
0572   DA81             
0573   DA81             			JSRD_(update_commas)		
0573   DA81 57          
0573   DA82 EB A1       
0574   DA84 92          			JSRR_(bell_off_dec)		;Turn off that damn bell!!!	
0574   DA85 2C          
0575   DA86             			SSND_($12)				;Sound #12
0575   DA86             
0575   DA86 F2          
0575   DA87~            			SSND_($12)				;Sound #12
0575   DA87~            			SSND_($12)				;Sound #12
0575   DA87             
0576   DA87             			BITOFF_($40)			;Turn OFF: Bit#00
0576   DA87 11 40       
0577   DA89 A2          			JSRDR_(timer_dec)		
0577   DA8A 09          
0578   DA8B             			REMTHREADS_($F8,$42)		;Remove Multiple Threads Based on Priority
0578   DA8B 55 F8 42    
0579   DA8E             ;************************************************************
0580   DA8E             ;* NOTE: This falls through from above!
0581   DA8E             ;* General Illumination Routines
0582   DA8E             ;************************************************************
0583   DA8E             gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0583   DA8E             
0583   DA8E             
0583   DA8E             
0583   DA8E 5AFCEC00FE  
0583   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0583   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0583   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0583   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0583   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0583   DA93~            gi_on_dec		IFNER_($FC,$EC,$00)	      ;BEQR_RAM$0C==#0
0583   DA93             
0584   DA93 BC FF       			      ADDRAM_($0C,-1)			;RAM$0C-=1
0585   DA95             			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0585   DA95             
0585   DA95 5BFCEC0002  
0585   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0585   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0585   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0585   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0585   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0585   DA9A~            			      BNER_($FC,$EC,$00,gi_on_dec_end)	;BNER_RAM$0C==#0 to gi_on_dec_end
0585   DA9A             
0586   DA9A             			ENDIF_
0586   DA9A             
0586   DA9A             
0586   DA9A             
0586   DA9A             
0586   DA9A             
0586   DA9A~            			ENDIF_
0586   DA9A~            			ENDIF_
0586   DA9A             
0586   DA9A~            			ENDIF_
0586   DA9A~            			ENDIF_
0586   DA9A             
0586   DA92             
0586   DA92 07          
0586   DA93             
0586   DA93             
0586   DA93~            			ENDIF_
0586   DA93~            			ENDIF_
0586   DA93~            			ENDIF_
0586   DA93~            			ENDIF_
0586   DA93~            			ENDIF_
0586   DA93             
0586   DA9A             
0586   DA9A~            			ENDIF_
0586   DA9A~            			ENDIF_
0586   DA9A             
0587   DA9A             			SOL_(gi_off)			;Turn OFF Sol#3:gi
0587   DA9A 31 02       
0588   DA9C             gi_on_dec_end	MRTS_					;Macro RTS, Save MRA,MRB
0588   DA9C 02          
0589   DA9D             
0590   DA9D             
0591   DA9D BC 01       gi_off_inc		ADDRAM_($0C,$01)			;RAM$0C+=$01
0592   DA9F             			SOL_(gi_on)			      ;Turn ON Sol#3:gi
0592   DA9F 31 E2       
0593   DAA1             			MRTS_					;Macro RTS, Save MRA,MRB
0593   DAA1 02          
0594   DAA2             
0595   DAA2             ;********************************************************
0596   DAA2             ;* Attract Mode Lamps 2
0597   DAA2             ;*
0598   DAA2             ;* This is a ping-pong effect on the left and right
0599   DAA2             ;* magna save lamps. One lamp is one and it bounces 
0600   DAA2             ;* from end to end in the group.
0601   DAA2             ;********************************************************
0602   DAA2             attract_2		NEWTHREAD(attract_2a)
0602   DAA2 CE DA D1    
0602   DAA5 BD EA C4    
0603   DAA8 BD F3 AB    			jsr	macro_start
0604   DAAB             			PRI_($43)				;Priority=#43
0604   DAAB 52 43       
0605   DAAD             			BITON2_($66)			;Turn ON: Lamp#26(lmag1)
0605   DAAD 20 66       
0606   DAAF             			BITON2_($47)			;Turn ON: Lamp#07(rmag1)
0606   DAAF 20 47       
0607   DAB1             			BITON2_($60)			;Turn ON: Lamp#20(dt1)
0607   DAB1 20 60       
0608   DAB3             			BEGIN_
0608   DAB3             
0609   DAB3             				BEGIN_
0609   DAB3             
0610   DAB3 B0 01       					ADDRAM_(rega,$01)			;RAM$00+=$01
0611   DAB5             at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0611   DAB5             
0611   DAB5 5AFCFFE00100
0611   DABB 09
0611   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0611   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0611   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0611   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0611   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0611   DABC~            at2_loop			      BEQR_($FC,$FF,$E0,$01,$00,at2_1)	;BEQR_(LAMP#01(bip) & RAM$00)==#0 to at2_1
0611   DABC             
0612   DABC             				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DABC             
0612   DABC 5A F7 26 FF 
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0             
0612   DAC0             
0612   DAC0             
0612   DAC0             
0612   DAC0             
0612   DAC0             
0612   DAC0             
0612   DABF             
0612   DABF F3          
0612   DAC0             
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0             
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0~            				NEEND_($F7,$26)    		;BEQR_BIT#26
0612   DAC0             
0613   DAC0             				BE2D_($06,$05)			;Effect: Range #06 Range #05
0613   DAC0 2D 86 05    
0614   DAC3 80          				JMPR_(at2_2)			
0614   DAC4 07          
0615   DAC5             at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC5             
0615   DAC5 5A F7 2A FF 
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9             
0615   DAC9             
0615   DAC9             
0615   DAC9             
0615   DAC9             
0615   DAC9             
0615   DAC9             
0615   DAC8             
0615   DAC8 EA          
0615   DAC9             
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9             
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9~            at2_1			NEEND_($F7,$2A)			;BEQR_BIT#2A 
0615   DAC9             
0616   DAC9             			BE2E_($06,$05)			;Effect: Range #06 Range #05
0616   DAC9 2E 86 05    
0617   DACC             at2_2			BE2D_($0B)				;Effect: Range #0B
0617   DACC 2D 0B       
0618   DACE             			SLEEP_(4)
0618   DACE             
0618   DACE 74          
0618   DACF~            			SLEEP_(4)
0618   DACF~            			SLEEP_(4)
0618   DACF             
0619   DACF 8F          			JMPR_(at2_loop)			
0619   DAD0 E4          
0620   DAD1             			
0621   DAD1             ;********************************************************
0622   DAD1             ;* Attract Mode Lamps 2a
0623   DAD1             ;*
0624   DAD1             ;* This effect is the center lamps of the PF that include
0625   DAD1             ;* the double-score lamp, the multiplier lamps and the 
0626   DAD1             ;* bonus lamps from 1-30.  It is a sweep effect that 
0627   DAD1             ;* starts with the bottom (double-score) lamp and the 
0628   DAD1             ;* multiplier lamps turning on, then the bonus lamps 
0629   DAD1             ;* starting at 1 turning on and sequentially turning on
0630   DAD1             ;* up through 9. Once all lamps are on, the effect repeats
0631   DAD1             ;* but with the lamps turning off.
0632   DAD1             ;********************************************************			
0633   DAD1 BD F3 AB    attract_2a		jsr	macro_start
0634   DAD4             			PRI_($43)				;Priority=#43
0634   DAD4 52 43       
0635   DAD6             			BEGIN_
0635   DAD6             
0636   DAD6             				BITINV2_($59)			;Toggle: Lamp#19(double_score)
0636   DAD6 22 59       
0637   DAD8             				BITINV2_($7C)			;Toggle: Lamp#3C(2x)
0637   DAD8 22 7C       
0638   DADA             				BITINV2_($7F)			;Toggle: Lamp#3F(5x)
0638   DADA 22 7F       
0639   DADC             				SLEEP_(3)
0639   DADC             
0639   DADC 73          
0639   DADD~            				SLEEP_(3)
0639   DADD~            				SLEEP_(3)
0639   DADD             
0640   DADD             				BITINV2_($7D)			;Toggle: Lamp#3D(3x)
0640   DADD 22 7D       
0641   DADF             				BITINV2_($7E)			;Toggle: Lamp#3E(4x)
0641   DADF 22 7E       
0642   DAE1 C0 6F       				SETRAM_(rega,$6F)			;RAM$00=$6F
0643   DAE3             				BEGIN_
0643   DAE3             
0644   DAE3             					SLEEP_(3)
0644   DAE3             
0644   DAE3 73          
0644   DAE4~            					SLEEP_(3)
0644   DAE4~            					SLEEP_(3)
0644   DAE4             
0645   DAE4 B0 01       					ADDRAM_(rega,$01)			;RAM$00+=$01
0646   DAE6             					BITINVP2_(rega)			;Toggle Lamp/Bit @RAM:00
0646   DAE6 26 00       
0647   DAE8             				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAE8             
0647   DAE8 5BFCE078FE  
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED             
0647   DAED             
0647   DAED             
0647   DAED             
0647   DAED             
0647   DAED             
0647   DAED             
0647   DAEC             
0647   DAEC F6          
0647   DAED             
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED             
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED~            				EQEND_($FC,$E0,$78)		;BNER_RAM$00==$78
0647   DAED             
0648   DAED             				BITINV2_($7A)			;Toggle: Lamp#3A(bonus_20)
0648   DAED 22 7A       
0649   DAEF             				BITINV2_($7B)			;Toggle: Lamp#3B(bonus_30)
0649   DAEF 22 7B       
0650   DAF1             				SLEEP_(3)
0650   DAF1             
0650   DAF1 73          
0650   DAF2~            				SLEEP_(3)
0650   DAF2~            				SLEEP_(3)
0650   DAF2             
0651   DAF2             				BITINV2_($79)			;Toggle: Lamp#39(bonus_10)
0651   DAF2 22 79       
0652   DAF4             				SLEEP_(3)
0652   DAF4             
0652   DAF4 73          
0652   DAF5~            				SLEEP_(3)
0652   DAF5~            				SLEEP_(3)
0652   DAF5             
0653   DAF5             			LOOP_
0653   DAF5             
0653   DAF5 8F          
0653   DAF6 DF          
0654   DAF7             
0655   DAF7             ;***************************************************************
0656   DAF7             ;* Left Return Lane Code:
0657   DAF7             ;***************************************************************						
0658   DAF7             sw_4_rollover	EXE_
0658   DAF7             
0658   DAF7 44          
0659   DAF8             			      NEWTHREAD(sw_12345_com)		;Spawn the new thread for 12345 logic
0659   DAF8 CE E1 96    
0659   DAFB BD EA C4    
0660   DAFE             			EXEEND_
0660   DAFE             
0660   DAFE             
0660   DAFE             
0660   DAFE             
0660   DAFE~            			EXEEND_
0660   DAFE~            			EXEEND_
0660   DAFE             
0660   DAF7             
0660   DAF7 48          
0660   DAF8             
0660   DAFE             
0660   DAFE~            			EXEEND_
0660   DAFE~            			EXEEND_
0660   DAFE             
0661   DAFE A0          			JSRDR_(spawn_loop)		;Turn on the appropriate loop lamp		
0661   DAFF 12          
0662   DB00 91          			JSRR_(inc_bonus)			;1 bonus advance		
0662   DB01 FD          
0663   DB02             			IFNER_($41)			      ;BEQR_BIT#01
0663   DB02             
0663   DB02             
0663   DB02             
0663   DB02 5A 41 00    
0663   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0663   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0663   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0663   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0663   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0663   DB05~            			IFNER_($41)			      ;BEQR_BIT#01
0663   DB05             
0664   DB05                   			BITFL_($2B)				;Flash: Lamp#2B(extra_kick)
0664   DB05 13 2B       
0665   DB07                   			PRI_($20)				;Priority=#20
0665   DB07 52 20       
0666   DB09                   			JSRD_(get_lord_num)			
0666   DB09 57          
0666   DB0A E5 95       
0667   DB0C 60                			SLEEPI_(rega)			;Delay RAM$00
0668   DB0D                   			SLEEP_(160)
0668   DB0D~                  			SLEEP_(160)
0668   DB0D~                  			SLEEP_(160)
0668   DB0D             
0668   DB0D 53 A0       
0668   DB0F             
0669   DB0F                   			BITOFF_($2B)			;Turn OFF: Lamp#2B(extra_kick)
0669   DB0F 11 2B       
0670   DB11                   	      ENDIF_
0670   DB11             
0670   DB11             
0670   DB11             
0670   DB11             
0670   DB11             
0670   DB11~                  	      ENDIF_
0670   DB11~                  	      ENDIF_
0670   DB11             
0670   DB11~                  	      ENDIF_
0670   DB11~                  	      ENDIF_
0670   DB11             
0670   DB04             
0670   DB04 0C          
0670   DB05             
0670   DB05             
0670   DB05~                  	      ENDIF_
0670   DB05~                  	      ENDIF_
0670   DB05~                  	      ENDIF_
0670   DB05~                  	      ENDIF_
0670   DB05~                  	      ENDIF_
0670   DB05             
0670   DB11             
0670   DB11~                  	      ENDIF_
0670   DB11~                  	      ENDIF_
0670   DB11             
0671   DB11             			KILL_					;Remove This Thread
0671   DB11 03          
0672   DB12             
0673   DB12             spawn_loop		NEWTHREAD_JMP(activate_loop)
0673   DB12 CE DB 18    
0673   DB15 7E EA C4    
0674   DB18             			
0675   DB18 BD F3 AB    activate_loop	jsr	macro_start
0676   DB1B             			REMTHREADS_($F8,$50)		;Remove Multiple Threads Based on Priority
0676   DB1B 55 F8 50    
0677   DB1E             			PRI_($50)				;Priority=#50
0677   DB1E 52 50       
0678   DB20             			IFEQR_($F6,$01)			;BNER_RangeON#01
0678   DB20             
0678   DB20             
0678   DB20             
0678   DB20 5B F6 01 FF 
0678   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0678   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0678   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0678   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0678   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0678   DB24~            			IFEQR_($F6,$01)			;BNER_RangeON#01
0678   DB24             
0679   DB24             				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0679   DB24             
0679   DB24             
0679   DB24             
0679   DB24 5AFCD601FE  
0679   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0679   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0679   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0679   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0679   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0679   DB29~            				IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
0679   DB29             
0680   DB29             	      			BITFL_($1D)				;Flash: Lamp#1D(loop_dshield)
0680   DB29 13 1D       
0681   DB2B             	      			SLEEP_(160)
0681   DB2B~            	      			SLEEP_(160)
0681   DB2B~            	      			SLEEP_(160)
0681   DB2B             
0681   DB2B 53 A0       
0681   DB2D             
0682   DB2D             	      			BITOFF_($1D)			;Turn OFF: Lamp#1D(loop_dshield)
0682   DB2D 11 1D       
0683   DB2F             	      	      ENDIF_
0683   DB2F             
0683   DB2F             
0683   DB2F             
0683   DB2F             
0683   DB2F             
0683   DB2F~            	      	      ENDIF_
0683   DB2F~            	      	      ENDIF_
0683   DB2F             
0683   DB2F~            	      	      ENDIF_
0683   DB2F~            	      	      ENDIF_
0683   DB2F             
0683   DB28             
0683   DB28 06          
0683   DB29             
0683   DB29             
0683   DB29~            	      	      ENDIF_
0683   DB29~            	      	      ENDIF_
0683   DB29~            	      	      ENDIF_
0683   DB29~            	      	      ENDIF_
0683   DB29~            	      	      ENDIF_
0683   DB29             
0683   DB2F             
0683   DB2F~            	      	      ENDIF_
0683   DB2F~            	      	      ENDIF_
0683   DB2F             
0684   DB2F             	      		KILL_	
0684   DB2F 03          
0685   DB30             	      	ENDIF_				;Remove This Thread
0685   DB30             
0685   DB30             
0685   DB30             
0685   DB30             
0685   DB30             
0685   DB30~            	      	ENDIF_				;Remove This Thread
0685   DB30~            	      	ENDIF_				;Remove This Thread
0685   DB30             
0685   DB30~            	      	ENDIF_				;Remove This Thread
0685   DB30~            	      	ENDIF_				;Remove This Thread
0685   DB30             
0685   DB23             
0685   DB23 0C          
0685   DB24             
0685   DB24             
0685   DB24~            	      	ENDIF_				;Remove This Thread
0685   DB24~            	      	ENDIF_				;Remove This Thread
0685   DB24~            	      	ENDIF_				;Remove This Thread
0685   DB24~            	      	ENDIF_				;Remove This Thread
0685   DB24~            	      	ENDIF_				;Remove This Thread
0685   DB24             
0685   DB30             
0685   DB30~            	      	ENDIF_				;Remove This Thread
0685   DB30~            	      	ENDIF_				;Remove This Thread
0685   DB30             
0686   DB30             			;fall through
0687   DB30             ;***************************************************************
0688   DB30             ;* Will light the loop to award a bonus multiplier for a time
0689   DB30             ;* period determined by the number of multipliers already lit.
0690   DB30             ;***************************************************************
0691   DB30             light_x		BITFL_($1E)				;Flash: Lamp#1E(loop_x)
0691   DB30 13 1E       
0692   DB32             			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
0692   DB32 21 1E       
0693   DB34             			SLEEP_(96)
0693   DB34~            			SLEEP_(96)
0693   DB34~            			SLEEP_(96)
0693   DB34             
0693   DB34 53 60       
0693   DB36             
0694   DB36             			EXE_
0694   DB36             
0694   DB36 44          
0695   DB37 D6 17       			      ldab	$17
0696   DB39 C4 F0       			      andb	#$F0
0697   DB3B BD E5 A9    			      jsr	bits_to_int
0698   DB3E             			EXEEND_
0698   DB3E             
0698   DB3E             
0698   DB3E             
0698   DB3E             
0698   DB3E~            			EXEEND_
0698   DB3E~            			EXEEND_
0698   DB3E             
0698   DB36             
0698   DB36 49          
0698   DB37             
0698   DB3E             
0698   DB3E~            			EXEEND_
0698   DB3E~            			EXEEND_
0698   DB3E             
0699   DB3E             			EXE_
0699   DB3E             
0699   DB3E 44          
0700   DB3F 40          			      nega	
0701   DB40 48          			      asla	
0702   DB41 48          			      asla	
0703   DB42 48          			      asla	
0704   DB43 48          			      asla	
0705   DB44 48          			      asla	
0706   DB45 48          			      asla	
0707   DB46 4A          			      deca	
0708   DB47             			EXEEND_
0708   DB47             
0708   DB47             
0708   DB47             
0708   DB47             
0708   DB47~            			EXEEND_
0708   DB47~            			EXEEND_
0708   DB47             
0708   DB3E             
0708   DB3E 4A          
0708   DB3F             
0708   DB47             
0708   DB47~            			EXEEND_
0708   DB47~            			EXEEND_
0708   DB47             
0709   DB47 60          			SLEEPI_(rega)			;Delay RAM$00
0710   DB48             			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0710   DB48             
0710   DB48             
0710   DB48             
0710   DB48 5A 3E 00    
0710   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0710   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0710   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0710   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0710   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0710   DB4B~            			IFNER_($3E)		            ;BEQR_BIT#FFFFFFFE 
0710   DB4B             
0711   DB4B             			      SLEEP_(64)
0711   DB4B~            			      SLEEP_(64)
0711   DB4B~            			      SLEEP_(64)
0711   DB4B             
0711   DB4B 53 40       
0711   DB4D             
0712   DB4D             			ENDIF_
0712   DB4D             
0712   DB4D             
0712   DB4D             
0712   DB4D             
0712   DB4D             
0712   DB4D~            			ENDIF_
0712   DB4D~            			ENDIF_
0712   DB4D             
0712   DB4D~            			ENDIF_
0712   DB4D~            			ENDIF_
0712   DB4D             
0712   DB4A             
0712   DB4A 02          
0712   DB4B             
0712   DB4B             
0712   DB4B~            			ENDIF_
0712   DB4B~            			ENDIF_
0712   DB4B~            			ENDIF_
0712   DB4B~            			ENDIF_
0712   DB4B~            			ENDIF_
0712   DB4B             
0712   DB4D             
0712   DB4D~            			ENDIF_
0712   DB4D~            			ENDIF_
0712   DB4D             
0713   DB4D                   		BITOFF2_($5E)			;Turn OFF: Lamp#1E(loop_x)
0713   DB4D 21 5E       
0714   DB4F             			BITON2_($1E)			;Turn ON: Lamp#1E(loop_x)
0714   DB4F 20 1E       
0715   DB51             			SLEEP_(64)
0715   DB51~            			SLEEP_(64)
0715   DB51~            			SLEEP_(64)
0715   DB51             
0715   DB51 53 40       
0715   DB53             
0716   DB53             			BITOFF_($1E)			;Turn OFF: Lamp#1E(loop_x)
0716   DB53 11 1E       
0717   DB55             			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
0717   DB55 21 1E       
0718   DB57             			KILL_					;Remove This Thread
0718   DB57 03          
0719   DB58             
0720   DB58             ;**********************************************************************
0721   DB58             ;* Left Magnet Button
0722   DB58             ;**********************************************************************
0723   DB58             sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0723   DB58             
0723   DB58             
0723   DB58             
0723   DB58 5AFBFBF5066D
0723   DB5E 4FFB
0723   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0723   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0723   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0723   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0723   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0723   DB60~            sw_left_magnet	IFNER_($FB,$FB,$F5,$06,$6D,$4F)	;BEQR_(BIT#0F || (BIT#2D || RangeOFF#06))
0723   DB60             
0724   DB60             				PRI_($09)				;Priority=#09
0724   DB60 52 09       
0725   DB62 C1 2B       				SETRAM_(regb,$2B)			;RAM$01=$2B
0726   DB64 90          				JSRR_(gj_15)			
0726   DB65 2A          
0727   DB66             				BITON_($6D)				;Turn ON: Bit#2D - this will protect us from reentering here again
0727   DB66 10 6D       
0728   DB68             				SOL_(leftmag_on)		      ;Turn ON Sol#21:left_magnet
0728   DB68 31 F4       
0729   DB6A             				BEGIN_
0729   DB6A             
0730   DB6A C1 2B       					SETRAM_(regb,$2B)			;RAM$01=$2B
0731   DB6C 90          					JSRR_(gj_15)			
0731   DB6D 22          
0732   DB6E             					BE1C_($06)				;Effect: Range #06
0732   DB6E 1C 06       
0733   DB70 C0 20       					SETRAM_(rega,$20)			;RAM$00=$20
0734   DB72             					BEGIN_
0734   DB72             
0735   DB72 90          						JSRR_(mag_tick)			;Does lamp effect and a 'tick', minimum 
0735   DB73 26          
0736   DB74             											;magnet on time is 20 ticks.		
0737   DB74             						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0737   DB74             
0737   DB74 5B F8 31 0F 
0737   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0737   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0737   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0737   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0737   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0737   DB78~            						BNER_($F8,$31,lmag_off)		;BNER_SW#31 to lmag_off
0737   DB78             
0738   DB78             					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB78             
0738   DB78 5BFCE000FE  
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D             
0738   DB7D             
0738   DB7D             
0738   DB7D             
0738   DB7D             
0738   DB7D             
0738   DB7D             
0738   DB7C             
0738   DB7C F5          
0738   DB7D             
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D             
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D~            					EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0738   DB7D             
0739   DB7D B1 C0       					ADDRAM_(regb,$C0)			;RAM$01+=$C0
0740   DB7F             					BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0740   DB7F 25 01       
0741   DB81             				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB81             
0741   DB81 5B F5 06 FF 
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85             
0741   DB85             
0741   DB85             
0741   DB85             
0741   DB85             
0741   DB85             
0741   DB85             
0741   DB84             
0741   DB84 E5          
0741   DB85             
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85             
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85~            				EQEND_($F5,$06)			;BNER_RangeOFF#06
0741   DB85             
0742   DB85             				;Here if we are out of magna-saves
0743   DB85 B1 40       				ADDRAM_(regb,$40)			;RAM$01+=$40
0744   DB87             lmag_off			SOL_(leftmag_off)             ;Turn OFF Sol#21:left_magnet
0744   DB87 31 14       
0745   DB89 B1 C0       				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0746   DB8B             				BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0746   DB8B 25 01       
0747   DB8D             				BITOFF_($6D)			;Turn OFF: Bit#2D
0747   DB8D 11 6D       
0748   DB8F             			ENDIF_
0748   DB8F             
0748   DB8F             
0748   DB8F             
0748   DB8F             
0748   DB8F             
0748   DB8F~            			ENDIF_
0748   DB8F~            			ENDIF_
0748   DB8F             
0748   DB8F~            			ENDIF_
0748   DB8F~            			ENDIF_
0748   DB8F             
0748   DB5F             
0748   DB5F 2F          
0748   DB60             
0748   DB60             
0748   DB60~            			ENDIF_
0748   DB60~            			ENDIF_
0748   DB60~            			ENDIF_
0748   DB60~            			ENDIF_
0748   DB60~            			ENDIF_
0748   DB60             
0748   DB8F             
0748   DB8F~            			ENDIF_
0748   DB8F~            			ENDIF_
0748   DB8F             
0749   DB8F             kill_2		KILL_					;Remove This Thread
0749   DB8F 03          
0750   DB90             
0751   DB90             
0752   DB90             gj_15			BEGIN_
0752   DB90             
0753   DB90 B1 FF       				ADDRAM_(regb,-1)			;RAM$01-=1
0754   DB92             			EQEND_($E1)				;BNER_RAM$01
0754   DB92             
0754   DB92 5B E1 00    
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95             
0754   DB95             
0754   DB95             
0754   DB95             
0754   DB95             
0754   DB95             
0754   DB95             
0754   DB94             
0754   DB94 FB          
0754   DB95             
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95             
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95~            			EQEND_($E1)				;BNER_RAM$01
0754   DB95             
0755   DB95             			BITONP2_(regb)			;Turn ON Lamp/Bit @RAM:01
0755   DB95 24 01       
0756   DB97 B1 40       			ADDRAM_(regb,$40)			;RAM$01+=$40
0757   DB99             			MRTS_					;Macro RTS, Save MRA,MRB
0757   DB99 02          
0758   DB9A             
0759   DB9A             ;**********************************************************************
0760   DB9A             ;* Routine to do the lamp effect for the magna-save. It will also
0761   DB9A             ;* decrement RAM $00 which is the minimum magnet on time counter and 
0762   DB9A             ;* create the magna-save sound.
0763   DB9A             ;**********************************************************************
0764   DB9A             mag_tick		SLEEP_(2)
0764   DB9A             
0764   DB9A 72          
0764   DB9B~            mag_tick		SLEEP_(2)
0764   DB9B~            mag_tick		SLEEP_(2)
0764   DB9B             
0765   DB9B             			BITINVP2_(regb)			;Toggle Lamp/Bit @RAM:01
0765   DB9B 26 01       
0766   DB9D             			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0766   DB9D             
0766   DB9D             
0766   DB9D             
0766   DB9D 5BFAF9C0E1F3
0766   DBA3 FBFCE16AFCE14BF5
0766   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0766   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0766   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0766   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0766   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0766   DBAB~            			IFEQR_($FA,$F9,$C0,$E1,$F3,$FB,$FC,$E1,$6A,$FC,$E1,$4B)
0766   DBAB             
0767   DBAB             				;BNER_((!(RAM$01==#75 || RAM$01==#106)) && (RAM$01 + BIT#80)) 
0768   DBAB B1 C0       				ADDRAM_(regb,$C0)			;RAM$01+=$C0
0769   DBAD             				BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0769   DBAD 25 01       
0770   DBAF B1 01       				ADDRAM_(regb,$01)			;RAM$01+=$01
0771   DBB1             				BITONP2_(regb)			;Turn ON Lamp/Bit @RAM:01
0771   DBB1 24 01       
0772   DBB3 B1 40       				ADDRAM_(regb,$40)			;RAM$01+=$40
0773   DBB5             			ENDIF_
0773   DBB5             
0773   DBB5             
0773   DBB5             
0773   DBB5             
0773   DBB5             
0773   DBB5~            			ENDIF_
0773   DBB5~            			ENDIF_
0773   DBB5             
0773   DBB5~            			ENDIF_
0773   DBB5~            			ENDIF_
0773   DBB5             
0773   DBAA             
0773   DBAA 0A          
0773   DBAB             
0773   DBAB             
0773   DBAB~            			ENDIF_
0773   DBAB~            			ENDIF_
0773   DBAB~            			ENDIF_
0773   DBAB~            			ENDIF_
0773   DBAB~            			ENDIF_
0773   DBAB             
0773   DBB5             
0773   DBB5~            			ENDIF_
0773   DBB5~            			ENDIF_
0773   DBB5             
0774   DBB5 B0 FF       			ADDRAM_(rega,-1)			;RAM$00-=1
0775   DBB7             			SSND_($1A)				;Sound #1A
0775   DBB7             
0775   DBB7 FA          
0775   DBB8~            			SSND_($1A)				;Sound #1A
0775   DBB8~            			SSND_($1A)				;Sound #1A
0775   DBB8             
0776   DBB8             			MRTS_					;Macro RTS, Save MRA,MRB
0776   DBB8 02          
0777   DBB9             ;**********************************************************************
0778   DBB9             ;* Right Magnet Button
0779   DBB9             ;**********************************************************************
0780   DBB9             sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0780   DBB9             
0780   DBB9 5AFBFBF5056E
0780   DBBF 4FCE
0780   DBC1~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0780   DBC1~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0780   DBC1~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0780   DBC1~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0780   DBC1~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0780   DBC1~            sw_right_magnet	BEQR_($FB,$FB,$F5,$05,$6E,$4F,kill_2)	;BEQR_(BIT#0F || (BIT#2E || RangeOFF#05)) to kill_2
0780   DBC1             
0781   DBC1             			PRI_($09)				;Priority=#09
0781   DBC1 52 09       
0782   DBC3             			BITON_($6E)				;Bit#2E=1 - this will protect us from reentering here again
0782   DBC3 10 6E       
0783   DBC5             			SOL_(rightmag_on)            	;Turn ON Sol#6:right_magnet
0783   DBC5 31 F5       
0784   DBC7             			BEGIN_
0784   DBC7             
0785   DBC7 C1 0C       				SETRAM_(regb,$0C)			;RAM$01=$0C
0786   DBC9 9F          				JSRR_(gj_15)			
0786   DBCA C5          
0787   DBCB             				BE1C_($05)				;Effect: Range #05
0787   DBCB 1C 05       
0788   DBCD C0 20       				SETRAM_(rega,$20)			;RAM$00=$20
0789   DBCF             				BEGIN_
0789   DBCF             
0790   DBCF 9F          					JSRR_(mag_tick)		;Does lamp effect and a 'tick', minimum 
0790   DBD0 C9          
0791   DBD1             											;magnet on time is $20 ticks.		
0792   DBD1             					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0792   DBD1             
0792   DBD1 5B F8 30 0F 
0792   DBD5~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0792   DBD5~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0792   DBD5~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0792   DBD5~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0792   DBD5~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0792   DBD5~            					BNER_($F8,$30,rmag_off)	;BNER_SW#30 to rmag_off
0792   DBD5             
0793   DBD5             	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBD5             
0793   DBD5 5BFCE000FE  
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA             
0793   DBDA             
0793   DBDA             
0793   DBDA             
0793   DBDA             
0793   DBDA             
0793   DBDA             
0793   DBD9             
0793   DBD9 F5          
0793   DBDA             
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA             
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA~            	      		EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0 
0793   DBDA             
0794   DBDA B1 C0       	      		ADDRAM_(regb,$C0)			;RAM$01+=$C0
0795   DBDC             	      		BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0795   DBDC 25 01       
0796   DBDE                   		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBDE             
0796   DBDE 5B F5 05 FF 
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2             
0796   DBE2             
0796   DBE2             
0796   DBE2             
0796   DBE2             
0796   DBE2             
0796   DBE2             
0796   DBE1             
0796   DBE1 E5          
0796   DBE2             
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2             
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2~                  		EQEND_($F5,$05)			;BNER_RangeOFF#05
0796   DBE2             
0797   DBE2                   		;Here if we are out of magna-saves
0798   DBE2 B1 40             		ADDRAM_(regb,$40)			;RAM$01+=$40
0799   DBE4             rmag_off		SOL_(rightmag_off)            ;Turn OFF Sol#6:right_magnet
0799   DBE4 31 15       
0800   DBE6 B1 C0       			ADDRAM_(regb,$C0)			;RAM$01+=$C0
0801   DBE8             			BITOFFP2_(regb)			;Turn OFF Lamp/Bit @RAM:01
0801   DBE8 25 01       
0802   DBEA             			BITOFF_($6E)			;Bit#2E=0 Set the magnet status bit
0802   DBEA 11 6E       
0803   DBEC             			KILL_					;Remove This Thread
0803   DBEC 03          
0804   DBED             
0805   DBED             ;**********************************************************************
0806   DBED             ;* Player Initialization: Called from System at start of each ball. 
0807   DBED             ;*                        This will flash the high score between balls.
0808   DBED             ;**********************************************************************
0809   DBED 96 60       hook_playerinit	ldaa	comma_flags
0810   DBEF 97 E1       			staa	spare_ram+1
0811   DBF1 7F 00 E5    			clr	spare_ram+5
0812   DBF4 BD F3 AB    			jsr	macro_start
0813   DBF7             			PRI_($05)				;Priority=#05
0813   DBF7 52 05       
0814   DBF9             			BITON_($4F)				;Turn ON: Bit#0F
0814   DBF9 10 4F       
0815   DBFB             			CPUX_					;Resume CPU Execution
0815   DBFB 04          
0816   DBFC CE 01 81    			ldx	#adj_backuphstd
0817   DBFF BD EF 53    			jsr	cmosinc_a
0818   DC02             			ifne
0818   DC02             
0818   DC02 27 FE       
0819   DC04 DE CE       				ldx	pscore_buf
0820   DC06 A6 00       				ldaa	$00,X
0821   DC08 4C          				inca	
0822   DC09             				ifne
0822   DC09             
0822   DC09 27 FE       
0823   DC0B BD FA 0B    					jsr	show_hstd
0824   DC0E 86 7F       					ldaa	#$7F
0825   DC10 BD F8 A4    					jsr	store_display_mask
0826   DC13 86 FF       					ldaa	#$FF
0827   DC15 97 60       					staa	comma_flags
0828   DC17 86 1D       					ldaa	#$1D
0829   DC19 BD EC FC    					jsr	isnd_once
0830   DC1C 86 05       					ldaa	#$05
0831   DC1E BD F1 69    					jsr	lamp_flash
0832   DC21 BD EA 2F    					jsr	addthread
0833   DC24 80          					.db $80
0834   DC25             		
0835   DC25 BD F1 5B    					jsr	lamp_off
0836   DC28 96 E1       					ldaa	spare_ram+1
0837   DC2A 97 60       					staa	comma_flags
0838   DC2C 4F          					clra	
0839   DC2D BD F8 A4    					jsr	store_display_mask
0840   DC30             				endif
0840   DC30             
0840   DC30             
0840   DC30             
0840   DC30             
0840   DC30             
0840   DC30~            				endif
0840   DC30~            				endif
0840   DC30             
0840   DC30~            				endif
0840   DC30~            				endif
0840   DC30             
0840   DC0A             
0840   DC0A 25          
0840   DC0B             
0840   DC0B             
0840   DC0B~            				endif
0840   DC0B~            				endif
0840   DC0B~            				endif
0840   DC0B             
0840   DC30             
0840   DC30~            				endif
0840   DC30~            				endif
0840   DC30             
0841   DC30             			endif
0841   DC30             
0841   DC30             
0841   DC30             
0841   DC30             
0841   DC30             
0841   DC30~            			endif
0841   DC30~            			endif
0841   DC30             
0841   DC30~            			endif
0841   DC30~            			endif
0841   DC30             
0841   DC03             
0841   DC03 2C          
0841   DC04             
0841   DC04             
0841   DC04~            			endif
0841   DC04~            			endif
0841   DC04~            			endif
0841   DC04             
0841   DC30             
0841   DC30~            			endif
0841   DC30~            			endif
0841   DC30             
0842   DC30 BD F3 AB    			jsr	macro_start
0843   DC33             			IFNER_($61)			      ;BEQR_BIT#21
0843   DC33             
0843   DC33             
0843   DC33             
0843   DC33 5A 61 00    
0843   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0843   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0843   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0843   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0843   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0843   DC36~            			IFNER_($61)			      ;BEQR_BIT#21
0843   DC36             
0844   DC36                   			SLEEP_(96)
0844   DC36~                  			SLEEP_(96)
0844   DC36~                  			SLEEP_(96)
0844   DC36             
0844   DC36 53 60       
0844   DC38             
0845   DC38                   			BITON_($61)				;Turn ON: Bit#21
0845   DC38 10 61       
0846   DC3A                   		ENDIF_
0846   DC3A             
0846   DC3A             
0846   DC3A             
0846   DC3A             
0846   DC3A             
0846   DC3A~                  		ENDIF_
0846   DC3A~                  		ENDIF_
0846   DC3A             
0846   DC3A~                  		ENDIF_
0846   DC3A~                  		ENDIF_
0846   DC3A             
0846   DC35             
0846   DC35 04          
0846   DC36             
0846   DC36             
0846   DC36~                  		ENDIF_
0846   DC36~                  		ENDIF_
0846   DC36~                  		ENDIF_
0846   DC36~                  		ENDIF_
0846   DC36~                  		ENDIF_
0846   DC36             
0846   DC3A             
0846   DC3A~                  		ENDIF_
0846   DC3A~                  		ENDIF_
0846   DC3A             
0847   DC3A             			BE29_($47)				;Effect: Range #07
0847   DC3A 29 47       
0848   DC3C 95          			JSRR_(add_drainshield)			
0848   DC3D E5          
0849   DC3E             			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0849   DC3E             
0849   DC3E             
0849   DC3E             
0849   DC3E 5BFCFF0FD701
0849   DC44 FC
0849   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0849   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0849   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0849   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0849   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0849   DC45~            			IFEQR_($FC,$FF,$0F,$D7,$01)	;BNER_(ADJ#7 & LAMP#0F(D))==#1
0849   DC45             
0850   DC45             				BE19_($06,$05)			;Effect: Range #06 Range #05
0850   DC45 19 86 05    
0851   DC48             			ENDIF_
0851   DC48             
0851   DC48             
0851   DC48             
0851   DC48             
0851   DC48             
0851   DC48~            			ENDIF_
0851   DC48~            			ENDIF_
0851   DC48             
0851   DC48~            			ENDIF_
0851   DC48~            			ENDIF_
0851   DC48             
0851   DC44             
0851   DC44 03          
0851   DC45             
0851   DC45             
0851   DC45~            			ENDIF_
0851   DC45~            			ENDIF_
0851   DC45~            			ENDIF_
0851   DC45~            			ENDIF_
0851   DC45~            			ENDIF_
0851   DC45             
0851   DC48             
0851   DC48~            			ENDIF_
0851   DC48~            			ENDIF_
0851   DC48             
0852   DC48             			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0852   DC48             
0852   DC48             
0852   DC48             
0852   DC48 5AFCD901FE  
0852   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0852   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0852   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0852   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0852   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0852   DC4D~            			IFNER_($FC,$D9,$01)	      ;BEQR_ADJ#9==#1
0852   DC4D             
0853   DC4D                   			EXE_
0853   DC4D             
0853   DC4D 44          
0854   DC4E                   			      NEWTHREAD(bg_snd)			;Start the BG Sound
0854   DC4E CE DC DF    
0854   DC51 BD EA C4    
0855   DC54                   			EXEEND_
0855   DC54             
0855   DC54             
0855   DC54             
0855   DC54             
0855   DC54~                  			EXEEND_
0855   DC54~                  			EXEEND_
0855   DC54             
0855   DC4D             
0855   DC4D 48          
0855   DC4E             
0855   DC54             
0855   DC54~                  			EXEEND_
0855   DC54~                  			EXEEND_
0855   DC54             
0856   DC54                   		ENDIF_
0856   DC54             
0856   DC54             
0856   DC54             
0856   DC54             
0856   DC54             
0856   DC54~                  		ENDIF_
0856   DC54~                  		ENDIF_
0856   DC54             
0856   DC54~                  		ENDIF_
0856   DC54~                  		ENDIF_
0856   DC54             
0856   DC4C             
0856   DC4C 07          
0856   DC4D             
0856   DC4D             
0856   DC4D~                  		ENDIF_
0856   DC4D~                  		ENDIF_
0856   DC4D~                  		ENDIF_
0856   DC4D~                  		ENDIF_
0856   DC4D~                  		ENDIF_
0856   DC4D             
0856   DC54             
0856   DC54~                  		ENDIF_
0856   DC54~                  		ENDIF_
0856   DC54             
0857   DC54             			IFEQR_($52)			;BNER_BIT#12
0857   DC54             
0857   DC54             
0857   DC54             
0857   DC54 5B 52 00    
0857   DC57~            			IFEQR_($52)			;BNER_BIT#12
0857   DC57~            			IFEQR_($52)			;BNER_BIT#12
0857   DC57~            			IFEQR_($52)			;BNER_BIT#12
0857   DC57~            			IFEQR_($52)			;BNER_BIT#12
0857   DC57~            			IFEQR_($52)			;BNER_BIT#12
0857   DC57~            			IFEQR_($52)			;BNER_BIT#12
0857   DC57             
0858   DC57                   			EXE_
0858   DC57             
0858   DC57 44          
0859   DC58                   			      NEWTHREAD(udt_init)		;Set up the Upper drop Targets
0859   DC58 CE DD 92    
0859   DC5B BD EA C4    
0860   DC5E                   			EXEEND_
0860   DC5E             
0860   DC5E             
0860   DC5E             
0860   DC5E             
0860   DC5E~                  			EXEEND_
0860   DC5E~                  			EXEEND_
0860   DC5E             
0860   DC57             
0860   DC57 48          
0860   DC58             
0860   DC5E             
0860   DC5E~                  			EXEEND_
0860   DC5E~                  			EXEEND_
0860   DC5E             
0861   DC5E                   	      ELSE_			
0861   DC5E             
0861   DC5E             
0861   DC5E             
0861   DC5E             
0861   DC56             
0861   DC56             
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56             
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56~                  	      ELSE_			
0861   DC56             
0861   DC56             
0861   DC56 09          
0861   DC5E             
0861   DC5E 80          
0861   DC5F 00          
0861   DC60             
0861   DC60             
0861   DC60             
0861   DC60~                  	      ELSE_			
0861   DC60~                  	      ELSE_			
0861   DC60             
0861   DC60~                  	      ELSE_			
0861   DC60~                  	      ELSE_			
0861   DC60             
0862   DC60             			      JSR_(udt_setup)
0862   DC60 56          
0862   DC61 E5 DA       
0863   DC63             			ENDIF_				
0863   DC63             
0863   DC63             
0863   DC63             
0863   DC63             
0863   DC63             
0863   DC63~            			ENDIF_				
0863   DC63~            			ENDIF_				
0863   DC63             
0863   DC63~            			ENDIF_				
0863   DC63~            			ENDIF_				
0863   DC63             
0863   DC5F             
0863   DC5F 03          
0863   DC60             
0863   DC60             
0863   DC60~            			ENDIF_				
0863   DC60~            			ENDIF_				
0863   DC60~            			ENDIF_				
0863   DC60~            			ENDIF_				
0863   DC60~            			ENDIF_				
0863   DC60             
0863   DC63             
0863   DC63~            			ENDIF_				
0863   DC63~            			ENDIF_				
0863   DC63             
0864   DC63             			SOL_(dtleft_on,dtright_on,gi_off,buzzer_off,bell_off)	
0864   DC63 35636402050E
0865   DC69                                                             ;Sol#4:dt_left ON  
0866   DC69             								;Sol#5:dt_right ON  
0867   DC69             								;Sol#3:GI OFF  
0868   DC69             								;Sol#6:buzzer OFF  
0869   DC69             								;Sol#15:bell OFF
0870   DC69 CC 00       			SETRAM_($0C,$00)			;RAM$0C=$00	Reset GI counter
0871   DC6B CE 00       			SETRAM_($0E,$00)			;RAM$0E=$00	Reset Bell counter
0872   DC6D CF 00       			SETRAM_($0F,$00)			;RAM$0F=$00 Reset Buzzer counter
0873   DC6F             			IFEQR_($41)			      ;BNER_BIT#01 
0873   DC6F             
0873   DC6F             
0873   DC6F             
0873   DC6F 5B 41 00    
0873   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0873   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0873   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0873   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0873   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0873   DC72~            			IFEQR_($41)			      ;BNER_BIT#01 
0873   DC72             
0874   DC72             			      JSRD_(lock_thread)
0874   DC72 57          
0874   DC73 DD 82       
0875   DC75             			ENDIF_			
0875   DC75             
0875   DC75             
0875   DC75             
0875   DC75             
0875   DC75             
0875   DC75~            			ENDIF_			
0875   DC75~            			ENDIF_			
0875   DC75             
0875   DC75~            			ENDIF_			
0875   DC75~            			ENDIF_			
0875   DC75             
0875   DC71             
0875   DC71 03          
0875   DC72             
0875   DC72             
0875   DC72~            			ENDIF_			
0875   DC72~            			ENDIF_			
0875   DC72~            			ENDIF_			
0875   DC72~            			ENDIF_			
0875   DC72~            			ENDIF_			
0875   DC72             
0875   DC75             
0875   DC75~            			ENDIF_			
0875   DC75~            			ENDIF_			
0875   DC75             
0876   DC75 92          			JSRR_(do_trough)			
0876   DC76 76          
0877   DC77             			BITOFF_($55)			;Turn OFF: Bit#15
0877   DC77 11 55       
0878   DC79             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
0878   DC79 55 F8 D0    
0879   DC7C A1          			JSRDR_(cpdisp_show)		
0879   DC7D 8D          
0880   DC7E             			BITOFF_($4F)			;Turn OFF: Bit#0F
0880   DC7E 11 4F       
0881   DC80 5EA5A6981C  			SWCLR_($A5,$A6,$98,$1C)		;Clear Sw#: $25(upper_eject) $26(lower_eject) $18(dt_rb) $1C(dt_ll)
0882   DC85             			CPUX_					;Resume CPU Execution
0882   DC85 04          
0883   DC86 39          			rts	
0884   DC87             			
0885   DC87 36          timer_inc		psha	
0886   DC88 96 E5       			ldaa	spare_ram+5
0887   DC8A 4C          			inca	
0888   DC8B 97 E5       			staa	spare_ram+5
0889   DC8D 86 C8       			ldaa	#$C8
0890   DC8F BD F2 08    			jsr	lampm_8
0891   DC92 32          			pula	
0892   DC93 39          			rts
0893   DC94             				
0894   DC94 36          timer_dec		psha	
0895   DC95 96 E5       			ldaa	spare_ram+5
0896   DC97             			ifne
0896   DC97             
0896   DC97 27 FE       
0897   DC99 4A          				deca	
0898   DC9A 97 E5       				staa	spare_ram+5
0899   DC9C 26 05       				bne	timer_dec_end
0900   DC9E             			endif
0900   DC9E             
0900   DC9E             
0900   DC9E             
0900   DC9E             
0900   DC9E             
0900   DC9E~            			endif
0900   DC9E~            			endif
0900   DC9E             
0900   DC9E~            			endif
0900   DC9E~            			endif
0900   DC9E             
0900   DC98             
0900   DC98 05          
0900   DC99             
0900   DC99             
0900   DC99~            			endif
0900   DC99~            			endif
0900   DC99~            			endif
0900   DC99             
0900   DC9E             
0900   DC9E~            			endif
0900   DC9E~            			endif
0900   DC9E             
0901   DC9E 86 C8       			ldaa	#$C8
0902   DCA0 BD F1 A7    			jsr	lampm_off
0903   DCA3 32          timer_dec_end	pula	
0904   DCA4 39          			rts	
0905   DCA5             
0906   DCA5             ;**********************************************************
0907   DCA5             ;* Bell Routines
0908   DCA5             ;**********************************************************			
0909   DCA5             bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0909   DCA5             
0909   DCA5             
0909   DCA5             
0909   DCA5 5BFCFFD8F2F0
0909   DCAB 00FB
0909   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0909   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0909   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0909   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0909   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0909   DCAD~            bell_on_inc		IFEQR_($FC,$FF,$D8,$F2,$F0,$00)	;BNER_(#F0 & ADJ#8)==#0 
0909   DCAD             
0910   DCAD BE 01       				ADDRAM_($0E,$01)			;RAM$0E+=$01
0911   DCAF             				SOL_(bell_on)			;Turn ON Sol#15:bell
0911   DCAF 31 EE       
0912   DCB1             			ENDIF_
0912   DCB1             
0912   DCB1             
0912   DCB1             
0912   DCB1             
0912   DCB1             
0912   DCB1~            			ENDIF_
0912   DCB1~            			ENDIF_
0912   DCB1             
0912   DCB1~            			ENDIF_
0912   DCB1~            			ENDIF_
0912   DCB1             
0912   DCAC             
0912   DCAC 04          
0912   DCAD             
0912   DCAD             
0912   DCAD~            			ENDIF_
0912   DCAD~            			ENDIF_
0912   DCAD~            			ENDIF_
0912   DCAD~            			ENDIF_
0912   DCAD~            			ENDIF_
0912   DCAD             
0912   DCB1             
0912   DCB1~            			ENDIF_
0912   DCB1~            			ENDIF_
0912   DCB1             
0913   DCB1             mrts_1		MRTS_					;Macro RTS, Save MRA,MRB
0913   DCB1 02          
0914   DCB2             
0915   DCB2             bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0915   DCB2             
0915   DCB2             
0915   DCB2             
0915   DCB2 5AFCEE00FE  
0915   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0915   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0915   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0915   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0915   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0915   DCB7~            bell_off_dec	IFNER_($FC,$EE,$00)	      ;BEQR_RAM$0E==#0
0915   DCB7             
0916   DCB7 BE FF       			      ADDRAM_($0E,-1)			;RAM$0E-=1
0917   DCB9             			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0917   DCB9             
0917   DCB9 5BFCEE00F3  
0917   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0917   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0917   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0917   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0917   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0917   DCBE~            			      BNER_($FC,$EE,$00,mrts_1)	;BNER_RAM$0E==#0 to mrts_1
0917   DCBE             
0918   DCBE             			ENDIF_
0918   DCBE             
0918   DCBE             
0918   DCBE             
0918   DCBE             
0918   DCBE             
0918   DCBE~            			ENDIF_
0918   DCBE~            			ENDIF_
0918   DCBE             
0918   DCBE~            			ENDIF_
0918   DCBE~            			ENDIF_
0918   DCBE             
0918   DCB6             
0918   DCB6 07          
0918   DCB7             
0918   DCB7             
0918   DCB7~            			ENDIF_
0918   DCB7~            			ENDIF_
0918   DCB7~            			ENDIF_
0918   DCB7~            			ENDIF_
0918   DCB7~            			ENDIF_
0918   DCB7             
0918   DCBE             
0918   DCBE~            			ENDIF_
0918   DCBE~            			ENDIF_
0918   DCBE             
0919   DCBE             			SOL_(bell_off)    		;Turn OFF Sol#15:bell
0919   DCBE 31 0E       
0920   DCC0             			MRTS_					;Macro RTS, Save MRA,MRB
0920   DCC0 02          
0921   DCC1             
0922   DCC1             ;**********************************************************
0923   DCC1             ;* Buzzer Routines
0924   DCC1             ;**********************************************************
0925   DCC1             buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0925   DCC1             
0925   DCC1 5BFCFFD80F00
0925   DCC7 E9
0925   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0925   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0925   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0925   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0925   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0925   DCC8~            buzz_on_inc		BNER_($FC,$FF,$D8,$0F,$00,mrts_1) ;BNER_(LAMP#0F(D) & ADJ#8)==#0 to mrts_1
0925   DCC8             
0926   DCC8 BF 01       			ADDRAM_($0F,$01)			;RAM$0F+=$01
0927   DCCA             			SOL_(buzzer_on)              	;Turn ON Sol#6:buzzer
0927   DCCA 31 E5       
0928   DCCC             			MRTS_					;Macro RTS, Save MRA,MRB
0928   DCCC 02          
0929   DCCD             
0930   DCCD             buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0930   DCCD             
0930   DCCD             
0930   DCCD             
0930   DCCD 5AFCEF00FE  
0930   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0930   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0930   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0930   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0930   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0930   DCD2~            buzz_off_dec	IFNER_($FC,$EF,$00)	      ;BEQR_RAM$0F==#0
0930   DCD2             
0931   DCD2 BF FF       			      ADDRAM_($0F,-1)			;RAM$0F-=1
0932   DCD4             			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0932   DCD4             
0932   DCD4 5BFCEF00D8  
0932   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0932   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0932   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0932   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0932   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0932   DCD9~            			      BNER_($FC,$EF,$00,mrts_1)	;BNER_RAM$0F==#0 to mrts_1
0932   DCD9             
0933   DCD9             			ENDIF_
0933   DCD9             
0933   DCD9             
0933   DCD9             
0933   DCD9             
0933   DCD9             
0933   DCD9~            			ENDIF_
0933   DCD9~            			ENDIF_
0933   DCD9             
0933   DCD9~            			ENDIF_
0933   DCD9~            			ENDIF_
0933   DCD9             
0933   DCD1             
0933   DCD1 07          
0933   DCD2             
0933   DCD2             
0933   DCD2~            			ENDIF_
0933   DCD2~            			ENDIF_
0933   DCD2~            			ENDIF_
0933   DCD2~            			ENDIF_
0933   DCD2~            			ENDIF_
0933   DCD2             
0933   DCD9             
0933   DCD9~            			ENDIF_
0933   DCD9~            			ENDIF_
0933   DCD9             
0934   DCD9             			SOL_(buzzer_off)            	;Turn OFF Sol#6:buzzer
0934   DCD9 31 05       
0935   DCDB             			MRTS_					;Macro RTS, Save MRA,MRB
0935   DCDB 02          
0936   DCDC             
0937   DCDC             
0938   DCDC             
0939   DCDC             
0940   DCDC 92          trough_kill		JSRR_(do_trough)			
0940   DCDD 0F          
0941   DCDE             			KILL_					;Remove This Thread
0941   DCDE 03          
0942   DCDF             
0943   DCDF             ;**********************************************************
0944   DCDF             ;* Background Sound Thread
0945   DCDF             ;**********************************************************
0946   DCDF BD F3 AB    bg_snd		jsr	macro_start
0947   DCE2             			PRI_($E0)				;Priority=#E0
0947   DCE2 52 E0       
0948   DCE4             			BEGIN_
0948   DCE4             
0949   DCE4             				SSND_($1B)				;Sound #1B
0949   DCE4             
0949   DCE4 FB          
0949   DCE5~            				SSND_($1B)				;Sound #1B
0949   DCE5~            				SSND_($1B)				;Sound #1B
0949   DCE5             
0950   DCE5 CB 00       				SETRAM_($0B,$00)			;RAM$0B=$00
0951   DCE7             				BEGIN_
0951   DCE7             
0952   DCE7             					SLEEP_(255)
0952   DCE7~            					SLEEP_(255)
0952   DCE7~            					SLEEP_(255)
0952   DCE7             
0952   DCE7 53 FF       
0952   DCE9             
0953   DCE9             					SLEEP_(192)
0953   DCE9~            					SLEEP_(192)
0953   DCE9~            					SLEEP_(192)
0953   DCE9             
0953   DCE9 53 C0       
0953   DCEB             
0954   DCEB             				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCEB             
0954   DCEB 5AFCEB00FE  
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0             
0954   DCF0             
0954   DCF0             
0954   DCF0             
0954   DCF0             
0954   DCF0             
0954   DCF0             
0954   DCEF             
0954   DCEF F7          
0954   DCF0             
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0             
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0~            				NEEND_($FC,$EB,$00)		;BEQR_RAM$0B==#0
0954   DCF0             
0955   DCF0             				JSRD_(send_sound)			
0955   DCF0 57          
0955   DCF1 FB 30       
0956   DCF3             			LOOP_
0956   DCF3             
0956   DCF3 8F          
0956   DCF4 EF          
0957   DCF5             
0958   DCF5             ;**************************************************************
0959   DCF5             ;* Add Bonus: This routine will add onto the running bonus, the
0960   DCF5             ;* 		  amount passed in B (RAM $01)
0961   DCF5             ;**************************************************************						
0962   DCF5             add_bonus_dly	BEGIN_
0962   DCF5             
0963   DCF5 90          				JSRR_(inc_bonus)			
0963   DCF6 08          
0964   DCF7 B1 FF       				ADDRAM_(regb,-1)			;RAM$01-=1
0965   DCF9             			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCF9             
0965   DCF9 5BFCE100FE  
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE             
0965   DCFE             
0965   DCFE             
0965   DCFE             
0965   DCFE             
0965   DCFE             
0965   DCFE             
0965   DCFD             
0965   DCFD F7          
0965   DCFE             
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE             
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE~            			EQEND_($FC,$E1,$00) 		;BNER_RAM$01==#0 
0965   DCFE             
0966   DCFE             			MRTS_					;Macro RTS, Save MRA,MRB
0966   DCFE 02          
0967   DCFF             
0968   DCFF             inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0968   DCFF             
0968   DCFF             
0968   DCFF             
0968   DCFF 5AFBFA3BF600
0968   DD05 4FFB
0968   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0968   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0968   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0968   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0968   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0968   DD07~            inc_bonus		IFNER_($FB,$FA,$3B,$F6,$00,$4F) ;BEQR_(BIT#0F || (RangeON#00 && BIT#FFFFFFFB))
0968   DD07             
0969   DD07             				BE1B_($00)				;Effect: Range #00
0969   DD07 1B 00       
0970   DD09             				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0970   DD09             
0970   DD09             
0970   DD09             
0970   DD09 5B F5 00 FF 
0970   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0970   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0970   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0970   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0970   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0970   DD0D~            				IFEQR_($F5,$00)	            ;BNER_RangeOFF#00
0970   DD0D             
0971   DD0D             	      			EXE_
0971   DD0D             
0971   DD0D 44          
0972   DD0E 36          	      			      psha	
0973   DD0F 86 03       	      			      ldaa	#$03
0974   DD11 BD F1 D5    	      			      jsr	$F1D5
0975   DD14 32          	      			      pula
0976   DD15             	      			EXEEND_	
0976   DD15             
0976   DD15             
0976   DD15             
0976   DD15             
0976   DD15~            	      			EXEEND_	
0976   DD15~            	      			EXEEND_	
0976   DD15             
0976   DD0D             
0976   DD0D 49          
0976   DD0E             
0976   DD15             
0976   DD15~            	      			EXEEND_	
0976   DD15~            	      			EXEEND_	
0976   DD15             
0977   DD15             	      	      ENDIF_
0977   DD15             
0977   DD15             
0977   DD15             
0977   DD15             
0977   DD15             
0977   DD15~            	      	      ENDIF_
0977   DD15~            	      	      ENDIF_
0977   DD15             
0977   DD15~            	      	      ENDIF_
0977   DD15~            	      	      ENDIF_
0977   DD15             
0977   DD0C             
0977   DD0C 08          
0977   DD0D             
0977   DD0D             
0977   DD0D~            	      	      ENDIF_
0977   DD0D~            	      	      ENDIF_
0977   DD0D~            	      	      ENDIF_
0977   DD0D~            	      	      ENDIF_
0977   DD0D~            	      	      ENDIF_
0977   DD0D             
0977   DD15             
0977   DD15~            	      	      ENDIF_
0977   DD15~            	      	      ENDIF_
0977   DD15             
0978   DD15             	      	ENDIF_
0978   DD15             
0978   DD15             
0978   DD15             
0978   DD15             
0978   DD15             
0978   DD15~            	      	ENDIF_
0978   DD15~            	      	ENDIF_
0978   DD15             
0978   DD15~            	      	ENDIF_
0978   DD15~            	      	ENDIF_
0978   DD15             
0978   DD06             
0978   DD06 0E          
0978   DD07             
0978   DD07             
0978   DD07~            	      	ENDIF_
0978   DD07~            	      	ENDIF_
0978   DD07~            	      	ENDIF_
0978   DD07~            	      	ENDIF_
0978   DD07~            	      	ENDIF_
0978   DD07             
0978   DD15             
0978   DD15~            	      	ENDIF_
0978   DD15~            	      	ENDIF_
0978   DD15             
0979   DD15             			MRTS_					;Macro RTS, Save MRA,MRB
0979   DD15 02          
0980   DD16             
0981   DD16             ;**************************************************************
0982   DD16             ;* Outhole Routine Called from System
0983   DD16             ;**************************************************************
0984   DD16 BD DE 0B    hook_outhole	jsr	cpdisp_show
0985   DD19 D6 CA       			ldab	flag_bonusball
0986   DD1B BD F3 AB    			jsr	macro_start
0987   DD1E             			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
0987   DD1E 55 F8 D0    
0988   DD21             			JSRD_(send_sound)			
0988   DD21 57          
0988   DD22 FB 30       
0989   DD24             			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
0989   DD24             
0989   DD24             
0989   DD24             
0989   DD24 5AFCE100FE  
0989   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
0989   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
0989   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
0989   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
0989   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
0989   DD29~            			IFNER_($FC,$E1,$00)	      ;BEQR_RAM$01==#0
0989   DD29             
0990   DD29                   			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0990   DD29             
0990   DD29             
0990   DD29             
0990   DD29 5B 19 00    
0990   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0990   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0990   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0990   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0990   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0990   DD2C~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
0990   DD2C             
0991   DD2C                   			      BITFL_($19)				;Flash: Lamp#19(double_score)
0991   DD2C 13 19       
0992   DD2E                   			ENDIF_
0992   DD2E             
0992   DD2E             
0992   DD2E             
0992   DD2E             
0992   DD2E             
0992   DD2E~                  			ENDIF_
0992   DD2E~                  			ENDIF_
0992   DD2E             
0992   DD2E~                  			ENDIF_
0992   DD2E~                  			ENDIF_
0992   DD2E             
0992   DD2B             
0992   DD2B 02          
0992   DD2C             
0992   DD2C             
0992   DD2C~                  			ENDIF_
0992   DD2C~                  			ENDIF_
0992   DD2C~                  			ENDIF_
0992   DD2C~                  			ENDIF_
0992   DD2C~                  			ENDIF_
0992   DD2C             
0992   DD2E             
0992   DD2E~                  			ENDIF_
0992   DD2E~                  			ENDIF_
0992   DD2E             
0993   DD2E C8 10             			SETRAM_($08,$10)			;RAM$08=$10
0994   DD30                   			BE28_($4D)				;Effect: Range #0D (Bounus 1-30)
0994   DD30 28 4D       
0995   DD32 C1 01       mult_loop		      SETRAM_(regb,$01)			;RAM$01=$01
0996   DD34                   			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
0996   DD34             
0996   DD34             
0996   DD34             
0996   DD34 5B 3E 00    
0996   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
0996   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
0996   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
0996   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
0996   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
0996   DD37~                  			IFEQR_($3E)			      ;BNER_BIT#FFFFFFFE 
0996   DD37             
0997   DD37 C1 02             			      SETRAM_(regb,$02)			;RAM$01=$02
0998   DD39                   			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
0998   DD39             
0998   DD39             
0998   DD39             
0998   DD39 5B 3F 00    
0998   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
0998   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
0998   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
0998   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
0998   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
0998   DD3C~                  			      IFEQR_($3F)			      ;BNER_BIT#FFFFFFFF 
0998   DD3C             
0999   DD3C C1 05             			            SETRAM_(regb,$05)			;RAM$01=$05
1000   DD3E                   			      ENDIF_
1000   DD3E             
1000   DD3E             
1000   DD3E             
1000   DD3E             
1000   DD3E             
1000   DD3E~                  			      ENDIF_
1000   DD3E~                  			      ENDIF_
1000   DD3E             
1000   DD3E~                  			      ENDIF_
1000   DD3E~                  			      ENDIF_
1000   DD3E             
1000   DD3B             
1000   DD3B 02          
1000   DD3C             
1000   DD3C             
1000   DD3C~                  			      ENDIF_
1000   DD3C~                  			      ENDIF_
1000   DD3C~                  			      ENDIF_
1000   DD3C~                  			      ENDIF_
1000   DD3C~                  			      ENDIF_
1000   DD3C             
1000   DD3E             
1000   DD3E~                  			      ENDIF_
1000   DD3E~                  			      ENDIF_
1000   DD3E             
1001   DD3E                   			ENDIF_
1001   DD3E             
1001   DD3E             
1001   DD3E             
1001   DD3E             
1001   DD3E             
1001   DD3E~                  			ENDIF_
1001   DD3E~                  			ENDIF_
1001   DD3E             
1001   DD3E~                  			ENDIF_
1001   DD3E~                  			ENDIF_
1001   DD3E             
1001   DD36             
1001   DD36 07          
1001   DD37             
1001   DD37             
1001   DD37~                  			ENDIF_
1001   DD37~                  			ENDIF_
1001   DD37~                  			ENDIF_
1001   DD37~                  			ENDIF_
1001   DD37~                  			ENDIF_
1001   DD37             
1001   DD3E             
1001   DD3E~                  			ENDIF_
1001   DD3E~                  			ENDIF_
1001   DD3E             
1002   DD3E                   			BEGIN_
1002   DD3E             
1003   DD3E C0 0D       		 			SETRAM_(rega,$0D)			;RAM$00=$0D
1004   DD40             	      			JSRD_(lampm_x)
1004   DD40 57          
1004   DD41 F3 02       
1005   DD43             	      			;Do our bonus countdown here...			
1006   DD43             bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1006   DD43             
1006   DD43             
1006   DD43             
1006   DD43 5AFBF0F58DFD
1006   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1006   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1006   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1006   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1006   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1006   DD49~            bonus_loop		      		IFNER_($FB,$F0,$F5,$8D)	      ;BEQR_(RangeOFF#8D || TILT)
1006   DD49             
1007   DD49             	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD49 40 1E       
1007   DD4B             
1007   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4B             
1007   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4B             
1007   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4B~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4B             
1007   DD4B             
1007   DD4B 0B          
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C~            	            			PTSND_($1E,1,1000)		;Sound#1E/1000 Points
1007   DD4C             
1007   DD4C             
1007   DD4C             
1007   DD4C             
1008   DD4C             	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1008   DD4C             
1008   DD4C             
1008   DD4C             
1008   DD4C 5A F5 80 FF 
1008   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1008   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1008   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1008   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1008   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1008   DD50~            	            			IFNER_($F5,$80)		      ;BEQR_RangeOFF#80
1008   DD50             
1009   DD50             	            			      BE2C_($00)				;Effect: Range #00
1009   DD50 2C 00       
1010   DD52             	            			ELSE_			
1010   DD52             
1010   DD52             
1010   DD52             
1010   DD52             
1010   DD4F             
1010   DD4F             
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F             
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F~            	            			ELSE_			
1010   DD4F             
1010   DD4F             
1010   DD4F 04          
1010   DD52             
1010   DD52 80          
1010   DD53 00          
1010   DD54             
1010   DD54             
1010   DD54             
1010   DD54~            	            			ELSE_			
1010   DD54~            	            			ELSE_			
1010   DD54             
1010   DD54~            	            			ELSE_			
1010   DD54~            	            			ELSE_			
1010   DD54             
1011   DD54             	                                    BE28_($00)				;Effect: Range #00
1011   DD54 28 00       
1012   DD56 C0 83       	            			      SETRAM_(rega,$83)			;RAM$00=$83
1013   DD58             	            			      JSRD_(lampm_z)
1013   DD58 57          
1013   DD59 F2 B3       
1014   DD5B             	            			ENDIF_			
1014   DD5B             
1014   DD5B             
1014   DD5B             
1014   DD5B             
1014   DD5B             
1014   DD5B~            	            			ENDIF_			
1014   DD5B~            	            			ENDIF_			
1014   DD5B             
1014   DD5B~            	            			ENDIF_			
1014   DD5B~            	            			ENDIF_			
1014   DD5B             
1014   DD53             
1014   DD53 07          
1014   DD54             
1014   DD54             
1014   DD54~            	            			ENDIF_			
1014   DD54~            	            			ENDIF_			
1014   DD54~            	            			ENDIF_			
1014   DD54~            	            			ENDIF_			
1014   DD54~            	            			ENDIF_			
1014   DD54             
1014   DD5B             
1014   DD5B~            	            			ENDIF_			
1014   DD5B~            	            			ENDIF_			
1014   DD5B             
1015   DD5B             				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1015   DD5B             
1015   DD5B             
1015   DD5B             
1015   DD5B 5AFCE802FE  
1015   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1015   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1015   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1015   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1015   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1015   DD60~            				            IFNER_($FC,$E8,$02)	      ;BEQR_RAM$08==#2
1015   DD60             
1016   DD60 B8 FF       	            			      ADDRAM_($08,-1)			;RAM$08-=1
1017   DD62             	            			ENDIF_
1017   DD62             
1017   DD62             
1017   DD62             
1017   DD62             
1017   DD62             
1017   DD62~            	            			ENDIF_
1017   DD62~            	            			ENDIF_
1017   DD62             
1017   DD62~            	            			ENDIF_
1017   DD62~            	            			ENDIF_
1017   DD62             
1017   DD5F             
1017   DD5F 02          
1017   DD60             
1017   DD60             
1017   DD60~            	            			ENDIF_
1017   DD60~            	            			ENDIF_
1017   DD60~            	            			ENDIF_
1017   DD60~            	            			ENDIF_
1017   DD60~            	            			ENDIF_
1017   DD60             
1017   DD62             
1017   DD62~            	            			ENDIF_
1017   DD62~            	            			ENDIF_
1017   DD62             
1018   DD62 68          				            SLEEPI_($8)				;Delay RAM$08
1019   DD63 8F          	            			JMPR_(bonus_loop)
1019   DD64 DE          
1020   DD65             	      			ENDIF_	
1020   DD65             
1020   DD65             
1020   DD65             
1020   DD65             
1020   DD65             
1020   DD65~            	      			ENDIF_	
1020   DD65~            	      			ENDIF_	
1020   DD65             
1020   DD65~            	      			ENDIF_	
1020   DD65~            	      			ENDIF_	
1020   DD65             
1020   DD48             
1020   DD48 1C          
1020   DD49             
1020   DD49             
1020   DD49~            	      			ENDIF_	
1020   DD49~            	      			ENDIF_	
1020   DD49~            	      			ENDIF_	
1020   DD49~            	      			ENDIF_	
1020   DD49~            	      			ENDIF_	
1020   DD49             
1020   DD65             
1020   DD65~            	      			ENDIF_	
1020   DD65~            	      			ENDIF_	
1020   DD65             
1021   DD65 B1 FF       				      ADDRAM_(regb,-1)			;RAM$01-=1
1022   DD67                   			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD67             
1022   DD67 5BFCE100FE  
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C             
1022   DD6C             
1022   DD6C             
1022   DD6C             
1022   DD6C             
1022   DD6C             
1022   DD6C             
1022   DD6B             
1022   DD6B D2          
1022   DD6C             
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C             
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C~                  			EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1022   DD6C             
1023   DD6C                   			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1023   DD6C             
1023   DD6C             
1023   DD6C             
1023   DD6C 5A F5 01 FF 
1023   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1023   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1023   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1023   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1023   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1023   DD70~                  			IFNER_($F5,$01)		      ;BEQR_RangeOFF#01
1023   DD70             
1024   DD70                   			      BE1C_($01)				;Effect: Range #01
1024   DD70 1C 01       
1025   DD72 8F                			      JMPR_(mult_loop)
1025   DD73 BE          
1026   DD74                   			ENDIF_	
1026   DD74             
1026   DD74             
1026   DD74             
1026   DD74             
1026   DD74             
1026   DD74~                  			ENDIF_	
1026   DD74~                  			ENDIF_	
1026   DD74             
1026   DD74~                  			ENDIF_	
1026   DD74~                  			ENDIF_	
1026   DD74             
1026   DD6F             
1026   DD6F 04          
1026   DD70             
1026   DD70             
1026   DD70~                  			ENDIF_	
1026   DD70~                  			ENDIF_	
1026   DD70~                  			ENDIF_	
1026   DD70~                  			ENDIF_	
1026   DD70~                  			ENDIF_	
1026   DD70             
1026   DD74             
1026   DD74~                  			ENDIF_	
1026   DD74~                  			ENDIF_	
1026   DD74             
1027   DD74                   	      ENDIF_	
1027   DD74             
1027   DD74             
1027   DD74             
1027   DD74             
1027   DD74             
1027   DD74~                  	      ENDIF_	
1027   DD74~                  	      ENDIF_	
1027   DD74             
1027   DD74~                  	      ENDIF_	
1027   DD74~                  	      ENDIF_	
1027   DD74             
1027   DD28             
1027   DD28 4B          
1027   DD29             
1027   DD29             
1027   DD29~                  	      ENDIF_	
1027   DD29~                  	      ENDIF_	
1027   DD29~                  	      ENDIF_	
1027   DD29~                  	      ENDIF_	
1027   DD29~                  	      ENDIF_	
1027   DD29             
1027   DD74             
1027   DD74~                  	      ENDIF_	
1027   DD74~                  	      ENDIF_	
1027   DD74             
1028   DD74             			BEGIN_
1028   DD74             
1029   DD74             				SSND_($1C)				;Sound #1C
1029   DD74             
1029   DD74 FC          
1029   DD75~            				SSND_($1C)				;Sound #1C
1029   DD75~            				SSND_($1C)				;Sound #1C
1029   DD75             
1030   DD75 A0          				JSRDR_(cpdisp_show)		
1030   DD76 94          
1031   DD77             				REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
1031   DD77 55 F8 D0    
1032   DD7A             				SLEEP_(2)
1032   DD7A             
1032   DD7A 72          
1032   DD7B~            				SLEEP_(2)
1032   DD7B~            				SLEEP_(2)
1032   DD7B             
1033   DD7B             			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD7B             
1033   DD7B 5AFB5162FE  
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80             
1033   DD80             
1033   DD80             
1033   DD80             
1033   DD80             
1033   DD80             
1033   DD80             
1033   DD7F             
1033   DD7F F4          
1033   DD80             
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80             
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80~            			NEEND_($FB,$51,$62)		;BEQR_(BIT#22 || BIT#11)
1033   DD80             
1034   DD80             			CPUX_					;Resume CPU Execution
1034   DD80 04          
1035   DD81 39          			rts	
1036   DD82             
1037   DD82             ;**********************************************************
1038   DD82             ;* Lock Thread Enable: Creates a thread with ID = $60 that
1039   DD82             ;*                     flashes the lock lamp.
1040   DD82             ;**********************************************************			
1041   DD82             lock_thread		NEWTHREAD_JMP(lock_enable)
1041   DD82 CE DD 88    
1041   DD85 7E EA C4    
1042   DD88             			
1043   DD88 BD F3 AB    lock_enable		jsr	macro_start
1044   DD8B             			PRI_($60)				;Priority=#60
1044   DD8B 52 60       
1045   DD8D             lock_loop		BITINV_($2C)			;Toggle: Lamp#2C(lock)
1045   DD8D 12 2C       
1046   DD8F             			SLEEP_(3)
1046   DD8F             
1046   DD8F 73          
1046   DD90~            			SLEEP_(3)
1046   DD90~            			SLEEP_(3)
1046   DD90             
1047   DD90 8F          			JMPR_(lock_loop)
1047   DD91 FB          
1048   DD92             
1049   DD92             ;**********************************************************
1050   DD92             ;* Upper drop target init thread
1051   DD92             ;**********************************************************						
1052   DD92 BD F3 AB    udt_init		jsr	macro_start
1053   DD95             			PRI_($30)				;Priority=#30
1053   DD95 52 30       
1054   DD97             			BITON_($42)				;Turn ON: Bit#02
1054   DD97 10 42       
1055   DD99             			SOL_(dtrelease_on)		;Turn ON Sol#14:dt_release
1055   DD99 31 6D       
1056   DD9B             			BEGIN_
1056   DD9B             
1057   DD9B             				SLEEP_(32)
1057   DD9B~            				SLEEP_(32)
1057   DD9B~            				SLEEP_(32)
1057   DD9B             
1057   DD9B 53 20       
1057   DD9D             
1058   DD9D             				EXE_
1058   DD9D             
1058   DD9D 44          
1059   DD9E 96 D6       				      ldaa	flag_timer_bip
1060   DDA0             				EXEEND_
1060   DDA0             
1060   DDA0             
1060   DDA0             
1060   DDA0             
1060   DDA0~            				EXEEND_
1060   DDA0~            				EXEEND_
1060   DDA0             
1060   DD9D             
1060   DD9D 44          
1060   DD9E             
1060   DDA0             
1060   DDA0~            				EXEEND_
1060   DDA0~            				EXEEND_
1060   DDA0             
1061   DDA0             			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA0             
1061   DDA0 5AFCE000FE  
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5             
1061   DDA5             
1061   DDA5             
1061   DDA5             
1061   DDA5             
1061   DDA5             
1061   DDA5             
1061   DDA4             
1061   DDA4 F6          
1061   DDA5             
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5             
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5~            			NEEND_($FC,$E0,$00)		;BEQR_RAM$00==#0 
1061   DDA5             
1062   DDA5 5F          			JMP_(udt_reset)				
1062   DDA6 E6 A2       
1063   DDA8             
1064   DDA8             ;**********************************************************
1065   DDA8             ;* Main Reset Hook
1066   DDA8             ;**********************************************************
1067   DDA8 86 1C       hook_reset		ldaa	#$1C
1068   DDAA 7E EC FC    			jmp	isnd_once			;Kill Background Sounds
1069   DDAD             			begin
1069   DDAD             
1070   DDAD 7E EA 67    				jmp	killthread
1071   DDB0 96 18       disp_animation		ldaa	bitflags			;See if bit#01 is set
1072   DDB2 46          				rora					;If so, we had score, stop the flashing
1073   DDB3             			ccend
1073   DDB3             
1073   DDB3             
1073   DDB3~            			ccend
1073   DDB3~            			ccend
1073   DDB3~            			ccend
1073   DDB3             
1073   DDB3 25 F8       
1073   DDB5             
1073   DDB5~            			ccend
1073   DDB5~            			ccend
1073   DDB5             
1074   DDB5 86 D0       			ldaa	#$D0
1075   DDB7 C6 F8       			ldab	#$F8
1076   DDB9 BD EA FB    			jsr	kill_threads
1077   DDBC CE 00 48    			ldx	#score_p1_b1
1078   DDBF 96 CD       			ldaa	player_up
1079   DDC1 48          			asla	
1080   DDC2 48          			asla	
1081   DDC3 BD EE FF    			jsr	xplusa
1082   DDC6 86 FF       			ldaa	#$FF
1083   DDC8 A7 00       			staa	$00,X
1084   DDCA A7 01       			staa	$01,X
1085   DDCC A7 02       			staa	$02,X
1086   DDCE A7 03       			staa	$03,X
1087   DDD0 BD DE 0B    			jsr	cpdisp_show
1088   DDD3 5F          			clrb	
1089   DDD4 4F          			clra	
1090   DDD5 BD EA 2F    			jsr	addthread
1091   DDD8 58          			.db $58
1092   DDD9             			begin
1092   DDD9             
1093   DDD9             				begin
1093   DDD9             
1094   DDD9 88 80       					eora	#$80
1095   DDDB C8 01       					eorb	#$01
1096   DDDD             					begin
1096   DDDD             
1097   DDDD 47          						asra	
1098   DDDE 36          						psha	
1099   DDDF 84 7F       						anda	#$7F
1100   DDE1 8D 33       						bsr	plyrmask_x
1101   DDE3 37          						pshb	
1102   DDE4 E6 00       						ldab	$00,X
1103   DDE6 C4 80       						andb	#$80
1104   DDE8 1B          						aba	
1105   DDE9 A7 00       						staa	$00,X
1106   DDEB BD F9 19    						jsr	disp_mask
1107   DDEE 43          						coma	
1108   DDEF 94 60       						anda	comma_flags
1109   DDF1 97 60       						staa	comma_flags
1110   DDF3 8D 1E       						bsr	to_update_commas
1111   DDF5 33          						pulb	
1112   DDF6 BD EA 2F    						jsr	addthread
1113   DDF9 03          						.db $03
1114   DDFA 32          						pula	
1115   DDFB 36          						psha	
1116   DDFC 84 01       						anda	#$01
1117   DDFE 11          						cba	
1118   DDFF 32          						pula	
1119   DE00             					eqend
1119   DE00             
1119   DE00             
1119   DE00~            					eqend
1119   DE00~            					eqend
1119   DE00~            					eqend
1119   DE00             
1119   DE00 26 DB       
1119   DE02             
1119   DE02~            					eqend
1119   DE02~            					eqend
1119   DE02             
1120   DE02 5D          					tstb	
1121   DE03             				eqend
1121   DE03             
1121   DE03             
1121   DE03~            				eqend
1121   DE03~            				eqend
1121   DE03~            				eqend
1121   DE03             
1121   DE03 26 D4       
1121   DE05             
1121   DE05~            				eqend
1121   DE05~            				eqend
1121   DE05             
1122   DE05 BD EA 2F    				jsr	addthread
1123   DE08 20          				.db $20
1124   DE09             			loopend
1124   DE09             
1124   DE09             
1124   DE09~            			loopend
1124   DE09~            			loopend
1124   DE09~            			loopend
1124   DE09             
1124   DE09 20 CE       
1124   DE0B             
1124   DE0B~            			loopend
1124   DE0B~            			loopend
1124   DE0B             
1125   DE0B             
1126   DE0B             ;***********************************************************
1127   DE0B             ;* Will show buffer 0 of current player
1128   DE0B             ;***********************************************************			
1129   DE0B 8D 09       cpdisp_show		bsr	plyrmask_x
1130   DE0D A6 00       			ldaa	$00,X
1131   DE0F 84 80       			anda	#$80
1132   DE11 A7 00       			staa	$00,X
1133   DE13 7E EB A1    to_update_commas	jmp	update_commas
1134   DE16             
1135   DE16             ;***********************************************************
1136   DE16             ;* Loads X with pointer to current players display mask
1137   DE16             ;***********************************************************
1138   DE16 36          plyrmask_x		psha	
1139   DE17 96 CD       			ldaa	player_up
1140   DE19 CE 00 5C    			ldx	#dmask_p1
1141   DE1C BD EE FF    			jsr	xplusa
1142   DE1F 32          			pula	
1143   DE20 39          			rts
1144   DE21             			
1145   DE21             ;*********************************************************
1146   DE21             ; Main System Game Over Entry:
1147   DE21             ;*********************************************************	
1148   DE21 BD F3 AB    gameover_entry	jsr	macro_start
1149   DE24             			IFEQR_($69)			      ;BNER_BIT#29
1149   DE24             
1149   DE24             
1149   DE24             
1149   DE24 5B 69 00    
1149   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1149   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1149   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1149   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1149   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1149   DE27~            			IFEQR_($69)			      ;BNER_BIT#29
1149   DE27             
1150   DE27                   			SOL_(gi_off)  		      ;Turn OFF Sol#3:gi
1150   DE27 31 02       
1151   DE29 CC 00             			SETRAM_($0C,$00)			;RAM$0C=$00
1152   DE2B                   			JSRD_(send_sound)			
1152   DE2B 57          
1152   DE2C FB 30       
1153   DE2E                   			SSND_($1C)				;Stop Background Sound
1153   DE2E             
1153   DE2E FC          
1153   DE2F~                  			SSND_($1C)				;Stop Background Sound
1153   DE2F~                  			SSND_($1C)				;Stop Background Sound
1153   DE2F             
1154   DE2F                   			IFNER_($60)			      ;BEQR_BIT#20
1154   DE2F             
1154   DE2F             
1154   DE2F             
1154   DE2F 5A 60 00    
1154   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1154   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1154   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1154   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1154   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1154   DE32~                  			IFNER_($60)			      ;BEQR_BIT#20
1154   DE32             
1155   DE32                   			      SSND_($0F)				;Sound #0F
1155   DE32             
1155   DE32 EF          
1155   DE33~                  			      SSND_($0F)				;Sound #0F
1155   DE33~                  			      SSND_($0F)				;Sound #0F
1155   DE33             
1156   DE33                   			ELSE_			
1156   DE33             
1156   DE33             
1156   DE33             
1156   DE33             
1156   DE31             
1156   DE31             
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31             
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31~                  			ELSE_			
1156   DE31             
1156   DE31             
1156   DE31 03          
1156   DE33             
1156   DE33 80          
1156   DE34 00          
1156   DE35             
1156   DE35             
1156   DE35             
1156   DE35~                  			ELSE_			
1156   DE35~                  			ELSE_			
1156   DE35             
1156   DE35~                  			ELSE_			
1156   DE35~                  			ELSE_			
1156   DE35             
1157   DE35             			            SSND_($10)				;Sound #10
1157   DE35             
1157   DE35 F0          
1157   DE36~            			            SSND_($10)				;Sound #10
1157   DE36~            			            SSND_($10)				;Sound #10
1157   DE36             
1158   DE36                   			      BITOFF_($60)			;Turn OFF: Bit#20
1158   DE36 11 60       
1159   DE38                   			ENDIF_
1159   DE38             
1159   DE38             
1159   DE38             
1159   DE38             
1159   DE38             
1159   DE38~                  			ENDIF_
1159   DE38~                  			ENDIF_
1159   DE38             
1159   DE38~                  			ENDIF_
1159   DE38~                  			ENDIF_
1159   DE38             
1159   DE34             
1159   DE34 03          
1159   DE35             
1159   DE35             
1159   DE35~                  			ENDIF_
1159   DE35~                  			ENDIF_
1159   DE35~                  			ENDIF_
1159   DE35~                  			ENDIF_
1159   DE35~                  			ENDIF_
1159   DE35             
1159   DE38             
1159   DE38~                  			ENDIF_
1159   DE38~                  			ENDIF_
1159   DE38             
1160   DE38             			      SLEEP_(192)
1160   DE38~            			      SLEEP_(192)
1160   DE38~            			      SLEEP_(192)
1160   DE38             
1160   DE38 53 C0       
1160   DE3A             
1161   DE3A                   			BITOFF_($69)			;Turn OFF: Bit#29
1161   DE3A 11 69       
1162   DE3C                               ENDIF_
1162   DE3C             
1162   DE3C             
1162   DE3C             
1162   DE3C             
1162   DE3C             
1162   DE3C~                              ENDIF_
1162   DE3C~                              ENDIF_
1162   DE3C             
1162   DE3C~                              ENDIF_
1162   DE3C~                              ENDIF_
1162   DE3C             
1162   DE26             
1162   DE26 15          
1162   DE27             
1162   DE27             
1162   DE27~                              ENDIF_
1162   DE27~                              ENDIF_
1162   DE27~                              ENDIF_
1162   DE27~                              ENDIF_
1162   DE27~                              ENDIF_
1162   DE27             
1162   DE3C             
1162   DE3C~                              ENDIF_
1162   DE3C~                              ENDIF_
1162   DE3C             
1163   DE3C             			;Here are the attract mode threads
1164   DE3C             			BE29_($08)				;Effect: Range #08
1164   DE3C 29 08       
1165   DE3E             			BE28_($48)				;Effect: Range #08
1165   DE3E 28 48       
1166   DE40             			CPUX_					;Resume CPU Execution
1166   DE40 04          
1167   DE41             			NEWTHREAD(attract_1)
1167   DE41 CE D8 79    
1167   DE44 BD EA C4    
1168   DE47             			NEWTHREAD(attract_2)
1168   DE47 CE DA A2    
1168   DE4A BD EA C4    
1169   DE4D             			NEWTHREAD(attract_3)
1169   DE4D CE DE 71    
1169   DE50 BD EA C4    
1170   DE53             			NEWTHREAD(attract_4)
1170   DE53 CE DE 99    
1170   DE56 BD EA C4    
1171   DE59             			;fall through to start attract_5
1172   DE59             			
1173   DE59 BD F3 AB    			jsr	macro_start
1174   DE5C             attract_5	      BEGIN_
1174   DE5C             
1175   DE5C             				BITINV2_($57)			;Toggle: Lamp#17(mini_pf)
1175   DE5C 22 57       
1176   DE5E             				BITINV2_($5F)			;Toggle: Lamp#1F(mini_pf)
1176   DE5E 22 5F       
1177   DE60             				BITINV2_($65)			;Toggle: Lamp#25(mini_pf)
1177   DE60 22 65       
1178   DE62             				BITINV2_($6E)			;Toggle: Lamp#2E(mini_pf)
1178   DE62 22 6E       
1179   DE64             				BITINV2_($6F)			;Toggle: Lamp#2F(mini_pf)
1179   DE64 22 6F       
1180   DE66             				BITINV2_($5B)			;Toggle: Lamp#1B(special)
1180   DE66 22 5B       
1181   DE68             				BITINV2_($50)			;Toggle: Lamp#10(1_target)
1181   DE68 22 50       
1182   DE6A             				BITINV2_($6D)			;Toggle: Lamp#2D(double_trouble)
1182   DE6A 22 6D       
1183   DE6C             				BITINV2_($6C)			;Toggle: Lamp#2C(lock)
1183   DE6C 22 6C       
1184   DE6E             				SLEEP_(3)
1184   DE6E             
1184   DE6E 73          
1184   DE6F~            				SLEEP_(3)
1184   DE6F~            				SLEEP_(3)
1184   DE6F             
1185   DE6F             			LOOP_	
1185   DE6F             
1185   DE6F 8F          
1185   DE70 EB          
1186   DE71             
1187   DE71             ;**********************************************************
1188   DE71             ;* Attract Mode Lamps 3
1189   DE71             ;*
1190   DE71             ;* This effect sets up two large groups of lamps and toggles
1191   DE71             ;* between the two groups being on with a 15 cycle pause.
1192   DE71             ;**********************************************************					
1193   DE71 BD F3 AB    attract_3		jsr	macro_start
1194   DE74             			BITON2_($54)			;Turn ON: Lamp#14(5_rollover)
1194   DE74 20 54       
1195   DE76             			BITON2_($56)			;Turn ON: Lamp#16(drainshield_r)
1195   DE76 20 56       
1196   DE78             			BITON2_($6B)			;Turn ON: Lamp#2B(extra_kick)
1196   DE78 20 6B       
1197   DE7A             			BITON2_($52)			;Turn ON: Lamp#12(3_target)
1197   DE7A 20 52       
1198   DE7C             			BITON2_($58)			;Turn ON: Lamp#18(dt_right)
1198   DE7C 20 58       
1199   DE7E             			BEGIN_
1199   DE7E             
1200   DE7E             				BITINV2_($54)			;Toggle: Lamp#14(5_rollover)
1200   DE7E 22 54       
1201   DE80             				BITINV2_($56)			;Toggle: Lamp#16(drainshield_r)
1201   DE80 22 56       
1202   DE82             				BITINV2_($6B)			;Toggle: Lamp#2B(extra_kick)
1202   DE82 22 6B       
1203   DE84             				BITINV2_($52)			;Toggle: Lamp#12(3_target)
1203   DE84 22 52       
1204   DE86             				BITINV2_($58)			;Toggle: Lamp#18(dt_right)
1204   DE86 22 58       
1205   DE88             				BITINV2_($55)			;Toggle: Lamp#15(drainshield_l)
1205   DE88 22 55       
1206   DE8A             				BITINV2_($53)			;Toggle: Lamp#13(4_rollover)
1206   DE8A 22 53       
1207   DE8C             				BITINV2_($5C)			;Toggle: Lamp#1C(dt_left)
1207   DE8C 22 5C       
1208   DE8E             				BITINV2_($51)			;Toggle: Lamp#11(2_target)
1208   DE8E 22 51       
1209   DE90             				BITINV2_($5E)			;Toggle: Lamp#1E(loop_x)
1209   DE90 22 5E       
1210   DE92             				BITINV2_($5D)			;Toggle: Lamp#1D(loop_dshield)
1210   DE92 22 5D       
1211   DE94             				BITINV2_($5A)			;Toggle: Lamp#1A(keepshooting)
1211   DE94 22 5A       
1212   DE96             				SLEEP_(15)
1212   DE96             
1212   DE96 7F          
1212   DE97~            				SLEEP_(15)
1212   DE97~            				SLEEP_(15)
1212   DE97             
1213   DE97             			LOOP_	
1213   DE97             
1213   DE97 8F          
1213   DE98 E5          
1214   DE99             
1215   DE99             ;***************************************************************
1216   DE99             ;* Attract Mode Speech/GI Timer
1217   DE99             ;***************************************************************					
1218   DE99 BD F3 AB    attract_4		jsr	macro_start
1219   DE9C             			BEGIN_
1219   DE9C             
1220   DE9C C0 3C       				SETRAM_(rega,$3C)			;RAM$00=$3C: 60 times
1221   DE9E             				BEGIN_
1221   DE9E             
1222   DE9E             					SLEEP_(255)				;255 is about 4 seconds
1222   DE9E~            					SLEEP_(255)				;255 is about 4 seconds
1222   DE9E~            					SLEEP_(255)				;255 is about 4 seconds
1222   DE9E             
1222   DE9E 53 FF       
1222   DEA0             
1223   DEA0 B0 FF       					ADDRAM_(rega,-1)			;RAM$00-=1
1224   DEA2             				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA2             
1224   DEA2 5BFCE000FE  
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7             
1224   DEA7             
1224   DEA7             
1224   DEA7             
1224   DEA7             
1224   DEA7             
1224   DEA7             
1224   DEA6             
1224   DEA6 F7          
1224   DEA7             
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7             
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1224   DEA7             
1225   DEA7 C0 10       				SETRAM_(rega,$10)			;RAM$00=$10
1226   DEA9             				;Here when timer runs out, flash our GI
1227   DEA9             				BEGIN_
1227   DEA9             
1228   DEA9 9B          					JSRR_(gi_off_inc)			
1228   DEAA F2          
1229   DEAB             					SLEEP_(4)
1229   DEAB             
1229   DEAB 74          
1229   DEAC~            					SLEEP_(4)
1229   DEAC~            					SLEEP_(4)
1229   DEAC             
1230   DEAC 9B          					JSRR_(gi_on_dec)			
1230   DEAD E0          
1231   DEAE             					SLEEP_(4)
1231   DEAE             
1231   DEAE 74          
1231   DEAF~            					SLEEP_(4)
1231   DEAF~            					SLEEP_(4)
1231   DEAF             
1232   DEAF B0 FF       					ADDRAM_(rega,-1)			;RAM$00-=1
1233   DEB1             				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB1             
1233   DEB1 5BFCE000FE  
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6             
1233   DEB6             
1233   DEB6             
1233   DEB6             
1233   DEB6             
1233   DEB6             
1233   DEB6             
1233   DEB5             
1233   DEB5 F3          
1233   DEB6             
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6             
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6~            				EQEND_($FC,$E0,$00)		;BNER_RAM$00==#0
1233   DEB6             
1234   DEB6 9B          				JSRR_(gi_off_inc)			
1234   DEB7 E5          
1235   DEB8             				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1235   DEB8             
1235   DEB8             
1235   DEB8             
1235   DEB8 5AFCFFD7F2F0
1235   DEBE 10FB
1235   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1235   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1235   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1235   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1235   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1235   DEC0~            				IFNER_($FC,$FF,$D7,$F2,$F0,$10) ;BEQR_(#F0 & ADJ#7)==#16
1235   DEC0             
1236   DEC0             					SSND_($0E)				;Sound #0E
1236   DEC0             
1236   DEC0 EE          
1236   DEC1~            					SSND_($0E)				;Sound #0E
1236   DEC1~            					SSND_($0E)				;Sound #0E
1236   DEC1             
1237   DEC1             					JSRD_(send_sound)	
1237   DEC1 57          
1237   DEC2 FB 30       
1238   DEC4             				ENDIF_		
1238   DEC4             
1238   DEC4             
1238   DEC4             
1238   DEC4             
1238   DEC4             
1238   DEC4~            				ENDIF_		
1238   DEC4~            				ENDIF_		
1238   DEC4             
1238   DEC4~            				ENDIF_		
1238   DEC4~            				ENDIF_		
1238   DEC4             
1238   DEBF             
1238   DEBF 04          
1238   DEC0             
1238   DEC0             
1238   DEC0~            				ENDIF_		
1238   DEC0~            				ENDIF_		
1238   DEC0~            				ENDIF_		
1238   DEC0~            				ENDIF_		
1238   DEC0~            				ENDIF_		
1238   DEC0             
1238   DEC4             
1238   DEC4~            				ENDIF_		
1238   DEC4~            				ENDIF_		
1238   DEC4             
1239   DEC4 9B          				JSRR_(gi_on_dec)			
1239   DEC5 C8          
1240   DEC6             				SSND_($1C)				;Sound #1C
1240   DEC6             
1240   DEC6 FC          
1240   DEC7~            				SSND_($1C)				;Sound #1C
1240   DEC7~            				SSND_($1C)				;Sound #1C
1240   DEC7             
1241   DEC7             			LOOP_
1241   DEC7             
1241   DEC7 8F          
1241   DEC8 D3          
1242   DEC9             					
1243   DEC9 DF A2       add_dt_audit	stx	sys_temp3
1244   DECB CE 01 3A    			ldx	#aud_game4			;Total 20,000 Double Trouble Scores
1245   DECE 81 02       			cmpa	#$02
1246   DED0             			ifne
1246   DED0             
1246   DED0 27 FE       
1247   DED2 CE 01 3E          			ldx	#aud_game5			;Total 40,000 Double Trouble Scores
1248   DED5 81 04             			cmpa	#$04
1249   DED7                   			ifne
1249   DED7             
1249   DED7 27 FE       
1250   DED9 CE 01 42                			ldx	#aud_game6			;Total 80,000 Double Trouble Scores
1251   DEDC 81 08                   			cmpa	#$08
1252   DEDE                         			ifne
1252   DEDE             
1252   DEDE 27 FE       
1253   DEE0 CE 01 46                			      ldx	#aud_game7			;Total 160,000 Double Trouble Scores
1254   DEE3 81 16                   			      cmpa	#$16
1255   DEE5 26 03                   			bne	aud_noadd               ;didn't find an audit for this, bad, exit
1256   DEE7                         			endif
1256   DEE7             
1256   DEE7             
1256   DEE7             
1256   DEE7             
1256   DEE7             
1256   DEE7~                        			endif
1256   DEE7~                        			endif
1256   DEE7             
1256   DEE7~                        			endif
1256   DEE7~                        			endif
1256   DEE7             
1256   DEDF             
1256   DEDF 07          
1256   DEE0             
1256   DEE0             
1256   DEE0~                        			endif
1256   DEE0~                        			endif
1256   DEE0~                        			endif
1256   DEE0             
1256   DEE7             
1256   DEE7~                        			endif
1256   DEE7~                        			endif
1256   DEE7             
1257   DEE7                         		endif
1257   DEE7             
1257   DEE7             
1257   DEE7             
1257   DEE7             
1257   DEE7             
1257   DEE7~                        		endif
1257   DEE7~                        		endif
1257   DEE7             
1257   DEE7~                        		endif
1257   DEE7~                        		endif
1257   DEE7             
1257   DED8             
1257   DED8 0E          
1257   DED9             
1257   DED9             
1257   DED9~                        		endif
1257   DED9~                        		endif
1257   DED9~                        		endif
1257   DED9             
1257   DEE7             
1257   DEE7~                        		endif
1257   DEE7~                        		endif
1257   DEE7             
1258   DEE7                         	endif
1258   DEE7             
1258   DEE7             
1258   DEE7             
1258   DEE7             
1258   DEE7             
1258   DEE7~                        	endif
1258   DEE7~                        	endif
1258   DEE7             
1258   DEE7~                        	endif
1258   DEE7~                        	endif
1258   DEE7             
1258   DED1             
1258   DED1 15          
1258   DED2             
1258   DED2             
1258   DED2~                        	endif
1258   DED2~                        	endif
1258   DED2~                        	endif
1258   DED2             
1258   DEE7             
1258   DEE7~                        	endif
1258   DEE7~                        	endif
1258   DEE7             
1259   DEE7 BD F7 7F    			jsr	ptrx_plus_1
1260   DEEA DE A2       aud_noadd		ldx	sys_temp3
1261   DEEC 39          			rts	
1262   DEED             
1263   DEED             ;****************************************************
1264   DEED             ; Check status of ball trough switches, if they are
1265   DEED             ; both down, then eject a ball.
1266   DEED             ;****************************************************			
1267   DEED             do_trough		EXE_
1267   DEED             
1267   DEED 44          
1268   DEEE 7F 00 D6    			      clr	flag_timer_bip
1269   DEF1 96 62       			      ldaa	$62
1270   DEF3 84 03       			      anda	#$03
1271   DEF5             			EXEEND_
1271   DEF5             
1271   DEF5             
1271   DEF5             
1271   DEF5             
1271   DEF5~            			EXEEND_
1271   DEF5~            			EXEEND_
1271   DEF5             
1271   DEED             
1271   DEED 49          
1271   DEEE             
1271   DEF5             
1271   DEF5~            			EXEEND_
1271   DEF5~            			EXEEND_
1271   DEF5             
1272   DEF5             			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1272   DEF5             
1272   DEF5             
1272   DEF5             
1272   DEF5 5BFCE003FE  
1272   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1272   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1272   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1272   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1272   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1272   DEFA~            			IFEQR_($FC,$E0,$03)	      ;BNER_RAM$00==#3 
1272   DEFA             
1273   DEFA             			      SOL_(trough_on)   		;Turn ON Sol#2:trough
1273   DEFA 31 41       
1274   DEFC             			      BITOFF_($55)			;Turn OFF: Bit#15
1274   DEFC 11 55       
1275   DEFE             			ENDIF_
1275   DEFE             
1275   DEFE             
1275   DEFE             
1275   DEFE             
1275   DEFE             
1275   DEFE~            			ENDIF_
1275   DEFE~            			ENDIF_
1275   DEFE             
1275   DEFE~            			ENDIF_
1275   DEFE~            			ENDIF_
1275   DEFE             
1275   DEF9             
1275   DEF9 04          
1275   DEFA             
1275   DEFA             
1275   DEFA~            			ENDIF_
1275   DEFA~            			ENDIF_
1275   DEFA~            			ENDIF_
1275   DEFA~            			ENDIF_
1275   DEFA~            			ENDIF_
1275   DEFA             
1275   DEFE             
1275   DEFE~            			ENDIF_
1275   DEFE~            			ENDIF_
1275   DEFE             
1276   DEFE                   		SLEEP_(96)
1276   DEFE~                  		SLEEP_(96)
1276   DEFE~                  		SLEEP_(96)
1276   DEFE             
1276   DEFE 53 60       
1276   DF00             
1277   DF00 5E 09       			SWCLR_($09)				;Clear Sw#: $09(left_trough)
1278   DF02             			MRTS_					;Macro RTS, Save MRA,MRB
1278   DF02 02          
1279   DF03             
1280   DF03             ;*****************************************************
1281   DF03             ;* Sound Lookup Table:
1282   DF03             ;*****************************************************
1283   DF03 23 06 3A    soundtable		.db $23, $06,	$3A;(05)	;(00) Credit Sound
1284   DF06 A0 04 2F    			.db $A0, $04,	$2F;(10)	;(01) Pop Bumper Thud
1285   DF09 28 06 3A    			.db $28, $06,	$3A;(05)	;(02) Credit Sound
1286   DF0C A0 04 38    			.db $A0, $04,	$38;(07)	;(03) Thud
1287   DF0F 22 40 32    			.db $22, $40,	$32;(0D)	;(04) UDT Bank Down
1288   DF12 28 02 2D    			.db $28, $02,	$2D;(12)	;(05) Mini-PF
1289   DF15 24 22 3D    			.db $24, $22,	$3D;(02)	;(06) 
1290   DF18 24 50 39    			.db $24, $50,	$39;(06)	;(07) Double Trouble Target Timeout
1291   DF1B C9 10 3E    			.db $C9, $10,	$3E;(01)	;(08) Tilt
1292   DF1E 23 20 34    			.db $23, $20,	$34;(0D)	;(09) 
1293   DF21 DF 63       			.dw c_sound1\	.db $FF	;(0A) 
1293   DF23 FF          
1294   DF24 27 20 33    			.db $27, $20,	$33;(0C)	;(0B) Gatlin Sound
1295   DF27 28 2C 23    			.db $28, $2C,	$23;(1C)	;(0C) 
1296   DF2A 27 40 2B    			.db $27, $40,	$2B;(14)	;(0D) Special
1297   DF2D CC F0 26    			.db $CC, $F0,	$26;(19)	;(0E) Add Player - Random Speech
1298   DF30 CE D0 29    			.db $CE, $D0,	$29;(16)	;(0F) "Me Jungle Lord"
1299   DF33 CE FF 27    			.db $CE, $FF,	$27;(18)	;(10) "You Win! Fight in Jungle Again"
1300   DF36 CE 88 2E    			.db $CE, $88,	$2E;(11)	;(11) "You Jungle Lord"
1301   DF39 4E FF 30    			.db $4E, $FF,	$30;(0F)	;(12) "Stampede, (trumpet)"
1302   DF3C CE FF 31    			.db $CE, $FF,	$31;(0E)	;(13) "Fight Tiger Again"
1303   DF3F CE D8 35    			.db $CE, $D8,	$35;(0A)	;(14) "Jungle Lord in Double Trouble" OR "You in Double Trouble"
1304   DF42 CE C8 3C    			.db $CE, $C8,	$3C;(03)	;(15) High Score - "You  Win! You Jungle Lord"
1305   DF45 8C 80 24    			.db $8C, $80,	$24;(1D)	;(16) Match - "Me Jungle Lord"
1306   DF48 CE A8 3B    			.db $CE, $A8,	$3B;(02)	;(17) Drop Target Timer
1307   DF4B 05 50 21    			.db $05, $50,	$21;(1E)	;(18) Trumpet
1308   DF4E 05 60 20    			.db $05, $60,	$20;(1F)	;(19) Trumpet
1309   DF51 24 02 36    			.db $24, $02,	$36;(09)	;(1A) 
1310   DF54 BE 40 2A    			.db $BE, $40,	$2A;(15)	;(1B) 
1311   DF57 9F 40 2C    			.db $9F, $40,	$2C;(13)	;(1C) Game Over
1312   DF5A A9 60 22    			.db $A9, $60,	$22;(1D)	;(1D) 
1313   DF5D 04 04 36    			.db $04, $04,	$36;(09)	;(1E) 
1314   DF60 28 40 28    			.db $28, $40,	$28;(17)	;(1F) 
1315   DF63             
1316   DF63 26822D803A3Fc_sound1		.db $26,$82,$2D,$80,$3A,$3F	;(19)(12)(02)
1317   DF69             
1318   DF69             
1319   DF69 D3          switchtable		.db %11010011	\.dw sw_plumbtilt		;(1) plumbtilt
1319   DF6A E1 51       
1320   DF6C 91          			.db %10010001	\.dw sw_balltilt		;(2) balltilt
1320   DF6D E1 6A       
1321   DF6F 71          			.db %01110001	\.dw credit_button	;(3) credit_button
1321   DF70 FB 92       
1322   DF72 F2          			.db %11110010	\.dw sw_coin_r		;(4) coin_r
1322   DF73 E1 4D       
1323   DF75 F2          			.db %11110010	\.dw sw_coin_c		;(5) coin_c
1323   DF76 E1 4D       
1324   DF78 F2          			.db %11110010	\.dw sw_coin_l		;(6) coin_l
1324   DF79 E1 4D       
1325   DF7B 71          			.db %01110001	\.dw reset			;(7) slam
1325   DF7C E8 00       
1326   DF7E F1          			.db %11110001	\.dw sw_hstd_res		;(8) hstd_res
1326   DF7F E1 92       
1327   DF81 D4          			.db %11010100	\.dw sw_right_trough	;(9) right_trough
1327   DF82 E5 1E       
1328   DF84 D4          			.db %11010100	\.dw sw_left_trough	;(10) left_trough
1328   DF85 E5 37       
1329   DF87 D4          			.db %11010100	\.dw sw_notused		;(11) notused
1329   DF88 E1 CF       
1330   DF8A 91          			.db %10010001	\.dw sw_leftsling		;(12) leftsling
1330   DF8B E1 C2       
1331   DF8D 93          			.db %10010011	\.dw sw_L_rollover	;(13) L_rollover
1331   DF8E E3 AC       
1332   DF90 93          			.db %10010011	\.dw sw_O_rollover	;(14) O_rollover
1332   DF91 E3 AC       
1333   DF93 93          			.db %10010011	\.dw sw_R_rollover	;(15) R_rollover
1333   DF94 E3 AC       
1334   DF96 93          			.db %10010011	\.dw sw_D_rollover	;(16) D_rollover
1334   DF97 E3 AC       
1335   DF99 92          			.db %10010010	\.dw sw_1_target		;(17) 1_target
1335   DF9A E1 99       
1336   DF9C 92          			.db %10010010	\.dw sw_2_target		;(18) 2_target
1336   DF9D E1 99       
1337   DF9F 92          			.db %10010010	\.dw sw_3_target		;(19) 3_target
1337   DFA0 E1 99       
1338   DFA2 93          			.db %10010011	\.dw sw_4_rollover	;(20) 4_rollover
1338   DFA3 DA F7       
1339   DFA5 93          			.db %10010011	\.dw sw_5_rollover	;(21) 5_rollover
1339   DFA6 E2 EA       
1340   DFA8 93          			.db %10010011	\.dw sw_leftdrain		;(22) leftdrain
1340   DFA9 D8 4B       
1341   DFAB 93          			.db %10010011	\.dw sw_rightdrain	;(23) rightdrain
1341   DFAC D8 4B       
1342   DFAE 93          			.db %10010011	\.dw sw_looplow		;(24) looplow
1342   DFAF E1 D0       
1343   DFB1 95          			.db %10010101	\.dw sw_dt_rb		;(25) dt_rb
1343   DFB2 E2 4E       
1344   DFB4 95          			.db %10010101	\.dw sw_dt_rc		;(26) dt_rc
1344   DFB5 E2 4E       
1345   DFB7 95          			.db %10010101	\.dw sw_dt_rt		;(27) dt_rt
1345   DFB8 E2 4E       
1346   DFBA 91          			.db %10010001	\.dw sw_rightsling	;(28) rightsling
1346   DFBB E1 C2       
1347   DFBD 95          			.db %10010101	\.dw sw_dt_ll		;(29) dt_ll
1347   DFBE E2 34       
1348   DFC0 95          			.db %10010101	\.dw sw_dt_lc		;(30) dt_lc
1348   DFC1 E2 34       
1349   DFC3 95          			.db %10010101	\.dw sw_dt_lu		;(31) dt_lu
1349   DFC4 E2 34       
1350   DFC6 93          			.db %10010011	\.dw sw_loophigh		;(32) loophigh
1350   DFC7 E2 09       
1351   DFC9 95          			.db %10010101	\.dw sw_dt_u1		;(33) dt_u1
1351   DFCA E7 AD       
1352   DFCC 95          			.db %10010101	\.dw sw_dt_u2		;(34) dt_u2
1352   DFCD E7 AD       
1353   DFCF 95          			.db %10010101	\.dw sw_dt_u3		;(35) dt_u3
1353   DFD0 E7 AD       
1354   DFD2 95          			.db %10010101	\.dw sw_dt_u4		;(36) dt_u4
1354   DFD3 E7 AD       
1355   DFD5 95          			.db %10010101	\.dw sw_dt_u5		;(37) dt_u5
1355   DFD6 E7 AD       
1356   DFD8 F4          			.db %11110100	\.dw sw_upper_eject	;(38) upper_eject
1356   DFD9 E4 1D       
1357   DFDB F4          			.db %11110100	\.dw sw_lower_eject	;(39) lower_eject
1357   DFDC E2 F2       
1358   DFDE 91          			.db %10010001	\.dw sw_upper_sling	;(40) upper_sling
1358   DFDF E1 C2       
1359   DFE1 D3          			.db %11010011	\.dw sw_pf_tilt		;(41) pf_tilt
1359   DFE2 E1 51       
1360   DFE4 F6          			.db %11110110	\.dw sw_outhole		;(42) outhole
1360   DFE5 D9 3C       
1361   DFE7 9F          			.db %10011111	\.dw sw_ballshooter	;(43) ballshooter
1361   DFE8 D9 0C       
1362   DFEA 93          			.db %10010011	\.dw sw_pf_entry		;(44) pf_entry
1362   DFEB D9 28       
1363   DFED 91          			.db %10010001	\.dw sw_ten_1		;(45) ten_1
1363   DFEE E1 C2       
1364   DFF0 91          			.db %10010001	\.dw sw_ten_2		;(46) ten_2
1364   DFF1 E1 C2       
1365   DFF3 91          			.db %10010001	\.dw sw_ten_3		;(47) ten_3
1365   DFF4 E1 C2       
1366   DFF6 91          			.db %10010001	\.dw sw_notused		;(48) notused
1366   DFF7 E1 CF       
1367   DFF9 91          			.db %10010001	\.dw sw_right_magnet	;(49) right_magnet
1367   DFFA DB B9       
1368   DFFC 91          			.db %10010001	\.dw sw_left_magnet	;(50) left_magnet
1368   DFFD DB 58       
1369   DFFF             switchtable_end
1370   DFFF             
1371   DFFF 28          			.db $28
1372   E000             
1373   E000              	.org $e000
1374   E000             
1375   E000             ;---------------------------------------------------------------------------
1376   E000             ;  Default game data and basic system tables start at $e000, these can not  
1377   E000             ;  ever be moved
1378   E000             ;---------------------------------------------------------------------------
1379   E000             
1380   E000 25 03       gr_gamenumber		.dw $2503
1381   E002 F2          gr_romrevision		.db $F2
1382   E003 B2 A5       gr_cmoscsum			.db $B2,$A5
1383   E005 20          gr_backuphstd		.db $20
1384   E006 07          gr_replay1			.db $07
1385   E007 15          gr_replay2			.db $15
1386   E008 00          gr_replay3			.db $00
1387   E009 00          gr_replay4			.db $00
1388   E00A 00          gr_matchenable		.db $00
1389   E00B 00          gr_specialaward		.db $00
1390   E00C 00          gr_replayaward		.db $00
1391   E00D 03          gr_maxplumbbobtilts	.db $03
1392   E00E 03          gr_numberofballs		.db $03
1393   E00F 35          gr_gameadjust1		.db $35
1394   E010 01          gr_gameadjust2		.db $01
1395   E011 05          gr_gameadjust3		.db $05
1396   E012 00          gr_gameadjust4		.db $00
1397   E013 00          gr_gameadjust5		.db $00
1398   E014 00          gr_gameadjust6		.db $00
1399   E015 00          gr_gameadjust7		.db $00
1400   E016 00          gr_gameadjust8		.db $00
1401   E017 00          gr_gameadjust9		.db $00
1402   E018 03          gr_hstdcredits		.db $03
1403   E019 04          gr_max_extraballs		.db $04
1404   E01A 30          gr_max_credits		.db $30
1405   E01B             ;---------------
1406   E01B             ;Pricing Data  |
1407   E01B             ;---------------
1408   E01B             
1409   E01B 01          gr_pricingdata		.db $01	;Left Coin Mult
1410   E01C 04          				.db $04	;Center Coin Mult
1411   E01D 01          				.db $01	;Right Coin Mult
1412   E01E 01          				.db $01	;Coin Units Required
1413   E01F 00          				.db $00	;Bonus Coins
1414   E020 00          				.db $00	;Minimum Coin Units
1415   E021             
1416   E021 09          				.db $09	;Left Coin Mult
1417   E022 45          				.db $45	;Center Coin Mult
1418   E023 18          				.db $18	;Right Coin Mult
1419   E024 05          				.db $05	;Coin Units Required
1420   E025 45          				.db $45	;Bonus Coins
1421   E026 00          				.db $00	;Minimum Coin Units
1422   E027             
1423   E027 01          				.db $01	;Left Coin Mult
1424   E028 04          				.db $04	;Center Coin Mult
1425   E029 01          				.db $01	;Right Coin Mult
1426   E02A 02          				.db $02	;Coin Units Required
1427   E02B 04          				.db $04	;Bonus Coins
1428   E02C 00          				.db $00	;Minimum Coin Units
1429   E02D             
1430   E02D 01          				.db $01	;Left Coin Mult
1431   E02E 16          				.db $16	;Center Coin Mult
1432   E02F 06          				.db $06	;Right Coin Mult
1433   E030 02          				.db $02	;Coin Units Required
1434   E031 00          				.db $00	;Bonus Coins
1435   E032 00          				.db $00	;Minimum Coin Units
1436   E033             
1437   E033 03          				.db $03	;Left Coin Mult
1438   E034 15          				.db $15	;Center Coin Mult
1439   E035 03          				.db $03	;Right Coin Mult
1440   E036 04          				.db $04	;Coin Units Required
1441   E037 15          				.db $15	;Bonus Coins
1442   E038 00          				.db $00	;Minimum Coin Units
1443   E039             
1444   E039 01          				.db $01	;Left Coin Mult
1445   E03A 00          				.db $00	;Center Coin Mult
1446   E03B 04          				.db $04	;Right Coin Mult
1447   E03C 01          				.db $01	;Coin Units Required
1448   E03D 00          				.db $00	;Bonus Coins
1449   E03E 00          				.db $00	;Minimum Coin Units
1450   E03F             
1451   E03F 01          				.db $01	;Left Coin Mult
1452   E040 00          				.db $00	;Center Coin Mult
1453   E041 02          				.db $02	;Right Coin Mult
1454   E042 01          				.db $01	;Coin Units Required
1455   E043 00          				.db $00	;Bonus Coins
1456   E044 00          				.db $00	;Minimum Coin Units
1457   E045             
1458   E045 01          				.db $01	;Left Coin Mult
1459   E046 00          				.db $00	;Center Coin Mult
1460   E047 02          				.db $02	;Right Coin Mult
1461   E048 02          				.db $02	;Coin Units Required
1462   E049 00          				.db $00	;Bonus Coins
1463   E04A 00          				.db $00	;Minimum Coin Units
1464   E04B             
1465   E04B             ;--------------
1466   E04B             ;System Data  |
1467   E04B             ;--------------
1468   E04B             
1469   E04B 1D          gr_maxthreads		.db $1D
1470   E04C 7F          gr_extendedromtest	.db $7F
1471   E04D 32          gr_lastswitch		.db (switchtable_end-switchtable)/3
1472   E04E 03          gr_numplayers		.db $03
1473   E04F             
1474   E04F E0 C2       gr_lamptable_ptr		.dw lamptable
1475   E051 DF 69       gr_switchtable_ptr	.dw switchtable
1476   E053 DF 03       gr_soundtable_ptr		.dw soundtable
1477   E055             
1478   E055 05          gr_lampflashrate		.db $05
1479   E056             
1480   E056 0D          gr_specialawardsound	.db $0D	;Special Sound
1481   E057 0E          gr_p1_startsound		.db $0E
1482   E058 0E          gr_p2_startsound		.db $0E
1483   E059 0E          gr_p3_startsound		.db $0E
1484   E05A 0E          gr_p4_startsound		.db $0E
1485   E05B 16          gr_matchsound		.db $16
1486   E05C 15          gr_highscoresound		.db $15
1487   E05D 1C          gr_gameoversound		.db $1C
1488   E05E 00          gr_creditsound		.db $00
1489   E05F             
1490   E05F 7E          gr_eb_lamp_1		.db $7E
1491   E060 00          gr_eb_lamp_2		.db $00
1492   E061 7E          gr_lastlamp			.db $7E
1493   E062 05          gr_hs_lamp			.db $05
1494   E063 04          gr_match_lamp		.db $04
1495   E064 01          gr_bip_lamp			.db $01
1496   E065 03          gr_gameover_lamp		.db $03
1497   E066 02          gr_tilt_lamp		.db $02
1498   E067             
1499   E067 DE 21       gr_gameoverthread_ptr	.dw gameover_entry
1500   E069             
1501   E069             gr_switchtypetable
1502   E069 00 02       				.db $00,$02
1503   E06B 00 09       				.db $00,$09
1504   E06D 00 04       				.db $00,$04
1505   E06F 1A 14       				.db $1A,$14
1506   E071 02 05       				.db $02,$05
1507   E073 08 05       				.db $08,$05
1508   E075 00 24       				.db $00,$24
1509   E077             
1510   E077 0200000000  gr_playerstartdata	.db $02,$00,$00,$00,$00
1511   E07C 0001000880  				.db $00,$01,$00,$08,$80
1512   E081 0000000000  				.db $00,$00,$00,$00,$00
1513   E086 0000000000  				.db $00,$00,$00,$00,$00
1514   E08B             
1515   E08B 81FF0000C0  gr_playerresetdata	.db $81,$FF,$00,$00,$C0
1516   E090 070000FA7F  				.db $07,$00,$00,$FA,$7F
1517   E095 0400000000  				.db $04,$00,$00,$00,$00
1518   E09A 0000400000  				.db $00,$00,$40,$00,$00
1519   E09F             
1520   E09F 39          gr_switch_event		rts\ .db $00	;(Switch Event)
1520   E0A0 00          
1521   E0A1 39          gr_sound_event		rts\ .db $00	;(Sound Event )
1521   E0A2 00          
1522   E0A3 20 4A       gr_score_event		bra score_event	;(Score Event)
1523   E0A5 20 39       gr_eb_event			bra eb_event	;(Extra Ball Event)
1524   E0A7 20 37       gr_special_event		bra special_event	;(Special Event)
1525   E0A9 39          gr_macro_event		rts\ .db $00	;(Start Macro Event)
1525   E0AA 00          
1526   E0AB 39          gr_ballstart_event	rts\ .db $00	;(Ball Start Event)
1526   E0AC 00          
1527   E0AD 39          gr_addplayer_event	rts\ .db $00	;(Add Player Event)
1527   E0AE 00          
1528   E0AF 20 35       gr_gameover_event		bra gameover_event;(Game Over Event)
1529   E0B1 39          gr_hstdtoggle_event	rts\ .db $00	;(HSTD Toggle Event)
1529   E0B2 00          
1530   E0B3             
1531   E0B3 DD A8       			.dw hook_reset		;(From $E89F)Reset
1532   E0B5 E1 4C       			.dw hook_mainloop		;(From $E8B7)Main Loop Begin
1533   E0B7 D8 3F       			.dw hook_coin		;(From $F770)Coin Accepted
1534   E0B9 E1 4C       			.dw hook_gamestart	;(From $F847)New Game Start
1535   E0BB DB ED       			.dw hook_playerinit	;(From $F8D8)Init New Player
1536   E0BD DD 16       			.dw hook_outhole		;(From $F9BA)Outhole
1537   E0BF             
1538   E0BF             ;------------------------ end system data ---------------------------
1539   E0BF             
1540   E0BF             gr_irq_entry	
1541   E0BF 7E EF F7    gr_swi_entry	jmp	sys_irq
1542   E0C2             
1543   E0C2 30 38       lamptable         .db $30, $38      ;(00) bonus_1 -- bonus_9
1544   E0C4 3C 3F             		.db $3C ,$3F	;(01) 2x -- 10x
1545   E0C6 0C 0F       			.db $0C ,$0F	;(02) L -- D
1546   E0C8 39 3B       			.db $39 ,$3B	;(03) bonus_10 -- bonus_30
1547   E0CA 10 14       			.db $10 ,$14	;(04) 1_target -- 5_rollover
1548   E0CC 07 0B       			.db $07 ,$0B	;(05) rmag1 -- rmag5
1549   E0CE 26 2A       			.db $26 ,$2A	;(06) lmag1 -- lmag5
1550   E0D0 00 3F       			.db $00 ,$3F	;(07) all lamps
1551   E0D2 07 3F       			.db $07 ,$3F	;(08) all lamps except backbox
1552   E0D4 48 4C       			.db $48 ,$4C	;(09) bits 18 - 1c
1553   E0D6 43 47       			.db $43 ,$47	;(0A) bits 13 - 17
1554   E0D8 20 24       			.db $20 ,$24	;(0B) dt1 -- dt5
1555   E0DA 15 16       			.db $15 ,$16	;(0C) drainshield_l -- drainshield_r
1556   E0DC 30 3B       			.db $30 ,$3B	;(0D) bonus_1 -- bonus_30
1557   E0DE 4D 4E       			.db $4D ,$4E	;(0E) bits 1d -1e
1558   E0E0             
1559   E0E0             ;**************************************************************
1560   E0E0             ;* Ring the bell fancy when special or extra ball
1561   E0E0             ;**************************************************************
1562   E0E0             eb_event
1563   E0E0             special_event	NEWTHREAD_JMP(fancybell)
1563   E0E0 CE D8 00    
1563   E0E3 7E EA C4    
1564   E0E6             			
1565   E0E6 86 FF       gameover_event	ldaa	#$FF
1566   E0E8 97 58       			staa	mbip_b0
1567   E0EA 86 69       			ldaa	#$69
1568   E0EC 7E F1 3C    			jmp	lamp_on
1569   E0EF             	
1570   E0EF             ;********************************************************
1571   E0EF             ;* Jungle Lord Scoring Event: This takes care of adding
1572   E0EF             ;* up all scores, this needs to be here because of the 
1573   E0EF             ;* double scoring. 
1574   E0EF             ;********************************************************		
1575   E0EF 37          score_event		pshb	
1576   E0F0 C6 D4       			ldab	#$D4
1577   E0F2 D7 0B       			stab	game_ram_b			;Set Background Sound toggle
1578   E0F4 D7 AA       			stab	thread_priority
1579   E0F6 CE DD B0    			ldx	#disp_animation
1580   E0F9 BD EA 78    			jsr	newthread_sp
1581   E0FC D6 1C       			ldab	$1C
1582   E0FE             			ifmi	
1582   E0FE             
1582   E0FE 2A FE       
1583   E100 C4 3F       				andb	#$3F
1584   E102 D7 1C       				stab	$1C			;clear bit#26
1585   E104 36          				psha	
1586   E105 BD DC 94    				jsr	timer_dec
1587   E108 86 1A       				ldaa	#$1A
1588   E10A BD F1 5B    				jsr	lamp_off		;turn off 'keepshooting' on playfield
1589   E10D 32          				pula	
1590   E10E             			endif
1590   E10E             
1590   E10E             
1590   E10E             
1590   E10E             
1590   E10E             
1590   E10E~            			endif
1590   E10E~            			endif
1590   E10E             
1590   E10E~            			endif
1590   E10E~            			endif
1590   E10E             
1590   E0FF             
1590   E0FF 0E          
1590   E100             
1590   E100             
1590   E100~            			endif
1590   E100~            			endif
1590   E100~            			endif
1590   E100             
1590   E10E             
1590   E10E~            			endif
1590   E10E~            			endif
1590   E10E             
1591   E10E D6 13       			ldab	$13
1592   E110 DA 33       			orab	$33
1593   E112 C5 02       			bitb	#$02
1594   E114             			ifne
1594   E114             
1594   E114 27 FE       
1595   E116 36          				psha	
1596   E117 84 F8       				anda	#$F8
1597   E119 48          				asla	
1598   E11A 33          				pulb	
1599   E11B C4 07       				andb	#$07
1600   E11D 1B          				aba	
1601   E11E             			endif
1601   E11E             
1601   E11E             
1601   E11E             
1601   E11E             
1601   E11E             
1601   E11E~            			endif
1601   E11E~            			endif
1601   E11E             
1601   E11E~            			endif
1601   E11E~            			endif
1601   E11E             
1601   E115             
1601   E115 08          
1601   E116             
1601   E116             
1601   E116~            			endif
1601   E116~            			endif
1601   E116~            			endif
1601   E116             
1601   E11E             
1601   E11E~            			endif
1601   E11E~            			endif
1601   E11E             
1602   E11E 33          			pulb	
1603   E11F 31          			ins	
1604   E120 31          			ins	
1605   E121 BD EB DB    			jsr	update_eb_count
1606   E124 BD EC 1D    			jsr	score_update
1607   E127 BD EB A1    			jsr	update_commas
1608   E12A CE 00 DE    			ldx	#x_temp_2
1609   E12D 8D 0C       			bsr	add_ab
1610   E12F D7 DE       			stab	x_temp_2
1611   E131 DE CE       			ldx	pscore_buf
1612   E133 8D 06       			bsr	add_ab
1613   E135 BD EC B7    			jsr	$ECB7			;Because we have overridden the scoring event, we need to check
1614   E138 7E EC 18    			jmp	$EC18			;if player has exceeded any of the replay scores.
1615   E13B             			
1616   E13B A6 00       add_ab		ldaa	$00,X
1617   E13D E6 01       			ldab	$01,X
1618   E13F 8D 05       			bsr	dec_test
1619   E141 BD EC F3    			jsr	split_ab
1620   E144 1B          			aba	
1621   E145 16          			tab	
1622   E146 C1 A0       dec_test		cmpb	#$A0
1623   E148             			ifcc
1623   E148             
1623   E148 25 FE       
1624   E14A CB 10       				addb	#$10
1625   E14C             			endif
1625   E14C             
1625   E14C             
1625   E14C             
1625   E14C             
1625   E14C             
1625   E14C~            			endif
1625   E14C~            			endif
1625   E14C             
1625   E14C~            			endif
1625   E14C~            			endif
1625   E14C             
1625   E149             
1625   E149 02          
1625   E14A             
1625   E14A             
1625   E14A~            			endif
1625   E14A~            			endif
1625   E14A~            			endif
1625   E14A             
1625   E14C             
1625   E14C~            			endif
1625   E14C~            			endif
1625   E14C             
1626   E14C             hook_gamestart
1627   E14C 39          hook_mainloop	rts
1628   E14D             
1629   E14D             ;************************************************************
1630   E14D             ;* Coin Routines, this simply plays sound $00 and jumps to 
1631   E14D             ;* the system coin routine which does all the coin code and
1632   E14D             ;* then plays sound $00 again.
1633   E14D             ;************************************************************	
1634   E14D             sw_coin_c
1635   E14D             sw_coin_l
1636   E14D             sw_coin_r		SSND_($00)				;Credit Sound
1636   E14D             
1636   E14D E0          
1636   E14E~            sw_coin_r		SSND_($00)				;Credit Sound
1636   E14E~            sw_coin_r		SSND_($00)				;Credit Sound
1636   E14E             
1637   E14E 5F          			JMP_(coin_accepted)		
1637   E14F F7 A2       
1638   E151             
1639   E151             ;************************************************************
1640   E151             ;* Tilt Routines:
1641   E151             ;************************************************************
1642   E151             sw_pf_tilt
1643   E151             sw_plumbtilt	EXE_
1643   E151             
1643   E151 44          
1644   E152             			      NEWTHREAD(min_tilt)
1644   E152 CE E1 83    
1644   E155 BD EA C4    
1645   E158             			EXEEND_
1645   E158             
1645   E158             
1645   E158             
1645   E158             
1645   E158~            			EXEEND_
1645   E158~            			EXEEND_
1645   E158             
1645   E151             
1645   E151 48          
1645   E152             
1645   E158             
1645   E158~            			EXEEND_
1645   E158~            			EXEEND_
1645   E158             
1646   E158             			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1646   E158             
1646   E158             
1646   E158             
1646   E158 5AFB40F0FE  
1646   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1646   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1646   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1646   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1646   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1646   E15D~            			IFNER_($FB,$40,$F0)	      ;BEQR_(TILT || BIT#00)
1646   E15D             
1647   E15D                   			SSND_($08)				;Sound #08
1647   E15D             
1647   E15D E8          
1647   E15E~                  			SSND_($08)				;Sound #08
1647   E15E~                  			SSND_($08)				;Sound #08
1647   E15E             
1648   E15E                   			JSRD_(tilt_warning)		
1648   E15E 57          
1648   E15F FB DD       
1649   E161                   			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1649   E161             
1649   E161 5A F0 0D    
1649   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1649   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1649   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1649   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1649   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1649   E164~                  			BEQR_($F0,you_tilted)		;BEQR_TILT to you_tilted
1649   E164             
1650   E164 99                			JSRR_(gi_off_inc)			
1650   E165 37          
1651   E166                   			SLEEP_(2)
1651   E166             
1651   E166 72          
1651   E167~                  			SLEEP_(2)
1651   E167~                  			SLEEP_(2)
1651   E167             
1652   E167 99                			JSRR_(gi_on_dec)
1652   E168 25          
1653   E169                   	      ENDIF_			
1653   E169             
1653   E169             
1653   E169             
1653   E169             
1653   E169             
1653   E169~                  	      ENDIF_			
1653   E169~                  	      ENDIF_			
1653   E169             
1653   E169~                  	      ENDIF_			
1653   E169~                  	      ENDIF_			
1653   E169             
1653   E15C             
1653   E15C 0C          
1653   E15D             
1653   E15D             
1653   E15D~                  	      ENDIF_			
1653   E15D~                  	      ENDIF_			
1653   E15D~                  	      ENDIF_			
1653   E15D~                  	      ENDIF_			
1653   E15D~                  	      ENDIF_			
1653   E15D             
1653   E169             
1653   E169~                  	      ENDIF_			
1653   E169~                  	      ENDIF_			
1653   E169             
1654   E169             			KILL_					;Remove This Thread
1654   E169 03          
1655   E16A             
1656   E16A             sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1656   E16A             
1656   E16A             
1656   E16A             
1656   E16A 5A 40 00    
1656   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1656   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1656   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1656   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1656   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1656   E16D~            sw_balltilt		IFNER_($40)			      ;BEQR_BIT#00
1656   E16D             
1657   E16D                   			SSND_($08)				;Sound #08
1657   E16D             
1657   E16D E8          
1657   E16E~                  			SSND_($08)				;Sound #08
1657   E16E~                  			SSND_($08)				;Sound #08
1657   E16E             
1658   E16E                   			JSRD_(do_tilt)			
1658   E16E 57          
1658   E16F FB E9       
1659   E171             you_tilted      		JSR_(gi_off_inc)			
1659   E171 56          
1659   E172 DA 9D       
1660   E174 5E A5 26          			SWCLR_($25,$26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
1661   E177                   			IFEQR_($5F)			      ;BNER_BIT#1F 
1661   E177             
1661   E177             
1661   E177             
1661   E177 5B 5F 00    
1661   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1661   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1661   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1661   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1661   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1661   E17A~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
1661   E17A             
1662   E17A 93                			      JSRR_(mb_end_disp)
1662   E17B 87          
1663   E17C                   			ENDIF_			
1663   E17C             
1663   E17C             
1663   E17C             
1663   E17C             
1663   E17C             
1663   E17C~                  			ENDIF_			
1663   E17C~                  			ENDIF_			
1663   E17C             
1663   E17C~                  			ENDIF_			
1663   E17C~                  			ENDIF_			
1663   E17C             
1663   E179             
1663   E179 02          
1663   E17A             
1663   E17A             
1663   E17A~                  			ENDIF_			
1663   E17A~                  			ENDIF_			
1663   E17A~                  			ENDIF_			
1663   E17A~                  			ENDIF_			
1663   E17A~                  			ENDIF_			
1663   E17A             
1663   E17C             
1663   E17C~                  			ENDIF_			
1663   E17C~                  			ENDIF_			
1663   E17C             
1664   E17C                   			BITOFF_($E6,$67)			;Turn OFF: Bit#26, Bit#27
1664   E17C 11 E6 67    
1665   E17F                   			SLEEP_(156)
1665   E17F~                  			SLEEP_(156)
1665   E17F~                  			SLEEP_(156)
1665   E17F             
1665   E17F 53 9C       
1665   E181             
1666   E181                   			SSND_($1C)				;Sound #1C
1666   E181             
1666   E181 FC          
1666   E182~                  			SSND_($1C)				;Sound #1C
1666   E182~                  			SSND_($1C)				;Sound #1C
1666   E182             
1667   E182                   	      ENDIF_
1667   E182             
1667   E182             
1667   E182             
1667   E182             
1667   E182             
1667   E182~                  	      ENDIF_
1667   E182~                  	      ENDIF_
1667   E182             
1667   E182~                  	      ENDIF_
1667   E182~                  	      ENDIF_
1667   E182             
1667   E16C             
1667   E16C 15          
1667   E16D             
1667   E16D             
1667   E16D~                  	      ENDIF_
1667   E16D~                  	      ENDIF_
1667   E16D~                  	      ENDIF_
1667   E16D~                  	      ENDIF_
1667   E16D~                  	      ENDIF_
1667   E16D             
1667   E182             
1667   E182~                  	      ENDIF_
1667   E182~                  	      ENDIF_
1667   E182             
1668   E182             			KILL_					;Remove This Thread
1668   E182 03          
1669   E183             
1670   E183             ;**********************************************************
1671   E183             ;* This thread runs for 160 irq's and makes sure that 
1672   E183             ;* tilts can only happen every 2.5 seconds at a minimum.
1673   E183             ;**********************************************************
1674   E183 BD F3 AB    min_tilt		jsr	macro_start
1675   E186             			REMTHREADS_($F8,$A0)		;Remove Multiple Threads Based on Priority
1675   E186 55 F8 A0    
1676   E189             			PRI_($A6)				;Priority=#A6
1676   E189 52 A6       
1677   E18B             			BITON_($51)				;Turn ON: Bit#11
1677   E18B 10 51       
1678   E18D             			SLEEP_(160)
1678   E18D~            			SLEEP_(160)
1678   E18D~            			SLEEP_(160)
1678   E18D             
1678   E18D 53 A0       
1678   E18F             
1679   E18F             			BITOFF_($51)			;Turn OFF: Bit#11
1679   E18F 11 51       
1680   E191             			KILL_					;Remove This Thread
1680   E191 03          
1681   E192             
1682   E192             ;**********************************************************
1683   E192             ;* HSTD Reset Switch: Just do it.
1684   E192             ;**********************************************************
1685   E192             sw_hstd_res		JSRD_(restore_hstd)		
1685   E192 57          
1685   E193 EF 9D       
1686   E195             			KILL_					;Remove This Thread
1686   E195 03          
1687   E196             
1688   E196             ;**********************************************************
1689   E196             ;* 1-2-3-4-5 Switches: This is the routine that takes care
1690   E196             ;*                     of handling all the switch closures
1691   E196             ;*                     for this feature. If all are on,
1692   E196             ;*                     then Double Bonus lights.
1693   E196             ;**********************************************************
1694   E196 BD F3 AB    sw_12345_com	jsr	macro_start
1695   E199             			;Fall through to target logic
1696   E199             sw_1_target
1697   E199             sw_2_target
1698   E199             sw_3_target		BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
1698   E199 14 00       
1699   E19B             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19B 43          
1699   E19C             
1699   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19C             
1699   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19C             
1699   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19C~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19C             
1699   E19C             
1699   E19C 0B          
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1699   E19D             
1699   E19D             
1699   E19D             
1699   E19D             
1700   E19D             			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1700   E19D             
1700   E19D             
1700   E19D             
1700   E19D 5B F6 04 FF 
1700   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1700   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1700   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1700   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1700   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1700   E1A1~            			IFEQR_($F6,$04)		      ;BNER_RangeON#04
1700   E1A1             
1701   E1A1                   			PRI_($05)				;Priority=#05
1701   E1A1 52 05       
1702   E1A3                   			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1702   E1A3             
1702   E1A3             
1702   E1A3             
1702   E1A3 5B 19 00    
1702   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1702   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1702   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1702   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1702   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1702   E1A6~                  			IFEQR_($19)			      ;BNER_LAMP#19(double_score) 
1702   E1A6             
1703   E1A6                   			      ;If already lit, then give points
1704   E1A6                   			      POINTS_(5,10000)			;50,000 Points
1704   E1A6 42          
1704   E1A7             
1704   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A7             
1704   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A7             
1704   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A7             
1704   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A7~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A7             
1704   E1A7             
1704   E1A7 2C          
1704   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A8~                  			      POINTS_(5,10000)			;50,000 Points
1704   E1A8             
1704   E1A8             
1704   E1A8             
1704   E1A8             
1704   E1A8             
1705   E1A8                   			ENDIF_
1705   E1A8             
1705   E1A8             
1705   E1A8             
1705   E1A8             
1705   E1A8             
1705   E1A8~                  			ENDIF_
1705   E1A8~                  			ENDIF_
1705   E1A8             
1705   E1A8~                  			ENDIF_
1705   E1A8~                  			ENDIF_
1705   E1A8             
1705   E1A5             
1705   E1A5 02          
1705   E1A6             
1705   E1A6             
1705   E1A6~                  			ENDIF_
1705   E1A6~                  			ENDIF_
1705   E1A6~                  			ENDIF_
1705   E1A6~                  			ENDIF_
1705   E1A6~                  			ENDIF_
1705   E1A6             
1705   E1A8             
1705   E1A8~                  			ENDIF_
1705   E1A8~                  			ENDIF_
1705   E1A8             
1706   E1A8                   			BITON_($19)				;Turn ON: Lamp#19(double_score)
1706   E1A8 10 19       
1707   E1AA                   			SSND_($1D)				;Sound #1D
1707   E1AA             
1707   E1AA FD          
1707   E1AB~                  			SSND_($1D)				;Sound #1D
1707   E1AB~                  			SSND_($1D)				;Sound #1D
1707   E1AB             
1708   E1AB                   			BE19_($04)				;Effect: Range #04
1708   E1AB 19 04       
1709   E1AD                   			BE29_($08)				;Effect: Range #08
1709   E1AD 29 08       
1710   E1AF                   			JSRD_(timer_inc)			
1710   E1AF 57          
1710   E1B0 DC 87       
1711   E1B2 C0 1E             			SETRAM_(rega,$1E)			;RAM$00=$1E
1712   E1B4                   			BEGIN_
1712   E1B4             
1713   E1B4             	 				BE2F_($04)				;Effect: Range #04
1713   E1B4 2F 04       
1714   E1B6             	      			SLEEP_(3)
1714   E1B6             
1714   E1B6 73          
1714   E1B7~            	      			SLEEP_(3)
1714   E1B7~            	      			SLEEP_(3)
1714   E1B7             
1715   E1B7 B0 FF       	      			ADDRAM_(rega,-1)			;RAM$00-=1
1716   E1B9                   			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1B9             
1716   E1B9 5BFCE000FE  
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE             
1716   E1BE             
1716   E1BE             
1716   E1BE             
1716   E1BE             
1716   E1BE             
1716   E1BE             
1716   E1BD             
1716   E1BD F6          
1716   E1BE             
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE             
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE~                  			EQEND_($FC,$E0,$00)	;BNER_RAM$00==#0 
1716   E1BE             
1717   E1BE                   			JSRD_(timer_dec)	
1717   E1BE 57          
1717   E1BF DC 94       
1718   E1C1                   	      ENDIF_		
1718   E1C1             
1718   E1C1             
1718   E1C1             
1718   E1C1             
1718   E1C1             
1718   E1C1~                  	      ENDIF_		
1718   E1C1~                  	      ENDIF_		
1718   E1C1             
1718   E1C1~                  	      ENDIF_		
1718   E1C1~                  	      ENDIF_		
1718   E1C1             
1718   E1A0             
1718   E1A0 20          
1718   E1A1             
1718   E1A1             
1718   E1A1~                  	      ENDIF_		
1718   E1A1~                  	      ENDIF_		
1718   E1A1~                  	      ENDIF_		
1718   E1A1~                  	      ENDIF_		
1718   E1A1~                  	      ENDIF_		
1718   E1A1             
1718   E1C1             
1718   E1C1~                  	      ENDIF_		
1718   E1C1~                  	      ENDIF_		
1718   E1C1             
1719   E1C1             			KILL_					;Remove This Thread
1719   E1C1 03          
1720   E1C2             
1721   E1C2             ;**************************************************************
1722   E1C2             ;* 10 Point switches: If one of the outlanes are on, then
1723   E1C2             ;*                    switch it to the other.
1724   E1C2             ;**************************************************************
1725   E1C2             sw_leftsling
1726   E1C2             sw_rightsling
1727   E1C2             sw_ten_1
1728   E1C2             sw_ten_2
1729   E1C2             sw_ten_3
1730   E1C2             sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C2 43          
1730   E1C3             
1730   E1C3~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C3~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C3             
1730   E1C3             
1730   E1C3 09          
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4~            sw_upper_sling	PTSDIG_(1,10)				;10 Points/Digit Sound
1730   E1C4             
1730   E1C4             
1731   E1C4             			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1731   E1C4             
1731   E1C4             
1731   E1C4             
1731   E1C4 5AFBF60CF50C
1731   E1CA FC
1731   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1731   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1731   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1731   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1731   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1731   E1CB~            			IFNER_($FB,$F6,$0C,$F5,$0C)	;BEQR_(RangeOFF#0C || RangeON#0C) 
1731   E1CB             
1732   E1CB             			      BE1F_($0C)				;Effect: Range #0C
1732   E1CB 1F 0C       
1733   E1CD             			      BE1F_($0E)				;Effect: Range #0E
1733   E1CD 1F 0E       
1734   E1CF             			ENDIF_
1734   E1CF             
1734   E1CF             
1734   E1CF             
1734   E1CF             
1734   E1CF             
1734   E1CF~            			ENDIF_
1734   E1CF~            			ENDIF_
1734   E1CF             
1734   E1CF~            			ENDIF_
1734   E1CF~            			ENDIF_
1734   E1CF             
1734   E1CA             
1734   E1CA 04          
1734   E1CB             
1734   E1CB             
1734   E1CB~            			ENDIF_
1734   E1CB~            			ENDIF_
1734   E1CB~            			ENDIF_
1734   E1CB~            			ENDIF_
1734   E1CB~            			ENDIF_
1734   E1CB             
1734   E1CF             
1734   E1CF~            			ENDIF_
1734   E1CF~            			ENDIF_
1734   E1CF             
1735   E1CF             sw_notused		KILL_					;Remove This Thread
1735   E1CF 03          
1736   E1D0             
1737   E1D0             ;**************************************************************
1738   E1D0             ;* Loop Switches:
1739   E1D0             ;**************************************************************
1740   E1D0             sw_looplow		REMTHREADS_($F8,$90)		;Remove Multiple Threads Based on Priority
1740   E1D0 55 F8 90    
1741   E1D3             			PRI_($90)				;Priority=#90
1741   E1D3 52 90       
1742   E1D5             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D5 43          
1742   E1D6             
1742   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D6             
1742   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D6             
1742   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D6~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D6             
1742   E1D6             
1742   E1D6 0B          
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1742   E1D7             
1742   E1D7             
1742   E1D7             
1742   E1D7             
1743   E1D7             			IFNER_($5B)				;BEQR_BIT#1B
1743   E1D7             
1743   E1D7             
1743   E1D7             
1743   E1D7 5A 5B 00    
1743   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1743   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1743   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1743   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1743   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1743   E1DA~            			IFNER_($5B)				;BEQR_BIT#1B
1743   E1DA             
1744   E1DA             				BITON_($5A)				;Turn ON: Bit#1A
1744   E1DA 10 5A       
1745   E1DC             				SLEEP_(32)				;1/2 second
1745   E1DC~            				SLEEP_(32)				;1/2 second
1745   E1DC~            				SLEEP_(32)				;1/2 second
1745   E1DC             
1745   E1DC 53 20       
1745   E1DE             
1746   E1DE             noloop			BITOFF_($5A)			;Turn OFF: Bit#1A
1746   E1DE 11 5A       
1747   E1E0             				KILL_					;Remove This Thread
1747   E1E0 03          
1748   E1E1             			ENDIF_
1748   E1E1             
1748   E1E1             
1748   E1E1             
1748   E1E1             
1748   E1E1             
1748   E1E1~            			ENDIF_
1748   E1E1~            			ENDIF_
1748   E1E1             
1748   E1E1~            			ENDIF_
1748   E1E1~            			ENDIF_
1748   E1E1             
1748   E1D9             
1748   E1D9 07          
1748   E1DA             
1748   E1DA             
1748   E1DA~            			ENDIF_
1748   E1DA~            			ENDIF_
1748   E1DA~            			ENDIF_
1748   E1DA~            			ENDIF_
1748   E1DA~            			ENDIF_
1748   E1DA             
1748   E1E1             
1748   E1E1~            			ENDIF_
1748   E1E1~            			ENDIF_
1748   E1E1             
1749   E1E1             loop_forward	REMTHREADS_($F8,$50)		;Remove Multiple Threads Based on Priority
1749   E1E1 55 F8 50    
1750   E1E4             			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1750   E1E4             
1750   E1E4             
1750   E1E4             
1750   E1E4 5B F4 1E FF 
1750   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1750   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1750   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1750   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1750   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1750   E1E8~            			IFEQR_($F4,$1E)    	      ;BNER_LampOn/Flash#1E
1750   E1E8             
1751   E1E8                   			BITOFF_($9E,$5B)			;Turn OFF: Lamp#1E(loop_x), Bit#1B
1751   E1E8 11 9E 5B    
1752   E1EB                   			BITOFF2_($1E)			;Turn OFF: Lamp#1E(loop_x)
1752   E1EB 21 1E       
1753   E1ED                   			PRI_($05)				;Priority=#05
1753   E1ED 52 05       
1754   E1EF                   			BE1A_($01)				;Effect: Range #01
1754   E1EF 1A 01       
1755   E1F1 C0 40             			SETRAM_(rega,$40)			;RAM$00=$40
1756   E1F3                   			BEGIN_
1756   E1F3             
1757   E1F3 B0 FF       				      ADDRAM_(rega,-1)			;RAM$00-=1
1758   E1F5                   			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F5             
1758   E1F5 5B E0 00    
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8             
1758   E1F8             
1758   E1F8             
1758   E1F8             
1758   E1F8             
1758   E1F8             
1758   E1F8             
1758   E1F7             
1758   E1F7 FB          
1758   E1F8             
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8             
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8~                  			EQEND_($E0)				;BNER_RAM$00 to gb_46
1758   E1F8             
1759   E1F8 92                			JSRR_(gatlin_sound)			
1759   E1F9 05          
1760   E1FA                   			KILL_					;Remove This Thread
1760   E1FA 03          
1761   E1FB                               ENDIF_
1761   E1FB             
1761   E1FB             
1761   E1FB             
1761   E1FB             
1761   E1FB             
1761   E1FB~                              ENDIF_
1761   E1FB~                              ENDIF_
1761   E1FB             
1761   E1FB~                              ENDIF_
1761   E1FB~                              ENDIF_
1761   E1FB             
1761   E1E7             
1761   E1E7 13          
1761   E1E8             
1761   E1E8             
1761   E1E8~                              ENDIF_
1761   E1E8~                              ENDIF_
1761   E1E8~                              ENDIF_
1761   E1E8~                              ENDIF_
1761   E1E8~                              ENDIF_
1761   E1E8             
1761   E1FB             
1761   E1FB~                              ENDIF_
1761   E1FB~                              ENDIF_
1761   E1FB             
1762   E1FB                   		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1762   E1FB             
1762   E1FB             
1762   E1FB             
1762   E1FB 5B F4 1D FF 
1762   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1762   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1762   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1762   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1762   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1762   E1FF~                  		IFEQR_($F4,$1D)		      ;BNER_LampOn/Flash#1D
1762   E1FF             
1763   E1FF                   			BITOFF_($1D)			;Turn OFF: Lamp#1D(loop_dshield)
1763   E1FF 11 1D       
1764   E201 90                			JSRR_(loop_effect)			
1764   E202 1B          
1765   E203             			ELSE_			
1765   E203             
1765   E203             
1765   E203             
1765   E203             
1765   E1FE             
1765   E1FE             
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE             
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE~            			ELSE_			
1765   E1FE             
1765   E1FE             
1765   E1FE 06          
1765   E203             
1765   E203 80          
1765   E204 00          
1765   E205             
1765   E205             
1765   E205             
1765   E205~            			ELSE_			
1765   E205~            			ELSE_			
1765   E205             
1765   E205~            			ELSE_			
1765   E205~            			ELSE_			
1765   E205             
1766   E205                   			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E205 43          
1766   E206             
1766   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E206             
1766   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E206             
1766   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E206~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E206             
1766   E206             
1766   E206 7B          
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207~                  			PTSDIG_(15,1000)			;15000 Points/Digit Sound
1766   E207             
1766   E207             
1766   E207             
1766   E207             
1767   E207 80                			JMPR_(bit1b_off)						
1767   E208 0E          
1768   E209             sw_loophigh		      REMTHREADS_($F8,$90)		;Remove Multiple Threads Based on Priority
1768   E209 55 F8 90    
1769   E20C                   			PRI_($90)				;Priority=#90
1769   E20C 52 90       
1770   E20E                   			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E20E 43          
1770   E20F             
1770   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E20F             
1770   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E20F             
1770   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E20F~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E20F             
1770   E20F             
1770   E20F 0B          
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1770   E210             
1770   E210             
1770   E210             
1770   E210             
1771   E210                   			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1771   E210             
1771   E210 5A 5A 07    
1771   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1771   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1771   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1771   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1771   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1771   E213~                  			BEQR_($5A,loop_backwards)	;BEQR_BIT#1A to loop_backwards
1771   E213             
1772   E213                   			BITON_($5B)				;Turn ON: Bit#1B
1772   E213 10 5B       
1773   E215                   			SLEEP_(32)				;1/2 second
1773   E215~                  			SLEEP_(32)				;1/2 second
1773   E215~                  			SLEEP_(32)				;1/2 second
1773   E215             
1773   E215 53 20       
1773   E217             
1774   E217                   	      ENDIF_
1774   E217             
1774   E217             
1774   E217             
1774   E217             
1774   E217             
1774   E217~                  	      ENDIF_
1774   E217~                  	      ENDIF_
1774   E217             
1774   E217~                  	      ENDIF_
1774   E217~                  	      ENDIF_
1774   E217             
1774   E204             
1774   E204 12          
1774   E205             
1774   E205             
1774   E205~                  	      ENDIF_
1774   E205~                  	      ENDIF_
1774   E205~                  	      ENDIF_
1774   E205~                  	      ENDIF_
1774   E205~                  	      ENDIF_
1774   E205             
1774   E217             
1774   E217~                  	      ENDIF_
1774   E217~                  	      ENDIF_
1774   E217             
1775   E217             bit1b_off		BITOFF_($5B)			;Turn OFF: Bit#1B
1775   E217 11 5B       
1776   E219             			KILL_					;Remove This Thread
1776   E219 03          
1777   E21A             
1778   E21A 90          loop_backwards	JSRR_(loop_effect)			
1778   E21B 02          
1779   E21C 8F          			JMPR_(noloop)
1779   E21D C0          
1780   E21E             						
1781   E21E             loop_effect		BE1A_($0E)				;Effect: Range #0E
1781   E21E 1A 0E       
1782   E220             			IFNER_($56)			      ;BEQR_BIT#16
1782   E220             
1782   E220             
1782   E220             
1782   E220 5A 56 00    
1782   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1782   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1782   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1782   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1782   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1782   E223~            			IFNER_($56)			      ;BEQR_BIT#16
1782   E223             
1783   E223             			      ;add a drain shield now
1784   E223             add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1784   E223             
1784   E223             
1784   E223             
1784   E223 5AFCD601FE  
1784   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1784   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1784   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1784   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1784   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1784   E228~            add_drainshield		IFNER_($FC,$D6,$01)	      ;BEQR_ADJ#6==#1
1784   E228             
1785   E228                         			EXE_
1785   E228             
1785   E228 44          
1786   E229 96 19                   			      ldaa	$19
1787   E22B 84 60                   			      anda	#$60
1788   E22D 9A 12                   			      oraa	$12
1789   E22F 97 12                   			      staa	$12
1790   E231                         			EXEEND_
1790   E231             
1790   E231             
1790   E231             
1790   E231             
1790   E231~                        			EXEEND_
1790   E231~                        			EXEEND_
1790   E231             
1790   E228             
1790   E228 4A          
1790   E229             
1790   E231             
1790   E231~                        			EXEEND_
1790   E231~                        			EXEEND_
1790   E231             
1791   E231                         			BITOFF_($56)			;Turn OFF: Bit#16
1791   E231 11 56       
1792   E233                         		ENDIF_
1792   E233             
1792   E233             
1792   E233             
1792   E233             
1792   E233             
1792   E233~                        		ENDIF_
1792   E233~                        		ENDIF_
1792   E233             
1792   E233~                        		ENDIF_
1792   E233~                        		ENDIF_
1792   E233             
1792   E227             
1792   E227 0B          
1792   E228             
1792   E228             
1792   E228~                        		ENDIF_
1792   E228~                        		ENDIF_
1792   E228~                        		ENDIF_
1792   E228~                        		ENDIF_
1792   E228~                        		ENDIF_
1792   E228             
1792   E233             
1792   E233~                        		ENDIF_
1792   E233~                        		ENDIF_
1792   E233             
1793   E233                   		ENDIF_
1793   E233             
1793   E233             
1793   E233             
1793   E233             
1793   E233             
1793   E233~                  		ENDIF_
1793   E233~                  		ENDIF_
1793   E233             
1793   E233~                  		ENDIF_
1793   E233~                  		ENDIF_
1793   E233             
1793   E222             
1793   E222 10          
1793   E223             
1793   E223             
1793   E223~                  		ENDIF_
1793   E223~                  		ENDIF_
1793   E223~                  		ENDIF_
1793   E223~                  		ENDIF_
1793   E223~                  		ENDIF_
1793   E223             
1793   E233             
1793   E233~                  		ENDIF_
1793   E233~                  		ENDIF_
1793   E233             
1794   E233             			MRTS_					;Macro RTS, Save MRA,MRB
1794   E233 02          
1795   E234             
1796   E234             ;**************************************************************
1797   E234             ;* Left Drop Target Bank
1798   E234             ;**************************************************************
1799   E234             sw_dt_lc
1800   E234             sw_dt_ll
1801   E234             sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1801   E234             
1801   E234 5A 4F 63    
1801   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1801   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1801   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1801   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1801   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1801   E237~            sw_dt_lu		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1801   E237             
1802   E237             			BE1A_($06)				;Effect: Range #06
1802   E237 1A 06       
1803   E239             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E239 43          
1803   E23A             
1803   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23A             
1803   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23A             
1803   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23A~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23A             
1803   E23A             
1803   E23A 0B          
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1803   E23B             
1803   E23B             
1803   E23B             
1803   E23B             
1804   E23B 90          			JSRR_(do_lord)			
1804   E23C 5E          
1805   E23D             			EXE_
1805   E23D             
1805   E23D 44          
1806   E23E C4 70       			      andb	#$70
1807   E240             			EXEEND_
1807   E240             
1807   E240             
1807   E240             
1807   E240             
1807   E240~            			EXEEND_
1807   E240~            			EXEEND_
1807   E240             
1807   E23D             
1807   E23D 44          
1807   E23E             
1807   E240             
1807   E240~            			EXEEND_
1807   E240~            			EXEEND_
1807   E240             
1808   E240             			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1808   E240             
1808   E240 5BFCE17055  
1808   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1808   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1808   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1808   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1808   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1808   E245~            			BNER_($FC,$E1,$70,dt_kill)	;BNER_RAM$01==#112 to dt_kill
1808   E245             
1809   E245             			BITOFF_($1C)			;Turn OFF: Lamp#1C(dt_left)
1809   E245 11 1C       
1810   E247             			SOL_(dtleft_on)   		;Turn ON Sol#4:dt_left
1810   E247 31 63       
1811   E249             			REMTHREADS_($F8,$80)		;Remove Multiple Threads Based on Priority
1811   E249 55 F8 80    
1812   E24C 80          			JMPR_(dt_common)
1812   E24D 18          
1813   E24E             			
1814   E24E             ;**************************************************************
1815   E24E             ;* Right Drop Target Bank
1816   E24E             ;**************************************************************						
1817   E24E             sw_dt_rb
1818   E24E             sw_dt_rc
1819   E24E             sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1819   E24E             
1819   E24E 5A 4F 49    
1819   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1819   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1819   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1819   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1819   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1819   E251~            sw_dt_rt		BEQR_($4F,dt_kill)		;BEQR_BIT#0F to dt_kill
1819   E251             
1820   E251             			BE1A_($05)				;Effect: Range #05
1820   E251 1A 05       
1821   E253             			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E253 43          
1821   E254             
1821   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E254             
1821   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E254             
1821   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E254~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E254             
1821   E254             
1821   E254 0B          
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255~            			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1821   E255             
1821   E255             
1821   E255             
1821   E255             
1822   E255 90          			JSRR_(do_lord)			
1822   E256 44          
1823   E257             			EXE_
1823   E257             
1823   E257 44          
1824   E258 C4 07       			      andb	#$07
1825   E25A             			EXEEND_
1825   E25A             
1825   E25A             
1825   E25A             
1825   E25A             
1825   E25A~            			EXEEND_
1825   E25A~            			EXEEND_
1825   E25A             
1825   E257             
1825   E257 44          
1825   E258             
1825   E25A             
1825   E25A~            			EXEEND_
1825   E25A~            			EXEEND_
1825   E25A             
1826   E25A             			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1826   E25A             
1826   E25A 5BFCE1073B  
1826   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1826   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1826   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1826   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1826   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1826   E25F~            			BNER_($FC,$E1,$07,dt_kill)	;BNER_RAM$01==#7 to dt_kill
1826   E25F             
1827   E25F             			BITOFF_($18)			;Turn OFF: Lamp#18(dt_right)
1827   E25F 11 18       
1828   E261             			SOL_(dtright_on)           	;Turn ON Sol#5:dt_right
1828   E261 31 64       
1829   E263             			REMTHREADS_($F8,$70)		;Remove Multiple Threads Based on Priority
1829   E263 55 F8 70    
1830   E266             dt_common		PRI_($05)				;Priority=#05
1830   E266 52 05       
1831   E268             			EXE_
1831   E268             
1831   E268 44          
1832   E269 37          			      pshb	
1833   E26A 36          			      psha	
1834   E26B C6 05       			      ldab	#$05
1835   E26D             			EXEEND_
1835   E26D             
1835   E26D             
1835   E26D             
1835   E26D             
1835   E26D~            			EXEEND_
1835   E26D~            			EXEEND_
1835   E26D             
1835   E268             
1835   E268 46          
1835   E269             
1835   E26D             
1835   E26D~            			EXEEND_
1835   E26D~            			EXEEND_
1835   E26D             
1836   E26D             			JSR_(add_bonus_dly)				
1836   E26D 56          
1836   E26E DC F5       
1837   E270             			EXE_
1837   E270             
1837   E270 44          
1838   E271 32          			      pula	
1839   E272 36          			      psha
1840   E273             			EXEEND_	
1840   E273             
1840   E273             
1840   E273             
1840   E273             
1840   E273~            			EXEEND_	
1840   E273~            			EXEEND_	
1840   E273             
1840   E270             
1840   E270 44          
1840   E271             
1840   E273             
1840   E273~            			EXEEND_	
1840   E273~            			EXEEND_	
1840   E273             
1841   E273             			IFEQR_($E0)			      ;BNER_RAM$00
1841   E273             
1841   E273             
1841   E273             
1841   E273 5B E0 00    
1841   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1841   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1841   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1841   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1841   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1841   E276~            			IFEQR_($E0)			      ;BNER_RAM$00
1841   E276             
1842   E276 95          			      JSRR_(gj_0E)			
1842   E277 4F          
1843   E278 80          			      JMPR_(gj_0F)
1843   E279 02          
1844   E27A             			ENDIF_		
1844   E27A             
1844   E27A             
1844   E27A             
1844   E27A             
1844   E27A             
1844   E27A~            			ENDIF_		
1844   E27A~            			ENDIF_		
1844   E27A             
1844   E27A~            			ENDIF_		
1844   E27A~            			ENDIF_		
1844   E27A             
1844   E275             
1844   E275 04          
1844   E276             
1844   E276             
1844   E276~            			ENDIF_		
1844   E276~            			ENDIF_		
1844   E276~            			ENDIF_		
1844   E276~            			ENDIF_		
1844   E276~            			ENDIF_		
1844   E276             
1844   E27A             
1844   E27A~            			ENDIF_		
1844   E27A~            			ENDIF_		
1844   E27A             
1845   E27A DA 0A       			RSND_($1A,$0A)			;Sound #1A(x10)
1846   E27C             gj_0F			EXE_
1846   E27C             
1846   E27C 44          
1847   E27D 32          			      pula	
1848   E27E 33          			      pulb
1849   E27F             			EXEEND_	
1849   E27F             
1849   E27F             
1849   E27F             
1849   E27F             
1849   E27F~            			EXEEND_	
1849   E27F~            			EXEEND_	
1849   E27F             
1849   E27C             
1849   E27C 44          
1849   E27D             
1849   E27F             
1849   E27F~            			EXEEND_	
1849   E27F~            			EXEEND_	
1849   E27F             
1850   E27F             			BITOFFP_(rega)			;Turn OFF Lamp/Bit @RAM:00
1850   E27F 15 00       
1851   E281 B0 01       			ADDRAM_(rega,$01)			;RAM$00+=$01
1852   E283             			IFNER_($E0)				;BEQR_RAM$00
1852   E283             
1852   E283             
1852   E283             
1852   E283 5A E0 00    
1852   E286~            			IFNER_($E0)				;BEQR_RAM$00
1852   E286~            			IFNER_($E0)				;BEQR_RAM$00
1852   E286~            			IFNER_($E0)				;BEQR_RAM$00
1852   E286~            			IFNER_($E0)				;BEQR_RAM$00
1852   E286~            			IFNER_($E0)				;BEQR_RAM$00
1852   E286~            			IFNER_($E0)				;BEQR_RAM$00
1852   E286             
1853   E286             				BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
1853   E286 14 00       
1854   E288 B0 BF       				ADDRAM_(rega,$BF)			;RAM$00+=$BF
1855   E28A C1 18       				SETRAM_(regb,$18)			;RAM$01=$18
1856   E28C             				BEGIN_
1856   E28C             
1857   E28C             					BITINVP_(rega)			;Toggle Lamp/Bit @RAM:00
1857   E28C 16 00       
1858   E28E             					SLEEP_(2)
1858   E28E             
1858   E28E 72          
1858   E28F~            					SLEEP_(2)
1858   E28F~            					SLEEP_(2)
1858   E28F             
1859   E28F B1 FF       					ADDRAM_(regb,-1)			;RAM$01-=1
1860   E291             				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E291             
1860   E291 5BFCE100FE  
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296             
1860   E296             
1860   E296             
1860   E296             
1860   E296             
1860   E296             
1860   E296             
1860   E295             
1860   E295 F6          
1860   E296             
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296             
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296~            				EQEND_($FC,$E1,$00)		;BNER_RAM$01==#0
1860   E296             
1861   E296 B0 41       				ADDRAM_(rega,$41)			;RAM$00+=$41
1862   E298             				BITOFFP_($00)			;Turn OFF Lamp/Bit @RAM:00
1862   E298 15 00       
1863   E29A             			ENDIF_
1863   E29A             
1863   E29A             
1863   E29A             
1863   E29A             
1863   E29A             
1863   E29A~            			ENDIF_
1863   E29A~            			ENDIF_
1863   E29A             
1863   E29A~            			ENDIF_
1863   E29A~            			ENDIF_
1863   E29A             
1863   E285             
1863   E285 14          
1863   E286             
1863   E286             
1863   E286~            			ENDIF_
1863   E286~            			ENDIF_
1863   E286~            			ENDIF_
1863   E286~            			ENDIF_
1863   E286~            			ENDIF_
1863   E286             
1863   E29A             
1863   E29A~            			ENDIF_
1863   E29A~            			ENDIF_
1863   E29A             
1864   E29A             dt_kill		KILL_					;Remove This Thread
1864   E29A 03          
1865   E29B             
1866   E29B             do_lord		EXE_
1866   E29B             
1866   E29B 44          
1867   E29C 36          			      psha	
1868   E29D 84 FC       			      anda	#$FC
1869   E29F 8B 41       			      adda	#$41
1870   E2A1             			EXEEND_
1870   E2A1             
1870   E2A1             
1870   E2A1             
1870   E2A1             
1870   E2A1~            			EXEEND_
1870   E2A1~            			EXEEND_
1870   E2A1             
1870   E29B             
1870   E29B 47          
1870   E29C             
1870   E2A1             
1870   E2A1~            			EXEEND_
1870   E2A1~            			EXEEND_
1870   E2A1             
1871   E2A1             			BEGIN_
1871   E2A1             
1872   E2A1             				SLEEP_(2)
1872   E2A1             
1872   E2A1 72          
1872   E2A2~            				SLEEP_(2)
1872   E2A2~            				SLEEP_(2)
1872   E2A2             
1873   E2A2             			NEEND_($E0)				;BEQR_RAM$00
1873   E2A2             
1873   E2A2 5A E0 00    
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5             
1873   E2A5             
1873   E2A5             
1873   E2A5             
1873   E2A5             
1873   E2A5             
1873   E2A5             
1873   E2A4             
1873   E2A4 FC          
1873   E2A5             
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5             
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5~            			NEEND_($E0)				;BEQR_RAM$00
1873   E2A5             
1874   E2A5             			EXE_
1874   E2A5             
1874   E2A5 44          
1875   E2A6 33          			      pulb	
1876   E2A7 4A          			      deca
1877   E2A8             			EXEEND_	
1877   E2A8             
1877   E2A8             
1877   E2A8             
1877   E2A8             
1877   E2A8~            			EXEEND_	
1877   E2A8~            			EXEEND_	
1877   E2A8             
1877   E2A5             
1877   E2A5 44          
1877   E2A6             
1877   E2A8             
1877   E2A8~            			EXEEND_	
1877   E2A8~            			EXEEND_	
1877   E2A8             
1878   E2A8             			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1878   E2A8             
1878   E2A8 5B F8 E1 EE 
1878   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1878   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1878   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1878   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1878   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1878   E2AC~            			BNER_($F8,$E1,dt_kill)		;BNER_SW#E1 to dt_kill
1878   E2AC             
1879   E2AC             			EXE_
1879   E2AC             
1879   E2AC 44          
1880   E2AD 36          			      psha	
1881   E2AE BD E5 9F    			      jsr	get_lord
1882   E2B1 16          			      tab	
1883   E2B2 32          			      pula	
1884   E2B3             			EXEEND_
1884   E2B3             
1884   E2B3             
1884   E2B3             
1884   E2B3             
1884   E2B3~            			EXEEND_
1884   E2B3~            			EXEEND_
1884   E2B3             
1884   E2AC             
1884   E2AC 48          
1884   E2AD             
1884   E2B3             
1884   E2B3~            			EXEEND_
1884   E2B3~            			EXEEND_
1884   E2B3             
1885   E2B3             			IFNER_($E0)		      ;BEQR_RAM$00
1885   E2B3             
1885   E2B3             
1885   E2B3             
1885   E2B3 5A E0 00    
1885   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1885   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1885   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1885   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1885   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1885   E2B6~            			IFNER_($E0)		      ;BEQR_RAM$00
1885   E2B6             
1886   E2B6                   			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1886   E2B6             
1886   E2B6             
1886   E2B6             
1886   E2B6 5AFBFBFA5FFC
1886   E2BC D20041FAFCE101FCD501F2
1886   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1886   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1886   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1886   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1886   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1886   E2C7~                  			IFNER_($FB,$FB,$FA,$5F,$FC,$D2,$00,$41,$FA,$FC,$E1,$01,$FC,$D5,$01)
1886   E2C7             
1887   E2C7                   				;BEQR_((ADJ#5==#1 && RAM$01==#1) || (BIT#01 || (ADJ#2==#0 && BIT#1F)))
1888   E2C7                         			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
1888   E2C7 14 00       
1889   E2C9                         			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1889   E2C9             
1889   E2C9             
1889   E2C9             
1889   E2C9 5AFCE058FE  
1889   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1889   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1889   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1889   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1889   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1889   E2CE~                        			IFNER_($FC,$E0,$58)	      ;BEQR_RAM$00==#88 
1889   E2CE             
1890   E2CE                               			EXE_
1890   E2CE             
1890   E2CE 44          
1891   E2CF C6 80                         			      ldab	#$80
1892   E2D1 D7 AA                         			      stab	thread_priority
1893   E2D3 CE D8 A6                      			      ldx	#left_timer
1894   E2D6 BD EA 78                      			      jsr	newthread_sp
1895   E2D9                               			EXEEND_
1895   E2D9             
1895   E2D9             
1895   E2D9             
1895   E2D9             
1895   E2D9~                              			EXEEND_
1895   E2D9~                              			EXEEND_
1895   E2D9             
1895   E2CE             
1895   E2CE 4C          
1895   E2CF             
1895   E2D9             
1895   E2D9~                              			EXEEND_
1895   E2D9~                              			EXEEND_
1895   E2D9             
1896   E2D9                                           ELSE_ 						
1896   E2D9             
1896   E2D9             
1896   E2D9             
1896   E2D9             
1896   E2CD             
1896   E2CD             
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD             
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD~                                          ELSE_ 						
1896   E2CD             
1896   E2CD             
1896   E2CD 0D          
1896   E2D9             
1896   E2D9 80          
1896   E2DA 00          
1896   E2DB             
1896   E2DB             
1896   E2DB             
1896   E2DB~                                          ELSE_ 						
1896   E2DB~                                          ELSE_ 						
1896   E2DB             
1896   E2DB~                                          ELSE_ 						
1896   E2DB~                                          ELSE_ 						
1896   E2DB             
1897   E2DB                                       		EXE_
1897   E2DB             
1897   E2DB 44          
1898   E2DC C6 70                         			      ldab	#$70
1899   E2DE D7 AA                         			      stab	thread_priority
1900   E2E0 CE D8 D8                      			      ldx	#right_timer
1901   E2E3 BD EA 78                      			      jsr	newthread_sp
1902   E2E6                               			EXEEND_
1902   E2E6             
1902   E2E6             
1902   E2E6             
1902   E2E6             
1902   E2E6~                              			EXEEND_
1902   E2E6~                              			EXEEND_
1902   E2E6             
1902   E2DB             
1902   E2DB 4C          
1902   E2DC             
1902   E2E6             
1902   E2E6~                              			EXEEND_
1902   E2E6~                              			EXEEND_
1902   E2E6             
1903   E2E6                               		ENDIF_
1903   E2E6             
1903   E2E6             
1903   E2E6             
1903   E2E6             
1903   E2E6             
1903   E2E6~                              		ENDIF_
1903   E2E6~                              		ENDIF_
1903   E2E6             
1903   E2E6~                              		ENDIF_
1903   E2E6~                              		ENDIF_
1903   E2E6             
1903   E2DA             
1903   E2DA 0B          
1903   E2DB             
1903   E2DB             
1903   E2DB~                              		ENDIF_
1903   E2DB~                              		ENDIF_
1903   E2DB~                              		ENDIF_
1903   E2DB~                              		ENDIF_
1903   E2DB~                              		ENDIF_
1903   E2DB             
1903   E2E6             
1903   E2E6~                              		ENDIF_
1903   E2E6~                              		ENDIF_
1903   E2E6             
1904   E2E6                               	ENDIF_
1904   E2E6             
1904   E2E6             
1904   E2E6             
1904   E2E6             
1904   E2E6             
1904   E2E6~                              	ENDIF_
1904   E2E6~                              	ENDIF_
1904   E2E6             
1904   E2E6~                              	ENDIF_
1904   E2E6~                              	ENDIF_
1904   E2E6             
1904   E2C6             
1904   E2C6 1F          
1904   E2C7             
1904   E2C7             
1904   E2C7~                              	ENDIF_
1904   E2C7~                              	ENDIF_
1904   E2C7~                              	ENDIF_
1904   E2C7~                              	ENDIF_
1904   E2C7~                              	ENDIF_
1904   E2C7             
1904   E2E6             
1904   E2E6~                              	ENDIF_
1904   E2E6~                              	ENDIF_
1904   E2E6             
1905   E2E6                   		ENDIF_
1905   E2E6             
1905   E2E6             
1905   E2E6             
1905   E2E6             
1905   E2E6             
1905   E2E6~                  		ENDIF_
1905   E2E6~                  		ENDIF_
1905   E2E6             
1905   E2E6~                  		ENDIF_
1905   E2E6~                  		ENDIF_
1905   E2E6             
1905   E2B5             
1905   E2B5 30          
1905   E2B6             
1905   E2B6             
1905   E2B6~                  		ENDIF_
1905   E2B6~                  		ENDIF_
1905   E2B6~                  		ENDIF_
1905   E2B6~                  		ENDIF_
1905   E2B6~                  		ENDIF_
1905   E2B6             
1905   E2E6             
1905   E2E6~                  		ENDIF_
1905   E2E6~                  		ENDIF_
1905   E2E6             
1906   E2E6                   		EXE_
1906   E2E6             
1906   E2E6 44          
1907   E2E7 D6 64       			      ldab	$64
1908   E2E9             			EXEEND_
1908   E2E9             
1908   E2E9             
1908   E2E9             
1908   E2E9             
1908   E2E9~            			EXEEND_
1908   E2E9~            			EXEEND_
1908   E2E9             
1908   E2E6             
1908   E2E6 44          
1908   E2E7             
1908   E2E9             
1908   E2E9~            			EXEEND_
1908   E2E9~            			EXEEND_
1908   E2E9             
1909   E2E9             			MRTS_					;Macro RTS, Save MRA,MRB
1909   E2E9 02          
1910   E2EA             
1911   E2EA             ;************************************************************
1912   E2EA             ;* #5 Rollover switch: Will turn on multiplier lamp or drain
1913   E2EA             ;*                     shield on loop.
1914   E2EA             ;************************************************************
1915   E2EA             sw_5_rollover	JSRD_(spawn_loop)			
1915   E2EA 57          
1915   E2EB DB 12       
1916   E2ED             			JSR_(inc_bonus)		      ;1 bonus advance			
1916   E2ED 56          
1916   E2EE DC FF       
1917   E2F0 8E          			JMPR_(sw_1_target)		
1917   E2F1 A7          
1918   E2F2             
1919   E2F2             ;************************************************************
1920   E2F2             ;* Lower Eject Hole
1921   E2F2             ;************************************************************			
1922   E2F2             sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1922   E2F2             
1922   E2F2             
1922   E2F2             
1922   E2F2 5BFBF0F1FE  
1922   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1922   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1922   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1922   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1922   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1922   E2F7~            sw_lower_eject	IFEQR_($FB,$F0,$F1)	;BNER_(GAME || TILT)
1922   E2F7             
1923   E2F7 C0 46       			      SETRAM_(rega,$46)			;RAM$00=$46	
1924   E2F9                   		ELSE_	
1924   E2F9             
1924   E2F9             
1924   E2F9             
1924   E2F9             
1924   E2F6             
1924   E2F6             
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6             
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6~                  		ELSE_	
1924   E2F6             
1924   E2F6             
1924   E2F6 04          
1924   E2F9             
1924   E2F9 80          
1924   E2FA 00          
1924   E2FB             
1924   E2FB             
1924   E2FB             
1924   E2FB~                  		ELSE_	
1924   E2FB~                  		ELSE_	
1924   E2FB             
1924   E2FB~                  		ELSE_	
1924   E2FB~                  		ELSE_	
1924   E2FB             
1925   E2FB             	      		BEQA_($FB,$FB,$FE,$F2,$F0,$10,$FA,$5E,$F3,$57,$4F,sw_notused)
1925   E2FB 58FBFBFEF2F0
1925   E301 10FA5EF3574F
1925   E307 E1 CF       
1926   E309                                     ;BEQR_(BIT#0F || (((!BIT#17) && BIT#1E) || (LAMP#10(1_target) P $F0,$10))) to sw_notused
1927   E309                   			BITON_($54)				;Turn ON: Bit#14
1927   E309 10 54       
1928   E30B                   			BEQA_($41,mb_start)		;BEQR_BIT#01 to mb_start
1928   E30B 58 41       
1928   E30D E4 35       
1929   E30F                   			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1929   E30F             
1929   E30F             
1929   E30F             
1929   E30F 5B F4 2B FF 
1929   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1929   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1929   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1929   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1929   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1929   E313~                  			IFEQR_($F4,$2B)		      ;BNER_LampOn/Flash#2B
1929   E313             
1930   E313                   			      BITOFF_($2B)			;Turn OFF: Lamp#2B(extra_kick)
1930   E313 11 2B       
1931   E315                   			      REMTHREADS_($F8,$14)		;Remove Multiple Threads Based on Priority
1931   E315 55 F8 14    
1932   E318                   			      BITON_($53)				;Turn ON: Bit#13
1932   E318 10 53       
1933   E31A                   			ENDIF_
1933   E31A             
1933   E31A             
1933   E31A             
1933   E31A             
1933   E31A             
1933   E31A~                  			ENDIF_
1933   E31A~                  			ENDIF_
1933   E31A             
1933   E31A~                  			ENDIF_
1933   E31A~                  			ENDIF_
1933   E31A             
1933   E312             
1933   E312 07          
1933   E313             
1933   E313             
1933   E313~                  			ENDIF_
1933   E313~                  			ENDIF_
1933   E313~                  			ENDIF_
1933   E313~                  			ENDIF_
1933   E313~                  			ENDIF_
1933   E313             
1933   E31A             
1933   E31A~                  			ENDIF_
1933   E31A~                  			ENDIF_
1933   E31A             
1934   E31A             eject_common	      PRI_($15)				;Priority=#15
1934   E31A 52 15       
1935   E31C                   			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31C 43          
1935   E31D             
1935   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31D             
1935   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31D             
1935   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31D~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31D             
1935   E31D             
1935   E31D 0B          
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E~                  			PTSDIG_(1,1000)			;1000 Points/Digit Sound
1935   E31E             
1935   E31E             
1935   E31E             
1935   E31E             
1936   E31E                   			IFNER_($F8,$08)		      ;BEQR_SW#08
1936   E31E             
1936   E31E             
1936   E31E             
1936   E31E 5A F8 08 FF 
1936   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1936   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1936   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1936   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1936   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1936   E322~                  			IFNER_($F8,$08)		      ;BEQR_SW#08
1936   E322             
1937   E322                         			BITON2_($17)			;Turn ON: Lamp#17(mini_pf)
1937   E322 20 17       
1938   E324                         			BITON2_($1F)			;Turn ON: Lamp#1F(mini_pf)
1938   E324 20 1F       
1939   E326                         			BITON2_($25)			;Turn ON: Lamp#25(mini_pf)
1939   E326 20 25       
1940   E328                         			BITON2_($2E)			;Turn ON: Lamp#2E(mini_pf)
1940   E328 20 2E       
1941   E32A                         			BITON2_($2F)			;Turn ON: Lamp#2F(mini_pf)
1941   E32A 20 2F       
1942   E32C                         			BITON2_($2B)			;Turn ON: Lamp#2B(extra_kick)
1942   E32C 20 2B       
1943   E32E                         			BITOFF2_($6B)			;Turn OFF: Lamp#2B(extra_kick)
1943   E32E 21 6B       
1944   E330                         			BITON_($64)				;Turn ON: Bit#24
1944   E330 10 64       
1945   E332                         		ELSE_			
1945   E332             
1945   E332             
1945   E332             
1945   E332             
1945   E321             
1945   E321             
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321             
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321~                        		ELSE_			
1945   E321             
1945   E321             
1945   E321 12          
1945   E332             
1945   E332 80          
1945   E333 00          
1945   E334             
1945   E334             
1945   E334             
1945   E334~                        		ELSE_			
1945   E334~                        		ELSE_			
1945   E334             
1945   E334~                        		ELSE_			
1945   E334~                        		ELSE_			
1945   E334             
1946   E334                   	      		JSR_(gi_off_inc)			
1946   E334 56          
1946   E335 DA 9D       
1947   E337                         			BE29_($08)				;Effect: Range #08
1947   E337 29 08       
1948   E339                         			JSRD_(timer_inc)			
1948   E339 57          
1948   E33A DC 87       
1949   E33C                         			BE29_($42)				;Effect: Range #02
1949   E33C 29 42       
1950   E33E                         	      ENDIF_
1950   E33E             
1950   E33E             
1950   E33E             
1950   E33E             
1950   E33E             
1950   E33E~                        	      ENDIF_
1950   E33E~                        	      ENDIF_
1950   E33E             
1950   E33E~                        	      ENDIF_
1950   E33E~                        	      ENDIF_
1950   E33E             
1950   E333             
1950   E333 0A          
1950   E334             
1950   E334             
1950   E334~                        	      ENDIF_
1950   E334~                        	      ENDIF_
1950   E334~                        	      ENDIF_
1950   E334~                        	      ENDIF_
1950   E334~                        	      ENDIF_
1950   E334             
1950   E33E             
1950   E33E~                        	      ENDIF_
1950   E33E~                        	      ENDIF_
1950   E33E             
1951   E33E             gj_22     			EXE_
1951   E33E             
1951   E33E 44          
1952   E33F                   			      NEWTHREAD(minipf_thread)
1952   E33F CE E3 91    
1952   E342 BD EA C4    
1953   E345                   			EXEEND_
1953   E345             
1953   E345             
1953   E345             
1953   E345             
1953   E345~                  			EXEEND_
1953   E345~                  			EXEEND_
1953   E345             
1953   E33E             
1953   E33E 48          
1953   E33F             
1953   E345             
1953   E345~                  			EXEEND_
1953   E345~                  			EXEEND_
1953   E345             
1954   E345                   			SLEEP_(64)
1954   E345~                  			SLEEP_(64)
1954   E345~                  			SLEEP_(64)
1954   E345             
1954   E345 53 40       
1954   E347             
1955   E347                   			SOL_(minikick_on)         	;Turn ON Sol#20:mini_kicker
1955   E347 31 33       
1956   E349                   			SLEEP_(255)                   ;wait 4 seconds
1956   E349~                  			SLEEP_(255)                   ;wait 4 seconds
1956   E349~                  			SLEEP_(255)                   ;wait 4 seconds
1956   E349             
1956   E349 53 FF       
1956   E34B             
1957   E34B                   			SOL_(minikick_on_hard)        ;Turn ON Sol#20:mini_kicker
1957   E34B 31 53       
1958   E34D                   			SLEEP_(192)
1958   E34D~                  			SLEEP_(192)
1958   E34D~                  			SLEEP_(192)
1958   E34D             
1958   E34D 53 C0       
1958   E34F             
1959   E34F             gb_89 			BITOFF_($53)			;Turn OFF: Bit#13
1959   E34F 11 53       
1960   E351                   			REMTHREADS_($F8,$10)		;Remove Multiple Threads Based on Priority
1960   E351 55 F8 10    
1961   E354 90          gb_41 			JSRR_(minipf_done)			
1961   E355 21          
1962   E356             gb_24 			PRI_($17)				;Priority=#17
1962   E356 52 17       
1963   E358                   			SLEEP_(32)
1963   E358~                  			SLEEP_(32)
1963   E358~                  			SLEEP_(32)
1963   E358             
1963   E358 53 20       
1963   E35A             
1964   E35A                   			SSND_($0D)				;Sound #0D
1964   E35A             
1964   E35A ED          
1964   E35B~                  			SSND_($0D)				;Sound #0D
1964   E35B~                  			SSND_($0D)				;Sound #0D
1964   E35B             
1965   E35B                   			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1965   E35B             
1965   E35B             
1965   E35B             
1965   E35B 5BFA5FF808FD
1965   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1965   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1965   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1965   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1965   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1965   E361~                  			IFEQR_($FA,$5F,$F8,$08)	      ;BNER_(SW#08 && BIT#1F)
1965   E361             
1966   E361                         			BITOFF_($57)			;Turn OFF: Bit#17
1966   E361 11 57       
1967   E363 81                      			JMPR_(mb_restart)
1967   E364 0D          
1968   E365                         	      ENDIF_	
1968   E365             
1968   E365             
1968   E365             
1968   E365             
1968   E365             
1968   E365~                        	      ENDIF_	
1968   E365~                        	      ENDIF_	
1968   E365             
1968   E365~                        	      ENDIF_	
1968   E365~                        	      ENDIF_	
1968   E365             
1968   E360             
1968   E360 04          
1968   E361             
1968   E361             
1968   E361~                        	      ENDIF_	
1968   E361~                        	      ENDIF_	
1968   E361~                        	      ENDIF_	
1968   E361~                        	      ENDIF_	
1968   E361~                        	      ENDIF_	
1968   E361             
1968   E365             
1968   E365~                        	      ENDIF_	
1968   E365~                        	      ENDIF_	
1968   E365             
1969   E365 C0 46              			SETRAM_(rega,lowereject_on)    
1970   E367                   			IFNER_($54)			      ;BEQR_BIT#14 
1970   E367             
1970   E367             
1970   E367             
1970   E367 5A 54 00    
1970   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1970   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1970   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1970   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1970   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1970   E36A~                  			IFNER_($54)			      ;BEQR_BIT#14 
1970   E36A             
1971   E36A C0 47       gb_1C 			      SETRAM_(rega,uppereject_on)
1972   E36C                                     ENDIF_
1972   E36C             
1972   E36C             
1972   E36C             
1972   E36C             
1972   E36C             
1972   E36C~                                    ENDIF_
1972   E36C~                                    ENDIF_
1972   E36C             
1972   E36C~                                    ENDIF_
1972   E36C~                                    ENDIF_
1972   E36C             
1972   E369             
1972   E369 02          
1972   E36A             
1972   E36A             
1972   E36A~                                    ENDIF_
1972   E36A~                                    ENDIF_
1972   E36A~                                    ENDIF_
1972   E36A~                                    ENDIF_
1972   E36A~                                    ENDIF_
1972   E36A             
1972   E36C             
1972   E36C~                                    ENDIF_
1972   E36C~                                    ENDIF_
1972   E36C             
1973   E36C                               ENDIF_	
1973   E36C             
1973   E36C             
1973   E36C             
1973   E36C             
1973   E36C             
1973   E36C~                              ENDIF_	
1973   E36C~                              ENDIF_	
1973   E36C             
1973   E36C~                              ENDIF_	
1973   E36C~                              ENDIF_	
1973   E36C             
1973   E2FA             
1973   E2FA 71          
1973   E2FB             
1973   E2FB             
1973   E2FB~                              ENDIF_	
1973   E2FB~                              ENDIF_	
1973   E2FB~                              ENDIF_	
1973   E2FB~                              ENDIF_	
1973   E2FB~                              ENDIF_	
1973   E2FB             
1973   E36C             
1973   E36C~                              ENDIF_	
1973   E36C~                              ENDIF_	
1973   E36C             
1974   E36C             			JSRD_(solbuf)			
1974   E36C 57          
1974   E36D EB 23       
1975   E36F             			BITOFF_($54)			;Turn OFF: Bit#14
1975   E36F 11 54       
1976   E371             			SLEEP_(32)
1976   E371~            			SLEEP_(32)
1976   E371~            			SLEEP_(32)
1976   E371             
1976   E371 53 20       
1976   E373             
1977   E373 5E A5 26    			SWCLR_($A5),($26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
1978   E376             gb_0B			KILL_					;Remove This Thread
1978   E376 03          
1979   E377             
1980   E377             
1981   E377             minipf_done		IFEQR_($64)			      ;BNER_BIT#24
1981   E377             
1981   E377             
1981   E377             
1981   E377 5B 64 00    
1981   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
1981   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
1981   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
1981   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
1981   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
1981   E37A~            minipf_done		IFEQR_($64)			      ;BNER_BIT#24
1981   E37A             
1982   E37A                   			BITOFF2_($2B)			;Turn OFF: Lamp#2B(extra_kick)
1982   E37A 21 2B       
1983   E37C                   			BITOFF2_($17)			;Turn OFF: Lamp#17(mini_pf)
1983   E37C 21 17       
1984   E37E                   			BITOFF2_($1F)			;Turn OFF: Lamp#1F(mini_pf)
1984   E37E 21 1F       
1985   E380                   			BITOFF2_($25)			;Turn OFF: Lamp#25(mini_pf)
1985   E380 21 25       
1986   E382                   			BITOFF2_($2E)			;Turn OFF: Lamp#2E(mini_pf)
1986   E382 21 2E       
1987   E384                   			BITOFF2_($2F)			;Turn OFF: Lamp#2F(mini_pf)
1987   E384 21 2F       
1988   E386                   		ELSE_				
1988   E386             
1988   E386             
1988   E386             
1988   E386             
1988   E379             
1988   E379             
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379             
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379~                  		ELSE_				
1988   E379             
1988   E379             
1988   E379 0E          
1988   E386             
1988   E386 80          
1988   E387 00          
1988   E388             
1988   E388             
1988   E388             
1988   E388~                  		ELSE_				
1988   E388~                  		ELSE_				
1988   E388             
1988   E388~                  		ELSE_				
1988   E388~                  		ELSE_				
1988   E388             
1989   E388             			      JSRD_(timer_dec)			
1989   E388 57          
1989   E389 DC 94       
1990   E38B             			      JSR_(gi_on_dec)
1990   E38B 56          
1990   E38C DA 8E       
1991   E38E             		      ENDIF_			
1991   E38E             
1991   E38E             
1991   E38E             
1991   E38E             
1991   E38E             
1991   E38E~            		      ENDIF_			
1991   E38E~            		      ENDIF_			
1991   E38E             
1991   E38E~            		      ENDIF_			
1991   E38E~            		      ENDIF_			
1991   E38E             
1991   E387             
1991   E387 06          
1991   E388             
1991   E388             
1991   E388~            		      ENDIF_			
1991   E388~            		      ENDIF_			
1991   E388~            		      ENDIF_			
1991   E388~            		      ENDIF_			
1991   E388~            		      ENDIF_			
1991   E388             
1991   E38E             
1991   E38E~            		      ENDIF_			
1991   E38E~            		      ENDIF_			
1991   E38E             
1992   E38E                   		BITOFF_($64)			;Turn OFF: Bit#24
1992   E38E 11 64       
1993   E390             			MRTS_					;Macro RTS, Save MRA,MRB
1993   E390 02          
1994   E391             
1995   E391 BD F3 AB    minipf_thread	jsr	macro_start
1996   E394             			PRI_($15)				;Priority=#15
1996   E394 52 15       
1997   E396             minipf_loop		BITINV2_($57)			;Toggle: Lamp#17(mini_pf)
1997   E396 22 57       
1998   E398             			BITINV2_($5F)			;Toggle: Lamp#1F(mini_pf)
1998   E398 22 5F       
1999   E39A             			BITINV2_($65)			;Toggle: Lamp#25(mini_pf)
1999   E39A 22 65       
2000   E39C             			BITINV2_($6E)			;Toggle: Lamp#2E(mini_pf)
2000   E39C 22 6E       
2001   E39E             			BITINV2_($6F)			;Toggle: Lamp#2F(mini_pf)
2001   E39E 22 6F       
2002   E3A0             			SSND_($05)				;Sound #05
2002   E3A0             
2002   E3A0 E5          
2002   E3A1~            			SSND_($05)				;Sound #05
2002   E3A1~            			SSND_($05)				;Sound #05
2002   E3A1             
2003   E3A1             			SLEEP_(2)
2003   E3A1             
2003   E3A1 72          
2003   E3A2~            			SLEEP_(2)
2003   E3A2~            			SLEEP_(2)
2003   E3A2             
2004   E3A2             			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2004   E3A2             
2004   E3A2 5A F0 AA    
2004   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2004   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2004   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2004   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2004   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2004   E3A5~            			BEQR_($F0,gb_89)			;BEQR_TILT to gb_89
2004   E3A5             
2005   E3A5             			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2005   E3A5             
2005   E3A5 5B 53 EE    
2005   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2005   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2005   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2005   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2005   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2005   E3A8~            			BNER_($53,minipf_loop)		;BNER_BIT#13 to minipf_loop
2005   E3A8             
2006   E3A8             			BITINV2_($6B)			;Toggle: Lamp#2B(extra_kick)
2006   E3A8 22 6B       
2007   E3AA 8F          			JMPR_(minipf_loop)	
2007   E3AB EA          
2008   E3AC             					
2009   E3AC             sw_L_rollover
2010   E3AC             sw_O_rollover
2011   E3AC             sw_R_rollover
2012   E3AC             sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2012   E3AC             
2012   E3AC 5BFEF2F210C4
2012   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2012   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2012   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2012   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2012   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2012   E3B2~            sw_D_rollover	BNER_($FE,$F2,$F2,$10,gb_0B)	;BNER_(LAMP#10(1_target) P $F2,$10) to gb_0B
2012   E3B2             
2013   E3B2             			BEGIN_
2013   E3B2             
2014   E3B2             				SLEEP_(1)
2014   E3B2             
2014   E3B2 71          
2014   E3B3~            				SLEEP_(1)
2014   E3B3~            				SLEEP_(1)
2014   E3B3             
2015   E3B3             			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B3             
2015   E3B3 5B F7 17 FF 
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7             
2015   E3B7             
2015   E3B7             
2015   E3B7             
2015   E3B7             
2015   E3B7             
2015   E3B7             
2015   E3B6             
2015   E3B6 FB          
2015   E3B7             
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7             
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7~            			EQEND_($F7,$17)			;BNER_BIT#17
2015   E3B7             
2016   E3B7             			POINTS_(5,1000)			;5000 Points
2016   E3B7 42          
2016   E3B8             
2016   E3B8~            			POINTS_(5,1000)			;5000 Points
2016   E3B8~            			POINTS_(5,1000)			;5000 Points
2016   E3B8             
2016   E3B8~            			POINTS_(5,1000)			;5000 Points
2016   E3B8~            			POINTS_(5,1000)			;5000 Points
2016   E3B8             
2016   E3B8~            			POINTS_(5,1000)			;5000 Points
2016   E3B8~            			POINTS_(5,1000)			;5000 Points
2016   E3B8             
2016   E3B8             
2016   E3B8 2B          
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9~            			POINTS_(5,1000)			;5000 Points
2016   E3B9             
2016   E3B9             
2016   E3B9             
2016   E3B9             
2017   E3B9             			REMTHREADS_($F8,$10)		;Remove Multiple Threads Based on Priority
2017   E3B9 55 F8 10    
2018   E3BC             			PRI_($17)				;Priority=#17
2018   E3BC 52 17       
2019   E3BE             			EXE_
2019   E3BE             
2019   E3BE 44          
2020   E3BF 16          			      tab	
2021   E3C0 50          			      negb	
2022   E3C1 CB 10       			      addb	#$10
2023   E3C3             			EXEEND_
2023   E3C3             
2023   E3C3             
2023   E3C3             
2023   E3C3             
2023   E3C3~            			EXEEND_
2023   E3C3~            			EXEEND_
2023   E3C3             
2023   E3BE             
2023   E3BE 46          
2023   E3BF             
2023   E3C3             
2023   E3C3~            			EXEEND_
2023   E3C3~            			EXEEND_
2023   E3C3             
2024   E3C3             			JSR_(add_bonus_dly)				
2024   E3C3 56          
2024   E3C4 DC F5       
2025   E3C6             			IFNER_($E0)		      	;BEQR_RAM$00 
2025   E3C6             
2025   E3C6             
2025   E3C6             
2025   E3C6 5A E0 00    
2025   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2025   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2025   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2025   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2025   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2025   E3C9~            			IFNER_($E0)		      	;BEQR_RAM$00 
2025   E3C9             
2026   E3C9                   			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2026   E3C9 14 00       
2027   E3CB 90                			JSRR_(gatlin_sound)			
2027   E3CC 32          
2028   E3CD                   			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2028   E3CD             
2028   E3CD             
2028   E3CD             
2028   E3CD 5B F6 02 FF 
2028   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2028   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2028   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2028   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2028   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2028   E3D1~                  			IFEQR_($F6,$02)		      ;BNER_RangeON#02 
2028   E3D1             
2029   E3D1                         			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2029   E3D1             
2029   E3D1             
2029   E3D1             
2029   E3D1 5A 1B 00    
2029   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2029   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2029   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2029   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2029   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2029   E3D4~                        			IFNER_($1B)			      ;BEQR_LAMP#1B(special)
2029   E3D4             
2030   E3D4 9F                            			JSRR_(minipf_done)			
2030   E3D5 A1          
2031   E3D6                               			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2031   E3D6             
2031   E3D6 5B F0 5C    
2031   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2031   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2031   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2031   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2031   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2031   E3D9~                              			BNER_($F0,mb_start)		;BNER_TILT to mb_start
2031   E3D9             
2032   E3D9                               			BITON_($41)				;Turn ON: Bit#01
2032   E3D9 10 41       
2033   E3DB 5E A5 26                      			SWCLR_($A5),($26)			;Clear Sw#: $25(upper_eject) $26(lower_eject)
2034   E3DE                               			KILL_					;Remove This Thread
2034   E3DE 03          
2035   E3DF                               	      ENDIF_
2035   E3DF             
2035   E3DF             
2035   E3DF             
2035   E3DF             
2035   E3DF             
2035   E3DF~                              	      ENDIF_
2035   E3DF~                              	      ENDIF_
2035   E3DF             
2035   E3DF~                              	      ENDIF_
2035   E3DF~                              	      ENDIF_
2035   E3DF             
2035   E3D3             
2035   E3D3 0B          
2035   E3D4             
2035   E3D4             
2035   E3D4~                              	      ENDIF_
2035   E3D4~                              	      ENDIF_
2035   E3D4~                              	      ENDIF_
2035   E3D4~                              	      ENDIF_
2035   E3D4~                              	      ENDIF_
2035   E3D4             
2035   E3DF             
2035   E3DF~                              	      ENDIF_
2035   E3DF~                              	      ENDIF_
2035   E3DF             
2036   E3DF                         			SPEC_					;Award Special
2036   E3DF 05          
2037   E3E0                         			BE19_($02)				;Effect: Range #02
2037   E3E0 19 02       
2038   E3E2                         		ENDIF_
2038   E3E2             
2038   E3E2             
2038   E3E2             
2038   E3E2             
2038   E3E2             
2038   E3E2~                        		ENDIF_
2038   E3E2~                        		ENDIF_
2038   E3E2             
2038   E3E2~                        		ENDIF_
2038   E3E2~                        		ENDIF_
2038   E3E2             
2038   E3D0             
2038   E3D0 11          
2038   E3D1             
2038   E3D1             
2038   E3D1~                        		ENDIF_
2038   E3D1~                        		ENDIF_
2038   E3D1~                        		ENDIF_
2038   E3D1~                        		ENDIF_
2038   E3D1~                        		ENDIF_
2038   E3D1             
2038   E3E2             
2038   E3E2~                        		ENDIF_
2038   E3E2~                        		ENDIF_
2038   E3E2             
2039   E3E2             gb_0E 			BNEA_($53,gb_41)		      ;BNEA_BIT#13 to gb_41
2039   E3E2 59 53       
2039   E3E4 E3 54       
2040   E3E6                   			BITOFF_($53)			;Turn OFF: Bit#13
2040   E3E6 11 53       
2041   E3E8                   			SLEEP_(32)
2041   E3E8~                  			SLEEP_(32)
2041   E3E8~                  			SLEEP_(32)
2041   E3E8             
2041   E3E8 53 20       
2041   E3EA             
2042   E3EA 8F                			JMPR_(gj_22)
2042   E3EB 52          
2043   E3EC                   		ENDIF_
2043   E3EC             
2043   E3EC             
2043   E3EC             
2043   E3EC             
2043   E3EC             
2043   E3EC~                  		ENDIF_
2043   E3EC~                  		ENDIF_
2043   E3EC             
2043   E3EC~                  		ENDIF_
2043   E3EC~                  		ENDIF_
2043   E3EC             
2043   E3C8             
2043   E3C8 23          
2043   E3C9             
2043   E3C9             
2043   E3C9~                  		ENDIF_
2043   E3C9~                  		ENDIF_
2043   E3C9~                  		ENDIF_
2043   E3C9~                  		ENDIF_
2043   E3C9~                  		ENDIF_
2043   E3C9             
2043   E3EC             
2043   E3EC~                  		ENDIF_
2043   E3EC~                  		ENDIF_
2043   E3EC             
2044   E3EC                               ;mini playfield buzzer						
2045   E3EC                   		SSND_($02)				;Credit Sound
2045   E3EC             
2045   E3EC E2          
2045   E3ED~                  		SSND_($02)				;Credit Sound
2045   E3ED~                  		SSND_($02)				;Credit Sound
2045   E3ED             
2046   E3ED             			JSR_(buzz_on_inc)				
2046   E3ED 56          
2046   E3EE DC C1       
2047   E3F0             			SLEEP_(12)
2047   E3F0             
2047   E3F0 7C          
2047   E3F1~            			SLEEP_(12)
2047   E3F1~            			SLEEP_(12)
2047   E3F1             
2048   E3F1             			JSR_(buzz_off_dec)				
2048   E3F1 56          
2048   E3F2 DC CD       
2049   E3F4             			SLEEP_(20)
2049   E3F4~            			SLEEP_(20)
2049   E3F4~            			SLEEP_(20)
2049   E3F4             
2049   E3F4 53 14       
2049   E3F6             
2050   E3F6             			JSR_(buzz_on_inc)				
2050   E3F6 56          
2050   E3F7 DC C1       
2051   E3F9             			SLEEP_(12)
2051   E3F9             
2051   E3F9 7C          
2051   E3FA~            			SLEEP_(12)
2051   E3FA~            			SLEEP_(12)
2051   E3FA             
2052   E3FA             			JSR_(buzz_off_dec)				
2052   E3FA 56          
2052   E3FB DC CD       
2053   E3FD 8F          			JMPR_(gb_0E)	
2053   E3FE E3          
2054   E3FF             
2055   E3FF             ;*************************************************************************
2056   E3FF             ;* Gatlin Gun Sound Effect
2057   E3FF             ;*************************************************************************					
2058   E3FF             gatlin_sound	BITONP2_(rega)			;Turn ON Lamp/Bit @RAM:00
2058   E3FF 24 00       
2059   E401 B0 40       			ADDRAM_(rega,$40)			;RAM$00+=$40
2060   E403 C1 0C       			SETRAM_(regb,$0C)			;RAM$01=$0C
2061   E405             			BEGIN_
2061   E405             
2062   E405             				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2062   E405             
2062   E405             
2062   E405             
2062   E405 5AFDE064FE  
2062   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2062   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2062   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2062   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2062   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2062   E40A~            				IFNER_($FD,$E0,$64)	      ;BEQR_RAM$00>=#100 
2062   E40A             
2063   E40A             	      			SSND_($02)				;Sound #02
2063   E40A             
2063   E40A E2          
2063   E40B~            	      			SSND_($02)				;Sound #02
2063   E40B~            	      			SSND_($02)				;Sound #02
2063   E40B             
2064   E40B             	      		ELSE_			
2064   E40B             
2064   E40B             
2064   E40B             
2064   E40B             
2064   E409             
2064   E409             
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409             
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409~            	      		ELSE_			
2064   E409             
2064   E409             
2064   E409 03          
2064   E40B             
2064   E40B 80          
2064   E40C 00          
2064   E40D             
2064   E40D             
2064   E40D             
2064   E40D~            	      		ELSE_			
2064   E40D~            	      		ELSE_			
2064   E40D             
2064   E40D~            	      		ELSE_			
2064   E40D~            	      		ELSE_			
2064   E40D             
2065   E40D             					SSND_($0B)				;Sound #0B
2065   E40D             
2065   E40D EB          
2065   E40E~            					SSND_($0B)				;Sound #0B
2065   E40E~            					SSND_($0B)				;Sound #0B
2065   E40E             
2066   E40E             				ENDIF_
2066   E40E             
2066   E40E             
2066   E40E             
2066   E40E             
2066   E40E             
2066   E40E~            				ENDIF_
2066   E40E~            				ENDIF_
2066   E40E             
2066   E40E~            				ENDIF_
2066   E40E~            				ENDIF_
2066   E40E             
2066   E40C             
2066   E40C 01          
2066   E40D             
2066   E40D             
2066   E40D~            				ENDIF_
2066   E40D~            				ENDIF_
2066   E40D~            				ENDIF_
2066   E40D~            				ENDIF_
2066   E40D~            				ENDIF_
2066   E40D             
2066   E40E             
2066   E40E~            				ENDIF_
2066   E40E~            				ENDIF_
2066   E40E             
2067   E40E             				BITINVP2_(rega)			;Toggle Lamp/Bit @RAM:00
2067   E40E 26 00       
2068   E410             				SLEEP_(4)
2068   E410             
2068   E410 74          
2068   E411~            				SLEEP_(4)
2068   E411~            				SLEEP_(4)
2068   E411             
2069   E411 B1 FF       				ADDRAM_(regb,-1)			;RAM$01-=1
2070   E413             			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E413             
2070   E413 5BFCE100FE  
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418             
2070   E418             
2070   E418             
2070   E418             
2070   E418             
2070   E418             
2070   E418             
2070   E417             
2070   E417 ED          
2070   E418             
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418             
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418~            			EQEND_($FC,$E1,$00)	      ;BNER_RAM$01==#0
2070   E418             
2071   E418 B0 C0       			ADDRAM_(rega,$C0)			;RAM$00+=$C0
2072   E41A             			BITOFFP2_(rega)			;Turn OFF Lamp/Bit @RAM:00
2072   E41A 25 00       
2073   E41C             			MRTS_					;Macro RTS, Save MRA,MRB
2073   E41C 02          
2074   E41D             
2075   E41D             sw_upper_eject	BEQA_($FB,$F0,$F1,gb_1C)	;BEQR_(GAME || TILT) to gb_1C
2075   E41D 58 FB F0 F1 
2075   E421 E3 6A       
2076   E423             			BEQA_($FB,$FB,$FE,$F2,$F0,$10,$FA,$F3,$57,$5E,$4F,gb_0B)
2076   E423 58FBFBFEF2F0
2076   E429 10FAF3575E4F
2076   E42F E3 76       
2077   E431             			;BEQR_(BIT#0F || ((BIT#1E && (!BIT#17)) || (LAMP#10(1_target) P $F0,$10))) to gb_0B
2078   E431             			BNEA_($41,eject_common)		      ;BNEA_BIT#01 to eject_common
2078   E431 59 41       
2078   E433 E3 1A       
2079   E435             
2080   E435             ;*******************************************************
2081   E435             ;* Begin Multiball
2082   E435             ;*******************************************************			
2083   E435             mb_start		BITOFF_($41)			;Turn OFF: Bit#01
2083   E435 11 41       
2084   E437             			BE19_($02,$0C)			;Effect: Range #02 Range #0C
2084   E437 19 82 0C    
2085   E43A             			BITON_($DF,$9B,$D6,$5E)		;Turn ON: Bit#1F, Lamp#1B(special), Bit#16, Bit#1E
2085   E43A 10DF9BD65E  
2086   E43F             			EXE_
2086   E43F             
2086   E43F 44          
2087   E440 CE 01 2E    			      ldx	#aud_game1			;Times Multiball has been achieved
2088   E443 BD F7 7F    			      jsr	ptrx_plus_1
2089   E446             			EXEEND_
2089   E446             
2089   E446             
2089   E446             
2089   E446             
2089   E446~            			EXEEND_
2089   E446~            			EXEEND_
2089   E446             
2089   E43F             
2089   E43F 48          
2089   E440             
2089   E446             
2089   E446~            			EXEEND_
2089   E446~            			EXEEND_
2089   E446             
2090   E446             			EXE_
2090   E446             
2090   E446 44          
2091   E447 CE 01 95    			      ldx	#adj_gameadjust1		;Get Multiball Timer
2092   E44A BD EF 63    			      jsr	cmosinc_b
2093   E44D C1 15       			      cmpb	#$15
2094   E44F             			      ifcs
2094   E44F             
2094   E44F 24 FE       
2095   E451 C6 15       				      ldab	#$15
2096   E453             			      endif
2096   E453             
2096   E453             
2096   E453             
2096   E453             
2096   E453             
2096   E453~            			      endif
2096   E453~            			      endif
2096   E453             
2096   E453~            			      endif
2096   E453~            			      endif
2096   E453             
2096   E450             
2096   E450 02          
2096   E451             
2096   E451             
2096   E451~            			      endif
2096   E451~            			      endif
2096   E451~            			      endif
2096   E451             
2096   E453             
2096   E453~            			      endif
2096   E453~            			      endif
2096   E453             
2097   E453             			EXEEND_
2097   E453             
2097   E453             
2097   E453             
2097   E453             
2097   E453~            			EXEEND_
2097   E453~            			EXEEND_
2097   E453             
2097   E446             
2097   E446 4E          
2097   E447             
2097   E453             
2097   E453~            			EXEEND_
2097   E453~            			EXEEND_
2097   E453             
2098   E453             			RAMCPY_($0A,regb)
2098   E453             
2098   E453 51 A1       
2098   E455~            			RAMCPY_($0A,regb)
2098   E455~            			RAMCPY_($0A,regb)
2098   E455             
2099   E455             			BITOFF_($01)			;Turn OFF: Lamp#01(bip)
2099   E455 11 01       
2100   E457             			BITFL_($06)				;Flash: Lamp#06(multiball_timer)
2100   E457 13 06       
2101   E459             			IFEQR_($F8,$08)		      ;BNER_SW#08
2101   E459             
2101   E459             
2101   E459             
2101   E459 5B F8 08 FF 
2101   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2101   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2101   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2101   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2101   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2101   E45D~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2101   E45D             
2102   E45D                   			POINTS_(1,10)     	;10 Points
2102   E45D 42          
2102   E45E             
2102   E45E~                  			POINTS_(1,10)     	;10 Points
2102   E45E~                  			POINTS_(1,10)     	;10 Points
2102   E45E             
2102   E45E             
2102   E45E 09          
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F~                  			POINTS_(1,10)     	;10 Points
2102   E45F             
2102   E45F             
2103   E45F                   			JSR_(mb_fancy)			;Do the fancy fancy animation	
2103   E45F 56          
2103   E460 D9 F8       
2104   E462                   		ENDIF_
2104   E462             
2104   E462             
2104   E462             
2104   E462             
2104   E462             
2104   E462~                  		ENDIF_
2104   E462~                  		ENDIF_
2104   E462             
2104   E462~                  		ENDIF_
2104   E462~                  		ENDIF_
2104   E462             
2104   E45C             
2104   E45C 05          
2104   E45D             
2104   E45D             
2104   E45D~                  		ENDIF_
2104   E45D~                  		ENDIF_
2104   E45D~                  		ENDIF_
2104   E45D~                  		ENDIF_
2104   E45D~                  		ENDIF_
2104   E45D             
2104   E462             
2104   E462~                  		ENDIF_
2104   E462~                  		ENDIF_
2104   E462             
2105   E462             			SOL_(dtleft_on,dtright_on)	;Turn ON Sol#4:dt_left Sol#5:dt_right		
2105   E462 32 63 64    
2106   E465             			EXE_
2106   E465             
2106   E465 44          
2107   E466 96 5E       			      ldaa	dmask_p3
2108   E468 8A 80       			      oraa	#$80
2109   E46A 97 5E       			      staa	dmask_p3
2110   E46C 96 5F       			      ldaa	dmask_p4
2111   E46E 8A 80       			      oraa	#$80
2112   E470 97 5F       			      staa	dmask_p4
2113   E472             			EXEEND_
2113   E472             
2113   E472             
2113   E472             
2113   E472             
2113   E472~            			EXEEND_
2113   E472~            			EXEEND_
2113   E472             
2113   E465             
2113   E465 4E          
2113   E466             
2113   E472             
2113   E472~            			EXEEND_
2113   E472~            			EXEEND_
2113   E472             
2114   E472             ;***********************************************************
2115   E472             ;* NOTE: Falls through from above!
2116   E472             ;*
2117   E472             ;***********************************************************
2118   E472             mb_restart		PRI_($B1)				;Priority=#B1
2118   E472 52 B1       
2119   E474             			BITON_($5E)				;Turn ON: Bit#1E
2119   E474 10 5E       
2120   E476             			BITOFF_($2C)			;Turn OFF: Lamp#2C(lock)
2120   E476 11 2C       
2121   E478             			REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2121   E478 55 F8 60    
2122   E47B             			REMTHREADS_($F8,$B0)		;Remove Multiple Threads Based on Priority
2122   E47B 55 F8 B0    
2123   E47E             			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2123   E47E             
2123   E47E 5A F8 08 09 
2123   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2123   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2123   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2123   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2123   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2123   E482~            			BEQR_($F8,$08,mb_pause)		;BEQR_SW#08 to mb_pause
2123   E482             
2124   E482             			EXE_
2124   E482             
2124   E482 44          
2125   E483             			      NEWTHREAD(pf_entry_cpu)
2125   E483 CE D9 25    
2125   E486 BD EA C4    
2126   E489             			EXEEND_
2126   E489             
2126   E489             
2126   E489             
2126   E489             
2126   E489~            			EXEEND_
2126   E489~            			EXEEND_
2126   E489             
2126   E482             
2126   E482 48          
2126   E483             
2126   E489             
2126   E489~            			EXEEND_
2126   E489~            			EXEEND_
2126   E489             
2127   E489 80          			JMPR_(mb_nopause)
2127   E48A 2A          
2128   E48B             ;******************************************************
2129   E48B             ;* Ball Drained, pause multiball timer for a bit...
2130   E48B             ;******************************************************						
2131   E48B 90          mb_pause		JSRR_(gj_1D)			
2131   E48C DF          
2132   E48D             			SOL_(trough_on)   		;Turn ON Sol#2:trough
2132   E48D 31 41       
2133   E48F             			EXE_
2133   E48F             
2133   E48F 44          
2134   E490 96 0A       			      ldaa	game_ram_a
2135   E492 97 59       			      staa	mbip_b1
2136   E494             			EXEEND_
2136   E494             
2136   E494             
2136   E494             
2136   E494             
2136   E494~            			EXEEND_
2136   E494~            			EXEEND_
2136   E494             
2136   E48F             
2136   E48F 46          
2136   E490             
2136   E494             
2136   E494~            			EXEEND_
2136   E494~            			EXEEND_
2136   E494             
2137   E494             			SLEEP_(80)
2137   E494~            			SLEEP_(80)
2137   E494~            			SLEEP_(80)
2137   E494             
2137   E494 53 50       
2137   E496             
2138   E496 5E 88 09    			SWCLR_($08,$09)			;Clear Sw#: $08(right_trough) $09(left_trough)
2139   E499 C1 16       			SETRAM_(regb,$16)			;RAM$01=$16
2140   E49B             mbp_loop		BEGIN_
2140   E49B             
2141   E49B             				EXE_
2141   E49B             
2141   E49B 44          
2142   E49C 86 FF       				      ldaa	#$FF
2143   E49E 97 59       				      staa	mbip_b1
2144   E4A0             				EXEEND_
2144   E4A0             
2144   E4A0             
2144   E4A0             
2144   E4A0             
2144   E4A0~            				EXEEND_
2144   E4A0~            				EXEEND_
2144   E4A0             
2144   E49B             
2144   E49B 46          
2144   E49C             
2144   E4A0             
2144   E4A0~            				EXEEND_
2144   E4A0~            				EXEEND_
2144   E4A0             
2145   E4A0 61          				SLEEPI_(regb)			;Delay RAM$01
2146   E4A1             				EXE_
2146   E4A1             
2146   E4A1 44          
2147   E4A2 96 0A       				      ldaa	game_ram_a
2148   E4A4 97 59       				      staa	mbip_b1
2149   E4A6             				EXEEND_
2149   E4A6             
2149   E4A6             
2149   E4A6             
2149   E4A6             
2149   E4A6~            				EXEEND_
2149   E4A6~            				EXEEND_
2149   E4A6             
2149   E4A1             
2149   E4A1 46          
2149   E4A2             
2149   E4A6             
2149   E4A6~            				EXEEND_
2149   E4A6~            				EXEEND_
2149   E4A6             
2150   E4A6             				SSND_($00)				;Sound #00
2150   E4A6             
2150   E4A6 E0          
2150   E4A7~            				SSND_($00)				;Sound #00
2150   E4A7~            				SSND_($00)				;Sound #00
2150   E4A7             
2151   E4A7 61          				SLEEPI_(regb)			;Delay RAM$01
2152   E4A8             				EXE_
2152   E4A8             
2152   E4A8 44          
2153   E4A9 5A          				      decb	
2154   E4AA 96 D6       				      ldaa	flag_timer_bip
2155   E4AC             				EXEEND_
2155   E4AC             
2155   E4AC             
2155   E4AC             
2155   E4AC             
2155   E4AC~            				EXEEND_
2155   E4AC~            				EXEEND_
2155   E4AC             
2155   E4A8             
2155   E4A8 45          
2155   E4A9             
2155   E4AC             
2155   E4AC~            				EXEEND_
2155   E4AC~            				EXEEND_
2155   E4AC             
2156   E4AC             			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4AC             
2156   E4AC 5BFBFDE000FC
2156   E4B2 E100FA
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5             
2156   E4B5             
2156   E4B5             
2156   E4B5             
2156   E4B5             
2156   E4B5             
2156   E4B5             
2156   E4B4             
2156   E4B4 E6          
2156   E4B5             
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5             
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5~            			EQEND_($FB,$FD,$E0,$00,$FC,$E1,$00) ;BNER_(RAM$01==#0 || RAM$00>=#0)
2156   E4B5             
2157   E4B5             mb_nopause		BEGIN_
2157   E4B5             
2158   E4B5 C1 05       				SETRAM_(regb,$05)			;RAM$01=$05
2159   E4B7             				SSND_($18)				;Sound #18
2159   E4B7             
2159   E4B7 F8          
2159   E4B8~            				SSND_($18)				;Sound #18
2159   E4B8~            				SSND_($18)				;Sound #18
2159   E4B8             
2160   E4B8             mb_loop			PRI_($B1)				;Priority=#B1
2160   E4B8 52 B1       
2161   E4BA B1 FF       				ADDRAM_(regb,-1)			;RAM$01-=1
2162   E4BC             			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4BC             
2162   E4BC 5AFCE100FE  
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1             
2162   E4C1             
2162   E4C1             
2162   E4C1             
2162   E4C1             
2162   E4C1             
2162   E4C1             
2162   E4C0             
2162   E4C0 F4          
2162   E4C1             
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1             
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1~            			NEEND_($FC,$E1,$00)		;BEQR_RAM$01==#0 
2162   E4C1             
2163   E4C1             			SSND_($00)				;Sound #00
2163   E4C1             
2163   E4C1 E0          
2163   E4C2~            			SSND_($00)				;Sound #00
2163   E4C2~            			SSND_($00)				;Sound #00
2163   E4C2             
2164   E4C2             			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2164   E4C2             
2164   E4C2             
2164   E4C2             
2164   E4C2 5BFCE102FE  
2164   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2164   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2164   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2164   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2164   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2164   E4C7~            			IFEQR_($FC,$E1,$02)		;BNER_RAM$01==#2
2164   E4C7             
2165   E4C7             				SSND_($19)				;Sound #19
2165   E4C7             
2165   E4C7 F9          
2165   E4C8~            				SSND_($19)				;Sound #19
2165   E4C8~            				SSND_($19)				;Sound #19
2165   E4C8             
2166   E4C8             			ENDIF_
2166   E4C8             
2166   E4C8             
2166   E4C8             
2166   E4C8             
2166   E4C8             
2166   E4C8~            			ENDIF_
2166   E4C8~            			ENDIF_
2166   E4C8             
2166   E4C8~            			ENDIF_
2166   E4C8~            			ENDIF_
2166   E4C8             
2166   E4C6             
2166   E4C6 01          
2166   E4C7             
2166   E4C7             
2166   E4C7~            			ENDIF_
2166   E4C7~            			ENDIF_
2166   E4C7~            			ENDIF_
2166   E4C7~            			ENDIF_
2166   E4C7~            			ENDIF_
2166   E4C7             
2166   E4C8             
2166   E4C8~            			ENDIF_
2166   E4C8~            			ENDIF_
2166   E4C8             
2167   E4C8             	            RAMCPY_(rega,$0A)
2167   E4C8             
2167   E4C8 51 0A       
2167   E4CA~            	            RAMCPY_(rega,$0A)
2167   E4CA~            	            RAMCPY_(rega,$0A)
2167   E4CA             
2168   E4CA             			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2168   E4CA             
2168   E4CA             
2168   E4CA             
2168   E4CA 5AFEF2F010FD
2168   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2168   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2168   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2168   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2168   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2168   E4D0~            			IFNER_($FE,$F2,$F0,$10)	      ;BEQR_(LAMP#10(1_target) P $F0,$10) 
2168   E4D0             
2169   E4D0                   			EXE_
2169   E4D0             
2169   E4D0 44          
2170   E4D1 8B 99             			      adda	#$99
2171   E4D3 19                			      daa	
2172   E4D4 97 0A             			      staa	game_ram_a			;De-increment Mutiball Timer
2173   E4D6                   			EXEEND_
2173   E4D6             
2173   E4D6             
2173   E4D6             
2173   E4D6             
2173   E4D6~                  			EXEEND_
2173   E4D6~                  			EXEEND_
2173   E4D6             
2173   E4D0             
2173   E4D0 47          
2173   E4D1             
2173   E4D6             
2173   E4D6~                  			EXEEND_
2173   E4D6~                  			EXEEND_
2173   E4D6             
2174   E4D6                   		ENDIF_
2174   E4D6             
2174   E4D6             
2174   E4D6             
2174   E4D6             
2174   E4D6             
2174   E4D6~                  		ENDIF_
2174   E4D6~                  		ENDIF_
2174   E4D6             
2174   E4D6~                  		ENDIF_
2174   E4D6~                  		ENDIF_
2174   E4D6             
2174   E4CF             
2174   E4CF 06          
2174   E4D0             
2174   E4D0             
2174   E4D0~                  		ENDIF_
2174   E4D0~                  		ENDIF_
2174   E4D0~                  		ENDIF_
2174   E4D0~                  		ENDIF_
2174   E4D0~                  		ENDIF_
2174   E4D0             
2174   E4D6             
2174   E4D6~                  		ENDIF_
2174   E4D6~                  		ENDIF_
2174   E4D6             
2175   E4D6             			EXE_
2175   E4D6             
2175   E4D6 44          
2176   E4D7 97 59       			      staa	mbip_b1
2177   E4D9             			EXEEND_
2177   E4D9             
2177   E4D9             
2177   E4D9             
2177   E4D9             
2177   E4D9~            			EXEEND_
2177   E4D9~            			EXEEND_
2177   E4D9             
2177   E4D6             
2177   E4D6 44          
2177   E4D7             
2177   E4D9             
2177   E4D9~            			EXEEND_
2177   E4D9~            			EXEEND_
2177   E4D9             
2178   E4D9             			;are we out of time yet?
2179   E4D9             			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2179   E4D9             
2179   E4D9             
2179   E4D9             
2179   E4D9 5AFCEA00FE  
2179   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2179   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2179   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2179   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2179   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2179   E4DE~            			IFNER_($FC,$EA,$00)	      ;BEQR_RAM$0A==#0
2179   E4DE             
2180   E4DE             			      ;no, keep going
2181   E4DE                   			SLEEP_(32)
2181   E4DE~                  			SLEEP_(32)
2181   E4DE~                  			SLEEP_(32)
2181   E4DE             
2181   E4DE 53 20       
2181   E4E0             
2182   E4E0                   			EXE_
2182   E4E0             
2182   E4E0 44          
2183   E4E1 86 FF             			      ldaa	#$FF
2184   E4E3 97 59             			      staa	mbip_b1
2185   E4E5                   			EXEEND_
2185   E4E5             
2185   E4E5             
2185   E4E5             
2185   E4E5             
2185   E4E5~                  			EXEEND_
2185   E4E5~                  			EXEEND_
2185   E4E5             
2185   E4E0             
2185   E4E0 46          
2185   E4E1             
2185   E4E5             
2185   E4E5~                  			EXEEND_
2185   E4E5~                  			EXEEND_
2185   E4E5             
2186   E4E5                   			SLEEP_(32)
2186   E4E5~                  			SLEEP_(32)
2186   E4E5~                  			SLEEP_(32)
2186   E4E5             
2186   E4E5 53 20       
2186   E4E7             
2187   E4E7 8F                			JMPR_(mb_loop)
2187   E4E8 CF          
2188   E4E9             			ENDIF_	
2188   E4E9             
2188   E4E9             
2188   E4E9             
2188   E4E9             
2188   E4E9             
2188   E4E9~            			ENDIF_	
2188   E4E9~            			ENDIF_	
2188   E4E9             
2188   E4E9~            			ENDIF_	
2188   E4E9~            			ENDIF_	
2188   E4E9             
2188   E4DD             
2188   E4DD 0B          
2188   E4DE             
2188   E4DE             
2188   E4DE~            			ENDIF_	
2188   E4DE~            			ENDIF_	
2188   E4DE~            			ENDIF_	
2188   E4DE~            			ENDIF_	
2188   E4DE~            			ENDIF_	
2188   E4DE             
2188   E4E9             
2188   E4E9~            			ENDIF_	
2188   E4E9~            			ENDIF_	
2188   E4E9             
2189   E4E9             			;here if multiball timer has reached 0	
2190   E4E9             			IFEQR_($5E)			      ;BNER_BIT#1E
2190   E4E9             
2190   E4E9             
2190   E4E9             
2190   E4E9 5B 5E 00    
2190   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2190   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2190   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2190   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2190   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2190   E4EC~            			IFEQR_($5E)			      ;BNER_BIT#1E
2190   E4EC             
2191   E4EC             			      BITON_($50)				;Turn ON: Bit#10
2191   E4EC 10 50       
2192   E4EE             			ENDIF_
2192   E4EE             
2192   E4EE             
2192   E4EE             
2192   E4EE             
2192   E4EE             
2192   E4EE~            			ENDIF_
2192   E4EE~            			ENDIF_
2192   E4EE             
2192   E4EE~            			ENDIF_
2192   E4EE~            			ENDIF_
2192   E4EE             
2192   E4EB             
2192   E4EB 02          
2192   E4EC             
2192   E4EC             
2192   E4EC~            			ENDIF_
2192   E4EC~            			ENDIF_
2192   E4EC~            			ENDIF_
2192   E4EC~            			ENDIF_
2192   E4EC~            			ENDIF_
2192   E4EC             
2192   E4EE             
2192   E4EE~            			ENDIF_
2192   E4EE~            			ENDIF_
2192   E4EE             
2193   E4EE 90          			JSRR_(mb_end_disp)			
2193   E4EF 13          
2194   E4F0 90          			JSRR_(reset_dt)			
2194   E4F1 91          
2195   E4F2             			IFEQR_($F8,$08)		      ;BNER_SW#08
2195   E4F2             
2195   E4F2             
2195   E4F2             
2195   E4F2 5B F8 08 FF 
2195   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2195   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2195   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2195   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2195   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2195   E4F6~            			IFEQR_($F8,$08)		      ;BNER_SW#08
2195   E4F6             
2196   E4F6 9D          			      JSRR_(add_drainshield)
2196   E4F7 2B          
2197   E4F8             			ENDIF_			
2197   E4F8             
2197   E4F8             
2197   E4F8             
2197   E4F8             
2197   E4F8             
2197   E4F8~            			ENDIF_			
2197   E4F8~            			ENDIF_			
2197   E4F8             
2197   E4F8~            			ENDIF_			
2197   E4F8~            			ENDIF_			
2197   E4F8             
2197   E4F5             
2197   E4F5 02          
2197   E4F6             
2197   E4F6             
2197   E4F6~            			ENDIF_			
2197   E4F6~            			ENDIF_			
2197   E4F6~            			ENDIF_			
2197   E4F6~            			ENDIF_			
2197   E4F6~            			ENDIF_			
2197   E4F6             
2197   E4F8             
2197   E4F8~            			ENDIF_			
2197   E4F8~            			ENDIF_			
2197   E4F8             
2198   E4F8             			PRI_($08)				;Priority=#08
2198   E4F8 52 08       
2199   E4FA             			JSR_(buzz_on_inc)				
2199   E4FA 56          
2199   E4FB DC C1       
2200   E4FD             			SLEEP_(128)
2200   E4FD~            			SLEEP_(128)
2200   E4FD~            			SLEEP_(128)
2200   E4FD             
2200   E4FD 53 80       
2200   E4FF             
2201   E4FF             			JSR_(buzz_off_dec)				
2201   E4FF 56          
2201   E500 DC CD       
2202   E502             			KILL_					;Remove This Thread
2202   E502 03          
2203   E503             
2204   E503             ;*****************************************************************
2205   E503             ;* This subroutine takes care of setting the multiball mode lamps
2206   E503             ;* back to normal and putting the player score masks back as well.
2207   E503             ;*****************************************************************
2208   E503             mb_end_disp		BITOFF_($DF,$DE,$9B,$86,$2C)	;Turn OFF: Bit#1F, Bit#1E, Lamp#1B(special), Lamp#06(multiball_timer), Lamp#2C(lock)
2208   E503 11DFDE9B862C
2209   E509             			BITON_($01)				;Turn ON: Lamp#01(bip)
2209   E509 10 01       
2210   E50B             			REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2210   E50B 55 F8 60    
2211   E50E             			BE19_($02)				;Effect: Range #02
2211   E50E 19 02       
2212   E510             			EXE_
2212   E510             
2212   E510 44          
2213   E511 96 5E       			      ldaa	dmask_p3
2214   E513 84 7F       			      anda	#$7F
2215   E515 97 5E       			      staa	dmask_p3
2216   E517 96 5F       			      ldaa	dmask_p4
2217   E519 84 7F       			      anda	#$7F
2218   E51B 97 5F       			      staa	dmask_p4
2219   E51D             			EXEEND_
2219   E51D             
2219   E51D             
2219   E51D             
2219   E51D             
2219   E51D~            			EXEEND_
2219   E51D~            			EXEEND_
2219   E51D             
2219   E510             
2219   E510 4E          
2219   E511             
2219   E51D             
2219   E51D~            			EXEEND_
2219   E51D~            			EXEEND_
2219   E51D             
2220   E51D             			MRTS_					;Macro RTS, Save MRA,MRB
2220   E51D 02          
2221   E51E             
2222   E51E             sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2222   E51E             
2222   E51E             
2222   E51E             
2222   E51E 5BFA5EF357FD
2222   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2222   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2222   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2222   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2222   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2222   E524~            sw_right_trough	IFEQR_($FA,$5E,$F3,$57)	      ;BNER_((!BIT#17) && BIT#1E)
2222   E524             
2223   E524                   			SOL_(trough_on)              	;Turn ON Sol#2:trough
2223   E524 31 41       
2224   E526                   			SLEEP_(96)
2224   E526~                  			SLEEP_(96)
2224   E526~                  			SLEEP_(96)
2224   E526             
2224   E526 53 60       
2224   E528             
2225   E528 5E 08             			SWCLR_($08)				;Clear Sw#: $08(right_trough)
2226   E52A                   			KILL_					;Remove This Thread
2226   E52A 03          
2227   E52B                               ENDIF_
2227   E52B             
2227   E52B             
2227   E52B             
2227   E52B             
2227   E52B             
2227   E52B~                              ENDIF_
2227   E52B~                              ENDIF_
2227   E52B             
2227   E52B~                              ENDIF_
2227   E52B~                              ENDIF_
2227   E52B             
2227   E523             
2227   E523 07          
2227   E524             
2227   E524             
2227   E524~                              ENDIF_
2227   E524~                              ENDIF_
2227   E524~                              ENDIF_
2227   E524~                              ENDIF_
2227   E524~                              ENDIF_
2227   E524             
2227   E52B             
2227   E52B~                              ENDIF_
2227   E52B~                              ENDIF_
2227   E52B             
2228   E52B             			IFEQR_($5F)			      ;BNER_BIT#1F 
2228   E52B             
2228   E52B             
2228   E52B             
2228   E52B 5B 5F 00    
2228   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2228   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2228   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2228   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2228   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2228   E52E~            			IFEQR_($5F)			      ;BNER_BIT#1F 
2228   E52E             
2229   E52E             			      REMTHREADS_($F8,$60)		;Remove Multiple Threads Based on Priority
2229   E52E 55 F8 60    
2230   E531 5C          			      JMPD_(lock_enable)			
2230   E532 DD 88       
2231   E534                               ENDIF_
2231   E534             
2231   E534             
2231   E534             
2231   E534             
2231   E534             
2231   E534~                              ENDIF_
2231   E534~                              ENDIF_
2231   E534             
2231   E534~                              ENDIF_
2231   E534~                              ENDIF_
2231   E534             
2231   E52D             
2231   E52D 06          
2231   E52E             
2231   E52E             
2231   E52E~                              ENDIF_
2231   E52E~                              ENDIF_
2231   E52E~                              ENDIF_
2231   E52E~                              ENDIF_
2231   E52E~                              ENDIF_
2231   E52E             
2231   E534             
2231   E534~                              ENDIF_
2231   E534~                              ENDIF_
2231   E534             
2232   E534 9C          			JSRR_(add_drainshield)			
2232   E535 ED          
2233   E536             			KILL_					;Remove This Thread
2233   E536 03          
2234   E537             
2235   E537             sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2235   E537             
2235   E537             
2235   E537             
2235   E537 5BFAF340FAF8
2235   E53D 08F34FF9
2235   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2235   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2235   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2235   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2235   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2235   E541~            sw_left_trough	IFEQR_($FA,$F3,$40,$FA,$F8,$08,$F3,$4F)
2235   E541             
2236   E541                                     ;BNER_(((!BIT#0F) && SW#08) && (!BIT#00))
2237   E541                   			IFEQR_($5F)			      ;BNER_BIT#1F 
2237   E541             
2237   E541             
2237   E541             
2237   E541 5B 5F 00    
2237   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2237   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2237   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2237   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2237   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2237   E544~                  			IFEQR_($5F)			      ;BNER_BIT#1F 
2237   E544             
2238   E544                   			      BITON_($57)				;Turn ON: Bit#17
2238   E544 10 57       
2239   E546 8F                			      JMPR_(mb_restart)
2239   E547 2A          
2240   E548                   			ENDIF_			
2240   E548             
2240   E548             
2240   E548             
2240   E548             
2240   E548             
2240   E548~                  			ENDIF_			
2240   E548~                  			ENDIF_			
2240   E548             
2240   E548~                  			ENDIF_			
2240   E548~                  			ENDIF_			
2240   E548             
2240   E543             
2240   E543 04          
2240   E544             
2240   E544             
2240   E544~                  			ENDIF_			
2240   E544~                  			ENDIF_			
2240   E544~                  			ENDIF_			
2240   E544~                  			ENDIF_			
2240   E544~                  			ENDIF_			
2240   E544             
2240   E548             
2240   E548~                  			ENDIF_			
2240   E548~                  			ENDIF_			
2240   E548             
2241   E548                   			IFEQR_($66)				;BNER_BIT#26
2241   E548             
2241   E548             
2241   E548             
2241   E548 5B 66 00    
2241   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2241   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2241   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2241   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2241   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2241   E54B~                  			IFEQR_($66)				;BNER_BIT#26
2241   E54B             
2242   E54B 90          	      			JSRR_(reset_dt)			
2242   E54C 36          
2243   E54D             	      			SOL_(flippers_off)            ;Turn OFF Sol#24:flippers
2243   E54D 31 18       
2244   E54F             	      			EXE_
2244   E54F             
2244   E54F 44          
2245   E550 7F 00 C8    	      			      clr	flag_tilt
2246   E553             	      			EXEEND_
2246   E553             
2246   E553             
2246   E553             
2246   E553             
2246   E553~            	      			EXEEND_
2246   E553~            	      			EXEEND_
2246   E553             
2246   E54F             
2246   E54F 45          
2246   E550             
2246   E553             
2246   E553~            	      			EXEEND_
2246   E553~            	      			EXEEND_
2246   E553             
2247   E553             	      			BITON_($67)				;Turn ON: Bit#27
2247   E553 10 67       
2248   E555             	      			JSR_(gi_on_dec)			
2248   E555 56          
2248   E556 DA 8E       
2249   E558 90          gb_5D	 				JSRR_(gj_1D)			
2249   E559 12          
2250   E55A 5F          	      			JMP_(trough_kill)
2250   E55B DC DC       
2251   E55D             	      		ENDIF_				
2251   E55D             
2251   E55D             
2251   E55D             
2251   E55D             
2251   E55D             
2251   E55D~            	      		ENDIF_				
2251   E55D~            	      		ENDIF_				
2251   E55D             
2251   E55D~            	      		ENDIF_				
2251   E55D~            	      		ENDIF_				
2251   E55D             
2251   E54A             
2251   E54A 12          
2251   E54B             
2251   E54B             
2251   E54B~            	      		ENDIF_				
2251   E54B~            	      		ENDIF_				
2251   E54B~            	      		ENDIF_				
2251   E54B~            	      		ENDIF_				
2251   E54B~            	      		ENDIF_				
2251   E54B             
2251   E55D             
2251   E55D~            	      		ENDIF_				
2251   E55D~            	      		ENDIF_				
2251   E55D             
2252   E55D             	 		      IFEQR_($F0)			      ;BNER_TILT
2252   E55D             
2252   E55D             
2252   E55D             
2252   E55D 5B F0 00    
2252   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2252   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2252   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2252   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2252   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2252   E560~            	 		      IFEQR_($F0)			      ;BNER_TILT
2252   E560             
2253   E560                         			EXE_
2253   E560             
2253   E560 44          
2254   E561 7A 00 CA                			      dec	flag_bonusball
2255   E564                         			EXEEND_
2255   E564             
2255   E564             
2255   E564             
2255   E564             
2255   E564~                        			EXEEND_
2255   E564~                        			EXEEND_
2255   E564             
2255   E560             
2255   E560 45          
2255   E561             
2255   E564             
2255   E564~                        			EXEEND_
2255   E564~                        			EXEEND_
2255   E564             
2256   E564                         	      ENDIF_
2256   E564             
2256   E564             
2256   E564             
2256   E564             
2256   E564             
2256   E564~                        	      ENDIF_
2256   E564~                        	      ENDIF_
2256   E564             
2256   E564~                        	      ENDIF_
2256   E564~                        	      ENDIF_
2256   E564             
2256   E55F             
2256   E55F 04          
2256   E560             
2256   E560             
2256   E560~                        	      ENDIF_
2256   E560~                        	      ENDIF_
2256   E560~                        	      ENDIF_
2256   E560~                        	      ENDIF_
2256   E560~                        	      ENDIF_
2256   E560             
2256   E564             
2256   E564~                        	      ENDIF_
2256   E564~                        	      ENDIF_
2256   E564             
2257   E564                   			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2257   E564             
2257   E564 5B 55 F1    
2257   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2257   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2257   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2257   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2257   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2257   E567~                  			BNER_($55,gb_5D)			;BNER_BIT#15 to gb_5D
2257   E567             
2258   E567                   			BITON_($4F)				;Turn ON: Bit#0F
2258   E567 10 4F       
2259   E569 5C                			JMPD_(outhole_main)		
2259   E56A F9 AB       
2260   E56C                   
2261   E56C             gj_1D 			JSRD_(cpdisp_show)			
2261   E56C 57          
2261   E56D DE 0B       
2262   E56F                   			REMTHREADS_($F8,$D0)		;Remove Multiple Threads Based on Priority
2262   E56F 55 F8 D0    
2263   E572                   			BITOFF_($55)			;Turn OFF: Bit#15
2263   E572 11 55       
2264   E574                   			EXE_
2264   E574             
2264   E574 44          
2265   E575 96 D6             			      ldaa	flag_timer_bip
2266   E577                   			      ifne
2266   E577             
2266   E577 27 FE       
2267   E579                   				      NEWTHREAD(player_ready)
2267   E579 CE F8 DD    
2267   E57C BD EA C4    
2268   E57F 7F 00 D6          				      clr	flag_timer_bip
2269   E582                   			      endif
2269   E582             
2269   E582             
2269   E582             
2269   E582             
2269   E582             
2269   E582~                  			      endif
2269   E582~                  			      endif
2269   E582             
2269   E582~                  			      endif
2269   E582~                  			      endif
2269   E582             
2269   E578             
2269   E578 09          
2269   E579             
2269   E579             
2269   E579~                  			      endif
2269   E579~                  			      endif
2269   E579~                  			      endif
2269   E579             
2269   E582             
2269   E582~                  			      endif
2269   E582~                  			      endif
2269   E582             
2270   E582                   			EXEEND_
2270   E582             
2270   E582             
2270   E582             
2270   E582             
2270   E582~                  			EXEEND_
2270   E582~                  			EXEEND_
2270   E582             
2270   E574             
2270   E574 4F          
2270   E575             
2270   E582             
2270   E582~                  			EXEEND_
2270   E582~                  			EXEEND_
2270   E582             
2271   E582                   			MRTS_					;Macro RTS, Save MRA,MRB
2271   E582 02          
2272   E583                   
2273   E583             reset_dt 			REMTHREADS_($F8,$70)		;Remove Multiple Threads Based on Priority
2273   E583 55 F8 70    
2274   E586                   			REMTHREADS_($F8,$80)		;Remove Multiple Threads Based on Priority
2274   E586 55 F8 80    
2275   E589                   			SOL_(dtleft_on,dtright_on)			
2275   E589 32 63 64    
2276   E58C                   			                              ;Turn ON Sol#3:dt_l Sol#4:dt_r
2277   E58C                   			BITOFF_($D8,$DC,$D9,$5D)	;Turn OFF: Bit#18, Bit#1C, Bit#19, Bit#1D
2277   E58C 11D8DCD95D  
2278   E591                   			MRTS_					;Macro RTS, Save MRA,MRB
2278   E591 02          
2279   E592                               ENDIF_
2279   E592             
2279   E592             
2279   E592             
2279   E592             
2279   E592             
2279   E592~                              ENDIF_
2279   E592~                              ENDIF_
2279   E592             
2279   E592~                              ENDIF_
2279   E592~                              ENDIF_
2279   E592             
2279   E540             
2279   E540 51          
2279   E541             
2279   E541             
2279   E541~                              ENDIF_
2279   E541~                              ENDIF_
2279   E541~                              ENDIF_
2279   E541~                              ENDIF_
2279   E541~                              ENDIF_
2279   E541             
2279   E592             
2279   E592~                              ENDIF_
2279   E592~                              ENDIF_
2279   E592             
2280   E592 5E 09       			SWCLR_($09)				;Clear Sw#: $09(left_trough)
2281   E594             			KILL_					;Remove This Thread
2281   E594 03          
2282   E595             
2283   E595             ;**********************************************************************
2284   E595             ;* Get LORD Status
2285   E595             ;**********************************************************************
2286   E595 8D 08       get_lord_num	bsr	get_lord
2287   E597 48          			asla	
2288   E598 48          			asla	
2289   E599 48          			asla	
2290   E59A 48          			asla	
2291   E59B 48          			asla	
2292   E59C 48          			asla	
2293   E59D 4A          			deca	
2294   E59E 39          			rts
2295   E59F             				
2296   E59F D6 11       get_lord		ldab	$11
2297   E5A1 C4 F0       			andb	#$F0
2298   E5A3 8D 04       			bsr	bits_to_int
2299   E5A5 40          			nega	
2300   E5A6 8B 04       			adda	#$04
2301   E5A8 39          			rts	
2302   E5A9             
2303   E5A9             ;********************************************************
2304   E5A9             ;* Will count the number of bits set in B and return the
2305   E5A9             ;* number in A.
2306   E5A9             ;********************************************************			
2307   E5A9 37          bits_to_int		pshb	
2308   E5AA 4F          			clra	
2309   E5AB 5D          bits_loop		tstb	
2310   E5AC             			ifne
2310   E5AC             
2310   E5AC 27 FE       
2311   E5AE             				begin
2311   E5AE             
2312   E5AE 58          					aslb	
2313   E5AF             				csend
2313   E5AF             
2313   E5AF             
2313   E5AF~            				csend
2313   E5AF~            				csend
2313   E5AF~            				csend
2313   E5AF             
2313   E5AF 24 FD       
2313   E5B1             
2313   E5B1~            				csend
2313   E5B1~            				csend
2313   E5B1             
2314   E5B1 4C          				inca	
2315   E5B2 20 F7       				bra	bits_loop
2316   E5B4             			endif
2316   E5B4             
2316   E5B4             
2316   E5B4             
2316   E5B4             
2316   E5B4             
2316   E5B4~            			endif
2316   E5B4~            			endif
2316   E5B4             
2316   E5B4~            			endif
2316   E5B4~            			endif
2316   E5B4             
2316   E5AD             
2316   E5AD 06          
2316   E5AE             
2316   E5AE             
2316   E5AE~            			endif
2316   E5AE~            			endif
2316   E5AE~            			endif
2316   E5AE             
2316   E5B4             
2316   E5B4~            			endif
2316   E5B4~            			endif
2316   E5B4             
2317   E5B4 33          			pulb	
2318   E5B5 39          			rts	
2319   E5B6             			
2320   E5B6             ;*********************************************************
2321   E5B6             ;* Double Trouble Drop Target Data
2322   E5B6             ;*********************************************************			
2323   E5B6 0E          target_data		.db $0E
2324   E5B7 16          			.db $16
2325   E5B8 2A          			.db $2A
2326   E5B9 16          			.db $16
2327   E5BA 0E          			.db $0E
2328   E5BB             target_data_end
2329   E5BB             
2330   E5BB             double_trouble	PRI_($05)				;Priority=#05
2330   E5BB 52 05       
2331   E5BD             			BE19_($09,$0B)			;Effect: Range #09 Range #0B
2331   E5BD 19 89 0B    
2332   E5C0             			BE1E_($0A)				;Effect: Range #0A
2332   E5C0 1E 0A       
2333   E5C2             			IFEQR_($43)		            ;BNER_BIT#03 
2333   E5C2             
2333   E5C2             
2333   E5C2             
2333   E5C2 5B 43 00    
2333   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2333   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2333   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2333   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2333   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2333   E5C5~            			IFEQR_($43)		            ;BNER_BIT#03 
2333   E5C5             
2334   E5C5                   			EXE_
2334   E5C5             
2334   E5C5 44          
2335   E5C6 7F 00 E0          			      clr	spare_ram			;Reset DT value
2336   E5C9                   			      NEWTHREAD(set_dt_target)
2336   E5C9 CE E6 36    
2336   E5CC BD EA C4    
2337   E5CF                   			EXEEND_
2337   E5CF             
2337   E5CF             
2337   E5CF             
2337   E5CF             
2337   E5CF~                  			EXEEND_
2337   E5CF~                  			EXEEND_
2337   E5CF             
2337   E5C5             
2337   E5C5 4B          
2337   E5C6             
2337   E5CF             
2337   E5CF~                  			EXEEND_
2337   E5CF~                  			EXEEND_
2337   E5CF             
2338   E5CF                   			SSND_($14)				;Sound #14
2338   E5CF             
2338   E5CF F4          
2338   E5D0~                  			SSND_($14)				;Sound #14
2338   E5D0~                  			SSND_($14)				;Sound #14
2338   E5D0             
2339   E5D0                   			BITON_($52)				;Turn ON: Bit#12
2339   E5D0 10 52       
2340   E5D2                   			EXE_
2340   E5D2             
2340   E5D2 44          
2341   E5D3 CE 01 32          			      ldx	#aud_game2			;Times Double Trouble Achieved
2342   E5D6 BD F7 7F          			      jsr	ptrx_plus_1
2343   E5D9                   			EXEEND_
2343   E5D9             
2343   E5D9             
2343   E5D9             
2343   E5D9             
2343   E5D9~                  			EXEEND_
2343   E5D9~                  			EXEEND_
2343   E5D9             
2343   E5D2             
2343   E5D2 48          
2343   E5D3             
2343   E5D9             
2343   E5D9~                  			EXEEND_
2343   E5D9~                  			EXEEND_
2343   E5D9             
2344   E5D9                   			MRTS_					;Macro RTS, Save MRA,MRB
2344   E5D9 02          
2345   E5DA             ;**************************************************
2346   E5DA             ;* This routine will reset the upper drop target 
2347   E5DA             ;* bank and then reset the correct targets for the
2348   E5DA             ;* current player.
2349   E5DA             ;**************************************************
2350   E5DA             udt_setup		      PRI_($05)				;Priority=#05
2350   E5DA 52 05       
2351   E5DC                   			BITON_($42)				;Turn ON: Bit#02
2351   E5DC 10 42       
2352   E5DE                   			SOL_(dtrelease_on)            ;Turn ON Sol#13:dt_release
2352   E5DE 31 6D       
2353   E5E0                   			SLEEP_(64)
2353   E5E0~                  			SLEEP_(64)
2353   E5E0~                  			SLEEP_(64)
2353   E5E0             
2353   E5E0 53 40       
2353   E5E2             
2354   E5E2                   		ENDIF_
2354   E5E2             
2354   E5E2             
2354   E5E2             
2354   E5E2             
2354   E5E2             
2354   E5E2~                  		ENDIF_
2354   E5E2~                  		ENDIF_
2354   E5E2             
2354   E5E2~                  		ENDIF_
2354   E5E2~                  		ENDIF_
2354   E5E2             
2354   E5C4             
2354   E5C4 1D          
2354   E5C5             
2354   E5C5             
2354   E5C5~                  		ENDIF_
2354   E5C5~                  		ENDIF_
2354   E5C5~                  		ENDIF_
2354   E5C5~                  		ENDIF_
2354   E5C5~                  		ENDIF_
2354   E5C5             
2354   E5E2             
2354   E5E2~                  		ENDIF_
2354   E5E2~                  		ENDIF_
2354   E5E2             
2355   E5E2             			;Here when Double Trouble Starts...
2356   E5E2             udt_start		CPUX_					;Resume CPU Execution
2356   E5E2 04          
2357   E5E3 86 48       			ldaa	#dt1_on                 ;Base solenoid is DT1
2358   E5E5 CE E5 B6    			ldx	#target_data
2359   E5E8             			begin
2359   E5E8             
2360   E5E8 36          				psha	
2361   E5E9 96 18       				ldaa	bitflags
2362   E5EB 44          				lsra	
2363   E5EC E6 00       				ldab	$00,X
2364   E5EE             				begin
2364   E5EE             
2365   E5EE 54          					lsrb	
2366   E5EF 48          					asla	
2367   E5F0             				miend
2367   E5F0             
2367   E5F0             
2367   E5F0~            				miend
2367   E5F0~            				miend
2367   E5F0~            				miend
2367   E5F0             
2367   E5F0 2A FC       
2367   E5F2             
2367   E5F2~            				miend
2367   E5F2~            				miend
2367   E5F2             
2368   E5F2 32          				pula	
2369   E5F3 54          				lsrb	
2370   E5F4             				ifcs
2370   E5F4             
2370   E5F4 24 FE       
2371   E5F6 80 28       					suba	#$28
2372   E5F8 BD F1 3C    					jsr	lamp_on
2373   E5FB 8B 28       					adda	#$28
2374   E5FD DF A4       					stx	sys_temp5
2375   E5FF BD F2 F9    					jsr	bit_lamp_buf_0
2376   E602             					ifeq
2376   E602             
2376   E602 26 FE       
2377   E604 BD EB 23    						jsr	solbuf
2378   E607             					endif
2378   E607             
2378   E607             
2378   E607             
2378   E607             
2378   E607             
2378   E607~            					endif
2378   E607~            					endif
2378   E607             
2378   E607~            					endif
2378   E607~            					endif
2378   E607             
2378   E603             
2378   E603 03          
2378   E604             
2378   E604             
2378   E604~            					endif
2378   E604~            					endif
2378   E604~            					endif
2378   E604             
2378   E607             
2378   E607~            					endif
2378   E607~            					endif
2378   E607             
2379   E607 DE A4       					ldx	sys_temp5
2380   E609             				else
2380   E609             
2380   E609             
2380   E609             
2380   E609             
2380   E5F5             
2380   E5F5             
2380   E5F5             
2380   E5F5~            				else
2380   E5F5~            				else
2380   E5F5~            				else
2380   E5F5~            				else
2380   E5F5             
2380   E5F5~            				else
2380   E5F5~            				else
2380   E5F5~            				else
2380   E5F5~            				else
2380   E5F5             
2380   E5F5             
2380   E5F5 15          
2380   E609             
2380   E609 20 FE       
2380   E60B             
2380   E60B             
2380   E60B             
2380   E60B~            				else
2380   E60B~            				else
2380   E60B~            				else
2380   E60B~            				else
2380   E60B~            				else
2380   E60B             
2380   E60B~            				else
2380   E60B~            				else
2380   E60B             
2380   E60B~            				else
2380   E60B~            				else
2380   E60B             
2381   E60B BD F1 3C    					jsr	lamp_on
2382   E60E             				endif
2382   E60E             
2382   E60E             
2382   E60E             
2382   E60E             
2382   E60E             
2382   E60E~            				endif
2382   E60E~            				endif
2382   E60E             
2382   E60E~            				endif
2382   E60E~            				endif
2382   E60E             
2382   E60A             
2382   E60A 03          
2382   E60B             
2382   E60B             
2382   E60B~            				endif
2382   E60B~            				endif
2382   E60B~            				endif
2382   E60B             
2382   E60E             
2382   E60E~            				endif
2382   E60E~            				endif
2382   E60E             
2383   E60E 4C          				inca	                        ;Increment our solenoid number
2384   E60F 08          				inx	
2385   E610 8C E5 BB    				cpx	#target_data_end
2386   E613             			eqend
2386   E613             
2386   E613             
2386   E613~            			eqend
2386   E613~            			eqend
2386   E613~            			eqend
2386   E613             
2386   E613 26 D3       
2386   E615             
2386   E615~            			eqend
2386   E615~            			eqend
2386   E615             
2387   E615 BD F3 AB    			jsr	macro_start
2388   E618             			SLEEP_(48)
2388   E618~            			SLEEP_(48)
2388   E618~            			SLEEP_(48)
2388   E618             
2388   E618 53 30       
2388   E61A             
2389   E61A 5EA0A1A2A3A4			SWCLR_($A0,$A1,$A2,$A3,$A4,$25) ;Clear Sw#: $20(dt_u1) $21(dt_u2) $22(dt_u3) $23(dt_u4) $24(dt_u5) $25(upper_eject)
2389   E620 25
2390   E621             			BITOFF_($42)			;Turn OFF: Bit#02
2390   E621 11 42       
2391   E623             			MRTS_					;Macro RTS, Save MRA,MRB
2391   E623 02          
2392   E624             
2393   E624             ;**********************************************************
2394   E624             ;* Select Random Target: Will return $20-24 in game_ram_2
2395   E624             ;*                       New target cannot be the same as
2396   E624             ;*                       last target.
2397   E624             ;**********************************************************
2398   E624             rand_dt		begin
2398   E624             
2399   E624                                     begin
2399   E624             
2400   E624 BD FB 80                                  jsr	get_random
2401   E627 84 07             			      anda	#$07
2402   E629 81 05             			      cmpa	#$05
2403   E62B                   			csend
2403   E62B             
2403   E62B             
2403   E62B~                  			csend
2403   E62B~                  			csend
2403   E62B~                  			csend
2403   E62B             
2403   E62B 24 F7       
2403   E62D             
2403   E62D~                  			csend
2403   E62D~                  			csend
2403   E62D             
2404   E62D 8B 20             			adda	#$20
2405   E62F 91 02             			cmpa	game_ram_2
2406   E631             			neend
2406   E631             
2406   E631             
2406   E631~            			neend
2406   E631~            			neend
2406   E631~            			neend
2406   E631             
2406   E631 27 F1       
2406   E633             
2406   E633~            			neend
2406   E633~            			neend
2406   E633             
2407   E633 97 02       			staa	game_ram_2
2408   E635 39          			rts	
2409   E636             
2410   E636             ;**********************************************************
2411   E636             ;* Will select a random target and reset it appropriately.
2412   E636             ;* The thread will run until the Double Trouble timer expires
2413   E636             ;* and will then drop the target and re-select another.
2414   E636             ;**********************************************************			
2415   E636 BD E6 24    set_dt_target	jsr	rand_dt			;Select a random target, will return $20-$24
2416   E639 8B 28       			adda	#$28
2417   E63B BD EB 23    			jsr	solbuf
2418   E63E BD F3 AB    			jsr	macro_start
2419   E641             			BE19_($0B)				;Effect: Range #0B
2419   E641 19 0B       
2420   E643             			PRI_($30)				;Priority=#30
2420   E643 52 30       
2421   E645             			BITONP_($02)			;Turn ON Lamp/Bit @RAM:02
2421   E645 14 02       
2422   E647             			SLEEP_(32)
2422   E647~            			SLEEP_(32)
2422   E647~            			SLEEP_(32)
2422   E647             
2422   E647 53 20       
2422   E649             
2423   E649             			BITOFF_($42)			;Turn OFF: Bit#02
2423   E649 11 42       
2424   E64B             			EXE_
2424   E64B             
2424   E64B 44          
2425   E64C BD EB 8E    			      jsr	hex2bitpos
2426   E64F 53          			      comb	
2427   E650 D4 65       			      andb	$65
2428   E652 D7 65       			      stab	$65
2429   E654 96 E0       			      ldaa	spare_ram			;Get DT Value, if 0, then no timer
2430   E656             			EXEEND_
2430   E656             
2430   E656             
2430   E656             
2430   E656             
2430   E656~            			EXEEND_
2430   E656~            			EXEEND_
2430   E656             
2430   E64B             
2430   E64B 4C          
2430   E64C             
2430   E656             
2430   E656~            			EXEEND_
2430   E656~            			EXEEND_
2430   E656             
2431   E656             			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2431   E656             
2431   E656             
2431   E656             
2431   E656 5BFCE000FE  
2431   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2431   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2431   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2431   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2431   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2431   E65B~            			IFEQR_($FC,$E0,$00) ;BNER_RAM$00==#0
2431   E65B             
2432   E65B             			      KILL_					;Remove This Thread
2432   E65B 03          
2433   E65C                               ENDIF_
2433   E65C             
2433   E65C             
2433   E65C             
2433   E65C             
2433   E65C             
2433   E65C~                              ENDIF_
2433   E65C~                              ENDIF_
2433   E65C             
2433   E65C~                              ENDIF_
2433   E65C~                              ENDIF_
2433   E65C             
2433   E65A             
2433   E65A 01          
2433   E65B             
2433   E65B             
2433   E65B~                              ENDIF_
2433   E65B~                              ENDIF_
2433   E65B~                              ENDIF_
2433   E65B~                              ENDIF_
2433   E65B~                              ENDIF_
2433   E65B             
2433   E65C             
2433   E65C~                              ENDIF_
2433   E65C~                              ENDIF_
2433   E65C             
2434   E65C                               ;fall through
2435   E65C             ;*****************************************************************************
2436   E65C             ;* Main Double Trouble Routines
2437   E65C             ;*****************************************************************************
2438   E65C             dbltrbl_timer	EXE_
2438   E65C             
2438   E65C 44          
2439   E65D F6 01 9A    			      ldab	adj_gameadjust3+1
2440   E660 C4 0F       			      andb	#$0F
2441   E662             			EXEEND_
2441   E662             
2441   E662             
2441   E662             
2441   E662             
2441   E662~            			EXEEND_
2441   E662~            			EXEEND_
2441   E662             
2441   E65C             
2441   E65C 47          
2441   E65D             
2441   E662             
2441   E662~            			EXEEND_
2441   E662~            			EXEEND_
2441   E662             
2442   E662 B1 12       			ADDRAM_(regb,$12)			;RAM$01+=$12 - Get timer from adjustments and add 12
2443   E664 C0 08       			SETRAM_(rega,$08)			;RAM$00=$08	 -
2444   E666             			BEGIN_
2444   E666             
2445   E666 B1 FF       				ADDRAM_(regb,-1)			;RAM$01-=1
2446   E668 61          dt_fast_loop		SLEEPI_($1)				;Delay RAM$01
2447   E669             				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2447   E669             
2447   E669             
2447   E669             
2447   E669 5BFBFBFB5E66
2447   E66F FEF2F01040F7
2447   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2447   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2447   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2447   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2447   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2447   E675~            				IFEQR_($FB,$FB,$FB,$5E,$66,$FE,$F2,$F0,$10,$40)
2447   E675             
2448   E675             	      			;BNER_(BIT#00 || ((LAMP#10(1_target) P $F0,$10) || (BIT#26 || BIT#1E)))
2449   E675             	      			BITONP_($02)			;Turn ON Lamp/Bit @RAM:02
2449   E675 14 02       
2450   E677             	      			BITOFFP2_($02)			;Turn OFF Lamp/Bit @RAM:02
2450   E677 25 02       
2451   E679 8F          	      			JMPR_(dt_fast_loop)
2451   E67A ED          
2452   E67B             	      		ENDIF_			
2452   E67B             
2452   E67B             
2452   E67B             
2452   E67B             
2452   E67B             
2452   E67B~            	      		ENDIF_			
2452   E67B~            	      		ENDIF_			
2452   E67B             
2452   E67B~            	      		ENDIF_			
2452   E67B~            	      		ENDIF_			
2452   E67B             
2452   E674             
2452   E674 06          
2452   E675             
2452   E675             
2452   E675~            	      		ENDIF_			
2452   E675~            	      		ENDIF_			
2452   E675~            	      		ENDIF_			
2452   E675~            	      		ENDIF_			
2452   E675~            	      		ENDIF_			
2452   E675             
2452   E67B             
2452   E67B~            	      		ENDIF_			
2452   E67B~            	      		ENDIF_			
2452   E67B             
2453   E67B             	      		IFNER_($E2)		      ;BEQR_RAM$02
2453   E67B             
2453   E67B             
2453   E67B             
2453   E67B 5A E2 00    
2453   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2453   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2453   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2453   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2453   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2453   E67E~            	      		IFNER_($E2)		      ;BEQR_RAM$02
2453   E67E             
2454   E67E             				      SSND_($06)				;Sound #06
2454   E67E             
2454   E67E E6          
2454   E67F~            				      SSND_($06)				;Sound #06
2454   E67F~            				      SSND_($06)				;Sound #06
2454   E67F             
2455   E67F             				ENDIF_
2455   E67F             
2455   E67F             
2455   E67F             
2455   E67F             
2455   E67F             
2455   E67F~            				ENDIF_
2455   E67F~            				ENDIF_
2455   E67F             
2455   E67F~            				ENDIF_
2455   E67F~            				ENDIF_
2455   E67F             
2455   E67D             
2455   E67D 01          
2455   E67E             
2455   E67E             
2455   E67E~            				ENDIF_
2455   E67E~            				ENDIF_
2455   E67E~            				ENDIF_
2455   E67E~            				ENDIF_
2455   E67E~            				ENDIF_
2455   E67E             
2455   E67F             
2455   E67F~            				ENDIF_
2455   E67F~            				ENDIF_
2455   E67F             
2456   E67F             	      		BITINVP_($02)			;Toggle Lamp/Bit @RAM:02
2456   E67F 16 02       
2457   E681             			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E681             
2457   E681 5BFCE102FE  
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686             
2457   E686             
2457   E686             
2457   E686             
2457   E686             
2457   E686             
2457   E686             
2457   E685             
2457   E685 E0          
2457   E686             
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686             
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686~            			EQEND_($FC,$E1,$02)		;BNER_RAM$01==#2 - Shorten timer and loop
2457   E686             
2458   E686 B0 FF       			ADDRAM_(rega,-1)			;RAM$00-=1
2459   E688             			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2459   E688             
2459   E688 5BFCE000DB  
2459   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2459   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2459   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2459   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2459   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2459   E68D~            			BNER_($FC,$E0,$00,dt_fast_loop)	;BNER_RAM$00==#0 to dt_fast_loop
2459   E68D             
2460   E68D             			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2460   E68D             
2460   E68D E7          
2460   E68E~            			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2460   E68E~            			SSND_($07)				;Sound #07 (Double Trouble Target Timeout)
2460   E68E             
2461   E68E             			PRI_($30)				;Priority=#30
2461   E68E 52 30       
2462   E690             			BITOFF_($2D)			;Turn OFF: Lamp#2D(double_trouble)
2462   E690 11 2D       
2463   E692             			BITON_($42)				;Turn ON: Bit#02
2463   E692 10 42       
2464   E694             			SOL_(dtrelease_on)            ;Turn ON Sol#14:dt_release
2464   E694 31 6D       
2465   E696             			BE19_($0B)				;Effect: Range #0B
2465   E696 19 0B       
2466   E698             			SLEEP_(64)
2466   E698~            			SLEEP_(64)
2466   E698~            			SLEEP_(64)
2466   E698             
2466   E698 53 40       
2466   E69A             
2467   E69A             			EXE_
2467   E69A             
2467   E69A 44          
2468   E69B CE 01 9B    			      ldx	#adj_gameadjust4		;Load delay until reset
2469   E69E BD EF 53    			      jsr	cmosinc_a
2470   E6A1             			EXEEND_
2470   E6A1             
2470   E6A1             
2470   E6A1             
2470   E6A1             
2470   E6A1~            			EXEEND_
2470   E6A1~            			EXEEND_
2470   E6A1             
2470   E69A             
2470   E69A 48          
2470   E69B             
2470   E6A1             
2470   E6A1~            			EXEEND_
2470   E6A1~            			EXEEND_
2470   E6A1             
2471   E6A1 60          			SLEEPI_(rega)				;Delay RAM$00
2472   E6A2             udt_reset		EXE_
2472   E6A2             
2472   E6A2 44          
2473   E6A3 7F 00 E0    			      clr	spare_ram			;Reset DT value
2474   E6A6             			EXEEND_
2474   E6A6             
2474   E6A6             
2474   E6A6             
2474   E6A6             
2474   E6A6~            			EXEEND_
2474   E6A6~            			EXEEND_
2474   E6A6             
2474   E6A2             
2474   E6A2 45          
2474   E6A3             
2474   E6A6             
2474   E6A6~            			EXEEND_
2474   E6A6~            			EXEEND_
2474   E6A6             
2475   E6A6 5C          			JMPD_(set_dt_target)			
2475   E6A7 E6 36       
2476   E6A9             
2477   E6A9             start_dbltrbl	BNEA_($FC,$E2,$E0,udt_exit)	;BNER_RAM$02==#224 to udt_exit
2477   E6A9 59 FC E2 E0 
2477   E6AD E7 C6       
2478   E6AF             			REMTHREADS_($F8,$30)		;Remove Multiple Threads Based on Priority
2478   E6AF 55 F8 30    
2479   E6B2             			BITON_($2D)				;Turn ON: Lamp#2D(double_trouble)
2479   E6B2 10 2D       
2480   E6B4             			CPUX_					;Resume CPU Execution
2480   E6B4 04          
2481   E6B5             			NEWTHREAD(award_dt_score)
2481   E6B5 CE E6 BF    
2481   E6B8 BD EA C4    
2482   E6BB 7E E6 36    			jmp	set_dt_target
2483   E6BE 03          			.db $03
2484   E6BF             
2485   E6BF BD F3 AB    award_dt_score	jsr	macro_start
2486   E6C2             			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2486   E6C2             
2486   E6C2             
2486   E6C2             
2486   E6C2 5BFEF2F240FD
2486   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2486   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2486   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2486   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2486   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2486   E6C8~            			IFEQR_($FE,$F2,$F2,$40)	      ;BNER_(BIT#00 P $F2,$40)
2486   E6C8             
2487   E6C8             			      REMTHREADS_($FA,$40)		;Remove Multiple Threads Based on Priority
2487   E6C8 55 FA 40    
2488   E6CB             			      EXE_
2488   E6CB             
2488   E6CB 44          
2489   E6CC BD E7 1A    			            jsr	gj_4A
2490   E6CF             			      EXEEND_
2490   E6CF             
2490   E6CF             
2490   E6CF             
2490   E6CF             
2490   E6CF~            			      EXEEND_
2490   E6CF~            			      EXEEND_
2490   E6CF             
2490   E6CB             
2490   E6CB 45          
2490   E6CC             
2490   E6CF             
2490   E6CF~            			      EXEEND_
2490   E6CF~            			      EXEEND_
2490   E6CF             
2491   E6CF             			ENDIF_
2491   E6CF             
2491   E6CF             
2491   E6CF             
2491   E6CF             
2491   E6CF             
2491   E6CF~            			ENDIF_
2491   E6CF~            			ENDIF_
2491   E6CF             
2491   E6CF~            			ENDIF_
2491   E6CF~            			ENDIF_
2491   E6CF             
2491   E6C7             
2491   E6C7 07          
2491   E6C8             
2491   E6C8             
2491   E6C8~            			ENDIF_
2491   E6C8~            			ENDIF_
2491   E6C8~            			ENDIF_
2491   E6C8~            			ENDIF_
2491   E6C8~            			ENDIF_
2491   E6C8             
2491   E6CF             
2491   E6CF~            			ENDIF_
2491   E6CF~            			ENDIF_
2491   E6CF             
2492   E6CF             			PRI_($45)				;Priority=#45
2492   E6CF 52 45       
2493   E6D1             			CPUX_					;Resume CPU Execution
2493   E6D1 04          
2494   E6D2 96 E0       			ldaa	spare_ram
2495   E6D4             			ifeq
2495   E6D4             
2495   E6D4 26 FE       
2496   E6D6 4C          				inca	
2497   E6D7             			else
2497   E6D7             
2497   E6D7             
2497   E6D7             
2497   E6D7             
2497   E6D5             
2497   E6D5             
2497   E6D5             
2497   E6D5~            			else
2497   E6D5~            			else
2497   E6D5~            			else
2497   E6D5~            			else
2497   E6D5             
2497   E6D5~            			else
2497   E6D5~            			else
2497   E6D5~            			else
2497   E6D5~            			else
2497   E6D5             
2497   E6D5             
2497   E6D5 03          
2497   E6D7             
2497   E6D7 20 FE       
2497   E6D9             
2497   E6D9             
2497   E6D9             
2497   E6D9~            			else
2497   E6D9~            			else
2497   E6D9~            			else
2497   E6D9~            			else
2497   E6D9~            			else
2497   E6D9             
2497   E6D9~            			else
2497   E6D9~            			else
2497   E6D9             
2497   E6D9~            			else
2497   E6D9~            			else
2497   E6D9             
2498   E6D9 81 16       				cmpa	#$16
2499   E6DB             				ifne
2499   E6DB             
2499   E6DB 27 FE       
2500   E6DD 48          					asla	
2501   E6DE 81 10       					cmpa	#$10
2502   E6E0             					ifcc
2502   E6E0             
2502   E6E0 25 FE       
2503   E6E2 86 16       						ldaa	#$16
2504   E6E4             					endif
2504   E6E4             
2504   E6E4             
2504   E6E4             
2504   E6E4             
2504   E6E4             
2504   E6E4~            					endif
2504   E6E4~            					endif
2504   E6E4             
2504   E6E4~            					endif
2504   E6E4~            					endif
2504   E6E4             
2504   E6E1             
2504   E6E1 02          
2504   E6E2             
2504   E6E2             
2504   E6E2~            					endif
2504   E6E2~            					endif
2504   E6E2~            					endif
2504   E6E2             
2504   E6E4             
2504   E6E4~            					endif
2504   E6E4~            					endif
2504   E6E4             
2505   E6E4             				endif
2505   E6E4             
2505   E6E4             
2505   E6E4             
2505   E6E4             
2505   E6E4             
2505   E6E4~            				endif
2505   E6E4~            				endif
2505   E6E4             
2505   E6E4~            				endif
2505   E6E4~            				endif
2505   E6E4             
2505   E6DC             
2505   E6DC 07          
2505   E6DD             
2505   E6DD             
2505   E6DD~            				endif
2505   E6DD~            				endif
2505   E6DD~            				endif
2505   E6DD             
2505   E6E4             
2505   E6E4~            				endif
2505   E6E4~            				endif
2505   E6E4             
2506   E6E4             			endif
2506   E6E4             
2506   E6E4             
2506   E6E4             
2506   E6E4             
2506   E6E4             
2506   E6E4~            			endif
2506   E6E4~            			endif
2506   E6E4             
2506   E6E4~            			endif
2506   E6E4~            			endif
2506   E6E4             
2506   E6D8             
2506   E6D8 0B          
2506   E6D9             
2506   E6D9             
2506   E6D9~            			endif
2506   E6D9~            			endif
2506   E6D9~            			endif
2506   E6D9             
2506   E6E4             
2506   E6E4~            			endif
2506   E6E4~            			endif
2506   E6E4             
2507   E6E4 BD DE C9    			jsr	add_dt_audit
2508   E6E7 97 E0       			staa	spare_ram
2509   E6E9 48          			asla	
2510   E6EA 48          			asla	
2511   E6EB 48          			asla	
2512   E6EC 84 7F       			anda	#$7F
2513   E6EE 8B 04       			adda	#$04
2514   E6F0 97 E2       			staa	spare_ram+2
2515   E6F2 96 18       			ldaa	bitflags
2516   E6F4 46          			rora	
2517   E6F5             			ifcc
2517   E6F5             
2517   E6F5 25 FE       
2518   E6F7 8D 2F       				bsr	gb_9E
2519   E6F9 86 08       				ldaa	#$08
2520   E6FB             				begin
2520   E6FB             
2521   E6FB 8D 59       					bsr	gb_9F
2522   E6FD BD EA 2F    					jsr	addthread
2523   E700 06          					.db $06
2524   E701             		
2525   E701 81 01       					cmpa	#$01
2526   E703             					ifeq
2526   E703             
2526   E703 26 FE       
2527   E705 BD EA 2F    						jsr	addthread
2528   E708 60          						.db $60
2529   E709             					endif
2529   E709             
2529   E709             
2529   E709             
2529   E709             
2529   E709             
2529   E709~            					endif
2529   E709~            					endif
2529   E709             
2529   E709~            					endif
2529   E709~            					endif
2529   E709             
2529   E704             
2529   E704 04          
2529   E705             
2529   E705             
2529   E705~            					endif
2529   E705~            					endif
2529   E705~            					endif
2529   E705             
2529   E709             
2529   E709~            					endif
2529   E709~            					endif
2529   E709             
2530   E709 BD E7 99    					jsr	gj_54
2531   E70C BD EA 2F    					jsr	addthread
2532   E70F 06          					.db $06
2533   E710             		
2534   E710 4A          					deca	
2535   E711             				eqend
2535   E711             
2535   E711             
2535   E711~            				eqend
2535   E711~            				eqend
2535   E711~            				eqend
2535   E711             
2535   E711 26 E8       
2535   E713             
2535   E713~            				eqend
2535   E713~            				eqend
2535   E713             
2536   E713 8D 27       				bsr	gb_A2
2537   E715             			endif
2537   E715             
2537   E715             
2537   E715             
2537   E715             
2537   E715             
2537   E715~            			endif
2537   E715~            			endif
2537   E715             
2537   E715~            			endif
2537   E715~            			endif
2537   E715             
2537   E6F6             
2537   E6F6 1E          
2537   E6F7             
2537   E6F7             
2537   E6F7~            			endif
2537   E6F7~            			endif
2537   E6F7~            			endif
2537   E6F7             
2537   E715             
2537   E715~            			endif
2537   E715~            			endif
2537   E715             
2538   E715 8D 03       			bsr	gj_4A
2539   E717 7E EA 67    			jmp	killthread
2540   E71A             			
2541   E71A 96 E2       gj_4A			ldaa	spare_ram+2
2542   E71C BD EC 05    			jsr	score_main
2543   E71F 81 34       			cmpa	#$34
2544   E721             			ifeq
2544   E721             
2544   E721 26 FE       
2545   E723 86 0D             			ldaa	#$0D
2546   E725 7E EC 05          			jmp	score_main
2547   E728 CE 00 5F    gb_9E 			ldx	#dmask_p4
2548   E72B C6 03             			ldab	#$03
2549   E72D                   			begin
2549   E72D             
2550   E72D D1 CD                   			cmpb	player_up
2551   E72F                         			ifne
2551   E72F             
2551   E72F 27 FE       
2552   E731 A6 00                   			      ldaa	$00,X
2553   E733 8A 7F                   			      oraa	#$7F
2554   E735 A7 00                   			      staa	$00,X
2555   E737                         			endif
2555   E737             
2555   E737             
2555   E737             
2555   E737             
2555   E737             
2555   E737~                        			endif
2555   E737~                        			endif
2555   E737             
2555   E737~                        			endif
2555   E737~                        			endif
2555   E737             
2555   E730             
2555   E730 06          
2555   E731             
2555   E731             
2555   E731~                        			endif
2555   E731~                        			endif
2555   E731~                        			endif
2555   E731             
2555   E737             
2555   E737~                        			endif
2555   E737~                        			endif
2555   E737             
2556   E737 09                      			dex	
2557   E738 5A                      			decb	
2558   E739                   			miend
2558   E739             
2558   E739             
2558   E739~                  			miend
2558   E739~                  			miend
2558   E739~                  			miend
2558   E739             
2558   E739 2A F2       
2558   E73B             
2558   E73B~                  			miend
2558   E73B~                  			miend
2558   E73B             
2559   E73B 39          			rts
2560   E73C             	
2561   E73C CE 00 5F    gb_A2			ldx	#dmask_p4
2562   E73F C6 03       			ldab	#$03
2563   E741             			begin
2563   E741             
2564   E741 D1 CD             			cmpb	player_up
2565   E743                   			ifne
2565   E743             
2565   E743 27 FE       
2566   E745 A6 00             			      ldaa	$00,X
2567   E747 84 80             			      anda	#$80
2568   E749 A7 00             			      staa	$00,X
2569   E74B                   			endif
2569   E74B             
2569   E74B             
2569   E74B             
2569   E74B             
2569   E74B             
2569   E74B~                  			endif
2569   E74B~                  			endif
2569   E74B             
2569   E74B~                  			endif
2569   E74B~                  			endif
2569   E74B             
2569   E744             
2569   E744 06          
2569   E745             
2569   E745             
2569   E745~                  			endif
2569   E745~                  			endif
2569   E745~                  			endif
2569   E745             
2569   E74B             
2569   E74B~                  			endif
2569   E74B~                  			endif
2569   E74B             
2570   E74B 09                			dex	
2571   E74C 5A                			decb	
2572   E74D             			miend
2572   E74D             
2572   E74D             
2572   E74D~            			miend
2572   E74D~            			miend
2572   E74D~            			miend
2572   E74D             
2572   E74D 2A F2       
2572   E74F             
2572   E74F~            			miend
2572   E74F~            			miend
2572   E74F             
2573   E74F 96 E1       			ldaa	spare_ram+1
2574   E751 97 60       			staa	comma_flags
2575   E753 7E EB A1    			jmp	update_commas
2576   E756             			
2577   E756 36          gb_9F			psha	
2578   E757 81 06       			cmpa	#$06
2579   E759             			ifcc
2579   E759             
2579   E759 25 FE       
2580   E75B 86 1F       			      ldaa	#$1F
2581   E75D             			else
2581   E75D             
2581   E75D             
2581   E75D             
2581   E75D             
2581   E75A             
2581   E75A             
2581   E75A             
2581   E75A~            			else
2581   E75A~            			else
2581   E75A~            			else
2581   E75A~            			else
2581   E75A             
2581   E75A~            			else
2581   E75A~            			else
2581   E75A~            			else
2581   E75A~            			else
2581   E75A             
2581   E75A             
2581   E75A 04          
2581   E75D             
2581   E75D 20 FE       
2581   E75F             
2581   E75F             
2581   E75F             
2581   E75F~            			else
2581   E75F~            			else
2581   E75F~            			else
2581   E75F~            			else
2581   E75F~            			else
2581   E75F             
2581   E75F~            			else
2581   E75F~            			else
2581   E75F             
2581   E75F~            			else
2581   E75F~            			else
2581   E75F             
2582   E75F 86 0C       			      ldaa	#$0C
2583   E761                               endif
2583   E761             
2583   E761             
2583   E761             
2583   E761             
2583   E761             
2583   E761~                              endif
2583   E761~                              endif
2583   E761             
2583   E761~                              endif
2583   E761~                              endif
2583   E761             
2583   E75E             
2583   E75E 02          
2583   E75F             
2583   E75F             
2583   E75F~                              endif
2583   E75F~                              endif
2583   E75F~                              endif
2583   E75F             
2583   E761             
2583   E761~                              endif
2583   E761~                              endif
2583   E761             
2584   E761 BD EC FC    			jsr	isnd_once
2585   E764 BD F9 19    			jsr	disp_mask
2586   E767 16          			tab	
2587   E768 43          			coma	
2588   E769 84 33       			anda	#$33
2589   E76B D4 60       			andb	comma_flags
2590   E76D 1B          			aba	
2591   E76E 97 60       			staa	comma_flags
2592   E770 BD EB A1    			jsr	update_commas
2593   E773 CE 00 48    			ldx	#score_p1_b1
2594   E776 4F          			clra	
2595   E777             			begin
2595   E777             
2596   E777 91 CD             			cmpa	player_up
2597   E779                   			ifne
2597   E779             
2597   E779 27 FE       
2598   E77B 6F 02                   			clr	$02,X
2599   E77D 6F 03                   			clr	$03,X
2600   E77F D6 E0                   			ldab	spare_ram
2601   E781 C5 F0                   			bitb	#$F0
2602   E783                         			ifeq
2602   E783             
2602   E783 26 FE       
2603   E785 CA F0                   			      orab	#$F0
2604   E787                         			endif
2604   E787             
2604   E787             
2604   E787             
2604   E787             
2604   E787             
2604   E787~                        			endif
2604   E787~                        			endif
2604   E787             
2604   E787~                        			endif
2604   E787~                        			endif
2604   E787             
2604   E784             
2604   E784 02          
2604   E785             
2604   E785             
2604   E785~                        			endif
2604   E785~                        			endif
2604   E785~                        			endif
2604   E785             
2604   E787             
2604   E787~                        			endif
2604   E787~                        			endif
2604   E787             
2605   E787 E7 01                   			stab	$01,X
2606   E789 C6 FF                   			ldab	#$FF
2607   E78B E7 00                   			stab	$00,X
2608   E78D                         		endif
2608   E78D             
2608   E78D             
2608   E78D             
2608   E78D             
2608   E78D             
2608   E78D~                        		endif
2608   E78D~                        		endif
2608   E78D             
2608   E78D~                        		endif
2608   E78D~                        		endif
2608   E78D             
2608   E77A             
2608   E77A 12          
2608   E77B             
2608   E77B             
2608   E77B~                        		endif
2608   E77B~                        		endif
2608   E77B~                        		endif
2608   E77B             
2608   E78D             
2608   E78D~                        		endif
2608   E78D~                        		endif
2608   E78D             
2609   E78D C6 04             			ldab	#$04
2610   E78F BD EF 4D          			jsr	xplusb
2611   E792 4C                			inca	
2612   E793 81 04             			cmpa	#$04
2613   E795             			eqend
2613   E795             
2613   E795             
2613   E795~            			eqend
2613   E795~            			eqend
2613   E795~            			eqend
2613   E795             
2613   E795 26 E0       
2613   E797             
2613   E797~            			eqend
2613   E797~            			eqend
2613   E797             
2614   E797 32          			pula	
2615   E798 39          			rts	
2616   E799             			
2617   E799 36          gj_54			psha	
2618   E79A BD F9 19    			jsr	disp_mask
2619   E79D 94 60       			anda	comma_flags
2620   E79F 97 60       			staa	comma_flags
2621   E7A1 86 FF       			ldaa	#$FF
2622   E7A3 C6 10       			ldab	#$10
2623   E7A5 CE 00 48    			ldx	#score_p1_b1
2624   E7A8 BD F8 40    			jsr	write_range
2625   E7AB 32          			pula	
2626   E7AC 39          			rts	
2627   E7AD             
2628   E7AD             ;********************************************************
2629   E7AD             ;* Upper Drop Target Switches:
2630   E7AD             ;********************************************************			
2631   E7AD             sw_dt_u1
2632   E7AD             sw_dt_u2
2633   E7AD             sw_dt_u3
2634   E7AD             sw_dt_u4
2635   E7AD             sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2635   E7AD             
2635   E7AD             
2635   E7AD             
2635   E7AD 5A 42 00    
2635   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2635   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2635   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2635   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2635   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2635   E7B0~            sw_dt_u5		IFNER_($42)		      ;BEQR_BIT#02
2635   E7B0             
2636   E7B0                   			BEQA_($52,start_dbltrbl)  	;BEQR_BIT#12 to start_dbltrbl
2636   E7B0 58 52       
2636   E7B2 E6 A9       
2637   E7B4 B0 28             			ADDRAM_(rega,$28)			;RAM$00+=$28
2638   E7B6                   			IFNER_($E0)		;BEQR_RAM$00
2638   E7B6             
2638   E7B6             
2638   E7B6             
2638   E7B6 5A E0 00    
2638   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2638   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2638   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2638   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2638   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2638   E7B9~                  			IFNER_($E0)		;BEQR_RAM$00
2638   E7B9             
2639   E7B9                         			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2639   E7B9 14 00       
2640   E7BB                         			JSR_(inc_bonus)			;1 bonus advance			
2640   E7BB 56          
2640   E7BC DC FF       
2641   E7BE                         			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BE 43          
2641   E7BF             
2641   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BF             
2641   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BF             
2641   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BF             
2641   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BF~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7BF             
2641   E7BF             
2641   E7BF 0C          
2641   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7C0~                        			PTSDIG_(1,10000)			;10,000 Points/Digit Sound
2641   E7C0             
2641   E7C0             
2641   E7C0             
2641   E7C0             
2641   E7C0             
2642   E7C0                         			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2642   E7C0             
2642   E7C0             
2642   E7C0             
2642   E7C0 5B F6 09 FF 
2642   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2642   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2642   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2642   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2642   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2642   E7C4~                        			IFEQR_($F6,$09)		      ;BNER_RangeON#09
2642   E7C4             
2643   E7C4 9D                      			      JSRR_(double_trouble)
2643   E7C5 F5          
2644   E7C6                         			ENDIF_
2644   E7C6             
2644   E7C6             
2644   E7C6             
2644   E7C6             
2644   E7C6             
2644   E7C6~                        			ENDIF_
2644   E7C6~                        			ENDIF_
2644   E7C6             
2644   E7C6~                        			ENDIF_
2644   E7C6~                        			ENDIF_
2644   E7C6             
2644   E7C3             
2644   E7C3 02          
2644   E7C4             
2644   E7C4             
2644   E7C4~                        			ENDIF_
2644   E7C4~                        			ENDIF_
2644   E7C4~                        			ENDIF_
2644   E7C4~                        			ENDIF_
2644   E7C4~                        			ENDIF_
2644   E7C4             
2644   E7C6             
2644   E7C6~                        			ENDIF_
2644   E7C6~                        			ENDIF_
2644   E7C6             
2645   E7C6                         	      ENDIF_
2645   E7C6             
2645   E7C6             
2645   E7C6             
2645   E7C6             
2645   E7C6             
2645   E7C6~                        	      ENDIF_
2645   E7C6~                        	      ENDIF_
2645   E7C6             
2645   E7C6~                        	      ENDIF_
2645   E7C6~                        	      ENDIF_
2645   E7C6             
2645   E7B8             
2645   E7B8 0D          
2645   E7B9             
2645   E7B9             
2645   E7B9~                        	      ENDIF_
2645   E7B9~                        	      ENDIF_
2645   E7B9~                        	      ENDIF_
2645   E7B9~                        	      ENDIF_
2645   E7B9~                        	      ENDIF_
2645   E7B9             
2645   E7C6             
2645   E7C6~                        	      ENDIF_
2645   E7C6~                        	      ENDIF_
2645   E7C6             
2646   E7C6                   	      ENDIF_			
2646   E7C6             
2646   E7C6             
2646   E7C6             
2646   E7C6             
2646   E7C6             
2646   E7C6~                  	      ENDIF_			
2646   E7C6~                  	      ENDIF_			
2646   E7C6             
2646   E7C6~                  	      ENDIF_			
2646   E7C6~                  	      ENDIF_			
2646   E7C6             
2646   E7AF             
2646   E7AF 16          
2646   E7B0             
2646   E7B0             
2646   E7B0~                  	      ENDIF_			
2646   E7B0~                  	      ENDIF_			
2646   E7B0~                  	      ENDIF_			
2646   E7B0~                  	      ENDIF_			
2646   E7B0~                  	      ENDIF_			
2646   E7B0             
2646   E7C6             
2646   E7C6~                  	      ENDIF_			
2646   E7C6~                  	      ENDIF_			
2646   E7C6             
2647   E7C6             udt_exit		KILL_					;Remove This Thread
2647   E7C6 03          
2648   E7C7             
2649   E7C7 C0 10       gj_0E			SETRAM_(rega,$10)			;RAM$00=$10
2650   E7C9             			BEGIN_
2650   E7C9             
2651   E7C9 B0 FF       				ADDRAM_(rega,-1)			;RAM$00-=1
2652   E7CB             			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7CB             
2652   E7CB 5AFAE0F3FCE0
2652   E7D1 0CFB
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3             
2652   E7D3             
2652   E7D3             
2652   E7D3             
2652   E7D3             
2652   E7D3             
2652   E7D3             
2652   E7D2             
2652   E7D2 F6          
2652   E7D3             
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3             
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3~            			NEEND_($FA,$E0,$F3,$FC,$E0,$0C) ;BEQR_((!RAM$00==#12) && RAM$00) 
2652   E7D3             
2653   E7D3             			BITONP_(rega)			;Turn ON Lamp/Bit @RAM:00
2653   E7D3 14 00       
2654   E7D5             			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2654   E7D5             
2654   E7D5             
2654   E7D5             
2654   E7D5 5B F6 02 FF 
2654   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2654   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2654   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2654   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2654   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2654   E7D9~            			IFEQR_($F6,$02)		      ;BNER_RangeON#02
2654   E7D9             
2655   E7D9                   			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2655   E7D9             
2655   E7D9 5A 1B 1F    
2655   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2655   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2655   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2655   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2655   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2655   E7DC~                  			BEQR_($1B,award_spec)		;BEQR_LAMP#1B(special) to award_spec
2655   E7DC             
2656   E7DC                   			SSND_($17)				;Sound #17
2656   E7DC             
2656   E7DC F7          
2656   E7DD~                  			SSND_($17)				;Sound #17
2656   E7DD~                  			SSND_($17)				;Sound #17
2656   E7DD             
2657   E7DD                   			BITON_($41)				;Turn ON: Bit#01
2657   E7DD 10 41       
2658   E7DF                   			BITOFF_($D8,$5C)			;Turn OFF: Bit#18, Bit#1C
2658   E7DF 11 D8 5C    
2659   E7E2                   			JSRD_(lock_thread)			
2659   E7E2 57          
2659   E7E3 DD 82       
2660   E7E5                   			EXE_
2660   E7E5             
2660   E7E5 44          
2661   E7E6                   			      NEWTHREAD(attract_1)
2661   E7E6 CE D8 79    
2661   E7E9 BD EA C4    
2662   E7EC                   			EXEEND_
2662   E7EC             
2662   E7EC             
2662   E7EC             
2662   E7EC             
2662   E7EC~                  			EXEEND_
2662   E7EC~                  			EXEEND_
2662   E7EC             
2662   E7E5             
2662   E7E5 48          
2662   E7E6             
2662   E7EC             
2662   E7EC~                  			EXEEND_
2662   E7EC~                  			EXEEND_
2662   E7EC             
2663   E7EC                   			MRTS_					;Macro RTS, Save MRA,MRB
2663   E7EC 02          
2664   E7ED                               ENDIF_
2664   E7ED             
2664   E7ED             
2664   E7ED             
2664   E7ED             
2664   E7ED             
2664   E7ED~                              ENDIF_
2664   E7ED~                              ENDIF_
2664   E7ED             
2664   E7ED~                              ENDIF_
2664   E7ED~                              ENDIF_
2664   E7ED             
2664   E7D8             
2664   E7D8 14          
2664   E7D9             
2664   E7D9             
2664   E7D9~                              ENDIF_
2664   E7D9~                              ENDIF_
2664   E7D9~                              ENDIF_
2664   E7D9~                              ENDIF_
2664   E7D9~                              ENDIF_
2664   E7D9             
2664   E7ED             
2664   E7ED~                              ENDIF_
2664   E7ED~                              ENDIF_
2664   E7ED             
2665   E7ED             gb_4C			EXE_
2665   E7ED             
2665   E7ED 44          
2666   E7EE             			      NEWTHREAD(gj_3B)
2666   E7EE CE E7 F5    
2666   E7F1 BD EA C4    
2667   E7F4             			EXEEND_
2667   E7F4             
2667   E7F4             
2667   E7F4             
2667   E7F4             
2667   E7F4~            			EXEEND_
2667   E7F4~            			EXEEND_
2667   E7F4             
2667   E7ED             
2667   E7ED 48          
2667   E7EE             
2667   E7F4             
2667   E7F4~            			EXEEND_
2667   E7F4~            			EXEEND_
2667   E7F4             
2668   E7F4             			MRTS_					;Macro RTS, Save MRA,MRB
2668   E7F4 02          
2669   E7F5             
2670   E7F5 BD F3 AB    gj_3B			jsr	macro_start
2671   E7F8 9C          			JSRR_(gatlin_sound)			
2671   E7F9 05          
2672   E7FA             			KILL_					;Remove This Thread
2672   E7FA 03          
2673   E7FB             
2674   E7FB             award_spec		SPEC_					;Award Special
2674   E7FB 05          
2675   E7FC             			BE19_($02)				;Effect: Range #02
2675   E7FC 19 02       
2676   E7FE             			MRTS_					;Macro RTS, Save MRA,MRB
2676   E7FE 02          
2677   E7FF             
2678   E7FF 49          gr_csum2		.db $49
2679   E800             
2680   E800             	
2681   E800             	.end
2682   E800             
tasm: Number of errors = 0
