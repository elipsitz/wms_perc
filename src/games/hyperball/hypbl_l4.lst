0001   0000             ;--------------------------------------------------------------
0002   0000             ;Hyperball Game ROM L-4
0003   0000             ;Dumped by Hydasm ©2000-2013 Jess M. Askey
0004   0000             ;--------------------------------------------------------------
0005   0000             #define HYPERBALL
0006   0000             
0007   0000             #include  "../../68logic.asm"	;680X logic structure definitions   
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin		     logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ jmp	var2_
0050+  0000             #defcont					\#else
0051+  0000             #defcont						\ x	var2_
0052+  0000             #defcont					\#endif
0053+  0000             #defcont				\#else
0054+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0055+  0000             #defcont				\#endif
0056+  0000             
0057+  0000             ;*******************************************************************
0058+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0059+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0060+  0000             ;*             at that address to point to the current address.    *
0061+  0000             ;*******************************************************************
0062+  0000             #define logic_end \var1_ .set *
0063+  0000             #defcont		\ .pop var3_, var4_
0064+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0065+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0066+  0000             #defcont  				\var2_ .set var1_-var4_-2
0067+  0000             #defcont				\#if var2_+127 < 0
0068+  0000             #defcont					\ .error "Branch Range < -127"
0069+  0000             #defcont				\#else
0070+  0000             #defcont					\#if var2_-128 > 0
0071+  0000             #defcont						\ .error "Branch Range > 128"
0072+  0000             #defcont					\#else
0073+  0000             #defcont    					\ .org var4_+1
0074+  0000             #defcont						\ .byte var2_
0075+  0000             #defcont					\#endif
0076+  0000             #defcont				\#endif
0077+  0000             #defcont			\#else	
0078+  0000             #defcont    			\ .org  var4_-2	
0079+  0000             #defcont				\ .word var1_
0080+  0000             #defcont			\#endif
0081+  0000             #defcont			\ .org	var1_
0082+  0000             #defcont		\#else
0083+  0000             #defcont			\.error "Wrong Endtype for IF block"
0084+  0000             #defcont		\#endif
0085+  0000             
0086+  0000             ;*******************************************************************
0087+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0088+  0000             ;*             (ie. with additional logic as defined below). The   *
0089+  0000             ;*             ELSE block will resove how to terminate the current *
0090+  0000             ;*             code and then set the owning IF statement's data    *
0091+  0000             ;*             byte.                                               *
0092+  0000             ;*******************************************************************
0093+  0000             #define	logic_else(x,y)	\var1_ .set $
0094+  0000             #defcont		\ .pop var3_, var4_
0095+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0096+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0097+  0000             #defcont				\ .org var4_+1
0098+  0000             #defcont	      		\#if x==0
0099+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0100+  0000             #defcont					\#if var2_+127 < 0
0101+  0000             #defcont						\ .org var1_
0102+  0000             #defcont						\.push $+3, 1
0103+  0000             #defcont						\ jmp $
0104+  0000             #defcont					\#else
0105+  0000             #defcont						\#if var2_-128>0
0106+  0000             #defcont							\ .org var1_
0107+  0000             #defcont							\.push $+3, 1
0108+  0000             #defcont							\ jmp $
0109+  0000             #defcont						\#else
0110+  0000             #defcont							\.push var1_, 0
0111+  0000             #defcont							\ .byte var2_
0112+  0000             #defcont							\ .org var1_
0113+  0000             #defcont							\ BRA $
0114+  0000             #defcont							\ .org var1_+2
0115+  0000             #defcont						\#endif
0116+  0000             #defcont					\#endif
0117+  0000             #defcont				\#else
0118+  0000             #defcont					\ .byte var1_-var4_-2+2
0119+  0000             #defcont					\ .org var1_
0120+  0000             #defcont					\.push $, 0
0121+  0000             #defcont					\ y $		
0122+  0000             #defcont				\#endif
0123+  0000             #defcont			\#else
0124+  0000             #defcont				\.error "Duplicate ELSE Statement"
0125+  0000             #defcont			\#endif
0126+  0000             #defcont		\#else
0127+  0000             #defcont			\ .error "Misplaced Else"
0128+  0000             #defcont		\#endif
0129+  0000             
0130+  0000             
0131+  0000             ;*******************************************************************
0132+  0000             ;* Defines how to use the various logic macros defined above.      *
0133+  0000             ;*******************************************************************
0134+  0000             #define	ifeq	logic_ifxx(BNE)		
0135+  0000             #define	ifne	logic_ifxx(BEQ)
0136+  0000             #define	ifpl	logic_ifxx(BMI)
0137+  0000             #define	ifhi	logic_ifxx(BLO)
0138+  0000             #define	ifmi	logic_ifxx(BPL)
0139+  0000             #define	iflo	logic_ifxx(BHI)
0140+  0000             #define	ifcs	logic_ifxx(BCC)
0141+  0000             #define	ifcc	logic_ifxx(BCS)
0142+  0000             #define 	ifvc	logic_ifxx(BVS)
0143+  0000             #define 	ifvs	logic_ifxx(BVC)
0144+  0000             #define	ifge	logic_ifxx(BLS)
0145+  0000             #define	ifgt	logic_ifxx(BLE)
0146+  0000             #define	iflt 	logic_ifxx(BGE)
0147+  0000             #define	ifle	logic_ifxx(BGT)
0148+  0000             #define	ifgte	logic_ifxx(BLT)
0149+  0000             
0150+  0000             #define	else  	logic_else(0,0)
0151+  0000             #define	else_eq	logic_else(1,BEQ)
0152+  0000             #define	else_ne	logic_else(1,BNE)
0153+  0000             #define	else_pl	logic_else(1,BPL)
0154+  0000             #define	else_mi	logic_else(1,BMI)
0155+  0000             #define	else_cc	logic_else(1,BCC)
0156+  0000             #define	else_cs	logic_else(1,BCS)
0157+  0000             
0158+  0000             #define 	endif		logic_end
0159+  0000             
0160+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0161+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0162+  0000             #define	plend	logic_loopend(BMI,BPL)
0163+  0000             #define	miend	logic_loopend(BPL,BMI)
0164+  0000             #define	csend	logic_loopend(BCC,BCS)
0165+  0000             #define	ccend	logic_loopend(BCS,BCC)
0166+  0000             #define	vcend	logic_loopend(BVS,BVC)
0167+  0000             #define	vsend	logic_loopend(BVC,BVS)
0168+  0000             #define	geend	logic_loopend(BLS,BLT)
0169+  0000             #define	leend	logic_loopend(BGT,BLE)
0170+  0000             
0171+  0000             #define	loopend	logic_loopend(BRA,BRA)
0172+  0000             
0173+  0000             #define	lsb(x)	x&$FF
0174+  0000             
0175+  0000             #define	msb(x)	(x>>8)&$FF0008   0000             #include  "../../7gen.asm"	;Level 7 helper macros    
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Level 7 General Macros
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             
0012+  0000             ;*****************************************************************************
0013+  0000             ;* This is where you should put general timesaving macros above and beyond
0014+  0000             ;* the base logic and WML7 macros...
0015+  0000             ;*
0016+  0000             ;* An example is repetitive code such as...
0017+  0000             ;*
0018+  0000             ;* ldx	#gj_2B
0019+  0000             ;* jsr	newthread_06
0020+  0000             ;*
0021+  0000             ;* Is both long and it is easy to forget to reference the label properly, it
0022+  0000             ;* can be replaced with..
0023+  0000             ;*
0024+  0000             ;* NEWTHREAD(gj_2B) 
0025+  0000             ;* 
0026+  0000             ;* By using the macro defined below...
0027+  0000             ;*****************************************************************************
0028+  0000             
0029+  0000             #define	NEWTHREAD(x)	\ ldx #x	\ jsr newthread_06
0030+  0000             #define     NEWTHREAD_JMP(x)	\ ldx #x	\ jmp newthread_06
0031+  0000             
0032+  0000             
0033+  0000             ;*****************************************************************************
0034+  0000             ;* When in native code, it is common to to sleep the current thread a number of
0035+  0000             ;* cycles, this is similar to the SLEEP_ macro, but when in code it looks like this
0036+  0000             ;*
0037+  0000             ;* jsr	addthread
0038+  0000             ;* .db $01				;with the data lingering behind
0039+  0000             ;*
0040+  0000             ;* It is much easier to read a macro like this...
0041+  0000             ;*
0042+  0000             ;* SLEEP(1);
0043+  0000             ;*
0044+  0000             ;*****************************************************************************
0045+  0000             
0046+  0000             #define	SLEEP(x)	\ jsr addthread	\ .db x
0009   0000             #include  "hy_wvm.asm"		;Virtual Machine Instruction Definitions                           
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Hyperball Virtual Machine Macro Definitions
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             
0012+  0000             .module wml7
0013+  0000             .msfirst
0014+  0000             
0015+  0000             wml1_       .equ  $00
0016+  0000             wml2_       .equ  $00
0017+  0000             wml3_       .equ  $00
0018+  0000             wml4_       .equ  $00
0019+  0000             wml5_       .equ  $00
0020+  0000             wml6_       .equ  $00
0021+  0000             
0022+  0000             #define     FLAG_WML_IF       $10
0023+  0000             #define     FLAG_WML_ELSE     $20
0024+  0000             #define	FLAG_WML_BEGIN 	$40
0025+  0000             #define     FLAG_WML_EXE      $80
0026+  0000             
0027+  0000             ;********************************************************
0028+  0000             ;* First Define the Thread Structure used in the virtual 
0029+  0000             ;* machine linked list.
0030+  0000             ;********************************************************
0031+  0000             ;* Next:	This is the pointer to the next thread in 
0032+  0000             ;* 		the linked list. The VM requires this to 
0033+  0000             ;*		move about the list of threads. This is 
0034+  0000             ;* 		set by the VM thread handlers and does not
0035+  0000             ;*          need to be manually fiddled with by the 
0036+  0000             ;*          game program as it is automatic.
0037+  0000             ;*
0038+  0000             ;* Timer:	This is a byte timer (0-255) that holds the 
0039+  0000             ;*          number of IRQ's counts required before the 
0040+  0000             ;*          thread is executed. This is set by the 
0041+  0000             ;*          programmer for delays between executions.	
0042+  0000             ;*
0043+  0000             ;* Vars:	When a thread is created, the originating
0044+  0000             ;*          program may push up to 8 additional bytes
0045+  0000             ;* 		of data onto the stack which will then be
0046+  0000             ;*          placed into these 8 byte holders.
0047+  0000             ;*
0048+  0000             ;* PC:	This is the address of the program entry 
0049+  0000             ;*          point that will be executed when the thread
0050+  0000             ;*       	timer expires.
0051+  0000             ;*
0052+  0000             ;* ID:	The thread ID is a number that identifies 
0053+  0000             ;* 		the thread type. The ID defintions are all
0054+  0000             ;*		decided by the programmer except for thread
0055+  0000             ;*		ID #06 which is a general 'end-of-ball' terminated
0056+  0000             ;*		thread. Because the VM can destroy groups of 
0057+  0000             ;* 		threads by ID and branch on existence of threads
0058+  0000             ;*    	with certain ID's, this is a very important
0059+  0000             ;*		design consideration. See the programming 
0060+  0000             ;*  		manual for more information.
0061+  0000             ;*	
0062+  0000             ;* RegA:	This holds the value that was contained in 
0063+  0000             ;*		the CPU register A when the Thread was created.
0064+  0000             ;*
0065+  0000             ;* RegB:	Similar to above, holds the value of CPU reg B.
0066+  0000             ;*
0067+  0000             ;* RegX:	Again, holds the value of the X register upon
0068+  0000             ;*		thread creation.
0069+  0000             ;*
0070+  0000             ;************************************************************
0071+  0000             
0072+  0000             threadobj_next	.equ	$00
0073+  0000             threadobj_timer	.equ	$02
0074+  0000             threadobj_var1	.equ	$03
0075+  0000             threadobj_var2	.equ	$04
0076+  0000             threadobj_var3	.equ	$05
0077+  0000             threadobj_var4	.equ	$06
0078+  0000             threadobj_var5	.equ	$07
0079+  0000             threadobj_var6	.equ	$09
0080+  0000             threadobj_var7	.equ	$09
0081+  0000             threadobj_var8	.equ	$0a
0082+  0000             threadobj_pc	.equ	$0b
0083+  0000             threadobj_id	.equ	$0d
0084+  0000             threadobj_rega	.equ	$0e
0085+  0000             threadobj_regb	.equ	$0f
0086+  0000             threadobj_regx	.equ	$10
0087+  0000             
0088+  0000             ;********************************************************
0089+  0000             ;* Now define some standard RAM locations etc...
0090+  0000             ;********************************************************
0091+  0000             rega	.equ	$00
0092+  0000             regb	.equ	$01
0093+  0000             
0094+  0000             ;********************************************************
0095+  0000             ;* Switch Table Equates
0096+  0000             ;********************************************************
0097+  0000             #define	switchentry(a,b)	.db a /.dw b
0098+  0000             
0099+  0000             sf_wml7	.equ	$80
0100+  0000             sf_code 	.equ 	$00
0101+  0000             sf_tilt	.equ	$40
0102+  0000             sf_gameover	.equ	$20
0103+  0000             sf_enabled	.equ	$10
0104+  0000             sf_instant	.equ	$08
0105+  0000             
0106+  0000             ;********************************************************
0107+  0000             ;* Test for our current execution mode, CODE or WML7
0108+  0000             ;* If we think the programmer has their code wrong, 
0109+  0000             ;* then throw an error.
0110+  0000             ;********************************************************
0111+  0000             ;_MODECPU_         .equ  $00
0112+  0000             ;_MODEWML_         .equ  $80
0113+  0000             ;_CURRENTMODE_     .equ  _MODECPU_
0114+  0000             ;
0115+  0000             ;#define     _SETMODECPU_      \_CURRENTMODE_     .set  _MODECPU_
0116+  0000             ;#define     _SETMODEWML_      \_CURRENTMODE_     .set  _MODEWML_
0117+  0000             ;
0118+  0000             ;#define     _CHECKWML_        \#if _CURRENTMODE_ != _MODEWML_
0119+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect WML codes now, are you sure your code is structured properly?"
0120+  0000             ;#defcont                      \#endif
0121+  0000             ;
0122+  0000             ;#define     _CHECKCPU_        \#if _CURRENTMODE_ != _MODECPU_
0123+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect CPU codes now, are you sure your code is structured properly?"
0124+  0000             ;#defcont                      \#endif
0125+  0000             
0126+  0000             ;********************************************************
0127+  0000             ;* Define our Level 7 macros.
0128+  0000             ;********************************************************
0129+  0000             
0130+  0000             #define 	PC100_	\.db $00	
0131+  0000             #define 	NOP_		\.db $01	
0132+  0000             #define	MRTS_		\.db $02
0133+  0000             #define	KILL_		\.db $03	
0134+  0000             #define 	CPUX_		\.db $04
0135+  0000             #define	SPEC_		\.db $05	
0136+  0000             #define	EB_		\.db $06	
0137+  0000             
0138+  0000             ;********************************************************
0139+  0000             ;* Lamp Macro Definition: These take care of turning lamps
0140+  0000             ;*                        on/off and doing the basic lamp
0141+  0000             ;*                        effects.
0142+  0000             ;********************************************************
0143+  0000             #define	BITX_(x,a)		      \.db x,a
0144+  0000             #define	BITX_(x,a,b)		\.db x,((a&$7F)+$80),b
0145+  0000             #define	BITX_(x,a,b,c)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),c
0146+  0000             #define	BITX_(x,a,b,c,d)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0147+  0000             #define	BITX_(x,a,b,c,d,e)	\.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0148+  0000             #define	BITX_(x,a,b,c,d,e,f)    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
0149+  0000             #define	BITX_(x,a,b,c,d,e,f,g)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
0150+  0000             #define	BITX_(x,a,b,c,d,e,f,g,h)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7f)+$80),h
0151+  0000             #define	BITX_(x,a,b,c,d,e,f,g,h,i)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7f)+$80),((h&$7f)+$80),i
0152+  0000             
0153+  0000             ;*****************************************************************
0154+  0000             ;* Macros 1X_
0155+  0000             ;*****************************************************************
0156+  0000             #define	BITON_(a)		      \BITX_($10,a)
0157+  0000             #define	BITON_(a,b)		      \BITX_($10,a,b)
0158+  0000             #define	BITON_(a,b,c)	      \BITX_($10,a,b,c)
0159+  0000             #define	BITON_(a,b,c,d)	      \BITX_($10,a,b,c,d)
0160+  0000             #define	BITON_(a,b,c,d,e)	      \BITX_($10,a,b,c,d,e)
0161+  0000             #define	BITON_(a,b,c,d,e,f)     \BITX_($10,a,b,c,d,e,f)
0162+  0000             #define	BITON_(a,b,c,d,e,f,g)   \BITX_($10,a,b,c,d,e,f,g)
0163+  0000             
0164+  0000             #define	BITOFF_(a)		      \BITX_($11,a)            
0165+  0000             #define	BITOFF_(a,b)		\BITX_($11,a,b)          
0166+  0000             #define	BITOFF_(a,b,c)	      \BITX_($11,a,b,c)        
0167+  0000             #define	BITOFF_(a,b,c,d)	      \BITX_($11,a,b,c,d)      
0168+  0000             #define	BITOFF_(a,b,c,d,e)	\BITX_($11,a,b,c,d,e)    
0169+  0000             #define	BITOFF_(a,b,c,d,e,f)    \BITX_($11,a,b,c,d,e,f)  
0170+  0000             #define	BITOFF_(a,b,c,d,e,f,g)  \BITX_($11,a,b,c,d,e,f,g)
0171+  0000                                                 
0172+  0000             #define	BITINV_(a)		      \BITX_($12,a)            
0173+  0000             #define	BITINV_(a,b)		\BITX_($12,a,b)          
0174+  0000             #define	BITINV_(a,b,c)	      \BITX_($12,a,b,c)        
0175+  0000             #define	BITINV_(a,b,c,d)	      \BITX_($12,a,b,c,d)      
0176+  0000             #define	BITINV_(a,b,c,d,e)	\BITX_($12,a,b,c,d,e)    
0177+  0000             #define	BITINV_(a,b,c,d,e,f)    \BITX_($12,a,b,c,d,e,f)  
0178+  0000             #define	BITINV_(a,b,c,d,e,f,g)  \BITX_($12,a,b,c,d,e,f,g)
0179+  0000             
0180+  0000             #define	BITFL_(a)		      \BITX_($13,a)            
0181+  0000             #define	BITFL_(a,b)			\BITX_($13,a,b)          
0182+  0000             #define	BITFL_(a,b,c)	      \BITX_($13,a,b,c)        
0183+  0000             #define	BITFL_(a,b,c,d)	      \BITX_($13,a,b,c,d)      
0184+  0000             #define	BITFL_(a,b,c,d,e)		\BITX_($13,a,b,c,d,e)    
0185+  0000             #define	BITFL_(a,b,c,d,e,f)    	\BITX_($13,a,b,c,d,e,f)  
0186+  0000             #define	BITFL_(a,b,c,d,e,f,g)  	\BITX_($13,a,b,c,d,e,f,g)
0187+  0000              
0188+  0000             #define	BITONP_(a)		      \BITX_($14,a)            
0189+  0000             #define	BITONP_(a,b)		\BITX_($14,a,b)          
0190+  0000             #define	BITONP_(a,b,c)	      \BITX_($14,a,b,c)        
0191+  0000             #define	BITONP_(a,b,c,d)	      \BITX_($14,a,b,c,d)      
0192+  0000             #define	BITONP_(a,b,c,d,e)	\BITX_($14,a,b,c,d,e)    
0193+  0000             #define	BITONP_(a,b,c,d,e,f)    \BITX_($14,a,b,c,d,e,f)  
0194+  0000             #define	BITONP_(a,b,c,d,e,f,g)  \BITX_($14,a,b,c,d,e,f,g)
0195+  0000             
0196+  0000             #define	BITOFFP_(a)		      \BITX_($15,a)            
0197+  0000             #define	BITOFFP_(a,b)		\BITX_($15,a,b)          
0198+  0000             #define	BITOFFP_(a,b,c)	      \BITX_($15,a,b,c)        
0199+  0000             #define	BITOFFP_(a,b,c,d)	      \BITX_($15,a,b,c,d)      
0200+  0000             #define	BITOFFP_(a,b,c,d,e)	\BITX_($15,a,b,c,d,e)    
0201+  0000             #define	BITOFFP_(a,b,c,d,e,f)   \BITX_($15,a,b,c,d,e,f)  
0202+  0000             #define	BITOFFP_(a,b,c,d,e,f,g) \BITX_($15,a,b,c,d,e,f,g)
0203+  0000             
0204+  0000             #define	BITINVP_(a)		      \BITX_($16,a)            
0205+  0000             #define	BITINVP_(a,b)		\BITX_($16,a,b)          
0206+  0000             #define	BITINVP_(a,b,c)	      \BITX_($16,a,b,c)        
0207+  0000             #define	BITINVP_(a,b,c,d)	      \BITX_($16,a,b,c,d)      
0208+  0000             #define	BITINVP_(a,b,c,d,e)	\BITX_($16,a,b,c,d,e)    
0209+  0000             #define	BITINVP_(a,b,c,d,e,f)   \BITX_($16,a,b,c,d,e,f)  
0210+  0000             #define	BITINVP_(a,b,c,d,e,f,g) \BITX_($16,a,b,c,d,e,f,g)
0211+  0000             
0212+  0000             #define	BITFLP_(a)		      \BITX_($17,a)            
0213+  0000             #define	BITFLP_(a,b)		\BITX_($17,a,b)          
0214+  0000             #define	BITFLP_(a,b,c)	      \BITX_($17,a,b,c)        
0215+  0000             #define	BITFLP_(a,b,c,d)	      \BITX_($17,a,b,c,d)      
0216+  0000             #define	BITFLP_(a,b,c,d,e)	\BITX_($17,a,b,c,d,e)    
0217+  0000             #define	BITFLP_(a,b,c,d,e,f)   	\BITX_($17,a,b,c,d,e,f)  
0218+  0000             #define	BITFLP_(a,b,c,d,e,f,g) 	\BITX_($17,a,b,c,d,e,f,g)
0219+  0000             
0220+  0000             ;************************
0221+  0000             ;* Lamp/Bit Effects
0222+  0000             ;************************
0223+  0000             #define	RSET0_(a)		      \BITX_($18,a)            
0224+  0000             #define	RSET0_(a,b)			\BITX_($18,a,b)          
0225+  0000             #define	RSET0_(a,b,c)	      \BITX_($18,a,b,c)        
0226+  0000             #define	RSET0_(a,b,c,d)	      \BITX_($18,a,b,c,d)      
0227+  0000             #define	RSET0_(a,b,c,d,e)		\BITX_($18,a,b,c,d,e)    
0228+  0000             #define	RSET0_(a,b,c,d,e,f)   	\BITX_($18,a,b,c,d,e,f)  
0229+  0000             #define	RSET0_(a,b,c,d,e,f,g) 	\BITX_($18,a,b,c,d,e,f,g)
0230+  0000             
0231+  0000             #define	RCLR0_(a)		      \BITX_($19,a)            
0232+  0000             #define	RCLR0_(a,b)			\BITX_($19,a,b)          
0233+  0000             #define	RCLR0_(a,b,c)	      \BITX_($19,a,b,c)        
0234+  0000             #define	RCLR0_(a,b,c,d)	      \BITX_($19,a,b,c,d)      
0235+  0000             #define	RCLR0_(a,b,c,d,e)		\BITX_($19,a,b,c,d,e)    
0236+  0000             #define	RCLR0_(a,b,c,d,e,f)   	\BITX_($19,a,b,c,d,e,f)  
0237+  0000             #define	RCLR0_(a,b,c,d,e,f,g) 	\BITX_($19,a,b,c,d,e,f,g)
0238+  0000             
0239+  0000             #define	RSET1R0_(a)		      \BITX_($1A,a)            
0240+  0000             #define	RSET1R0_(a,b)		\BITX_($1A,a,b)          
0241+  0000             #define	RSET1R0_(a,b,c)	      \BITX_($1A,a,b,c)        
0242+  0000             #define	RSET1R0_(a,b,c,d)	      \BITX_($1A,a,b,c,d)      
0243+  0000             #define	RSET1R0_(a,b,c,d,e)	\BITX_($1A,a,b,c,d,e)    
0244+  0000             #define	RSET1R0_(a,b,c,d,e,f)   \BITX_($1A,a,b,c,d,e,f)  
0245+  0000             #define	RSET1R0_(a,b,c,d,e,f,g) \BITX_($1A,a,b,c,d,e,f,g)
0246+  0000             
0247+  0000             #define	RSET1RC0_(a)		\BITX_($1B,a)            
0248+  0000             #define	RSET1RC0_(a,b)		\BITX_($1B,a,b)          
0249+  0000             #define	RSET1RC0_(a,b,c)	      \BITX_($1B,a,b,c)        
0250+  0000             #define	RSET1RC0_(a,b,c,d)	\BITX_($1B,a,b,c,d)      
0251+  0000             #define	RSET1RC0_(a,b,c,d,e)	\BITX_($1B,a,b,c,d,e)    
0252+  0000             #define	RSET1RC0_(a,b,c,d,e,f)  \BITX_($1B,a,b,c,d,e,f)  
0253+  0000             #define	RSET1RC0_(a,b,c,d,e,f,g) \BITX_($1B,a,b,c,d,e,f,g)
0254+  0000             
0255+  0000             #define	RCLR1L0_(a)		      \BITX_($1C,a)            
0256+  0000             #define	RCLR1L0_(a,b)		\BITX_($1C,a,b)          
0257+  0000             #define	RCLR1L0_(a,b,c)	      \BITX_($1C,a,b,c)        
0258+  0000             #define	RCLR1L0_(a,b,c,d)	      \BITX_($1C,a,b,c,d)      
0259+  0000             #define	RCLR1L0_(a,b,c,d,e)	\BITX_($1C,a,b,c,d,e)    
0260+  0000             #define	RCLR1L0_(a,b,c,d,e,f)   \BITX_($1C,a,b,c,d,e,f)  
0261+  0000             #define	RCLR1L0_(a,b,c,d,e,f,g) \BITX_($1C,a,b,c,d,e,f,g)
0262+  0000             
0263+  0000             #define	RROL0_(a)		      \BITX_($1D,a)            
0264+  0000             #define	RROL0_(a,b)			\BITX_($1D,a,b)          
0265+  0000             #define	RROL0_(a,b,c)	      \BITX_($1D,a,b,c)        
0266+  0000             #define	RROL0_(a,b,c,d)	      \BITX_($1D,a,b,c,d)      
0267+  0000             #define	RROL0_(a,b,c,d,e)		\BITX_($1D,a,b,c,d,e)    
0268+  0000             #define	RROL0_(a,b,c,d,e,f)   	\BITX_($1D,a,b,c,d,e,f)  
0269+  0000             #define	RROL0_(a,b,c,d,e,f,g) 	\BITX_($1D,a,b,c,d,e,f,g)
0270+  0000             #define	RROL0_(a,b,c,d,e,f,g,h,i) 	\BITX_($1D,a,b,c,d,e,f,g,h,i)
0271+  0000             
0272+  0000             #define	RROR0_(a)		      \BITX_($1E,a)            
0273+  0000             #define	RROR0_(a,b)			\BITX_($1E,a,b)          
0274+  0000             #define	RROR0_(a,b,c)	      \BITX_($1E,a,b,c)        
0275+  0000             #define	RROR0_(a,b,c,d)	      \BITX_($1E,a,b,c,d)      
0276+  0000             #define	RROR0_(a,b,c,d,e)		\BITX_($1E,a,b,c,d,e)    
0277+  0000             #define	RROR0_(a,b,c,d,e,f)   	\BITX_($1E,a,b,c,d,e,f)  
0278+  0000             #define	RROR0_(a,b,c,d,e,f,g) 	\BITX_($1E,a,b,c,d,e,f,g)
0279+  0000             
0280+  0000             #define	RINV0_(a)		      \BITX_($1F,a)            
0281+  0000             #define	RINV0_(a,b)			\BITX_($1F,a,b)          
0282+  0000             #define	RINV0_(a,b,c)	      \BITX_($1F,a,b,c)        
0283+  0000             #define	RINV0_(a,b,c,d)	      \BITX_($1F,a,b,c,d)      
0284+  0000             #define	RINV0_(a,b,c,d,e)		\BITX_($1F,a,b,c,d,e)    
0285+  0000             #define	RINV0_(a,b,c,d,e,f)   	\BITX_($1F,a,b,c,d,e,f)  
0286+  0000             #define	RINV0_(a,b,c,d,e,f,g) 	\BITX_($1F,a,b,c,d,e,f,g)
0287+  0000             
0288+  0000             ;*****************************************************************
0289+  0000             ;* Macros 2X_
0290+  0000             ;*****************************************************************
0291+  0000             
0292+  0000             #define	BITON2_(a)		      	\BITX_($20,a)
0293+  0000             #define	BITON2_(a,b)			\BITX_($20,a,b)
0294+  0000             #define	BITON2_(a,b,c)	      	\BITX_($20,a,b,c)
0295+  0000             #define	BITON2_(a,b,c,d)	      	\BITX_($20,a,b,c,d)
0296+  0000             #define	BITON2_(a,b,c,d,e)		\BITX_($20,a,b,c,d,e)
0297+  0000             #define	BITON2_(a,b,c,d,e,f)    	\BITX_($20,a,b,c,d,e,f)
0298+  0000             #define	BITON2_(a,b,c,d,e,f,g)  	\BITX_($20,a,b,c,d,e,f,g)
0299+  0000             
0300+  0000             #define	BITOFF2_(a)		      	\BITX_($21,a)            
0301+  0000             #define	BITOFF2_(a,b)			\BITX_($21,a,b)          
0302+  0000             #define	BITOFF2_(a,b,c)	      	\BITX_($21,a,b,c)        
0303+  0000             #define	BITOFF2_(a,b,c,d)	      	\BITX_($21,a,b,c,d)      
0304+  0000             #define	BITOFF2_(a,b,c,d,e)		\BITX_($21,a,b,c,d,e)    
0305+  0000             #define	BITOFF2_(a,b,c,d,e,f)   	\BITX_($21,a,b,c,d,e,f)  
0306+  0000             #define	BITOFF2_(a,b,c,d,e,f,g) 	\BITX_($21,a,b,c,d,e,f,g)
0307+  0000                                                 
0308+  0000             #define	BITINV2_(a)		      	\BITX_($22,a)            
0309+  0000             #define	BITINV2_(a,b)			\BITX_($22,a,b)          
0310+  0000             #define	BITINV2_(a,b,c)	      	\BITX_($22,a,b,c)        
0311+  0000             #define	BITINV2_(a,b,c,d)	      	\BITX_($22,a,b,c,d)      
0312+  0000             #define	BITINV2_(a,b,c,d,e)		\BITX_($22,a,b,c,d,e)    
0313+  0000             #define	BITINV2_(a,b,c,d,e,f)   	\BITX_($22,a,b,c,d,e,f)  
0314+  0000             #define	BITINV2_(a,b,c,d,e,f,g) 	\BITX_($22,a,b,c,d,e,f,g)
0315+  0000             
0316+  0000             #define	BITFL2_(a)		      	\BITX_($23,a)            
0317+  0000             #define	BITFL2_(a,b)			\BITX_($23,a,b)          
0318+  0000             #define	BITFL2_(a,b,c)	      	\BITX_($23,a,b,c)        
0319+  0000             #define	BITFL2_(a,b,c,d)	      	\BITX_($23,a,b,c,d)      
0320+  0000             #define	BITFL2_(a,b,c,d,e)		\BITX_($23,a,b,c,d,e)    
0321+  0000             #define	BITFL2_(a,b,c,d,e,f)    	\BITX_($23,a,b,c,d,e,f)  
0322+  0000             #define	BITFL2_(a,b,c,d,e,f,g)  	\BITX_($23,a,b,c,d,e,f,g)
0323+  0000              
0324+  0000             #define	BITONP2_(a)		      	\BITX_($24,a)            
0325+  0000             #define	BITONP2_(a,b)			\BITX_($24,a,b)          
0326+  0000             #define	BITONP2_(a,b,c)	      	\BITX_($24,a,b,c)        
0327+  0000             #define	BITONP2_(a,b,c,d)	      	\BITX_($24,a,b,c,d)      
0328+  0000             #define	BITONP2_(a,b,c,d,e)		\BITX_($24,a,b,c,d,e)    
0329+  0000             #define	BITONP2_(a,b,c,d,e,f)   	\BITX_($24,a,b,c,d,e,f)  
0330+  0000             #define	BITONP2_(a,b,c,d,e,f,g) 	\BITX_($24,a,b,c,d,e,f,g)
0331+  0000             
0332+  0000             #define	BITOFFP2_(a)			\BITX_($25,a)            
0333+  0000             #define	BITOFFP2_(a,b)			\BITX_($25,a,b)          
0334+  0000             #define	BITOFFP2_(a,b,c)	      	\BITX_($25,a,b,c)        
0335+  0000             #define	BITOFFP2_(a,b,c,d)		\BITX_($25,a,b,c,d)      
0336+  0000             #define	BITOFFP2_(a,b,c,d,e)		\BITX_($25,a,b,c,d,e)    
0337+  0000             #define	BITOFFP2_(a,b,c,d,e,f)  	\BITX_($25,a,b,c,d,e,f)  
0338+  0000             #define	BITOFFP2_(a,b,c,d,e,f,g)	\BITX_($25,a,b,c,d,e,f,g)
0339+  0000             
0340+  0000             #define	BITINVP2_(a)			\BITX_($26,a)            
0341+  0000             #define	BITINVP2_(a,b)			\BITX_($26,a,b)          
0342+  0000             #define	BITINVP2_(a,b,c)	      	\BITX_($26,a,b,c)        
0343+  0000             #define	BITINVP2_(a,b,c,d)		\BITX_($26,a,b,c,d)      
0344+  0000             #define	BITINVP2_(a,b,c,d,e)		\BITX_($26,a,b,c,d,e)    
0345+  0000             #define	BITINVP2_(a,b,c,d,e,f)   	\BITX_($26,a,b,c,d,e,f)  
0346+  0000             #define	BITINVP2_(a,b,c,d,e,f,g) 	\BITX_($26,a,b,c,d,e,f,g)
0347+  0000             
0348+  0000             #define	BITFLP2_(a)		      	\BITX_($27,a)            
0349+  0000             #define	BITFLP2_(a,b)			\BITX_($27,a,b)          
0350+  0000             #define	BITFLP2_(a,b,c)	      	\BITX_($27,a,b,c)        
0351+  0000             #define	BITFLP2_(a,b,c,d)	      	\BITX_($27,a,b,c,d)      
0352+  0000             #define	BITFLP2_(a,b,c,d,e)		\BITX_($27,a,b,c,d,e)    
0353+  0000             #define	BITFLP2_(a,b,c,d,e,f)   	\BITX_($27,a,b,c,d,e,f)  
0354+  0000             #define	BITFLP2_(a,b,c,d,e,f,g) 	\BITX_($27,a,b,c,d,e,f,g)
0355+  0000             
0356+  0000             ;************************
0357+  0000             ;* Lamp/Bit Effects
0358+  0000             ;************************
0359+  0000             #define	RSET1_(a)		      \BITX_($28,a)            
0360+  0000             #define	RSET1_(a,b)			\BITX_($28,a,b)          
0361+  0000             #define	RSET1_(a,b,c)	      \BITX_($28,a,b,c)        
0362+  0000             #define	RSET1_(a,b,c,d)	      \BITX_($28,a,b,c,d)      
0363+  0000             #define	RSET1_(a,b,c,d,e)		\BITX_($28,a,b,c,d,e)    
0364+  0000             #define	RSET1_(a,b,c,d,e,f)   	\BITX_($28,a,b,c,d,e,f)  
0365+  0000             #define	RSET1_(a,b,c,d,e,f,g) 	\BITX_($28,a,b,c,d,e,f,g)
0366+  0000             
0367+  0000             #define	RCLR1_(a)		      \BITX_($29,a)            
0368+  0000             #define	RCLR1_(a,b)			\BITX_($29,a,b)          
0369+  0000             #define	RCLR1_(a,b,c)	      \BITX_($29,a,b,c)        
0370+  0000             #define	RCLR1_(a,b,c,d)	      \BITX_($29,a,b,c,d)      
0371+  0000             #define	RCLR1_(a,b,c,d,e)		\BITX_($29,a,b,c,d,e)    
0372+  0000             #define	RCLR1_(a,b,c,d,e,f)   	\BITX_($29,a,b,c,d,e,f)  
0373+  0000             #define	RCLR1_(a,b,c,d,e,f,g) 	\BITX_($29,a,b,c,d,e,f,g)
0374+  0000             
0375+  0000             #define	RSET1R1_(a)		      \BITX_($2A,a)            
0376+  0000             #define	RSET1R1_(a,b)		\BITX_($2A,a,b)          
0377+  0000             #define	RSET1R1_(a,b,c)	      \BITX_($2A,a,b,c)        
0378+  0000             #define	RSET1R1_(a,b,c,d)	      \BITX_($2A,a,b,c,d)      
0379+  0000             #define	RSET1R1_(a,b,c,d,e)	\BITX_($2A,a,b,c,d,e)    
0380+  0000             #define	RSET1R1_(a,b,c,d,e,f)   \BITX_($2A,a,b,c,d,e,f)  
0381+  0000             #define	RSET1R1_(a,b,c,d,e,f,g) \BITX_($2A,a,b,c,d,e,f,g)
0382+  0000             
0383+  0000             #define	RSET1RC1_(a)		\BITX_($2B,a)            
0384+  0000             #define	RSET1RC1_(a,b)		\BITX_($2B,a,b)          
0385+  0000             #define	RSET1RC1_(a,b,c)	      \BITX_($2B,a,b,c)        
0386+  0000             #define	RSET1RC1_(a,b,c,d)	\BITX_($2B,a,b,c,d)      
0387+  0000             #define	RSET1RC1_(a,b,c,d,e)	\BITX_($2B,a,b,c,d,e)    
0388+  0000             #define	RSET1RC1_(a,b,c,d,e,f)  \BITX_($2B,a,b,c,d,e,f)  
0389+  0000             #define	RSET1RC1_(a,b,c,d,e,f,g) \BITX_($2B,a,b,c,d,e,f,g)
0390+  0000             
0391+  0000             #define	RCLR1L1_(a)		      \BITX_($2C,a)            
0392+  0000             #define	RCLR1L1_(a,b)		\BITX_($2C,a,b)          
0393+  0000             #define	RCLR1L1_(a,b,c)	      \BITX_($2C,a,b,c)        
0394+  0000             #define	RCLR1L1_(a,b,c,d)	      \BITX_($2C,a,b,c,d)      
0395+  0000             #define	RCLR1L1_(a,b,c,d,e)	\BITX_($2C,a,b,c,d,e)    
0396+  0000             #define	RCLR1L1_(a,b,c,d,e,f)   \BITX_($2C,a,b,c,d,e,f)  
0397+  0000             #define	RCLR1L1_(a,b,c,d,e,f,g) \BITX_($2C,a,b,c,d,e,f,g)
0398+  0000             
0399+  0000             #define	RROL1_(a)		      \BITX_($2D,a)            
0400+  0000             #define	RROL1_(a,b)			\BITX_($2D,a,b)          
0401+  0000             #define	RROL1_(a,b,c)	      \BITX_($2D,a,b,c)        
0402+  0000             #define	RROL1_(a,b,c,d)	      \BITX_($2D,a,b,c,d)      
0403+  0000             #define	RROL1_(a,b,c,d,e)		\BITX_($2D,a,b,c,d,e)    
0404+  0000             #define	RROL1_(a,b,c,d,e,f)   	\BITX_($2D,a,b,c,d,e,f)  
0405+  0000             #define	RROL1_(a,b,c,d,e,f,g) 	\BITX_($2D,a,b,c,d,e,f,g)
0406+  0000             
0407+  0000             #define	RROR1_(a)		      \BITX_($2E,a)            
0408+  0000             #define	RROR1_(a,b)			\BITX_($2E,a,b)          
0409+  0000             #define	RROR1_(a,b,c)	      \BITX_($2E,a,b,c)        
0410+  0000             #define	RROR1_(a,b,c,d)	      \BITX_($2E,a,b,c,d)      
0411+  0000             #define	RROR1_(a,b,c,d,e)		\BITX_($2E,a,b,c,d,e)    
0412+  0000             #define	RROR1_(a,b,c,d,e,f)   	\BITX_($2E,a,b,c,d,e,f)  
0413+  0000             #define	RROR1_(a,b,c,d,e,f,g) 	\BITX_($2E,a,b,c,d,e,f,g)
0414+  0000             
0415+  0000             #define	RINV1_(a)		      \BITX_($2F,a)            
0416+  0000             #define	RINV1_(a,b)			\BITX_($2F,a,b)          
0417+  0000             #define	RINV1_(a,b,c)	      \BITX_($2F,a,b,c)        
0418+  0000             #define	RINV1_(a,b,c,d)	      \BITX_($2F,a,b,c,d)      
0419+  0000             #define	RINV1_(a,b,c,d,e)		\BITX_($2F,a,b,c,d,e)    
0420+  0000             #define	RINV1_(a,b,c,d,e,f)   	\BITX_($2F,a,b,c,d,e,f)  
0421+  0000             #define	RINV1_(a,b,c,d,e,f,g) 	\BITX_($2F,a,b,c,d,e,f,g)
0422+  0000             
0423+  0000             
0424+  0000             ;********************************************************
0425+  0000             ;* Solenoid Macro Definition: Up to 15 Solenoids are Supported
0426+  0000             ;* 
0427+  0000             ;* The macro takes a coded value of the solenoid number 
0428+  0000             ;* and the number of IRQ's to leave the solenoid on.
0429+  0000             ;* You can define the solenoid number plus the time by using
0430+  0000             ;* the equates following this macro definition...
0431+  0000             ;* 
0432+  0000             ;* Example #1:  Turn on Solenoid #1 for 4 IRQ cycles
0433+  0000             ;*
0434+  0000             ;*          sol_1_on    .equ  $00+SOLENOID_ON_4_CYCLES
0435+  0000             ;*          sol_1_off   .equ  $00+SOLENOID_OFF
0436+  0000             ;* 
0437+  0000             ;* Then use the SOL_ macro...
0438+  0000             ;*
0439+  0000             ;*    Turn it on:       SOL_(sol_1_on)
0440+  0000             ;*    Turn it off:      SOL_(sol_1_off)
0441+  0000             ;*
0442+  0000             ;* Example #2:  Turn on Solenoid #15 indefinitely, and Solenoid #6 for 2 IRQ cycles
0443+  0000             ;*
0444+  0000             ;*          sol_15_on   .equ  $0E+SOLENOID_ON_LATCH
0445+  0000             ;*          sol_15_off  .equ  $0E+SOLENOID_OFF
0446+  0000             ;*
0447+  0000             ;*          sol_2_on    .equ  $01+SOLENOID_ON_2_CYCLES
0448+  0000             ;*          sol_2_off   .equ  $01+SOLENOID_OFF
0449+  0000             ;* 
0450+  0000             ;* Then use the SOL_ macro...
0451+  0000             ;*
0452+  0000             ;*    Turn them on:       SOL_(sol_15_on,sol_2_on)
0453+  0000             ;*    Turn them off:      SOL_(sol_15_off,sol_2_off)
0454+  0000             ;********************************************************
0455+  0000             #define	SOL_(a)		                  \.db $31,a
0456+  0000             #define	SOL_(a,b)		                  \.db $32,a,b
0457+  0000             #define 	SOL_(a,b,c)		                  \.db $33,a,b,c
0458+  0000             #define	SOL_(a,b,c,d)	                  \.db $34,a,b,c,d
0459+  0000             #define	SOL_(a,b,c,d,e)	                  \.db $35,a,b,c,d,e
0460+  0000             #define	SOL_(a,b,c,d,e,f)	                  \.db $36,a,b,c,d,e,f
0461+  0000             #define	SOL_(a,b,c,d,e,f,g)	            \.db $37,a,b,c,d,e,f,g
0462+  0000             #define	SOL_(a,b,c,d,e,f,g,h)	            \.db $38,a,b,c,d,e,f,g,h
0463+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i)	            \.db $39,a,b,c,d,e,f,g,h,i
0464+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j)	      \.db $3A,a,b,c,d,e,f,g,h,i,j
0465+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k)	      \.db $3B,a,b,c,d,e,f,g,h,i,j,k
0466+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l)	      \.db $3C,a,b,c,d,e,f,g,h,i,j,k,l
0467+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m)	\.db $3D,a,b,c,d,e,f,g,h,i,j,k,l,m
0468+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n)	\.db $3E,a,b,c,d,e,f,g,h,i,j,k,l,m,n
0469+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)	\.db $3F,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o
0470+  0000             
0471+  0000             ;********************************************************
0472+  0000             ;* some additional solenoid defines for timing
0473+  0000             ;* Use these in the top of your game definition to specify 
0474+  0000             ;* static lables for each solenoid
0475+  0000             ;********************************************************
0476+  0000             SOLENOID_ON_1_CYCLES       .equ  $10
0477+  0000             SOLENOID_ON_2_CYCLES       .equ  $20
0478+  0000             SOLENOID_ON_3_CYCLES       .equ  $30
0479+  0000             SOLENOID_ON_4_CYCLES       .equ  $40
0480+  0000             SOLENOID_ON_5_CYCLES       .equ  $50
0481+  0000             SOLENOID_ON_6_CYCLES       .equ  $60
0482+  0000             SOLENOID_ON_LATCH          .equ  $F0
0483+  0000             SOLENOID_OFF               .equ  $00
0484+  0000             
0485+  0000             ;********************************************************
0486+  0000             ;* Macros 40-43: Static Length, easy
0487+  0000             ;********************************************************
0488+  0000             #define	PTSND_(snd,count,unit)	\.db $40,snd      \ ADDPOINTS_(count,unit)
0489+  0000             
0490+  0000             #define	PTCHIME_(count,unit)	\.db $41    \ ADDPOINTS_(count,unit)
0491+  0000             
0492+  0000             #define	POINTS_(count,unit)	\.db $42    \ ADDPOINTS_(count,unit)
0493+  0000             
0494+  0000             #define	PTSDIG_(count,unit)	\.db $43    \ ADDPOINTS_(count,unit)
0495+  0000             
0496+  0000             #define     ADDPOINTS_(count,unit)  \#if ((unit < 10) & (count <= 32))
0497+  0000             #defcont				      \	.error "Point unit must be multples of 10 and count must be less than 33"
0498+  0000             #defcont				      \#else
0499+  0000             #defcont					      \#if (unit == 10)
0500+  0000             #defcont					      \	.db (((count)<<3)&$F8)+1
0501+  0000             #defcont					      \#else 
0502+  0000             #defcont					      	\#if (unit == 100)
0503+  0000             #defcont						      \	.db (((count)<<3)&$F8)+2
0504+  0000             #defcont						      \#else 
0505+  0000             #defcont							      \#if (unit == 1000)
0506+  0000             #defcont							      \	.db (((count)<<3)&$F8)+3
0507+  0000             #defcont							      \#else 
0508+  0000             #defcont								      \#if (unit == 10000)
0509+  0000             #defcont								      \	.db (((count)<<3)&$F8)+4
0510+  0000             #defcont								      \#else 
0511+  0000             #defcont									      \#if (unit == 100000)
0512+  0000             #defcont									      \	.db (((count)<<3)&$F8)+5
0513+  0000             #defcont									      \#else 
0514+  0000             #defcont									      \	.error "Macros only support points under 1,000,000 points"
0515+  0000             #defcont									      \#endif
0516+  0000             #defcont								      \#endif
0517+  0000             #defcont							      \#endif
0518+  0000             #defcont						      \#endif
0519+  0000             #defcont					      \#endif
0520+  0000             #defcont				      \#endif
0521+  0000             
0522+  0000             ;********************************************************
0523+  0000             ;* Macros 44-4F: Define temporary execution of CPU code.
0524+  0000             ;*               The length of bytes to execute is in 
0525+  0000             ;*               the lower nibble and must be between
0526+  0000             ;*               4-f. Therefore, number of bytes to 
0527+  0000             ;*               execute must be between 2 and 13.
0528+  0000             :*
0529+  0000             ;* There are two macros defined here, the first is the
0530+  0000             ;* new style macro where it will automatically calculate
0531+  0000             ;* the number of opcode bytes that are executed. This 
0532+  0000             ;* style requires and end tag for the macro called EXEEND_
0533+  0000             ;* that marks where execution returns to WML7.
0534+  0000             ;*
0535+  0000             ;* The old style macro does not require an end tag but
0536+  0000             ;* does require you to calcuate the number of bytes that
0537+  0000             ;* will be executed as native 680X code. This is obviously
0538+  0000             ;* more tedious but I left it here for some reason. 
0539+  0000             ;********************************************************
0540+  0000             #define     EXE_              \.push *,FLAG_WML_EXE
0541+  0000             #defcont                      \.db $44
0542+  0000             
0543+  0000             #define     EXEEND_           \wml4_ .set *
0544+  0000             #defcont                      \.pop wml1_,wml2_
0545+  0000             #defcont                      \#if wml1_ == FLAG_WML_EXE
0546+  0000             #defcont                            \wml3_ .set wml4_-wml2_
0547+  0000             #defcont                            \#if (wml3_>14)|(wml3_<3)
0548+  0000             #defcont                            \     .error "Macro EXE_: Number of executed bytes must be between 2 and 15"
0549+  0000             #defcont                            \#else
0550+  0000             #defcont                            \     .org wml2_
0551+  0000             #defcont                            \     .db $44+wml3_-3
0552+  0000             #defcont                            \#endif
0553+  0000             #defcont                            \.org wml4_
0554+  0000             #defcont                      \#else
0555+  0000             #defcont                            \.error "EXEEND_ did not have a starting EXE_ code"
0556+  0000             #defcont                      \#endif
0557+  0000             #define	EXE_(a)		\#if (a>13)|(a<2)
0558+  0000             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0559+  0000             #defcont				\#else
0560+  0000             #defcont				\    .db ($44+a-2)
0561+  0000             #defcont				\#endif
0562+  0000             
0563+  0000             ;********************************************************
0564+  0000             ;* Macros 50-57:
0565+  0000             ;********************************************************
0566+  0000             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0567+  0000             #defcont				\	.db $50,((a*16)+b) 
0568+  0000             #defcont				\#else
0569+  0000             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0570+  0000             #defcont				\#endif
0571+  0000             
0572+  0000             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0573+  0000             #defcont				\	.db $51,((a*16)+b) 
0574+  0000             #defcont				\#else
0575+  0000             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0576+  0000             #defcont				\#endif
0577+  0000             
0578+  0000             #define	PRI_(a)		\.db $52,a
0579+  0000             
0580+  0000             #define	SLEEP_(a)		\#if (a<16)
0581+  0000             #defcont				\	.db ($70+a)
0582+  0000             #defcont				\#else
0583+  0000             #defcont				\	.db $53,a
0584+  0000             #defcont				\#endif
0585+  0000             
0586+  0000             #define	REMTHREAD_(a,b)	\.db $54,a,b
0587+  0000             
0588+  0000             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0589+  0000             
0590+  0000             #define 	JSR_(a)		\.db $56 \.dw a
0591+  0000             #define	JSRD_(a)		\.db $57 \.dw a
0592+  0000             
0593+  0000             ;*******************************************************************
0594+  0000             ;* Branch Macros: 58-5B
0595+  0000             ;*******************************************************************
0596+  0000             #define     IFLOC_(type,vars)    \ .push  *, vars, type        
0597+  0000             
0598+  0000             ;*******************************************************************
0599+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0600+  0000             ;*        an 'XXEND_' statement.                                    *
0601+  0000             ;******************************************************************* 
0602+  0000             #define     BEGIN_	      IFLOC_(FLAG_WML_BEGIN,0)
0603+  0000             
0604+  0000             ;*******************************************************************
0605+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0606+  0000             ;*            pulls the pc location of the beginning of the loop   *
0607+  0000             ;*            and verifies that the 'type' is correct.             *
0608+  0000             ;*******************************************************************
0609+  0000             #define 	LOGIC_LOOPEND_(vars)	\ .pop wml1_, wml2_, wml3_
0610+  0000             #defcont						\wml2_ .set vars
0611+  0000             #defcont						\wml4_ .set *
0612+  0000             #defcont						\#if (wml1_ & FLAG_WML_BEGIN)
0613+  0000             #defcont							\#if ((wml4_-wml3_) <= 127)
0614+  0000             #defcont								\ .org wml4_-1
0615+  0000             #defcont								\ .db wml3_-wml4_
0616+  0000             #defcont								\ .org wml4_
0617+  0000             #defcont							\#else
0618+  0000             #defcont								\ .error "Loop Branch out of Range."
0619+  0000             #defcont							\#endif
0620+  0000             #defcont						\#else
0621+  0000             #defcont							\ .error "Inappropriate End for BEGIN Loop."
0622+  0000             #defcont						\#endif
0623+  0000             
0624+  0000             ;*******************************************************************
0625+  0000             ;* Basic Loop
0626+  0000             ;*******************************************************************
0627+  0000             #define	LOOP_		\ .pop wml1_, wml2_, wml3_ \ JMPR_(wml3_)
0628+  0000             
0629+  0000             ;*******************************************************************
0630+  0000             ;* Conditional Looping
0631+  0000             ;*******************************************************************
0632+  0000             #define	EQEND_(z)						BNER_(z,*+3) \ LOGIC_LOOPEND_(1)		
0633+  0000             #define	EQEND_(z,y)						BNER_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0634+  0000             #define	EQEND_(z,y,x)					BNER_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0635+  0000             #define	EQEND_(z,y,x,w)					BNER_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0636+  0000             #define	EQEND_(z,y,x,w,v)					BNER_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0637+  0000             #define     EQEND_(z,y,x,w,v,u)				BNER_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0638+  0000             #define     EQEND_(z,y,x,w,v,u,t)			     	BNER_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0639+  0000             #define     EQEND_(z,y,x,w,v,u,t,s)     			BNER_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0640+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r)     		BNER_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0641+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q)     		BNER_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0642+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p)     		BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0643+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0644+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0645+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0646+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0647+  0000             
0648+  0000             #define	NEEND_(z)						BEQR_(z,*+3) \ LOGIC_LOOPEND_(1)		
0649+  0000             #define	NEEND_(z,y)						BEQR_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0650+  0000             #define	NEEND_(z,y,x)					BEQR_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0651+  0000             #define	NEEND_(z,y,x,w)					BEQR_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0652+  0000             #define	NEEND_(z,y,x,w,v)					BEQR_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0653+  0000             #define     NEEND_(z,y,x,w,v,u)				BEQR_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0654+  0000             #define     NEEND_(z,y,x,w,v,u,t)			     	BEQR_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0655+  0000             #define     NEEND_(z,y,x,w,v,u,t,s)     			BEQR_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0656+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r)     		BEQR_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0657+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q)     		BEQR_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0658+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p)     		BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0659+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0660+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0661+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0662+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0663+  0000             ;*******************************************************************
0664+  0000             ;* IFxxx: These are the standard 'if' statements, they will always  
0665+  0000             ;*        be of type FLAG_WML_IF                                           
0666+  0000             ;*******************************************************************
0667+  0000             #define     IFEQR_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BNER_(z,*+3)     
0668+  0000             #define     IFEQR_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BNER_(z,y,*+3)   
0669+  0000             #define     IFEQR_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BNER_(z,y,x,*+3) 
0670+  0000             #define     IFEQR_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BNER_(z,y,x,w,*+3)   
0671+  0000             #define     IFEQR_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BNER_(z,y,x,w,v,*+3) 
0672+  0000             #define     IFEQR_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BNER_(z,y,x,w,v,u,*+3) 
0673+  0000             #define     IFEQR_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BNER_(z,y,x,w,v,u,t,*+3) 
0674+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BNER_(z,y,x,w,v,u,t,s,*+3) 
0675+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BNER_(z,y,x,w,v,u,t,s,r,*+3)
0676+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BNER_(z,y,x,w,v,u,t,s,r,q,*+3)
0677+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0678+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0679+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0680+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0681+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0682+  0000             
0683+  0000             #define     IFNER_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BEQR_(z,*+3)     
0684+  0000             #define     IFNER_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BEQR_(z,y,*+3)   
0685+  0000             #define     IFNER_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BEQR_(z,y,x,*+3) 
0686+  0000             #define     IFNER_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BEQR_(z,y,x,w,*+3) 
0687+  0000             #define     IFNER_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BEQR_(z,y,x,w,v,*+3) 
0688+  0000             #define     IFNER_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BEQR_(z,y,x,w,v,u,*+3) 
0689+  0000             #define     IFNER_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BEQR_(z,y,x,w,v,u,t,*+3) 
0690+  0000             #define     IFNER_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BEQR_(z,y,x,w,v,u,t,s,*+3) 
0691+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BEQR_(z,y,x,w,v,u,t,s,r,*+3)
0692+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BEQR_(z,y,x,w,v,u,t,s,r,q,*+3)
0693+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0694+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0695+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0696+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0697+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0698+  0000             
0699+  0000             #define     ENDIF_ \wml1_ .set *
0700+  0000             #defcont		 \ .pop wml3_, wml5_, wml4_
0701+  0000             #defcont		 \#if (wml3_ & FLAG_WML_BEGIN)==0
0702+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0703+  0000             #defcont  			      \wml2_ .set wml1_-wml4_-wml5_-2
0704+  0000             #defcont			      \#if wml2_+127 < 0
0705+  0000             #defcont				      \ .error "Branch Range < -127"
0706+  0000             #defcont			      \#else
0707+  0000             #defcont				      \#if wml2_-128 > 0
0708+  0000             #defcont					      \ .error "Branch Range > 128"
0709+  0000             #defcont				      \#else
0710+  0000             #defcont    				      \ .org wml4_+wml5_+1
0711+  0000             #defcont					      \ .byte wml2_
0712+  0000             #defcont				      \#endif
0713+  0000             #defcont			      \#endif
0714+  0000             #defcont                \#else
0715+  0000             #defcont                      \ .org  wml4_-2	
0716+  0000             #defcont				\ JMP_(wml1_)
0717+  0000             #defcont                      \ .error "123: Not Tested"
0718+  0000             #defcont                \#endif
0719+  0000             #defcont			\ .org	wml1_
0720+  0000             #defcont		 \#else
0721+  0000             #defcont			\.error "Wrong Endtype for IFXXR_ block"
0722+  0000             #defcont		 \#endif
0723+  0000             
0724+  0000             #define	ELSE_	\wml1_ .set $
0725+  0000             #defcont		\ .pop wml3_, wml5_, wml4_
0726+  0000             #defcont		\#if (wml3_ & FLAG_WML_BEGIN)==0
0727+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0728+  0000             #defcont				\ .org wml4_+wml5_+1
0729+  0000             #defcont				\wml2_ .set wml1_-wml4_
0730+  0000             #defcont					\#if wml2_+127 < 0
0731+  0000             #defcont						\ .org wml1_
0732+  0000             #defcont						\.push wml1_+3, wml5_, FLAG_WML_ELSE
0733+  0000             #defcont						\ JMP_($)
0734+  0000             #defcont                                  \ .error "(124)ELSE_: Not Tested with long JMP"
0735+  0000             #defcont					\#else
0736+  0000             #defcont						\#if wml2_-128>0
0737+  0000             #defcont							\ .org wml1_
0738+  0000             #defcont							\.push wml1_+3, wml5_, FLAG_WML_ELSE
0739+  0000             #defcont							\ JMP_($)
0740+  0000             #defcont                                  \ .error "(125)ELSE_: Not Tested with long JMP"
0741+  0000             #defcont						\#else
0742+  0000             #defcont							\.push wml1_-wml5_, wml5_, FLAG_WML_IF
0743+  0000             #defcont							\ .byte wml2_-wml5_
0744+  0000             #defcont							\ .org wml1_
0745+  0000             #defcont							\ JMPR_($+1)
0746+  0000             #defcont							\ .org wml1_+2
0747+  0000             #defcont						\#endif
0748+  0000             #defcont					\#endif
0749+  0000             #defcont			\#else
0750+  0000             #defcont				\.error "Duplicate ELSE Statement"
0751+  0000             #defcont			\#endif
0752+  0000             #defcont		\#else
0753+  0000             #defcont			\ .error "Misplaced Else"
0754+  0000             #defcont		\#endif
0755+  0000             
0756+  0000             #define     BEQR_(p1__,ba__)     \#if $+3-ba__ < 128
0757+  0000             #defcont                                 \.db $5A,p1__,ba__-$-3
0758+  0000             #defcont				\#else
0759+  0000             #defcont					\#if ba__-$+3 < 127
0760+  0000             #defcont                                 \.db $5A,p1__,$+3-ba__
0761+  0000             #defcont					\#else
0762+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0763+  0000             #defcont					\#endif
0764+  0000             #defcont				\#endif
0765+  0000             
0766+  0000             #define     BEQR_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0767+  0000             #defcont                                 \.db $5A,p1__,p2__,ba__-$-4
0768+  0000             #defcont				\#else
0769+  0000             #defcont					\#if ba__-$+4 < 127
0770+  0000             #defcont                                 \.db $5A,p1__,p2__,$+4-ba__
0771+  0000             #defcont					\#else
0772+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0773+  0000             #defcont					\#endif
0774+  0000             #defcont				\#endif
0775+  0000             
0776+  0000             #define     BEQR_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0777+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,ba__-$-5
0778+  0000             #defcont				\#else
0779+  0000             #defcont					\#if ba__-$+5 < 127
0780+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,$+5-ba__
0781+  0000             #defcont					\#else
0782+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0783+  0000             #defcont					\#endif
0784+  0000             #defcont				\#endif
0785+  0000             
0786+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0787+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,ba__-$-6
0788+  0000             #defcont				\#else
0789+  0000             #defcont					\#if ba__-$+6 < 127
0790+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,$+6-ba__
0791+  0000             #defcont					\#else
0792+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0793+  0000             #defcont					\#endif
0794+  0000             #defcont				\#endif
0795+  0000             
0796+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0797+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0798+  0000             #defcont				\#else
0799+  0000             #defcont					\#if ba__-$+7 < 127
0800+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0801+  0000             #defcont					\#else
0802+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0803+  0000             #defcont					\#endif
0804+  0000             #defcont				\#endif
0805+  0000             
0806+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0807+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0808+  0000             #defcont				\#else
0809+  0000             #defcont					\#if ba__-$+8 < 127
0810+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0811+  0000             #defcont					\#else
0812+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0813+  0000             #defcont					\#endif
0814+  0000             #defcont				\#endif
0815+  0000             
0816+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0817+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0818+  0000             #defcont				\#else
0819+  0000             #defcont					\#if ba__-$+9 < 127
0820+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0821+  0000             #defcont					\#else
0822+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0823+  0000             #defcont					\#endif
0824+  0000             #defcont				\#endif
0825+  0000             
0826+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0827+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0828+  0000             #defcont				\#else
0829+  0000             #defcont					\#if ba__-$+10 < 127
0830+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0831+  0000             #defcont					\#else
0832+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0833+  0000             #defcont					\#endif
0834+  0000             #defcont				\#endif
0835+  0000             
0836+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0837+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0838+  0000             #defcont				\#else
0839+  0000             #defcont					\#if ba__-$+11 < 127
0840+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0841+  0000             #defcont					\#else
0842+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0843+  0000             #defcont					\#endif
0844+  0000             #defcont				\#endif
0845+  0000             
0846+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0847+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0848+  0000             #defcont				\#else
0849+  0000             #defcont					\#if ba__-$+12 < 127
0850+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0851+  0000             #defcont					\#else
0852+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0853+  0000             #defcont					\#endif
0854+  0000             #defcont				\#endif
0855+  0000             
0856+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0857+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0858+  0000             #defcont				\#else
0859+  0000             #defcont					\#if ba__-$+13 < 127
0860+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0861+  0000             #defcont					\#else
0862+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0863+  0000             #defcont					\#endif
0864+  0000             #defcont				\#endif
0865+  0000             
0866+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0867+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0868+  0000             #defcont				\#else
0869+  0000             #defcont					\#if ba__-$+14 < 127
0870+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0871+  0000             #defcont					\#else
0872+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0873+  0000             #defcont					\#endif
0874+  0000             #defcont				\#endif
0875+  0000             
0876+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0877+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0878+  0000             #defcont				\#else
0879+  0000             #defcont					\#if ba__-$+15 < 127
0880+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0881+  0000             #defcont					\#else
0882+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0883+  0000             #defcont					\#endif
0884+  0000             #defcont				\#endif
0885+  0000             
0886+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0887+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0888+  0000             #defcont				\#else
0889+  0000             #defcont					\#if ba__-$+16 < 127
0890+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0891+  0000             #defcont					\#else
0892+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0893+  0000             #defcont					\#endif
0894+  0000             #defcont				\#endif
0895+  0000             
0896+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
0897+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
0898+  0000             #defcont				\#else
0899+  0000             #defcont					\#if ba__-$+17 < 127
0900+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
0901+  0000             #defcont					\#else
0902+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0903+  0000             #defcont					\#endif
0904+  0000             #defcont				\#endif
0905+  0000             
0906+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
0907+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
0908+  0000             #defcont				\#else
0909+  0000             #defcont					\#if ba__-$+18 < 127
0910+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
0911+  0000             #defcont					\#else
0912+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0913+  0000             #defcont					\#endif
0914+  0000             #defcont				\#endif
0915+  0000             
0916+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
0917+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
0918+  0000             #defcont				\#else
0919+  0000             #defcont					\#if ba__-$+19 < 127
0920+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
0921+  0000             #defcont					\#else
0922+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0923+  0000             #defcont					\#endif
0924+  0000             #defcont				\#endif
0925+  0000             
0926+  0000             #define     BEQA_(p1__,ba__)     \.db $58,p1__ \.dw ba__
0927+  0000             #define     BEQA_(p1__,p2__,ba__)     \.db $58,p1__,p2__ \.dw ba__
0928+  0000             #define     BEQA_(p1__,p2__,p3__,ba__)     \.db $58,p1__,p2__,p3__ \.dw ba__
0929+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,ba__)     \.db $58,p1__,p2__,p3__,p4__ \.dw ba__
0930+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__ \.dw ba__
0931+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
0932+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
0933+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
0934+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
0935+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
0936+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
0937+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
0938+  0000             
0939+  0000             #define     BNER_(p1__,ba__)     \#if $+3-ba__ < 128
0940+  0000             #defcont                                 \.db $5B,p1__,ba__-$-3
0941+  0000             #defcont				\#else
0942+  0000             #defcont					\#if ba__-$+3 < 127
0943+  0000             #defcont                                 \.db $5B,p1__,$+3-ba__
0944+  0000             #defcont					\#else
0945+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0946+  0000             #defcont					\#endif
0947+  0000             #defcont				\#endif
0948+  0000             
0949+  0000             #define     BNER_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0950+  0000             #defcont                                 \.db $5B,p1__,p2__,ba__-$-4
0951+  0000             #defcont				\#else
0952+  0000             #defcont					\#if ba__-$+4 < 127
0953+  0000             #defcont                                 \.db $5B,p1__,p2__,$+4-ba__
0954+  0000             #defcont					\#else
0955+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0956+  0000             #defcont					\#endif
0957+  0000             #defcont				\#endif
0958+  0000             
0959+  0000             #define     BNER_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0960+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,ba__-$-5
0961+  0000             #defcont				\#else
0962+  0000             #defcont					\#if ba__-$+5 < 127
0963+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,$+5-ba__
0964+  0000             #defcont					\#else
0965+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0966+  0000             #defcont					\#endif
0967+  0000             #defcont				\#endif
0968+  0000             
0969+  0000             #define     BNER_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0970+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,ba__-$-6
0971+  0000             #defcont				\#else
0972+  0000             #defcont					\#if ba__-$+6 < 127
0973+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,$+6-ba__
0974+  0000             #defcont					\#else
0975+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0976+  0000             #defcont					\#endif
0977+  0000             #defcont				\#endif
0978+  0000             
0979+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0980+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0981+  0000             #defcont				\#else
0982+  0000             #defcont					\#if ba__-$+7 < 127
0983+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0984+  0000             #defcont					\#else
0985+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0986+  0000             #defcont					\#endif
0987+  0000             #defcont				\#endif
0988+  0000             
0989+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0990+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0991+  0000             #defcont				\#else
0992+  0000             #defcont					\#if ba__-$+8 < 127
0993+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0994+  0000             #defcont					\#else
0995+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0996+  0000             #defcont					\#endif
0997+  0000             #defcont				\#endif
0998+  0000             
0999+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
1000+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
1001+  0000             #defcont				\#else
1002+  0000             #defcont					\#if ba__-$+9 < 127
1003+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
1004+  0000             #defcont					\#else
1005+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1006+  0000             #defcont					\#endif
1007+  0000             #defcont				\#endif
1008+  0000             
1009+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
1010+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
1011+  0000             #defcont				\#else
1012+  0000             #defcont					\#if ba__-$+10 < 127
1013+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
1014+  0000             #defcont					\#else
1015+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1016+  0000             #defcont					\#endif
1017+  0000             #defcont				\#endif
1018+  0000             
1019+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
1020+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
1021+  0000             #defcont				\#else
1022+  0000             #defcont					\#if ba__-$+11 < 127
1023+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
1024+  0000             #defcont					\#else
1025+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1026+  0000             #defcont					\#endif
1027+  0000             #defcont				\#endif
1028+  0000             
1029+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
1030+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
1031+  0000             #defcont				\#else
1032+  0000             #defcont					\#if ba__-$+12 < 127
1033+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
1034+  0000             #defcont					\#else
1035+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1036+  0000             #defcont					\#endif
1037+  0000             #defcont				\#endif
1038+  0000             
1039+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
1040+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
1041+  0000             #defcont				\#else
1042+  0000             #defcont					\#if ba__-$+13 < 127
1043+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
1044+  0000             #defcont					\#else
1045+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1046+  0000             #defcont					\#endif
1047+  0000             #defcont				\#endif
1048+  0000             
1049+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
1050+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
1051+  0000             #defcont				\#else
1052+  0000             #defcont					\#if ba__-$+14 < 127
1053+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
1054+  0000             #defcont					\#else
1055+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1056+  0000             #defcont					\#endif
1057+  0000             #defcont				\#endif
1058+  0000             
1059+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
1060+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
1061+  0000             #defcont				\#else
1062+  0000             #defcont					\#if ba__-$+15 < 127
1063+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
1064+  0000             #defcont					\#else
1065+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1066+  0000             #defcont					\#endif
1067+  0000             #defcont				\#endif
1068+  0000             
1069+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
1070+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
1071+  0000             #defcont				\#else
1072+  0000             #defcont					\#if ba__-$+16 < 127
1073+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
1074+  0000             #defcont					\#else
1075+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1076+  0000             #defcont					\#endif
1077+  0000             #defcont				\#endif
1078+  0000             
1079+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
1080+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
1081+  0000             #defcont				\#else
1082+  0000             #defcont					\#if ba__-$+17 < 127
1083+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
1084+  0000             #defcont					\#else
1085+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1086+  0000             #defcont					\#endif
1087+  0000             #defcont				\#endif
1088+  0000             
1089+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
1090+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
1091+  0000             #defcont				\#else
1092+  0000             #defcont					\#if ba__-$+18 < 127
1093+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
1094+  0000             #defcont					\#else
1095+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1096+  0000             #defcont					\#endif
1097+  0000             #defcont				\#endif
1098+  0000             
1099+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
1100+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
1101+  0000             #defcont				\#else
1102+  0000             #defcont					\#if ba__-$+19 < 127
1103+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
1104+  0000             #defcont					\#else
1105+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1106+  0000             #defcont					\#endif
1107+  0000             #defcont				\#endif
1108+  0000             
1109+  0000             #define     BNEA_(p1__,ba__)     \.db $59,p1__ \.dw ba__
1110+  0000             #define     BNEA_(p1__,p2__,ba__)     \.db $59,p1__,p2__ \.dw ba__
1111+  0000             #define     BNEA_(p1__,p2__,p3__,ba__)     \.db $59,p1__,p2__,p3__ \.dw ba__
1112+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,ba__)     \.db $59,p1__,p2__,p3__,p4__ \.dw ba__
1113+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__ \.dw ba__
1114+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
1115+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
1116+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
1117+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
1118+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
1119+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
1120+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
1121+  0000             
1122+  0000             ;**********************************************************
1123+  0000             ;* Macros 5C-5F
1124+  0000             ;**********************************************************
1125+  0000             #define	JMPD_(a)		.db $5c \.dw a
1126+  0000             
1127+  0000             #define	SWSET_(a)		.db $5d,a
1128+  0000             #define	SWSET_(a,b)		.db $5d,a,b
1129+  0000             #define	SWSET_(a,b,c)	.db $5d,a,b,c
1130+  0000             #define	SWSET_(a,b,c,d)	.db $5d,a,b,c,d
1131+  0000             
1132+  0000             #define	SWCLR_(a)		.db $5e,a
1133+  0000             #define	SWCLR_(a,b)		.db $5e,a,b
1134+  0000             #define	SWCLR_(a,b,c)	.db $5e,a,b,c
1135+  0000             #define	SWCLR_(a,b,c,d)	.db $5e,a,b,c,d
1136+  0000             
1137+  0000             #define	JMP_(a)		.db $5f \.dw a
1138+  0000             
1139+  0000             ;**********************************************************
1140+  0000             ;* Macro 6X:
1141+  0000             ;**********************************************************
1142+  0000             #define	SLEEPI_(a)		.db ($60+(a&$0f))
1143+  0000             
1144+  0000             ;**********************************************************
1145+  0000             ;* Macro 7X: 
1146+  0000             ;**********************************************************
1147+  0000             #define	SLEEP_(a)		.db ($70+(a&$0f))
1148+  0000             
1149+  0000             ;**********************************************************
1150+  0000             ;* Macro 8X:
1151+  0000             ;**********************************************************
1152+  0000             #define 	JMPR_(a)		\#if a-$ > $7ff
1153+  0000             #defcont				\	.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1154+  0000             #defcont				\#else
1155+  0000             #defcont				\	#if $-a > $7ff
1156+  0000             #defcont				\		.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1157+  0000             #defcont				\	#endif
1158+  0000             #defcont				\#endif
1159+  0000             #defcont				\	.db ($80+(((a-($+2))>>8)&$0f)) \.db ((a-($+1))&$ff)
1160+  0000             
1161+  0000             ;**********************************************************
1162+  0000             ;* Macro 9X:
1163+  0000             ;**********************************************************
1164+  0000             #define 	JSRR_(a)		\#if a-$ > $7ff
1165+  0000             #defcont				\	.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1166+  0000             #defcont				\#else
1167+  0000             #defcont				\	#if $-a > $7ff
1168+  0000             #defcont				\		.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1169+  0000             #defcont				\	#endif
1170+  0000             #defcont				\#endif
1171+  0000             #defcont				\	.db ($90+(((a-($+2))>>8)&$0f)) \.db ((a-($+1))&$ff)
1172+  0000             ;**********************************************************
1173+  0000             ;* Macro AX:
1174+  0000             ;**********************************************************
1175+  0000             #define 	JSRDR_(a)		\#if a-$ > $7ff
1176+  0000             #defcont				\	.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1177+  0000             #defcont				\#else
1178+  0000             #defcont				\	#if $-a > $7ff
1179+  0000             #defcont				\		.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1180+  0000             #defcont				\	#endif
1181+  0000             #defcont				\#endif
1182+  0000             #defcont				\	.db ($a0+(((a-($+2))>>8)&$0f)) \.db ((a-($+1))&$ff)
1183+  0000             
1184+  0000             
1185+  0000             ;**********************************************************
1186+  0000             ;* Macro BX: Add NextByte to RAM LSD(command) 
1187+  0000             ;**********************************************************
1188+  0000             #define 	ADDRAM_(ramloc,data)	.db ($b0+ramloc),data
1189+  0000             
1190+  0000             ;**********************************************************
1191+  0000             ;* Macro CX: Set NextByte to RAM LSD(command) 
1192+  0000             ;**********************************************************
1193+  0000             #define 	SETRAM_(ramloc,data)	.db ($c0+ramloc),data
1194+  0000             
1195+  0000             ;**********************************************************
1196+  0000             ;* Macro DX: Lamp Range Effects for extended lamp matrix
1197+  0000             ;**********************************************************
1198+  0000             #define	BITON3_(a)		\.db $d0,a
1199+  0000             #define	BITON3_(a,b)	\.db $d0,(a+$80),b
1200+  0000             #define	BITON3_(a,b,c)	\.db $d0,(a+$80),(b+$80),c
1201+  0000             #define	BITON3_(a,b,c,d)	\.db $d0,(a+$80),(b+$80),(c+$80),d
1202+  0000             
1203+  0000             #define	BITOFF3_(a)		\.db $d1,a
1204+  0000             #define	BITOFF3_(a,b)	\.db $d1,(a+$80),b
1205+  0000             #define	BITOFF3_(a,b,c)	\.db $d1,(a+$80),(b+$80),c
1206+  0000             #define	BITOFF3_(a,b,c,d)	\.db $d1,(a+$80),(b+$80),(c+$80),d
1207+  0000             
1208+  0000             #define	BITINV3_(a)		\.db $d2,a
1209+  0000             #define	BITINV3_(a,b)	\.db $d2,(a+$80),b
1210+  0000             #define	BITINV3_(a,b,c)	\.db $d2,(a+$80),(b+$80),c
1211+  0000             #define	BITINV3_(a,b,c,d)	\.db $d2,(a+$80),(b+$80),(c+$80),d
1212+  0000             
1213+  0000             #define	BITON3a_(a)		\.db $d4,a
1214+  0000             #define	BITON3a_(a,b)	\.db $d4,(a+$80),b
1215+  0000             #define	BITON3a_(a,b,c)	\.db $d4,(a+$80),(b+$80),c
1216+  0000             #define	BITON3a_(a,b,c,d)	\.db $d4,(a+$80),(b+$80),(c+$80),d
1217+  0000             
1218+  0000             #define	BITOFF3a_(a)	\.db $d5,a
1219+  0000             #define	BITOFF3a_(a,b)	\.db $d5,(a+$80),b
1220+  0000             #define	BITOFF3a_(a,b,c)	\.db $d5,(a+$80),(b+$80),c
1221+  0000             #define	BITOFF3a_(a,b,c,d) \.db $d5,(a+$80),(b+$80),(c+$80),d
1222+  0000             
1223+  0000             #define	BITINV3a_(a)	\.db $d6,a
1224+  0000             #define	BITINV3a_(a,b)	\.db $d6,(a+$80),b
1225+  0000             #define	BITINV3a_(a,b,c)	\.db $d6,(a+$80),(b+$80),c
1226+  0000             #define	BITINV3a_(a,b,c,d) \.db $d6,(a+$80),(b+$80),(c+$80),d
1227+  0000             
1228+  0000             #define	BITON4_(a)		\.db $d8,a
1229+  0000             #define	BITON4_(a,b)	\.db $d8,(a+$80),b
1230+  0000             #define	BITON4_(a,b,c)	\.db $d8,(a+$80),(b+$80),c
1231+  0000             #define	BITON4_(a,b,c,d)	\.db $d8,(a+$80),(b+$80),(c+$80),d
1232+  0000             
1233+  0000             #define	BITOFF4_(a)		\.db $d9,a
1234+  0000             #define	BITOFF4_(a,b)	\.db $d9,(a+$80),b
1235+  0000             #define	BITOFF4_(a,b,c)	\.db $d9,(a+$80),(b+$80),c
1236+  0000             #define	BITOFF4_(a,b,c,d)	\.db $d9,(a+$80),(b+$80),(c+$80),d
1237+  0000             
1238+  0000             #define	BITINV4_(a)		\.db $da,a
1239+  0000             #define	BITINV4_(a,b)	\.db $da,(a+$80),b
1240+  0000             #define	BITINV4_(a,b,c)	\.db $da,(a+$80),(b+$80),c
1241+  0000             #define	BITINV4_(a,b,c,d)	\.db $da,(a+$80),(b+$80),(c+$80),d
1242+  0000             
1243+  0000             #define	BITON4a_(a)		\.db $dc,a
1244+  0000             #define	BITON4a_(a,b)	\.db $dc,(a+$80),b
1245+  0000             #define	BITON4a_(a,b,c)	\.db $dc,(a+$80),(b+$80),c
1246+  0000             #define	BITON4a_(a,b,c,d)	\.db $dc,(a+$80),(b+$80),(c+$80),d
1247+  0000             
1248+  0000             #define	BITOFF4a_(a)	\.db $dd,a
1249+  0000             #define	BITOFF4a_(a,b)	\.db $dd,(a+$80),b
1250+  0000             #define	BITOFF4a_(a,b,c)	\.db $dd,(a+$80),(b+$80),c
1251+  0000             #define	BITOFF4a_(a,b,c,d) \.db $dd,(a+$80),(b+$80),(c+$80),d
1252+  0000             
1253+  0000             #define	BITINV4a_(a)	\.db $de,a
1254+  0000             #define	BITINV4a_(a,b)	\.db $de,(a+$80),b
1255+  0000             #define	BITINV4a_(a,b,c)	\.db $de,(a+$80),(b+$80),c
1256+  0000             #define	BITINV4a_(a,b,c,d) \.db $de,(a+$80),(b+$80),(c+$80),d
1257+  0000             
1258+  0000             ;**********************************************************
1259+  0000             ;* Macro EX,FX: Play Index Sound Once 
1260+  0000             ;**********************************************************
1261+  0000             #define	SND_(a)			.db $e0+a
0010   0000             #include  "hy_hard.asm"		;Hardware Definitions                
0001+  0000             ;***********************************************************
0002+  0000             ;* Hyperball Hardware Definitions                          *
0003+  0000             ;* 1999-2001 Jess M. Askey (jess@askey.org)                *
0004+  0000             ;***********************************************************
0005+  0000             ;* This file defines the RAM structure and the actual      *
0006+  0000             ;* hardware contained on Hyperball.                        *
0007+  0000             ;***********************************************************
0008+  0000             	.org $0000
0009+  0000             
0010+  0000             ram_base	
0011+  0000             vm_reg_a			.block	1		;Virtual Machine Register A
0012+  0001             vm_reg_b			.block	1		;Virtual Machine Register B
0013+  0002             game_ram_2			.block	1
0014+  0003             cur_bolt_cnt		.block	1
0015+  0004             game_ram_4			.block	1
0016+  0005             current_wave		.block	1
0017+  0006             game_ram_6			.block	1
0018+  0007             baiter_speed		.block	1
0019+  0008             game_ram_8			.block	1
0020+  0009             game_ram_9			.block	1
0021+  000A             game_ram_a			.block	1
0022+  000B             game_ram_b			.block	1
0023+  000C             game_ram_c			.block	1
0024+  000D             reflx_tmr_btr		.block	1		;Reflex wave thread timer and Baiter data to
0025+  000E             reflx_cur_hits		.block	1		;Reflex wave current hit counter 
0026+  000F             reflx_cur_pts		.block	1		;Reflex wave current point value
0027+  0010             
0028+  0010             
0029+  0010             
0030+  0010             lampbuffer0			.block	8		;Lamp Buffer 0
0031+  0018             lampbuffer0x		.block	4		;Extended Lamp Buffer 0
0032+  001C             bitflags			.block	8		;Game Flags
0033+  0024             bitflagsx			.block	4		;Extended Game Flags
0034+  0028             lampbufferselect		.block	8		;Lamp Buffer Selection Bit
0035+  0030             lampbufferselectx		.block	4
0036+  0034             lampbuffer1			.block	8		;Lamp Buffer 1
0037+  003C             lampbuffer1x		.block	4		;Extended Lamp Buffer 1
0038+  0040             lampflashflag		.block	8		;Lamp Flashing Bits
0039+  0048             lampflashflagx		.block	4		
0040+  004C             
0041+  004C             score_p1_b0			.block	4
0042+  0050             score_p2_b0			.block	4
0043+  0054             score_p1_b1			.block	4
0044+  0058             score_p2_b1			.block	4
0045+  005C             p1_ec_b0			.block	1
0046+  005D             p1_ec_b1			.block	1
0047+  005E             p2_ec_b0			.block	1		
0048+  005F             p2_ec_b1			.block	1
0049+  0060             alpha_b0			.block	12
0050+  006C             alpha_b1			.block	12
0051+  0078             
0052+  0078             dmask_p1			.block	1
0053+  0079             dmask_p2			.block	1
0054+  007A             dmask_p3			.block	1
0055+  007B             dmask_p4			.block	1
0056+  007C             comma_flags			.block	1
0057+  007D             switch_debounced		.block	8
0058+  0085             switch_masked		.block	8
0059+  008D             switch_pending		.block	8
0060+  0095             switch_aux			.block	8
0061+  009D             switch_b4			.block	8
0062+  00A5             irq_counter			.block	1
0063+  00A6             lamp_index_word		.block	1		;Rotating bit for lamp columns
0064+  00A7             lamp_index_wordx		.block	1		;Rotating bit for extended lamp colulmns
0065+  00A8             lamp_bit			.block	1		;
0066+  00A9             comma_data_temp		.block	1
0067+  00AA             
0068+  00AA             credp1p2_bufferselect	.block	1
0069+  00AB             alpha_bufferselect	.block	1
0070+  00AC             swap_player_displays	.block	1
0071+  00AD             alpha_digit_cur		.block	2
0072+  00AF             solenoid_address		.block	2
0073+  00B1             solenoid_bitpos		.block	1
0074+  00B2             solenoid_counter		.block	1
0075+  00B3             irqcount16			.block	1
0076+  00B4             switch_queue_pointer	.block	2		;switch_queue_pointer
0077+  00B6             solenoid_queue_pointer	.block	2		;solenoid_queue_pointer
0078+  00B8             temp1				.block	2
0079+  00BA             temp2				.block	2
0080+  00BC             temp3				.block	2		;$00BC
0081+  00BE             sys_temp1			.block	1
0082+  00BF             sys_temp2			.block	1
0083+  00C0             sys_temp3			.block	1
0084+  00C1             sys_temp4			.block	1
0085+  00C2             sys_temp5			.block	1
0086+  00C3             
0087+  00C3             sw_encoded			.block	1
0088+  00C4             sys_temp_w2			.block	2
0089+  00C6             sys_temp_w3			.block	2
0090+  00C8             thread_priority		.block	1
0091+  00C9             unused_ram1			.block	1		;$00
0092+  00CA             irqcount			.block	1
0093+  00CB             vm_base			.block	2
0094+  00CD             vm_nextslot			.block	2
0095+  00CF             current_thread		.block	2
0096+  00D1             vm_tail_thread		.block	2
0097+  00D3             lamp_flash_rate		.block	1		;lamp_flash_rate
0098+  00D4             lamp_flash_count		.block	1
0099+  00D5             thread_timer_byte		.block	1
0100+  00D6             soundcount			.block	1
0101+  00D7             lastsound			.block	1
0102+  00D8             cur_sndflags		.block	1		;$00
0103+  00D9             soundptr			.block	2
0104+  00DB             soundirqcount		.block	2
0105+  00DD             soundindex_com		.block	2
0106+  00DF             sys_soundflags		.block	1		;$00DF
0107+  00E0             soundindex			.block	1		;$00E0
0108+  00E1             csound_timer		.block	2		;$00E1
0109+  00E3             next_sndflags		.block	1		;$00E3
0110+  00E4             next_sndcnt		      .block	1		;$00E4
0111+  00E5             next_sndcmd		      .block	1		;$00E5
0112+  00E6             
0113+  00E6             flag_tilt			.block	1
0114+  00E7             flag_gameover		.block	1
0115+  00E8             random_bool			.block	1
0116+  00E9             flags_selftest		.block	1
0117+  00EA             num_players			.block	1
0118+  00EB             player_up			.block	1
0119+  00EC             pscore_buf			.block	2
0120+  00EE             				.block	1
0121+  00EF             vm_pc				.block	2		
0122+  00F1             num_tilt			.block	1
0123+  00F2             minutetimer			.block	2
0124+  00F4             flag_timer_bip		.block	1		;$00F4
0125+  00F5             randomseed			.block	1
0126+  00F6             x_temp_1			.block	2		;$00
0127+  00F8             eb_x_temp			.block	2		;$00
0128+  00FA             credit_x_temp		.block	2		;$00
0129+  00FC             x_temp_2			.block	2
0130+  00FE             character_ptr		.block	2
0131+  0100             
0132+  0100             ;***************************************************************
0133+  0100             ;* Spare RAM: The last 32 bytes are available to the GAME ROM
0134+  0100             ;*            if needed. Only the first 8 are defined by name.
0135+  0100             ;***************************************************************
0136+  0100             spare_ram			.block	1
0137+  0101             spare_ram+1			.block	1
0138+  0102             spare_ram+2			.block	1
0139+  0103             spare_ram+3			.block	1
0140+  0104             spare_ram+4			.block	1
0141+  0105             spare_ram+5			.block	1
0142+  0106             spare_ram+6			.block	1
0143+  0107             spare_ram+7			.block	1
0144+  0108             
0145+  0108             ;***************************************************************
0146+  0108             ;* CMOS RAM - The cmos RAM data bus is only 4-bits wide, so
0147+  0108             ;*            each byte of data takes two consecutive address
0148+  0108             ;*            locations. The lower address is the most 
0149+  0108             ;*            significant nibble in the byte.
0150+  0108             ;***************************************************************
0151+  0100             	.org $0100
0152+  0100             
0153+  0100             cmos_base
0154+  0100             cmos_csum			.block	2
0155+  0102             
0156+  0102             ;* First section is game audits
0157+  0102             aud_base
0158+  0102             aud_leftcoins		.block	4	;0102-0105	"Coins, Left Chute"
0159+  0106             aud_centercoins		.block	4	;0106-0109	"Coins, Center Chute"
0160+  010A             aud_rightcoins		.block	4	;010A-010D	"Coins, Right Chute"
0161+  010E             aud_paidcredits		.block	4	;010E-0111	Total Paid Credits
0162+  0112             aud_specialcredits	.block	4	;0112-0115	Special Credits
0163+  0116             aud_replaycredits		.block	4	;0116-0119	Replay Score Credits
0164+  011A             aud_matchcredits		.block	4	;011A-011D	Match Credits
0165+  011E             aud_totalcredits		.block	4	;011E-0121	Total Credits
0166+  0122             aud_extraballs		.block	4	;0122-0125	Total Extra Balls *NOT USED IN HYPERBALL*
0167+  0126             aud_avgballtime		.block	4	;0126-0129	Ball Time in Minutes
0168+  012A             aud_totalballs		.block	4	;012A-012D	Total Balls Played
0169+  012E             
0170+  012E             aud_game1			.block	4	;012E-0131	Game Specific Audit#1
0171+  0132             aud_game2			.block	4	;0132-0135	Game Specific Audit#2
0172+  0136             aud_game3			.block	4	;0136-0139	Game Specific Audit#3
0173+  013A             aud_game4			.block	4	;013A-013D	Game Specific Audit#4
0174+  013E             aud_game5			.block	4	;013E-0141	Game Specific Audit#5
0175+  0142             aud_game6			.block	4	;0142-0145	Game Specific Audit#6
0176+  0146             aud_game7			.block	4	;0146-0149	Game Specific Audit#7
0177+  014A             
0178+  014A             aud_autocycles		.block	4	;014A-014D	Number of Auto Cycles Completed
0179+  014E             aud_hstdcredits		.block	2	;014E-014F	2 -HSTD Credits Awarded
0180+  0150             aud_replay1times		.block	4	;0150-0153	2 -Times Exceeded
0181+  0154             aud_replay2times		.block	4	;0154-0157	2 -Times Exceeded
0182+  0158             aud_replay3times		.block	4	;0158-015B	2 -Times Exceeded
0183+  015C             aud_replay4times		.block	4	;015C-015F	2 -Times Exceeded
0184+  0160             				.block	2	;0160-0161	Unknown
0185+  0162             cmos_bonusunits		.block	2	;0162-1063	Hold Over Bonus Coin Units
0186+  0164             cmos_coinunits		.block	2	;0164-0165	Hold Over Total Coin Units
0187+  0166             aud_reset_end					;Defines upper bound of RAM to clear on reset	
0188+  0166             				
0189+  0166             aud_currenthstd		.block	8	;0166-016D	Current HSTD
0190+  016E             aud_currentcredits	.block	2	;016D-016F  Current Credits			
0191+  0170             aud_command			.block	2	;0170-0171	Command Entry
0192+  0172             
0193+  0172             				.block	11
0194+  017D             
0195+  017D             
0196+  017D             
0197+  017D             
0198+  017D             ;* Then adjustments
0199+  017D             adj_base
0200+  017D             adj_cmoscsum			.block	4	;017D-0180	"Game #, ROM Revision"                                     
0201+  0181             adj_backuphstd			.block	2     ;0181-0182	Backup HSTD                                                
0202+  0183             adj_replay1				.block	2     ;0183-0184	Replay 1 Score                                             
0203+  0185             adj_replay2				.block	2     ;0185-0186	Replay 2 Score                                             
0204+  0187             adj_replay3				.block	2     ;0187-0188	Replay 3 Score                                             
0205+  0189             adj_replay4				.block	2     ;0189-018A	Replay 4 Score                                             
0206+  018B             adj_matchenable			.block	2     ;018B-018C	Match: 00=On 01=OFF                                        
0207+  018D             adj_specialaward			.block	2     ;018D-018E	Special:00=Awards Credit 01=Extra Ball 02=Awards Points    
0208+  018F             adj_replayaward			.block	2     ;018F-0190	Replay Scores: 00=Awards Credit 01=Extra Ball              
0209+  0191             adj_maxplumbbobtilts		.block	2     ;0191-0192	Max Plumb Bob Tilts                                        
0210+  0193             adj_energystandard		.block	2     ;0193-0194	Number of Energy Bases to start in standard play                                  
0211+  0195             adj_energyextended		.block	2     ;0195-0196	Number of Energy Bases to start in extended play                                 
0212+  0197             adj_reflex_diff			.block	2     ;0197-0198	Game Specific Adjustment#2 (adj_gameadjust2)                            
0213+  0199             adj_ec_award_level		.block	2     ;0199-019A	Game Specific Adjustment#3 (adj_gameadjust3)                             
0214+  019B             adj_bolt_speed			.block	2     ;019B-019C	Game Specific Adjustment#4 (adj_gameadjust4)                           
0215+  019D             adj_bolt_feed			.block	2     ;019D-019E	Game Specific Adjustment#5 (adj_gameadjust5)                             
0216+  019F             adj_baiter_speed			.block	2     ;019F-01A0	Game Specific Adjustment#6 (adj_gameadjust6)                                 
0217+  01A1             adj_gameadjust7			.block	2     ;01A1-01A2	Game Specific Adjustment#7                                 
0218+  01A3             adj_gameadjust8			.block	2     ;01A3-01A4	Game Specific Adjustment#8                                 
0219+  01A5             adj_gameadjust9			.block	2     ;01A5-01A6	Game Specific Adjustment#9                                 
0220+  01A7             adj_hstdcredits			.block	2     ;01A7-01A8	High Score Credit Award                                    
0221+  01A9             adj_max_extraballs		.block	2     ;01A9-019A	Maximum Extra Balls 00=No Extra Balls                      
0222+  01AB             adj_max_credits			.block	2     ;01AB-01AC	Maximum Credits                                            
0223+  01AD             adj_pricecontrol			.block	2     ;01AD-01AE	Standard/Custom Pricing Control   
0224+  01AF             
0225+  01AF             cmos_pricingbase                         
0226+  01AF             cmos_leftcoinmult			.block	2     ;01AF-01B0	Left Coin Slot Multiplier                                  
0227+  01B1             cmos_centercoinmult		.block	2     ;01B1-01B2	Center Coin Slot Multiplier    
0228+  01B3             cmos_rightcoinmult		.block	2     ;01B3-01B4	Right Coin Slot Multiplier     
0229+  01B5             cmos_coinsforcredit		.block	2     ;01B5-01B6	Coin Units Required for Credit 
0230+  01B7             cmos_bonuscoins			.block	2     ;01B7-01B8	Coin Units Bonus Point         
0231+  01B9             cmos_minimumcoins			.block	2     ;01B9-01BA	Minimum Coin Units             
0232+  01BB             
0233+  01BB             
0234+  01BB             
0235+  01BB             ;***************************************************************
0236+  01BB             ;* Extended RAM area. This RAM space was added in Level 7 games
0237+  01BB             ;* for extended flexibility. The HYPERBALL space is a little
0238+  01BB             ;* different than regular Level 7 games in that the solenoid
0239+  01BB             ;* space is only 8 bytes (instead of 16)
0240+  01BB             ;***************************************************************
0241+  1100             	.org $1100
0242+  1100             
0243+  1100             switch_queue		.block	$18
0244+  1118             switch_queue_end
0245+  1118             
0246+  1118             sol_queue			.block	$10
0247+  1128             sol_queue_end
0248+  1128             
0249+  1128             score_queue			.block	8
0250+  1130             score_queue_end
0251+  1130             
0252+  1130             	.org $1130
0253+  1130             exe_buffer			.block	$10		;Temp code buffer for exe macro
0254+  1140             
0255+  1140             ;define the size of each player data block first
0256+  1140             gamedata_size		.equ		$24
0257+  1140             ;then apply it to all players
0258+  1140             p1_gamedata			.block	gamedata_size
0259+  1164             p2_gamedata			.block	gamedata_size
0260+  1188             
0261+  1188             game_var_0			.block 	2
0262+  118A             game_var_1			.block 	2
0263+  118C             game_var_2			.block 	2
0264+  118E             game_var_3			.block 	2
0265+  1190             game_var_4			.block 	2
0266+  1192             game_var_5			.block 	2
0267+  1194             game_var_6			.block 	2
0268+  1196             cur_spell_ltr		.block 	2		
0269+  1198             cur_spell_pos		.block	1
0270+  1199             cur_spell_word		.block	1
0271+  119A             				
0272+  119A             current_credits		.block	2
0273+  119C             
0274+  119C             threadpool_base		.block	1
0275+  119D             
0276+  119D              
0277+  1396              	.org $1396
0278+  1396             hy_unknown_1		.block	2
0279+  1398             hy_unknown_2		.block	2
0280+  139A             p1_ecs			.block 	1
0281+  139B             p2_ecs			.block	1
0282+  139C             last_sw_lamp		.block	1
0283+  139D             hy_unknown_4		.block	1
0284+  139E             spell_award			.block	1	;00=not active, 01=ZB , 10=EU ,11=ZB 
0285+  139F             hy_unknown_6		.block	1
0286+  13A0             hy_unknown_7		.block	7
0287+  13A7             hy_unknown_8		.block	2	;13A7
0288+  13A9             hy_unknown_9		.block	1     ;13A9
0289+  13AA             hy_unknown_a		.block	1	;13AA
0290+  13AB             hy_unknown_b		.block	2	;13AB
0291+  13AD             dynamic_disp_buf		.block	12	;13AD
0292+  13B9             
0293+  13B9             
0294+  13B9             
0295+  13B9             
0296+  13B9             	
0297+  13B9             
0298+  13B9             ;***************************************************************
0299+  13B9             ;* PIA Input/Output hardware
0300+  13B9             ;***************************************************************
0301+  13B9             ;* Some equates for indexing
0302+  13B9             pia_pir			.equ		0
0303+  13B9             pia_control			.equ		1
0304+  13B9             pia_pir_a			.equ		0
0305+  13B9             pia_control_a		.equ		1
0306+  13B9             pia_pir_b			.equ		2
0307+  13B9             pia_control_b		.equ		3
0308+  13B9             
0309+  13B9             pia_sound_data		.equ		$2100
0310+  13B9             pia_sound_ctrl		.equ		$2101
0311+  13B9             pia_comma_data		.equ		$2102
0312+  13B9             pia_comma_ctrl		.equ		$2103
0313+  13B9             
0314+  13B9             pia_sol_low_data		.equ		$2200
0315+  13B9             pia_sol_low_ctrl		.equ		$2201
0316+  13B9             pia_sol_high_data		.equ		$2202
0317+  13B9             pia_sol_high_ctrl		.equ		$2203
0318+  13B9             
0319+  13B9             pia_lamp_row_data		.equ		$2400
0320+  13B9             pia_lamp_row_ctrl		.equ		$2401
0321+  13B9             pia_lamp_col_data		.equ		$2402
0322+  13B9             pia_lamp_col_ctrl		.equ		$2403
0323+  13B9             
0324+  13B9             pia_disp_digit_data	.equ		$2800
0325+  13B9             pia_disp_digit_ctrl	.equ		$2801
0326+  13B9             pia_disp_seg_data		.equ		$2802
0327+  13B9             pia_disp_seg_ctrl		.equ		$2803
0328+  13B9             
0329+  13B9             pia_switch_return_data	.equ		$3000
0330+  13B9             pia_switch_return_ctrl	.equ		$3001
0331+  13B9             pia_switch_strobe_data	.equ		$3002
0332+  13B9             pia_switch_strobe_ctrl	.equ		$3003
0333+  13B9             
0334+  13B9             ;*******************************************
0335+  13B9             ;* Special PIA for Hyperball Driver Boards *
0336+  13B9             ;* Controls the Alpha-Numeric Display      *
0337+  13B9             ;*******************************************
0338+  13B9             pia_alphanum_digit_data	.equ		$4000
0339+  13B9             pia_alphanum_digit_ctrl	.equ		$4001
0340+  13B9             pia_alphanum_seg_data	.equ		$4002
0341+  13B9             pia_alphanum_seg_ctrl	.equ		$4003
0342+  13B9             
0343+  13B9             
0344+  13B9             ;*******************************************
0345+  13B9             ;* Solenoid Data                           *
0346+  13B9             ;*******************************************
0347+  13B9             HYPER_FLASH			.equ		0
0348+  13B9             ENERGY_FLASH		.equ		1
0349+  13B9             P1_FLASH			.equ		2
0350+  13B9             GI_RELAY_BB			.equ		3
0351+  13B9             NOT_USED_SOL		.equ		4
0352+  13B9             COIN_LOCKOUT		.equ		5
0353+  13B9             GI_RELAY_PF			.equ		6
0354+  13B9             P2_FLASH			.equ		7
0355+  13B9             BALL_SHOOTER		.equ		8
0356+  13B9             BALL_LIFT			.equ		9
0357+  13B9             
0358+  13B9             
0359+  13B9             HYPER_FL_OFF	.equ		SOLENOID_OFF+HYPER_FLASH
0360+  13B9             ENERGY_FL_OFF	.equ		SOLENOID_OFF+ENERGY_FLASH
0361+  13B9             P1_FL_OFF		.equ		SOLENOID_OFF+P1_FLASH
0362+  13B9             GI_BB_OFF		.equ		SOLENOID_OFF+GI_RELAY_BB
0363+  13B9             COIN_LOCK_OFF	.equ		SOLENOID_OFF+COIN_LOCKOUT
0364+  13B9             GI_PF_OFF		.equ		SOLENOID_OFF+GI_RELAY_PF
0365+  13B9             P2_FL_OFF		.equ		SOLENOID_OFF+P2_FLASH
0366+  13B9             BALL_SHOOT_OFF	.equ		SOLENOID_OFF+BALL_SHOOTER
0367+  13B9             BALL_LIFT_OFF	.equ		SOLENOID_OFF+BALL_LIFT
0368+  13B9             
0369+  13B9             
0370+  13B9             HYPER_FL_ON		.equ		SOLENOID_ON_LATCH+HYPER_FLASH
0371+  13B9             ENERGY_FL_ON	.equ		SOLENOID_ON_LATCH+ENERGY_FLASH
0372+  13B9             P1_FL_ON		.equ		SOLENOID_ON_LATCH+P1_FLASH
0373+  13B9             GI_BB_ON		.equ		SOLENOID_ON_LATCH+GI_RELAY_BB
0374+  13B9             COIN_LOCK_ON	.equ		SOLENOID_ON_LATCH+COIN_LOCKOUT
0375+  13B9             GI_PF_ON		.equ		SOLENOID_ON_LATCH+GI_RELAY_PF
0376+  13B9             P2_FL_ON		.equ		SOLENOID_ON_LATCH+P2_FLASH
0377+  13B9             BALL_SHOOT_ON	.equ		SOLENOID_ON_LATCH+BALL_SHOOTER
0378+  13B9             BALL_LIFT_ON	.equ		SOLENOID_ON_LATCH+BALL_LIFT
0379+  13B9             
0380+  13B9             HYPER_FL_ON4	.equ		SOLENOID_ON_4_CYCLES+HYPER_FLASH
0381+  13B9             ENERGY_FL_ON4	.equ		SOLENOID_ON_4_CYCLES+ENERGY_FLASH
0382+  13B9             P1_FL_ON4		.equ		SOLENOID_ON_4_CYCLES+P1_FLASH
0383+  13B9             GI_BB_ON4		.equ		SOLENOID_ON_4_CYCLES+GI_RELAY_BB
0384+  13B9             COIN_LOCK_ON4	.equ		SOLENOID_ON_4_CYCLES+COIN_LOCKOUT
0385+  13B9             GI_PF_ON4		.equ		SOLENOID_ON_4_CYCLES+GI_RELAY_PF
0386+  13B9             P2_FL_ON4		.equ		SOLENOID_ON_4_CYCLES+P2_FLASH
0387+  13B9             BALL_SHOOT_ON4	.equ		SOLENOID_ON_4_CYCLES+BALL_SHOOTER
0388+  13B9             BALL_LIFT_ON4	.equ		SOLENOID_ON_4_CYCLES+BALL_LIFT
0389+  13B9             
0390+  13B9             
0011   13B9             
0012   13B9             
0013   13B9             	.msfirst	
0014   D000              	.org $d000
0015   D000             
0016   D000             ;---------------------------------------------------------------------------
0017   D000             ;  Default game data and basic system tables start at $e000, these can not  
0018   D000             ;  ever be moved
0019   D000             ;---------------------------------------------------------------------------
0020   D000             
0021   D000 35 09       gr_gamenumber		.dw $3509
0022   D002 F4          gr_romrevision		.db $F4
0023   D003 B2 A5       gr_cmoscsum			.db $B2,$A5
0024   D005 05          gr_backuphstd		.db $05
0025   D006 00          gr_replay1			.db $00
0026   D007 00          gr_replay2			.db $00
0027   D008 00          gr_replay3			.db $00
0028   D009 00          gr_replay4			.db $00
0029   D00A 01          gr_matchenable		.db $01
0030   D00B 01          gr_specialaward		.db $01
0031   D00C 00          gr_replayaward		.db $00
0032   D00D 03          gr_maxplumbbobtilts	.db $03
0033   D00E 02          gr_numberofballs		.db $02
0034   D00F 03          gr_gameadjust1		.db $03
0035   D010 05          gr_gameadjust2		.db $05
0036   D011 04          gr_gameadjust3		.db $04
0037   D012 12          gr_gameadjust4		.db $12
0038   D013 05          gr_gameadjust5		.db $05
0039   D014 05          gr_gameadjust6		.db $05
0040   D015 05          gr_gameadjust7		.db $05
0041   D016 00          gr_gameadjust8		.db $00
0042   D017 00          gr_gameadjust9		.db $00
0043   D018 00          gr_hstdcredits		.db $00
0044   D019 00          gr_max_extraballs		.db $00
0045   D01A 30          gr_max_credits		.db $30
0046   D01B             ;---------------
0047   D01B             ;Pricing Data  |
0048   D01B             ;---------------
0049   D01B             
0050   D01B 01          gr_pricingdata		.db $01	;Left Coin Mult
0051   D01C 04          				.db $04	;Center Coin Mult
0052   D01D 01          				.db $01	;Right Coin Mult
0053   D01E 01          				.db $01	;Coin Units Required
0054   D01F 00          				.db $00	;Bonus Coins
0055   D020 00          				.db $00	;Minimum Coin Units
0056   D021             
0057   D021 09          				.db $09	;Left Coin Mult
0058   D022 45          				.db $45	;Center Coin Mult
0059   D023 18          				.db $18	;Right Coin Mult
0060   D024 05          				.db $05	;Coin Units Required
0061   D025 45          				.db $45	;Bonus Coins
0062   D026 00          				.db $00	;Minimum Coin Units
0063   D027             
0064   D027 01          				.db $01	;Left Coin Mult
0065   D028 04          				.db $04	;Center Coin Mult
0066   D029 01          				.db $01	;Right Coin Mult
0067   D02A 02          				.db $02	;Coin Units Required
0068   D02B 04          				.db $04	;Bonus Coins
0069   D02C 00          				.db $00	;Minimum Coin Units
0070   D02D             
0071   D02D 01          				.db $01	;Left Coin Mult
0072   D02E 16          				.db $16	;Center Coin Mult
0073   D02F 06          				.db $06	;Right Coin Mult
0074   D030 02          				.db $02	;Coin Units Required
0075   D031 00          				.db $00	;Bonus Coins
0076   D032 00          				.db $00	;Minimum Coin Units
0077   D033             
0078   D033 03          				.db $03	;Left Coin Mult
0079   D034 15          				.db $15	;Center Coin Mult
0080   D035 03          				.db $03	;Right Coin Mult
0081   D036 04          				.db $04	;Coin Units Required
0082   D037 15          				.db $15	;Bonus Coins
0083   D038 00          				.db $00	;Minimum Coin Units
0084   D039             
0085   D039 01          				.db $01	;Left Coin Mult
0086   D03A 00          				.db $00	;Center Coin Mult
0087   D03B 04          				.db $04	;Right Coin Mult
0088   D03C 01          				.db $01	;Coin Units Required
0089   D03D 00          				.db $00	;Bonus Coins
0090   D03E 00          				.db $00	;Minimum Coin Units
0091   D03F             
0092   D03F 01          				.db $01	;Left Coin Mult
0093   D040 00          				.db $00	;Center Coin Mult
0094   D041 02          				.db $02	;Right Coin Mult
0095   D042 01          				.db $01	;Coin Units Required
0096   D043 00          				.db $00	;Bonus Coins
0097   D044 00          				.db $00	;Minimum Coin Units
0098   D045             
0099   D045 01          				.db $01	;Left Coin Mult
0100   D046 00          				.db $00	;Center Coin Mult
0101   D047 02          				.db $02	;Right Coin Mult
0102   D048 02          				.db $02	;Coin Units Required
0103   D049 00          				.db $00	;Bonus Coins
0104   D04A 00          				.db $00	;Minimum Coin Units
0105   D04B             
0106   D04B             ;--------------
0107   D04B             ;System Data  |
0108   D04B             ;--------------
0109   D04B             
0110   D04B 1C          gr_maxthreads		.db $1C
0111   D04C 03          gr_extendedromtest	.db $03
0112   D04D 22          gr_lastswitch		.db (switchtable_end-switchtable)/3
0113   D04E 01          gr_numplayers		.db $01
0114   D04F             
0115   D04F E3 69       gr_lamptable_ptr		.dw lamptable
0116   D051 E4 0B       gr_switchtable_ptr	.dw switchtable
0117   D053 E3 99       gr_soundtable_ptr		.dw soundtable
0118   D055             
0119   D055 05          gr_lampflashrate		.db $05
0120   D056             
0121   D056 0D          gr_specialawardsound	.db $0D	;Special Sound
0122   D057 03          gr_p1_startsound		.db $03
0123   D058 03          gr_p2_startsound		.db $03
0124   D059 1A          gr_unknownvar1		.db $1A
0125   D05A 11          gr_hssound			.db $11
0126   D05B 1A          gr_gameoversound		.db $1A
0127   D05C 00          gr_creditsound		.db $00
0128   D05D             
0129   D05D 5F          gr_gameover_lamp		.db $5F
0130   D05E 5F          gr_tilt_lamp		.db $5F
0131   D05F             
0132   D05F DE A7       gr_gameoverthread_ptr	.dw gameover_entry
0133   D061 E4 CB       gr_character_defs_ptr	.dw character_defs
0134   D063 05          gr_coinlockout		.db $05
0135   D064 E1 89       gr_highscore_ptr		.dw high_score
0136   D066             
0137   D066             gr_switchtypetable
0138   D066 00 02       				.db $00,$02
0139   D068 00 09       				.db $00,$09
0140   D06A 00 04       				.db $00,$04
0141   D06C 00 01       				.db $00,$01
0142   D06E 02 05       				.db $02,$05
0143   D070 08 05       				.db $08,$05
0144   D072 00 00       				.db $00,$00
0145   D074             
0146   D074 0000000000  gr_playerstartdata	.db $00,$00,$00,$00,$00
0147   D079 0000000000  				.db $00,$00,$00,$00,$00
0148   D07E 0000000000  				.db $00,$00,$00,$00,$00
0149   D083 0000000000  				.db $00,$00,$00,$00,$00
0150   D088 0000000000  				.db $00,$00,$00,$00,$00
0151   D08D 0000000000  				.db $00,$00,$00,$00,$00
0152   D092             
0153   D092 0000000000  gr_playerresetdata	.db $00,$00,$00,$00,$00
0154   D097 0000000000  				.db $00,$00,$00,$00,$00
0155   D09C FF03000000  				.db $FF,$03,$00,$00,$00
0156   D0A1 0000000000  				.db $00,$00,$00,$00,$00
0157   D0A6 0000000000  				.db $00,$00,$00,$00,$00
0158   D0AB 0000000000  				.db $00,$00,$00,$00,$00
0159   D0B0             
0160   D0B0 39          gr_switch_event		rts\ .db $00	;(Switch Event)
0160   D0B1 00          
0161   D0B2 39          gr_sound_event		rts\ .db $DD	;(Sound Event )
0161   D0B3 DD          
0162   D0B4 39          gr_score_event		rts\ .db $00	;(Score Event)
0162   D0B5 00          
0163   D0B6 39          gr_eb_event			rts\ .db $00	;(Extra Ball Event)
0163   D0B7 00          
0164   D0B8 20 22       gr_special_event		bra special_event	;(Special Event)
0165   D0BA 39          gr_macro_event		rts\ .db $00	;(Start Macro Event)
0165   D0BB 00          
0166   D0BC 39          gr_ballstart_event	rts\ .db $00	;(Ball Start Event)
0166   D0BD 00          
0167   D0BE 39          gr_addplayer_event	rts\ .db $00	;(Add Player Event)
0167   D0BF 00          
0168   D0C0 39          gr_gameover_event		rts\ .db $00	;(Game Over Event)
0168   D0C1 00          
0169   D0C2 39          gr_hstdtoggle_event	rts\ .db $00	;(HSTD Toggle Event)
0169   D0C3 00          
0170   D0C4             
0171   D0C4 D1 08       gr_reset_ptr		.dw hook_reset		;Reset
0172   D0C6 D0 BA       gr_mainloop_ptr		.dw gr_macro_event	;Main Loop Begin
0173   D0C8 E1 72       gr_coin_ptr			.dw hook_coin		;Coin Accepted
0174   D0CA D1 20       gr_gamestart_ptr		.dw hook_gamestart	;New Game Start
0175   D0CC D3 B0       gr_playerinit_ptr		.dw hook_playerinit	;Init New Player
0176   D0CE D1 FF       gr_outhole_ptr		.dw hook_outhole		;Outhole
0177   D0D0             
0178   D0D0             ;------------------------ end system data ---------------------------
0179   D0D0             
0180   D0D0             ;******************************************
0181   D0D0             ;* Nothing special to do in Hyperball for
0182   D0D0             ;* the IRQ, just go to system
0183   D0D0             ;******************************************
0184   D0D0 7E EF 36    gr_irq_entry	jmp	sys_irq_entry
0185   D0D3             
0186   D0D3             ;******************************************
0187   D0D3             ;* SWI - This is a cheap way to start 
0188   D0D3             ;* macros in order to save some ROM space
0189   D0D3             ;******************************************
0190   D0D3 0E          gr_swi_entry	cli	
0191   D0D4 31          			ins	
0192   D0D5 31          			ins	
0193   D0D6 31          			ins	
0194   D0D7 31          			ins	
0195   D0D8 31          			ins	
0196   D0D9 7E F4 32    			jmp	macro_start
0197   D0DC             
0198   D0DC             ;******************************************
0199   D0DC             ;* This is called when a player score 
0200   D0DC             ;* reaches the Energy Center Award Level 
0201   D0DC             ;* in the adjustments.
0202   D0DC             ;******************************************
0203   D0DC CE 01 99    special_event	ldx	#adj_ec_award_level
0204   D0DF BD EE A2    			jsr	cmosinc_b
0205   D0E2 27 DE       			beq	gr_hstdtoggle_event
0206   D0E4 DE FA       			ldx	credit_x_temp
0207   D0E6 09          			dex	
0208   D0E7 09          			dex	
0209   D0E8 BD FD DB    			jsr	cmos_a
0210   D0EB 1B          			aba	
0211   D0EC 19          			daa	
0212   D0ED 8D 4C       			bsr	to_cmosa
0213   D0EF 86 12       			ldaa	#$12
0214   D0F1 BD EC 3B    			jsr	isnd_once
0215   D0F4 C6 01       			ldab	#$01
0216   D0F6 BD D9 CB    			jsr	add_b_cur_ecs
0217   D0F9 CE 00 5E    			ldx	#p2_ec_b0
0218   D0FC 96 EB       			ldaa	player_up
0219   D0FE             			ifne
0219   D0FE             
0219   D0FE 27 FE       
0220   D100 CE 00 5C    				ldx	#p1_ec_b0
0221   D103             			endif
0221   D103             
0221   D103             
0221   D103             
0221   D103             
0221   D103             
0221   D103~            			endif
0221   D103~            			endif
0221   D103             
0221   D103~            			endif
0221   D103~            			endif
0221   D103             
0221   D0FF             
0221   D0FF 03          
0221   D100             
0221   D100             
0221   D100~            			endif
0221   D100~            			endif
0221   D100~            			endif
0221   D100             
0221   D103             
0221   D103~            			endif
0221   D103~            			endif
0221   D103             
0222   D103 86 01       			ldaa	#$01
0223   D105 7E D1 CC    			jmp	add_a_to_ecd
0224   D108             
0225   D108             ;*************************************************
0226   D108             ;* Reset Hook from system - by default, the HSTD
0227   D108             ;* is reset on power-on. 
0228   D108             ;*************************************************
0229   D108 BD EE DC    hook_reset		jsr	restore_hstd
0230   D10B CE 01 2E    			ldx	#aud_game1
0231   D10E DF B8       			stx	temp1
0232   D110 CE E5 D0    			ldx	#msg_ssr_ejs
0233   D113 E6 00       			ldab	$00,X
0234   D115 C4 0F       			andb	#$0F
0235   D117 08          			inx	
0236   D118 7E EF 23    			jmp	copyblock2
0237   D11B             
0238   D11B 8D EB       sw_hstd_res		bsr	hook_reset
0239   D11D 7E E9 C4    to_kill		jmp	killthread
0240   D120             
0241   D120             
0242   D120 CE 13 A0    hook_gamestart	ldx	#hy_unknown_7
0243   D123             			begin
0243   D123             
0244   D123 6F 00       				clr	$00,X
0245   D125 08          				inx	
0246   D126 8C 13 A7    				cpx	#hy_unknown_8
0247   D129             			eqend
0247   D129             
0247   D129             
0247   D129~            			eqend
0247   D129~            			eqend
0247   D129             
0247   D129 26 F8       
0247   D12B             
0247   D12B~            			eqend
0247   D12B~            			eqend
0247   D12B             
0248   D12B CE 01 99    			ldx	#adj_ec_award_level
0249   D12E 86 F3       			ldaa	#$F3
0250   D130 BD EA 83    			jsr	solbuf			;turn on ball feed motor and ball shooter
0251   D133 BD D1 B9    			jsr	jmp_cmosa
0252   D136 CE 01 46    			ldx	#aud_game7
0253   D139 8D 00       			bsr	to_cmosa
0254   D13B 7E EE EE    to_cmosa		jmp	a_cmosinc
0255   D13E             
0256   D13E             ;****************************************************
0257   D13E             ;* Game Start - sets appropriate startup, A will have
0258   D13E             ;* 01 for 1 player game, and 02 for 2 player game.
0259   D13E             ;****************************************************
0260   D13E 4F          sw_1p_start		clra	
0261   D13F 4C          sw_2p_start		inca	
0262   D140 D6 E7       			ldab	flag_gameover		;Is game over? 0 = not gameover
0263   D142             			ifne						;this is an extended game
0263   D142             
0263   D142 27 FE       
0264   D144 B7 13 9E    				staa	spell_award			;this is a double use of the memory location, really has nothing to do with spell award		
0265   D147 16          				tab	
0266   D148 CE 01 AB    				ldx	#adj_max_credits		;free play?
0267   D14B 8D 6C       				bsr	jmp_cmosa
0268   D14D             				ifne					;no, check for actual credits
0268   D14D             
0268   D14D 27 FE       
0269   D14F CE 01 6E    					ldx	#aud_currentcredits
0270   D152 8D 65       					bsr	jmp_cmosa
0271   D154 11          					cba	
0272   D155 25 C6       					bcs	to_kill		;not enough, kill
0273   D157             				endif
0273   D157             
0273   D157             
0273   D157             
0273   D157             
0273   D157             
0273   D157~            				endif
0273   D157~            				endif
0273   D157             
0273   D157~            				endif
0273   D157~            				endif
0273   D157             
0273   D14E             
0273   D14E 08          
0273   D14F             
0273   D14F             
0273   D14F~            				endif
0273   D14F~            				endif
0273   D14F~            				endif
0273   D14F             
0273   D157             
0273   D157~            				endif
0273   D157~            				endif
0273   D157             
0274   D157             				begin
0274   D157             
0275   D157 86 08       					ldaa	#$08
0276   D159 CE FB A5    					ldx	#credit_button
0277   D15C BD D5 0E    					jsr	newthreadp
0278   D15F 5A          					decb	
0279   D160             				eqend
0279   D160             
0279   D160             
0279   D160~            				eqend
0279   D160~            				eqend
0279   D160             
0279   D160 26 F5       
0279   D162             
0279   D162~            				eqend
0279   D162~            				eqend
0279   D162             
0280   D162 CE 03 03    				ldx	#$0303
0281   D165 FF 13 9A    				stx	p1_ecs
0282   D168 8D 5A       				bsr	get_aud_ec_ex
0283   D16A 27 B1       				beq	to_kill
0284   D16C 3F          				swi	
0285   D16D             				PRI_($48)				;Priority=#48
0285   D16D 52 48       
0286   D16F             gs_forever			SLEEP_(5)
0286   D16F             
0286   D16F 75          
0286   D170~            gs_forever			SLEEP_(5)
0286   D170~            gs_forever			SLEEP_(5)
0286   D170             
0287   D170             				JMPR_(gs_forever)			;just stay here, something will have to kill it?
0287   D170~            				JMPR_(gs_forever)			;just stay here, something will have to kill it?
0287   D170~            				JMPR_(gs_forever)			;just stay here, something will have to kill it?
0287   D170             
0287   D170~            				JMPR_(gs_forever)			;just stay here, something will have to kill it?
0287   D170~            				JMPR_(gs_forever)			;just stay here, something will have to kill it?
0287   D170             
0287   D170             
0287   D170 8F          
0287   D171 FD          
0288   D172             			endif
0288   D172             
0288   D172             
0288   D172             
0288   D172             
0288   D172             
0288   D172~            			endif
0288   D172~            			endif
0288   D172             
0288   D172~            			endif
0288   D172~            			endif
0288   D172             
0288   D143             
0288   D143 2E          
0288   D144             
0288   D144             
0288   D144~            			endif
0288   D144~            			endif
0288   D144~            			endif
0288   D144             
0288   D172             
0288   D172~            			endif
0288   D172~            			endif
0288   D172             
0289   D172             			;here for a fresh game start
0290   D172 B1 13 9E    			cmpa	spell_award
0291   D175 26 A6       			bne	to_kill			;kill if SPELL already active, which means that there is already a game playing
0292   D177 86 48       			ldaa	#$48
0293   D179 C6 FF       			ldab	#$FF
0294   D17B BD EA 60    			jsr	check_threadid
0295   D17E 25 69       			bcs	to_kill2			
0296   D180 BD D1 FA    			jsr	killthreads_ff		;If there was an extended game playing already, now just kill the marker thread
0297   D183 F6 13 9E    			ldab	spell_award
0298   D186 CE 01 AB    			ldx	#adj_max_credits
0299   D189 8D 2E       			bsr	jmp_cmosa			;check for free play
0300   D18B             			ifne
0300   D18B             
0300   D18B 27 FE       
0301   D18D B6 11 9A    				ldaa	current_credits
0302   D190 11          				cba	
0303   D191 25 56       				bcs	to_kill2			;exit on not enough
0304   D193             			endif
0304   D193             
0304   D193             
0304   D193             
0304   D193             
0304   D193             
0304   D193~            			endif
0304   D193~            			endif
0304   D193             
0304   D193~            			endif
0304   D193~            			endif
0304   D193             
0304   D18C             
0304   D18C 06          
0304   D18D             
0304   D18D             
0304   D18D~            			endif
0304   D18D~            			endif
0304   D18D~            			endif
0304   D18D             
0304   D193             
0304   D193~            			endif
0304   D193~            			endif
0304   D193             
0305   D193 C1 02       			cmpb	#$02
0306   D195             			ifeq					;2P game is already going, extend it
0306   D195             
0306   D195 26 FE       
0307   D197 8D 23       				bsr	extend_game
0308   D199 F6 13 9B    				ldab	p2_ecs
0309   D19C 36          				psha	
0310   D19D 1B          				aba	
0311   D19E B7 13 9B    				staa	p2_ecs
0312   D1A1 32          				pula	
0313   D1A2 CE 00 5C    				ldx	#p1_ec_b0
0314   D1A5 8D 25       				bsr	add_a_to_ecd		;update EC numbers for P1
0315   D1A7             			endif
0315   D1A7             
0315   D1A7             
0315   D1A7             
0315   D1A7             
0315   D1A7             
0315   D1A7~            			endif
0315   D1A7~            			endif
0315   D1A7             
0315   D1A7~            			endif
0315   D1A7~            			endif
0315   D1A7             
0315   D196             
0315   D196 10          
0315   D197             
0315   D197             
0315   D197~            			endif
0315   D197~            			endif
0315   D197~            			endif
0315   D197             
0315   D1A7             
0315   D1A7~            			endif
0315   D1A7~            			endif
0315   D1A7             
0316   D1A7 8D 13       			bsr	extend_game			;here for 1P game already in progress
0317   D1A9 F6 13 9A    			ldab	p1_ecs
0318   D1AC 36          			psha	
0319   D1AD 1B          			aba	
0320   D1AE B7 13 9A    			staa	p1_ecs
0321   D1B1 32          			pula	
0322   D1B2 CE 00 5E    			ldx	#p2_ec_b0
0323   D1B5 8D 15       			bsr	add_a_to_ecd
0324   D1B7 20 30       			bra	to_kill2
0325   D1B9             
0326   D1B9 7E FD DB    jmp_cmosa		jmp	cmos_a
0327   D1BC             
0328   D1BC             ;Remove a credit and get the extended EC value
0329   D1BC CE 01 6E    extend_game		ldx	#aud_currentcredits
0330   D1BF 8D F8       			bsr	jmp_cmosa
0331   D1C1 BD FB DF    			jsr	lesscredit
0332   D1C4 CE 01 95    get_aud_ec_ex	ldx	#adj_energyextended
0333   D1C7 8D F0       			bsr	jmp_cmosa
0334   D1C9 84 0F       			anda	#$0F
0335   D1CB 39          			rts	
0336   D1CC             
0337   D1CC             ;Adds A to the number of EC's currently in X
0338   D1CC E6 00       add_a_to_ecd	ldab	$00,X
0339   D1CE             			ifmi
0339   D1CE             
0339   D1CE 2A FE       
0340   D1D0 C4 0F       				andb	#$0F
0341   D1D2             			endif
0341   D1D2             
0341   D1D2             
0341   D1D2             
0341   D1D2             
0341   D1D2             
0341   D1D2~            			endif
0341   D1D2~            			endif
0341   D1D2             
0341   D1D2~            			endif
0341   D1D2~            			endif
0341   D1D2             
0341   D1CF             
0341   D1CF 02          
0341   D1D0             
0341   D1D0             
0341   D1D0~            			endif
0341   D1D0~            			endif
0341   D1D0~            			endif
0341   D1D0             
0341   D1D2             
0341   D1D2~            			endif
0341   D1D2~            			endif
0341   D1D2             
0342   D1D2 1B          			aba	
0343   D1D3 19          			daa	
0344   D1D4 81 09       			cmpa	#$09
0345   D1D6             			ifle
0345   D1D6             
0345   D1D6 2E FE       
0346   D1D8 8A F0       				oraa	#$F0
0347   D1DA             			endif
0347   D1DA             
0347   D1DA             
0347   D1DA             
0347   D1DA             
0347   D1DA             
0347   D1DA~            			endif
0347   D1DA~            			endif
0347   D1DA             
0347   D1DA~            			endif
0347   D1DA~            			endif
0347   D1DA             
0347   D1D7             
0347   D1D7 02          
0347   D1D8             
0347   D1D8             
0347   D1D8~            			endif
0347   D1D8~            			endif
0347   D1D8~            			endif
0347   D1D8             
0347   D1DA             
0347   D1DA~            			endif
0347   D1DA~            			endif
0347   D1DA             
0348   D1DA A7 00       			staa	$00,X
0349   D1DC 39          			rts	
0350   D1DD             
0351   D1DD             ;*****************************************************
0352   D1DD             ;* Animations for GAME OVER text, each slide in from
0353   D1DD             ;* the Left and Right edges respectively.
0354   D1DD             ;*****************************************************
0355   D1DD CE 00 66    ani_game_lr		ldx	#alpha_b0+6
0356   D1E0 FF 11 8E    			stx	game_var_3
0357   D1E3 CE E5 5F    			ldx	#msg_game
0358   D1E6 BD D2 49    			jsr	slide_r
0359   D1E9 7E E9 C4    to_kill2		jmp	killthread
0360   D1EC             
0361   D1EC CE 00 65    ani_over_rl		ldx	#alpha_b0+5
0362   D1EF FF 11 92    			stx	game_var_5
0363   D1F2 CE E5 65    			ldx	#msg_over
0364   D1F5 BD D2 58    			jsr	slide_l
0365   D1F8 20 EF       			bra	to_kill2
0366   D1FA             
0367   D1FA C6 FF       killthreads_ff	ldab	#$FF
0368   D1FC 7E EA 5B    			jmp	kill_threads
0369   D1FF             			
0370   D1FF             ;*****************************************************
0371   D1FF             ;* Outhole in Hyperball is when the players Energy
0372   D1FF             ;* Centers are gone;
0373   D1FF             ;*****************************************************
0374   D1FF 86 78       hook_outhole	ldaa	#$78
0375   D201 8D F7       			bsr	killthreads_ff			;kill any game running threads
0376   D203 96 E8       			ldaa	random_bool
0377   D205             			ifeq						;Randomly give 50 points... why exactly? We may never know.
0377   D205             
0377   D205 26 FE       
0378   D207 86 29       				ldaa	#$29
0379   D209 BD EB 3D    				jsr	score_main			;50 points
0380   D20C             			endif
0380   D20C             
0380   D20C             
0380   D20C             
0380   D20C             
0380   D20C             
0380   D20C~            			endif
0380   D20C~            			endif
0380   D20C             
0380   D20C~            			endif
0380   D20C~            			endif
0380   D20C             
0380   D206             
0380   D206 05          
0380   D207             
0380   D207             
0380   D207~            			endif
0380   D207~            			endif
0380   D207~            			endif
0380   D207             
0380   D20C             
0380   D20C~            			endif
0380   D20C~            			endif
0380   D20C             
0381   D20C 7C 00 E6    			inc	flag_tilt				;turn off the shooters 
0382   D20F D6 5E       			ldab	p2_ec_b0
0383   D211 96 EB       			ldaa	player_up
0384   D213             			ifne
0384   D213             
0384   D213 27 FE       
0385   D215 D6 5C       				ldab	p1_ec_b0
0386   D217             			endif
0386   D217             
0386   D217             
0386   D217             
0386   D217             
0386   D217             
0386   D217~            			endif
0386   D217~            			endif
0386   D217             
0386   D217~            			endif
0386   D217~            			endif
0386   D217             
0386   D214             
0386   D214 02          
0386   D215             
0386   D215             
0386   D215~            			endif
0386   D215~            			endif
0386   D215~            			endif
0386   D215             
0386   D217             
0386   D217~            			endif
0386   D217~            			endif
0386   D217             
0387   D217 C1 F0       			cmpb	#$F0
0388   D219 26 2B       			bne	goto_sme
0389   D21B CE E5 58    			ldx	#msg_player
0390   D21E BD D3 0B    			jsr	copy_msg_full
0391   D221 8B 1C       			adda	#$1C
0392   D223 DE B8       			ldx	temp1
0393   D225 A7 02       			staa	$02,X
0394   D227 96 EA       			ldaa	num_players
0395   D229             			ifne
0395   D229             
0395   D229 27 FE       
0396   D22B             				SLEEP($60)
0396   D22B BD E9 7C    
0396   D22E 60          
0397   D22F             			endif
0397   D22F             
0397   D22F             
0397   D22F             
0397   D22F             
0397   D22F             
0397   D22F~            			endif
0397   D22F~            			endif
0397   D22F             
0397   D22F~            			endif
0397   D22F~            			endif
0397   D22F             
0397   D22A             
0397   D22A 04          
0397   D22B             
0397   D22B             
0397   D22B~            			endif
0397   D22B~            			endif
0397   D22B~            			endif
0397   D22B             
0397   D22F             
0397   D22F~            			endif
0397   D22F~            			endif
0397   D22F             
0398   D22F CE D1 DD    			ldx	#ani_game_lr
0399   D232 BD EA 24    			jsr	newthread_06
0400   D235 CE D1 EC    			ldx	#ani_over_rl
0401   D238 BD EA 24    			jsr	newthread_06
0402   D23B 8D 09       			bsr	goto_sme
0403   D23D 86 09       			ldaa	#$09
0404   D23F BD EC 3B    			jsr	isnd_once
0405   D242             			SLEEP($F0)
0405   D242 BD E9 7C    
0405   D245 F0          
0406   D246             
0407   D246 7E D2 D6    goto_sme		jmp	setup_msg_endptr
0408   D249             
0409   D249 A6 00       slide_r		ldaa	$00,X
0410   D24B 84 0F       			anda	#$0F
0411   D24D BD EE 3E    			jsr	xplusa
0412   D250             			begin
0412   D250             
0413   D250 E6 00       				ldab	$00,X
0414   D252 09          				dex	
0415   D253 8D 21       gb_0D				bsr	step_r
0416   D255             			eqend
0416   D255             
0416   D255             
0416   D255~            			eqend
0416   D255~            			eqend
0416   D255             
0416   D255 26 F9       
0416   D257             
0416   D257~            			eqend
0416   D257~            			eqend
0416   D257             
0417   D257 39          			rts	
0418   D258             
0419   D258 A6 00       slide_l		ldaa	$00,X
0420   D25A 84 0F       			anda	#$0F
0421   D25C             			begin
0421   D25C             
0422   D25C 08          				inx	
0423   D25D E6 00       				ldab	$00,X
0424   D25F 8D 2A       gb_0F				bsr	step_l
0425   D261             			eqend
0425   D261             
0425   D261             
0425   D261~            			eqend
0425   D261~            			eqend
0425   D261             
0425   D261 26 F9       
0425   D263             
0425   D263~            			eqend
0425   D263~            			eqend
0425   D263             
0426   D263 39          			rts	
0427   D264             
0428   D264 8D 55       			bsr	gb_0C
0429   D266 8D E1       			bsr	slide_r
0430   D268 5F          			clrb	
0431   D269 86 01       			ldaa	#$01
0432   D26B 20 E6       			bra	gb_0D
0433   D26D             
0434   D26D 8D 41       ani_msg_rlslide	bsr	gb_0E
0435   D26F 8D E7       			bsr	slide_l
0436   D271 5F          			clrb	
0437   D272 86 01       gj_2E			ldaa	#$01
0438   D274 20 E9       			bra	gb_0F
0439   D276             
0440   D276 36          step_r		psha	
0441   D277 37          			pshb	
0442   D278 FF 11 8C    			stx	game_var_2
0443   D27B CE 00 60    			ldx	#alpha_b0
0444   D27E             			begin
0444   D27E             
0445   D27E 17          				tba	
0446   D27F E6 00       				ldab	$00,X
0447   D281 A7 00       				staa	$00,X
0448   D283 08          				inx	
0449   D284 BC 11 8E    				cpx	game_var_3
0450   D287             			eqend
0450   D287             
0450   D287             
0450   D287~            			eqend
0450   D287~            			eqend
0450   D287             
0450   D287 26 F5       
0450   D289             
0450   D289~            			eqend
0450   D289~            			eqend
0450   D289             
0451   D289 20 13       			bra	gb_61
0452   D28B             
0453   D28B 36          step_l		psha	
0454   D28C 37          			pshb	
0455   D28D FF 11 8C    			stx	game_var_2
0456   D290 CE 00 6B    			ldx	#alpha_b0+11
0457   D293 17          gb_A0			tba	
0458   D294 E6 00       			ldab	$00,X
0459   D296 A7 00       			staa	$00,X
0460   D298 09          			dex	
0461   D299 BC 11 92    			cpx	game_var_5
0462   D29C 26 F5       			bne	gb_A0
0463   D29E FE 11 8C    gb_61			ldx	game_var_2
0464   D2A1 33          			pulb	
0465   D2A2 96 0A       			ldaa	game_ram_a
0466   D2A4             			ifeq
0466   D2A4             
0466   D2A4 26 FE       
0467   D2A6 86 09       				ldaa	#$09
0468   D2A8             			endif
0468   D2A8             
0468   D2A8             
0468   D2A8             
0468   D2A8             
0468   D2A8             
0468   D2A8~            			endif
0468   D2A8~            			endif
0468   D2A8             
0468   D2A8~            			endif
0468   D2A8~            			endif
0468   D2A8             
0468   D2A5             
0468   D2A5 02          
0468   D2A6             
0468   D2A6             
0468   D2A6~            			endif
0468   D2A6~            			endif
0468   D2A6~            			endif
0468   D2A6             
0468   D2A8             
0468   D2A8~            			endif
0468   D2A8~            			endif
0468   D2A8             
0469   D2A8 97 D5       			staa	thread_timer_byte
0470   D2AA 32          			pula	
0471   D2AB BD E9 71    			jsr	delaythread
0472   D2AE 4A          			deca	
0473   D2AF 39          			rts	
0474   D2B0             
0475   D2B0 FF 11 90    gb_0E			stx	game_var_4
0476   D2B3 CE 00 5F    			ldx	#p2_ec_b1
0477   D2B6 FF 11 92    			stx	game_var_5
0478   D2B9 20 09       			bra	gb_5E
0479   D2BB             
0480   D2BB FF 11 90    gb_0C			stx	game_var_4
0481   D2BE CE 00 6C    			ldx	#alpha_b1
0482   D2C1 FF 11 8E    			stx	game_var_3
0483   D2C4 FE 11 90    gb_5E			ldx	game_var_4
0484   D2C7 39          			rts	
0485   D2C8             
0486   D2C8 8D E6       gj_20			bsr	gb_0E
0487   D2CA 8D BF       gb_93			bsr	step_l
0488   D2CC 26 FC       			bne	gb_93
0489   D2CE 39          			rts	
0490   D2CF             
0491   D2CF 8D EA       gj_3D			bsr	gb_0C
0492   D2D1 8D A3       gb_10			bsr	step_r
0493   D2D3 26 FC       			bne	gb_10
0494   D2D5 39          			rts	
0495   D2D6             
0496   D2D6 36          setup_msg_endptr	psha	
0497   D2D7 37          			pshb	
0498   D2D8 DF C2       			stx	sys_temp5
0499   D2DA CE 00 60    			ldx	#alpha_b0
0500   D2DD DF B8       			stx	temp1
0501   D2DF 8D 73       			bsr	clr_next_12
0502   D2E1 DE C2       			ldx	sys_temp5
0503   D2E3 E6 00       			ldab	$00,X
0504   D2E5 DE B8       			ldx	temp1
0505   D2E7 BD EC 32    			jsr	split_ab
0506   D2EA F7 11 88    			stab	game_var_0
0507   D2ED BD EE 8C    			jsr	xplusb
0508   D2F0 DF B8       			stx	temp1
0509   D2F2 DE C2       			ldx	sys_temp5
0510   D2F4 33          pulab_rts		pulb	
0511   D2F5 32          			pula	
0512   D2F6 39          			rts	
0513   D2F7             
0514   D2F7 36          ani_spinner		psha	
0515   D2F8 37          			pshb	
0516   D2F9             			begin
0516   D2F9             
0517   D2F9 86 26       				ldaa	#$26
0518   D2FB 5A          				decb	
0519   D2FC 27 F6       				beq	pulab_rts
0520   D2FE A7 00       spin_rpt				staa	$00,X
0521   D300             				SLEEP($02)
0521   D300 BD E9 7C    
0521   D303 02          
0522   D304 4C          				inca	
0523   D305 81 2A       				cmpa	#$2A
0524   D307             			neend
0524   D307             
0524   D307             
0524   D307~            			neend
0524   D307~            			neend
0524   D307             
0524   D307 27 F0       
0524   D309             
0524   D309~            			neend
0524   D309~            			neend
0524   D309             
0525   D309 20 F3       			bra	spin_rpt
0526   D30B             ;**************************************************
0527   D30B             ;* Message Copy - Either copies the full message 
0528   D30B             ;* into the the alpha buffer or copies a partial
0529   D30B             ;* message into the buffer for more complex 
0530   D30B             ;* rendering
0531   D30B             ;**************************************************
0532   D30B 8D C9       copy_msg_full	bsr	setup_msg_endptr
0533   D30D E6 00       copy_msg_part	ldab	$00,X
0534   D30F C4 0F       			andb	#$0F
0535   D311 08          			inx	
0536   D312 7E EE FB    			jmp	copyblock
0537   D315             
0538   D315 8D BF       ani_msg_letters	bsr	setup_msg_endptr
0539   D317 A6 00       			ldaa	$00,X
0540   D319 84 0F       			anda	#$0F
0541   D31B             			begin
0541   D31B             
0542   D31B C6 0B       				ldab	#$0B
0543   D31D 36          				psha	
0544   D31E 08          				inx	
0545   D31F FF 11 8A    				stx	game_var_1
0546   D322 A6 00       				ldaa	$00,X
0547   D324 97 6B       				staa	alpha_b0+11
0548   D326 CE 00 6A    				ldx	#alpha_b0+10
0549   D329             				begin
0549   D329             
0550   D329             					SLEEP($04)
0550   D329 BD E9 7C    
0550   D32C 04          
0551   D32D A6 01       					ldaa	$01,X
0552   D32F A7 00       					staa	$00,X
0553   D331 4F          					clra	
0554   D332 A7 01       					staa	$01,X
0555   D334 09          					dex	
0556   D335 5A          					decb	
0557   D336 F1 11 88    					cmpb	game_var_0
0558   D339             				eqend
0558   D339             
0558   D339             
0558   D339~            				eqend
0558   D339~            				eqend
0558   D339             
0558   D339 26 EE       
0558   D33B             
0558   D33B~            				eqend
0558   D33B~            				eqend
0558   D33B             
0559   D33B FE 11 8A    				ldx	game_var_1
0560   D33E 7C 11 88    				inc	game_var_0
0561   D341 32          				pula	
0562   D342 4A          				deca	
0563   D343             			eqend
0563   D343             
0563   D343             
0563   D343~            			eqend
0563   D343~            			eqend
0563   D343             
0563   D343 26 D6       
0563   D345             
0563   D345~            			eqend
0563   D345~            			eqend
0563   D345             
0564   D345 39          			rts	
0565   D346             
0566   D346 BD EA F8    gj_0D			jsr	update_commas
0567   D349 5F          clr_alpha_set_b0			clrb	
0568   D34A 20 02       			bra	clr_alpha_set_bx
0569   D34C             
0570   D34C C6 7F       clr_alpha_set_b1	ldab	#$7F
0571   D34E BD D8 58    clr_alpha_set_bx	jsr	stab_all_alphmsk
0572   D351 CE 00 6C    			ldx	#alpha_b1
0573   D354 4F          clr_next_12		clra	
0574   D355 C6 0C       			ldab	#$0C
0575   D357 7E F8 A9    			jmp	write_range
0576   D35A             
0577   D35A 5AFEF2FFC010sw_plumbtilt	.db $5A,$FE,$F2,$FF,$C0,$10	;BEQ_(BIT#80 P #FF) to tilt_kill
0578   D360             			EXE_($06)				;CPU Execute Next 6 Bytes
0578   D360~            			EXE_($06)				;CPU Execute Next 6 Bytes
0578   D360~            			EXE_($06)				;CPU Execute Next 6 Bytes
0578   D360             
0578   D360 48          
0578   D361             
0579   D361 CE D3 71    			ldx	#tilt_sleeper
0580   D364 BD EA 24    			jsr	newthread_06
0581   D367 F5          			SND_($15)				;Sound #15
0582   D368             			JSRD_(tilt_warning)		
0582   D368 57          
0582   D369 FB FD       
0583   D36B 5A F0 09    			.db $5A,$F0,$09			;BEQ_TILT to game_tilt
0584   D36E             			SOL_(GI_PF_ON4)			; Sol#6:gi_relay_pf
0584   D36E 31 46       
0585   D370             tilt_kill		KILL_					;Remove This Thread
0585   D370 03          
0586   D371             
0587   D371 3F          tilt_sleeper	swi	
0588   D372             			PRI_($C0)				;Priority=#C0
0588   D372 52 C0       
0589   D374             			SLEEP_(24)
0589   D374~            			SLEEP_(24)
0589   D374~            			SLEEP_(24)
0589   D374             
0589   D374 53 18       
0589   D376             
0590   D376             			KILL_					;Remove This Thread
0590   D376 03          
0591   D377             
0592   D377             game_tilt		SOL_(GI_PF_ON)			; Sol#6:gi_relay_pf
0592   D377 31 F6       
0593   D379             			PRI_($A0)				;Priority=#A0
0593   D379 52 A0       
0594   D37B             			REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
0594   D37B 55 08 00    
0595   D37E             			JSRR_(gj_06)			
0595   D37E~            			JSRR_(gj_06)			
0595   D37E~            			JSRR_(gj_06)			
0595   D37E             
0595   D37E~            			JSRR_(gj_06)			
0595   D37E~            			JSRR_(gj_06)			
0595   D37E             
0595   D37E             
0595   D37E 93          
0595   D37F 8A          
0596   D380             			CPUX_					;Resume CPU Execution
0596   D380 04          
0597   D381 CE E5 F4    			ldx	#msg_tilt
0598   D384 8D 85       			bsr	copy_msg_full
0599   D386 8D C4       			bsr	clr_alpha_set_b1
0600   D388 86 31       			ldaa	#$31
0601   D38A             			begin
0601   D38A             
0602   D38A BD D8 53    				jsr	invert_alphamsk
0603   D38D             				SLEEP($06)
0603   D38D BD E9 7C    
0603   D390 06          
0604   D391 4A          				deca	
0605   D392             			eqend
0605   D392             
0605   D392             
0605   D392~            			eqend
0605   D392~            			eqend
0605   D392             
0605   D392 26 F6       
0605   D394             
0605   D394~            			eqend
0605   D394~            			eqend
0605   D394             
0606   D394 CE 00 00    			ldx	#0000
0607   D397 FF 11 98    			stx	cur_spell_pos
0608   D39A 3F          			swi	
0609   D39B             			JSRDR_(setup_msg_endptr)
0609   D39B~            			JSRDR_(setup_msg_endptr)
0609   D39B~            			JSRDR_(setup_msg_endptr)
0609   D39B             
0609   D39B~            			JSRDR_(setup_msg_endptr)
0609   D39B~            			JSRDR_(setup_msg_endptr)
0609   D39B             
0609   D39B             
0609   D39B AF          
0609   D39C 39          
0610   D39D             			JSRDR_(stab_all_alphmsk)
0610   D39D~            			JSRDR_(stab_all_alphmsk)
0610   D39D~            			JSRDR_(stab_all_alphmsk)
0610   D39D             
0610   D39D~            			JSRDR_(stab_all_alphmsk)
0610   D39D~            			JSRDR_(stab_all_alphmsk)
0610   D39D             
0610   D39D             
0610   D39D A4          
0610   D39E B9          
0611   D39F             			RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
0611   D39F             
0611   D39F 51 60       
0611   D3A1~            			RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
0611   D3A1~            			RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
0611   D3A1             
0612   D3A1             gj_44			SOL_(GI_PF_OFF,ENERGY_FL_OFF,P1_FL_OFF,P2_FL_OFF)		
0612   D3A1 3406010207  
0613   D3A6             			PRI_($00)				;Priority=#00
0613   D3A6 52 00       
0614   D3A8             			JSRDR_(save_spell)		
0614   D3A8~            			JSRDR_(save_spell)		
0614   D3A8~            			JSRDR_(save_spell)		
0614   D3A8             
0614   D3A8~            			JSRDR_(save_spell)		
0614   D3A8~            			JSRDR_(save_spell)		
0614   D3A8             
0614   D3A8             
0614   D3A8 A5          
0614   D3A9 DD          
0615   D3AA             			JSRD_(update_commas)		
0615   D3AA 57          
0615   D3AB EA F8       
0616   D3AD 5C          			JMPD_(outhole_main)
0616   D3AE FA 43       
0617   D3B0             		
0618   D3B0 7C 00 E6    hook_playerinit	inc	flag_tilt			;turn off the shooters 
0619   D3B3 CE E5 58    			ldx	#msg_player
0620   D3B6 BD D3 0B    			jsr	copy_msg_full
0621   D3B9 DE CF       			ldx	current_thread
0622   D3BB E7 0D       			stab	$0D,X
0623   D3BD 96 EB       			ldaa	player_up
0624   D3BF 8B 1C       			adda	#$1C
0625   D3C1 DE B8       			ldx	temp1
0626   D3C3 A7 02       			staa	$02,X
0627   D3C5 BD D3 4C    			jsr	clr_alpha_set_b1
0628   D3C8 BD DF 11    			jsr	ani_starslide
0629   D3CB CE E3 34    plyer_load		ldx	#ec_animate
0630   D3CE BD D5 0D    			jsr	addthread_clra
0631   D3D1 8D 20       			bsr	get_current_ecs
0632   D3D3 7F 13 9D    			clr	hy_unknown_4
0633   D3D6 3F          			swi	
0634   D3D7 5BFCE60006  			.db $5B,$FC,$E6,$00,$06		;BNE_RAM$06==#0 to gb_11
0635   D3DC C2 00       			SETRAM_($02,$00)			;RAM$02=$00
0636   D3DE C6 05       			SETRAM_($06,$05)			;RAM$06=$05
0637   D3E0             			RSET0_($0A)				;Effect: Range #0A
0637   D3E0             
0637   D3E0 18 0A       
0638   D3E2             gb_11			RCLR0_($4F)				;Effect: Range #4F
0638   D3E2             
0638   D3E2 19 4F       
0639   D3E4             			RCLR1_($40)				;Effect: Range #40
0639   D3E4             
0639   D3E4 29 40       
0640   D3E6 B0 0B       			ADDRAM_($00,$0B)			;RAM$00+=$0B
0641   D3E8 5AFCE10012  gj_0B			.db $5A,$FC,$E1,$00,$12		;BEQ_RAM$01==#0 to begin_play
0642   D3ED             			JSRDR_(to_lampm_a)	
0642   D3ED~            			JSRDR_(to_lampm_a)	
0642   D3ED~            			JSRDR_(to_lampm_a)	
0642   D3ED             
0642   D3ED~            			JSRDR_(to_lampm_a)	
0642   D3ED~            			JSRDR_(to_lampm_a)	
0642   D3ED             
0642   D3ED             
0642   D3ED A5          
0642   D3EE FF          
0643   D3EF B1 FF       			ADDRAM_($01,$FF)			;RAM$01+=$FF
0644   D3F1             			JMPR_(gj_0B)
0644   D3F1~            			JMPR_(gj_0B)
0644   D3F1~            			JMPR_(gj_0B)
0644   D3F1             
0644   D3F1~            			JMPR_(gj_0B)
0644   D3F1~            			JMPR_(gj_0B)
0644   D3F1             
0644   D3F1             
0644   D3F1 8F          
0644   D3F2 F5          
0645   D3F3             			
0646   D3F3 D6 EB       get_current_ecs	ldab	player_up
0647   D3F5 17          			tba	
0648   D3F6 CE 13 9A    			ldx	#p1_ecs
0649   D3F9 BD EE 8C    xplusb_ldb		jsr	xplusb
0650   D3FC E6 00       			ldab	$00,X
0651   D3FE 39          			rts	
0652   D3FF             
0653   D3FF B0 43       begin_play		ADDRAM_($00,$43)			;RAM$00+=$43
0654   D401             			SOL_(GI_PF_OFF)			; Sol#6:gi_relay_pf
0654   D401 31 06       
0655   D403             			BITFLP_($00)			;Flash Lamp/Bit @RAM:00
0655   D403             
0655   D403 17 00       
0656   D405 C1 10       			SETRAM_($01,$10)			;RAM$01=$10
0657   D407 E7          gb_12			SND_($07)				;Sound #07
0658   D408             			SLEEP_(10)
0658   D408             
0658   D408 7A          
0658   D409~            			SLEEP_(10)
0658   D409~            			SLEEP_(10)
0658   D409             
0659   D409 B1 FF       			ADDRAM_($01,$FF)			;RAM$01+=$FF
0660   D40B 5BFCE100F7  			.db $5B,$FC,$E1,$00,$F7		;BNE_RAM$01==#0 to gb_12
0661   D410             			BITONP_($00)			;Turn ON Lamp/Bit @RAM:00
0661   D410             
0661   D410 14 00       
0662   D412             			BITOFF4_($30)			;Turn OFF: Lamp#30(lamp_p1)
0662   D412 D9 30       
0663   D414             			JSRDR_(setup_msg_endptr)
0663   D414~            			JSRDR_(setup_msg_endptr)
0663   D414~            			JSRDR_(setup_msg_endptr)
0663   D414             
0663   D414~            			JSRDR_(setup_msg_endptr)
0663   D414~            			JSRDR_(setup_msg_endptr)
0663   D414             
0663   D414             
0663   D414 AE          
0663   D415 C0          
0664   D416             			SOL_(BALL_LIFT_ON)		; Sol#9:ball_lift
0664   D416 31 F9       
0665   D418             			SLEEP_(64)
0665   D418~            			SLEEP_(64)
0665   D418~            			SLEEP_(64)
0665   D418             
0665   D418 53 40       
0665   D41A             
0666   D41A             			REMTHREADS_($FF,$48)		;Remove Multiple Threads Based on Priority
0666   D41A 55 FF 48    
0667   D41D             			CPUX_					;Resume CPU Execution
0667   D41D 04          
0668   D41E 4F          			clra	
0669   D41F 97 E6       			staa	flag_tilt			;turn ON the shooters 
0670   D421 97 0A       			staa	game_ram_a
0671   D423 CE 01 97    			ldx	#adj_reflex_diff
0672   D426 BD EE A2    			jsr	cmosinc_b
0673   D429 86 11       			ldaa	#$11
0674   D42B C4 0F       			andb	#$0F
0675   D42D             			ifne
0675   D42D             
0675   D42D 27 FE       
0676   D42F             				begin
0676   D42F             
0677   D42F 4A          					deca	
0678   D430 5A          					decb	
0679   D431             				eqend
0679   D431             
0679   D431             
0679   D431~            				eqend
0679   D431~            				eqend
0679   D431             
0679   D431 26 FC       
0679   D433             
0679   D433~            				eqend
0679   D433~            				eqend
0679   D433             
0680   D433 81 04       				cmpa	#$04
0681   D435             				ifle	
0681   D435             
0681   D435 2E FE       
0682   D437 86 04       					ldaa	#$04
0683   D439             				endif
0683   D439             
0683   D439             
0683   D439             
0683   D439             
0683   D439             
0683   D439~            				endif
0683   D439~            				endif
0683   D439             
0683   D439~            				endif
0683   D439~            				endif
0683   D439             
0683   D436             
0683   D436 02          
0683   D437             
0683   D437             
0683   D437~            				endif
0683   D437~            				endif
0683   D437~            				endif
0683   D437             
0683   D439             
0683   D439~            				endif
0683   D439~            				endif
0683   D439             
0684   D439             			endif
0684   D439             
0684   D439             
0684   D439             
0684   D439             
0684   D439             
0684   D439~            			endif
0684   D439~            			endif
0684   D439             
0684   D439~            			endif
0684   D439~            			endif
0684   D439             
0684   D42E             
0684   D42E 0A          
0684   D42F             
0684   D42F             
0684   D42F~            			endif
0684   D42F~            			endif
0684   D42F~            			endif
0684   D42F             
0684   D439             
0684   D439~            			endif
0684   D439~            			endif
0684   D439             
0685   D439 97 0C       			staa	game_ram_c			;saves the default reflex wave difficulty min=4 max=11
0686   D43B 96 05       			ldaa	current_wave		;get the current wave
0687   D43D D6 03       			ldab	cur_bolt_cnt			;are we done?
0688   D43F             			ifeq
0688   D43F             
0688   D43F 26 FE       
0689   D441 8B 01       				adda	#$01				;yes, advance wave
0690   D443 19          				daa	
0691   D444 97 05       				staa	current_wave
0692   D446 36          				psha	
0693   D447 C6 0F       				ldab	#$0F
0694   D449 D7 07       				stab	baiter_speed
0695   D44B C6 04       				ldab	#$04
0696   D44D CE 01 9F    				ldx	#adj_baiter_speed
0697   D450 BD EE 92    				jsr	cmosinc_a
0698   D453 84 0F       				anda	#$0F
0699   D455             				ifne
0699   D455             
0699   D455 27 FE       
0700   D457 7A 00 07    gb_66					dec	baiter_speed
0701   D45A D1 07       					cmpb	baiter_speed
0702   D45C             					ifne
0702   D45C             
0702   D45C 27 FE       
0703   D45E 4A          						deca	
0704   D45F 26 F6       						bne	gb_66
0705   D461             					endif
0705   D461             
0705   D461             
0705   D461             
0705   D461             
0705   D461             
0705   D461~            					endif
0705   D461~            					endif
0705   D461             
0705   D461~            					endif
0705   D461~            					endif
0705   D461             
0705   D45D             
0705   D45D 03          
0705   D45E             
0705   D45E             
0705   D45E~            					endif
0705   D45E~            					endif
0705   D45E~            					endif
0705   D45E             
0705   D461             
0705   D461~            					endif
0705   D461~            					endif
0705   D461             
0706   D461             				endif
0706   D461             
0706   D461             
0706   D461             
0706   D461             
0706   D461             
0706   D461~            				endif
0706   D461~            				endif
0706   D461             
0706   D461~            				endif
0706   D461~            				endif
0706   D461             
0706   D456             
0706   D456 0A          
0706   D457             
0706   D457             
0706   D457~            				endif
0706   D457~            				endif
0706   D457~            				endif
0706   D457             
0706   D461             
0706   D461~            				endif
0706   D461~            				endif
0706   D461             
0707   D461 D6 05       				ldab	current_wave
0708   D463 BD F8 9D    				jsr	dec2hex
0709   D466 96 07       				ldaa	baiter_speed
0710   D468 81 04       gb_68				cmpa	#$04
0711   D46A 27 04       				beq	gb_67
0712   D46C 4A          				deca	
0713   D46D 5A          				decb	
0714   D46E 26 F8       				bne	gb_68
0715   D470 97 07       gb_67				staa	baiter_speed
0716   D472 32          				pula	
0717   D473             			endif
0717   D473             
0717   D473             
0717   D473             
0717   D473             
0717   D473             
0717   D473~            			endif
0717   D473~            			endif
0717   D473             
0717   D473~            			endif
0717   D473~            			endif
0717   D473             
0717   D440             
0717   D440 32          
0717   D441             
0717   D441             
0717   D441~            			endif
0717   D441~            			endif
0717   D441~            			endif
0717   D441             
0717   D473             
0717   D473~            			endif
0717   D473~            			endif
0717   D473             
0718   D473             			begin
0718   D473             
0719   D473 5F          				clrb	
0720   D474 36          				psha	
0721   D475 96 0C       				ldaa	game_ram_c
0722   D477 4A          				deca	
0723   D478 81 03       				cmpa	#$03
0724   D47A             				ifgte
0724   D47A             
0724   D47A 2D FE       
0725   D47C 97 0C       					staa	game_ram_c
0726   D47E             				endif
0726   D47E             
0726   D47E             
0726   D47E             
0726   D47E             
0726   D47E             
0726   D47E~            				endif
0726   D47E~            				endif
0726   D47E             
0726   D47E~            				endif
0726   D47E~            				endif
0726   D47E             
0726   D47B             
0726   D47B 02          
0726   D47C             
0726   D47C             
0726   D47C~            				endif
0726   D47C~            				endif
0726   D47C~            				endif
0726   D47C             
0726   D47E             
0726   D47E~            				endif
0726   D47E~            				endif
0726   D47E             
0727   D47E 32          				pula	
0728   D47F 8B 99       gb_6B				adda	#$99
0729   D481 19          				daa	
0730   D482 27 07       				beq	gb_6A
0731   D484 5C          				incb	
0732   D485 C1 05       				cmpb	#$05
0733   D487             			neend
0733   D487             
0733   D487             
0733   D487~            			neend
0733   D487~            			neend
0733   D487             
0733   D487 27 EA       
0733   D489             
0733   D489~            			neend
0733   D489~            			neend
0733   D489             
0734   D489 20 F4       			bra	gb_6B
0735   D48B             
0736   D48B 96 05       gb_6A			ldaa	current_wave
0737   D48D C1 04       			cmpb	#$04
0738   D48F             			ifne
0738   D48F             
0738   D48F 27 FE       
0739   D491 7D 00 03    				tst	cur_bolt_cnt			;is bolt count at zero? 
0740   D494             				ifeq
0740   D494             
0740   D494 26 FE       
0741   D496 CE E4 A2    					ldx	#wave_bolt_cnt		;load the bolt count for this level
0742   D499 BD D3 F9    					jsr	xplusb_ldb
0743   D49C 81 09       					cmpa	#$09
0744   D49E             					ifgte
0744   D49E             
0744   D49E 2D FE       
0745   D4A0 C6 20       						ldab	#$20				;after level 9, waves always have 32 bolts
0746   D4A2             					endif
0746   D4A2             
0746   D4A2             
0746   D4A2             
0746   D4A2             
0746   D4A2             
0746   D4A2~            					endif
0746   D4A2~            					endif
0746   D4A2             
0746   D4A2~            					endif
0746   D4A2~            					endif
0746   D4A2             
0746   D49F             
0746   D49F 02          
0746   D4A0             
0746   D4A0             
0746   D4A0~            					endif
0746   D4A0~            					endif
0746   D4A0~            					endif
0746   D4A0             
0746   D4A2             
0746   D4A2~            					endif
0746   D4A2~            					endif
0746   D4A2             
0747   D4A2 D7 03       					stab	cur_bolt_cnt
0748   D4A4             				endif
0748   D4A4             
0748   D4A4             
0748   D4A4             
0748   D4A4             
0748   D4A4             
0748   D4A4~            				endif
0748   D4A4~            				endif
0748   D4A4             
0748   D4A4~            				endif
0748   D4A4~            				endif
0748   D4A4             
0748   D495             
0748   D495 0E          
0748   D496             
0748   D496             
0748   D496~            				endif
0748   D496~            				endif
0748   D496~            				endif
0748   D496             
0748   D4A4             
0748   D4A4~            				endif
0748   D4A4~            				endif
0748   D4A4             
0749   D4A4 96 04       				ldaa	game_ram_4
0750   D4A6             				ifeq
0750   D4A6             
0750   D4A6 26 FE       
0751   D4A8 86 14       					ldaa	#$14
0752   D4AA 97 04       					staa	game_ram_4
0753   D4AC             				endif
0753   D4AC             
0753   D4AC             
0753   D4AC             
0753   D4AC             
0753   D4AC             
0753   D4AC~            				endif
0753   D4AC~            				endif
0753   D4AC             
0753   D4AC~            				endif
0753   D4AC~            				endif
0753   D4AC             
0753   D4A7             
0753   D4A7 04          
0753   D4A8             
0753   D4A8             
0753   D4A8~            				endif
0753   D4A8~            				endif
0753   D4A8~            				endif
0753   D4A8             
0753   D4AC             
0753   D4AC~            				endif
0753   D4AC~            				endif
0753   D4AC             
0754   D4AC CE 01 9B    				ldx	#adj_bolt_speed
0755   D4AF BD EE A2    				jsr	cmosinc_b
0756   D4B2 C1 20       				cmpb	#$20
0757   D4B4             				ifgt
0757   D4B4             
0757   D4B4 2F FE       
0758   D4B6 C6 20       					ldab	#$20
0759   D4B8             				endif
0759   D4B8             
0759   D4B8             
0759   D4B8             
0759   D4B8             
0759   D4B8             
0759   D4B8~            				endif
0759   D4B8~            				endif
0759   D4B8             
0759   D4B8~            				endif
0759   D4B8~            				endif
0759   D4B8             
0759   D4B5             
0759   D4B5 02          
0759   D4B6             
0759   D4B6             
0759   D4B6~            				endif
0759   D4B6~            				endif
0759   D4B6~            				endif
0759   D4B6             
0759   D4B8             
0759   D4B8~            				endif
0759   D4B8~            				endif
0759   D4B8             
0760   D4B8 BD F8 9D    				jsr	dec2hex
0761   D4BB 17          				tba	
0762   D4BC D6 05       				ldab	current_wave
0763   D4BE BD F8 9D    				jsr	dec2hex
0764   D4C1 C1 01       				cmpb	#$01
0765   D4C3             				ifne
0765   D4C3             
0765   D4C3 27 FE       
0766   D4C5 58          					aslb	
0767   D4C6             				endif
0767   D4C6             
0767   D4C6             
0767   D4C6             
0767   D4C6             
0767   D4C6             
0767   D4C6~            				endif
0767   D4C6~            				endif
0767   D4C6             
0767   D4C6~            				endif
0767   D4C6~            				endif
0767   D4C6             
0767   D4C4             
0767   D4C4 01          
0767   D4C5             
0767   D4C5             
0767   D4C5~            				endif
0767   D4C5~            				endif
0767   D4C5~            				endif
0767   D4C5             
0767   D4C6             
0767   D4C6~            				endif
0767   D4C6~            				endif
0767   D4C6             
0768   D4C6 10          				sba	
0769   D4C7 25 04       				bcs	gb_A7
0770   D4C9 81 06       				cmpa	#$06
0771   D4CB             				iflt
0771   D4CB             
0771   D4CB 2C FE       
0772   D4CD 86 06       gb_A7					ldaa	#$06
0773   D4CF             				endif
0773   D4CF             
0773   D4CF             
0773   D4CF             
0773   D4CF             
0773   D4CF             
0773   D4CF~            				endif
0773   D4CF~            				endif
0773   D4CF             
0773   D4CF~            				endif
0773   D4CF~            				endif
0773   D4CF             
0773   D4CC             
0773   D4CC 02          
0773   D4CD             
0773   D4CD             
0773   D4CD~            				endif
0773   D4CD~            				endif
0773   D4CD~            				endif
0773   D4CD             
0773   D4CF             
0773   D4CF~            				endif
0773   D4CF~            				endif
0773   D4CF             
0774   D4CF 97 09       				staa	game_ram_9
0775   D4D1 CE D5 13    				ldx	#bolt_launcher
0776   D4D4 8D 29       				bsr	to_addthr_noa
0777   D4D6 CE DD 87    				ldx	#gb_3A
0778   D4D9 8D 24       				bsr	to_addthr_noa
0779   D4DB BD FB 94    				jsr	get_random
0780   D4DE C6 06       				ldab	#$06
0781   D4E0 81 25       				cmpa	#$25
0782   D4E2             				iflo
0782   D4E2             
0782   D4E2 22 FE       
0783   D4E4 C6 04       					ldab	#$04
0784   D4E6 CE DA AE    					ldx	#gj_3B
0785   D4E9 8D 14       					bsr	to_addthr_noa
0786   D4EB CE DA 86    					ldx	#gj_3C
0787   D4EE 8D 0F       					bsr	to_addthr_noa
0788   D4F0             				endif
0788   D4F0             
0788   D4F0             
0788   D4F0             
0788   D4F0             
0788   D4F0             
0788   D4F0~            				endif
0788   D4F0~            				endif
0788   D4F0             
0788   D4F0~            				endif
0788   D4F0~            				endif
0788   D4F0             
0788   D4E3             
0788   D4E3 0C          
0788   D4E4             
0788   D4E4             
0788   D4E4~            				endif
0788   D4E4~            				endif
0788   D4E4~            				endif
0788   D4E4             
0788   D4F0             
0788   D4F0~            				endif
0788   D4F0~            				endif
0788   D4F0             
0789   D4F0 D7 08       				stab	game_ram_8
0790   D4F2 CE D8 85    				ldx	#load_spell
0791   D4F5 8D 08       				bsr	to_addthr_noa
0792   D4F7 CE D5 AA    				ldx	#start_rndawd
0793   D4FA 8D 03       				bsr	to_addthr_noa
0794   D4FC CE DB E5    				ldx	#start_baiter
0795   D4FF 20 0C       to_addthr_noa		bra	addthread_clra
0796   D501             			endif
0796   D501             
0796   D501             
0796   D501             
0796   D501             
0796   D501             
0796   D501~            			endif
0796   D501~            			endif
0796   D501             
0796   D501~            			endif
0796   D501~            			endif
0796   D501             
0796   D490             
0796   D490 70          
0796   D491             
0796   D491             
0796   D491~            			endif
0796   D491~            			endif
0796   D491~            			endif
0796   D491             
0796   D501             
0796   D501~            			endif
0796   D501~            			endif
0796   D501             
0797   D501             			
0798   D501 86 2E       start_reflex	ldaa	#$2E
0799   D503 BD F1 FD    			jsr	lamp_on_f
0800   D506 86 10       			ldaa	#$10
0801   D508 97 0F       			staa	reflx_cur_pts
0802   D50A CE DF F0    			ldx	#reflex_thread
0803   D50D 4F          addthread_clra	clra	
0804   D50E 97 C8       newthreadp		staa	thread_priority
0805   D510 7E E9 D8    			jmp	newthread_sp
0806   D513             
0807   D513             bolt_launcher	SLEEP($03)
0807   D513 BD E9 7C    
0807   D516 03          
0808   D517             			begin
0808   D517             
0809   D517 96 08       				ldaa	game_ram_8
0810   D519 27 F8       				beq	bolt_launcher
0811   D51B CE D9 F1    				ldx	#gj_0C
0812   D51E 8D ED       				bsr	addthread_clra
0813   D520 CE 01 9D    				ldx	#adj_bolt_feed
0814   D523 BD EE 92    				jsr	cmosinc_a
0815   D526 84 0F       				anda	#$0F
0816   D528 D6 05       				ldab	current_wave
0817   D52A C1 09       				cmpb	#$09
0818   D52C             				ifgt
0818   D52C             
0818   D52C 2F FE       
0819   D52E C6 09       					ldab	#$09
0820   D530             				endif
0820   D530             
0820   D530             
0820   D530             
0820   D530             
0820   D530             
0820   D530~            				endif
0820   D530~            				endif
0820   D530             
0820   D530~            				endif
0820   D530~            				endif
0820   D530             
0820   D52D             
0820   D52D 02          
0820   D52E             
0820   D52E             
0820   D52E~            				endif
0820   D52E~            				endif
0820   D52E~            				endif
0820   D52E             
0820   D530             
0820   D530~            				endif
0820   D530~            				endif
0820   D530             
0821   D530 10          				sba	
0822   D531             				ifcs
0822   D531             
0822   D531 24 FE       
0823   D533 4F          					clra	
0824   D534             				endif
0824   D534             
0824   D534             
0824   D534             
0824   D534             
0824   D534             
0824   D534~            				endif
0824   D534~            				endif
0824   D534             
0824   D534~            				endif
0824   D534~            				endif
0824   D534             
0824   D532             
0824   D532 01          
0824   D533             
0824   D533             
0824   D533~            				endif
0824   D533~            				endif
0824   D533~            				endif
0824   D533             
0824   D534             
0824   D534~            				endif
0824   D534~            				endif
0824   D534             
0825   D534 8B 0B       				adda	#$0B
0826   D536             				begin
0826   D536             
0827   D536 D6 09       					ldab	game_ram_9
0828   D538 C1 0C       					cmpb	#$0C
0829   D53A             					ifgt
0829   D53A             
0829   D53A 2F FE       
0830   D53C 54          						lsrb
0831   D53D             					endif	
0831   D53D             
0831   D53D             
0831   D53D             
0831   D53D             
0831   D53D             
0831   D53D~            					endif	
0831   D53D~            					endif	
0831   D53D             
0831   D53D~            					endif	
0831   D53D~            					endif	
0831   D53D             
0831   D53B             
0831   D53B 01          
0831   D53C             
0831   D53C             
0831   D53C~            					endif	
0831   D53C~            					endif	
0831   D53C~            					endif	
0831   D53C             
0831   D53D             
0831   D53D~            					endif	
0831   D53D~            					endif	
0831   D53D             
0832   D53D D7 D5       					stab	thread_timer_byte
0833   D53F BD E9 71    					jsr	delaythread
0834   D542 4A          					deca	
0835   D543             				eqend
0835   D543             
0835   D543             
0835   D543~            				eqend
0835   D543~            				eqend
0835   D543             
0835   D543 26 F1       
0835   D545             
0835   D545~            				eqend
0835   D545~            				eqend
0835   D545             
0836   D545             			loopend
0836   D545             
0836   D545             
0836   D545~            			loopend
0836   D545~            			loopend
0836   D545             
0836   D545 20 D0       
0836   D547             
0836   D547~            			loopend
0836   D547~            			loopend
0836   D547             
0837   D547             
0838   D547             sw_l_shooter
0839   D547             sw_r_shooter	PRI_($B0)				;Priority=#B0
0839   D547 52 B0       
0840   D549 5BFBD030FEF2gj_0A			.db $5B,$FB,$D0,$30,$FE,$F2,$F0,$F2,$F0,$09;BNE_((#F0 P #F0) || BIT2#30) to gb_0A
0840   D54F F0F2F009
0841   D553 5AFEF2F0B00A			.db $5A,$FE,$F2,$F0,$B0,$0A	;BEQ_(BIT#70 P #F0) to gb_0B
0842   D559             			SLEEP_(1)
0842   D559             
0842   D559 71          
0842   D55A~            			SLEEP_(1)
0842   D55A~            			SLEEP_(1)
0842   D55A             
0843   D55A             			JMPR_(gj_0A)
0843   D55A~            			JMPR_(gj_0A)
0843   D55A~            			JMPR_(gj_0A)
0843   D55A             
0843   D55A~            			JMPR_(gj_0A)
0843   D55A~            			JMPR_(gj_0A)
0843   D55A             
0843   D55A             
0843   D55A 8F          
0843   D55B ED          
0844   D55C             			
0845   D55C             gb_0A			PRI_($F0)				;Priority=#F0
0845   D55C 52 F0       
0846   D55E E4          			SND_($04)				;Sound #04
0847   D55F             			JSRD_(solenoid_wait)		
0847   D55F 57          
0847   D560 FE CC       
0848   D562             			SLEEP_(11)
0848   D562             
0848   D562 7B          
0848   D563~            			SLEEP_(11)
0848   D563~            			SLEEP_(11)
0848   D563             
0849   D563             gb_0B			KILL_					;Remove This Thread
0849   D563 03          
0850   D564             
0851   D564 3F          gj_11			swi	
0852   D565             gb_18			SLEEP_(4)
0852   D565             
0852   D565 74          
0852   D566~            gb_18			SLEEP_(4)
0852   D566~            gb_18			SLEEP_(4)
0852   D566             
0853   D566 5AFEF2F0A0F9			.db $5A,$FE,$F2,$F0,$A0,$F9	;BEQ_(BIT#60 P #F0) to gb_18
0854   D56C             			PRI_($A1)				;Priority=#A1
0854   D56C 52 A1       
0855   D56E             			JSRDR_(gj_0D)		
0855   D56E~            			JSRDR_(gj_0D)		
0855   D56E~            			JSRDR_(gj_0D)		
0855   D56E             
0855   D56E~            			JSRDR_(gj_0D)		
0855   D56E~            			JSRDR_(gj_0D)		
0855   D56E             
0855   D56E             
0855   D56E AD          
0855   D56F D6          
0856   D570             			JSRDR_(setup_msg_endptr)
0856   D570~            			JSRDR_(setup_msg_endptr)
0856   D570~            			JSRDR_(setup_msg_endptr)
0856   D570             
0856   D570~            			JSRDR_(setup_msg_endptr)
0856   D570~            			JSRDR_(setup_msg_endptr)
0856   D570             
0856   D570             
0856   D570 AD          
0856   D571 64          
0857   D572             			EXE_($06)				;CPU Execute Next 6 Bytes
0857   D572~            			EXE_($06)				;CPU Execute Next 6 Bytes
0857   D572~            			EXE_($06)				;CPU Execute Next 6 Bytes
0857   D572             
0857   D572 48          
0857   D573             
0858   D573 CE E5 6B    			ldx	#msg_critical
0859   D576 BD D3 0B    			jsr	copy_msg_full
0860   D579 C0 14       			SETRAM_($00,$14)			;RAM$00=$14
0861   D57B             gb_19			JSRDR_(invert_alphamsk)	
0861   D57B~            gb_19			JSRDR_(invert_alphamsk)	
0861   D57B~            gb_19			JSRDR_(invert_alphamsk)	
0861   D57B             
0861   D57B~            gb_19			JSRDR_(invert_alphamsk)	
0861   D57B~            gb_19			JSRDR_(invert_alphamsk)	
0861   D57B             
0861   D57B             
0861   D57B A2          
0861   D57C D6          
0862   D57D F1          			SND_($11)				;Sound #11
0863   D57E             			SOL_(GI_PF_ON)				
0863   D57E 31 F6       
0864   D580             			SLEEP_(8)
0864   D580             
0864   D580 78          
0864   D581~            			SLEEP_(8)
0864   D581~            			SLEEP_(8)
0864   D581             
0865   D581             			SOL_(GI_PF_OFF)				; Sol#6:gi_relay_pf
0865   D581 31 06       
0866   D583             			SLEEP_(8)
0866   D583             
0866   D583 78          
0866   D584~            			SLEEP_(8)
0866   D584~            			SLEEP_(8)
0866   D584             
0867   D584 B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
0868   D586 5BFCE000F0  			.db $5B,$FC,$E0,$00,$F0		;BNE_RAM$00==#0 to gb_19
0869   D58B F8          			SND_($18)				;Sound #18
0870   D58C C1 00       			SETRAM_($01,$00)			;RAM$01=$00
0871   D58E             			JSRDR_(stab_all_alphmsk)
0871   D58E~            			JSRDR_(stab_all_alphmsk)
0871   D58E~            			JSRDR_(stab_all_alphmsk)
0871   D58E             
0871   D58E~            			JSRDR_(stab_all_alphmsk)
0871   D58E~            			JSRDR_(stab_all_alphmsk)
0871   D58E             
0871   D58E             
0871   D58E A2          
0871   D58F C8          
0872   D590             			KILL_					;Remove This Thread
0872   D590 03          
0873   D591             
0874   D591             gb_1B			SLEEP_(1)
0874   D591             
0874   D591 71          
0874   D592~            gb_1B			SLEEP_(1)
0874   D592~            gb_1B			SLEEP_(1)
0874   D592             
0875   D592 5B F6 4E 02 			.db $5B,$F6,$4E,$02		;BNE_RangeON#4E to gb_1A
0876   D596             			RCLR0_($4E)				;Effect: Range #4E
0876   D596             
0876   D596 19 4E       
0877   D598             gb_1A			JSRDR_(random_x0f)	
0877   D598~            gb_1A			JSRDR_(random_x0f)	
0877   D598~            gb_1A			JSRDR_(random_x0f)	
0877   D598             
0877   D598~            gb_1A			JSRDR_(random_x0f)	
0877   D598~            gb_1A			JSRDR_(random_x0f)	
0877   D598             
0877   D598             
0877   D598 A0          
0877   D599 5B          
0878   D59A 5AFDE00DF2  			.db $5A,$FD,$E0,$0D,$F2		;BEQ_RAM$00>=#13 to gb_1B
0879   D59F             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
0879   D59F             
0879   D59F 51 10       
0879   D5A1~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
0879   D5A1~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
0879   D5A1             
0880   D5A1 B1 3A       			ADDRAM_($01,$3A)			;RAM$01+=$3A
0881   D5A3 5A D0 E1 EA 			.db $5A,$D0,$E1,$EA		;BEQ_BIT2#E1 to gb_1B
0882   D5A7             			BITON4a_($01)			;Turn ON: Lamp#01(lamp_h2)
0882   D5A7 DC 01       
0883   D5A9             			MRTS_					;Macro RTS, Save MRA,MRB
0883   D5A9 02          
0884   D5AA             
0885   D5AA 8D 49       start_rndawd	bsr	random_x0f
0886   D5AC 26 01       			bne	gb_D2
0887   D5AE 4C          			inca	
0888   D5AF 3F          gb_D2			swi	
0889   D5B0             			PRI_($00)				;Priority=#00
0889   D5B0 52 00       
0890   D5B2             gb_1C			SLEEP_(112)
0890   D5B2~            gb_1C			SLEEP_(112)
0890   D5B2~            gb_1C			SLEEP_(112)
0890   D5B2             
0890   D5B2 53 70       
0890   D5B4             
0891   D5B4 B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
0892   D5B6 5BFCE000F7  			.db $5B,$FC,$E0,$00,$F7		;BNE_RAM$00==#0 to gb_1C
0893   D5BB             gb_1D			SLEEP_(10)
0893   D5BB             
0893   D5BB 7A          
0893   D5BC~            gb_1D			SLEEP_(10)
0893   D5BC~            gb_1D			SLEEP_(10)
0893   D5BC             
0894   D5BC 5AFEF2F0A0F9			.db $5A,$FE,$F2,$F0,$A0,$F9	;BEQ_(BIT#60 P #F0) to gb_1D
0895   D5C2             			PRI_($A6)				;Priority=#A6
0895   D5C2 52 A6       
0896   D5C4             gb_20			JSRR_(gb_1B)			
0896   D5C4~            gb_20			JSRR_(gb_1B)			
0896   D5C4~            gb_20			JSRR_(gb_1B)			
0896   D5C4             
0896   D5C4~            gb_20			JSRR_(gb_1B)			
0896   D5C4~            gb_20			JSRR_(gb_1B)			
0896   D5C4             
0896   D5C4             
0896   D5C4 9F          
0896   D5C5 CB          
0897   D5C6             			EXE_($03)				;CPU Execute Next 3 Bytes
0897   D5C6~            			EXE_($03)				;CPU Execute Next 3 Bytes
0897   D5C6~            			EXE_($03)				;CPU Execute Next 3 Bytes
0897   D5C6             
0897   D5C6 45          
0897   D5C7             
0898   D5C7 B7 11 9B    			staa	current_credits+1
0899   D5CA 5BFDE00B2B  			.db $5B,$FD,$E0,$0B,$2B		;BNE_RAM$00>=#11 to gb_1E
0900   D5CF 5AFCE00D0A  			.db $5A,$FC,$E0,$0D,$0A		;BEQ_RAM$00==#13 to gb_1F
0901   D5D4 5A F4 3C EC 			.db $5A,$F4,$3C,$EC		;BEQ_LampOn/Flash#3C to gb_20
0902   D5D8             			BITFL_($BA,$BB,$3C)		;Flash: Lamp#3A(lamp_e3), Lamp#3B(lamp_e2), Lamp#3C(lamp_e1)
0902   D5D8             
0902   D5D8 13 BA BB 3C 
0903   D5DC             			JMPR_(gj_0E)
0903   D5DC~            			JMPR_(gj_0E)
0903   D5DC~            			JMPR_(gj_0E)
0903   D5DC             
0903   D5DC~            			JMPR_(gj_0E)
0903   D5DC~            			JMPR_(gj_0E)
0903   D5DC             
0903   D5DC             
0903   D5DC 80          
0903   D5DD 24          
0904   D5DE             			
0905   D5DE 5A F4 45 E2 gb_1F			.db $5A,$F4,$45,$E2		;BEQ_LampOn/Flash#45 to gb_20
0906   D5E2             			BITFL_($C3,$C4,$45)		;Flash: Bit#03, Bit#04, Bit#05
0906   D5E2             
0906   D5E2 13 C3 C4 45 
0907   D5E6             			JMPR_(gj_0E)
0907   D5E6~            			JMPR_(gj_0E)
0907   D5E6~            			JMPR_(gj_0E)
0907   D5E6             
0907   D5E6~            			JMPR_(gj_0E)
0907   D5E6~            			JMPR_(gj_0E)
0907   D5E6             
0907   D5E6             
0907   D5E6 80          
0907   D5E7 1A          
0908   D5E8             			
0909   D5E8 7E FB 94    jmp_getrandom	jmp	get_random
0910   D5EB             
0911   D5EB 8D FB       random_x03		bsr	jmp_getrandom
0912   D5ED 84 03       			anda	#$03
0913   D5EF 39          			rts	
0914   D5F0             
0915   D5F0 8D F6       random_x07		bsr	jmp_getrandom
0916   D5F2 84 07       			anda	#$07
0917   D5F4 39          			rts	
0918   D5F5             
0919   D5F5 8D F1       random_x0f		bsr	jmp_getrandom
0920   D5F7 84 0F       			anda	#$0F
0921   D5F9 39          			rts	
0922   D5FA             
0923   D5FA             gb_1E			JSRDR_(get_rnd_lampnum)	
0923   D5FA~            gb_1E			JSRDR_(get_rnd_lampnum)	
0923   D5FA~            gb_1E			JSRDR_(get_rnd_lampnum)	
0923   D5FA             
0923   D5FA~            gb_1E			JSRDR_(get_rnd_lampnum)	
0923   D5FA~            gb_1E			JSRDR_(get_rnd_lampnum)	
0923   D5FA             
0923   D5FA             
0923   D5FA A0          
0923   D5FB C3          
0924   D5FC 5A F4 E0 C4 			.db $5A,$F4,$E0,$C4		;BEQ_LampOn/Flash#E0 to gb_20
0925   D600             			BITFLP_($00)			;Flash Lamp/Bit @RAM:00
0925   D600             
0925   D600 17 00       
0926   D602 CA 04       gj_0E			SETRAM_($0A,$04)			;RAM$0A=$04
0927   D604             			CPUX_					;Resume CPU Execution
0927   D604 04          
0928   D605 CE E5 AC    			ldx	#msg_hit
0929   D608 BD D2 6D    			jsr	ani_msg_rlslide
0930   D60B F6 11 9B    			ldab	current_credits+1
0931   D60E CE E4 94    			ldx	#gj_2D
0932   D611 BD EE 8C    			jsr	xplusb
0933   D614 E6 00       			ldab	$00,X
0934   D616 BD D2 72    			jsr	gj_2E
0935   D619 C6 26       			ldab	#$26
0936   D61B BD D2 72    			jsr	gj_2E
0937   D61E CE 13 A7    			ldx	#hy_unknown_8
0938   D621 8D C8       			bsr	random_x03
0939   D623             			ifne
0939   D623             
0939   D623 27 FE       
0940   D625 4A          				deca
0941   D626             			endif	
0941   D626             
0941   D626             
0941   D626             
0941   D626             
0941   D626             
0941   D626~            			endif	
0941   D626~            			endif	
0941   D626             
0941   D626~            			endif	
0941   D626~            			endif	
0941   D626             
0941   D624             
0941   D624 01          
0941   D625             
0941   D625             
0941   D625~            			endif	
0941   D625~            			endif	
0941   D625~            			endif	
0941   D625             
0941   D626             
0941   D626~            			endif	
0941   D626~            			endif	
0941   D626             
0942   D626 B7 13 9F    			staa	hy_unknown_6
0943   D629             			ifeq
0943   D629             
0943   D629 26 FE       
0944   D62B 96 04       				ldaa	game_ram_4
0945   D62D BD DF D2    				jsr	show_thousands
0946   D630             			else
0946   D630             
0946   D630             
0946   D630             
0946   D630             
0946   D62A             
0946   D62A             
0946   D62A             
0946   D62A~            			else
0946   D62A~            			else
0946   D62A~            			else
0946   D62A~            			else
0946   D62A             
0946   D62A~            			else
0946   D62A~            			else
0946   D62A~            			else
0946   D62A~            			else
0946   D62A             
0946   D62A             
0946   D62A 07          
0946   D630             
0946   D630 20 FE       
0946   D632             
0946   D632             
0946   D632             
0946   D632~            			else
0946   D632~            			else
0946   D632~            			else
0946   D632~            			else
0946   D632~            			else
0946   D632             
0946   D632~            			else
0946   D632~            			else
0946   D632             
0946   D632~            			else
0946   D632~            			else
0946   D632             
0947   D632 6F 01       				clr	$01,X
0948   D634 C6 1C       				ldab	#$1C
0949   D636 E7 02       				stab	$02,X
0950   D638 C6 26       				ldab	#$26
0951   D63A E7 03       				stab	$03,X
0952   D63C 81 02       				cmpa	#$02
0953   D63E             				ifne
0953   D63E             
0953   D63E 27 FE       
0954   D640 86 5A       					ldaa	#$5A
0955   D642 C6 42       					ldab	#$42
0956   D644             				else
0956   D644             
0956   D644             
0956   D644             
0956   D644             
0956   D63F             
0956   D63F             
0956   D63F             
0956   D63F~            				else
0956   D63F~            				else
0956   D63F~            				else
0956   D63F~            				else
0956   D63F             
0956   D63F~            				else
0956   D63F~            				else
0956   D63F~            				else
0956   D63F~            				else
0956   D63F             
0956   D63F             
0956   D63F 06          
0956   D644             
0956   D644 20 FE       
0956   D646             
0956   D646             
0956   D646             
0956   D646~            				else
0956   D646~            				else
0956   D646~            				else
0956   D646~            				else
0956   D646~            				else
0956   D646             
0956   D646~            				else
0956   D646~            				else
0956   D646             
0956   D646~            				else
0956   D646~            				else
0956   D646             
0957   D646 86 45       					ldaa	#$45
0958   D648 C6 55       					ldab	#$55
0959   D64A             				endif
0959   D64A             
0959   D64A             
0959   D64A             
0959   D64A             
0959   D64A             
0959   D64A~            				endif
0959   D64A~            				endif
0959   D64A             
0959   D64A~            				endif
0959   D64A~            				endif
0959   D64A             
0959   D645             
0959   D645 04          
0959   D646             
0959   D646             
0959   D646~            				endif
0959   D646~            				endif
0959   D646~            				endif
0959   D646             
0959   D64A             
0959   D64A~            				endif
0959   D64A~            				endif
0959   D64A             
0960   D64A A7 04       				staa	$04,X
0961   D64C E7 05       				stab	$05,X
0962   D64E             			endif
0962   D64E             
0962   D64E             
0962   D64E             
0962   D64E             
0962   D64E             
0962   D64E~            			endif
0962   D64E~            			endif
0962   D64E             
0962   D64E~            			endif
0962   D64E~            			endif
0962   D64E             
0962   D631             
0962   D631 1C          
0962   D632             
0962   D632             
0962   D632~            			endif
0962   D632~            			endif
0962   D632~            			endif
0962   D632             
0962   D64E             
0962   D64E~            			endif
0962   D64E~            			endif
0962   D64E             
0963   D64E 86 05       			ldaa	#$05
0964   D650 A7 00       			staa	$00,X
0965   D652 BD D2 6D    			jsr	ani_msg_rlslide
0966   D655 97 0A       			staa	game_ram_a
0967   D657 DE CF       			ldx	current_thread
0968   D659 86 A4       			ldaa	#$A4
0969   D65B A7 0D       			staa	$0D,X
0970   D65D 86 02       			ldaa	#$02
0971   D65F             			begin
0971   D65F             
0972   D65F             				SLEEP($C0)
0972   D65F BD E9 7C    
0972   D662 C0          
0973   D663 4A          				deca	
0974   D664             			eqend
0974   D664             
0974   D664             
0974   D664~            			eqend
0974   D664~            			eqend
0974   D664             
0974   D664 26 F9       
0974   D666             
0974   D666~            			eqend
0974   D666~            			eqend
0974   D666             
0975   D666 B6 11 9B    sumthin		ldaa	current_credits+1
0976   D669 3F          			swi	
0977   D66A             			PRI_($A1)				;Priority=#A1
0977   D66A 52 A1       
0978   D66C 5AFDE00B06  			.db $5A,$FD,$E0,$0B,$06		;BEQ_RAM$00>=#11 to gb_21
0979   D671             			JSRDR_(get_rnd_lampnum)	
0979   D671~            			JSRDR_(get_rnd_lampnum)	
0979   D671~            			JSRDR_(get_rnd_lampnum)	
0979   D671             
0979   D671~            			JSRDR_(get_rnd_lampnum)	
0979   D671~            			JSRDR_(get_rnd_lampnum)	
0979   D671             
0979   D671             
0979   D671 A0          
0979   D672 4C          
0980   D673             			BITOFFP_($00)			;Turn OFF Lamp/Bit @RAM:00
0980   D673             
0980   D673 15 00       
0981   D675             			JMPR_(gj_0F)
0981   D675~            			JMPR_(gj_0F)
0981   D675~            			JMPR_(gj_0F)
0981   D675             
0981   D675~            			JMPR_(gj_0F)
0981   D675~            			JMPR_(gj_0F)
0981   D675             
0981   D675             
0981   D675 80          
0981   D676 0B          
0982   D677             			
0983   D677 5AFCE00D04  gb_21			.db $5A,$FC,$E0,$0D,$04		;BEQ_RAM$00==#13 to gb_6F
0984   D67C             			RCLR0_($10)				;Effect: Range #10
0984   D67C             
0984   D67C 19 10       
0985   D67E             			JMPR_(gj_0F)
0985   D67E~            			JMPR_(gj_0F)
0985   D67E~            			JMPR_(gj_0F)
0985   D67E             
0985   D67E~            			JMPR_(gj_0F)
0985   D67E~            			JMPR_(gj_0F)
0985   D67E             
0985   D67E             
0985   D67E 80          
0985   D67F 02          
0986   D680             			
0987   D680             gb_6F			RCLR0_($11)				;Effect: Range #11
0987   D680             
0987   D680 19 11       
0988   D682 CA 04       gj_0F			SETRAM_($0A,$04)			;RAM$0A=$04
0989   D684             			CPUX_					;Resume CPU Execution
0989   D684 04          
0990   D685 86 0C       			ldaa	#$0C
0991   D687 5F          			clrb	
0992   D688 BD D2 CF    			jsr	gj_3D
0993   D68B 97 0A       			staa	game_ram_a
0994   D68D 7E D5 AA    			jmp	start_rndawd
0995   D690             
0996   D690 3F          gj_10			swi	
0997   D691             gb_22			SLEEP_(4)
0997   D691             
0997   D691 74          
0997   D692~            gb_22			SLEEP_(4)
0997   D692~            gb_22			SLEEP_(4)
0997   D692             
0998   D692 5AFEF2FF68F9			.db $5A,$FE,$F2,$FF,$68,$F9	;BEQ_(BIT#28 P #FF) to gb_22
0999   D698             			PRI_($68)				;Priority=#68
0999   D698 52 68       
1000   D69A EE          			SND_($0E)				;Sound #0E
1001   D69B             			SOL_(ENERGY_FL_ON,P1_FL_ON,P2_FL_ON)			
1001   D69B 33 F1 F2 F7 
1002   D69F             			SLEEP_(4)
1002   D69F             
1002   D69F 74          
1002   D6A0~            			SLEEP_(4)
1002   D6A0~            			SLEEP_(4)
1002   D6A0             
1003   D6A0             			SOL_(ENERGY_FL_OFF,P1_FL_OFF,P2_FL_OFF)			
1003   D6A0 33 01 02 07 
1004   D6A4             			KILL_					;Remove This Thread
1004   D6A4 03          
1005   D6A5             
1006   D6A5 36          gj_35			psha	
1007   D6A6 CE D6 90    			ldx	#gj_10
1008   D6A9 BD D5 0D    			jsr	addthread_clra
1009   D6AC 96 06       			ldaa	game_ram_6
1010   D6AE 8B 99       			adda	#$99
1011   D6B0 19          			daa	
1012   D6B1 97 06       			staa	game_ram_6
1013   D6B3 81 01       			cmpa	#$01
1014   D6B5             			ifeq
1014   D6B5             
1014   D6B5 26 FE       
1015   D6B7 CE D5 64    				ldx	#gj_11
1016   D6BA BD D5 0D    				jsr	addthread_clra
1017   D6BD             			endif
1017   D6BD             
1017   D6BD             
1017   D6BD             
1017   D6BD             
1017   D6BD             
1017   D6BD~            			endif
1017   D6BD~            			endif
1017   D6BD             
1017   D6BD~            			endif
1017   D6BD~            			endif
1017   D6BD             
1017   D6B6             
1017   D6B6 06          
1017   D6B7             
1017   D6B7             
1017   D6B7~            			endif
1017   D6B7~            			endif
1017   D6B7~            			endif
1017   D6B7             
1017   D6BD             
1017   D6BD~            			endif
1017   D6BD~            			endif
1017   D6BD             
1018   D6BD 32          			pula	
1019   D6BE 39          			rts	
1020   D6BF             
1021   D6BF CE E4 71    get_rnd_lampnum	ldx	#gj_12
1022   D6C2 BD EE 3E    			jsr	xplusa
1023   D6C5 A6 00       			ldaa	$00,X
1024   D6C7 39          			rts	
1025   D6C8             
1026   D6C8 36          check_neighbors	psha	
1027   D6C9 37          			pshb	
1028   D6CA 4A          			deca	
1029   D6CB BD F3 6F    			jsr	bit_lamp_buf_f
1030   D6CE             			ifne
1030   D6CE             
1030   D6CE 27 FE       
1031   D6D0 86 01       				ldaa	#$01
1032   D6D2             			else
1032   D6D2             
1032   D6D2             
1032   D6D2             
1032   D6D2             
1032   D6CF             
1032   D6CF             
1032   D6CF             
1032   D6CF~            			else
1032   D6CF~            			else
1032   D6CF~            			else
1032   D6CF~            			else
1032   D6CF             
1032   D6CF~            			else
1032   D6CF~            			else
1032   D6CF~            			else
1032   D6CF~            			else
1032   D6CF             
1032   D6CF             
1032   D6CF 04          
1032   D6D2             
1032   D6D2 20 FE       
1032   D6D4             
1032   D6D4             
1032   D6D4             
1032   D6D4~            			else
1032   D6D4~            			else
1032   D6D4~            			else
1032   D6D4~            			else
1032   D6D4~            			else
1032   D6D4             
1032   D6D4~            			else
1032   D6D4~            			else
1032   D6D4             
1032   D6D4~            			else
1032   D6D4~            			else
1032   D6D4             
1033   D6D4 4C          				inca	
1034   D6D5 4C          				inca	
1035   D6D6 BD F3 6F    				jsr	bit_lamp_buf_f
1036   D6D9 27 05       				beq	sw_rts
1037   D6DB 86 02       				ldaa	#$02
1038   D6DD             			endif
1038   D6DD             
1038   D6DD             
1038   D6DD             
1038   D6DD             
1038   D6DD             
1038   D6DD~            			endif
1038   D6DD~            			endif
1038   D6DD             
1038   D6DD~            			endif
1038   D6DD~            			endif
1038   D6DD             
1038   D6D3             
1038   D6D3 09          
1038   D6D4             
1038   D6D4             
1038   D6D4~            			endif
1038   D6D4~            			endif
1038   D6D4~            			endif
1038   D6D4             
1038   D6DD             
1038   D6DD~            			endif
1038   D6DD~            			endif
1038   D6DD             
1039   D6DD B7 13 9D    			staa	hy_unknown_4
1040   D6E0 33          sw_rts		pulb	
1041   D6E1 32          			pula	
1042   D6E2 39          			rts	
1043   D6E3             
1044   D6E3 36          sw_checks		psha	
1045   D6E4 37          			pshb	
1046   D6E5 16          			tab	
1047   D6E6 8B 41       			adda	#$41
1048   D6E8 8D DE       			bsr	check_neighbors
1049   D6EA BD F2 04    			jsr	lamp_off_f
1050   D6ED C0 08       			subb	#$08
1051   D6EF CE E4 B4    			ldx	#sw_to_lamp_map		;get the lamp number associated with this switch
1052   D6F2 BD D3 F9    			jsr	xplusb_ldb			;put it into B
1053   D6F5 F7 13 9C    			stab	last_sw_lamp
1054   D6F8 FE 11 96    			ldx	cur_spell_ltr		;Is the user 'spelling'?
1055   D6FB 27 E3       			beq	sw_rts			;no, return
1056   D6FD E1 00       			cmpb	$00,X				;Is this the correct letter for 'spell'?
1057   D6FF 26 DF       			bne	sw_rts			;no, return
1058   D701 08          			inx	
1059   D702 FF 11 96    			stx	cur_spell_ltr		;move to next letter
1060   D705 74 11 98    			lsr	cur_spell_pos
1061   D708 20 D6       			bra	sw_rts
1062   D70A             
1063   D70A             gj_06			BITON4_($30)			;Turn ON: Lamp#30(lamp_p1)
1063   D70A D8 30       
1064   D70C             			RCLR0_($CF,$4D)			;Effect: Range #CF Range #4D
1064   D70C             
1064   D70C 19 CF 4D    
1065   D70F             			RCLR1_($C0,$00)			;Effect: Range #C0 Range #00
1065   D70F             
1065   D70F 29 C0 00    
1066   D712 CA 00       			SETRAM_($0A,$00)			;RAM$0A=$00
1067   D714             			JSRD_(clr_dis_masks)		
1067   D714 57          
1067   D715 F9 22       
1068   D717             			JSRDR_(gj_0D)		
1068   D717~            			JSRDR_(gj_0D)		
1068   D717~            			JSRDR_(gj_0D)		
1068   D717             
1068   D717~            			JSRDR_(gj_0D)		
1068   D717~            			JSRDR_(gj_0D)		
1068   D717             
1068   D717             
1068   D717 AC          
1068   D718 2D          
1069   D719             			EXE_($0A)				;CPU Execute Next 10 Bytes
1069   D719~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1069   D719~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1069   D719             
1069   D719 4C          
1069   D71A             
1070   D71A 7C 00 E6    			inc	flag_tilt			;turn OFF the shooters 
1071   D71D D6 EB       			ldab	player_up
1072   D71F BD FA 63    			jsr	saveplayertobuffer
1073   D722 D6 EB       			ldab	player_up
1074   D724             			JSRD_(resetplayerdata)		
1074   D724 57          
1074   D725 F9 EA       
1075   D727             			MRTS_					;Macro RTS, Save MRA,MRB
1075   D727 02          
1076   D728             
1077   D728             sw_H
1078   D728             sw_I
1079   D728             sw_J
1080   D728             sw_K
1081   D728             sw_L
1082   D728             sw_M
1083   D728             sw_N
1084   D728             sw_O
1085   D728             sw_P			JSRDR_(sw_checks)		
1085   D728~            sw_P			JSRDR_(sw_checks)		
1085   D728~            sw_P			JSRDR_(sw_checks)		
1085   D728             
1085   D728~            sw_P			JSRDR_(sw_checks)		
1085   D728~            sw_P			JSRDR_(sw_checks)		
1085   D728             
1085   D728             
1085   D728 AF          
1085   D729 B9          
1086   D72A             			EXE_
1086   D72A             
1086   D72A 44          
1087   D72B 80 12       				suba	#$12
1088   D72D             			EXEEND_
1088   D72D             
1088   D72D             
1088   D72D             
1088   D72D             
1088   D72D~            			EXEEND_
1088   D72D~            			EXEEND_
1088   D72D             
1088   D72A             
1088   D72A 44          
1088   D72B             
1088   D72D             
1088   D72D~            			EXEEND_
1088   D72D~            			EXEEND_
1088   D72D             
1089   D72D 5B D0 E0 42 			.db $5B,$D0,$E0,$42		;BNE_BIT2#E0 to s_kill
1090   D731             			BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
1090   D731 DD 00       
1091   D733             			EXE_
1091   D733             
1091   D733 44          
1092   D734 C6 21       				ldab	#$21
1093   D736 D7 C8       				stab	thread_priority
1094   D738 CE DD 76    				ldx	#gj_27
1095   D73B BD E9 D8    				jsr	newthread_sp
1096   D73E             			EXEEND_
1096   D73E             
1096   D73E             
1096   D73E             
1096   D73E             
1096   D73E~            			EXEEND_
1096   D73E~            			EXEEND_
1096   D73E             
1096   D733             
1096   D733 4C          
1096   D734             
1096   D73E             
1096   D73E~            			EXEEND_
1096   D73E~            			EXEEND_
1096   D73E             
1097   D73E             			POINTS_(1,1000)			;1000 Points
1097   D73E 42          
1097   D73F             
1097   D73F~            			POINTS_(1,1000)			;1000 Points
1097   D73F~            			POINTS_(1,1000)			;1000 Points
1097   D73F             
1097   D73F~            			POINTS_(1,1000)			;1000 Points
1097   D73F~            			POINTS_(1,1000)			;1000 Points
1097   D73F             
1097   D73F~            			POINTS_(1,1000)			;1000 Points
1097   D73F~            			POINTS_(1,1000)			;1000 Points
1097   D73F             
1097   D73F             
1097   D73F 0B          
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740~            			POINTS_(1,1000)			;1000 Points
1097   D740             
1097   D740             
1097   D740             
1097   D740             
1098   D740 E8          			SND_($08)				;Sound #08
1099   D741             			;Fall through to sw_common
1100   D741             			
1101   D741 B3 FF       sw_common		ADDRAM_($03,$FF)			;RAM$03+=$FF
1102   D743 5AFBFBF3FCE3chk_wave_compl	.db $5A,$FB,$FB,$F3,$FC,$E3,$00,$D0,$2E,$D0,$2F,$24;BEQ_(BIT2#2F || (BIT2#2E || (!RAM$03==#0))) to s_kill
1102   D749 00D02ED02F24
1103   D74F             			REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
1103   D74F 55 08 00    
1104   D752 E5          			SND_($05)				;Sound #05
1105   D753             			JSRDR_(save_spell)		
1105   D753~            			JSRDR_(save_spell)		
1105   D753~            			JSRDR_(save_spell)		
1105   D753             
1105   D753~            			JSRDR_(save_spell)		
1105   D753~            			JSRDR_(save_spell)		
1105   D753             
1105   D753             
1105   D753 A2          
1105   D754 32          
1106   D755             			JSRR_(gj_06)			
1106   D755~            			JSRR_(gj_06)			
1106   D755~            			JSRR_(gj_06)			
1106   D755             
1106   D755~            			JSRR_(gj_06)			
1106   D755~            			JSRR_(gj_06)			
1106   D755             
1106   D755             
1106   D755 9F          
1106   D756 B3          
1107   D757             			JSRD_(waveend_ux)			
1107   D757 57          
1107   D758 DF 64       
1108   D75A             			JSRDR_(show_wave_compl)	
1108   D75A~            			JSRDR_(show_wave_compl)	
1108   D75A~            			JSRDR_(show_wave_compl)	
1108   D75A             
1108   D75A~            			JSRDR_(show_wave_compl)	
1108   D75A~            			JSRDR_(show_wave_compl)	
1108   D75A             
1108   D75A             
1108   D75A A0          
1108   D75B 18          
1109   D75C             			JSRDR_(show_eunit_bonus)
1109   D75C~            			JSRDR_(show_eunit_bonus)
1109   D75C~            			JSRDR_(show_eunit_bonus)
1109   D75C             
1109   D75C~            			JSRDR_(show_eunit_bonus)
1109   D75C~            			JSRDR_(show_eunit_bonus)
1109   D75C             
1109   D75C             
1109   D75C A4          
1109   D75D 2A          
1110   D75E             			;fall through to wave setup procedures
1111   D75E             			
1112   D75E             setup_next_wave	REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
1112   D75E 55 08 00    
1113   D761             			EXE_				
1113   D761             
1113   D761 44          
1114   D762 D6 EB       				ldab	player_up
1115   D764 BD F9 EA    				jsr	resetplayerdata
1116   D767             			EXEEND_
1116   D767             
1116   D767             
1116   D767             
1116   D767             
1116   D767~            			EXEEND_
1116   D767~            			EXEEND_
1116   D767             
1116   D761             
1116   D761 47          
1116   D762             
1116   D767             
1116   D767~            			EXEEND_
1116   D767~            			EXEEND_
1116   D767             
1117   D767             			EXE_
1117   D767             
1117   D767 44          
1118   D768 97 F4       				staa	flag_timer_bip
1119   D76A CE F9 75    				ldx	#player_ready
1120   D76D BD D5 0E    				jsr	newthreadp
1121   D770             			EXEEND_
1121   D770             
1121   D770             
1121   D770             
1121   D770             
1121   D770~            			EXEEND_
1121   D770~            			EXEEND_
1121   D770             
1121   D767             
1121   D767 4A          
1121   D768             
1121   D770             
1121   D770~            			EXEEND_
1121   D770~            			EXEEND_
1121   D770             
1122   D770             			JSRD_(plyer_load)			
1122   D770 57          
1122   D771 D3 CB       
1123   D773             s_kill		KILL_					;Remove This Thread
1123   D773 03          
1124   D774             
1125   D774 CE E5 74    show_wave_compl	ldx	#msg_wave
1126   D777 BD D3 0B    			jsr	copy_msg_full
1127   D77A BD E6 D2    			jsr	disp_wave_num
1128   D77D 8D 06       			bsr	sleep45
1129   D77F CE E5 79    			ldx	#msg_completed
1130   D782 BD D3 0B    			jsr	copy_msg_full
1131   D785             sleep45		SLEEP($45)
1131   D785 BD E9 7C    
1131   D788 45          
1132   D789 39          			rts	
1133   D78A             
1134   D78A             sw_T			JSRDR_(sw_checks)		
1134   D78A~            sw_T			JSRDR_(sw_checks)		
1134   D78A~            sw_T			JSRDR_(sw_checks)		
1134   D78A             
1134   D78A~            sw_T			JSRDR_(sw_checks)		
1134   D78A~            sw_T			JSRDR_(sw_checks)		
1134   D78A             
1134   D78A             
1134   D78A AF          
1134   D78B 57          
1135   D78C 5B F4 43 2E 			.db $5B,$F4,$43,$2E		;BNE_LampOn/Flash#43 to gb_08
1136   D790             			RCLR0_($11)				;Effect: Range #11
1136   D790             
1136   D790 19 11       
1137   D792             			JMPR_(gj_04)
1137   D792~            			JMPR_(gj_04)
1137   D792~            			JMPR_(gj_04)
1137   D792             
1137   D792~            			JMPR_(gj_04)
1137   D792~            			JMPR_(gj_04)
1137   D792             
1137   D792             
1137   D792 80          
1137   D793 19          
1138   D794             			
1139   D794             sw_E			JSRDR_(sw_checks)		
1139   D794~            sw_E			JSRDR_(sw_checks)		
1139   D794~            sw_E			JSRDR_(sw_checks)		
1139   D794             
1139   D794~            sw_E			JSRDR_(sw_checks)		
1139   D794~            sw_E			JSRDR_(sw_checks)		
1139   D794             
1139   D794             
1139   D794 AF          
1139   D795 4D          
1140   D796 5B F4 3A 24 			.db $5B,$F4,$3A,$24		;BNE_LampOn/Flash#3A to gb_08
1141   D79A             			RCLR0_($10)				;Effect: Range #10
1141   D79A             
1141   D79A 19 10       
1142   D79C             			JMPR_(gj_04)
1142   D79C~            			JMPR_(gj_04)
1142   D79C~            			JMPR_(gj_04)
1142   D79C             
1142   D79C~            			JMPR_(gj_04)
1142   D79C~            			JMPR_(gj_04)
1142   D79C             
1142   D79C             
1142   D79C 80          
1142   D79D 0F          
1143   D79E             			
1144   D79E C6 3D       sw_F			ldab	#$3D
1145   D7A0 20 02       			bra	ssw_handler
1146   D7A2             
1147   D7A2 C6 3E       sw_G			ldab	#$3E
1148   D7A4 3F          ssw_handler		swi	
1149   D7A5             			JSRDR_(sw_checks)		
1149   D7A5~            			JSRDR_(sw_checks)		
1149   D7A5~            			JSRDR_(sw_checks)		
1149   D7A5             
1149   D7A5~            			JSRDR_(sw_checks)		
1149   D7A5~            			JSRDR_(sw_checks)		
1149   D7A5             
1149   D7A5             
1149   D7A5 AF          
1149   D7A6 3C          
1150   D7A7 5B F4 E1 13 			.db $5B,$F4,$E1,$13		;BNE_LampOn/Flash#E1 to gb_08
1151   D7AB             			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1151   D7AB             
1151   D7AB 15 01       
1152   D7AD             gj_04			JSRR_(gj_13)			
1152   D7AD~            gj_04			JSRR_(gj_13)			
1152   D7AD~            gj_04			JSRR_(gj_13)			
1152   D7AD             
1152   D7AD~            gj_04			JSRR_(gj_13)			
1152   D7AD~            gj_04			JSRR_(gj_13)			
1152   D7AD             
1152   D7AD             
1152   D7AD 96          
1152   D7AE 87          
1153   D7AF 5AFEF2F4A427			.db $5A,$FE,$F2,$F4,$A4,$27	;BEQ_(BIT#64 P #F4) to gb_24
1154   D7B5 5A D0 2E 05 gb_AE			.db $5A,$D0,$2E,$05		;BEQ_BIT2#2E to gb_08
1155   D7B9 E0          			SND_($00)				;Sound #00
1156   D7BA             			POINTS_(5,1000)			;5000 Points
1156   D7BA 42          
1156   D7BB             
1156   D7BB~            			POINTS_(5,1000)			;5000 Points
1156   D7BB~            			POINTS_(5,1000)			;5000 Points
1156   D7BB             
1156   D7BB~            			POINTS_(5,1000)			;5000 Points
1156   D7BB~            			POINTS_(5,1000)			;5000 Points
1156   D7BB             
1156   D7BB~            			POINTS_(5,1000)			;5000 Points
1156   D7BB~            			POINTS_(5,1000)			;5000 Points
1156   D7BB             
1156   D7BB             
1156   D7BB 2B          
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC~            			POINTS_(5,1000)			;5000 Points
1156   D7BC             
1156   D7BC             
1156   D7BC             
1156   D7BC             
1157   D7BC             			JMPR_(sw_common)
1157   D7BC~            			JMPR_(sw_common)
1157   D7BC~            			JMPR_(sw_common)
1157   D7BC             
1157   D7BC~            			JMPR_(sw_common)
1157   D7BC~            			JMPR_(sw_common)
1157   D7BC             
1157   D7BC             
1157   D7BC 8F          
1157   D7BD 83          
1158   D7BE             		
1159   D7BE             gb_08			KILL_					;Remove This Thread
1159   D7BE 03          
1160   D7BF             
1161   D7BF C6 46       sw_S			ldab	#$46
1162   D7C1 20 E1       			bra	ssw_handler
1163   D7C3             
1164   D7C3 C6 47       sw_R			ldab	#$47
1165   D7C5 20 DD       			bra	ssw_handler
1166   D7C7             
1167   D7C7             sw_A
1168   D7C7             sw_B
1169   D7C7             sw_C
1170   D7C7             sw_D
1171   D7C7             sw_U
1172   D7C7             sw_V
1173   D7C7             sw_W
1174   D7C7 16          sw_Y			tab	
1175   D7C8 C0 08       			subb	#$08
1176   D7CA CE E4 73    			ldx	#gj_02
1177   D7CD BD D3 F9    			jsr	xplusb_ldb
1178   D7D0 20 D2       			bra	ssw_handler
1179   D7D2             
1180   D7D2 3F          gj_48			swi	
1181   D7D3 5AFEF2F6A418gj_14			.db $5A,$FE,$F2,$F6,$A4,$18	;BEQ_(BIT#64 P #F6) to gb_25
1182   D7D9             			SLEEP_(2)
1182   D7D9             
1182   D7D9 72          
1182   D7DA~            			SLEEP_(2)
1182   D7DA~            			SLEEP_(2)
1182   D7DA             
1183   D7DA             			JMPR_(gj_14)
1183   D7DA~            			JMPR_(gj_14)
1183   D7DA~            			JMPR_(gj_14)
1183   D7DA             
1183   D7DA~            			JMPR_(gj_14)
1183   D7DA~            			JMPR_(gj_14)
1183   D7DA             
1183   D7DA             
1183   D7DA 8F          
1183   D7DB F7          
1184   D7DC             			
1185   D7DC             gb_24			EXE_($03)				;CPU Execute Next 3 Bytes
1185   D7DC~            gb_24			EXE_($03)				;CPU Execute Next 3 Bytes
1185   D7DC~            gb_24			EXE_($03)				;CPU Execute Next 3 Bytes
1185   D7DC             
1185   D7DC 45          
1185   D7DD             
1186   D7DD B6 13 9C    			ldaa	last_sw_lamp
1187   D7E0 5AFEF2F6A403gj_30			.db $5A,$FE,$F2,$F6,$A4,$03	;BEQ_(BIT#64 P #F6) to gb_71
1188   D7E6             			SLEEP_(6)
1188   D7E6             
1188   D7E6 76          
1188   D7E7~            			SLEEP_(6)
1188   D7E7~            			SLEEP_(6)
1188   D7E7             
1189   D7E7             			JMPR_(gj_30)
1189   D7E7~            			JMPR_(gj_30)
1189   D7E7~            			JMPR_(gj_30)
1189   D7E7             
1189   D7E7~            			JMPR_(gj_30)
1189   D7E7~            			JMPR_(gj_30)
1189   D7E7             
1189   D7E7             
1189   D7E7 8F          
1189   D7E8 F7          
1190   D7E9             			
1191   D7E9             gb_71			EXE_($02)				;CPU Execute Next 2 Bytes
1191   D7E9~            gb_71			EXE_($02)				;CPU Execute Next 2 Bytes
1191   D7E9~            gb_71			EXE_($02)				;CPU Execute Next 2 Bytes
1191   D7E9             
1191   D7E9 44          
1191   D7EA             
1192   D7EA D6 64       			ldab	$64
1193   D7EC 5BFCE0E1C4  			.db $5B,$FC,$E0,$E1,$C4		;BNE_RAM$00==#225 to gb_AE
1194   D7F1             gb_25			REMTHREADS_($F1,$A0)		;Remove Multiple Threads Based on Priority
1194   D7F1 55 F1 A0    
1195   D7F4             			PRI_($A1)				;Priority=#A1
1195   D7F4 52 A1       
1196   D7F6             			JSRDR_(random_x03)	
1196   D7F6~            			JSRDR_(random_x03)	
1196   D7F6~            			JSRDR_(random_x03)	
1196   D7F6             
1196   D7F6~            			JSRDR_(random_x03)	
1196   D7F6~            			JSRDR_(random_x03)	
1196   D7F6             
1196   D7F6             
1196   D7F6 AD          
1196   D7F7 F3          
1197   D7F8             			CPUX_					;Resume CPU Execution
1197   D7F8 04          
1198   D7F9 9B 04       			adda	game_ram_4
1199   D7FB 19          			daa	
1200   D7FC 97 04       			staa	game_ram_4
1201   D7FE C6 01       			ldab	#$01
1202   D800 B6 13 9F    			ldaa	hy_unknown_6
1203   D803             			ifne
1203   D803             
1203   D803 27 FE       
1204   D805 46          				rora	
1205   D806             				ifcs
1205   D806             
1205   D806 24 FE       
1206   D808 BD D9 CB    					jsr	add_b_cur_ecs
1207   D80B 20 0A       					bra	gb_B1
1208   D80D             				endif
1208   D80D             
1208   D80D             
1208   D80D             
1208   D80D             
1208   D80D             
1208   D80D~            				endif
1208   D80D~            				endif
1208   D80D             
1208   D80D~            				endif
1208   D80D~            				endif
1208   D80D             
1208   D807             
1208   D807 05          
1208   D808             
1208   D808             
1208   D808~            				endif
1208   D808~            				endif
1208   D808~            				endif
1208   D808             
1208   D80D             
1208   D80D~            				endif
1208   D80D~            				endif
1208   D80D             
1209   D80D BD D9 DA    				jsr	add_b_cur_zb
1210   D810             			else
1210   D810             
1210   D810             
1210   D810             
1210   D810             
1210   D804             
1210   D804             
1210   D804             
1210   D804~            			else
1210   D804~            			else
1210   D804~            			else
1210   D804~            			else
1210   D804             
1210   D804~            			else
1210   D804~            			else
1210   D804~            			else
1210   D804~            			else
1210   D804             
1210   D804             
1210   D804 0D          
1210   D810             
1210   D810 20 FE       
1210   D812             
1210   D812             
1210   D812             
1210   D812~            			else
1210   D812~            			else
1210   D812~            			else
1210   D812~            			else
1210   D812~            			else
1210   D812             
1210   D812~            			else
1210   D812~            			else
1210   D812             
1210   D812~            			else
1210   D812~            			else
1210   D812             
1211   D812 CE 00 66    				ldx	#alpha_b0+6
1212   D815 8D 1D       				bsr	gb_D3
1213   D817             			endif
1213   D817             
1213   D817             
1213   D817             
1213   D817             
1213   D817             
1213   D817~            			endif
1213   D817~            			endif
1213   D817             
1213   D817~            			endif
1213   D817~            			endif
1213   D817             
1213   D811             
1213   D811 05          
1213   D812             
1213   D812             
1213   D812~            			endif
1213   D812~            			endif
1213   D812~            			endif
1213   D812             
1213   D817             
1213   D817~            			endif
1213   D817~            			endif
1213   D817             
1214   D817 BD D3 46    gb_B1			jsr	gj_0D
1215   D81A C6 10       			ldab	#$10
1216   D81C 86 01       			ldaa	#$01
1217   D81E BD EC 3B    			jsr	isnd_once
1218   D821             			begin
1218   D821             
1219   D821 96 7B       				ldaa	dmask_p4
1220   D823 43          				coma	
1221   D824 84 3F       				anda	#$3F
1222   D826 97 7B       				staa	dmask_p4
1223   D828             				SLEEP($05)
1223   D828 BD E9 7C    
1223   D82B 05          
1224   D82C 5A          				decb	
1225   D82D             			eqend
1225   D82D             
1225   D82D             
1225   D82D~            			eqend
1225   D82D~            			eqend
1225   D82D             
1225   D82D 26 F2       
1225   D82F             
1225   D82F~            			eqend
1225   D82F~            			eqend
1225   D82F             
1226   D82F D7 7B       			stab	dmask_p4
1227   D831 7E D6 66    			jmp	sumthin
1228   D834             
1229   D834 E6 01       gb_D3			ldab	$01,X
1230   D836 C4 3F       			andb	#$3F
1231   D838 C0 1B       			subb	#$1B
1232   D83A             			ifne
1232   D83A             
1232   D83A 27 FE       
1233   D83C 86 0B       				ldaa	#$0B
1234   D83E             				begin
1234   D83E             
1235   D83E BD EB 3D    					jsr	score_main			;1,000 points
1236   D841 5A          					decb	
1237   D842             				eqend
1237   D842             
1237   D842             
1237   D842~            				eqend
1237   D842~            				eqend
1237   D842             
1237   D842 26 FA       
1237   D844             
1237   D844~            				eqend
1237   D844~            				eqend
1237   D844             
1238   D844             			endif
1238   D844             
1238   D844             
1238   D844             
1238   D844             
1238   D844             
1238   D844~            			endif
1238   D844~            			endif
1238   D844             
1238   D844~            			endif
1238   D844~            			endif
1238   D844             
1238   D83B             
1238   D83B 08          
1238   D83C             
1238   D83C             
1238   D83C~            			endif
1238   D83C~            			endif
1238   D83C~            			endif
1238   D83C             
1238   D844             
1238   D844~            			endif
1238   D844~            			endif
1238   D844             
1239   D844 E6 00       			ldab	$00,X
1240   D846             			ifne
1240   D846             
1240   D846 27 FE       
1241   D848 C0 1B       				subb	#$1B
1242   D84A 86 0C       				ldaa	#$0C
1243   D84C             				begin
1243   D84C             
1244   D84C BD EB 3D    					jsr	score_main			;10,000 points
1245   D84F 5A          					decb	
1246   D850             				eqend
1246   D850             
1246   D850             
1246   D850~            				eqend
1246   D850~            				eqend
1246   D850             
1246   D850 26 FA       
1246   D852             
1246   D852~            				eqend
1246   D852~            				eqend
1246   D852             
1247   D852             			endif
1247   D852             
1247   D852             
1247   D852             
1247   D852             
1247   D852             
1247   D852~            			endif
1247   D852~            			endif
1247   D852             
1247   D852~            			endif
1247   D852~            			endif
1247   D852             
1247   D847             
1247   D847 0A          
1247   D848             
1247   D848             
1247   D848~            			endif
1247   D848~            			endif
1247   D848~            			endif
1247   D848             
1247   D852             
1247   D852~            			endif
1247   D852~            			endif
1247   D852             
1248   D852 39          			rts	
1249   D853             
1250   D853 D6 7A       invert_alphamsk	ldab	dmask_p3
1251   D855 53          			comb	
1252   D856 C4 7F       			andb	#$7F
1253   D858 D7 7A       stab_all_alphmsk	stab	dmask_p3
1254   D85A D7 7B       			stab	dmask_p4
1255   D85C 39          			rts	
1256   D85D             
1257   D85D 36          gb_79			psha	
1258   D85E BD D5 EB    gb_27			jsr	random_x03
1259   D861             			SLEEP(1)
1259   D861 BD E9 7C    
1259   D864 01          
1260   D865             			ifne
1260   D865             
1260   D865 27 FE       
1261   D867 81 03       				cmpa	#$03
1262   D869 27 F3       				beq	gb_27
1263   D86B 81 02       				cmpa	#$02
1264   D86D             				ifeq
1264   D86D             
1264   D86D 26 FE       
1265   D86F 86 0A       					ldaa	#$0A
1266   D871 BD F3 45    					jsr	lfill_a
1267   D874             					ifcc
1267   D874             
1267   D874 25 FE       
1268   D876 86 02       						ldaa	#$02
1269   D878             					else
1269   D878             
1269   D878             
1269   D878             
1269   D878             
1269   D875             
1269   D875             
1269   D875             
1269   D875~            					else
1269   D875~            					else
1269   D875~            					else
1269   D875~            					else
1269   D875             
1269   D875~            					else
1269   D875~            					else
1269   D875~            					else
1269   D875~            					else
1269   D875             
1269   D875             
1269   D875 04          
1269   D878             
1269   D878 20 FE       
1269   D87A             
1269   D87A             
1269   D87A             
1269   D87A~            					else
1269   D87A~            					else
1269   D87A~            					else
1269   D87A~            					else
1269   D87A~            					else
1269   D87A             
1269   D87A~            					else
1269   D87A~            					else
1269   D87A             
1269   D87A~            					else
1269   D87A~            					else
1269   D87A             
1270   D87A 4F          						clra	
1271   D87B             					endif
1271   D87B             
1271   D87B             
1271   D87B             
1271   D87B             
1271   D87B             
1271   D87B~            					endif
1271   D87B~            					endif
1271   D87B             
1271   D87B~            					endif
1271   D87B~            					endif
1271   D87B             
1271   D879             
1271   D879 01          
1271   D87A             
1271   D87A             
1271   D87A~            					endif
1271   D87A~            					endif
1271   D87A~            					endif
1271   D87A             
1271   D87B             
1271   D87B~            					endif
1271   D87B~            					endif
1271   D87B             
1272   D87B             				endif
1272   D87B             
1272   D87B             
1272   D87B             
1272   D87B             
1272   D87B             
1272   D87B~            				endif
1272   D87B~            				endif
1272   D87B             
1272   D87B~            				endif
1272   D87B~            				endif
1272   D87B             
1272   D86E             
1272   D86E 0C          
1272   D86F             
1272   D86F             
1272   D86F~            				endif
1272   D86F~            				endif
1272   D86F~            				endif
1272   D86F             
1272   D87B             
1272   D87B~            				endif
1272   D87B~            				endif
1272   D87B             
1273   D87B             			endif
1273   D87B             
1273   D87B             
1273   D87B             
1273   D87B             
1273   D87B             
1273   D87B~            			endif
1273   D87B~            			endif
1273   D87B             
1273   D87B~            			endif
1273   D87B~            			endif
1273   D87B             
1273   D866             
1273   D866 14          
1273   D867             
1273   D867             
1273   D867~            			endif
1273   D867~            			endif
1273   D867~            			endif
1273   D867             
1273   D87B             
1273   D87B~            			endif
1273   D87B~            			endif
1273   D87B             
1274   D87B B7 13 9E    			staa	spell_award
1275   D87E 32          			pula	
1276   D87F 39          			rts	
1277   D880             
1278   D880 DE CF       gb_29			ldx	current_thread
1279   D882 6F 0D       			clr	$0D,X
1280   D884 39          			rts	
1281   D885             
1282   D885 8D F9       load_spell		bsr	gb_29
1283   D887 CE 00 00    			ldx	#vm_reg_a
1284   D88A FF 11 96    			stx	cur_spell_ltr
1285   D88D 8D 7D       			bsr	gb_2A
1286   D88F A6 00       			ldaa	$00,X
1287   D891 B7 13 9E    			staa	spell_award
1288   D894 EE 01       			ldx	$01,X
1289   D896 FF 11 98    			stx	cur_spell_pos
1290   D899             			ifeq
1290   D899             
1290   D899 26 FE       
1291   D89B 3F          				swi	
1292   D89C             gb_2C				SLEEP_(64)
1292   D89C~            gb_2C				SLEEP_(64)
1292   D89C~            gb_2C				SLEEP_(64)
1292   D89C             
1292   D89C 53 40       
1292   D89E             
1293   D89E 5AFEF2F0A0F8				.db $5A,$FE,$F2,$F0,$A0,$F8	;BEQ_(BIT#60 P #F0) to gb_2C
1294   D8A4             				PRI_($A0)				;Priority=#A0
1294   D8A4 52 A0       
1295   D8A6             				CPUX_					;Resume CPU Execution
1295   D8A6 04          
1296   D8A7 CE E5 83    				ldx	#msg_spell
1297   D8AA BD D3 0B    				jsr	copy_msg_full
1298   D8AD BD D3 4C    				jsr	clr_alpha_set_b1
1299   D8B0 86 10       				ldaa	#$10
1300   D8B2             				begin
1300   D8B2             
1301   D8B2 8D 9F       					bsr	invert_alphamsk
1302   D8B4             					SLEEP($08)
1302   D8B4 BD E9 7C    
1302   D8B7 08          
1303   D8B8 4A          					deca	
1304   D8B9             				eqend
1304   D8B9             
1304   D8B9             
1304   D8B9~            				eqend
1304   D8B9~            				eqend
1304   D8B9             
1304   D8B9 26 F7       
1304   D8BB             
1304   D8BB~            				eqend
1304   D8BB~            				eqend
1304   D8BB             
1305   D8BB BD D5 F0    				jsr	random_x07
1306   D8BE             				ifeq
1306   D8BE             
1306   D8BE 26 FE       
1307   D8C0 4C          					inca	
1308   D8C1             				endif
1308   D8C1             
1308   D8C1             
1308   D8C1             
1308   D8C1             
1308   D8C1             
1308   D8C1~            				endif
1308   D8C1~            				endif
1308   D8C1             
1308   D8C1~            				endif
1308   D8C1~            				endif
1308   D8C1             
1308   D8BF             
1308   D8BF 01          
1308   D8C0             
1308   D8C0             
1308   D8C0~            				endif
1308   D8C0~            				endif
1308   D8C0~            				endif
1308   D8C0             
1308   D8C1             
1308   D8C1~            				endif
1308   D8C1~            				endif
1308   D8C1             
1309   D8C1 8D 9A       				bsr	gb_79
1310   D8C3 4A          				deca	
1311   D8C4 B7 11 99    				staa	cur_spell_word
1312   D8C7 86 20       				ldaa	#$20
1313   D8C9 B7 11 98    				staa	cur_spell_pos
1314   D8CC             			endif
1314   D8CC             
1314   D8CC             
1314   D8CC             
1314   D8CC             
1314   D8CC             
1314   D8CC~            			endif
1314   D8CC~            			endif
1314   D8CC             
1314   D8CC~            			endif
1314   D8CC~            			endif
1314   D8CC             
1314   D89A             
1314   D89A 31          
1314   D89B             
1314   D89B             
1314   D89B~            			endif
1314   D89B~            			endif
1314   D89B~            			endif
1314   D89B             
1314   D8CC             
1314   D8CC~            			endif
1314   D8CC~            			endif
1314   D8CC             
1315   D8CC             			begin
1315   D8CC             
1316   D8CC BD D9 71    				jsr	gj_31
1317   D8CF             			csend
1317   D8CF             
1317   D8CF             
1317   D8CF~            			csend
1317   D8CF~            			csend
1317   D8CF             
1317   D8CF 24 FB       
1317   D8D1             
1317   D8D1~            			csend
1317   D8D1~            			csend
1317   D8D1             
1318   D8D1 BD D3 4C    			jsr	clr_alpha_set_b1
1319   D8D4 8D 51       			bsr	start_spell
1320   D8D6 CE 13 AD    			ldx	#dynamic_disp_buf
1321   D8D9 DF B8       			stx	temp1
1322   D8DB B6 11 98    			ldaa	cur_spell_pos
1323   D8DE 27 71       			beq	award_spell
1324   D8E0             			begin
1324   D8E0             
1325   D8E0 85 20       				bita	#$20
1326   D8E2 26 06       				bne	gb_75
1327   D8E4 48          				asla	
1328   D8E5 27 6A       				beq	award_spell
1329   D8E7 08          				inx	
1330   D8E8             			loopend
1330   D8E8             
1330   D8E8             
1330   D8E8~            			loopend
1330   D8E8~            			loopend
1330   D8E8             
1330   D8E8 20 F6       
1330   D8EA             
1330   D8EA~            			loopend
1330   D8EA~            			loopend
1330   D8EA             
1331   D8EA             
1332   D8EA FF 11 96    gb_75			stx	cur_spell_ltr
1333   D8ED BD D3 54    			jsr	clr_next_12
1334   D8F0 8D 53       			bsr	gb_B7
1335   D8F2 8D 8C       			bsr	gb_29
1336   D8F4 86 7F       gb_D8			ldaa	#$7F
1337   D8F6 97 7A       			staa	dmask_p3
1338   D8F8             			begin
1338   D8F8             
1339   D8F8 84 7F       				anda	#$7F
1340   D8FA 97 7B       				staa	dmask_p4
1341   D8FC 8D 73       				bsr	gj_31
1342   D8FE 24 17       				bcc	gb_B8
1343   D900 8D 7A       				bsr	gb_B9
1344   D902 27 4D       				beq	award_spell
1345   D904 43          				coma	
1346   D905 9A 7B       				oraa	dmask_p4
1347   D907 B8 11 98    				eora	cur_spell_pos
1348   D90A             			loopend
1348   D90A             
1348   D90A             
1348   D90A~            			loopend
1348   D90A~            			loopend
1348   D90A             
1348   D90A 20 EC       
1348   D90C             
1348   D90C~            			loopend
1348   D90C~            			loopend
1348   D90C             
1349   D90C             
1350   D90C CE 13 A0    gb_2A			ldx	#hy_unknown_7
1351   D90F D6 EB       			ldab	player_up
1352   D911             			ifne
1352   D911             
1352   D911 27 FE       
1353   D913 08          				inx	
1354   D914 08          				inx	
1355   D915 08          				inx	
1356   D916             			endif
1356   D916             
1356   D916             
1356   D916             
1356   D916             
1356   D916             
1356   D916~            			endif
1356   D916~            			endif
1356   D916             
1356   D916~            			endif
1356   D916~            			endif
1356   D916             
1356   D912             
1356   D912 03          
1356   D913             
1356   D913             
1356   D913~            			endif
1356   D913~            			endif
1356   D913~            			endif
1356   D913             
1356   D916             
1356   D916~            			endif
1356   D916~            			endif
1356   D916             
1357   D916 39          			rts	
1358   D917             
1359   D917 5F          gb_B8			clrb	
1360   D918 BD D8 58    			jsr	stab_all_alphmsk
1361   D91B             			begin
1361   D91B             
1362   D91B 8D 5F       				bsr	gb_B9
1363   D91D 27 32       				beq	award_spell
1364   D91F 8D 50       				bsr	gj_31
1365   D921             			csend
1365   D921             
1365   D921             
1365   D921~            			csend
1365   D921~            			csend
1365   D921             
1365   D921 24 F8       
1365   D923             
1365   D923~            			csend
1365   D923~            			csend
1365   D923             
1366   D923 8D 02       			bsr	start_spell
1367   D925 20 CD       			bra	gb_D8
1368   D927             
1369   D927             ;**************************************************
1370   D927             ;* Starts SPELL sequence, assigns random word, sets
1371   D927             ;* vars
1372   D927             ;**************************************************
1373   D927 BD D2 D6    start_spell		jsr	setup_msg_endptr
1374   D92A CE 00 6C    			ldx	#alpha_b1
1375   D92D DF B8       			stx	temp1
1376   D92F CE E5 BC    			ldx	#msg_zeros
1377   D932 B6 13 9E    			ldaa	spell_award				;get current spell award: ;00=points, 01=ZB , 10=EU  
1378   D935             			ifne
1378   D935             
1378   D935 27 FE       
1379   D937 CE E5 B6    				ldx	#msg_3zb
1380   D93A 46          				rora	
1381   D93B             				ifcc
1381   D93B             
1381   D93B 25 FE       
1382   D93D CE E5 B0    					ldx	#msg_3eu
1383   D940             				endif
1383   D940             
1383   D940             
1383   D940             
1383   D940             
1383   D940             
1383   D940~            				endif
1383   D940~            				endif
1383   D940             
1383   D940~            				endif
1383   D940~            				endif
1383   D940             
1383   D93C             
1383   D93C 03          
1383   D93D             
1383   D93D             
1383   D93D~            				endif
1383   D93D~            				endif
1383   D93D~            				endif
1383   D93D             
1383   D940             
1383   D940~            				endif
1383   D940~            				endif
1383   D940             
1384   D940             			endif
1384   D940             
1384   D940             
1384   D940             
1384   D940             
1384   D940             
1384   D940~            			endif
1384   D940~            			endif
1384   D940             
1384   D940~            			endif
1384   D940~            			endif
1384   D940             
1384   D936             
1384   D936 09          
1384   D937             
1384   D937             
1384   D937~            			endif
1384   D937~            			endif
1384   D937~            			endif
1384   D937             
1384   D940             
1384   D940~            			endif
1384   D940~            			endif
1384   D940             
1385   D940 8D 0C       			bsr	gb_B3
1386   D942 7C 00 B9    			inc	temp1+1
1387   D945 CE E4 A6    gb_B7			ldx	#random_words
1388   D948 B6 11 99    			ldaa	cur_spell_word
1389   D94B BD F5 28    			jsr	gettabledata_b
1390   D94E 7E D3 0D    gb_B3			jmp	copy_msg_part
1391   D951             
1392   D951 CE 00 00    award_spell		ldx	#0000
1393   D954 FF 11 96    			stx	cur_spell_ltr
1394   D957 FF 11 98    			stx	cur_spell_pos
1395   D95A 8D 2B       			bsr	save_spell
1396   D95C CE 13 AD    			ldx	#dynamic_disp_buf
1397   D95F BD D3 54    			jsr	clr_next_12
1398   D962 C6 03       			ldab	#$03
1399   D964 B6 13 9E    			ldaa	spell_award
1400   D967 27 34       			beq	spell_awd_pts					;Branch if SPELL not active
1401   D969 81 02       			cmpa	#$02
1402   D96B 27 2C       			beq	spell_awd_zb					;Branch for Energy Units award
1403   D96D 8D 5C       			bsr	add_b_cur_ecs
1404   D96F 20 31       			bra	spell_awd_com
1405   D971             
1406   D971             gj_31			SLEEP($05)
1406   D971 BD E9 7C    
1406   D974 05          
1407   D975 86 A0       			ldaa	#$A0
1408   D977 C6 F0       			ldab	#$F0
1409   D979 7E EA 60    			jmp	check_threadid
1410   D97C             
1411   D97C FE 11 96    gb_B9			ldx	cur_spell_ltr
1412   D97F A6 00       			ldaa	$00,X
1413   D981             			ifne
1413   D981             
1413   D981 27 FE       
1414   D983 B6 11 98    				ldaa	cur_spell_pos
1415   D986             			endif
1415   D986             
1415   D986             
1415   D986             
1415   D986             
1415   D986             
1415   D986~            			endif
1415   D986~            			endif
1415   D986             
1415   D986~            			endif
1415   D986~            			endif
1415   D986             
1415   D982             
1415   D982 03          
1415   D983             
1415   D983             
1415   D983~            			endif
1415   D983~            			endif
1415   D983~            			endif
1415   D983             
1415   D986             
1415   D986~            			endif
1415   D986~            			endif
1415   D986             
1416   D986 39          			rts	
1417   D987             
1418   D987 8D 83       save_spell		bsr	gb_2A
1419   D989 B6 13 9E    			ldaa	spell_award				;Store current award
1420   D98C A7 00       			staa	$00,X
1421   D98E B6 11 98    			ldaa	cur_spell_pos
1422   D991 A7 01       			staa	$01,X
1423   D993 B6 11 99    			ldaa	cur_spell_word
1424   D996 A7 02       			staa	$02,X
1425   D998 39          			rts	
1426   D999             
1427   D999 8D 3F       spell_awd_zb	bsr	add_b_cur_zb
1428   D99B 20 05       			bra	spell_awd_com
1429   D99D 86 4C       spell_awd_pts	ldaa	#$4C
1430   D99F BD EB 3D    			jsr	score_main				;90,000 points
1431   D9A2 86 06       spell_awd_com	ldaa	#$06
1432   D9A4 BD EC 3B    			jsr	isnd_once
1433   D9A7 8D C8       			bsr	gj_31
1434   D9A9 24 1A       			bcc	gb_D5
1435   D9AB DE CF       			ldx	current_thread
1436   D9AD 86 A1       			ldaa	#$A1
1437   D9AF A7 0D       			staa	$0D,X
1438   D9B1 86 7F       			ldaa	#$7F
1439   D9B3 97 7B       			staa	dmask_p4
1440   D9B5 86 10       			ldaa	#$10
1441   D9B7 D6 7A       gb_D6			ldab	dmask_p3
1442   D9B9 53          			comb	
1443   D9BA C4 7F       			andb	#$7F
1444   D9BC D7 7A       			stab	dmask_p3
1445   D9BE             			SLEEP($05)
1445   D9BE BD E9 7C    
1445   D9C1 05          
1446   D9C2 4A          			deca	
1447   D9C3 26 F2       			bne	gb_D6
1448   D9C5 BD D3 46    gb_D5			jsr	gj_0D
1449   D9C8 7E D8 85    			jmp	load_spell
1450   D9CB             
1451   D9CB 37          add_b_cur_ecs	pshb	
1452   D9CC BD D3 F3    			jsr	get_current_ecs
1453   D9CF 17          			tba	
1454   D9D0 33          			pulb	
1455   D9D1 1B          			aba	
1456   D9D2 A7 00       			staa	$00,X
1457   D9D4 96 EB       			ldaa	player_up
1458   D9D6 8B 0B       			adda	#$0B
1459   D9D8 20 0E       			bra	gb_4C
1460   D9DA             			
1461   D9DA 96 06       add_b_cur_zb	ldaa	game_ram_6
1462   D9DC 1B          			aba	
1463   D9DD 81 05       			cmpa	#$05
1464   D9DF             			ifgt
1464   D9DF             
1464   D9DF 2F FE       
1465   D9E1 86 05       				ldaa	#$05
1466   D9E3             			endif
1466   D9E3             
1466   D9E3             
1466   D9E3             
1466   D9E3             
1466   D9E3             
1466   D9E3~            			endif
1466   D9E3~            			endif
1466   D9E3             
1466   D9E3~            			endif
1466   D9E3~            			endif
1466   D9E3             
1466   D9E0             
1466   D9E0 02          
1466   D9E1             
1466   D9E1             
1466   D9E1~            			endif
1466   D9E1~            			endif
1466   D9E1~            			endif
1466   D9E1             
1466   D9E3             
1466   D9E3~            			endif
1466   D9E3~            			endif
1466   D9E3             
1467   D9E3 97 06       			staa	game_ram_6
1468   D9E5 86 0A       			ldaa	#$0A
1469   D9E7 58          			aslb	
1470   D9E8             gb_4C			begin
1470   D9E8             
1471   D9E8 8D 04       				bsr	to_lampm_a
1472   D9EA 5A          				decb	
1473   D9EB             			eqend
1473   D9EB             
1473   D9EB             
1473   D9EB~            			eqend
1473   D9EB~            			eqend
1473   D9EB             
1473   D9EB 26 FB       
1473   D9ED             
1473   D9ED~            			eqend
1473   D9ED~            			eqend
1473   D9ED             
1474   D9ED 39          			rts	
1475   D9EE             
1476   D9EE 7E F2 64    to_lampm_a		jmp	lampm_a
1477   D9F1             
1478   D9F1 3F          gj_0C			swi	
1479   D9F2 AB F4       gb_7D			adda	$F4,X
1480   D9F4 44          			lsra	
1481   D9F5 84 02       			anda	#$02
1482   D9F7 5B D0 2F 01 			.db $5B,$D0,$2F,$01		;BNE_BIT2#2F to gb_2D
1483   D9FB             gb_7A			KILL_					;Remove This Thread
1483   D9FB 03          
1484   D9FC             
1485   D9FC             gb_2D			PRI_($50)				;Priority=#50
1485   D9FC 52 50       
1486   D9FE 5AFCE800F8  			.db $5A,$FC,$E8,$00,$F8		;BEQ_RAM$08==#0 to gb_7A
1487   DA03 B8 FF       			ADDRAM_($08,$FF)			;RAM$08+=$FF
1488   DA05 5AFCE0022C  			.db $5A,$FC,$E0,$02,$2C		;BEQ_RAM$00==#2 to gb_7B
1489   DA0A C1 36       			SETRAM_($01,$36)			;RAM$01=$36
1490   DA0C 5A F4 E1 09 gb_80			.db $5A,$F4,$E1,$09		;BEQ_LampOn/Flash#E1 to gb_7C
1491   DA10             gj_32			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1491   DA10             
1491   DA10 14 01       
1492   DA12 69          			SLEEPI_($9)				;Delay RAM$09
1493   DA13 69          			SLEEPI_($9)				;Delay RAM$09
1494   DA14 5B E1 DB    			.db $5B,$E1,$DB			;BNE_RAM$01 to gb_7D
1495   DA17             			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1495   DA17             
1495   DA17 15 01       
1496   DA19 5AFCE13E69  gb_7C			.db $5A,$FC,$E1,$3E,$69		;BEQ_RAM$01==#62 to gb_7E
1497   DA1E 5BFCE13C02  			.db $5B,$FC,$E1,$3C,$02		;BNE_RAM$01==#60 to gb_7F
1498   DA23             			RCLR0_($10)				;Effect: Range #10
1498   DA23             
1498   DA23 19 10       
1499   DA25 B1 01       gb_7F			ADDRAM_($01,$01)			;RAM$01+=$01
1500   DA27 5BFCE13AE0  			.db $5B,$FC,$E1,$3A,$E0		;BNE_RAM$01==#58 to gb_80
1501   DA2C B1 02       			ADDRAM_($01,$02)			;RAM$01+=$02
1502   DA2E 5A F4 E1 F3 			.db $5A,$F4,$E1,$F3		;BEQ_LampOn/Flash#E1 to gb_7F
1503   DA32             			RSET0_($10)				;Effect: Range #10
1503   DA32             
1503   DA32 18 10       
1504   DA34             			JMPR_(gj_32)
1504   DA34~            			JMPR_(gj_32)
1504   DA34~            			JMPR_(gj_32)
1504   DA34             
1504   DA34~            			JMPR_(gj_32)
1504   DA34~            			JMPR_(gj_32)
1504   DA34             
1504   DA34             
1504   DA34 8F          
1504   DA35 DA          
1505   DA36             			
1506   DA36 C1 3F       gb_7B			SETRAM_($01,$3F)			;RAM$01=$3F
1507   DA38 5A F4 E1 09 gb_BE			.db $5A,$F4,$E1,$09		;BEQ_LampOn/Flash#E1 to gb_BB
1508   DA3C             gj_3E			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1508   DA3C             
1508   DA3C 14 01       
1509   DA3E 69          			SLEEPI_($9)				;Delay RAM$09
1510   DA3F 69          			SLEEPI_($9)				;Delay RAM$09
1511   DA40 5B E1 AF    			.db $5B,$E1,$AF			;BNE_RAM$01 to gb_7D
1512   DA43             			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1512   DA43             
1512   DA43 15 01       
1513   DA45 5AFCE14765  gb_BB			.db $5A,$FC,$E1,$47,$65		;BEQ_RAM$01==#71 to gb_BC
1514   DA4A 5BFCE14502  			.db $5B,$FC,$E1,$45,$02		;BNE_RAM$01==#69 to gb_BD
1515   DA4F             			RCLR0_($11)				;Effect: Range #11
1515   DA4F             
1515   DA4F 19 11       
1516   DA51 B1 01       gb_BD			ADDRAM_($01,$01)			;RAM$01+=$01
1517   DA53 5BFCE143E0  			.db $5B,$FC,$E1,$43,$E0		;BNE_RAM$01==#67 to gb_BE
1518   DA58 B1 02       			ADDRAM_($01,$02)			;RAM$01+=$02
1519   DA5A 5A F4 E1 F3 			.db $5A,$F4,$E1,$F3		;BEQ_LampOn/Flash#E1 to gb_BD
1520   DA5E             			RSET0_($11)				;Effect: Range #11
1520   DA5E             
1520   DA5E 18 11       
1521   DA60             			JMPR_(gj_3E)
1521   DA60~            			JMPR_(gj_3E)
1521   DA60~            			JMPR_(gj_3E)
1521   DA60             
1521   DA60~            			JMPR_(gj_3E)
1521   DA60~            			JMPR_(gj_3E)
1521   DA60             
1521   DA60             
1521   DA60 8F          
1521   DA61 DA          
1522   DA62             			
1523   DA62 37          gj_40			pshb	
1524   DA63 16          			tab	
1525   DA64 BD DD 17    			jsr	gj_16
1526   DA67 3F          			swi	
1527   DA68 5AFBD0E0F3F5			.db $5A,$FB,$D0,$E0,$F3,$F5,$E0,$13	;BEQ_((!RangeOFF#E0) || BIT2#E0) to gb_2E
1527   DA6E E013
1528   DA70             			BITON4a_($00)			;Turn ON: Lamp#00(lamp_h1)
1528   DA70 DC 00       
1529   DA72             			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1529   DA72             
1529   DA72 14 01       
1530   DA74 69          			SLEEPI_($9)				;Delay RAM$09
1531   DA75 69          			SLEEPI_($9)				;Delay RAM$09
1532   DA76 5A D0 E0 04 			.db $5A,$D0,$E0,$04		;BEQ_BIT2#E0 to gb_2F
1533   DA7A C0 00       			SETRAM_($00,$00)			;RAM$00=$00
1534   DA7C             			JMPR_(gb_2E)
1534   DA7C~            			JMPR_(gb_2E)
1534   DA7C~            			JMPR_(gb_2E)
1534   DA7C             
1534   DA7C~            			JMPR_(gb_2E)
1534   DA7C~            			JMPR_(gb_2E)
1534   DA7C             
1534   DA7C             
1534   DA7C 80          
1534   DA7D 05          
1535   DA7E             			
1536   DA7E             gb_2F			BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
1536   DA7E DD 00       
1537   DA80             			JSRD_(lampm_clr0)			
1537   DA80 57          
1537   DA81 F2 1D       
1538   DA83             gb_2E			CPUX_					;Resume CPU Execution
1538   DA83 04          
1539   DA84 33          			pulb	
1540   DA85 39          			rts	
1541   DA86             
1542   DA86 3F          gj_3C			.db $3F
1543   DA87             
1544   DA87             
1545   DA87             gb_7E			JSRR_(gj_3F)			
1545   DA87~            gb_7E			JSRR_(gj_3F)			
1545   DA87~            gb_7E			JSRR_(gj_3F)			
1545   DA87             
1545   DA87~            gb_7E			JSRR_(gj_3F)			
1545   DA87~            gb_7E			JSRR_(gj_3F)			
1545   DA87             
1545   DA87             
1545   DA87 90          
1545   DA88 D0          
1546   DA89 5A D0 2F 5F 			.db $5A,$D0,$2F,$5F		;BEQ_BIT2#2F to gb_BF
1547   DA8D C0 00       			SETRAM_($00,$00)			;RAM$00=$00
1548   DA8F B0 01       gb_C0			ADDRAM_($00,$01)			;RAM$00+=$01
1549   DA91 5AFAD0E0F3FC			.db $5A,$FA,$D0,$E0,$F3,$FC,$E0,$E1,$F5;BEQ_((!RAM$00==#225) && BIT2#E0) to gb_C0
1549   DA97 E0E1F5
1550   DA9A 5AFEF2F0304C			.db $5A,$FE,$F2,$F0,$30,$4C	;BEQ_(BIT#FFFFFFF0 P #F0) to gb_BF
1551   DAA0             			JSRDR_(gj_40)		
1551   DAA0~            			JSRDR_(gj_40)		
1551   DAA0~            			JSRDR_(gj_40)		
1551   DAA0             
1551   DAA0~            			JSRDR_(gj_40)		
1551   DAA0~            			JSRDR_(gj_40)		
1551   DAA0             
1551   DAA0             
1551   DAA0 AF          
1551   DAA1 C0          
1552   DAA2 5AFCE00045  			.db $5A,$FC,$E0,$00,$45		;BEQ_RAM$00==#0 to gb_BF
1553   DAA7 5AFCE0E128  			.db $5A,$FC,$E0,$E1,$28		;BEQ_RAM$00==#225 to gb_C1
1554   DAAC             			JMPR_(gb_C0)
1554   DAAC~            			JMPR_(gb_C0)
1554   DAAC~            			JMPR_(gb_C0)
1554   DAAC             
1554   DAAC~            			JMPR_(gb_C0)
1554   DAAC~            			JMPR_(gb_C0)
1554   DAAC             
1554   DAAC             
1554   DAAC 8F          
1554   DAAD E1          
1555   DAAE             			
1556   DAAE 3F          gj_3B			.db $3F
1557   DAAF             
1558   DAAF             
1559   DAAF             gb_BC			JSRR_(gj_3F)			
1559   DAAF~            gb_BC			JSRR_(gj_3F)			
1559   DAAF~            gb_BC			JSRR_(gj_3F)			
1559   DAAF             
1559   DAAF~            gb_BC			JSRR_(gj_3F)			
1559   DAAF~            gb_BC			JSRR_(gj_3F)			
1559   DAAF             
1559   DAAF             
1559   DAAF 90          
1559   DAB0 A8          
1560   DAB1 5A D0 2F 37 			.db $5A,$D0,$2F,$37		;BEQ_BIT2#2F to gb_BF
1561   DAB5 C0 0A       			SETRAM_($00,$0A)			;RAM$00=$0A
1562   DAB7 B0 FF       gb_DA			ADDRAM_($00,$FF)			;RAM$00+=$FF
1563   DAB9 5AFAD0E0F3FC			.db $5A,$FA,$D0,$E0,$F3,$FC,$E0,$E1,$F5;BEQ_((!RAM$00==#225) && BIT2#E0) to gb_DA
1563   DABF E0E1F5
1564   DAC2 5AFEF2F03024			.db $5A,$FE,$F2,$F0,$30,$24	;BEQ_(BIT#FFFFFFF0 P #F0) to gb_BF
1565   DAC8             			JSRDR_(gj_40)		
1565   DAC8~            			JSRDR_(gj_40)		
1565   DAC8~            			JSRDR_(gj_40)		
1565   DAC8             
1565   DAC8~            			JSRDR_(gj_40)		
1565   DAC8~            			JSRDR_(gj_40)		
1565   DAC8             
1565   DAC8             
1565   DAC8 AF          
1565   DAC9 98          
1566   DACA 5AFCE0001D  			.db $5A,$FC,$E0,$00,$1D		;BEQ_RAM$00==#0 to gb_BF
1567   DACF 5BFCE0E1E3  			.db $5B,$FC,$E0,$E1,$E3		;BNE_RAM$00==#225 to gb_DA
1568   DAD4 5AFAF5E0F3D0gb_C1			.db $5A,$FA,$F5,$E0,$F3,$D0,$E0,$03	;BEQ_((!BIT2#E0) && RangeOFF#E0) to gb_DB
1568   DADA E003
1569   DADC             			SLEEP_(1)
1569   DADC             
1569   DADC 71          
1569   DADD~            			SLEEP_(1)
1569   DADD~            			SLEEP_(1)
1569   DADD             
1570   DADD             			JMPR_(gb_C1)
1570   DADD~            			JMPR_(gb_C1)
1570   DADD~            			JMPR_(gb_C1)
1570   DADD             
1570   DADD~            			JMPR_(gb_C1)
1570   DADD~            			JMPR_(gb_C1)
1570   DADD             
1570   DADD             
1570   DADD 8F          
1570   DADE F5          
1571   DADF             			
1572   DADF             gb_DB			BITON4a_($00)			;Turn ON: Lamp#00(lamp_h1)
1572   DADF DC 00       
1573   DAE1             gb_F7			JSRDR_(to_lampm_a)	
1573   DAE1~            gb_F7			JSRDR_(to_lampm_a)	
1573   DAE1~            gb_F7			JSRDR_(to_lampm_a)	
1573   DAE1             
1573   DAE1~            gb_F7			JSRDR_(to_lampm_a)	
1573   DAE1~            gb_F7			JSRDR_(to_lampm_a)	
1573   DAE1             
1573   DAE1             
1573   DAE1 AF          
1573   DAE2 0B          
1574   DAE3 5A F6 E0 08 			.db $5A,$F6,$E0,$08		;BEQ_RangeON#E0 to gb_F6
1575   DAE7 69          			SLEEPI_($9)				;Delay RAM$09
1576   DAE8 5A D0 E0 F5 			.db $5A,$D0,$E0,$F5		;BEQ_BIT2#E0 to gb_F7
1577   DAEC             gb_BF			JSRR_(gj_13)			
1577   DAEC~            gb_BF			JSRR_(gj_13)			
1577   DAEC~            gb_BF			JSRR_(gj_13)			
1577   DAEC             
1577   DAEC~            gb_BF			JSRR_(gj_13)			
1577   DAEC~            gb_BF			JSRR_(gj_13)			
1577   DAEC             
1577   DAEC             
1577   DAEC 93          
1577   DAED 48          
1578   DAEE             gb_8C			KILL_					;Remove This Thread
1578   DAEE 03          
1579   DAEF             
1580   DAEF             gb_F6			JSRD_(lampm_c)			
1580   DAEF 57          
1580   DAF0 F2 E1       
1581   DAF2             			JSRD_(lampm_e)			
1581   DAF2 57          
1581   DAF3 F2 F2       
1582   DAF5 5A F5 E0 07 			.db $5A,$F5,$E0,$07		;BEQ_RangeOFF#E0 to gb_102
1583   DAF9             			SLEEP_(4)
1583   DAF9             
1583   DAF9 74          
1583   DAFA~            			SLEEP_(4)
1583   DAFA~            			SLEEP_(4)
1583   DAFA             
1584   DAFA 5B D0 E0 EE 			.db $5B,$D0,$E0,$EE		;BNE_BIT2#E0 to gb_BF
1585   DAFE             			JMPR_(gb_F6)
1585   DAFE~            			JMPR_(gb_F6)
1585   DAFE~            			JMPR_(gb_F6)
1585   DAFE             
1585   DAFE~            			JMPR_(gb_F6)
1585   DAFE~            			JMPR_(gb_F6)
1585   DAFE             
1585   DAFE             
1585   DAFE 8F          
1585   DAFF EF          
1586   DB00             			
1587   DB00             gb_102		BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
1587   DB00 DD 00       
1588   DB02             			PRI_($00)				;Priority=#00
1588   DB02 52 00       
1589   DB04             			JSRR_(gj_13)			
1589   DB04~            			JSRR_(gj_13)			
1589   DB04~            			JSRR_(gj_13)			
1589   DB04             
1589   DB04~            			JSRR_(gj_13)			
1589   DB04~            			JSRR_(gj_13)			
1589   DB04             
1589   DB04             
1589   DB04 93          
1589   DB05 30          
1590   DB06             gj_1A			JSRDR_(gj_35)		
1590   DB06~            gj_1A			JSRDR_(gj_35)		
1590   DB06~            gj_1A			JSRDR_(gj_35)		
1590   DB06             
1590   DB06~            gj_1A			JSRDR_(gj_35)		
1590   DB06~            gj_1A			JSRDR_(gj_35)		
1590   DB06             
1590   DB06             
1590   DB06 AB          
1590   DB07 9D          
1591   DB08             			RCLR1L0_($8A,$0A)			;Effect: Range #8A Range #0A
1591   DB08             
1591   DB08 1C 8A 0A    
1592   DB0B B2 04       			ADDRAM_($02,$04)			;RAM$02+=$04
1593   DB0D 5BFCE600DC  			.db $5B,$FC,$E6,$00,$DC		;BNE_RAM$06==#0 to gb_8C
1594   DB12             gj_19			REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
1594   DB12 55 08 00    
1595   DB15             			SOL_(GI_PF_ON)				
1595   DB15 31 F6       
1596   DB17             			JSRR_(gj_06)			
1596   DB17~            			JSRR_(gj_06)			
1596   DB17~            			JSRR_(gj_06)			
1596   DB17             
1596   DB17~            			JSRR_(gj_06)			
1596   DB17~            			JSRR_(gj_06)			
1596   DB17             
1596   DB17             
1596   DB17 9B          
1596   DB18 F1          
1597   DB19 C0 05       			SETRAM_($00,$05)			;RAM$00=$05
1598   DB1B C1 05       			SETRAM_($01,$05)			;RAM$01=$05
1599   DB1D             gj_34			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1599   DB1D             
1599   DB1D 14 01       
1600   DB1F 5AFCE13504  			.db $5A,$FC,$E1,$35,$04		;BEQ_RAM$01==#53 to gb_89
1601   DB24 B1 06       			ADDRAM_($01,$06)			;RAM$01+=$06
1602   DB26             			JMPR_(gj_34)
1602   DB26~            			JMPR_(gj_34)
1602   DB26~            			JMPR_(gj_34)
1602   DB26             
1602   DB26~            			JMPR_(gj_34)
1602   DB26~            			JMPR_(gj_34)
1602   DB26             
1602   DB26             
1602   DB26 8F          
1602   DB27 F5          
1603   DB28             			
1604   DB28 5B 05 0D    gb_89			.db $5B,$05,$0D			;BNE_LAMP#05(lamp_h6) to gb_CA
1605   DB2B B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
1606   DB2D 5AFCE00022  			.db $5A,$FC,$E0,$00,$22		;BEQ_RAM$00==#0 to gb_CB
1607   DB32 EE          			SND_($0E)				;Sound #0E
1608   DB33             			SOL_(HYPER_FL_ON4,ENERGY_FL_ON4,P1_FL_ON4,P2_FL_ON4)		; Sol#0:hyper_flash Sol#1:energy_flash Sol#2:p1_flash Sol#7:p2_flash
1608   DB33 3440414247  
1609   DB38             gb_CA			RROL0_($81,$82,$83,$84,$85,$86,$87,$88,$09);Effect: Range #81 Range #82 Range #83 Range #84 Range #85 Range #86 Range #87 Range #88 Range #09
1609   DB38             
1609   DB38 1D8182838485
1609   DB3E 86878809
1610   DB42             			SLEEP_(7)
1610   DB42             
1610   DB42 77          
1610   DB43~            			SLEEP_(7)
1610   DB43~            			SLEEP_(7)
1610   DB43             
1611   DB43 5B 00 E2    			.db $5B,$00,$E2			;BNE_LAMP#00(lamp_h1) to gb_89
1612   DB46             			BITON_($BE,$BD,$C6,$47)		;Turn ON: Lamp#3E(lamp_g), Lamp#3D(lamp_f), Bit#06, Bit#07
1612   DB46             
1612   DB46 10BEBDC647  
1613   DB4B             			EXE_($06)				;CPU Execute Next 6 Bytes
1613   DB4B~            			EXE_($06)				;CPU Execute Next 6 Bytes
1613   DB4B~            			EXE_($06)				;CPU Execute Next 6 Bytes
1613   DB4B             
1613   DB4B 48          
1613   DB4C             
1614   DB4C CE DD B0    			ldx	#gj_45
1615   DB4F BD EA 24    			jsr	newthread_06
1616   DB52             			JMPR_(gb_89)
1616   DB52~            			JMPR_(gb_89)
1616   DB52~            			JMPR_(gb_89)
1616   DB52             
1616   DB52~            			JMPR_(gb_89)
1616   DB52~            			JMPR_(gb_89)
1616   DB52             
1616   DB52             
1616   DB52 8F          
1616   DB53 D4          
1617   DB54             			
1618   DB54 C6 00       gb_CB			SETRAM_($06,$00)			;RAM$06=$00
1619   DB56 5F          			JMP_(gj_44)				
1619   DB57 D3 A1       
1620   DB59             
1621   DB59             
1622   DB59             gj_3F			SLEEP_(1)
1622   DB59             
1622   DB59 71          
1622   DB5A~            gj_3F			SLEEP_(1)
1622   DB5A~            gj_3F			SLEEP_(1)
1622   DB5A             
1623   DB5A 5AFEF2F121F9			.db $5A,$FE,$F2,$F1,$21,$F9	;BEQ_(LAMP#21(lamp_m4) P #F1) to gj_3F
1624   DB60             			PRI_($20)				;Priority=#20
1624   DB60 52 20       
1625   DB62 5B F6 4D 02 			.db $5B,$F6,$4D,$02		;BNE_RangeON#4D to gb_DC
1626   DB66             			RCLR0_($4D)				;Effect: Range #4D
1626   DB66             
1626   DB66 19 4D       
1627   DB68             gb_DC			JSRDR_(gj_15)		
1627   DB68~            gb_DC			JSRDR_(gj_15)		
1627   DB68~            gb_DC			JSRDR_(gj_15)		
1627   DB68             
1627   DB68~            gb_DC			JSRDR_(gj_15)		
1627   DB68~            gb_DC			JSRDR_(gj_15)		
1627   DB68             
1627   DB68             
1627   DB68 A0          
1627   DB69 13          
1628   DB6A B1 30       			ADDRAM_($01,$30)			;RAM$01+=$30
1629   DB6C 5AFBFBD0E1D0			.db $5A,$FB,$FB,$D0,$E1,$D0,$E0,$D0,$F9,$E1;BEQ_(BIT2#F9 || (BIT2#E0 || BIT2#E1)) to gb_DD
1629   DB72 E0D0F9E1
1630   DB76             			BITFL2_($E1,$DC,$01)		;Flash: Lamp#21(lamp_m4), Lamp#1C(lamp_l5), Lamp#01(lamp_h2)
1630   DB76             
1630   DB76 23 E1 DC 01 
1631   DB7A             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1631   DB7A             
1631   DB7A 51 10       
1631   DB7C~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1631   DB7C~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1631   DB7C             
1632   DB7C             			MRTS_					;Macro RTS, Save MRA,MRB
1632   DB7C 02          
1633   DB7D             
1634   DB7D BD D5 F5    gj_15			jsr	random_x0f
1635   DB80 81 08       			cmpa	#$08
1636   DB82             			ifgt
1636   DB82             
1636   DB82 2F FE       
1637   DB84 44          				lsra
1638   DB85             			endif	
1638   DB85             
1638   DB85             
1638   DB85             
1638   DB85             
1638   DB85             
1638   DB85~            			endif	
1638   DB85~            			endif	
1638   DB85             
1638   DB85~            			endif	
1638   DB85~            			endif	
1638   DB85             
1638   DB83             
1638   DB83 01          
1638   DB84             
1638   DB84             
1638   DB84~            			endif	
1638   DB84~            			endif	
1638   DB84~            			endif	
1638   DB84             
1638   DB85             
1638   DB85~            			endif	
1638   DB85~            			endif	
1638   DB85             
1639   DB85 4C          			inca	
1640   DB86 16          			tab	
1641   DB87 39          			rts	
1642   DB88             
1643   DB88 BD D2 D6    show_eunit_bonus	jsr	setup_msg_endptr
1644   DB8B CE 00 60    			ldx	#alpha_b0
1645   DB8E DF B8       			stx	temp1
1646   DB90 CE E5 C8    			ldx	#msg_enuit
1647   DB93 BD D3 0D    			jsr	copy_msg_part
1648   DB96 CE E5 8D    			ldx	#msg_bonus
1649   DB99 BD D3 0D    			jsr	copy_msg_part
1650   DB9C             			SLEEP($25)
1650   DB9C BD E9 7C    
1650   DB9F 25          
1651   DBA0 BD D2 D6    			jsr	setup_msg_endptr
1652   DBA3 D6 06       			ldab	game_ram_6
1653   DBA5 CE 00 61    			ldx	#alpha_b0+1
1654   DBA8 BD EC 32    			jsr	split_ab
1655   DBAB 5D          			tstb	
1656   DBAC             			ifne
1656   DBAC             
1656   DBAC 27 FE       
1657   DBAE CB 1B       				addb	#$1B
1658   DBB0 E7 00       				stab	$00,X
1659   DBB2             			endif
1659   DBB2             
1659   DBB2             
1659   DBB2             
1659   DBB2             
1659   DBB2             
1659   DBB2~            			endif
1659   DBB2~            			endif
1659   DBB2             
1659   DBB2~            			endif
1659   DBB2~            			endif
1659   DBB2             
1659   DBAD             
1659   DBAD 04          
1659   DBAE             
1659   DBAE             
1659   DBAE~            			endif
1659   DBAE~            			endif
1659   DBAE~            			endif
1659   DBAE             
1659   DBB2             
1659   DBB2~            			endif
1659   DBB2~            			endif
1659   DBB2             
1660   DBB2 D6 06       			ldab	game_ram_6
1661   DBB4 C4 0F       			andb	#$0F
1662   DBB6 CB 1B       			addb	#$1B
1663   DBB8 E7 01       			stab	$01,X
1664   DBBA 86 18       			ldaa	#$18
1665   DBBC A7 03       			staa	$03,X
1666   DBBE 96 05       			ldaa	current_wave
1667   DBC0 81 09       			cmpa	#$09
1668   DBC2             			ifge
1668   DBC2             
1668   DBC2 23 FE       
1669   DBC4 86 09       				ldaa	#$09
1670   DBC6             			endif
1670   DBC6             
1670   DBC6             
1670   DBC6             
1670   DBC6             
1670   DBC6             
1670   DBC6~            			endif
1670   DBC6~            			endif
1670   DBC6             
1670   DBC6~            			endif
1670   DBC6~            			endif
1670   DBC6             
1670   DBC3             
1670   DBC3 02          
1670   DBC4             
1670   DBC4             
1670   DBC4~            			endif
1670   DBC4~            			endif
1670   DBC4~            			endif
1670   DBC4             
1670   DBC6             
1670   DBC6~            			endif
1670   DBC6~            			endif
1670   DBC6             
1671   DBC6 16          			tab	
1672   DBC7 CB 9B       			addb	#$9B
1673   DBC9 E7 05       			stab	$05,X
1674   DBCB C6 1B       			ldab	#$1B
1675   DBCD E7 06       			stab	$06,X
1676   DBCF E7 07       			stab	$07,X
1677   DBD1 E7 08       			stab	$08,X
1678   DBD3 48          			asla	
1679   DBD4 48          			asla	
1680   DBD5 48          			asla	
1681   DBD6 8A 03       			oraa	#$03
1682   DBD8 D6 06       			ldab	game_ram_6
1683   DBDA             			begin
1683   DBDA             
1684   DBDA BD EB 3D    				jsr	score_main			;x 1,000 points
1685   DBDD 5A          				decb	
1686   DBDE             			eqend
1686   DBDE             
1686   DBDE             
1686   DBDE~            			eqend
1686   DBDE~            			eqend
1686   DBDE             
1686   DBDE 26 FA       
1686   DBE0             
1686   DBE0~            			eqend
1686   DBE0~            			eqend
1686   DBE0             
1687   DBE0             			SLEEP($25)
1687   DBE0 BD E9 7C    
1687   DBE3 25          
1688   DBE4 39          			rts	
1689   DBE5             
1690   DBE5 D6 05       start_baiter	ldab	current_wave
1691   DBE7 BD F8 9D    			jsr	dec2hex
1692   DBEA 86 7F       			ldaa	#$7F
1693   DBEC 80 04       gb_31			suba	#$04
1694   DBEE 81 09       			cmpa	#$09
1695   DBF0 2D 05       			blt	gb_30
1696   DBF2 5A          			decb	
1697   DBF3 26 F7       			bne	gb_31
1698   DBF5 20 02       			bra	gb_32
1699   DBF7             
1700   DBF7 86 08       gb_30			ldaa	#$08
1701   DBF9 3F          gb_32			swi	
1702   DBFA CE 00       			SETRAM_($0E,$00)			;RAM$0E=$00
1703   DBFC 67          gb_33			SLEEPI_($7)				;Delay RAM$07
1704   DBFD BE 01       			ADDRAM_($0E,$01)			;RAM$0E+=$01
1705   DBFF 5A D0 2F F9 			.db $5A,$D0,$2F,$F9		;BEQ_BIT2#2F to gb_33
1706   DC03             			EXE_($03)				;CPU Execute Next 3 Bytes
1706   DC03~            			EXE_($03)				;CPU Execute Next 3 Bytes
1706   DC03~            			EXE_($03)				;CPU Execute Next 3 Bytes
1706   DC03             
1706   DC03 45          
1706   DC04             
1707   DC04 D6 E8       			ldab	random_bool
1708   DC06 4A          			deca	
1709   DC07 5AFCE00009  			.db $5A,$FC,$E0,$00,$09		;BEQ_RAM$00==#0 to gb_34
1710   DC0C 5BFAFCE100FD			.db $5B,$FA,$FC,$E1,$00,$FD,$EE,$30,$E7;BNE_(RAM$0E>=#48 && RAM$01==#0) to gb_33
1710   DC12 EE30E7
1711   DC15             gb_34			SLEEP_(1)
1711   DC15             
1711   DC15 71          
1711   DC16~            gb_34			SLEEP_(1)
1711   DC16~            gb_34			SLEEP_(1)
1711   DC16             
1712   DC16             			EXE_($03)				;CPU Execute Next 3 Bytes
1712   DC16~            			EXE_($03)				;CPU Execute Next 3 Bytes
1712   DC16~            			EXE_($03)				;CPU Execute Next 3 Bytes
1712   DC16             
1712   DC16 45          
1712   DC17             
1713   DC17 7F 13 96    			clr	hy_unknown_1
1714   DC1A             			JSRDR_(gj_15)		
1714   DC1A~            			JSRDR_(gj_15)		
1714   DC1A~            			JSRDR_(gj_15)		
1714   DC1A             
1714   DC1A~            			JSRDR_(gj_15)		
1714   DC1A~            			JSRDR_(gj_15)		
1714   DC1A             
1714   DC1A             
1714   DC1A AF          
1714   DC1B 61          
1715   DC1C 5AFBF3F5E0D0			.db $5A,$FB,$F3,$F5,$E0,$D0,$E0,$F1	;BEQ_(BIT2#E0 || (!RangeOFF#E0)) to gb_34
1715   DC22 E0F1
1716   DC24 B0 53       			ADDRAM_($00,$53)			;RAM$00+=$53
1717   DC26             			JSRDR_(gj_16)		
1717   DC26~            			JSRDR_(gj_16)		
1717   DC26~            			JSRDR_(gj_16)		
1717   DC26             
1717   DC26~            			JSRDR_(gj_16)		
1717   DC26~            			JSRDR_(gj_16)		
1717   DC26             
1717   DC26             
1717   DC26 A0          
1717   DC27 EF          
1718   DC28             			PRI_($30)				;Priority=#30
1718   DC28 52 30       
1719   DC2A CE 06       gb_37			SETRAM_($0E,$06)			;RAM$0E=$06
1720   DC2C             			BITON4a_($00)			;Turn ON: Lamp#00(lamp_h1)
1720   DC2C DC 00       
1721   DC2E             			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1721   DC2E             
1721   DC2E 14 01       
1722   DC30             			BITOFF3a_($01)			;Turn OFF: Lamp#01(lamp_h2)
1722   DC30 D5 01       
1723   DC32             gb_36			BITINVP2_($01)			;Toggle Lamp/Bit @RAM:01
1723   DC32             
1723   DC32 26 01       
1724   DC34 E2          			SND_($02)				;Sound #02
1725   DC35 67          			SLEEPI_($7)				;Delay RAM$07
1726   DC36 5B D0 E0 20 			.db $5B,$D0,$E0,$20		;BNE_BIT2#E0 to gb_35
1727   DC3A BE FF       			ADDRAM_($0E,$FF)			;RAM$0E+=$FF
1728   DC3C 5BFCEE00F1  			.db $5B,$FC,$EE,$00,$F1		;BNE_RAM$0E==#0 to gb_36
1729   DC41             			BITONP2_($01)			;Turn ON Lamp/Bit @RAM:01
1729   DC41             
1729   DC41 24 01       
1730   DC43             			JSRDR_(gj_17)		
1730   DC43~            			JSRDR_(gj_17)		
1730   DC43~            			JSRDR_(gj_17)		
1730   DC43             
1730   DC43~            			JSRDR_(gj_17)		
1730   DC43~            			JSRDR_(gj_17)		
1730   DC43             
1730   DC43             
1730   DC43 A0          
1730   DC44 3F          
1731   DC45             			BITOFFP2_($01)			;Turn OFF Lamp/Bit @RAM:01
1731   DC45             
1731   DC45 25 01       
1732   DC47             			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1732   DC47             
1732   DC47 15 01       
1733   DC49 5B D0 E0 0D 			.db $5B,$D0,$E0,$0D		;BNE_BIT2#E0 to gb_35
1734   DC4D             			BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
1734   DC4D DD 00       
1735   DC4F             			JSRDR_(gj_18)		
1735   DC4F~            			JSRDR_(gj_18)		
1735   DC4F~            			JSRDR_(gj_18)		
1735   DC4F             
1735   DC4F~            			JSRDR_(gj_18)		
1735   DC4F~            			JSRDR_(gj_18)		
1735   DC4F             
1735   DC4F             
1735   DC4F A0          
1735   DC50 D2          
1736   DC51 5BFCE100D4  			.db $5B,$FC,$E1,$00,$D4		;BNE_RAM$01==#0 to gb_37
1737   DC56             			PRI_($00)				;Priority=#00
1737   DC56 52 00       
1738   DC58             			JMPR_(gj_19)
1738   DC58~            			JMPR_(gj_19)
1738   DC58~            			JMPR_(gj_19)
1738   DC58             
1738   DC58~            			JMPR_(gj_19)
1738   DC58~            			JMPR_(gj_19)
1738   DC58             
1738   DC58             
1738   DC58 8E          
1738   DC59 B8          
1739   DC5A             			
1740   DC5A             gb_35			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1740   DC5A             
1740   DC5A 15 01       
1741   DC5C             			BITOFFP2_($01)			;Turn OFF Lamp/Bit @RAM:01
1741   DC5C             
1741   DC5C 25 01       
1742   DC5E             			PRI_($00)				;Priority=#00
1742   DC5E 52 00       
1743   DC60             			POINTS_(1,10000)			;10000 Points
1743   DC60 42          
1743   DC61             
1743   DC61~            			POINTS_(1,10000)			;10000 Points
1743   DC61~            			POINTS_(1,10000)			;10000 Points
1743   DC61             
1743   DC61~            			POINTS_(1,10000)			;10000 Points
1743   DC61~            			POINTS_(1,10000)			;10000 Points
1743   DC61             
1743   DC61~            			POINTS_(1,10000)			;10000 Points
1743   DC61~            			POINTS_(1,10000)			;10000 Points
1743   DC61             
1743   DC61~            			POINTS_(1,10000)			;10000 Points
1743   DC61~            			POINTS_(1,10000)			;10000 Points
1743   DC61             
1743   DC61             
1743   DC61 0C          
1743   DC62~            			POINTS_(1,10000)			;10000 Points
1743   DC62~            			POINTS_(1,10000)			;10000 Points
1743   DC62~            			POINTS_(1,10000)			;10000 Points
1743   DC62~            			POINTS_(1,10000)			;10000 Points
1743   DC62~            			POINTS_(1,10000)			;10000 Points
1743   DC62~            			POINTS_(1,10000)			;10000 Points
1743   DC62             
1743   DC62             
1743   DC62             
1743   DC62             
1743   DC62             
1744   DC62 5AFCE70402  			.db $5A,$FC,$E7,$04,$02		;BEQ_RAM$07==#4 to gb_84
1745   DC67 B7 FF       			ADDRAM_($07,$FF)			;RAM$07+=$FF
1746   DC69             gb_84			JSRDR_(random_x07)	
1746   DC69~            gb_84			JSRDR_(random_x07)	
1746   DC69~            gb_84			JSRDR_(random_x07)	
1746   DC69             
1746   DC69~            gb_84			JSRDR_(random_x07)	
1746   DC69~            gb_84			JSRDR_(random_x07)	
1746   DC69             
1746   DC69             
1746   DC69 A9          
1746   DC6A 85          
1747   DC6B             			EXE_($02)				;CPU Execute Next 2 Bytes
1747   DC6B~            			EXE_($02)				;CPU Execute Next 2 Bytes
1747   DC6B~            			EXE_($02)				;CPU Execute Next 2 Bytes
1747   DC6B             
1747   DC6B 44          
1747   DC6C             
1748   DC6C 9B 03       			adda	cur_bolt_cnt
1749   DC6E FB          			SND_($1B)				;Sound #1B
1750   DC6F 5AFDE50902  gb_86			.db $5A,$FD,$E5,$09,$02		;BEQ_RAM$05>=#9 to gb_85
1751   DC74             			SLEEP_(32)
1751   DC74~            			SLEEP_(32)
1751   DC74~            			SLEEP_(32)
1751   DC74             
1751   DC74 53 20       
1751   DC76             
1752   DC76             gb_85			SLEEP_(15)
1752   DC76             
1752   DC76 7F          
1752   DC77~            gb_85			SLEEP_(15)
1752   DC77~            gb_85			SLEEP_(15)
1752   DC77             
1753   DC77 5A D0 2F F4 			.db $5A,$D0,$2F,$F4		;BEQ_BIT2#2F to gb_86
1754   DC7B B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
1755   DC7D 5BFCE000ED  			.db $5B,$FC,$E0,$00,$ED		;BNE_RAM$00==#0 to gb_86
1756   DC82             			JMPR_(gb_34)
1756   DC82~            			JMPR_(gb_34)
1756   DC82~            			JMPR_(gb_34)
1756   DC82             
1756   DC82~            			JMPR_(gb_34)
1756   DC82~            			JMPR_(gb_34)
1756   DC82             
1756   DC82             
1756   DC82 8F          
1756   DC83 91          
1757   DC84             			
1758   DC84 36          gj_17			psha	
1759   DC85 37          			pshb	
1760   DC86 BD D5 EB    			jsr	random_x03
1761   DC89 97 0E       			staa	reflx_cur_hits
1762   DC8B 33          			pulb	
1763   DC8C 32          			pula	
1764   DC8D             			ifne
1764   DC8D             
1764   DC8D 27 FE       
1765   DC8F 36          				psha	
1766   DC90 B6 13 96    				ldaa	hy_unknown_1
1767   DC93 81 03       				cmpa	#$03
1768   DC95 32          				pula	
1769   DC96             				ifle
1769   DC96             
1769   DC96 2E FE       
1770   DC98             					begin
1770   DC98             
1771   DC98 36          						psha	
1772   DC99 86 30       						ldaa	#$30
1773   DC9B 97 C8       						staa	thread_priority
1774   DC9D 32          						pula	
1775   DC9E CE DC BD    						ldx	#gj_33
1776   DCA1 BD E9 D8    						jsr	newthread_sp
1777   DCA4 3F          						swi	
1778   DCA5 FD          						SND_($1D)				;Sound #1D
1779   DCA6             gb_38						SLEEP_(10)
1779   DCA6             
1779   DCA6 7A          
1779   DCA7~            gb_38						SLEEP_(10)
1779   DCA7~            gb_38						SLEEP_(10)
1779   DCA7             
1780   DCA7 5AFEF2FF30F9						.db $5A,$FE,$F2,$FF,$30,$F9	;BEQ_(BIT#FFFFFFF0 P #FF) to gb_38
1781   DCAD             						CPUX_					;Resume CPU Execution
1781   DCAD 04          
1782   DCAE 8D 5F       						bsr	gb_8A
1783   DCB0 27 0A       						beq	gb_87
1784   DCB2 7D 13 9D    						tst	hy_unknown_4
1785   DCB5 26 05       						bne	gb_87
1786   DCB7 7A 00 0E    						dec	reflx_cur_hits
1787   DCBA             					eqend
1787   DCBA             
1787   DCBA             
1787   DCBA~            					eqend
1787   DCBA~            					eqend
1787   DCBA             
1787   DCBA 26 DC       
1787   DCBC             
1787   DCBC~            					eqend
1787   DCBC~            					eqend
1787   DCBC             
1788   DCBC             				endif
1788   DCBC             
1788   DCBC             
1788   DCBC             
1788   DCBC             
1788   DCBC             
1788   DCBC~            				endif
1788   DCBC~            				endif
1788   DCBC             
1788   DCBC~            				endif
1788   DCBC~            				endif
1788   DCBC             
1788   DC97             
1788   DC97 24          
1788   DC98             
1788   DC98             
1788   DC98~            				endif
1788   DC98~            				endif
1788   DC98~            				endif
1788   DC98             
1788   DCBC             
1788   DCBC~            				endif
1788   DCBC~            				endif
1788   DCBC             
1789   DCBC             			endif
1789   DCBC             
1789   DCBC             
1789   DCBC             
1789   DCBC             
1789   DCBC             
1789   DCBC~            			endif
1789   DCBC~            			endif
1789   DCBC             
1789   DCBC~            			endif
1789   DCBC~            			endif
1789   DCBC             
1789   DC8E             
1789   DC8E 2D          
1789   DC8F             
1789   DC8F             
1789   DC8F~            			endif
1789   DC8F~            			endif
1789   DC8F~            			endif
1789   DC8F             
1789   DCBC             
1789   DCBC~            			endif
1789   DCBC~            			endif
1789   DCBC             
1790   DCBC 39          gb_87			rts	
1791   DCBD             
1792   DCBD 97 0D       gj_33			staa	reflx_tmr_btr
1793   DCBF 80 53       			suba	#$53
1794   DCC1 BD F3 7D    			jsr	lampm_x
1795   DCC4 8A C0       			oraa	#$C0
1796   DCC6 BD F2 7E    			jsr	lampm_set0
1797   DCC9 84 8F       			anda	#$8F
1798   DCCB 36          			psha	
1799   DCCC 17          			tba	
1800   DCCD F6 13 96    			ldab	hy_unknown_1
1801   DCD0 BD F1 DA    			jsr	lamp_off_b
1802   DCD3 32          			pula	
1803   DCD4             			begin
1803   DCD4             
1804   DCD4             				SLEEP($08)
1804   DCD4 BD E9 7C    
1804   DCD7 08          
1805   DCD8 36          				psha	
1806   DCD9 37          				pshb	
1807   DCDA 96 0D       				ldaa	reflx_tmr_btr
1808   DCDC BD F3 6F    				jsr	bit_lamp_buf_f
1809   DCDF 33          				pulb	
1810   DCE0 32          				pula	
1811   DCE1 27 21       				beq	gb_C2
1812   DCE3 BD F2 F2    				jsr	lampm_e
1813   DCE6 5C          				incb	
1814   DCE7 C1 05       				cmpb	#$05
1815   DCE9             			geend
1815   DCE9             
1815   DCE9             
1815   DCE9~            			geend
1815   DCE9~            			geend
1815   DCE9             
1815   DCE9 23 E9       
1815   DCEB             
1815   DCEB~            			geend
1815   DCEB~            			geend
1815   DCEB             
1816   DCEB 8D 05       			bsr	gb_C4
1817   DCED 3F          			swi	
1818   DCEE             			PRI_($00)				;Priority=#00
1818   DCEE 52 00       
1819   DCF0             			JMPR_(gj_1A)
1819   DCF0~            			JMPR_(gj_1A)
1819   DCF0~            			JMPR_(gj_1A)
1819   DCF0             
1819   DCF0~            			JMPR_(gj_1A)
1819   DCF0~            			JMPR_(gj_1A)
1819   DCF0             
1819   DCF0             
1819   DCF0 8E          
1819   DCF1 14          
1820   DCF2             			
1821   DCF2 36          gb_C4			psha	
1822   DCF3 37          			pshb	
1823   DCF4 86 2F       			ldaa	#$2F
1824   DCF6 BD F3 6F    			jsr	bit_lamp_buf_f
1825   DCF9 33          			pulb	
1826   DCFA 32          			pula	
1827   DCFB 26 BF       			bne	gb_87
1828   DCFD 8D 02       			bsr	gb_DE
1829   DCFF 8A C0       			oraa	#$C0
1830   DD01 7E F2 1D    gb_DE			jmp	lampm_clr0
1831   DD04             
1832   DD04 36          gb_C2			psha	
1833   DD05 86 0B       			ldaa	#$0B
1834   DD07 BD EB 3D    			jsr	score_main			;1,000 points
1835   DD0A 32          			pula	
1836   DD0B 8D E5       			bsr	gb_C4
1837   DD0D 20 75       			bra	gb_3B
1838   DD0F             
1839   DD0F 36          gb_8A			psha	
1840   DD10 37          			pshb	
1841   DD11 BD F3 6F    			jsr	bit_lamp_buf_f
1842   DD14 33          gb_E1			pulb	
1843   DD15 32          			pula	
1844   DD16 39          			rts	
1845   DD17             
1846   DD17 36          gj_16			psha	
1847   DD18 4F          			clra	
1848   DD19             			begin
1848   DD19             
1849   DD19 5A          				decb	
1850   DD1A 27 04       				beq	gb_82
1851   DD1C 8B 06       				adda	#$06
1852   DD1E             			loopend
1852   DD1E             
1852   DD1E             
1852   DD1E~            			loopend
1852   DD1E~            			loopend
1852   DD1E             
1852   DD1E 20 F9       
1852   DD20             
1852   DD20~            			loopend
1852   DD20~            			loopend
1852   DD20             
1853   DD20 16          gb_82			tab	
1854   DD21 32          			pula	
1855   DD22 39          			rts	
1856   DD23             
1857   DD23 36          gj_18			psha	
1858   DD24 B6 13 96    			ldaa	hy_unknown_1
1859   DD27 4C          			inca	
1860   DD28 B7 13 96    			staa	hy_unknown_1
1861   DD2B 81 06       			cmpa	#$06
1862   DD2D 32          			pula	
1863   DD2E             			ifeq
1863   DD2E             
1863   DD2E 26 FE       
1864   DD30 5F          				clrb	
1865   DD31 39          				rts	
1866   DD32             			endif
1866   DD32             
1866   DD32             
1866   DD32             
1866   DD32             
1866   DD32             
1866   DD32~            			endif
1866   DD32~            			endif
1866   DD32             
1866   DD32~            			endif
1866   DD32~            			endif
1866   DD32             
1866   DD2F             
1866   DD2F 02          
1866   DD30             
1866   DD30             
1866   DD30~            			endif
1866   DD30~            			endif
1866   DD30~            			endif
1866   DD30             
1866   DD32             
1866   DD32~            			endif
1866   DD32~            			endif
1866   DD32             
1867   DD32 74 13 9D    gb_88			lsr	hy_unknown_4
1868   DD35 25 11       			bcs	gb_C5
1869   DD37 74 13 9D    			lsr	hy_unknown_4
1870   DD3A 25 15       			bcs	gb_C6
1871   DD3C 36          			psha	
1872   DD3D BD FB 94    			jsr	get_random
1873   DD40 46          			rora	
1874   DD41 85 08       			bita	#$08
1875   DD43 32          			pula	
1876   DD44 25 18       			bcs	gb_C7
1877   DD46 27 09       			beq	gb_C6
1878   DD48 4A          gb_C5			deca	
1879   DD49 81 53       			cmpa	#$53
1880   DD4B 27 0D       			beq	gb_C8
1881   DD4D C0 05       			subb	#$05
1882   DD4F 20 0E       			bra	gb_C9
1883   DD51             
1884   DD51 4C          gb_C6			inca	
1885   DD52 81 5D       			cmpa	#$5D
1886   DD54             			ifne
1886   DD54             
1886   DD54 27 FE       
1887   DD56 CB 07       				addb	#$07
1888   DD58 20 05       				bra	gb_C9
1889   DD5A 4C          gb_C8				inca	
1890   DD5B             			else
1890   DD5B             
1890   DD5B             
1890   DD5B             
1890   DD5B             
1890   DD55             
1890   DD55             
1890   DD55             
1890   DD55~            			else
1890   DD55~            			else
1890   DD55~            			else
1890   DD55~            			else
1890   DD55             
1890   DD55~            			else
1890   DD55~            			else
1890   DD55~            			else
1890   DD55~            			else
1890   DD55             
1890   DD55             
1890   DD55 07          
1890   DD5B             
1890   DD5B 20 FE       
1890   DD5D             
1890   DD5D             
1890   DD5D             
1890   DD5D~            			else
1890   DD5D~            			else
1890   DD5D~            			else
1890   DD5D~            			else
1890   DD5D~            			else
1890   DD5D             
1890   DD5D~            			else
1890   DD5D~            			else
1890   DD5D             
1890   DD5D~            			else
1890   DD5D~            			else
1890   DD5D             
1891   DD5D 4A          				deca
1892   DD5E             			endif	
1892   DD5E             
1892   DD5E             
1892   DD5E             
1892   DD5E             
1892   DD5E             
1892   DD5E~            			endif	
1892   DD5E~            			endif	
1892   DD5E             
1892   DD5E~            			endif	
1892   DD5E~            			endif	
1892   DD5E             
1892   DD5C             
1892   DD5C 01          
1892   DD5D             
1892   DD5D             
1892   DD5D~            			endif	
1892   DD5D~            			endif	
1892   DD5D~            			endif	
1892   DD5D             
1892   DD5E             
1892   DD5E~            			endif	
1892   DD5E~            			endif	
1892   DD5E             
1893   DD5E 5C          gb_C7			incb	
1894   DD5F 36          gb_C9			psha	
1895   DD60 37          			pshb	
1896   DD61 80 53       			suba	#$53
1897   DD63 BD F3 54    			jsr	lfill_b
1898   DD66             			ifcs
1898   DD66             
1898   DD66 24 FE       
1899   DD68 BD F3 6F    				jsr	bit_lamp_buf_f
1900   DD6B 27 A7       				beq	gb_E1
1901   DD6D             			endif
1901   DD6D             
1901   DD6D             
1901   DD6D             
1901   DD6D             
1901   DD6D             
1901   DD6D~            			endif
1901   DD6D~            			endif
1901   DD6D             
1901   DD6D~            			endif
1901   DD6D~            			endif
1901   DD6D             
1901   DD67             
1901   DD67 05          
1901   DD68             
1901   DD68             
1901   DD68~            			endif
1901   DD68~            			endif
1901   DD68~            			endif
1901   DD68             
1901   DD6D             
1901   DD6D~            			endif
1901   DD6D~            			endif
1901   DD6D             
1902   DD6D 33          			pulb	
1903   DD6E 32          			pula	
1904   DD6F             			SLEEP($01)
1904   DD6F BD E9 7C    
1904   DD72 01          
1905   DD73 5A          			decb	
1906   DD74 20 BC       			bra	gb_88
1907   DD76             			begin
1907   DD76             
1908   DD76 BD F2 E1    gj_27				jsr	lampm_c
1909   DD79 BD F3 54    				jsr	lfill_b
1910   DD7C 25 06       				bcs	gb_3B
1911   DD7E             				SLEEP($04)
1911   DD7E BD E9 7C    
1911   DD81 04          
1912   DD82             			loopend
1912   DD82             
1912   DD82             
1912   DD82~            			loopend
1912   DD82~            			loopend
1912   DD82             
1912   DD82 20 F2       
1912   DD84             
1912   DD84~            			loopend
1912   DD84~            			loopend
1912   DD84             
1913   DD84 7E E9 C4    gb_3B			jmp	killthread
1914   DD87             
1915   DD87             gb_3A			begin
1915   DD87             
1916   DD87 C6 0F       				ldab	#$0F
1917   DD89             				begin
1917   DD89             
1918   DD89             					SLEEP($40)
1918   DD89 BD E9 7C    
1918   DD8C 40          
1919   DD8D 5A          					decb	
1920   DD8E             				eqend
1920   DD8E             
1920   DD8E             
1920   DD8E~            				eqend
1920   DD8E~            				eqend
1920   DD8E             
1920   DD8E 26 F9       
1920   DD90             
1920   DD90~            				eqend
1920   DD90~            				eqend
1920   DD90             
1921   DD90 96 09       				ldaa	game_ram_9
1922   DD92 4A          				deca	
1923   DD93 97 09       				staa	game_ram_9
1924   DD95 81 09       				cmpa	#$09
1925   DD97             			leend
1925   DD97             
1925   DD97             
1925   DD97~            			leend
1925   DD97~            			leend
1925   DD97             
1925   DD97 2E EE       
1925   DD99             
1925   DD99~            			leend
1925   DD99~            			leend
1925   DD99             
1926   DD99 20 E9       			bra	gb_3B
1927   DD9B             
1928   DD9B 5AFBF3F1D030sw_z_bomb		.db $5A,$FB,$F3,$F1,$D0,$30,$1E	;BEQ_(BIT2#30 || (!GAME)) to gb_09
1928   DDA1 1E
1929   DDA2             			PRI_($10)				;Priority=#10
1929   DDA2 52 10       
1930   DDA4             			REMTHREADS_($FF,$10)		;Remove Multiple Threads Based on Priority
1930   DDA4 55 FF 10    
1931   DDA7             			JSRD_(setup_msg_endptr)		
1931   DDA7 57          
1931   DDA8 D2 D6       
1932   DDAA             			JSRD_(clr_alpha_set_b0)			
1932   DDAA 57          
1932   DDAB D3 49       
1933   DDAD 5C          			JMPD_(gj_09)
1933   DDAE DE EE       
1934   DDB0             			
1935   DDB0 3F          gj_45			swi	
1936   DDB1 C0 09       			SETRAM_($00,$09)			;RAM$00=$09
1937   DDB3             gb_3C			RROL0_($96,$15)			;Effect: Range #96 Range #15
1937   DDB3             
1937   DDB3 1D 96 15    
1938   DDB6 EF          			SND_($0F)				;Sound #0F
1939   DDB7             			SLEEP_(5)
1939   DDB7             
1939   DDB7 75          
1939   DDB8~            			SLEEP_(5)
1939   DDB8~            			SLEEP_(5)
1939   DDB8             
1940   DDB8 B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
1941   DDBA 5BFCE000F4  			.db $5B,$FC,$E0,$00,$F4		;BNE_RAM$00==#0 to gb_3C
1942   DDBF             gb_59			KILL_					;Remove This Thread
1942   DDBF 03          
1943   DDC0             
1944   DDC0 5AFBD02FD030gb_09			.db $5A,$FB,$D0,$2F,$D0,$30,$F8	;BEQ_(BIT2#30 || BIT2#2F) to gb_59
1944   DDC6 F8
1945   DDC7             			EXE_($08)				;CPU Execute Next 8 Bytes
1945   DDC7~            			EXE_($08)				;CPU Execute Next 8 Bytes
1945   DDC7~            			EXE_($08)				;CPU Execute Next 8 Bytes
1945   DDC7             
1945   DDC7 4A          
1945   DDC8             
1946   DDC8 BD D3 F3    			jsr	get_current_ecs
1947   DDCB             			ifne
1947   DDCB             
1947   DDCB 27 FE       
1948   DDCD 5A          				decb	
1949   DDCE E7 00       				stab	$00,X
1950   DDD0             			endif
1950   DDD0             
1950   DDD0             
1950   DDD0             
1950   DDD0             
1950   DDD0             
1950   DDD0~            			endif
1950   DDD0~            			endif
1950   DDD0             
1950   DDD0~            			endif
1950   DDD0~            			endif
1950   DDD0             
1950   DDCC             
1950   DDCC 03          
1950   DDCD             
1950   DDCD             
1950   DDCD~            			endif
1950   DDCD~            			endif
1950   DDCD~            			endif
1950   DDCD             
1950   DDD0             
1950   DDD0~            			endif
1950   DDD0~            			endif
1950   DDD0             
1951   DDD0 B0 0B       			ADDRAM_($00,$0B)			;RAM$00+=$0B
1952   DDD2 5A F5 E0 E9 			.db $5A,$F5,$E0,$E9		;BEQ_RangeOFF#E0 to gb_59
1953   DDD6 5AFDE10203  			.db $5A,$FD,$E1,$02,$03		;BEQ_RAM$01>=#2 to gb_5A
1954   DDDB             			JSRD_(lampm_c)			
1954   DDDB 57          
1954   DDDC F2 E1       
1955   DDDE             gb_5A			BITON4_($2F)			;Turn ON: Lamp#2F(lamp_o6)
1955   DDDE D8 2F       
1956   DDE0             			POINTS_(1,10)			;10 Points
1956   DDE0 42          
1956   DDE1             
1956   DDE1~            			POINTS_(1,10)			;10 Points
1956   DDE1~            			POINTS_(1,10)			;10 Points
1956   DDE1             
1956   DDE1             
1956   DDE1 09          
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2~            			POINTS_(1,10)			;10 Points
1956   DDE2             
1956   DDE2             
1957   DDE2             			PRI_($A1)				;Priority=#A1
1957   DDE2 52 A1       
1958   DDE4             			RCLR1_($52)				;Effect: Range #52
1958   DDE4             
1958   DDE4 29 52       
1959   DDE6             			RCLR0_($CF,$D3,$12)		;Effect: Range #CF Range #D3 Range #12
1959   DDE6             
1959   DDE6 19 CF D3 12 
1960   DDEA C1 00       			SETRAM_($01,$00)			;RAM$01=$00
1961   DDEC 5BFEF2FF500Bgj_2A			.db $5B,$FE,$F2,$FF,$50,$0B	;BNE_(BIT#10 P #FF) to gb_5B
1962   DDF2 B8 01       			ADDRAM_($08,$01)			;RAM$08+=$01
1963   DDF4 B1 01       			ADDRAM_($01,$01)			;RAM$01+=$01
1964   DDF6             			POINTS_(5,1000)			;5000 Points
1964   DDF6 42          
1964   DDF7             
1964   DDF7~            			POINTS_(5,1000)			;5000 Points
1964   DDF7~            			POINTS_(5,1000)			;5000 Points
1964   DDF7             
1964   DDF7~            			POINTS_(5,1000)			;5000 Points
1964   DDF7~            			POINTS_(5,1000)			;5000 Points
1964   DDF7             
1964   DDF7~            			POINTS_(5,1000)			;5000 Points
1964   DDF7~            			POINTS_(5,1000)			;5000 Points
1964   DDF7             
1964   DDF7             
1964   DDF7 2B          
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8~            			POINTS_(5,1000)			;5000 Points
1964   DDF8             
1964   DDF8             
1964   DDF8             
1964   DDF8             
1965   DDF8             			REMTHREAD_($FF,$50)		;Remove Single Thread Based on Priority
1965   DDF8 54 FF 50    
1966   DDFB             			JMPR_(gj_2A)
1966   DDFB~            			JMPR_(gj_2A)
1966   DDFB~            			JMPR_(gj_2A)
1966   DDFB             
1966   DDFB~            			JMPR_(gj_2A)
1966   DDFB~            			JMPR_(gj_2A)
1966   DDFB             
1966   DDFB             
1966   DDFB 8F          
1966   DDFC EF          
1967   DDFD             			
1968   DDFD 5BFEF2FF200Bgb_5B			.db $5B,$FE,$F2,$FF,$20,$0B	;BNE_(LAMP#20(lamp_m3) P #FF) to gb_9E
1969   DE03             			POINTS_(1,1000)			;1000 Points
1969   DE03 42          
1969   DE04             
1969   DE04~            			POINTS_(1,1000)			;1000 Points
1969   DE04~            			POINTS_(1,1000)			;1000 Points
1969   DE04             
1969   DE04~            			POINTS_(1,1000)			;1000 Points
1969   DE04~            			POINTS_(1,1000)			;1000 Points
1969   DE04             
1969   DE04~            			POINTS_(1,1000)			;1000 Points
1969   DE04~            			POINTS_(1,1000)			;1000 Points
1969   DE04             
1969   DE04             
1969   DE04 0B          
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05~            			POINTS_(1,1000)			;1000 Points
1969   DE05             
1969   DE05             
1969   DE05             
1969   DE05             
1970   DE05 B1 01       			ADDRAM_($01,$01)			;RAM$01+=$01
1971   DE07 B8 01       			ADDRAM_($08,$01)			;RAM$08+=$01
1972   DE09             			REMTHREAD_($FF,$20)		;Remove Single Thread Based on Priority
1972   DE09 54 FF 20    
1973   DE0C             			JMPR_(gb_5B)
1973   DE0C~            			JMPR_(gb_5B)
1973   DE0C~            			JMPR_(gb_5B)
1973   DE0C             
1973   DE0C~            			JMPR_(gb_5B)
1973   DE0C~            			JMPR_(gb_5B)
1973   DE0C             
1973   DE0C             
1973   DE0C 8F          
1973   DE0D EF          
1974   DE0E             			
1975   DE0E 5BFEF2F4A407gb_9E			.db $5B,$FE,$F2,$F4,$A4,$07	;BNE_(BIT#64 P #F4) to gb_D1
1976   DE14             			EXE_($06)				;CPU Execute Next 6 Bytes
1976   DE14~            			EXE_($06)				;CPU Execute Next 6 Bytes
1976   DE14~            			EXE_($06)				;CPU Execute Next 6 Bytes
1976   DE14             
1976   DE14 48          
1976   DE15             
1977   DE15 CE D7 D2    			ldx	#gj_48
1978   DE18 BD D5 0D    			jsr	addthread_clra
1979   DE1B             gb_D1			RSET1_($54)				;Effect: Range #54
1979   DE1B             
1979   DE1B 28 54       
1980   DE1D             			JSRR_(gj_42)			
1980   DE1D~            			JSRR_(gj_42)			
1980   DE1D~            			JSRR_(gj_42)			
1980   DE1D             
1980   DE1D~            			JSRR_(gj_42)			
1980   DE1D~            			JSRR_(gj_42)			
1980   DE1D             
1980   DE1D             
1980   DE1D 90          
1980   DE1E 19          
1981   DE1F             			EXE_($08)				;CPU Execute Next 8 Bytes
1981   DE1F~            			EXE_($08)				;CPU Execute Next 8 Bytes
1981   DE1F~            			EXE_($08)				;CPU Execute Next 8 Bytes
1981   DE1F             
1981   DE1F 4A          
1981   DE20             
1982   DE20 96 03       			ldaa	cur_bolt_cnt
1983   DE22 10          			sba	
1984   DE23             			ifle
1984   DE23             
1984   DE23 2E FE       
1985   DE25 4F          				clra	
1986   DE26             			endif
1986   DE26             
1986   DE26             
1986   DE26             
1986   DE26             
1986   DE26             
1986   DE26~            			endif
1986   DE26~            			endif
1986   DE26             
1986   DE26~            			endif
1986   DE26~            			endif
1986   DE26             
1986   DE24             
1986   DE24 01          
1986   DE25             
1986   DE25             
1986   DE25~            			endif
1986   DE25~            			endif
1986   DE25~            			endif
1986   DE25             
1986   DE26             
1986   DE26~            			endif
1986   DE26~            			endif
1986   DE26             
1987   DE26 97 03       			staa	cur_bolt_cnt
1988   DE28             			JSRDR_(zbomb_ani)		
1988   DE28~            			JSRDR_(zbomb_ani)		
1988   DE28~            			JSRDR_(zbomb_ani)		
1988   DE28             
1988   DE28~            			JSRDR_(zbomb_ani)		
1988   DE28~            			JSRDR_(zbomb_ani)		
1988   DE28             
1988   DE28             
1988   DE28 A0          
1988   DE29 16          
1989   DE2A EB          			SND_($0B)				;Sound #0B
1990   DE2B             			JSRDR_(zbomb_ani3)	
1990   DE2B~            			JSRDR_(zbomb_ani3)	
1990   DE2B~            			JSRDR_(zbomb_ani3)	
1990   DE2B             
1990   DE2B~            			JSRDR_(zbomb_ani3)	
1990   DE2B~            			JSRDR_(zbomb_ani3)	
1990   DE2B             
1990   DE2B             
1990   DE2B A0          
1990   DE2C 4D          
1991   DE2D             			RCLR0_($12)				;Effect: Range #12
1991   DE2D             
1991   DE2D 19 12       
1992   DE2F             			RCLR1_($54)				;Effect: Range #54
1992   DE2F             
1992   DE2F 29 54       
1993   DE31             			BITOFF4_($2F)			;Turn OFF: Lamp#2F(lamp_o6)
1993   DE31 D9 2F       
1994   DE33             			JMPR_(chk_wave_compl)
1994   DE33~            			JMPR_(chk_wave_compl)
1994   DE33~            			JMPR_(chk_wave_compl)
1994   DE33             
1994   DE33~            			JMPR_(chk_wave_compl)
1994   DE33~            			JMPR_(chk_wave_compl)
1994   DE33             
1994   DE33             
1994   DE33 89          
1994   DE34 0E          
1995   DE35             		
1996   DE35 03          			.db $03
1997   DE36             
1998   DE36             
1999   DE36 B8 01       gj_13			ADDRAM_($08,$01)			;RAM$08+=$01
2000   DE38 5BFDE80602  gj_42			.db $5B,$FD,$E8,$06,$02		;BNE_RAM$08>=#6 to gb_70
2001   DE3D C8 06       			SETRAM_($08,$06)			;RAM$08=$06
2002   DE3F             gb_70			MRTS_					;Macro RTS, Save MRA,MRB
2002   DE3F 02          
2003   DE40             
2004   DE40 CE E6 32    zbomb_ani		ldx	#lmp_ani_inout-1
2005   DE43             			begin
2005   DE43             
2006   DE43             				begin
2006   DE43             
2007   DE43 08          					inx	
2008   DE44 8C E6 82    					cpx	#lmp_ani_outin
2009   DE47 27 17       					beq	zbomb_ani2
2010   DE49 E6 00       					ldab	$00,X
2011   DE4B 17          					tba	
2012   DE4C 84 7F       					anda	#$7F
2013   DE4E BD F1 E8    					jsr	lamp_on_1
2014   DE51 5D          					tstb	
2015   DE52             				plend
2015   DE52             
2015   DE52             
2015   DE52~            				plend
2015   DE52~            				plend
2015   DE52             
2015   DE52 2B EF       
2015   DE54             
2015   DE54~            				plend
2015   DE54~            				plend
2015   DE54             
2016   DE54 86 0F       				ldaa	#$0F
2017   DE56 BD EC 3B    				jsr	isnd_once
2018   DE59             				SLEEP($02)
2018   DE59 BD E9 7C    
2018   DE5C 02          
2019   DE5D             			loopend
2019   DE5D             
2019   DE5D             
2019   DE5D~            			loopend
2019   DE5D~            			loopend
2019   DE5D             
2019   DE5D 20 E4       
2019   DE5F             
2019   DE5F~            			loopend
2019   DE5F~            			loopend
2019   DE5F             
2020   DE5F             
2021   DE5F 39          lmpanirts		rts	
2022   DE60             
2023   DE60 CE E6 32    zbomb_ani2		ldx	#lmp_ani_inout-1
2024   DE63             			begin
2024   DE63             
2025   DE63             				begin
2025   DE63             
2026   DE63 08          					inx	
2027   DE64 8C E6 82    					cpx	#lmp_ani_outin
2028   DE67 27 F6       					beq	lmpanirts
2029   DE69 E6 00       					ldab	$00,X
2030   DE6B 17          					tba	
2031   DE6C 84 7F       					anda	#$7F
2032   DE6E BD F1 EF    					jsr	lamp_off_1
2033   DE71 5D          					tstb	
2034   DE72             				plend
2034   DE72             
2034   DE72             
2034   DE72~            				plend
2034   DE72~            				plend
2034   DE72             
2034   DE72 2B EF       
2034   DE74             
2034   DE74~            				plend
2034   DE74~            				plend
2034   DE74             
2035   DE74             				SLEEP($02)
2035   DE74 BD E9 7C    
2035   DE77 02          
2036   DE78             			loopend
2036   DE78             
2036   DE78             
2036   DE78~            			loopend
2036   DE78~            			loopend
2036   DE78             
2036   DE78 20 E9       
2036   DE7A             
2036   DE7A~            			loopend
2036   DE7A~            			loopend
2036   DE7A             
2037   DE7A             
2038   DE7A CE E6 32    zbomb_ani3		ldx	#lmp_ani_inout-1
2039   DE7D             			begin
2039   DE7D             
2040   DE7D FF 13 98    				stx	hy_unknown_2
2041   DE80             				begin
2041   DE80             
2042   DE80 08          					inx	
2043   DE81 8C E6 82    					cpx	#lmp_ani_outin
2044   DE84 27 D9       					beq	lmpanirts
2045   DE86 E6 00       					ldab	$00,X
2046   DE88 17          					tba	
2047   DE89 84 7F       					anda	#$7F
2048   DE8B BD F1 E8    					jsr	lamp_on_1
2049   DE8E 5D          					tstb	
2050   DE8F             				plend
2050   DE8F             
2050   DE8F             
2050   DE8F~            				plend
2050   DE8F~            				plend
2050   DE8F             
2050   DE8F 2B EF       
2050   DE91             
2050   DE91~            				plend
2050   DE91~            				plend
2050   DE91             
2051   DE91             				SLEEP($03)
2051   DE91 BD E9 7C    
2051   DE94 03          
2052   DE95 FE 13 98    				ldx	hy_unknown_2
2053   DE98             				begin
2053   DE98             
2054   DE98 08          					inx	
2055   DE99 E6 00       					ldab	$00,X
2056   DE9B 17          					tba	
2057   DE9C 84 7F       					anda	#$7F
2058   DE9E BD F1 EF    					jsr	lamp_off_1
2059   DEA1 5D          					tstb	
2060   DEA2             				plend
2060   DEA2             
2060   DEA2             
2060   DEA2~            				plend
2060   DEA2~            				plend
2060   DEA2             
2060   DEA2 2B F4       
2060   DEA4             
2060   DEA4~            				plend
2060   DEA4~            				plend
2060   DEA4             
2061   DEA4             			loopend
2061   DEA4             
2061   DEA4             
2061   DEA4~            			loopend
2061   DEA4~            			loopend
2061   DEA4             
2061   DEA4 20 D7       
2061   DEA6             
2061   DEA6~            			loopend
2061   DEA6~            			loopend
2061   DEA6             
2062   DEA6             
2063   DEA6 00          			.db $00
2064   DEA7             
2065   DEA7             
2066   DEA7 3F          gameover_entry	swi	
2067   DEA8             			SOL_(ENERGY_FL_OFF,P1_FL_OFF,GI_BB_OFF,GI_PF_OFF,P2_FL_OFF,BALL_LIFT_OFF)	
2067   DEA8 360102030607
2067   DEAE 09
2068   DEAF F8          			 SND_($18)				;Sound #18
2069   DEB0             			RCLR0_($14)				;Effect: Range #14
2069   DEB0             
2069   DEB0 19 14       
2070   DEB2             			RCLR1_($D4,$14)			;Effect: Range #D4 Range #14
2070   DEB2             
2070   DEB2 29 D4 14    
2071   DEB5             			PRI_($10)				;Priority=#10
2071   DEB5 52 10       
2072   DEB7             			CPUX_					;Resume CPU Execution
2072   DEB7 04          
2073   DEB8 CE DF 6F    			ldx	#game_over_thrds
2074   DEBB BD D5 0D    			jsr	addthread_clra
2075   DEBE             			;this is the main display loop for the game over sequence
2076   DEBE 7F 00 E6    			clr	flag_tilt
2077   DEC1 7F 00 22    			clr	bitflags+6
2078   DEC4             			begin
2078   DEC4             
2079   DEC4 CE E5 29    				ldx	#msg_williams
2080   DEC7 8D 45       				bsr	ani_msg_starslide
2081   DEC9             				SLEEP($90)
2081   DEC9 BD E9 7C    
2081   DECC 90          
2082   DECD CE E5 32    				ldx	#msg_electronics
2083   DED0 8D 3C       				bsr	ani_msg_starslide
2084   DED2             				SLEEP($90)
2084   DED2 BD E9 7C    
2084   DED5 90          
2085   DED6 CE E5 3E    				ldx	#msg_presents
2086   DED9 8D 33       				bsr	ani_msg_starslide
2087   DEDB             				SLEEP($70)
2087   DEDB BD E9 7C    
2087   DEDE 70          
2088   DEDF CE E5 47    				ldx	#msg_hyperball
2089   DEE2 5F          				clrb	
2090   DEE3 BD D3 15    				jsr	ani_msg_letters
2091   DEE6 C6 25       				ldab	#$25
2092   DEE8 CE 00 6B    				ldx	#alpha_b0+11
2093   DEEB BD D2 F7    				jsr	ani_spinner
2094   DEEE 7C 00 22    gj_09				inc	bitflags+6
2095   DEF1 BD E2 E7    				jsr	disp_hy_score
2096   DEF4 BD D2 D6    gj_39				jsr	setup_msg_endptr
2097   DEF7 BD D3 49    				jsr	clr_alpha_set_b0
2098   DEFA 97 22       				staa	bitflags+6
2099   DEFC CE E5 51    				ldx	#msg_credit
2100   DEFF BD D3 0B    				jsr	copy_msg_full
2101   DF02 B6 11 9A    				ldaa	current_credits
2102   DF05 BD E6 D4    				jsr	gj_2C
2103   DF08             				SLEEP($E0)
2103   DF08 BD E9 7C    
2103   DF0B E0          
2104   DF0C             			loopend
2104   DF0C             
2104   DF0C             
2104   DF0C~            			loopend
2104   DF0C~            			loopend
2104   DF0C             
2104   DF0C 20 B6       
2104   DF0E             
2104   DF0E~            			loopend
2104   DF0E~            			loopend
2104   DF0E             
2105   DF0E             
2106   DF0E BD D3 0B    ani_msg_starslide	jsr	copy_msg_full
2107   DF11 BD D3 4C    ani_starslide	jsr	clr_alpha_set_b1
2108   DF14 86 04       			ldaa	#$04
2109   DF16 CE 00 6C    			ldx	#alpha_b1
2110   DF19             			begin
2110   DF19             
2111   DF19 8D 1D       				bsr	gb_4F
2112   DF1B BD EA E5    				jsr	hex2bitpos
2113   DF1E 53          				comb	
2114   DF1F D4 7A       				andb	dmask_p3
2115   DF21 D7 7A       				stab	dmask_p3
2116   DF23 08          				inx	
2117   DF24 4A          				deca	
2118   DF25             			miend
2118   DF25             
2118   DF25             
2118   DF25~            			miend
2118   DF25~            			miend
2118   DF25             
2118   DF25 2A F2       
2118   DF27             
2118   DF27~            			miend
2118   DF27~            			miend
2118   DF27             
2119   DF27 86 06       			ldaa	#$06
2120   DF29             			begin
2120   DF29             
2121   DF29 8D 0D       				bsr	gb_4F
2122   DF2B BD EA E5    				jsr	hex2bitpos
2123   DF2E 53          				comb	
2124   DF2F D4 7B       				andb	dmask_p4
2125   DF31 D7 7B       				stab	dmask_p4
2126   DF33 08          				inx	
2127   DF34 4A          				deca	
2128   DF35             			miend
2128   DF35             
2128   DF35             
2128   DF35~            			miend
2128   DF35~            			miend
2128   DF35             
2128   DF35 2A F2       
2128   DF37             
2128   DF37~            			miend
2128   DF37~            			miend
2128   DF37             
2129   DF37 39          			rts	
2130   DF38             			
2131   DF38 36          gb_4F			psha	
2132   DF39 37          			pshb	
2133   DF3A C6 01       			ldab	#$01
2134   DF3C             			begin
2134   DF3C             
2135   DF3C 86 18       				ldaa	#$18
2136   DF3E A7 00       				staa	$00,X
2137   DF40             				SLEEP($02)
2137   DF40 BD E9 7C    
2137   DF43 02          
2138   DF44 86 2B       				ldaa	#$2B
2139   DF46 A7 00       				staa	$00,X
2140   DF48             				SLEEP($02)
2140   DF48 BD E9 7C    
2140   DF4B 02          
2141   DF4C 5A          				decb	
2142   DF4D             			eqend
2142   DF4D             
2142   DF4D             
2142   DF4D~            			eqend
2142   DF4D~            			eqend
2142   DF4D             
2142   DF4D 26 ED       
2142   DF4F             
2142   DF4F~            			eqend
2142   DF4F~            			eqend
2142   DF4F             
2143   DF4F 20 07       			bra	gb_98
2144   DF51             
2145   DF51 36          gj_37			psha	
2146   DF52 37          			pshb	
2147   DF53 8D 06       			bsr	gj_1E
2148   DF55 BD F1 BE    			jsr	lamp_flash
2149   DF58 33          gb_98			pulb	
2150   DF59 32          			pula	
2151   DF5A 39          			rts	
2152   DF5B             
2153   DF5B CE E4 7D    gj_1E			ldx	#gj_1B
2154   DF5E BD EE 8C    			jsr	xplusb
2155   DF61 A6 00       			ldaa	$00,X
2156   DF63 39          			rts	
2157   DF64             
2158   DF64             ;* Takes care of showing the between wave lamp effect and turns off solenoids
2159   DF64 CE DF 74    waveend_ux		ldx	#wvend_lamp_ani
2160   DF67 8D 03       			bsr	to_addthread
2161   DF69 CE E3 5E    			ldx	#sols_off
2162   DF6C 7E D5 0D    to_addthread	jmp	addthread_clra
2163   DF6F             
2164   DF6F             ;******************************************************
2165   DF6F             ;* Launch game over threads, this starts up the threads
2166   DF6F             ;* for displaying the playfield lamps, the z-bomb lamp
2167   DF6F             ;* and the player displays
2168   DF6F             ;******************************************************
2169   DF6F CE E3 34    game_over_thrds	ldx	#ec_animate
2170   DF72 8D F8       			bsr	to_addthread
2171   DF74 CE DF B0    wvend_lamp_ani	ldx	#ec_gover_lamps
2172   DF77 8D F3       			bsr	to_addthread
2173   DF79             			;this is the main playfield lamp display sequence, it repeats indefinitely
2174   DF79             			begin
2174   DF79             
2175   DF79 CE E6 81    				ldx	#lmp_ani_outin-1
2176   DF7C 08          gb_3F				inx	
2177   DF7D 8C E6 D2    				cpx	#disp_wave_num
2178   DF80             				ifne
2178   DF80             
2178   DF80 27 FE       
2179   DF82 A6 00       					ldaa	$00,X
2180   DF84 16          					tab	
2181   DF85 84 7F       					anda	#$7F
2182   DF87 BD F1 91    					jsr	lamp_on
2183   DF8A BD F1 D3    					jsr	lamp_on_b
2184   DF8D 5D          					tstb	
2185   DF8E 2B EC       					bmi	gb_3F
2186   DF90             					SLEEP($05)
2186   DF90 BD E9 7C    
2186   DF93 05          
2187   DF94 20 E6       					bra	gb_3F
2188   DF96             				endif
2188   DF96             
2188   DF96             
2188   DF96             
2188   DF96             
2188   DF96             
2188   DF96~            				endif
2188   DF96~            				endif
2188   DF96             
2188   DF96~            				endif
2188   DF96~            				endif
2188   DF96             
2188   DF81             
2188   DF81 14          
2188   DF82             
2188   DF82             
2188   DF82~            				endif
2188   DF82~            				endif
2188   DF82~            				endif
2188   DF82             
2188   DF96             
2188   DF96~            				endif
2188   DF96~            				endif
2188   DF96             
2189   DF96 CE E6 81    				ldx	#lmp_ani_outin-1
2190   DF99 08          gb_8E				inx	
2191   DF9A 8C E6 D2    				cpx	#disp_wave_num
2192   DF9D             			neend
2192   DF9D             
2192   DF9D             
2192   DF9D~            			neend
2192   DF9D~            			neend
2192   DF9D             
2192   DF9D 27 DA       
2192   DF9F             
2192   DF9F~            			neend
2192   DF9F~            			neend
2192   DF9F             
2193   DF9F A6 00       			ldaa	$00,X
2194   DFA1 16          			tab	
2195   DFA2 84 7F       			anda	#$7F
2196   DFA4 BD F1 B0    			jsr	lamp_off
2197   DFA7 5D          			tstb	
2198   DFA8 2B EF       			bmi	gb_8E
2199   DFAA             			SLEEP($05)
2199   DFAA BD E9 7C    
2199   DFAD 05          
2200   DFAE 20 E9       			bra	gb_8E
2201   DFB0             			
2202   DFB0             ;toggles all EC lamps, forever	
2203   DFB0             ec_gover_lamps	begin
2203   DFB0             
2204   DFB0 86 D4       				ldaa	#$D4
2205   DFB2 BD F2 3D    				jsr	lampm_f
2206   DFB5             				SLEEP($04)
2206   DFB5 BD E9 7C    
2206   DFB8 04          
2207   DFB9             			loopend
2207   DFB9             
2207   DFB9             
2207   DFB9~            			loopend
2207   DFB9~            			loopend
2207   DFB9             
2207   DFB9 20 F5       
2207   DFBB             
2207   DFBB~            			loopend
2207   DFBB~            			loopend
2207   DFBB             
2208   DFBB             			
2209   DFBB             			
2210   DFBB 86 08       			ldaa	#$08
2211   DFBD             			begin
2211   DFBD             
2212   DFBD             				SLEEP($40)
2212   DFBD BD E9 7C    
2212   DFC0 40          
2213   DFC1 4A          				deca	
2214   DFC2             			eqend
2214   DFC2             
2214   DFC2             
2214   DFC2~            			eqend
2214   DFC2~            			eqend
2214   DFC2             
2214   DFC2 26 F9       
2214   DFC4             
2214   DFC4~            			eqend
2214   DFC4~            			eqend
2214   DFC4             
2215   DFC4 86 09       			ldaa	#$09
2216   DFC6 BD EA 83    			jsr	solbuf
2217   DFC9 7E E9 C4    			jmp	killthread
2218   DFCC             
2219   DFCC             ;********************************************
2220   DFCC             ;* Method to take the current alpha display
2221   DFCC             ;* and shift the content out left until the 
2222   DFCC             ;* display is empty
2223   DFCC             ;********************************************
2224   DFCC 5F          shift_out_left   	clrb	
2225   DFCD 86 0C       			ldaa	#$0C				;all 12 digits
2226   DFCF 7E D2 C8    			jmp	gj_20				;always returns zero
2227   DFD2             
2228   DFD2             ;********************************************
2229   DFD2             ;* Show A thousands on the alpha display
2230   DFD2             ;* like: AA,000
2231   DFD2             ;********************************************
2232   DFD2 16          show_thousands	tab	
2233   DFD3 84 0F       			anda	#$0F
2234   DFD5 8B 1B       			adda	#$1B
2235   DFD7 8A 80       			oraa	#$80
2236   DFD9 A7 02       			staa	$02,X
2237   DFDB BD EC 32    			jsr	split_ab
2238   DFDE 4F          			clra	
2239   DFDF 5D          			tstb	
2240   DFE0             			ifne
2240   DFE0             
2240   DFE0 27 FE       
2241   DFE2 CB 1B       				addb	#$1B
2242   DFE4 17          				tba	
2243   DFE5             			endif
2243   DFE5             
2243   DFE5             
2243   DFE5             
2243   DFE5             
2243   DFE5             
2243   DFE5~            			endif
2243   DFE5~            			endif
2243   DFE5             
2243   DFE5~            			endif
2243   DFE5~            			endif
2243   DFE5             
2243   DFE1             
2243   DFE1 03          
2243   DFE2             
2243   DFE2             
2243   DFE2~            			endif
2243   DFE2~            			endif
2243   DFE2~            			endif
2243   DFE2             
2243   DFE5             
2243   DFE5~            			endif
2243   DFE5~            			endif
2243   DFE5             
2244   DFE5 A7 01       show_10thous	staa	$01,X
2245   DFE7 86 1B       			ldaa	#$1B
2246   DFE9 A7 03       			staa	$03,X
2247   DFEB A7 04       			staa	$04,X
2248   DFED A7 05       			staa	$05,X
2249   DFEF 39          			rts	
2250   DFF0             
2251   DFF0             ;**************************************************
2252   DFF0             ;* All Reflex is done in this big thread
2253   DFF0             ;**************************************************
2254   DFF0 CE E5 A5    reflex_thread	ldx	#msg_reflex
2255   DFF3 86 04       			ldaa	#$04
2256   DFF5 97 0A       			staa	game_ram_a
2257   DFF7 BD D2 6D    			jsr	ani_msg_rlslide
2258   DFFA CE E5 74    			ldx	#msg_wave
2259   DFFD BD D2 6D    			jsr	ani_msg_rlslide
2260   E000             			SLEEP($40)
2260   E000 BD E9 7C    
2260   E003 40          
2261   E004 8D C6       			bsr	shift_out_left			;returns zero always
2262   E006 97 0E       			staa	reflx_cur_hits				;cleared
2263   E008 97 0A       			staa	game_ram_a				;cleared
2264   E00A BD D2 D6    reflex_loop		jsr	setup_msg_endptr
2265   E00D 7C 00 0E    			inc	reflx_cur_hits
2266   E010 86 14       			ldaa	#$14					;max number of reflex attempts in wave: 20d
2267   E012 91 0E       			cmpa	reflx_cur_hits
2268   E014             			ifeq
2268   E014             
2268   E014 26 FE       
2269   E016 BD D2 D6    				jsr	setup_msg_endptr			;Reflex wave is over by getting all of them done.
2270   E019 86 10       				ldaa	#$10
2271   E01B BD EC 3B    				jsr	isnd_once				;make sound
2272   E01E 86 01       				ldaa	#$01
2273   E020 97 22       				staa	bitflags+6
2274   E022 CE E5 FD    				ldx	#msg_great_reflex
2275   E025 BD D2 6D    				jsr	ani_msg_rlslide			;Tell the player they are doing well!
2276   E028 8D A2       				bsr	shift_out_left
2277   E02A CE 00 60    				ldx	#alpha_b0				;set X to first position on display
2278   E02D 96 05       				ldaa	current_wave			;which wave are we on?
2279   E02F 81 06       				cmpa	#$06
2280   E031             				ifle						;5th wave reflex
2280   E031             
2280   E031 2E FE       
2281   E033 86 2C       					ldaa	#$2C					;50,000 points
2282   E035 BD EB 3D    					jsr	score_main
2283   E038 86 50       					ldaa	#$50
2284   E03A 8D 96       					bsr	show_thousands
2285   E03C             				else						;10th+ wave reflex
2285   E03C             
2285   E03C             
2285   E03C             
2285   E03C             
2285   E032             
2285   E032             
2285   E032             
2285   E032~            				else						;10th+ wave reflex
2285   E032~            				else						;10th+ wave reflex
2285   E032~            				else						;10th+ wave reflex
2285   E032~            				else						;10th+ wave reflex
2285   E032             
2285   E032~            				else						;10th+ wave reflex
2285   E032~            				else						;10th+ wave reflex
2285   E032~            				else						;10th+ wave reflex
2285   E032~            				else						;10th+ wave reflex
2285   E032             
2285   E032             
2285   E032 0B          
2285   E03C             
2285   E03C 20 FE       
2285   E03E             
2285   E03E             
2285   E03E             
2285   E03E~            				else						;10th+ wave reflex
2285   E03E~            				else						;10th+ wave reflex
2285   E03E~            				else						;10th+ wave reflex
2285   E03E~            				else						;10th+ wave reflex
2285   E03E~            				else						;10th+ wave reflex
2285   E03E             
2285   E03E~            				else						;10th+ wave reflex
2285   E03E~            				else						;10th+ wave reflex
2285   E03E             
2285   E03E~            				else						;10th+ wave reflex
2285   E03E~            				else						;10th+ wave reflex
2285   E03E             
2286   E03E 86 0D       					ldaa	#$0D
2287   E040 BD EB 3D    					jsr	score_main				;100,000 points
2288   E043 86 1C       					ldaa	#$1C
2289   E045 A7 00       					staa	$00,X					;store the 1
2290   E047 86 9B       					ldaa	#$9B
2291   E049 A7 02       					staa	$02,X					;zero with a comma
2292   E04B 86 1B       					ldaa	#$1B
2293   E04D 8D 96       					bsr	show_10thous			;show zero 10 thousands + 100,000
2294   E04F             				endif
2294   E04F             
2294   E04F             
2294   E04F             
2294   E04F             
2294   E04F             
2294   E04F~            				endif
2294   E04F~            				endif
2294   E04F             
2294   E04F~            				endif
2294   E04F~            				endif
2294   E04F             
2294   E03D             
2294   E03D 11          
2294   E03E             
2294   E03E             
2294   E03E~            				endif
2294   E03E~            				endif
2294   E03E~            				endif
2294   E03E             
2294   E04F             
2294   E04F~            				endif
2294   E04F~            				endif
2294   E04F             
2295   E04F CE 00 67    				ldx	#alpha_b0+7
2296   E052 DF B8       				stx	temp1
2297   E054 CE E5 8D    				ldx	#msg_bonus
2298   E057 BD D3 0D    				jsr	copy_msg_part
2299   E05A 3F          to_next_wave		swi	
2300   E05B             				REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
2300   E05B 55 08 00    
2301   E05E             				JSR_(gj_06)				
2301   E05E 56          
2301   E05F D7 0A       
2302   E061             				JSRDR_(waveend_ux)		
2302   E061~            				JSRDR_(waveend_ux)		
2302   E061~            				JSRDR_(waveend_ux)		
2302   E061             
2302   E061~            				JSRDR_(waveend_ux)		
2302   E061~            				JSRDR_(waveend_ux)		
2302   E061             
2302   E061             
2302   E061 AF          
2302   E062 01          
2303   E063 ED          				SND_($0D)				;Sound #0D
2304   E064             				SLEEP_(80)
2304   E064~            				SLEEP_(80)
2304   E064~            				SLEEP_(80)
2304   E064             
2304   E064 53 50       
2304   E066             
2305   E066 5F          				JMP_(setup_next_wave)		
2305   E067 D7 5E       
2306   E069             			endif
2306   E069             
2306   E069             
2306   E069             
2306   E069             
2306   E069             
2306   E069~            			endif
2306   E069~            			endif
2306   E069             
2306   E069~            			endif
2306   E069~            			endif
2306   E069             
2306   E015             
2306   E015 53          
2306   E016             
2306   E016             
2306   E016~            			endif
2306   E016~            			endif
2306   E016~            			endif
2306   E016             
2306   E069             
2306   E069~            			endif
2306   E069~            			endif
2306   E069             
2307   E069 3F          			swi	
2308   E06A             			PRI_($00)				;Priority=#00
2308   E06A 52 00       
2309   E06C             gb_41			SLEEP_(1)
2309   E06C             
2309   E06C 71          
2309   E06D~            gb_41			SLEEP_(1)
2309   E06D~            gb_41			SLEEP_(1)
2309   E06D             
2310   E06D             			JSRD_(get_random)			
2310   E06D 57          
2310   E06E FB 94       
2311   E070             gj_1D			EXE_
2311   E070             
2311   E070 44          
2312   E071 84 1F       				anda	#$1F
2313   E073             			EXEEND_
2313   E073             
2313   E073             
2313   E073             
2313   E073             
2313   E073~            			EXEEND_
2313   E073~            			EXEEND_
2313   E073             
2313   E070             
2313   E070 44          
2313   E071             
2313   E073             
2313   E073~            			EXEEND_
2313   E073~            			EXEEND_
2313   E073             
2314   E073 5AFBFDE016D0			.db $5A,$FB,$FD,$E0,$16,$D0,$2F,$F1	;BEQ_(BIT2#2F || RAM$00>=#22) to gb_41
2314   E079 2FF1
2315   E07B 5B F6 57 02 			.db $5B,$F6,$57,$02		;BNE_RangeON#57 to gb_42
2316   E07F             			RCLR0_($57)				;Effect: Range #57
2316   E07F             
2316   E07F 19 57       
2317   E081             gb_42			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2317   E081             
2317   E081 51 10       
2317   E083~            gb_42			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2317   E083~            gb_42			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2317   E083             
2318   E083 B1 31       			ADDRAM_($01,$31)			;RAM$01+=$31
2319   E085 5B D0 E1 04 			.db $5B,$D0,$E1,$04		;BNE_BIT2#E1 to gb_43
2320   E089 B0 01       			ADDRAM_($00,$01)			;RAM$00+=$01
2321   E08B             			JMPR_(gj_1D)
2321   E08B~            			JMPR_(gj_1D)
2321   E08B~            			JMPR_(gj_1D)
2321   E08B             
2321   E08B~            			JMPR_(gj_1D)
2321   E08B~            			JMPR_(gj_1D)
2321   E08B             
2321   E08B             
2321   E08B 8F          
2321   E08C E3          
2322   E08D             			
2323   E08D             gb_43			BITON4a_($01)			;Turn ON: Lamp#01(lamp_h2)
2323   E08D DC 01       
2324   E08F             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2324   E08F             
2324   E08F 51 10       
2324   E091~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2324   E091~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2324   E091             
2325   E091 B0 49       			ADDRAM_($00,$49)			;RAM$00+=$49
2326   E093             			BITON4a_($00)			;Turn ON: Lamp#00(lamp_h1)
2326   E093 DC 00       
2327   E095 5AFBFCE116FC			.db $5A,$FB,$FC,$E1,$16,$FC,$E1,$08,$04;BEQ_(RAM$01==#8 || RAM$01==#22) to gb_8F
2327   E09B E10804
2328   E09E             			JSRDR_(gj_37)		
2328   E09E~            			JSRDR_(gj_37)		
2328   E09E~            			JSRDR_(gj_37)		
2328   E09E             
2328   E09E~            			JSRDR_(gj_37)		
2328   E09E~            			JSRDR_(gj_37)		
2328   E09E             
2328   E09E             
2328   E09E AE          
2328   E09F B1          
2329   E0A0             			JMPR_(gj_38)
2329   E0A0~            			JMPR_(gj_38)
2329   E0A0~            			JMPR_(gj_38)
2329   E0A0             
2329   E0A0~            			JMPR_(gj_38)
2329   E0A0~            			JMPR_(gj_38)
2329   E0A0             
2329   E0A0             
2329   E0A0 80          
2329   E0A1 0F          
2330   E0A2             			
2331   E0A2 5AFDE10806  gb_8F			.db $5A,$FD,$E1,$08,$06		;BEQ_RAM$01>=#8 to gb_CE
2332   E0A7             			BITFL_($BA,$BB,$3C)		;Flash: Lamp#3A(lamp_e3), Lamp#3B(lamp_e2), Lamp#3C(lamp_e1)
2332   E0A7             
2332   E0A7 13 BA BB 3C 
2333   E0AB             			JMPR_(gj_38)
2333   E0AB~            			JMPR_(gj_38)
2333   E0AB~            			JMPR_(gj_38)
2333   E0AB             
2333   E0AB~            			JMPR_(gj_38)
2333   E0AB~            			JMPR_(gj_38)
2333   E0AB             
2333   E0AB             
2333   E0AB 80          
2333   E0AC 04          
2334   E0AD             			
2335   E0AD             gb_CE			BITFL_($C3,$C4,$45)		;Flash: Bit#03, Bit#04, Bit#05
2335   E0AD             
2335   E0AD 13 C3 C4 45 
2336   E0B1             gj_38			CPUX_					;Resume CPU Execution
2336   E0B1 04          
2337   E0B2 36          			psha	
2338   E0B3 37          			pshb	
2339   E0B4 CE 00 62    			ldx	#alpha_b0+2
2340   E0B7 96 0F       			ldaa	reflx_cur_pts
2341   E0B9 BD DF D2    			jsr	show_thousands
2342   E0BC 33          			pulb	
2343   E0BD 32          			pula	
2344   E0BE             			SLEEP($30)
2344   E0BE BD E9 7C    
2344   E0C1 30          
2345   E0C2 36          			psha	
2346   E0C3 96 0C       			ldaa	game_ram_c
2347   E0C5 97 0D       			staa	reflx_tmr_btr
2348   E0C7             			begin
2348   E0C7             
2349   E0C7 96 0D       				ldaa	reflx_tmr_btr
2350   E0C9 81 04       				cmpa	#$04
2351   E0CB             				ifgte
2351   E0CB             
2351   E0CB 2D FE       
2352   E0CD 7A 00 0D    					dec	reflx_tmr_btr
2353   E0D0             				endif
2353   E0D0             
2353   E0D0             
2353   E0D0             
2353   E0D0             
2353   E0D0             
2353   E0D0~            				endif
2353   E0D0~            				endif
2353   E0D0             
2353   E0D0~            				endif
2353   E0D0~            				endif
2353   E0D0             
2353   E0CC             
2353   E0CC 03          
2353   E0CD             
2353   E0CD             
2353   E0CD~            				endif
2353   E0CD~            				endif
2353   E0CD~            				endif
2353   E0CD             
2353   E0D0             
2353   E0D0~            				endif
2353   E0D0~            				endif
2353   E0D0             
2354   E0D0 97 D5       				staa	thread_timer_byte
2355   E0D2 86 01       				ldaa	#$01
2356   E0D4 BD EC 3B    				jsr	isnd_once
2357   E0D7 BD E9 71    				jsr	delaythread
2358   E0DA 32          				pula	
2359   E0DB BD DD 0F    				jsr	gb_8A
2360   E0DE 27 2F       				beq	gb_E3
2361   E0E0 CE 00 63    				ldx	#alpha_b0+3
2362   E0E3 36          				psha	
2363   E0E4 BD E1 37    				jsr	gj_46
2364   E0E7             			eqend
2364   E0E7             
2364   E0E7             
2364   E0E7~            			eqend
2364   E0E7~            			eqend
2364   E0E7             
2364   E0E7 26 DE       
2364   E0E9             
2364   E0E9~            			eqend
2364   E0E9~            			eqend
2364   E0E9             
2365   E0E9 96 0E       			ldaa	reflx_cur_hits
2366   E0EB 81 05       			cmpa	#$05
2367   E0ED             			ifgt
2367   E0ED             
2367   E0ED 2F FE       
2368   E0EF 32          				pula	
2369   E0F0 86 1E       				ldaa	#$1E
2370   E0F2 97 E6       				staa	flag_tilt			;turn OFF the shooters 
2371   E0F4 BD EC 3B    				jsr	isnd_once
2372   E0F7 BD D2 D6    				jsr	setup_msg_endptr
2373   E0FA 86 01       				ldaa	#$01
2374   E0FC 97 22       				staa	bitflags+6
2375   E0FE CE E5 9A    				ldx	#msg_youmissed
2376   E101 BD D2 6D    				jsr	ani_msg_rlslide
2377   E104 BD DF CC    				jsr	shift_out_left
2378   E107 7E E0 5A    				jmp	to_next_wave
2379   E10A             			endif
2379   E10A             
2379   E10A             
2379   E10A             
2379   E10A             
2379   E10A             
2379   E10A~            			endif
2379   E10A~            			endif
2379   E10A             
2379   E10A~            			endif
2379   E10A~            			endif
2379   E10A             
2379   E0EE             
2379   E0EE 1B          
2379   E0EF             
2379   E0EF             
2379   E0EF~            			endif
2379   E0EF~            			endif
2379   E0EF~            			endif
2379   E0EF             
2379   E10A             
2379   E10A~            			endif
2379   E10A~            			endif
2379   E10A             
2380   E10A 32          			pula	
2381   E10B 8D 46       			bsr	gb_F8
2382   E10D 20 25       			bra	to_reflex_loop
2383   E10F             			
2384   E10F 8D 42       gb_E3			bsr	gb_F8
2385   E111 CE 00 63    			ldx	#alpha_b0+3
2386   E114 BD D8 34    			jsr	gb_D3
2387   E117 BD D3 46    			jsr	gj_0D
2388   E11A 86 06       			ldaa	#$06
2389   E11C             			begin
2389   E11C             
2390   E11C BD D8 53    				jsr	invert_alphamsk
2391   E11F 36          				psha	
2392   E120 86 0E       				ldaa	#$0E
2393   E122 BD EC 3B    				jsr	isnd_once
2394   E125 32          				pula	
2395   E126             				SLEEP($05)
2395   E126 BD E9 7C    
2395   E129 05          
2396   E12A 4A          				deca	
2397   E12B             			eqend
2397   E12B             
2397   E12B             
2397   E12B~            			eqend
2397   E12B~            			eqend
2397   E12B             
2397   E12B 26 EF       
2397   E12D             
2397   E12D~            			eqend
2397   E12D~            			eqend
2397   E12D             
2398   E12D 96 0F       			ldaa	reflx_cur_pts
2399   E12F 8B 01       			adda	#$01
2400   E131 19          			daa	
2401   E132 97 0F       			staa	reflx_cur_pts
2402   E134 7E E0 0A    to_reflex_loop	jmp	reflex_loop
2403   E137             
2404   E137 A6 01       gj_46			ldaa	$01,X
2405   E139 81 9B       			cmpa	#$9B
2406   E13B             			ifne
2406   E13B             
2406   E13B 27 FE       
2407   E13D 4A          				deca	
2408   E13E A7 01       				staa	$01,X
2409   E140             			else
2409   E140             
2409   E140             
2409   E140             
2409   E140             
2409   E13C             
2409   E13C             
2409   E13C             
2409   E13C~            			else
2409   E13C~            			else
2409   E13C~            			else
2409   E13C~            			else
2409   E13C             
2409   E13C~            			else
2409   E13C~            			else
2409   E13C~            			else
2409   E13C~            			else
2409   E13C             
2409   E13C             
2409   E13C 05          
2409   E140             
2409   E140 20 FE       
2409   E142             
2409   E142             
2409   E142             
2409   E142~            			else
2409   E142~            			else
2409   E142~            			else
2409   E142~            			else
2409   E142~            			else
2409   E142             
2409   E142~            			else
2409   E142~            			else
2409   E142             
2409   E142~            			else
2409   E142~            			else
2409   E142             
2410   E142 A6 00       				ldaa	$00,X
2411   E144             				ifne
2411   E144             
2411   E144 27 FE       
2412   E146 4A          					deca	
2413   E147 81 1B       					cmpa	#$1B
2414   E149             					ifeq
2414   E149             
2414   E149 26 FE       
2415   E14B 4F          						clra	
2416   E14C             					endif
2416   E14C             
2416   E14C             
2416   E14C             
2416   E14C             
2416   E14C             
2416   E14C~            					endif
2416   E14C~            					endif
2416   E14C             
2416   E14C~            					endif
2416   E14C~            					endif
2416   E14C             
2416   E14A             
2416   E14A 01          
2416   E14B             
2416   E14B             
2416   E14B~            					endif
2416   E14B~            					endif
2416   E14B~            					endif
2416   E14B             
2416   E14C             
2416   E14C~            					endif
2416   E14C~            					endif
2416   E14C             
2417   E14C A7 00       					staa	$00,X
2418   E14E 86 A4       					ldaa	#$A4
2419   E150 A7 01       					staa	$01,X
2420   E152             				endif
2420   E152             
2420   E152             
2420   E152             
2420   E152             
2420   E152             
2420   E152~            				endif
2420   E152~            				endif
2420   E152             
2420   E152~            				endif
2420   E152~            				endif
2420   E152             
2420   E145             
2420   E145 0C          
2420   E146             
2420   E146             
2420   E146~            				endif
2420   E146~            				endif
2420   E146~            				endif
2420   E146             
2420   E152             
2420   E152~            				endif
2420   E152~            				endif
2420   E152             
2421   E152             			endif
2421   E152             
2421   E152             
2421   E152             
2421   E152             
2421   E152             
2421   E152~            			endif
2421   E152~            			endif
2421   E152             
2421   E152~            			endif
2421   E152~            			endif
2421   E152             
2421   E141             
2421   E141 10          
2421   E142             
2421   E142             
2421   E142~            			endif
2421   E142~            			endif
2421   E142~            			endif
2421   E142             
2421   E152             
2421   E152~            			endif
2421   E152~            			endif
2421   E152             
2422   E152 39          			rts	
2423   E153             
2424   E153 3F          gb_F8			swi	
2425   E154             			BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
2425   E154 DD 00       
2426   E156 5AFBFCE116FC			.db $5A,$FB,$FC,$E1,$16,$FC,$E1,$08,$06;BEQ_(RAM$01==#8 || RAM$01==#22) to gb_44
2426   E15C E10806
2427   E15F             			JSRDR_(gj_1E)		
2427   E15F~            			JSRDR_(gj_1E)		
2427   E15F~            			JSRDR_(gj_1E)		
2427   E15F             
2427   E15F~            			JSRDR_(gj_1E)		
2427   E15F~            			JSRDR_(gj_1E)		
2427   E15F             
2427   E15F             
2427   E15F AD          
2427   E160 FA          
2428   E161             			BITOFFP_($00)			;Turn OFF Lamp/Bit @RAM:00
2428   E161             
2428   E161 15 00       
2429   E163             			JMPR_(gj_1F)
2429   E163~            			JMPR_(gj_1F)
2429   E163~            			JMPR_(gj_1F)
2429   E163             
2429   E163~            			JMPR_(gj_1F)
2429   E163~            			JMPR_(gj_1F)
2429   E163             
2429   E163             
2429   E163 80          
2429   E164 0B          
2430   E165             			
2431   E165 5AFDE10804  gb_44			.db $5A,$FD,$E1,$08,$04		;BEQ_RAM$01>=#8 to gb_90
2432   E16A             			RCLR0_($10)				;Effect: Range #10
2432   E16A             
2432   E16A 19 10       
2433   E16C             			JMPR_(gj_1F)
2433   E16C~            			JMPR_(gj_1F)
2433   E16C~            			JMPR_(gj_1F)
2433   E16C             
2433   E16C~            			JMPR_(gj_1F)
2433   E16C~            			JMPR_(gj_1F)
2433   E16C             
2433   E16C             
2433   E16C 80          
2433   E16D 02          
2434   E16E             			
2435   E16E             gb_90			RCLR0_($11)				;Effect: Range #11
2435   E16E             
2435   E16E 19 11       
2436   E170             gj_1F			CPUX_					;Resume CPU Execution
2436   E170 04          
2437   E171 39          			rts	
2438   E172             
2439   E172 3F          hook_coin		swi	
2440   E173 E6          			SND_($06)				;Sound #06
2441   E174 5AFBFBF0D030			.db $5A,$FB,$FB,$F0,$D0,$30,$F3,$F1,$F3;BEQ_((!GAME) || (BIT2#30 || TILT)) to gj_1F
2441   E17A F3F1F3
2442   E17D             			REMTHREADS_($FF,$10)		;Remove Multiple Threads Based on Priority
2442   E17D 55 FF 10    
2443   E180             			CPUX_					;Resume CPU Execution
2443   E180 04          
2444   E181 86 10       			ldaa	#$10
2445   E183 CE DE F4    			ldx	#gj_39
2446   E186 7E D5 0E    			jmp	newthreadp
2447   E189             
2448   E189 C6 0A       high_score	ldab	#$0A
2449   E18B 7F 00 E6    			clr	flag_tilt
2450   E18E 96 BF       			ldaa	sys_temp2
2451   E190 B7 13 B7    			staa	dynamic_disp_buf+10
2452   E193 97 E7       			staa	flag_gameover
2453   E195             			begin
2453   E195             
2454   E195 B6 D0 5A    				ldaa	gr_hssound
2455   E198 BD EC 3B    				jsr	isnd_once
2456   E19B CE E5 58    				ldx	#msg_player
2457   E19E 37          				pshb	
2458   E19F BD D3 0B    				jsr	copy_msg_full
2459   E1A2 33          				pulb	
2460   E1A3 B6 13 B7    				ldaa	dynamic_disp_buf+10
2461   E1A6 40          				nega	
2462   E1A7 8B 1E       				adda	#$1E
2463   E1A9 DE B8       				ldx	temp1
2464   E1AB A7 01       				staa	$01,X
2465   E1AD             				SLEEP($08)
2465   E1AD BD E9 7C    
2465   E1B0 08          
2466   E1B1 BD D2 D6    				jsr	setup_msg_endptr
2467   E1B4             				SLEEP($08)
2467   E1B4 BD E9 7C    
2467   E1B7 08          
2468   E1B8 5A          				decb	
2469   E1B9             			eqend
2469   E1B9             
2469   E1B9             
2469   E1B9~            			eqend
2469   E1B9~            			eqend
2469   E1B9             
2469   E1B9 26 DA       
2469   E1BB             
2469   E1BB~            			eqend
2469   E1BB~            			eqend
2469   E1BB             
2470   E1BB CE E6 1E    			ldx	#msg_great_score
2471   E1BE BD D3 0B    			jsr	copy_msg_full
2472   E1C1 DE B8       			ldx	temp1
2473   E1C3 C6 10       			ldab	#$10
2474   E1C5 BD D2 F7    			jsr	ani_spinner
2475   E1C8 86 18       			ldaa	#$18
2476   E1CA BD EC 3B    			jsr	isnd_once
2477   E1CD 86 05       			ldaa	#$05
2478   E1CF C6 40       			ldab	#$40
2479   E1D1 E7 00       			stab	$00,X
2480   E1D3 BD D2 C8    			jsr	gj_20
2481   E1D6 CE E6 0A    			ldx	#msg_enter_your
2482   E1D9 BD D2 6D    			jsr	ani_msg_rlslide
2483   E1DC CE E6 15    			ldx	#msg_initials
2484   E1DF BD D2 6D    			jsr	ani_msg_rlslide
2485   E1E2 86 05       			ldaa	#$05
2486   E1E4 C6 40       			ldab	#$40
2487   E1E6 BD D2 C8    			jsr	gj_20
2488   E1E9 BD E6 E8    			jsr	gj_21
2489   E1EC CE 00 60    			ldx	#alpha_b0
2490   E1EF FF 13 A7    			stx	hy_unknown_8
2491   E1F2             gb_48			begin
2491   E1F2             
2492   E1F2 86 2E       				ldaa	#$2E
2493   E1F4 A7 00       				staa	$00,X
2494   E1F6             				begin
2494   E1F6             
2495   E1F6 BD E2 28    					jsr	gj_22
2496   E1F9 A6 00       					ldaa	$00,X
2497   E1FB 81 2D       					cmpa	#$2D
2498   E1FD 26 09       					bne	gb_46
2499   E1FF 6F 00       					clr	$00,X
2500   E201 09          					dex	
2501   E202 A6 00       					ldaa	$00,X
2502   E204             				eqend
2502   E204             
2502   E204             
2502   E204~            				eqend
2502   E204~            				eqend
2502   E204             
2502   E204 26 F0       
2502   E206             
2502   E206~            				eqend
2502   E206~            				eqend
2502   E206             
2503   E206             			loopend
2503   E206             
2503   E206             
2503   E206~            			loopend
2503   E206~            			loopend
2503   E206             
2503   E206 20 EA       
2503   E208             
2503   E208~            			loopend
2503   E208~            			loopend
2503   E208             
2504   E208             
2505   E208 81 2E       gb_46			cmpa	#$2E
2506   E20A             			ifeq
2506   E20A             
2506   E20A 26 FE       
2507   E20C 86 00       				ldaa	#$00
2508   E20E A7 00       				staa	$00,X
2509   E210             			endif
2509   E210             
2509   E210             
2509   E210             
2509   E210             
2509   E210             
2509   E210~            			endif
2509   E210~            			endif
2509   E210             
2509   E210~            			endif
2509   E210~            			endif
2509   E210             
2509   E20B             
2509   E20B 04          
2509   E20C             
2509   E20C             
2509   E20C~            			endif
2509   E20C~            			endif
2509   E20C~            			endif
2509   E20C             
2509   E210             
2509   E210~            			endif
2509   E210~            			endif
2509   E210             
2510   E210 08          			inx	
2511   E211 8C 00 63    			cpx	#alpha_b0+3
2512   E214 26 DC       			bne	gb_48
2513   E216             			begin
2513   E216             
2514   E216 CE 01 2E    				ldx	#aud_game1
2515   E219 DF B8       				stx	temp1
2516   E21B C6 0C       				ldab	#$0C
2517   E21D CE 00 60    				ldx	#alpha_b0
2518   E220 BD EF 23    				jsr	copyblock2
2519   E223 D7 22       				stab	bitflags+6
2520   E225 7E FB 3E    				jmp	set_hstd
2521   E228             	
2522   E228 A6 00       gj_22				ldaa	$00,X
2523   E22A B7 13 B6    				staa	dynamic_disp_buf+9
2524   E22D 86 60       				ldaa	#$60
2525   E22F B7 13 B8    				staa	dynamic_disp_buf+11
2526   E232 86 06       gb_E8				ldaa	#$06
2527   E234 B7 13 B7    				staa	dynamic_disp_buf+10
2528   E237 7A 13 B8    				dec	dynamic_disp_buf+11
2529   E23A 26 06       				bne	gb_94
2530   E23C 31          				ins	
2531   E23D 31          				ins	
2532   E23E 6F 00       				clr	$00,X
2533   E240             			loopend
2533   E240             
2533   E240             
2533   E240~            			loopend
2533   E240~            			loopend
2533   E240             
2533   E240 20 D4       
2533   E242             
2533   E242~            			loopend
2533   E242~            			loopend
2533   E242             
2534   E242             
2535   E242             gb_94			SLEEP($02)
2535   E242 BD E9 7C    
2535   E245 02          
2536   E246 96 80       			ldaa	$80
2537   E248             			ifmi
2537   E248             
2537   E248 2A FE       
2538   E24A BD E2 DF    				jsr	gj_41
2539   E24D             				begin
2539   E24D             
2540   E24D             					SLEEP($02)
2540   E24D BD E9 7C    
2540   E250 02          
2541   E251 96 80       					ldaa	$80
2542   E253             				plend
2542   E253             
2542   E253             
2542   E253~            				plend
2542   E253~            				plend
2542   E253             
2542   E253 2B F8       
2542   E255             
2542   E255~            				plend
2542   E255~            				plend
2542   E255             
2543   E255 39          				rts	
2544   E256             			endif
2544   E256             
2544   E256             
2544   E256             
2544   E256             
2544   E256             
2544   E256~            			endif
2544   E256~            			endif
2544   E256             
2544   E256~            			endif
2544   E256~            			endif
2544   E256             
2544   E249             
2544   E249 0C          
2544   E24A             
2544   E24A             
2544   E24A~            			endif
2544   E24A~            			endif
2544   E24A~            			endif
2544   E24A             
2544   E256             
2544   E256~            			endif
2544   E256~            			endif
2544   E256             
2545   E256 96 81       			ldaa	$81
2546   E258 84 03       			anda	#$03
2547   E25A             			ifeq
2547   E25A             
2547   E25A 26 FE       
2548   E25C 7A 13 B7    				dec	dynamic_disp_buf+10
2549   E25F 26 E1       				bne	gb_94
2550   E261 A6 00       				ldaa	$00,X
2551   E263             				ifne
2551   E263             
2551   E263 27 FE       
2552   E265 6F 00       					clr	$00,X
2553   E267 20 C9       					bra	gb_E8
2554   E269             				endif
2554   E269             
2554   E269             
2554   E269             
2554   E269             
2554   E269             
2554   E269~            				endif
2554   E269~            				endif
2554   E269             
2554   E269~            				endif
2554   E269~            				endif
2554   E269             
2554   E264             
2554   E264 04          
2554   E265             
2554   E265             
2554   E265~            				endif
2554   E265~            				endif
2554   E265~            				endif
2554   E265             
2554   E269             
2554   E269~            				endif
2554   E269~            				endif
2554   E269             
2555   E269 B6 13 B6    				ldaa	dynamic_disp_buf+9
2556   E26C A7 00       				staa	$00,X
2557   E26E 20 C2       				bra	gb_E8
2558   E270             			endif
2558   E270             
2558   E270             
2558   E270             
2558   E270             
2558   E270             
2558   E270~            			endif
2558   E270~            			endif
2558   E270             
2558   E270~            			endif
2558   E270~            			endif
2558   E270             
2558   E25B             
2558   E25B 14          
2558   E25C             
2558   E25C             
2558   E25C~            			endif
2558   E25C~            			endif
2558   E25C~            			endif
2558   E25C             
2558   E270             
2558   E270~            			endif
2558   E270~            			endif
2558   E270             
2559   E270 BD E2 DF    			jsr	gj_41
2560   E273 C6 20       			ldab	#$20
2561   E275 F7 13 B7    			stab	dynamic_disp_buf+10
2562   E278 46          			rora	
2563   E279             			ifcc
2563   E279             
2563   E279 25 FE       
2564   E27B             				begin
2564   E27B             
2565   E27B 8D 2D       					bsr	gb_FE
2566   E27D             gb_FF					SLEEP($01)
2566   E27D BD E9 7C    
2566   E280 01          
2567   E281 96 81       					ldaa	$81
2568   E283 85 02       					bita	#$02
2569   E285 27 A1       					beq	gj_22
2570   E287 7A 13 B7    					dec	dynamic_disp_buf+10
2571   E28A 26 F1       					bne	gb_FF
2572   E28C 86 05       					ldaa	#$05
2573   E28E B7 13 B7    					staa	dynamic_disp_buf+10
2574   E291             				loopend
2574   E291             
2574   E291             
2574   E291~            				loopend
2574   E291~            				loopend
2574   E291             
2574   E291 20 E8       
2574   E293             
2574   E293~            				loopend
2574   E293~            				loopend
2574   E293             
2575   E293             			endif
2575   E293             
2575   E293             
2575   E293             
2575   E293             
2575   E293             
2575   E293~            			endif
2575   E293~            			endif
2575   E293             
2575   E293~            			endif
2575   E293~            			endif
2575   E293             
2575   E27A             
2575   E27A 18          
2575   E27B             
2575   E27B             
2575   E27B~            			endif
2575   E27B~            			endif
2575   E27B~            			endif
2575   E27B             
2575   E293             
2575   E293~            			endif
2575   E293~            			endif
2575   E293             
2576   E293             			begin
2576   E293             
2577   E293 8D 32       				bsr	gb_104
2578   E295             				begin
2578   E295             
2579   E295             					SLEEP($01)
2579   E295 BD E9 7C    
2579   E298 01          
2580   E299 96 81       					ldaa	$81
2581   E29B 46          					rora	
2582   E29C 24 8A       					bcc	gj_22
2583   E29E 7A 13 B7    					dec	dynamic_disp_buf+10
2584   E2A1             				eqend
2584   E2A1             
2584   E2A1             
2584   E2A1~            				eqend
2584   E2A1~            				eqend
2584   E2A1             
2584   E2A1 26 F2       
2584   E2A3             
2584   E2A3~            				eqend
2584   E2A3~            				eqend
2584   E2A3             
2585   E2A3 86 05       				ldaa	#$05
2586   E2A5 B7 13 B7    				staa	dynamic_disp_buf+10
2587   E2A8             			loopend
2587   E2A8             
2587   E2A8             
2587   E2A8~            			loopend
2587   E2A8~            			loopend
2587   E2A8             
2587   E2A8 20 E9       
2587   E2AA             
2587   E2AA~            			loopend
2587   E2AA~            			loopend
2587   E2AA             
2588   E2AA             
2589   E2AA A6 00       gb_FE			ldaa	$00,X
2590   E2AC 4C          			inca	
2591   E2AD 81 2E       			cmpa	#$2E
2592   E2AF             			ifeq
2592   E2AF             
2592   E2AF 26 FE       
2593   E2B1 86 2E       gb_109			ldaa	#$2E
2594   E2B3             			endif
2594   E2B3             
2594   E2B3             
2594   E2B3             
2594   E2B3             
2594   E2B3             
2594   E2B3~            			endif
2594   E2B3~            			endif
2594   E2B3             
2594   E2B3~            			endif
2594   E2B3~            			endif
2594   E2B3             
2594   E2B0             
2594   E2B0 02          
2594   E2B1             
2594   E2B1             
2594   E2B1~            			endif
2594   E2B1~            			endif
2594   E2B1~            			endif
2594   E2B1             
2594   E2B3             
2594   E2B3~            			endif
2594   E2B3~            			endif
2594   E2B3             
2595   E2B3 81 2F       			cmpa	#$2F
2596   E2B5             			ifeq
2596   E2B5             
2596   E2B5 26 FE       
2597   E2B7 86 01       				ldaa	#$01
2598   E2B9             			endif
2598   E2B9             
2598   E2B9             
2598   E2B9             
2598   E2B9             
2598   E2B9             
2598   E2B9~            			endif
2598   E2B9~            			endif
2598   E2B9             
2598   E2B9~            			endif
2598   E2B9~            			endif
2598   E2B9             
2598   E2B6             
2598   E2B6 02          
2598   E2B7             
2598   E2B7             
2598   E2B7~            			endif
2598   E2B7~            			endif
2598   E2B7~            			endif
2598   E2B7             
2598   E2B9             
2598   E2B9~            			endif
2598   E2B9~            			endif
2598   E2B9             
2599   E2B9 81 1B       			cmpa	#$1B
2600   E2BB             			ifeq
2600   E2BB             
2600   E2BB 26 FE       
2601   E2BD 8C 00 60    				cpx	#alpha_b0
2602   E2C0 27 EF       				beq	gb_109
2603   E2C2 86 2D       gb_10D			ldaa	#$2D
2604   E2C4             			endif
2604   E2C4             
2604   E2C4             
2604   E2C4             
2604   E2C4             
2604   E2C4             
2604   E2C4~            			endif
2604   E2C4~            			endif
2604   E2C4             
2604   E2C4~            			endif
2604   E2C4~            			endif
2604   E2C4             
2604   E2BC             
2604   E2BC 07          
2604   E2BD             
2604   E2BD             
2604   E2BD~            			endif
2604   E2BD~            			endif
2604   E2BD~            			endif
2604   E2BD             
2604   E2C4             
2604   E2C4~            			endif
2604   E2C4~            			endif
2604   E2C4             
2605   E2C4             			begin
2605   E2C4             
2606   E2C4 A7 00       				staa	$00,X
2607   E2C6 39          				rts	
2608   E2C7 A6 00       gb_104			ldaa	$00,X
2609   E2C9 4A          				deca	
2610   E2CA             				ifeq
2610   E2CA             
2610   E2CA 26 FE       
2611   E2CC 86 2E       					ldaa	#$2E
2612   E2CE             				endif
2612   E2CE             
2612   E2CE             
2612   E2CE             
2612   E2CE             
2612   E2CE             
2612   E2CE~            				endif
2612   E2CE~            				endif
2612   E2CE             
2612   E2CE~            				endif
2612   E2CE~            				endif
2612   E2CE             
2612   E2CB             
2612   E2CB 02          
2612   E2CC             
2612   E2CC             
2612   E2CC~            				endif
2612   E2CC~            				endif
2612   E2CC~            				endif
2612   E2CC             
2612   E2CE             
2612   E2CE~            				endif
2612   E2CE~            				endif
2612   E2CE             
2613   E2CE 81 2C       				cmpa	#$2C
2614   E2D0             				ifeq
2614   E2D0             
2614   E2D0 26 FE       
2615   E2D2 86 1A       gb_10C				ldaa	#$1A
2616   E2D4             				endif
2616   E2D4             
2616   E2D4             
2616   E2D4             
2616   E2D4             
2616   E2D4             
2616   E2D4~            				endif
2616   E2D4~            				endif
2616   E2D4             
2616   E2D4~            				endif
2616   E2D4~            				endif
2616   E2D4             
2616   E2D1             
2616   E2D1 02          
2616   E2D2             
2616   E2D2             
2616   E2D2~            				endif
2616   E2D2~            				endif
2616   E2D2~            				endif
2616   E2D2             
2616   E2D4             
2616   E2D4~            				endif
2616   E2D4~            				endif
2616   E2D4             
2617   E2D4 81 2D       				cmpa	#$2D
2618   E2D6             			eqend
2618   E2D6             
2618   E2D6             
2618   E2D6~            			eqend
2618   E2D6~            			eqend
2618   E2D6             
2618   E2D6 26 EC       
2618   E2D8             
2618   E2D8~            			eqend
2618   E2D8~            			eqend
2618   E2D8             
2619   E2D8 8C 00 60    			cpx	#alpha_b0
2620   E2DB 27 F5       			beq	gb_10C
2621   E2DD 20 E3       			bra	gb_10D
2622   E2DF             
2623   E2DF 36          gj_41			psha	
2624   E2E0 B6 13 B6    			ldaa	dynamic_disp_buf+9
2625   E2E3 A7 00       			staa	$00,X
2626   E2E5 32          			pula	
2627   E2E6 39          			rts	
2628   E2E7             
2629   E2E7 BD FA B1    disp_hy_score	jsr	show_hstd
2630   E2EA D6 7C       			ldab	comma_flags
2631   E2EC F7 13 B6    			stab	dynamic_disp_buf+9
2632   E2EF 43          			coma	
2633   E2F0 7D 00 54    			tst	score_p1_b1
2634   E2F3             			ifeq
2634   E2F3             
2634   E2F3 26 FE       
2635   E2F5 97 54       				staa	score_p1_b1
2636   E2F7 97 58       				staa	score_p2_b1
2637   E2F9 86 33       				ldaa	#$33
2638   E2FB             			endif
2638   E2FB             
2638   E2FB             
2638   E2FB             
2638   E2FB             
2638   E2FB             
2638   E2FB~            			endif
2638   E2FB~            			endif
2638   E2FB             
2638   E2FB~            			endif
2638   E2FB~            			endif
2638   E2FB             
2638   E2F4             
2638   E2F4 06          
2638   E2F5             
2638   E2F5             
2638   E2F5~            			endif
2638   E2F5~            			endif
2638   E2F5~            			endif
2638   E2F5             
2638   E2FB             
2638   E2FB~            			endif
2638   E2FB~            			endif
2638   E2FB             
2639   E2FB 97 7C       			staa	comma_flags
2640   E2FD 86 7F       			ldaa	#$7F
2641   E2FF BD F9 27    			jsr	clr_dis_masks12
2642   E302 CE E6 2A    			ldx	#msg_hy_score
2643   E305 BD D3 0B    			jsr	copy_msg_full
2644   E308             			SLEEP($30)
2644   E308 BD E9 7C    
2644   E30B 30          
2645   E30C 86 0C       			ldaa	#$0C
2646   E30E B7 13 A9    			staa	hy_unknown_9
2647   E311 CE 13 AA    			ldx	#hy_unknown_a
2648   E314 DF B8       			stx	temp1
2649   E316 CE 01 2E    			ldx	#aud_game1
2650   E319 C6 0C       			ldab	#$0C
2651   E31B BD FF CD    			jsr	block_copy
2652   E31E CE 13 A9    			ldx	#hy_unknown_9
2653   E321 BD D2 B0    			jsr	gb_0E
2654   E324 BD D2 58    			jsr	slide_l
2655   E327             			SLEEP($A0)
2655   E327 BD E9 7C    
2655   E32A A0          
2656   E32B F6 13 B6    			ldab	dynamic_disp_buf+9
2657   E32E D7 7C       			stab	comma_flags
2658   E330 4F          			clra	
2659   E331 7E F9 27    			jmp	clr_dis_masks12
2660   E334             
2661   E334             ;**************************************************
2662   E334             ;* This routine makes the Energy Center lights
2663   E334             ;* sparkle by using two overlapping patterns
2664   E334             ;**************************************************
2665   E334 CE 55 01    ec_animate		ldx	#$5501
2666   E337 DF 32       			stx	lampbufferselectx+2
2667   E339 86 80       			ldaa	#$80
2668   E33B D6 EB       			ldab	player_up
2669   E33D             			ifne
2669   E33D             
2669   E33D 27 FE       
2670   E33F 44          				lsra	
2671   E340             			endif
2671   E340             
2671   E340             
2671   E340             
2671   E340             
2671   E340             
2671   E340~            			endif
2671   E340~            			endif
2671   E340             
2671   E340~            			endif
2671   E340~            			endif
2671   E340             
2671   E33E             
2671   E33E 01          
2671   E33F             
2671   E33F             
2671   E33F~            			endif
2671   E33F~            			endif
2671   E33F~            			endif
2671   E33F             
2671   E340             
2671   E340~            			endif
2671   E340~            			endif
2671   E340             
2672   E340 97 31       			staa	lampbufferselectx+1
2673   E342 CE E3 58    			ldx	#ec_rotator
2674   E345 BD D5 0D    			jsr	addthread_clra
2675   E348 3F          			swi	
2676   E349 5B F1 05    			.db $5B,$F1,$05			;BNE_GAME to gb_4A
2677   E34C             			RSET0_($0A)				;Effect: Range #0A
2677   E34C             
2677   E34C 18 0A       
2678   E34E             			RCLR1L0_($8A,$0A)			;Effect: Range #8A Range #0A
2678   E34E             
2678   E34E 1C 8A 0A    
2679   E351             gb_4A			RCLR1_($0A)				;Effect: Range #0A
2679   E351             
2679   E351 29 0A       
2680   E353             gj_24			SLEEP_(5)
2680   E353             
2680   E353 75          
2680   E354~            gj_24			SLEEP_(5)
2680   E354~            gj_24			SLEEP_(5)
2680   E354             
2681   E354             			RINV1_($4A)				;Effect: Range #4A
2681   E354             
2681   E354 2F 4A       
2682   E356             			JMPR_(gj_24)
2682   E356~            			JMPR_(gj_24)
2682   E356~            			JMPR_(gj_24)
2682   E356             
2682   E356~            			JMPR_(gj_24)
2682   E356~            			JMPR_(gj_24)
2682   E356             
2682   E356             
2682   E356 8F          
2682   E357 FB          
2683   E358             			
2684   E358             ;* This routine rotates the EC lamps in the animation sequence			
2685   E358 3F          ec_rotator		swi	
2686   E359 62          gj_25			SLEEPI_($2)				;Delay RAM$02
2687   E35A             			RROR0_($0A)				;Effect: Range #0A
2687   E35A             
2687   E35A 1E 0A       
2688   E35C             			JMPR_(gj_25)
2688   E35C~            			JMPR_(gj_25)
2688   E35C~            			JMPR_(gj_25)
2688   E35C             
2688   E35C~            			JMPR_(gj_25)
2688   E35C~            			JMPR_(gj_25)
2688   E35C             
2688   E35C             
2688   E35C 8F          
2688   E35D FB          
2689   E35E             
2690   E35E             
2691   E35E             ;* Turns off all solenoids			
2692   E35E             sols_off		begin
2692   E35E             
2693   E35E 86 40       				ldaa	#$40
2694   E360 BD EA 83    				jsr	solbuf
2695   E363             				SLEEP($0A)
2695   E363 BD E9 7C    
2695   E366 0A          
2696   E367             			loopend
2696   E367             
2696   E367             
2696   E367~            			loopend
2696   E367~            			loopend
2696   E367             
2696   E367 20 F5       
2696   E369             
2696   E369~            			loopend
2696   E369~            			loopend
2696   E369             
2697   E369             
2698   E369             
2699   E369 00 5F       lamptable		.db $00 ,$5F	;(00) lamp_h1 -- lamp_uu6
2700   E36B 00 05       			.db $00 ,$05	;(01) lamp_h1 -- lamp_h6
2701   E36D 06 0B       			.db $06 ,$0B	;(02) lamp_i1 -- lamp_i6
2702   E36F 0C 11       			.db $0C ,$11	;(03) lamp_j1 -- lamp_j6
2703   E371 12 17       			.db $12 ,$17	;(04) lamp_k1 -- lamp_k6
2704   E373 18 1D       			.db $18 ,$1D	;(05) lamp_l1 -- lamp_l6
2705   E375 1E 23       			.db $1E ,$23	;(06) lamp_m1 -- lamp_m6
2706   E377 24 29       			.db $24 ,$29	;(07) lamp_n1 -- lamp_n6
2707   E379 2A 2F       			.db $2A ,$2F	;(08) lamp_o1 -- lamp_o6
2708   E37B 30 35       			.db $30 ,$35	;(09) lamp_p1 -- lamp_p6
2709   E37D 50 59       			.db $50 ,$59	;(0A) lamp_ec1 -- lamp_ec10
2710   E37F 48 4A       			.db $48 ,$4A	;(0B) lamp_p1b1 -- lamp_p1b3
2711   E381 4B 4D       			.db $4B ,$4D	;(0C) lamp_p2b1 -- lamp_p2b3
2712   E383 31 39       			.db $31 ,$39	;(0D) lamp_p2 -- lamp_d
2713   E385 3A 47       			.db $3A ,$47	;(0E) lamp_e3 -- lamp_r
2714   E387 49 5F       			.db $49 ,$5F	;(0F) lamp_p1b2 -- lamp_uu6
2715   E389 3A 3C       			.db $3A ,$3C	;(10) lamp_e3 -- lamp_e1
2716   E38B 43 45       			.db $43 ,$45	;(11) lamp_t1 -- lamp_t3
2717   E38D 00 47       			.db $00 ,$47	;(12) lamp_h1 -- lamp_r
2718   E38F 01 09       			.db $01 ,$09	;(13) lamp_h2 -- lamp_i4
2719   E391 00 4F       			.db $00 ,$4F	;(14) lamp_h1 -- lamp_p2
2720   E393 36 3E       			.db $36 ,$3E	;(15) lamp_a -- lamp_g
2721   E395 3F 47       			.db $3F ,$47	;(16) lamp_y -- lamp_r
2722   E397 31 47       			.db $31 ,$47	;(17) lamp_p2 -- lamp_r
2723   E399             
2724   E399             
2725   E399 22 30 3C    soundtable		.db $22, $30,	$3C		;(00) 
2726   E39C 23 10 3B    			.db $23, $10,	$3B		;(01) 
2727   E39F 22 20 3A    			.db $22, $20,	$3A		;(02) 
2728   E3A2 E3 FB       			.dw c_sound1\	.db $FF	;(03) 
2728   E3A4 FF          
2729   E3A5 E3 F6       			.dw c_sound2\	.db $FF	;(04) 
2729   E3A7 FF          
2730   E3A8 E4 06       			.dw c_sound3\	.db $FF	;(05) 
2730   E3AA FF          
2731   E3AB 22 30 36    			.db $22, $30,	$36		;(06) 
2732   E3AE 22 20 35    			.db $22, $20,	$35		;(07) 
2733   E3B1 22 20 34    			.db $22, $20,	$34		;(08) 
2734   E3B4 E4 01       			.dw c_sound4\	.db $FF	;(09) 
2734   E3B6 FF          
2735   E3B7 22 20 30    			.db $22, $20,	$30		;(0A) 
2736   E3BA 22 20 2F    			.db $22, $20,	$2F		;(0B) 
2737   E3BD 22 20 2E    			.db $22, $20,	$2E		;(0C) 
2738   E3C0 22 20 2D    			.db $22, $20,	$2D		;(0D) 
2739   E3C3 22 20 2C    			.db $22, $20,	$2C		;(0E) 
2740   E3C6 22 20 2B    			.db $22, $20,	$2B		;(0F) 
2741   E3C9 83 50 2A    			.db $83, $50,	$2A		;(10) 
2742   E3CC 22 20 29    			.db $22, $20,	$29		;(11) 
2743   E3CF 83 40 32    			.db $83, $40,	$32		;(12) 
2744   E3D2 22 20 28    			.db $22, $20,	$28		;(13) 
2745   E3D5 22 20 27    			.db $22, $20,	$27		;(14) 
2746   E3D8 23 20 3D    			.db $23, $20,	$3D		;(15) 
2747   E3DB 22 20 26    			.db $22, $20,	$26		;(16) 
2748   E3DE 22 20 25    			.db $22, $20,	$25		;(17) 
2749   E3E1 24 20 3E    			.db $24, $20,	$3E		;(18) 
2750   E3E4 22 20 24    			.db $22, $20,	$24		;(19) 
2751   E3E7 22 20 23    			.db $22, $20,	$23		;(1A) 
2752   E3EA 22 20 22    			.db $22, $20,	$22		;(1B) 
2753   E3ED 22 20 31    			.db $22, $20,	$31		;(1C) 
2754   E3F0 22 20 21    			.db $22, $20,	$21		;(1D) 
2755   E3F3 23 30 20    			.db $23, $30,	$20		;(1E) 
2756   E3F6             
2757   E3F6 2192383E3F  c_sound2		.db $21,$92,$38,$3E,$3F
2758   E3FB             
2759   E3FB 26F52EC02D3Fc_sound1		.db $26,$F5,$2E,$C0,$2D,$3F
2760   E401             
2761   E401 26FF372D3F  c_sound4		.db $26,$FF,$37,$2D,$3F
2762   E406             
2763   E406 26FF242D3F  c_sound3		.db $26,$FF,$24,$2D,$3F
2764   E40B             
2765   E40B             
2766   E40B 93          switchtable		.db %10010011	\.dw sw_plumbtilt		;(1) plumbtilt
2766   E40C D3 5A       
2767   E40E 71          			.db %01110001	\.dw sw_2p_start		;(2) 2p_start
2767   E40F D1 3F       
2768   E411 71          			.db %01110001	\.dw sw_1p_start		;(3) 1p_start
2768   E412 D1 3E       
2769   E414 F2          			.db %11110010	\.dw coin_accepted	;(4) coin_r
2769   E415 F8 0A       
2770   E417 F2          			.db %11110010	\.dw coin_accepted	;(5) coin_c
2770   E418 F8 0A       
2771   E41A F2          			.db %11110010	\.dw coin_accepted	;(6) coin_l
2771   E41B F8 0A       
2772   E41D 71          			.db %01110001	\.dw reset			;(7) slam
2772   E41E E7 30       
2773   E420 71          			.db %01110001	\.dw sw_hstd_res		;(8) hstd_res
2773   E421 D1 1B       
2774   E423 11          			.db %00010001	\.dw sw_A			;(9) A
2774   E424 D7 C7       
2775   E426 11          			.db %00010001	\.dw sw_B			;(10) B
2775   E427 D7 C7       
2776   E429 11          			.db %00010001	\.dw sw_C			;(11) C
2776   E42A D7 C7       
2777   E42C 11          			.db %00010001	\.dw sw_D			;(12) D
2777   E42D D7 C7       
2778   E42F 11          			.db %00010001	\.dw sw_Y			;(13) Y
2778   E430 D7 C7       
2779   E432 11          			.db %00010001	\.dw sw_W			;(14) W
2779   E433 D7 C7       
2780   E435 11          			.db %00010001	\.dw sw_V			;(15) V
2780   E436 D7 C7       
2781   E438 11          			.db %00010001	\.dw sw_U			;(16) U
2781   E439 D7 C7       
2782   E43B 91          			.db %10010001	\.dw sw_E			;(17) E
2782   E43C D7 94       
2783   E43E 11          			.db %00010001	\.dw sw_F			;(18) F
2783   E43F D7 9E       
2784   E441 11          			.db %00010001	\.dw sw_G			;(19) G
2784   E442 D7 A2       
2785   E444 8F          			.db %10001111	\.dw sw_H			;(20) H
2785   E445 D7 28       
2786   E447 8F          			.db %10001111	\.dw sw_I			;(21) I
2786   E448 D7 28       
2787   E44A 8F          			.db %10001111	\.dw sw_J			;(22) J
2787   E44B D7 28       
2788   E44D 8F          			.db %10001111	\.dw sw_K			;(23) K
2788   E44E D7 28       
2789   E450 8F          			.db %10001111	\.dw sw_L			;(24) L
2789   E451 D7 28       
2790   E453 8F          			.db %10001111	\.dw sw_M			;(25) M
2790   E454 D7 28       
2791   E456 8F          			.db %10001111	\.dw sw_N			;(26) N
2791   E457 D7 28       
2792   E459 8F          			.db %10001111	\.dw sw_O			;(27) O
2792   E45A D7 28       
2793   E45C 8F          			.db %10001111	\.dw sw_P			;(28) P
2793   E45D D7 28       
2794   E45F 11          			.db %00010001	\.dw sw_R			;(29) R
2794   E460 D7 C3       
2795   E462 11          			.db %00010001	\.dw sw_S			;(30) S
2795   E463 D7 BF       
2796   E465 91          			.db %10010001	\.dw sw_T			;(31) T
2796   E466 D7 8A       
2797   E468 B3          			.db %10110011	\.dw sw_z_bomb		;(32) z_bomb
2797   E469 DD 9B       
2798   E46B 94          			.db %10010100	\.dw sw_l_shooter		;(33) l_shooter
2798   E46C D5 47       
2799   E46E 94          			.db %10010100	\.dw sw_r_shooter		;(34) r_shooter
2799   E46F D5 47       
2800   E471             switchtable_end
2801   E471             
2802   E471             
2803   E471             LAMP_A	.equ	$36
2804   E471             LAMP_B	.equ	$37
2805   E471             LAMP_C	.equ	$38
2806   E471             LAMP_D	.equ	$39
2807   E471             LAMP_F	.equ	$3D
2808   E471             LAMP_G	.equ	$3E
2809   E471             LAMP_H	.equ	$00
2810   E471             LAMP_I	.equ	$06
2811   E471             LAMP_J	.equ	$0C
2812   E471             LAMP_K	.equ	$12
2813   E471             LAMP_L	.equ	$18
2814   E471             LAMP_M	.equ	$1E
2815   E471             LAMP_N	.equ	$24
2816   E471             LAMP_O	.equ	$2A
2817   E471             LAMP_P	.equ	$30
2818   E471             LAMP_R	.equ	$47
2819   E471             LAMP_S	.equ	$46
2820   E471             LAMP_T	.equ	$43
2821   E471             LAMP_U	.equ	$42
2822   E471             LAMP_V	.equ	$41
2823   E471             LAMP_W	.equ	$40
2824   E471             LAMP_Y	.equ	$3F
2825   E471             
2826   E471             
2827   E471 3D 3E       gj_12			.db $3D,$3E
2828   E473             
2829   E473 363738393F40gj_02			.db LAMP_A,LAMP_B,LAMP_C,LAMP_D,LAMP_Y,LAMP_W,LAMP_V,LAMP_U,LAMP_S,LAMP_R
2829   E479 41424647
2830   E47D             
2831   E47D 363738393F40gj_1B			.db LAMP_A,LAMP_B,LAMP_C,LAMP_D,LAMP_Y,LAMP_W,LAMP_V,LAMP_U,$00,LAMP_F,LAMP_G,$00
2831   E483 4142003D3E00
2832   E489 060C12181E24			.db LAMP_I,LAMP_J,LAMP_K,LAMP_L,LAMP_M,LAMP_N,LAMP_O,LAMP_P,LAMP_R,LAMP_S,$00
2832   E48F 2A30474600
2833   E494             
2834   E494 060701020304gj_2D			.db $06,$07,$01,$02,$03,$04,$19,$17,$16,$15,$13,$12,$05,$14
2834   E49A 1917161513120514
2835   E4A2             
2836   E4A2 0C 0F 13 15 wave_bolt_cnt	.db $0C,$0F,$13,$15
2837   E4A6             
2838   E4A6             
2839   E4A6 E5 93       random_words	.dw msg_energy
2840   E4A8 E5 8D       			.dw msg_bonus
2841   E4AA E5 C2       			.dw msg_hyper
2842   E4AC E5 DD       			.dw msg_cannon
2843   E4AE E5 EA       			.dw msg_laser
2844   E4B0 E5 E4       			.dw msg_alien
2845   E4B2 E5 F0       			.dw msg_ray
2846   E4B4             
2847   E4B4             ;switch to lamp map table, switches are contiguous in index to this table, the data is the lamp offset to the 
2848   E4B4             ;top lamp in the series (if any)
2849   E4B4 010203041917sw_to_lamp_map			.db $01,$02,$03,$04,$19,$17,$16,$15,$05,$06,$07,$08,$09,$0A,$0B,$0C
2849   E4BA 161505060708090A0B0C
2850   E4C4 0D0E0F101213			.db $0D,$0E,$0F,$10,$12,$13,$14
2850   E4CA 14
2851   E4CB             
2852   E4CB             
2853   E4CB             
2854   E4CB 00 00       character_defs	.dw $0000	;SPACE (00)
2855   E4CD 37 06       			.dw $3706	;A (01)
2856   E4CF 8F 14       			.dw $8F14	;B (02)
2857   E4D1 39 00       			.dw $3900	;C (03)
2858   E4D3 8F 10       			.dw $8F10	;D (04)
2859   E4D5 39 02       			.dw $3902	;E (05)
2860   E4D7 31 02       			.dw $3102	;F (06)
2861   E4D9 3D 04       			.dw $3D04	;G (07)
2862   E4DB 36 06       			.dw $3606	;H (08)
2863   E4DD 89 10       			.dw $8910	;I (09)
2864   E4DF 1E 00       			.dw $1E00	;J (0A)
2865   E4E1 30 23       			.dw $3023	;K (0B)
2866   E4E3 38 00       			.dw $3800	;L (0C)
2867   E4E5 76 01       			.dw $7601	;M (0D)
2868   E4E7 76 20       			.dw $7620	;N (0E)
2869   E4E9 3F 00       			.dw $3F00	;O (0F)
2870   E4EB 33 06       			.dw $3306	;P (10)
2871   E4ED 3F 20       			.dw $3F20	;Q (11)
2872   E4EF 33 26       			.dw $3326	;R (12)
2873   E4F1 2D 06       			.dw $2D06	;S (13)
2874   E4F3 81 10       			.dw $8110	;T (14)
2875   E4F5 3E 00       			.dw $3E00	;U (15)
2876   E4F7 30 09       			.dw $3009	;V (16)
2877   E4F9 36 28       			.dw $3628	;W (17)
2878   E4FB 40 29       			.dw $4029	;X (18)
2879   E4FD 22 16       			.dw $2216	;Y (19)
2880   E4FF 09 09       			.dw $0909	;Z (1A)
2881   E501 3F 09       			.dw $3F09	;0 (1B)
2882   E503 80 10       			.dw $8010	;1 (1C)
2883   E505 0B 0C       			.dw $0B0C	;2 (1D)
2884   E507 0D 05       			.dw $0D05	;3 (1E)
2885   E509 26 06       			.dw $2606	;4 (1F)
2886   E50B 29 22       			.dw $2922	;5 (20)
2887   E50D 3D 06       			.dw $3D06	;6 (21)
2888   E50F 07 00       			.dw $0700	;7 (22)
2889   E511 3F 06       			.dw $3F06	;8 (23)
2890   E513 2F 06       			.dw $2F06	;9 (24)
2891   E515 82 00       			.dw $8200	;quot (25)
2892   E517 00 06       			.dw $0006	;- (26)
2893   E519 40 20       			.dw $4020	;\ (27)
2894   E51B 80 10       			.dw $8010	;| (28)
2895   E51D 00 09       			.dw $0009	;/ (29)
2896   E51F BB 04       			.dw $BB04	;@ (2A)
2897   E521 80 16       			.dw $8016	;+ (2B)
2898   E523 C0 3F       			.dw $C03F	;  (2C)
2899   E525 00 25       			.dw $0025	;<- (2D)
2900   E527 08 00       			.dw $0800	;_ (2E)
2901   E529             
2902   E529 2817090C0C09msg_williams	.db $28,$17,$09,$0C,$0C,$09,$01,$0D,$13
2902   E52F 010D13
2903   E532             
2904   E532 0B050C050314msg_electronics	.db $0B,$05,$0C,$05,$03,$14,$12,$0F,$0E,$09,$03,$13
2904   E538 120F0E090313
2905   E53E             
2906   E53E 281012051305msg_presents	.db $28,$10,$12,$05,$13,$05,$0E,$14,$13
2906   E544 0E1413
2907   E547             
2908   E547 190819100512msg_hyperball	.db $19,$08,$19,$10,$05,$12,$02,$01,$0C,$0C
2908   E54D 02010C0C
2909   E551             
2910   E551 160312050409msg_credit		.db $16,$03,$12,$05,$04,$09,$14
2910   E557 14
2911   E558             
2912   E558 26100C011905msg_player		.db $26,$10,$0C,$01,$19,$05,$12
2912   E55E 12
2913   E55F             
2914   E55F 050007010D05msg_game		.db $05,$00,$07,$01,$0D,$05
2915   E565             
2916   E565 050F16051200msg_over		.db $05,$0F,$16,$05,$12,$00
2917   E56B             
2918   E56B 280312091409msg_critical	.db $28,$03,$12,$09,$14,$09,$03,$01,$0C
2918   E571 03010C
2919   E574             
2920   E574 2417011605  msg_wave		.db $24,$17,$01,$16,$05
2921   E579             
2922   E579 19030F0D100Cmsg_completed	.db $19,$03,$0F,$0D,$10,$0C,$05,$14,$05,$04
2922   E57F 05140504
2923   E583             
2924   E583 192C00131005msg_spell		.db $19,$2C,$00,$13,$10,$05,$0C,$0C,$00,$2C
2924   E589 0C0C002C
2925   E58D             
2926   E58D 05020F0E1513msg_bonus		.db $05,$02,$0F,$0E,$15,$13
2927   E593             
2928   E593 06050E051207msg_energy		.db $06,$05,$0E,$05,$12,$07,$19
2928   E599 19
2929   E59A             
2930   E59A 0A190F15000Dmsg_youmissed	.db $0A,$19,$0F,$15,$00,$0D,$09,$13,$13,$05,$04
2930   E5A0 0913130504
2931   E5A5             
2932   E5A5 061205060C05msg_reflex		.db $06,$12,$05,$06,$0C,$05,$18
2932   E5AB 18
2933   E5AC             
2934   E5AC 03 08 09 14 msg_hit		.db $03,$08,$09,$14
2935   E5B0             
2936   E5B0 151E26455500msg_3eu		.db $15,$1E,$26,$45,$55,$00
2937   E5B6             
2938   E5B6 151E265A4200msg_3zb		.db $15,$1E,$26,$5A,$42,$00
2939   E5BC             
2940   E5BC 05249B1B1B1Bmsg_zeros		.db $05,$24,$9B,$1B,$1B,$1B
2941   E5C2             
2942   E5C2 050819100512msg_hyper		.db $05,$08,$19,$10,$05,$12
2943   E5C8             
2944   E5C8 070526150E09msg_enuit		.db $07,$05,$26,$15,$0E,$09,$14,$00
2944   E5CE 1400
2945   E5D0             
2946   E5D0 0C2C00131312msg_ssr_ejs		.db $0C,$2C,$00,$13,$13,$12,$00,$00,$05,$0A,$13,$00,$2C
2946   E5D6 0000050A13002C
2947   E5DD             
2948   E5DD 0603010E0E0Fmsg_cannon		.db $06,$03,$01,$0E,$0E,$0F,$0E
2948   E5E3 0E
2949   E5E4             
2950   E5E4 05010C09050Emsg_alien		.db $05,$01,$0C,$09,$05,$0E
2951   E5EA             
2952   E5EA 050C01130512msg_laser		.db $05,$0C,$01,$13,$05,$12
2953   E5F0             
2954   E5F0 03 12 01 19 msg_ray		.db $03,$12,$01,$19
2955   E5F4             
2956   E5F4 282C0014090Cmsg_tilt		.db $28,$2C,$00,$14,$09,$0C,$14,$00,$2C
2956   E5FA 14002C
2957   E5FD             
2958   E5FD 0C0712050114msg_great_reflex	.db $0C,$07,$12,$05,$01,$14,$00,$12,$05,$06,$0C,$05,$18
2958   E603 001205060C0518
2959   E60A             
2960   E60A 0A050E140512msg_enter_your	.db $0A,$05,$0E,$14,$05,$12,$00,$19,$0F,$15,$12
2960   E610 00190F1512
2961   E615             
2962   E615 08090E091409msg_initials	.db $08,$09,$0E,$09,$14,$09,$01,$0C,$13
2962   E61B 010C13
2963   E61E             
2964   E61E 0B0712050114msg_great_score	.db $0B,$07,$12,$05,$01,$14,$00,$13,$03,$0F,$12,$05
2964   E624 0013030F1205
2965   E62A             
2966   E62A 280819001303msg_hy_score	.db $28,$08,$19,$00,$13,$03,$0F,$12
2966   E630 0F12
2967   E632             
2968   E632 05          lmp_ani_inout-1	.db $05
2969   E633             
2970   E633 1B9521A7A29Clmp_ani_inout	.db $1B,$95,$21,$A7,$A2,$9C,$96,$8F,$1A,$A0,$AD,$A8,$90,$89,$14,$A6
2970   E639 968F1AA0ADA8908914A6
2971   E643 B3AE8A830EAC			.db $B3,$AE,$8A,$83,$0E,$AC,$A9,$A3,$9D,$97,$91,$84,$B4,$08,$B2,$B5
2971   E649 A9A39D979184B408B2B5
2972   E653 AF8B8502CECF			.db $AF,$8B,$85,$02,$CE,$CF,$C8,$CB,$93,$99,$1F,$CD,$CC,$C9,$CA,$81
2972   E659 C8CB93991FCDCCC9CA81
2973   E663 878DA5AB31C7			.db $87,$8D,$A5,$AB,$31,$C7,$C3,$C2,$BA,$B9,$3E,$C6,$C4,$C1,$B8,$BB
2973   E669 C3C2BAB93EC6C4C1B8BB
2974   E673 BD92981EA4AA			.db $BD,$92,$98,$1E,$A4,$AA,$B0,$C5,$BF,$B6,$B7,$BC,$80,$86
2974   E679 B0C5BFB6B7BC8086
2975   E681             
2976   E681 0C          lmp_ani_outin-1	.db $0C
2977   E682             
2978   E682 B63FB740B8C1lmp_ani_outin	.db $B6,$3F,$B7,$40,$B8,$C1,$CA,$4D,$C9,$CC,$85,$8B,$91,$97,$9D,$A3
2978   E688 CA4DC9CC858B91979DA3
2979   E692 A9AF35C8CB84			.db $A9,$AF,$35,$C8,$CB,$84,$8A,$90,$96,$9C,$A2,$A8,$AE,$34,$C2,$CF
2979   E698 8A90969CA2A8AE34C2CF
2980   E6A2 B94E83898F95			.db $B9,$4E,$83,$89,$8F,$95,$9B,$A1,$A7,$AD,$33,$BA,$C3,$82,$88,$8E
2980   E6A8 9BA1A7AD33BAC382888E
2981   E6B2 949AA0A6AC32			.db $94,$9A,$A0,$A6,$AC,$32,$BB,$44,$C6,$C7,$BC,$81,$87,$8D,$93,$99
2981   E6B8 BB44C6C7BC81878D9399
2982   E6C2 9FA5AB31BDC5			.db $9F,$A5,$AB,$31,$BD,$C5,$3E,$80,$86,$8C,$92,$98,$9E,$A4,$AA,$30
2982   E6C8 3E80868C92989EA4AA30
2983   E6D2             
2984   E6D2             
2985   E6D2 96 05       disp_wave_num	ldaa	current_wave
2986   E6D4 16          gj_2C			tab	
2987   E6D5 84 0F       			anda	#$0F
2988   E6D7 8B 1B       			adda	#$1B
2989   E6D9 DE B8       			ldx	temp1
2990   E6DB A7 02       			staa	$02,X
2991   E6DD BD EC 32    			jsr	split_ab
2992   E6E0 5D          			tstb	
2993   E6E1             			ifne
2993   E6E1             
2993   E6E1 27 FE       
2994   E6E3 CB 1B       				addb	#$1B
2995   E6E5             			endif
2995   E6E5             
2995   E6E5             
2995   E6E5             
2995   E6E5             
2995   E6E5             
2995   E6E5~            			endif
2995   E6E5~            			endif
2995   E6E5             
2995   E6E5~            			endif
2995   E6E5~            			endif
2995   E6E5             
2995   E6E2             
2995   E6E2 02          
2995   E6E3             
2995   E6E3             
2995   E6E3~            			endif
2995   E6E3~            			endif
2995   E6E3~            			endif
2995   E6E3             
2995   E6E5             
2995   E6E5~            			endif
2995   E6E5~            			endif
2995   E6E5             
2996   E6E5 E7 01       			stab	$01,X
2997   E6E7 39          			rts	
2998   E6E8             
2999   E6E8 CE 13 A7    gj_21			ldx	#hy_unknown_8
3000   E6EB DF B8       			stx	temp1
3001   E6ED 8D E3       			bsr	disp_wave_num
3002   E6EF 86 08       			ldaa	#$08
3003   E6F1 A7 00       			staa	$00,X
3004   E6F3 86 13       			ldaa	#$13
3005   E6F5 A7 08       			staa	$08,X
3006   E6F7 6F 03       			clr	$03,X
3007   E6F9 CE 13 AB    			ldx	#hy_unknown_b
3008   E6FC DF B8       			stx	temp1
3009   E6FE CE E5 74    			ldx	#msg_wave
3010   E701 BD D3 0D    			jsr	copy_msg_part
3011   E704 BD D2 B0    			jsr	gb_0E
3012   E707 5F          			clrb	
3013   E708 86 04       			ldaa	#$04
3014   E70A BD D2 C8    			jsr	gj_20
3015   E70D CE 13 A7    			ldx	#hy_unknown_8
3016   E710 7E D2 58    			jmp	slide_l
3017   E713             
3018   E713             
3019   E713             ;*****************************************************************************
3020   E713             ;* Williams Hyperball System Code
3021   E713             ;***************************************************************************
3022   E713             ;* Code copyright Williams Electronic Games Inc.
3023   E713             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
3024   E713             ;* For use with TASMx Assembler
3025   E713             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
3026   E713             ;* for more information.
3027   E713             ;* You may redistribute this file as long as this header remains intact.
3028   E713             ;***************************************************************************
3029   E713             ;* This file is set up with tab stops at 6
3030   E713             ;*****************************************************************************
3031   E713             
3032   E713             
3033   E713             
3034   E713             ;*****************************************************************************
3035   E713             ;* Some Global Equates
3036   E713             ;*****************************************************************************
3037   E713             
3038   E713             irq_per_minute =	$0EFF
3039   E713             
3040   E713             ;*****************************************************************************
3041   E713             ;*Program starts at $e800 for standard games... we can expand this later..
3042   E713             ;*****************************************************************************
3043   E730             	.org $E730
3044   E730             
3045   E730             
3046   E730             
3047   E730             ;**************************************
3048   E730             ;* Main Entry from Reset
3049   E730             ;**************************************
3050   E730 0F          reset			sei	
3051   E731 8E F1 70    			lds	#pia_ddr_data-1		;Point stack to start of init data
3052   E734 C6 0C       			ldab	#$0C				;Number of PIA sections to initialize
3053   E736 CE 21 00    			ldx	#pia_sound_data		;Start with the lowest PIA
3054   E739 86 04       			ldaa	#$04
3055   E73B A7 01       			staa	pia_control,X		;Select control register
3056   E73D 86 7F       			ldaa	#$7F				
3057   E73F A7 00       			staa	pia_pir,X
3058   E741 DF B8       			stx	temp1
3059   E743 9C B8       			cpx	temp1
3060   E745             			ifeq
3060   E745             
3060   E745 26 FE       
3061   E747             				begin
3061   E747             
3062   E747 DE B8       nxt_pia				ldx	temp1			;Get next PIA address base
3063   E749             					begin
3063   E749             
3064   E749 6F 01       						clr	pia_control,X	;Initialize all PIA data direction registers
3065   E74B 32          						pula				;Get DDR data
3066   E74C A7 00       						staa	pia_pir,X
3067   E74E 32          						pula	
3068   E74F A7 01       						staa	pia_control,X	;Get Control Data
3069   E751 8C 21 00    						cpx	#pia_sound_data	;This is the last PIA to do in shooter games
3070   E754             						ifne
3070   E754             
3070   E754 27 FE       
3071   E756 6F 00       							clr	pia_pir,X		;If we are on the sound PIA, then clear the PIR 
3072   E758             						endif
3072   E758             
3072   E758             
3072   E758             
3072   E758             
3072   E758             
3072   E758~            						endif
3072   E758~            						endif
3072   E758             
3072   E758~            						endif
3072   E758~            						endif
3072   E758             
3072   E755             
3072   E755 02          
3072   E756             
3072   E756             
3072   E756~            						endif
3072   E756~            						endif
3072   E756~            						endif
3072   E756             
3072   E758             
3072   E758~            						endif
3072   E758~            						endif
3072   E758             
3073   E758 08          						inx	
3074   E759 08          						inx	
3075   E75A 5A          						decb	
3076   E75B 27 1B       						beq	init_done
3077   E75D C5 01       						bitb	#$01
3078   E75F             					eqend
3078   E75F             
3078   E75F             
3078   E75F~            					eqend
3078   E75F~            					eqend
3078   E75F             
3078   E75F 26 E8       
3078   E761             
3078   E761~            					eqend
3078   E761~            					eqend
3078   E761             
3079   E761 96 B8       					ldaa	temp1			;Get current PIA address MSB
3080   E763 48          					asla	
3081   E764 84 1F       					anda	#$1F			;Move to next PIA
3082   E766             					ifeq
3082   E766             
3082   E766 26 FE       
3083   E768 86 40       						ldaa	#$40
3084   E76A 97 B8       						staa	temp1
3085   E76C 20 D9       						bra	nxt_pia
3086   E76E             					endif
3086   E76E             
3086   E76E             
3086   E76E             
3086   E76E             
3086   E76E             
3086   E76E~            					endif
3086   E76E~            					endif
3086   E76E             
3086   E76E~            					endif
3086   E76E~            					endif
3086   E76E             
3086   E767             
3086   E767 06          
3086   E768             
3086   E768             
3086   E768~            					endif
3086   E768~            					endif
3086   E768~            					endif
3086   E768             
3086   E76E             
3086   E76E~            					endif
3086   E76E~            					endif
3086   E76E             
3087   E76E 8A 20       					oraa	#$20
3088   E770 97 B8       					staa	temp1			;Store it
3089   E772             				loopend
3089   E772             
3089   E772             
3089   E772~            				loopend
3089   E772~            				loopend
3089   E772             
3089   E772 20 D3       
3089   E774             
3089   E774~            				loopend
3089   E774~            				loopend
3089   E774             
3090   E774             			endif
3090   E774             
3090   E774             
3090   E774             
3090   E774             
3090   E774             
3090   E774~            			endif
3090   E774~            			endif
3090   E774             
3090   E774~            			endif
3090   E774~            			endif
3090   E774             
3090   E746             
3090   E746 2D          
3090   E747             
3090   E747             
3090   E747~            			endif
3090   E747~            			endif
3090   E747~            			endif
3090   E747             
3090   E774             
3090   E774~            			endif
3090   E774~            			endif
3090   E774             
3091   E774 7E FF 31    			jmp	diag					;NMI Entry
3092   E777             
3093   E777             ;***************************************************
3094   E777             ;* System Checksum #1: Set to make ROM csum from
3095   E777             ;*                     $E000-$EFFF equal to $00
3096   E777             ;***************************************************		
3097   E777             	
3098   E777 C0          csum1	.db $C0 	 
3099   E778             
3100   E778             
3101   E778             ;***************************************************************
3102   E778             ;* PIA initialization is done now, set up the vm etc.
3103   E778             ;***************************************************************			
3104   E778 CE 13 FF    init_done		ldx	#$13FF				;\
3105   E77B 35          			txs						;|
3106   E77C             			begin						;|
3106   E77C             
3107   E77C 6F 00       				clr	$00,X				;Clear RAM 1000-13FF
3108   E77E 09          				dex					;|
3109   E77F 8C 0F FF    				cpx	#$0FFF			;|
3110   E782             			eqend						;/
3110   E782             
3110   E782             
3110   E782~            			eqend						;/
3110   E782~            			eqend						;/
3110   E782             
3110   E782 26 F8       
3110   E784             
3110   E784~            			eqend						;/
3110   E784~            			eqend						;/
3110   E784             
3111   E784 BD EE 61    			jsr	setup_vm_stack			;Initially Set up the VM
3112   E787 B6 D0 55    			ldaa	gr_lampflashrate			;Get Lamp Flash Rate
3113   E78A 97 D3       			staa	lamp_flash_rate
3114   E78C CE 11 00    			ldx	#switch_queue
3115   E78F DF B4       			stx	switch_queue_pointer
3116   E791 CE 11 18    			ldx	#sol_queue				;Works from top down
3117   E794 DF B6       			stx	solenoid_queue_pointer		;Set up Solenoid Buffer Pointer
3118   E796 CE 01 7D    			ldx	#adj_cmoscsum			;CMOS Checksum
3119   E799 BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
3120   E79C BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
3121   E79F 1B          			aba	
3122   E7A0 81 57       			cmpa	#$57					;CSUM CMOS RAM
3123   E7A2             			ifne
3123   E7A2             
3123   E7A2 27 FE       
3124   E7A4 BD EE BC    clear_all			jsr	factory_zeroaudits		;Restore Factory Settings and Zero Audit Totals
3125   E7A7             			endif
3125   E7A7             
3125   E7A7             
3125   E7A7             
3125   E7A7             
3125   E7A7             
3125   E7A7~            			endif
3125   E7A7~            			endif
3125   E7A7             
3125   E7A7~            			endif
3125   E7A7~            			endif
3125   E7A7             
3125   E7A3             
3125   E7A3 03          
3125   E7A4             
3125   E7A4             
3125   E7A4~            			endif
3125   E7A4~            			endif
3125   E7A4~            			endif
3125   E7A4             
3125   E7A7             
3125   E7A7~            			endif
3125   E7A7~            			endif
3125   E7A7             
3126   E7A7 CE 01 6E    			ldx	#aud_currentcredits		;Current Credits
3127   E7AA BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
3128   E7AD B7 11 9A    			staa	current_credits
3129   E7B0 BD FD DB    			jsr	cmos_a				;CMOS, X -> A Audit 50 Command
3130   E7B3 6F 00       			clr	$00,X
3131   E7B5 6F 01       			clr	$01,X
3132   E7B7 81 15       			cmpa	#$15					;Auto-Cycle?
3133   E7B9             			ifeq
3133   E7B9             
3133   E7B9 26 FE       
3134   E7BB CE FE 7C    				ldx	#st_autocycle			;Set-Up Auto Cycle Mode
3135   E7BE BD EA 24    				jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
3136   E7C1             			endif
3136   E7C1             
3136   E7C1             
3136   E7C1             
3136   E7C1             
3136   E7C1             
3136   E7C1~            			endif
3136   E7C1~            			endif
3136   E7C1             
3136   E7C1~            			endif
3136   E7C1~            			endif
3136   E7C1             
3136   E7BA             
3136   E7BA 06          
3136   E7BB             
3136   E7BB             
3136   E7BB~            			endif
3136   E7BB~            			endif
3136   E7BB~            			endif
3136   E7BB             
3136   E7C1             
3136   E7C1~            			endif
3136   E7C1~            			endif
3136   E7C1             
3137   E7C1 81 45       			cmpa	#$45
3138   E7C3 27 DF       			beq	clear_all				;Restore Factory Setting/Zero Audits
3139   E7C5 81 35       			cmpa	#$35
3140   E7C7             			ifeq						;Zero Audits
3140   E7C7             
3140   E7C7 26 FE       
3141   E7C9 BD EE AE    				jsr	reset_audits			;(Reset Audits 0100-0165)
3142   E7CC             			endif
3142   E7CC             
3142   E7CC             
3142   E7CC             
3142   E7CC             
3142   E7CC             
3142   E7CC~            			endif
3142   E7CC~            			endif
3142   E7CC             
3142   E7CC~            			endif
3142   E7CC~            			endif
3142   E7CC             
3142   E7C8             
3142   E7C8 03          
3142   E7C9             
3142   E7C9             
3142   E7C9~            			endif
3142   E7C9~            			endif
3142   E7C9~            			endif
3142   E7C9             
3142   E7CC             
3142   E7CC~            			endif
3142   E7CC~            			endif
3142   E7CC             
3143   E7CC BD F7 9C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
3144   E7CF 7A 00 7D    			dec	switch_debounced
3145   E7D2 BD F9 11    			jsr	clear_displays			;Blank all Player Displays (buffer 0)
3146   E7D5 97 4F       			staa	score_p1_b0+3			;Set player one score to '00'
3147   E7D7 4A          			deca
3148   E7D8 97 5E       			staa	p2_ec_b0
3149   E7DA 97 5C       			staa	p1_ec_b0
3150   E7DC 0E          			cli
3151   E7DD FE D0 C4    			ldx	gr_reset_ptr
3152   E7E0 AD 00       			jsr	$00,X					;jsr GameROM
3153   E7E2 CE FA D7    			ldx	#powerup_init			;Jump to Game Over Mode
3154   E7E5 BD EA 24    			jsr	newthread_06			;Start the thread
3155   E7E8 7E E9 3A    			jmp	check_threads			;Run the loop
3156   E7EB             			
3157   E7EB             ;************************************************************************************
3158   E7EB             ;* Begin Main Loop - This is the end of all initialization and the start of the loop
3159   E7EB             ;*                   that runs consistently to support the VM.
3160   E7EB             ;************************************************************************************
3161   E7EB CE 00 CB    main			ldx	#vm_base
3162   E7EE DF D1       			stx	vm_tail_thread			;Current VM Routine being run
3163   E7F0 DF CF       			stx	current_thread			;Current VM Routine being run
3164   E7F2 FE D0 C6    			ldx	gr_mainloop_ptr
3165   E7F5 AD 00       			jsr	$00,X					;Game ROM:Main Loop Hook
3166   E7F7 0F          			sei	
3167   E7F8 96 B3       			ldaa	irqcount16				;IRQ Counter, Incremented every 16 IRQ's
3168   E7FA 7F 00 B3    			clr	irqcount16				;Reset the counter
3169   E7FD 0E          			cli	
3170   E7FE 97 CA       			staa	irqcount				;Put the data into counter holder, use later
3171   E800 96 E9       			ldaa	flags_selftest			;See if we are in test mode
3172   E802             			ifne
3172   E802             
3172   E802 27 FE       
3173   E804 7E E8 84    				jmp	vm_irqcheck				;If so, then skip a bunch of stuff...
3174   E807             			endif
3174   E807             
3174   E807             
3174   E807             
3174   E807             
3174   E807             
3174   E807~            			endif
3174   E807~            			endif
3174   E807             
3174   E807~            			endif
3174   E807~            			endif
3174   E807             
3174   E803             
3174   E803 03          
3174   E804             
3174   E804             
3174   E804~            			endif
3174   E804~            			endif
3174   E804~            			endif
3174   E804             
3174   E807             
3174   E807~            			endif
3174   E807~            			endif
3174   E807             
3175   E807 B6 28 01    			ldaa	pia_disp_digit_ctrl		;Check the Advance Switch
3176   E80A             			ifmi
3176   E80A             
3176   E80A 2A FE       
3177   E80C CE FC 41    				ldx	#selftest_entry
3178   E80F BD EA 24    				jsr	newthread_06			;Create the diagnostics thread
3179   E812             			endif
3179   E812             
3179   E812             
3179   E812             
3179   E812             
3179   E812             
3179   E812~            			endif
3179   E812~            			endif
3179   E812             
3179   E812~            			endif
3179   E812~            			endif
3179   E812             
3179   E80B             
3179   E80B 06          
3179   E80C             
3179   E80C             
3179   E80C~            			endif
3179   E80C~            			endif
3179   E80C~            			endif
3179   E80C             
3179   E812             
3179   E812~            			endif
3179   E812~            			endif
3179   E812             
3180   E812 CE 00 00    checkswitch		ldx	#0000
3181   E815             			begin
3181   E815             
3182   E815 A6 9D       				ldaa	switch_b4,X
3183   E817 43          				coma	
3184   E818 A4 8D       				anda	switch_pending,X
3185   E81A             				ifne
3185   E81A             
3185   E81A 27 FE       
3186   E81C BD ED A0    					jsr	check_sw_close				;Switch Closed?
3187   E81F             				endif
3187   E81F             
3187   E81F             
3187   E81F             
3187   E81F             
3187   E81F             
3187   E81F~            				endif
3187   E81F~            				endif
3187   E81F             
3187   E81F~            				endif
3187   E81F~            				endif
3187   E81F             
3187   E81B             
3187   E81B 03          
3187   E81C             
3187   E81C             
3187   E81C~            				endif
3187   E81C~            				endif
3187   E81C~            				endif
3187   E81C             
3187   E81F             
3187   E81F~            				endif
3187   E81F~            				endif
3187   E81F             
3188   E81F A6 9D       				ldaa	switch_b4,X
3189   E821 A4 95       				anda	switch_aux,X
3190   E823             				ifne
3190   E823             
3190   E823 27 FE       
3191   E825 BD ED FA    					jsr	check_sw_open				;Switch Open?
3192   E828             				endif
3192   E828             
3192   E828             
3192   E828             
3192   E828             
3192   E828             
3192   E828~            				endif
3192   E828~            				endif
3192   E828             
3192   E828~            				endif
3192   E828~            				endif
3192   E828             
3192   E824             
3192   E824 03          
3192   E825             
3192   E825             
3192   E825~            				endif
3192   E825~            				endif
3192   E825~            				endif
3192   E825             
3192   E828             
3192   E828~            				endif
3192   E828~            				endif
3192   E828             
3193   E828 08          				inx	
3194   E829 8C 00 08    				cpx	#$0008
3195   E82C             			eqend
3195   E82C             
3195   E82C             
3195   E82C~            			eqend
3195   E82C~            			eqend
3195   E82C             
3195   E82C 26 E7       
3195   E82E             
3195   E82E~            			eqend
3195   E82E~            			eqend
3195   E82E             
3196   E82E D6 F4       time			ldab	flag_timer_bip			;Ball Timer Flag
3197   E830             			ifne
3197   E830             
3197   E830 27 FE       
3198   E832 96 CA       				ldaa	irqcount				;Number of IRQ's since last
3199   E834 DE F2       				ldx	minutetimer
3200   E836 BD EE 3E    				jsr	xplusa				;X = X + A
3201   E839 DF F2       				stx	minutetimer
3202   E83B 8C 0E FF    				cpx	#irq_per_minute
3203   E83E 2B 0B       				bmi	switches				;Not 1 minute yet
3204   E840 5F          				clrb	
3205   E841 D7 F2       				stab	minutetimer				;Clear the Minute Timer
3206   E843 D7 F3       				stab	minutetimer+1
3207   E845 CE 01 26    				ldx	#aud_avgballtime			;AUD: Ball time in Minutes
3208   E848 BD F7 E7    				jsr	ptrx_plus_1				;Add 1 to data at X
3209   E84B             			endif
3209   E84B             
3209   E84B             
3209   E84B             
3209   E84B             
3209   E84B             
3209   E84B~            			endif
3209   E84B~            			endif
3209   E84B             
3209   E84B~            			endif
3209   E84B~            			endif
3209   E84B             
3209   E831             
3209   E831 19          
3209   E832             
3209   E832             
3209   E832~            			endif
3209   E832~            			endif
3209   E832~            			endif
3209   E832             
3209   E84B             
3209   E84B~            			endif
3209   E84B~            			endif
3209   E84B             
3210   E84B CE 11 00    switches		ldx	#switch_queue
3211   E84E 9C B4       next_sw		cpx	switch_queue_pointer		;Check Buffer Pointer
3212   E850             			ifne
3212   E850             
3212   E850 27 FE       
3213   E852 A6 00       				ldaa	$00,X					;Command Timer
3214   E854 90 CA       				suba	irqcount				;Subtract our IRQ's
3215   E856             				iflo						;Ready to run?
3215   E856             
3215   E856 22 FE       
3216   E858 DF C6       					stx	sys_temp_w3				;Yes!
3217   E85A A6 01       					ldaa	$01,X					;Encoded Switch #
3218   E85C 97 C3       					staa	sw_encoded
3219   E85E 7F 00 BE    					clr	sys_temp1
3220   E861 16          					tab	
3221   E862 57          					asrb	
3222   E863 57          					asrb	
3223   E864 57          					asrb	
3224   E865 D7 BF       					stab	sys_temp2
3225   E867 BD EA E5    					jsr	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
3226   E86A D7 C0       					stab	sys_temp3
3227   E86C DE BE       					ldx	sys_temp1
3228   E86E A6 7D       					ldaa	switch_debounced,X
3229   E870 97 C2       					staa	sys_temp5
3230   E872 BD ED 43    					jsr	sw_down
3231   E875 DE C6       					ldx	sys_temp_w3
3232   E877 24 07       					bcc	sw_break
3233   E879 BD EE 4E    					jsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
3234   E87C 20 D0       					bra	next_sw
3235   E87E             				endif
3235   E87E             
3235   E87E             
3235   E87E             
3235   E87E             
3235   E87E             
3235   E87E~            				endif
3235   E87E~            				endif
3235   E87E             
3235   E87E~            				endif
3235   E87E~            				endif
3235   E87E             
3235   E857             
3235   E857 26          
3235   E858             
3235   E858             
3235   E858~            				endif
3235   E858~            				endif
3235   E858~            				endif
3235   E858             
3235   E87E             
3235   E87E~            				endif
3235   E87E~            				endif
3235   E87E             
3236   E87E A7 00       				staa	$00,X
3237   E880 08          sw_break			inx	
3238   E881 08          				inx	
3239   E882 20 CA       				bra	next_sw
3240   E884             			endif
3240   E884             
3240   E884             
3240   E884             
3240   E884             
3240   E884             
3240   E884~            			endif
3240   E884~            			endif
3240   E884             
3240   E884~            			endif
3240   E884~            			endif
3240   E884             
3240   E851             
3240   E851 32          
3240   E852             
3240   E852             
3240   E852~            			endif
3240   E852~            			endif
3240   E852~            			endif
3240   E852             
3240   E884             
3240   E884~            			endif
3240   E884~            			endif
3240   E884             
3241   E884             ;Entry here if we are in auto-cycle mode...						
3242   E884 DE CB       vm_irqcheck		ldx	vm_base				;Check the start of the vm loop
3243   E886             			begin
3243   E886             
3244   E886 27 0D       				beq	flashlamp
3245   E888 A6 02       				ldaa	$02,X
3246   E88A 90 CA       				suba	irqcount			;Subtract the number of IRQ loops completed
3247   E88C             				ifcs
3247   E88C             
3247   E88C 24 FE       
3248   E88E 4F          					clra					;Clear it so it can be run next loop
3249   E88F             				endif
3249   E88F             
3249   E88F             
3249   E88F             
3249   E88F             
3249   E88F             
3249   E88F~            				endif
3249   E88F~            				endif
3249   E88F             
3249   E88F~            				endif
3249   E88F~            				endif
3249   E88F             
3249   E88D             
3249   E88D 01          
3249   E88E             
3249   E88E             
3249   E88E~            				endif
3249   E88E~            				endif
3249   E88E~            				endif
3249   E88E             
3249   E88F             
3249   E88F~            				endif
3249   E88F~            				endif
3249   E88F             
3250   E88F A7 02       				staa	$02,X
3251   E891 EE 00       				ldx	$00,X
3252   E893             			loopend
3252   E893             
3252   E893             
3252   E893~            			loopend
3252   E893~            			loopend
3252   E893             
3252   E893 20 F1       
3252   E895             
3252   E895~            			loopend
3252   E895~            			loopend
3252   E895             
3253   E895 96 D4       flashlamp		ldaa	lamp_flash_count		;Timer for Flashing Lamps
3254   E897 90 CA       			suba	irqcount			;Subtract the IRQ's
3255   E899             			iflo
3255   E899             
3255   E899 22 FE       
3256   E89B CE 00 00    				ldx	#ram_base
3257   E89E C6 0C       				ldab	#$0C				;12 rows in Hyperball games, instead of 8
3258   E8A0             				begin
3258   E8A0             
3259   E8A0 A6 10       					ldaa	lampbuffer0,X			;Invert Selected Lamps.
3260   E8A2 A8 40       					eora	lampflashflag,X
3261   E8A4 A7 10       					staa	lampbuffer0,X
3262   E8A6 08          					inx	
3263   E8A7 5A          					decb	
3264   E8A8             				eqend
3264   E8A8             
3264   E8A8             
3264   E8A8~            				eqend
3264   E8A8~            				eqend
3264   E8A8             
3264   E8A8 26 F6       
3264   E8AA             
3264   E8AA~            				eqend
3264   E8AA~            				eqend
3264   E8AA             
3265   E8AA 96 D3       				ldaa	lamp_flash_rate		;Get Reset Value
3266   E8AC             			endif
3266   E8AC             
3266   E8AC             
3266   E8AC             
3266   E8AC             
3266   E8AC             
3266   E8AC~            			endif
3266   E8AC~            			endif
3266   E8AC             
3266   E8AC~            			endif
3266   E8AC~            			endif
3266   E8AC             
3266   E89A             
3266   E89A 11          
3266   E89B             
3266   E89B             
3266   E89B~            			endif
3266   E89B~            			endif
3266   E89B~            			endif
3266   E89B             
3266   E8AC             
3266   E8AC~            			endif
3266   E8AC~            			endif
3266   E8AC             
3267   E8AC 97 D4       			staa	lamp_flash_count			;Reset the Lamp Timer
3268   E8AE 96 B2       solq			ldaa	solenoid_counter			;Solenoid Counter
3269   E8B0             			ifeq						;Skip if Counter hasnt Expired
3269   E8B0             
3269   E8B0 26 FE       
3270   E8B2 CE 11 18    				ldx	#sol_queue				;Start at bottom of Queue
3271   E8B5 9C B6       				cpx	solenoid_queue_pointer		
3272   E8B7             				ifne						;Do we have any to do?
3272   E8B7             
3272   E8B7 27 FE       
3273   E8B9 A6 00       					ldaa	$00,X					;Takes lowest Solenoid # into A
3274   E8BB             											;We only do 1 solenoid at a time
3275   E8BB             					begin
3275   E8BB             
3276   E8BB E6 01       						ldab	$01,X					;Moves the rest down into place
3277   E8BD E7 00       						stab	$00,X
3278   E8BF 08          						inx	
3279   E8C0 9C B6       						cpx	solenoid_queue_pointer
3280   E8C2             					eqend
3280   E8C2             
3280   E8C2             
3280   E8C2~            					eqend
3280   E8C2~            					eqend
3280   E8C2             
3280   E8C2 26 F7       
3280   E8C4             
3280   E8C4~            					eqend
3280   E8C4~            					eqend
3280   E8C4             
3281   E8C4 09          					dex	
3282   E8C5 DF B6       					stx	solenoid_queue_pointer		;Adjust Pointer to end of list
3283   E8C7 BD EA A7    					jsr	set_solenoid			;Turn On/Off Solenoid (Solenoid # in A)
3284   E8CA             				endif
3284   E8CA             
3284   E8CA             
3284   E8CA             
3284   E8CA             
3284   E8CA             
3284   E8CA~            				endif
3284   E8CA~            				endif
3284   E8CA             
3284   E8CA~            				endif
3284   E8CA~            				endif
3284   E8CA             
3284   E8B8             
3284   E8B8 11          
3284   E8B9             
3284   E8B9             
3284   E8B9~            				endif
3284   E8B9~            				endif
3284   E8B9~            				endif
3284   E8B9             
3284   E8CA             
3284   E8CA~            				endif
3284   E8CA~            				endif
3284   E8CA             
3285   E8CA             			endif
3285   E8CA             
3285   E8CA             
3285   E8CA             
3285   E8CA             
3285   E8CA             
3285   E8CA~            			endif
3285   E8CA~            			endif
3285   E8CA             
3285   E8CA~            			endif
3285   E8CA~            			endif
3285   E8CA             
3285   E8B1             
3285   E8B1 18          
3285   E8B2             
3285   E8B2             
3285   E8B2~            			endif
3285   E8B2~            			endif
3285   E8B2~            			endif
3285   E8B2             
3285   E8CA             
3285   E8CA~            			endif
3285   E8CA~            			endif
3285   E8CA             
3286   E8CA 96 DF       snd_queue		ldaa	sys_soundflags			;Sound Flag??
3287   E8CC             			ifne						;If not zero, time to check for the score queue sound/pts
3287   E8CC             
3287   E8CC 27 FE       
3288   E8CE 96 D8       				ldaa	cur_sndflags
3289   E8D0 85 10       				bita	#$10					;Is this an immediate or timed sound?
3290   E8D2             				ifne
3290   E8D2             
3290   E8D2 27 FE       
3291   E8D4 F6 21 02    					ldab	pia_comma_data			;Do immediate, but only if sound board is not busy.
3292   E8D7 C4 20       					andb	#$20
3293   E8D9 27 5F       					beq	check_threads			;Get Outta Here
3294   E8DB             				else
3294   E8DB             
3294   E8DB             
3294   E8DB             
3294   E8DB             
3294   E8D3             
3294   E8D3             
3294   E8D3             
3294   E8D3~            				else
3294   E8D3~            				else
3294   E8D3~            				else
3294   E8D3~            				else
3294   E8D3             
3294   E8D3~            				else
3294   E8D3~            				else
3294   E8D3~            				else
3294   E8D3~            				else
3294   E8D3             
3294   E8D3             
3294   E8D3 09          
3294   E8DB             
3294   E8DB 20 FE       
3294   E8DD             
3294   E8DD             
3294   E8DD             
3294   E8DD~            				else
3294   E8DD~            				else
3294   E8DD~            				else
3294   E8DD~            				else
3294   E8DD~            				else
3294   E8DD             
3294   E8DD~            				else
3294   E8DD~            				else
3294   E8DD             
3294   E8DD~            				else
3294   E8DD~            				else
3294   E8DD             
3295   E8DD 96 DC       					ldaa	soundirqcount+1			;LSB Sound IRQ Counter
3296   E8DF 90 CA       					suba	irqcount				;Subtract the number of IRQ's that have cycled
3297   E8E1 97 DC       					staa	soundirqcount+1
3298   E8E3 96 DB       					ldaa	soundirqcount			;Update the counter
3299   E8E5 82 00       					sbca	#$00
3300   E8E7 97 DB       					staa	soundirqcount			;Carry over to MSB of couter as well
3301   E8E9 24 4F       					bcc	check_threads			;Leave if counter has not gone under zero.
3302   E8EB             				endif
3302   E8EB             
3302   E8EB             
3302   E8EB             
3302   E8EB             
3302   E8EB             
3302   E8EB~            				endif
3302   E8EB~            				endif
3302   E8EB             
3302   E8EB~            				endif
3302   E8EB~            				endif
3302   E8EB             
3302   E8DC             
3302   E8DC 0E          
3302   E8DD             
3302   E8DD             
3302   E8DD~            				endif
3302   E8DD~            				endif
3302   E8DD~            				endif
3302   E8DD             
3302   E8EB             
3302   E8EB~            				endif
3302   E8EB~            				endif
3302   E8EB             
3303   E8EB 86 7F       				ldaa	#$7F
3304   E8ED BD EC DF    				jsr	send_snd			;Send A->Sound Board (mute?)
3305   E8F0 96 D8       				ldaa	cur_sndflags		;Is this a simple sound
3306   E8F2             				ifpl					;yes
3306   E8F2             
3306   E8F2 2B FE       
3307   E8F4 7A 00 D6    					dec	soundcount
3308   E8F7 27 1C       					beq	_sndnext			;Sound Repeat Counter
3309   E8F9 D6 DF       					ldab	sys_soundflags		;
3310   E8FB             					ifpl
3310   E8FB             
3310   E8FB 2B FE       
3311   E8FD DE DD       						ldx	soundindex_com
3312   E8FF DF DB       						stx	soundirqcount
3313   E901 96 D7       						ldaa	lastsound
3314   E903 BD EC DD    						jsr	send_snd_save		;Send the Command, Save in 'lastsound'
3315   E906 20 32       						bra	check_threads		;Get Outta here.
3316   E908             					endif
3316   E908             
3316   E908             
3316   E908             
3316   E908             
3316   E908             
3316   E908~            					endif
3316   E908~            					endif
3316   E908             
3316   E908~            					endif
3316   E908~            					endif
3316   E908             
3316   E8FC             
3316   E8FC 0B          
3316   E8FD             
3316   E8FD             
3316   E8FD~            					endif
3316   E8FD~            					endif
3316   E8FD~            					endif
3316   E8FD             
3316   E908             
3316   E908~            					endif
3316   E908~            					endif
3316   E908             
3317   E908 8A 80       					oraa	#$80
3318   E90A 97 D8       					staa	cur_sndflags		;make it a complex sound now.
3319   E90C DE DD       					ldx	soundindex_com
3320   E90E DF D9       					stx	soundptr
3321   E910             				endif
3321   E910             
3321   E910             
3321   E910             
3321   E910             
3321   E910             
3321   E910~            				endif
3321   E910~            				endif
3321   E910             
3321   E910~            				endif
3321   E910~            				endif
3321   E910             
3321   E8F3             
3321   E8F3 1C          
3321   E8F4             
3321   E8F4             
3321   E8F4~            				endif
3321   E8F4~            				endif
3321   E8F4~            				endif
3321   E8F4             
3321   E910             
3321   E910~            				endif
3321   E910~            				endif
3321   E910             
3322   E910 BD EC E6    				jsr	do_complex_snd
3323   E913 20 25       				bra	check_threads		;Get Outta Here.
3324   E915 D6 E4       _sndnext			ldab	next_sndcnt			;Here if we are done iterating the sound command.
3325   E917             				ifne			;Check the scoring queue
3325   E917             
3325   E917 27 FE       
3326   E919 96 E5       					ldaa	next_sndcmd
3327   E91B BD EC 92    					jsr	isnd_mult			;Play Sound Index(A),(B)Times
3328   E91E 7F 00 E4    					clr	next_sndcnt
3329   E921 20 17       					bra	check_threads		;Get Outta Here.
3330   E923             				endif
3330   E923             
3330   E923             
3330   E923             
3330   E923             
3330   E923             
3330   E923~            				endif
3330   E923~            				endif
3330   E923             
3330   E923~            				endif
3330   E923~            				endif
3330   E923             
3330   E918             
3330   E918 0A          
3330   E919             
3330   E919             
3330   E919~            				endif
3330   E919~            				endif
3330   E919~            				endif
3330   E919             
3330   E923             
3330   E923~            				endif
3330   E923~            				endif
3330   E923             
3331   E923             			endif
3331   E923             
3331   E923             
3331   E923             
3331   E923             
3331   E923             
3331   E923~            			endif
3331   E923~            			endif
3331   E923             
3331   E923~            			endif
3331   E923~            			endif
3331   E923             
3331   E8CD             
3331   E8CD 55          
3331   E8CE             
3331   E8CE             
3331   E8CE~            			endif
3331   E8CE~            			endif
3331   E8CE~            			endif
3331   E8CE             
3331   E923             
3331   E923~            			endif
3331   E923~            			endif
3331   E923             
3332   E923 7F 00 DF    doscoreq		clr	sys_soundflags		;Reset the Sound Flag??
3333   E926 CE 11 27    			ldx	#$1127			;See if there is something in this stack
3334   E929 86 08       			ldaa	#$08
3335   E92B             			begin
3335   E92B             
3336   E92B 08          				inx	
3337   E92C 4A          				deca	
3338   E92D 2B 0B       				bmi	check_threads		;Nuttin' Honey, Skip this Sound Crap!
3339   E92F E6 00       				ldab	$00,X
3340   E931             			neend					;Nuttin' Honey, Check next Entry!
3340   E931             
3340   E931             
3340   E931~            			neend					;Nuttin' Honey, Check next Entry!
3340   E931~            			neend					;Nuttin' Honey, Check next Entry!
3340   E931             
3340   E931 27 F8       
3340   E933             
3340   E933~            			neend					;Nuttin' Honey, Check next Entry!
3340   E933~            			neend					;Nuttin' Honey, Check next Entry!
3340   E933             
3341   E933 6A 00       			dec	$00,X				;Re-Adjust the Sound Command So Sound #00 will still work!
3342   E935 8A 08       			oraa	#$08
3343   E937 BD EB 36    			jsr	dsnd_pts			;Add Points(A),Play Digit Sound
3344   E93A             
3345   E93A CE 00 CB    check_threads	ldx	#vm_base
3346   E93D             			begin
3346   E93D             
3347   E93D EE 00       nextthread			ldx	$00,X				;Check to see if we have a routine to do?
3348   E93F             				ifeq
3348   E93F             
3348   E93F 26 FE       
3349   E941 7E E7 EB    					jmp main				;Back to the start of the main loop
3350   E944             				endif
3350   E944             
3350   E944             
3350   E944             
3350   E944             
3350   E944             
3350   E944~            				endif
3350   E944~            				endif
3350   E944             
3350   E944~            				endif
3350   E944~            				endif
3350   E944             
3350   E940             
3350   E940 03          
3350   E941             
3350   E941             
3350   E941~            				endif
3350   E941~            				endif
3350   E941~            				endif
3350   E941             
3350   E944             
3350   E944~            				endif
3350   E944~            				endif
3350   E944             
3351   E944 A6 02       				ldaa	$02,X				;Timer expired?
3352   E946             			eqend					;No, goto next one.
3352   E946             
3352   E946             
3352   E946~            			eqend					;No, goto next one.
3352   E946~            			eqend					;No, goto next one.
3352   E946             
3352   E946 26 F5       
3352   E948             
3352   E948~            			eqend					;No, goto next one.
3352   E948~            			eqend					;No, goto next one.
3352   E948             
3353   E948 DF CF       			stx	current_thread		;Yes, lets do this one now.
3354   E94A DF D1       			stx	vm_tail_thread		;Current VM Routine being run
3355   E94C A6 03       			ldaa	$03,X
3356   E94E 36          			psha	
3357   E94F A6 04       			ldaa	$04,X
3358   E951 36          			psha	
3359   E952 A6 05       			ldaa	$05,X
3360   E954 36          			psha	
3361   E955 A6 06       			ldaa	$06,X
3362   E957 36          			psha
3363   E958 A6 07       			ldaa	$07,X
3364   E95A 36          			psha
3365   E95B A6 08       			ldaa	$08,X
3366   E95D 36          			psha
3367   E95E A6 09       			ldaa	$09,X
3368   E960 36          			psha
3369   E961 A6 0A       			ldaa	$0A,X
3370   E963 36          			psha
3371   E964 A6 0C       			ldaa	$0C,X
3372   E966 36          			psha
3373   E967 A6 0B       			ldaa	$0B,X
3374   E969 36          			psha
3375   E96A A6 0E       			ldaa	$0E,X
3376   E96C E6 0F       			ldab	$0F,X
3377   E96E EE 10       			ldx	$10,X
3378   E970 39          			rts					;Jump to the offending routine.
3379   E971             
3380   E971             ;**************************************************************************
3381   E971             ;* This is similar to 'addthread' below but the timer data does not follow
3382   E971             ;* the jsr. Instead, the timer data is pre-loaded into 'thread_timer_byte'.
3383   E971             ;* The thread is started in the same manner as described below.
3384   E971             ;**************************************************************************			
3385   E971 97 BA       delaythread		staa	temp2				;Routine returns here when done
3386   E973 DF B8       			stx	temp1
3387   E975 96 D5       			ldaa	thread_timer_byte
3388   E977 30          			tsx					;Get where we came from
3389   E978 EE 00       			ldx	$00,X				;Get the address of the new thread
3390   E97A 20 0A       			bra	dump_thread
3391   E97C             
3392   E97C             ;**************************************************************************
3393   E97C             ;* Adds a new thread to the VM. The data for this routine is contained 
3394   E97C             ;* directly after the jsr to this routine. A single byte follows the
3395   E97C             ;* jsr and is the timer byte used for the delay until the thread starts.
3396   E97C             ;* The actual address directly after the timer byte is where the thread
3397   E97C             ;* will start running. Example:
3398   E97C             ;*
3399   E97C             ;* 	jsr addthread
3400   E97C             ;*    .db 05		;This is the timer byte
3401   E97C             ;*	ldaa #FF		;This code is executed as the thread.
3402   E97C             ;***************************************************************************
3403   E97C DF B8       addthread		stx	temp1
3404   E97E 97 BA       			staa	temp2
3405   E980 30          			tsx	
3406   E981 EE 00       			ldx	$00,X				;Return Address from rts to $EA2F
3407   E983 A6 00       			ldaa	$00,X				;New Timer Value
3408   E985 08          			inx	
3409   E986             
3410   E986             ;**************************************************************************
3411   E986             ;* Will take all variables in RAM and dump them into the thread data 
3412   E986             ;* structure for next time. This gives the thread memory over executions
3413   E986             ;* until it is killed.
3414   E986             ;**************************************************************************			
3415   E986 DF BC       dump_thread		stx	temp3				;Now X points the the replacement address
3416   E988 DE CF       			ldx	current_thread		;Current VM Routine being run
3417   E98A A7 02       			staa	$02,X				;Timer For next Time
3418   E98C 96 BC       			ldaa	temp3
3419   E98E A7 0B       			staa	$0B,X
3420   E990 96 BD       			ldaa	temp3+1
3421   E992 A7 0C       			staa	$0C,X
3422   E994 E7 0F       			stab	$0F,X
3423   E996 96 BA       			ldaa	temp2
3424   E998 A7 0E       			staa	$0E,X
3425   E99A 96 B8       			ldaa	temp1
3426   E99C A7 10       			staa	$10,X
3427   E99E 96 B9       			ldaa	temp1+1
3428   E9A0 A7 11       			staa	$11,X
3429   E9A2 31          			ins	
3430   E9A3 31          			ins	
3431   E9A4 32          			pula
3432   E9A5 A7 0A       			staa	$0A,X
3433   E9A7 32          			pula
3434   E9A8 A7 09       			staa	$09,X
3435   E9AA 32          			pula
3436   E9AB A7 08       			staa	$08,X
3437   E9AD 32          			pula
3438   E9AE A7 07       			staa	$07,X
3439   E9B0 32          			pula
3440   E9B1 A7 06       			staa	$06,X
3441   E9B3 32          			pula
3442   E9B4 A7 05       			staa	$05,X
3443   E9B6 32          			pula
3444   E9B7 A7 04       			staa	$04,X
3445   E9B9 32          			pula
3446   E9BA A7 03       			staa	$03,X
3447   E9BC DE CF       			ldx	current_thread			;Current VM Routine being run
3448   E9BE             			begin
3448   E9BE             
3449   E9BE 8E 13 F7    				lds	#$13F7			;Restore the stack.
3450   E9C1 7E E9 3D    				jmp	nextthread			;Go check the Control Routine for another job.
3451   E9C4             				
3452   E9C4 CE 00 CB    killthread			ldx	#vm_base
3453   E9C7             				begin
3453   E9C7             
3454   E9C7 DF BA       					stx	temp2					;Thread that points to killed thread
3455   E9C9 EE 00       					ldx	$00,X
3456   E9CB             					ifeq
3456   E9CB             
3456   E9CB 26 FE       
3457   E9CD 7E E9 3A    						jmp	check_threads			;Nothing on VM
3458   E9D0             					endif
3458   E9D0             
3458   E9D0             
3458   E9D0             
3458   E9D0             
3458   E9D0             
3458   E9D0~            					endif
3458   E9D0~            					endif
3458   E9D0             
3458   E9D0~            					endif
3458   E9D0~            					endif
3458   E9D0             
3458   E9CC             
3458   E9CC 03          
3458   E9CD             
3458   E9CD             
3458   E9CD~            					endif
3458   E9CD~            					endif
3458   E9CD~            					endif
3458   E9CD             
3458   E9D0             
3458   E9D0~            					endif
3458   E9D0~            					endif
3458   E9D0             
3459   E9D0 9C CF       					cpx	current_thread			;Current VM Routine being run
3460   E9D2             				eqend						;If $B1 != *$00AD check next entry
3460   E9D2             
3460   E9D2             
3460   E9D2~            				eqend						;If $B1 != *$00AD check next entry
3460   E9D2~            				eqend						;If $B1 != *$00AD check next entry
3460   E9D2             
3460   E9D2 26 F3       
3460   E9D4             
3460   E9D4~            				eqend						;If $B1 != *$00AD check next entry
3460   E9D4~            				eqend						;If $B1 != *$00AD check next entry
3460   E9D4             
3461   E9D4 8D 56       				bsr	killthread_sp			;Remove Entry (X)($B1) From VM
3462   E9D6             			loopend
3462   E9D6             
3462   E9D6             
3462   E9D6~            			loopend
3462   E9D6~            			loopend
3462   E9D6             
3462   E9D6 20 E6       
3462   E9D8             
3462   E9D8~            			loopend
3462   E9D8~            			loopend
3462   E9D8             
3463   E9D8             			
3464   E9D8             ;****************************************************************************
3465   E9D8             ;* This is the main routine in charge of adding new threads to the
3466   E9D8             ;* virtual machine. The following variables are passed.
3467   E9D8             ;*
3468   E9D8             ;*	A: Pushed into VMregA
3469   E9D8             ;* 	B: Pushed into VMregB
3470   E9D8             ;*	X: Thread Initial Program Counter
3471   E9D8             ;* 	
3472   E9D8             ;* In addition, the following two variables contain data for the
3473   E9D8             ;* thread.
3474   E9D8             ;*	thread_priority:		Unique Identifier to classify thread
3475   E9D8             ;*	system_temp_word2:	???
3476   E9D8             ;*
3477   E9D8             ;* See header definition file for specifics on thread class structure
3478   E9D8             ;*
3479   E9D8             ;* Returns: Carry Cleared if New Thread was added
3480   E9D8             ;*          Carry Set if VM was full
3481   E9D8             ;*
3482   E9D8             ;**************************************************************************** 
3483   E9D8 DF B8       newthread_sp	stx	temp1
3484   E9DA 0D          			sec	
3485   E9DB DE CD       			ldx	vm_nextslot			;Get Next Available Slot Address
3486   E9DD             			ifne
3486   E9DD             
3486   E9DD 27 FE       
3487   E9DF 36          				psha	
3488   E9E0 A6 00       				ldaa	$00,X				;\
3489   E9E2 97 CD       				staa	vm_nextslot			;|---- Set New Next Available Slot Address
3490   E9E4 A6 01       				ldaa	$01,X				;|
3491   E9E6 97 CE       				staa	vm_nextslot+1		;/
3492   E9E8 DF BA       				stx	temp2				;Temp2 = New Thread Base Address
3493   E9EA DE D1       				ldx	vm_tail_thread		;This is the last thread in the vm, it has the tail
3494   E9EC A6 00       				ldaa	$00,X				;\
3495   E9EE 97 BC       				staa	temp3				;|
3496   E9F0 A6 01       				ldaa	$01,X				;|---- Store the running threads next pointer in temp3
3497   E9F2 97 BD       				staa	temp3+1			;/
3498   E9F4 96 BA       				ldaa	temp2				;\
3499   E9F6 A7 00       				staa	$00,X				;|
3500   E9F8 96 BB       				ldaa	temp2+1			;|---- Put the new thread into the running threads next pointer
3501   E9FA A7 01       				staa	$01,X				;/
3502   E9FC EE 00       				ldx	$00,X
3503   E9FE DF D1       				stx	vm_tail_thread		;Make the new thread the last thread
3504   EA00 96 BC       				ldaa	temp3				;\
3505   EA02 A7 00       				staa	$00,X				;|
3506   EA04 96 BD       				ldaa	temp3+1			;|---- Set the Next pointer of the new thread to the 
3507   EA06 A7 01       				staa	$01,X				;/     previous threads next pointer.
3508   EA08 96 B8       				ldaa	temp1
3509   EA0A A7 0B       				staa	$0B,X
3510   EA0C 96 B9       				ldaa	temp1+1
3511   EA0E A7 0C       				staa	$0C,X
3512   EA10 96 C8       				ldaa	thread_priority		;Store the priority
3513   EA12 A7 0D       				staa	$0D,X
3514   EA14 96 C4       				ldaa	sys_temp_w2			;Push variables from sys_temp_w2
3515   EA16 A7 10       				staa	$10,X
3516   EA18 96 C5       				ldaa	sys_temp_w2+1
3517   EA1A A7 11       				staa	$11,X
3518   EA1C 32          				pula	
3519   EA1D A7 0E       				staa	$0E,X				;Store reg A
3520   EA1F E7 0F       				stab	$0F,X				;Store reg B
3521   EA21 6F 02       				clr	$02,X				;Reset the counter
3522   EA23             			endif
3522   EA23             
3522   EA23             
3522   EA23             
3522   EA23             
3522   EA23             
3522   EA23~            			endif
3522   EA23~            			endif
3522   EA23             
3522   EA23~            			endif
3522   EA23~            			endif
3522   EA23             
3522   E9DE             
3522   E9DE 44          
3522   E9DF             
3522   E9DF             
3522   E9DF~            			endif
3522   E9DF~            			endif
3522   E9DF~            			endif
3522   E9DF             
3522   EA23             
3522   EA23~            			endif
3522   EA23~            			endif
3522   EA23             
3523   EA23 39          			rts	
3524   EA24             
3525   EA24 36          newthread_06	psha	
3526   EA25 86 06       			ldaa	#$06
3527   EA27 97 C8       			staa	thread_priority
3528   EA29 32          			pula	
3529   EA2A 20 AC       			bra	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
3530   EA2C             
3531   EA2C             ;***************************************************************************
3532   EA2C             ;* This will remove the current thread from the VM. 
3533   EA2C             ;*
3534   EA2C             ;* Requires: temp2 holds the thread that points to the thread to be killed	
3535   EA2C             ;***************************************************************************		
3536   EA2C 36          killthread_sp	psha	
3537   EA2D A6 00       			ldaa	$00,X					;\
3538   EA2F 97 B8       			staa	temp1					;|--  Get 'next'
3539   EA31 A6 01       			ldaa	$01,X					;|
3540   EA33 97 B9       			staa	temp1+1				;/
3541   EA35 96 CD       			ldaa	vm_nextslot				;\
3542   EA37 A7 00       			staa	$00,X					;|--  Kill this one by setting next to 0
3543   EA39 96 CE       			ldaa	vm_nextslot+1			;|
3544   EA3B A7 01       			staa	$01,X					;/
3545   EA3D DF CD       			stx	vm_nextslot				;Make this new blank spot the next one
3546   EA3F 9C D1       			cpx	vm_tail_thread			;Unless this was the tail thread
3547   EA41             			ifeq
3547   EA41             
3547   EA41 26 FE       
3548   EA43 DE CF       				ldx	current_thread			;Make the current thread the tail
3549   EA45 DF D1       				stx	vm_tail_thread
3550   EA47             			endif
3550   EA47             
3550   EA47             
3550   EA47             
3550   EA47             
3550   EA47             
3550   EA47~            			endif
3550   EA47~            			endif
3550   EA47             
3550   EA47~            			endif
3550   EA47~            			endif
3550   EA47             
3550   EA42             
3550   EA42 04          
3550   EA43             
3550   EA43             
3550   EA43~            			endif
3550   EA43~            			endif
3550   EA43~            			endif
3550   EA43             
3550   EA47             
3550   EA47~            			endif
3550   EA47~            			endif
3550   EA47             
3551   EA47 DE BA       			ldx	temp2					;Get Parent Thread
3552   EA49 96 B8       			ldaa	temp1					;Store killed thread 'next' into parents 'next'
3553   EA4B A7 00       			staa	$00,X
3554   EA4D 96 B9       			ldaa	temp1+1
3555   EA4F A7 01       			staa	$01,X
3556   EA51 32          			pula						;Save A
3557   EA52 39          			rts	
3558   EA53             
3559   EA53             ;*************************************************
3560   EA53             ;* Kill Single thread with the given ID
3561   EA53             ;*
3562   EA53             ;* Requires: 	A - Level Defintion
3563   EA53             ;* 			B - Select Mask
3564   EA53             ;* 
3565   EA53             ;* If B is $00, then all threads are cleared
3566   EA53             ;*************************************************			
3567   EA53 8D 0B       kill_thread		bsr	check_threadid		;Test Thread ID Mask
3568   EA55             			ifcc					;Return with Carry Set
3568   EA55             
3568   EA55 25 FE       
3569   EA57 8D D3       				bsr	killthread_sp		;Remove Entry (X)($B1) From VM
3570   EA59 0C          				clc	
3571   EA5A             			endif
3571   EA5A             
3571   EA5A             
3571   EA5A             
3571   EA5A             
3571   EA5A             
3571   EA5A~            			endif
3571   EA5A~            			endif
3571   EA5A             
3571   EA5A~            			endif
3571   EA5A~            			endif
3571   EA5A             
3571   EA56             
3571   EA56 03          
3571   EA57             
3571   EA57             
3571   EA57~            			endif
3571   EA57~            			endif
3571   EA57~            			endif
3571   EA57             
3571   EA5A             
3571   EA5A~            			endif
3571   EA5A~            			endif
3571   EA5A             
3572   EA5A 39          			rts
3573   EA5B             
3574   EA5B             ;*************************************************
3575   EA5B             ;* Kill All threads with the given Definition
3576   EA5B             ;*
3577   EA5B             ;* Requires:   A - EOR Mask Definition	
3578   EA5B             ;*             B - AND Mask Definition	
3579   EA5B             ;* 
3580   EA5B             ;* If result is not zero, then thread is killed
3581   EA5B             ;* If B = 0, then all threads are killed
3582   EA5B             ;* 
3583   EA5B             ;* Example:
3584   EA5B             ;* 
3585   EA5B             ;* Given two threads with priority $10 and $30
3586   EA5B             ;*
3587   EA5B             ;*     Thread 1:   0001 0000
3588   EA5B             ;*     Thread 2:   0011 0000
3589   EA5B             ;*
3590   EA5B             ;*  kill_threads with the following would result
3591   EA5B             ;*
3592   EA5B             ;*   A: 0011 0000 ($30)
3593   EA5B             ;*   B: 0011 0000 ($30)
3594   EA5B             ;*   This would kill Thread 2
3595   EA5B             ;*
3596   EA5B             ;*   A: 0001 0000 ($10)
3597   EA5B             ;*   B: 0011 0000 ($30)
3598   EA5B             ;*   This would kill Thread 1
3599   EA5B             ;*
3600   EA5B             ;*   A: 0010 0000 ($20)
3601   EA5B             ;*   B: 0011 0000 ($30)
3602   EA5B             ;*   This would kill Thread 1
3603   EA5B             ;*************************************************
3604   EA5B             kill_threads	begin
3604   EA5B             
3605   EA5B 8D F6       				bsr	kill_thread		;Kill first One
3606   EA5D             			csend				;Repeat if Carry Clear
3606   EA5D             
3606   EA5D             
3606   EA5D~            			csend				;Repeat if Carry Clear
3606   EA5D~            			csend				;Repeat if Carry Clear
3606   EA5D             
3606   EA5D 24 FC       
3606   EA5F             
3606   EA5F~            			csend				;Repeat if Carry Clear
3606   EA5F~            			csend				;Repeat if Carry Clear
3606   EA5F             
3607   EA5F 39          			rts
3608   EA60             
3609   EA60             ;*************************************************
3610   EA60             ;* Checks the VM thread list for threads that 
3611   EA60             ;* qualify agains the bitmasks defined in A and B.
3612   EA60             ;* If a thread qualifies, then this routine will
3613   EA60             ;* return with carry cleared.
3614   EA60             ;*************************************************		
3615   EA60 37          check_threadid	pshb	
3616   EA61 D7 B8       			stab	temp1
3617   EA63 CE 00 CB    			ldx	#vm_base		;Load Start Address
3618   EA66 DF BA       			stx	temp2			;Store it
3619   EA68 DE CB       			ldx	vm_base		;Load End Address
3620   EA6A 0D          pri_next		sec	
3621   EA6B             			ifne				;Branch if we have reached the end of the VM (Next = 0000)
3621   EA6B             
3621   EA6B 27 FE       
3622   EA6D 16          				tab	
3623   EA6E E8 0D       				eorb	threadobj_id,X		;EOR with Type Code in Current Routine
3624   EA70 53          				comb	
3625   EA71 D4 B8       				andb	temp1
3626   EA73 D1 B8       				cmpb	temp1
3627   EA75             				ifne				;Branch if Bits Dont work
3627   EA75             
3627   EA75 27 FE       
3628   EA77 DF BA       pri_skipme				stx	temp2
3629   EA79 EE 00       					ldx	threadobj_next,X
3630   EA7B 20 ED       					bra	pri_next		;Goto Next Thread ->
3631   EA7D             				endif
3631   EA7D             
3631   EA7D             
3631   EA7D             
3631   EA7D             
3631   EA7D             
3631   EA7D~            				endif
3631   EA7D~            				endif
3631   EA7D             
3631   EA7D~            				endif
3631   EA7D~            				endif
3631   EA7D             
3631   EA76             
3631   EA76 06          
3631   EA77             
3631   EA77             
3631   EA77~            				endif
3631   EA77~            				endif
3631   EA77~            				endif
3631   EA77             
3631   EA7D             
3631   EA7D~            				endif
3631   EA7D~            				endif
3631   EA7D             
3632   EA7D 9C CF       				cpx	current_thread	;Make sure it isn't this thread
3633   EA7F 27 F6       				beq	pri_skipme		;If it is this thread, skip it!
3634   EA81             			endif
3634   EA81             
3634   EA81             
3634   EA81             
3634   EA81             
3634   EA81             
3634   EA81~            			endif
3634   EA81~            			endif
3634   EA81             
3634   EA81~            			endif
3634   EA81~            			endif
3634   EA81             
3634   EA6C             
3634   EA6C 14          
3634   EA6D             
3634   EA6D             
3634   EA6D~            			endif
3634   EA6D~            			endif
3634   EA6D~            			endif
3634   EA6D             
3634   EA81             
3634   EA81~            			endif
3634   EA81~            			endif
3634   EA81             
3635   EA81 33          			pulb	
3636   EA82 39          			rts	
3637   EA83             	
3638   EA83             ;*****************************************************************	
3639   EA83             ;* Solenoid Queue Processing: This is the routine that is called
3640   EA83             ;* to fire a specific solenoid. It will add the solenoid to the 
3641   EA83             ;* queue. Works from top down. Solenoid Number is in A along with
3642   EA83             ;* data on how to handle solenoid. Format of A is ...
3643   EA83             ;*
3644   EA83             ;*  	XXXZZZZZ	Where: ZZZZZ is solenoid number 00-10d
3645   EA83             ;*                       XXX is timer/command
3646   EA83             ;*
3647   EA83             ;* NOTE: Hyperball only allows 8 solenoids + Shooter + BallLift
3648   EA83             ;*****************************************************************		
3649   EA83 36          solbuf		psha					;Push Solenoid #
3650   EA84 37          			pshb	
3651   EA85 DF B8       			stx	temp1				;Put X into Temp1
3652   EA87 DE B6       			ldx	solenoid_queue_pointer	;Check Solenoid Buffer
3653   EA89 8C 11 18    			cpx	#sol_queue	
3654   EA8C             			ifne					;Buffer not full
3654   EA8C             
3654   EA8C 27 FE       
3655   EA8E 0D          				sec					;Carry Set if Buffer Full
3656   EA8F 8C 11 28    				cpx	#sol_queue_end		;Buffer end
3657   EA92             				ifne
3657   EA92             
3657   EA92 27 FE       
3658   EA94 A7 00       _sb01					staa	$00,X				;Insert Solenoid Into Buffer
3659   EA96 08          					inx	
3660   EA97 DF B6       					stx	solenoid_queue_pointer	;Update Pointer
3661   EA99 0C          _sb02					clc					;Carry Cleared on Buffer Add
3662   EA9A             				endif
3662   EA9A             
3662   EA9A             
3662   EA9A             
3662   EA9A             
3662   EA9A             
3662   EA9A~            				endif
3662   EA9A~            				endif
3662   EA9A             
3662   EA9A~            				endif
3662   EA9A~            				endif
3662   EA9A             
3662   EA93             
3662   EA93 06          
3662   EA94             
3662   EA94             
3662   EA94~            				endif
3662   EA94~            				endif
3662   EA94~            				endif
3662   EA94             
3662   EA9A             
3662   EA9A~            				endif
3662   EA9A~            				endif
3662   EA9A             
3663   EA9A 33          				pulb	
3664   EA9B 32          				pula					;Pull Solenoid #
3665   EA9C DE B8       				ldx	temp1				;Get Back X
3666   EA9E 39          				rts	
3667   EA9F             			endif
3667   EA9F             
3667   EA9F             
3667   EA9F             
3667   EA9F             
3667   EA9F             
3667   EA9F~            			endif
3667   EA9F~            			endif
3667   EA9F             
3667   EA9F~            			endif
3667   EA9F~            			endif
3667   EA9F             
3667   EA8D             
3667   EA8D 11          
3667   EA8E             
3667   EA8E             
3667   EA8E~            			endif
3667   EA8E~            			endif
3667   EA8E~            			endif
3667   EA8E             
3667   EA9F             
3667   EA9F~            			endif
3667   EA9F~            			endif
3667   EA9F             
3668   EA9F D6 B2       			ldab	solenoid_counter		;Solenoid Counter
3669   EAA1 26 F1       			bne	_sb01
3670   EAA3 8D 02       			bsr	set_solenoid		;Turn On/Off Solenoid (Solenoid # in A)
3671   EAA5 20 F2       			bra	_sb02
3672   EAA7             
3673   EAA7             ;***************************************************
3674   EAA7             ;* Turns On/Off solenoid.
3675   EAA7             ;*
3676   EAA7             ;* Requires:	A - XXXXZZZZ
3677   EAA7             ;*					
3678   EAA7             ;* Where XXXX 	= Solenoid Timer/Command
3679   EAA7             ;*       ZZZZ	= Solenoid Number
3680   EAA7             ;*
3681   EAA7             ;* Example: A = 20 turns on solenoid #00 for 2 IRQ's
3682   EAA7             ;*              F8 turns on solenoid #08 idefinitely
3683   EAA7             ;*              C3 turns on solenoid #03 for 12 IRQ's
3684   EAA7             ;*              03 turns off solenoid #03 indefinitely
3685   EAA7             ;***************************************************
3686   EAA7 37          set_solenoid	pshb	
3687   EAA8 16          			tab	
3688   EAA9 C4 F0       			andb	#$F0
3689   EAAB             			ifne
3689   EAAB             
3689   EAAB 27 FE       
3690   EAAD C1 F0       				cmpb	#$F0
3691   EAAF             				ifne
3691   EAAF             
3691   EAAF 27 FE       
3692   EAB1             					;1-15 goes into counter
3693   EAB1 D7 B2       set_sol_counter			stab	solenoid_counter		;Restore Solenoid Counter to #E0
3694   EAB3 8D 1C       					bsr	soladdr			;Get Solenoid PIA address and bitpos
3695   EAB5 DF AF       					stx	solenoid_address
3696   EAB7 D7 B1       					stab	solenoid_bitpos
3697   EAB9             				else
3697   EAB9             
3697   EAB9             
3697   EAB9             
3697   EAB9             
3697   EAB0             
3697   EAB0             
3697   EAB0             
3697   EAB0~            				else
3697   EAB0~            				else
3697   EAB0~            				else
3697   EAB0~            				else
3697   EAB0             
3697   EAB0~            				else
3697   EAB0~            				else
3697   EAB0~            				else
3697   EAB0~            				else
3697   EAB0             
3697   EAB0             
3697   EAB0 0A          
3697   EAB9             
3697   EAB9 20 FE       
3697   EABB             
3697   EABB             
3697   EABB             
3697   EABB~            				else
3697   EABB~            				else
3697   EABB~            				else
3697   EABB~            				else
3697   EABB~            				else
3697   EABB             
3697   EABB~            				else
3697   EABB~            				else
3697   EABB             
3697   EABB~            				else
3697   EABB~            				else
3697   EABB             
3698   EABB             					;Do it now... if at 0
3699   EABB 8D 14       					bsr	soladdr			;Get Solenoid PIA address and bitpos
3700   EABD             				endif
3700   EABD             
3700   EABD             
3700   EABD             
3700   EABD             
3700   EABD             
3700   EABD~            				endif
3700   EABD~            				endif
3700   EABD             
3700   EABD~            				endif
3700   EABD~            				endif
3700   EABD             
3700   EABA             
3700   EABA 02          
3700   EABB             
3700   EABB             
3700   EABB~            				endif
3700   EABB~            				endif
3700   EABB~            				endif
3700   EABB             
3700   EABD             
3700   EABD~            				endif
3700   EABD~            				endif
3700   EABD             
3701   EABD 25 0C       				bcs	set_ss_on			;Carry Set: Special Solenoid, these work in reverse
3702   EABF             				;Here to turn solenoid ON
3703   EABF 0F          set_ss_off			sei	
3704   EAC0 EA 00       				orab	$00,X
3705   EAC2 E7 00       set_s_pia			stab	$00,X			;Write Solenoid Data to PIA
3706   EAC4 0E          				cli	
3707   EAC5 33          				pulb	
3708   EAC6 39          				rts					;Outta here!
3709   EAC7             			endif
3709   EAC7             
3709   EAC7             
3709   EAC7             
3709   EAC7             
3709   EAC7             
3709   EAC7~            			endif
3709   EAC7~            			endif
3709   EAC7             
3709   EAC7~            			endif
3709   EAC7~            			endif
3709   EAC7             
3709   EAAC             
3709   EAAC 1A          
3709   EAAD             
3709   EAAD             
3709   EAAD~            			endif
3709   EAAD~            			endif
3709   EAAD~            			endif
3709   EAAD             
3709   EAC7             
3709   EAC7~            			endif
3709   EAC7~            			endif
3709   EAC7             
3710   EAC7 8D 08       			bsr	soladdr				;Get Solenoid PIA address and bitpos
3711   EAC9 25 F4       			bcs	set_ss_off				;Special Solenoids work in reverse
3712   EACB             			;Here to turn solenoid OFF			
3713   EACB 53          set_ss_on		comb	
3714   EACC 0F          			sei	
3715   EACD E4 00       			andb	$00,X
3716   EACF 20 F1       			bra	set_s_pia				;Store it now.
3717   EAD1             
3718   EAD1             			;*************************************************
3719   EAD1             ;* Get Physical Address and Bitposition of 
3720   EAD1             ;* solenoid number.
3721   EAD1             ;*
3722   EAD1             ;* Requires:	A - Solenoid Number
3723   EAD1             ;* Output:		B - PIA bit position
3724   EAD1             ;*			X - PIA address
3725   EAD1             ;*************************************************	
3726   EAD1 84 0F       soladdr		anda	#$0F				;Mask to under 16 Solenoids
3727   EAD3 CE 22 02    			ldx	#pia_sol_high_data
3728   EAD6 81 07       			cmpa	#$07				;Normal solenoids or ball shooter/ball lift
3729   EAD8             			ifgt					;Get Regular Solenoid Address (PIA)
3729   EAD8             
3729   EAD8 2F FE       
3730   EADA 08          				inx
3731   EADB C6 08       				ldab	#$08
3732   EADD 11          				cba
3733   EADE             				ifeq
3733   EADE             
3733   EADE 26 FE       
3734   EAE0             					;this is the ball shooter coil
3735   EAE0 CE 22 01    					ldx   #pia_sol_low_ctrl
3736   EAE3 0D          					sec 
3737   EAE4             				endif
3737   EAE4             
3737   EAE4             
3737   EAE4             
3737   EAE4             
3737   EAE4             
3737   EAE4~            				endif
3737   EAE4~            				endif
3737   EAE4             
3737   EAE4~            				endif
3737   EAE4~            				endif
3737   EAE4             
3737   EADF             
3737   EADF 04          
3737   EAE0             
3737   EAE0             
3737   EAE0~            				endif
3737   EAE0~            				endif
3737   EAE0~            				endif
3737   EAE0             
3737   EAE4             
3737   EAE4~            				endif
3737   EAE4~            				endif
3737   EAE4             
3738   EAE4 39          				rts	
3739   EAE5             			endif
3739   EAE5             
3739   EAE5             
3739   EAE5             
3739   EAE5             
3739   EAE5             
3739   EAE5~            			endif
3739   EAE5~            			endif
3739   EAE5             
3739   EAE5~            			endif
3739   EAE5~            			endif
3739   EAE5             
3739   EAD9             
3739   EAD9 0B          
3739   EADA             
3739   EADA             
3739   EADA~            			endif
3739   EADA~            			endif
3739   EADA~            			endif
3739   EADA             
3739   EAE5             
3739   EAE5~            			endif
3739   EAE5~            			endif
3739   EAE5             
3740   EAE5             			
3741   EAE5             
3742   EAE5             ;********************************************************
3743   EAE5             ;* Convert Hex value in A to a single bit positioned at
3744   EAE5             ;* the value of (A&7). Bitpos is returned in B
3745   EAE5             ;*
3746   EAE5             ;* Requires:	Data in A
3747   EAE5             ;* Protects:	A,X
3748   EAE5             ;* Destroys:	B
3749   EAE5             ;* Output:		Bitpos in B
3750   EAE5             ;********************************************************
3751   EAE5 36          hex2bitpos		psha	
3752   EAE6 84 07       			anda	#$07
3753   EAE8 5F          			clrb	
3754   EAE9 0D          			sec	
3755   EAEA             			begin
3755   EAEA             
3756   EAEA 59          				rolb	
3757   EAEB 4A          				deca	
3758   EAEC             			miend
3758   EAEC             
3758   EAEC             
3758   EAEC~            			miend
3758   EAEC~            			miend
3758   EAEC             
3758   EAEC 2A FC       
3758   EAEE             
3758   EAEE~            			miend
3758   EAEE~            			miend
3758   EAEE             
3759   EAEE 32          			pula	
3760   EAEF 39          			rts	
3761   EAF0             
3762   EAF0             ;********************************************************
3763   EAF0             ;* Checks the current score shown and updates the comma
3764   EAF0             ;* flags accordingly to show the relavant ones.
3765   EAF0             ;********************************************************			
3766   EAF0 40 04 80 08 comma_million	.db $40,$04,$80,$08
3767   EAF4 10 01 20 02 comma_thousand	.db $10,$01,$20,$02
3768   EAF8             
3769   EAF8 C6 40       update_commas	ldab	#$40				;Million digit
3770   EAFA 8D 2B       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
3771   EAFC             			ifeq					;Branch if it is already set
3771   EAFC             
3771   EAFC 26 FE       
3772   EAFE DE EC       				ldx	pscore_buf			;Start of Current Player Score Buffer
3773   EB00 E6 00       				ldab	$00,X
3774   EB02 5C          				incb	
3775   EB03             				ifne					;Is MSD at FF (blank0?
3775   EB03             
3775   EB03 27 FE       
3776   EB05 CE EA F0    					ldx	#comma_million		;No.. we have a million digit.
3777   EB08 8D 11       					bsr	set_comma_bit		;Set the appropriate bit
3778   EB0A             				endif
3778   EB0A             
3778   EB0A             
3778   EB0A             
3778   EB0A             
3778   EB0A             
3778   EB0A~            				endif
3778   EB0A~            				endif
3778   EB0A             
3778   EB0A~            				endif
3778   EB0A~            				endif
3778   EB0A             
3778   EB04             
3778   EB04 05          
3778   EB05             
3778   EB05             
3778   EB05~            				endif
3778   EB05~            				endif
3778   EB05~            				endif
3778   EB05             
3778   EB0A             
3778   EB0A~            				endif
3778   EB0A~            				endif
3778   EB0A             
3779   EB0A             			endif
3779   EB0A             
3779   EB0A             
3779   EB0A             
3779   EB0A             
3779   EB0A             
3779   EB0A~            			endif
3779   EB0A~            			endif
3779   EB0A             
3779   EB0A~            			endif
3779   EB0A~            			endif
3779   EB0A             
3779   EAFD             
3779   EAFD 0C          
3779   EAFE             
3779   EAFE             
3779   EAFE~            			endif
3779   EAFE~            			endif
3779   EAFE~            			endif
3779   EAFE             
3779   EB0A             
3779   EB0A~            			endif
3779   EB0A~            			endif
3779   EB0A             
3780   EB0A C6 08       			ldab	#$08				;1000's Digit
3781   EB0C 8D 19       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
3782   EB0E             			ifeq
3782   EB0E             
3782   EB0E 26 FE       
3783   EB10 DE EC       				ldx	pscore_buf			;Start of Current Player Score Buffer
3784   EB12 E6 02       				ldab	$02,X
3785   EB14 C1 F0       				cmpb	#$F0
3786   EB16             				ifcs
3786   EB16             
3786   EB16 24 FE       
3787   EB18 CE EA F4    					ldx	#comma_thousand			;Get the appropriate bit for the thousand digit	
3788   EB1B 96 EB       set_comma_bit			ldaa	player_up				;Current Player Up (0-3)
3789   EB1D BD EE 3E    					jsr	xplusa				;X = X + A
3790   EB20 A6 00       					ldaa	$00,X
3791   EB22 9A 7C       					oraa	comma_flags
3792   EB24 97 7C       					staa	comma_flags
3793   EB26             				endif
3793   EB26             
3793   EB26             
3793   EB26             
3793   EB26             
3793   EB26             
3793   EB26~            				endif
3793   EB26~            				endif
3793   EB26             
3793   EB26~            				endif
3793   EB26~            				endif
3793   EB26             
3793   EB17             
3793   EB17 0E          
3793   EB18             
3793   EB18             
3793   EB18~            				endif
3793   EB18~            				endif
3793   EB18~            				endif
3793   EB18             
3793   EB26             
3793   EB26~            				endif
3793   EB26~            				endif
3793   EB26             
3794   EB26             			endif
3794   EB26             
3794   EB26             
3794   EB26             
3794   EB26             
3794   EB26             
3794   EB26~            			endif
3794   EB26~            			endif
3794   EB26             
3794   EB26~            			endif
3794   EB26~            			endif
3794   EB26             
3794   EB0F             
3794   EB0F 16          
3794   EB10             
3794   EB10             
3794   EB10~            			endif
3794   EB10~            			endif
3794   EB10~            			endif
3794   EB10             
3794   EB26             
3794   EB26~            			endif
3794   EB26~            			endif
3794   EB26             
3795   EB26 39          			rts	
3796   EB27             			
3797   EB27             
3798   EB27 96 EB       test_mask_b		ldaa	player_up				;Current Player Up (0-1)
3799   EB29 CE 00 78    			ldx	#dmask_p1
3800   EB2C BD EE 3E    			jsr	xplusa				;X = X + A
3801   EB2F E5 00       			bitb	$00,X
3802   EB31 39          			rts	
3803   EB32             
3804   EB32             
3805   EB32             ;**********************************************************
3806   EB32             ;* Point based sounds (chime type).
3807   EB32             ;**********************************************************			
3808   EB32 36          isnd_pts		psha	
3809   EB33 17          			tba	
3810   EB34 20 03       			bra	snd_pts
3811   EB36 36          dsnd_pts		psha	
3812   EB37 84 07       			anda	#$07
3813   EB39 BD EC 3B    snd_pts		jsr	isnd_once			;Play Sound Index(A) Once
3814   EB3C 32          			pula
3815   EB3D             			;Fall Through to points 
3816   EB3D             
3817   EB3D 36          score_main		psha	
3818   EB3E 37          			pshb	
3819   EB3F 7A 00 F5    			dec	randomseed			;Change the Random # seed
3820   EB42 DF F6       			stx	x_temp_1			;Protect X
3821   EB44 BD D0 B4    			jsr	gr_score_event		;Check Game ROM Hook
3822   EB47 D6 E8       			ldab	random_bool
3823   EB49             			ifeq
3823   EB49             
3823   EB49 26 FE       
3824   EB4B 73 00 E8    				com	random_bool
3825   EB4E             			endif
3825   EB4E             
3825   EB4E             
3825   EB4E             
3825   EB4E             
3825   EB4E             
3825   EB4E~            			endif
3825   EB4E~            			endif
3825   EB4E             
3825   EB4E~            			endif
3825   EB4E~            			endif
3825   EB4E             
3825   EB4A             
3825   EB4A 03          
3825   EB4B             
3825   EB4B             
3825   EB4B~            			endif
3825   EB4B~            			endif
3825   EB4B~            			endif
3825   EB4B             
3825   EB4E             
3825   EB4E~            			endif
3825   EB4E~            			endif
3825   EB4E             
3826   EB4E 8D 0A       			bsr	score_update		;Add Points to Current Score, Data in A:
3827   EB50 8D A6       			bsr	update_commas		;Update Master Display Toggle From Current Player
3828   EB52 BD EB E9    			jsr	checkreplay			;Check Current Player Score against all Replay Levels
3829   EB55 DE F6       			ldx	x_temp_1			;Get it back
3830   EB57 33          			pulb	
3831   EB58 32          			pula	
3832   EB59 39          			rts	
3833   EB5A             			
3834   EB5A             
3835   EB5A             ;**********************************************
3836   EB5A             ; Update Score Routine: Score to add is in A
3837   EB5A             ;**********************************************
3838   EB5A DE EC       score_update	ldx	pscore_buf			;Start of Current Player Score Buffer
3839   EB5C EE 00       			ldx	$00,X				;Get XX,XX_,b__
3840   EB5E DF FC       			stx	x_temp_2			;Store it!
3841   EB60 DE EC       			ldx	pscore_buf			;Start of Current Player Score Buffer
3842   EB62 C6 04       			ldab	#$04
3843   EB64 D7 F4       			stab	flag_timer_bip		;Run Ball Play Timer (Audit)
3844   EB66 D7 BE       			stab	sys_temp1			;Number of Ram Location to iterate (4)
3845   EB68 97 C0       			staa	sys_temp3
3846   EB6A 5F          			clrb	
3847   EB6B D7 C1       			stab	sys_temp4
3848   EB6D D7 BF       			stab	sys_temp2
3849   EB6F 16          			tab					;Get Points data
3850   EB70 C4 07       			andb	#$07
3851   EB72 26 27       _su01			bne	_su04
3852   EB74 5C          			incb	
3853   EB75 D7 BC       			stab	temp3				;Store (data&07)+1
3854   EB77 D6 C0       _su02			ldab	sys_temp3
3855   EB79 54          			lsrb	
3856   EB7A 54          			lsrb	
3857   EB7B 54          			lsrb	
3858   EB7C 8D 45       			bsr	score2hex			;Convert MSD Blanks to 0's on (X+03)
3859   EB7E             			begin
3859   EB7E             
3860   EB7E 9B BC       				adda	temp3				;(data&07)+1
3861   EB80 8D 3A       				bsr	hex2dec			;Decimal Adjust A, sys_temp2 incremented if A flipped
3862   EB82 5A          				decb					
3863   EB83             			eqend
3863   EB83             
3863   EB83             
3863   EB83~            			eqend
3863   EB83~            			eqend
3863   EB83             
3863   EB83 26 F9       
3863   EB85             
3863   EB85~            			eqend
3863   EB85~            			eqend
3863   EB85             
3864   EB85 D6 BF       _su03			ldab	sys_temp2
3865   EB87 27 26       			beq	_su05			;A didn't Flip, Branch.
3866   EB89 A7 03       			staa	$03,X			;Store this digit
3867   EB8B 09          			dex	
3868   EB8C 7A 00 BE    			dec	sys_temp1			;Do next set of digits
3869   EB8F             			ifne
3869   EB8F             
3869   EB8F 27 FE       
3870   EB91 8D 30       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
3871   EB93 7F 00 BF    				clr	sys_temp2
3872   EB96 1B          				aba	
3873   EB97 8D 23       				bsr	hex2dec				;Decimal Adjust A, sys_temp2 incremented if A flipped
3874   EB99 20 EA       				bra	_su03
3875   EB9B 5A          _su04				decb	
3876   EB9C             				ifeq
3876   EB9C             
3876   EB9C 26 FE       
3877   EB9E C6 10       					ldab	#$10
3878   EBA0 D7 BC       					stab	temp3
3879   EBA2 20 D3       					bra	_su02
3880   EBA4             				endif
3880   EBA4             
3880   EBA4             
3880   EBA4             
3880   EBA4             
3880   EBA4             
3880   EBA4~            				endif
3880   EBA4~            				endif
3880   EBA4             
3880   EBA4~            				endif
3880   EBA4~            				endif
3880   EBA4             
3880   EB9D             
3880   EB9D 06          
3880   EB9E             
3880   EB9E             
3880   EB9E~            				endif
3880   EB9E~            				endif
3880   EB9E~            				endif
3880   EB9E             
3880   EBA4             
3880   EBA4~            				endif
3880   EBA4~            				endif
3880   EBA4             
3881   EBA4 8D 1D       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
3882   EBA6 A7 03       				staa	$03,X
3883   EBA8 7A 00 BE    				dec	sys_temp1
3884   EBAB 09          				dex	
3885   EBAC 5A          				decb	
3886   EBAD 20 C3       				bra	_su01
3887   EBAF D6 C1       _su05				ldab	sys_temp4
3888   EBB1             				ifne
3888   EBB1             
3888   EBB1 27 FE       
3889   EBB3 81 10       					cmpa	#$10
3890   EBB5             					ifcs
3890   EBB5             
3890   EBB5 24 FE       
3891   EBB7 8B F0       						adda	#$F0
3892   EBB9             					endif
3892   EBB9             
3892   EBB9             
3892   EBB9             
3892   EBB9             
3892   EBB9             
3892   EBB9~            					endif
3892   EBB9~            					endif
3892   EBB9             
3892   EBB9~            					endif
3892   EBB9~            					endif
3892   EBB9             
3892   EBB6             
3892   EBB6 02          
3892   EBB7             
3892   EBB7             
3892   EBB7~            					endif
3892   EBB7~            					endif
3892   EBB7~            					endif
3892   EBB7             
3892   EBB9             
3892   EBB9~            					endif
3892   EBB9~            					endif
3892   EBB9             
3893   EBB9             				endif
3893   EBB9             
3893   EBB9             
3893   EBB9             
3893   EBB9             
3893   EBB9             
3893   EBB9~            				endif
3893   EBB9~            				endif
3893   EBB9             
3893   EBB9~            				endif
3893   EBB9~            				endif
3893   EBB9             
3893   EBB2             
3893   EBB2 06          
3893   EBB3             
3893   EBB3             
3893   EBB3~            				endif
3893   EBB3~            				endif
3893   EBB3~            				endif
3893   EBB3             
3893   EBB9             
3893   EBB9~            				endif
3893   EBB9~            				endif
3893   EBB9             
3894   EBB9 A7 03       				staa	$03,X
3895   EBBB             			endif
3895   EBBB             
3895   EBBB             
3895   EBBB             
3895   EBBB             
3895   EBBB             
3895   EBBB~            			endif
3895   EBBB~            			endif
3895   EBBB             
3895   EBBB~            			endif
3895   EBBB~            			endif
3895   EBBB             
3895   EB90             
3895   EB90 2A          
3895   EB91             
3895   EB91             
3895   EB91~            			endif
3895   EB91~            			endif
3895   EB91~            			endif
3895   EB91             
3895   EBBB             
3895   EBBB~            			endif
3895   EBBB~            			endif
3895   EBBB             
3896   EBBB 39          			rts	
3897   EBBC             
3898   EBBC             ;******************************************************************************
3899   EBBC             ; Convert Hex to Decimal: If value was above 9 then sys_temp2 is incremented 
3900   EBBC             ;******************************************************************************
3901   EBBC 19          hex2dec		daa	
3902   EBBD             			ifcs
3902   EBBD             
3902   EBBD 24 FE       
3903   EBBF 7C 00 BF    				inc	sys_temp2
3904   EBC2             			endif
3904   EBC2             
3904   EBC2             
3904   EBC2             
3904   EBC2             
3904   EBC2             
3904   EBC2~            			endif
3904   EBC2~            			endif
3904   EBC2             
3904   EBC2~            			endif
3904   EBC2~            			endif
3904   EBC2             
3904   EBBE             
3904   EBBE 03          
3904   EBBF             
3904   EBBF             
3904   EBBF~            			endif
3904   EBBF~            			endif
3904   EBBF~            			endif
3904   EBBF             
3904   EBC2             
3904   EBC2~            			endif
3904   EBC2~            			endif
3904   EBC2             
3905   EBC2 39          			rts	
3906   EBC3             
3907   EBC3 A6 03       score2hex		ldaa	$03,X
3908   EBC5 4C          			inca	
3909   EBC6             			ifne					;Leave if both digits are blanked
3909   EBC6             
3909   EBC6 27 FE       
3910   EBC8 4A          				deca	
3911   EBC9 81 F0       				cmpa	#$F0
3912   EBCB 25 05       				bcs	sh_exit			;if A was less than #F0
3913   EBCD 8B 10       				adda	#$10				;Set High Digit to a 0
3914   EBCF             			endif
3914   EBCF             
3914   EBCF             
3914   EBCF             
3914   EBCF             
3914   EBCF             
3914   EBCF~            			endif
3914   EBCF~            			endif
3914   EBCF             
3914   EBCF~            			endif
3914   EBCF~            			endif
3914   EBCF             
3914   EBC7             
3914   EBC7 07          
3914   EBC8             
3914   EBC8             
3914   EBC8~            			endif
3914   EBC8~            			endif
3914   EBC8~            			endif
3914   EBC8             
3914   EBCF             
3914   EBCF~            			endif
3914   EBCF~            			endif
3914   EBCF             
3915   EBCF 7C 00 C1    			inc	sys_temp4			;Digit was cleared
3916   EBD2 39          sh_exit		rts 
3917   EBD3             
3918   EBD3             ;**************************************************************
3919   EBD3             ;* Add points to Scoring Queue
3920   EBD3             ;**************************************************************	
3921   EBD3 36          add_points		psha	
3922   EBD4 37          			pshb	
3923   EBD5 16          			tab	
3924   EBD6 C4 07       			andb	#$07
3925   EBD8 CE 11 30    			ldx	#score_queue_end	
3926   EBDB             			begin
3926   EBDB             
3927   EBDB 09          				dex	
3928   EBDC 5A          				decb	
3929   EBDD             			miend
3929   EBDD             
3929   EBDD             
3929   EBDD~            			miend
3929   EBDD~            			miend
3929   EBDD             
3929   EBDD 2A FC       
3929   EBDF             
3929   EBDF~            			miend
3929   EBDF~            			miend
3929   EBDF             
3930   EBDF 44          			lsra	
3931   EBE0 44          			lsra	
3932   EBE1 44          			lsra	
3933   EBE2 AB 00       			adda	$00,X
3934   EBE4 A7 00       			staa	$00,X
3935   EBE6 33          			pulb	
3936   EBE7 32          			pula	
3937   EBE8 39          			rts	
3938   EBE9              
3939   EBE9             ;**********************************************************
3940   EBE9             ;* Checks the current player score against the energy base
3941   EBE9             ;* award level multiplier. 
3942   EBE9             ;**********************************************************
3943   EBE9 CE 00 FC    checkreplay		ldx	#x_temp_2
3944   EBEC 8D 31       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
3945   EBEE D7 FC       			stab	x_temp_2
3946   EBF0 DE EC       			ldx	pscore_buf			;Current Player Score Buffer Pointer
3947   EBF2 8D 2B       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
3948   EBF4 01          			nop
3949   EBF5 01          			nop
3950   EBF6 01          			nop
3951   EBF7 01          			nop
3952   EBF8 BD FA F1    			jsr	get_aud_baseawd		;loads the P1 or P1 audit location for base awards
3953   EBFB BD EE 92    			jsr	cmosinc_a
3954   EBFE 11          			cba
3955   EBFF             			iflo
3955   EBFF             
3955   EBFF 22 FE       
3956   EC01 91 FC       				cmpa	x_temp_2
3957   EC03             				ifge
3957   EC03             
3957   EC03 23 FE       
3958   EC05 DF C8       					stx	thread_priority
3959   EC07 01          					nop
3960   EC08 01          					nop
3961   EC09 01          					nop
3962   EC0A 01          					nop
3963   EC0B 01          					nop
3964   EC0C 01          					nop
3965   EC0D CE 01 52    					ldx	#(aud_replay1times + 2)
3966   EC10 01          					nop
3967   EC11 BD F7 E7    					jsr	ptrx_plus_1			;add 1 to address in X
3968   EC14 DE C8       					ldx	thread_priority
3969   EC16 BD F7 4C    					jsr	award_replay
3970   EC19             				endif
3970   EC19             
3970   EC19             
3970   EC19             
3970   EC19             
3970   EC19             
3970   EC19~            				endif
3970   EC19~            				endif
3970   EC19             
3970   EC19~            				endif
3970   EC19~            				endif
3970   EC19             
3970   EC04             
3970   EC04 14          
3970   EC05             
3970   EC05             
3970   EC05~            				endif
3970   EC05~            				endif
3970   EC05~            				endif
3970   EC05             
3970   EC19             
3970   EC19~            				endif
3970   EC19~            				endif
3970   EC19             
3971   EC19             			endif
3971   EC19             
3971   EC19             
3971   EC19             
3971   EC19             
3971   EC19             
3971   EC19~            			endif
3971   EC19~            			endif
3971   EC19             
3971   EC19~            			endif
3971   EC19~            			endif
3971   EC19             
3971   EC00             
3971   EC00 18          
3971   EC01             
3971   EC01             
3971   EC01~            			endif
3971   EC01~            			endif
3971   EC01~            			endif
3971   EC01             
3971   EC19             
3971   EC19~            			endif
3971   EC19~            			endif
3971   EC19             
3972   EC19 01          			nop
3973   EC1A 01          			nop
3974   EC1B 01          			nop
3975   EC1C 01          			nop
3976   EC1D 01          			nop
3977   EC1E 39          			rts
3978   EC1F             			
3979   EC1F             ;*********************************************************
3980   EC1F             ;* Load Million and Hundred Thousand Score digits into
3981   EC1F             ;* A and B. Player score buffer pointer is in X. Routine
3982   EC1F             ;* will convert blanks($ff) into 0's
3983   EC1F             ;*********************************************************			
3984   EC1F A6 00       get_hs_digits	ldaa	$00,X
3985   EC21 84 0F       			anda	#$0F
3986   EC23 E6 01       			ldab	$01,X
3987   EC25 8D 04       			bsr	b_plus10		;If B minus then B = B + 0x10
3988   EC27 8D 09       			bsr	split_ab		;Shift A<<4 B>>4
3989   EC29 1B          			aba	
3990   EC2A 16          			tab
3991   EC2B C1 A0       b_plus10		cmpb	#$A0
3992   EC2D             			ifcc
3992   EC2D             
3992   EC2D 25 FE       
3993   EC2F CB 10       				addb	#$10
3994   EC31             			endif
3994   EC31             
3994   EC31             
3994   EC31             
3994   EC31             
3994   EC31             
3994   EC31~            			endif
3994   EC31~            			endif
3994   EC31             
3994   EC31~            			endif
3994   EC31~            			endif
3994   EC31             
3994   EC2E             
3994   EC2E 02          
3994   EC2F             
3994   EC2F             
3994   EC2F~            			endif
3994   EC2F~            			endif
3994   EC2F~            			endif
3994   EC2F             
3994   EC31             
3994   EC31~            			endif
3994   EC31~            			endif
3994   EC31             
3995   EC31 39          			rts	
3996   EC32             			
3997   EC32             ;*********************************************************
3998   EC32             ;* Shifts A and B to convert million and hundred thousand
3999   EC32             ;* score digits into a single byte.
4000   EC32             ;*********************************************************
4001   EC32 48          split_ab		asla	
4002   EC33 48          			asla	
4003   EC34 48          			asla	
4004   EC35 48          			asla	
4005   EC36 54          			lsrb	
4006   EC37 54          			lsrb	
4007   EC38 54          			lsrb	
4008   EC39 54          			lsrb	
4009   EC3A 39          			rts	 
4010   EC3B             
4011   EC3B             ;*********************************************************
4012   EC3B             ;* Sound Routines 
4013   EC3B             ;*********************************************************
4014   EC3B             ;* isnd_once - will play index sound in A one time by 
4015   EC3B             ;*             loading B with 01 and calling the main
4016   EC3B             ;*             sound subroutine.
4017   EC3B             ;*********************************************************			
4018   EC3B 37          isnd_once		pshb	
4019   EC3C C6 01       			ldab	#$01
4020   EC3E 8D 02       			bsr	sound_sub
4021   EC40 33          			pulb	
4022   EC41 39          			rts
4023   EC42             
4024   EC42             ;*********************************************************
4025   EC42             ;* This is the main sound subroutine. It will play index
4026   EC42             ;* sound contained in A, B times.
4027   EC42             ;*********************************************************				
4028   EC42 DF C8       sound_sub		stx	thread_priority
4029   EC44 36          			psha	
4030   EC45 37          			pshb	
4031   EC46 D6 DF       			ldab	sys_soundflags			;Sound Status
4032   EC48 27 1C       			beq	b_04E					;Goto Sound Routine #2
4033   EC4A 16          			tab						
4034   EC4B 48          			asla	
4035   EC4C 1B          			aba	                              ;A=A*3
4036   EC4D FE D0 53    			ldx	gr_soundtable_ptr			;Game ROM Table: Sounds
4037   EC50 BD EE 3E    			jsr	xplusa				;X = X + A
4038   EC53 A6 02       			ldaa	$02,X                         ;get the actual sound command that will be sent
4039   EC55 4C          			inca	
4040   EC56             			ifeq						;If value is $FF, then this is complex sound
4040   EC56             
4040   EC56 26 FE       
4041   EC58 EE 00       				ldx	$00,X
4042   EC5A             			endif
4042   EC5A             
4042   EC5A             
4042   EC5A             
4042   EC5A             
4042   EC5A             
4042   EC5A~            			endif
4042   EC5A~            			endif
4042   EC5A             
4042   EC5A~            			endif
4042   EC5A~            			endif
4042   EC5A             
4042   EC57             
4042   EC57 02          
4042   EC58             
4042   EC58             
4042   EC58~            			endif
4042   EC58~            			endif
4042   EC58~            			endif
4042   EC58             
4042   EC5A             
4042   EC5A~            			endif
4042   EC5A~            			endif
4042   EC5A             
4043   EC5A A6 00       			ldaa	$00,X
4044   EC5C D6 D8       			ldab	cur_sndflags
4045   EC5E C5 40       			bitb	#$40
4046   EC60             			ifeq
4046   EC60             
4046   EC60 26 FE       
4047   EC62 8D 1D       				bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
4048   EC64             				ifcc
4048   EC64             
4048   EC64 25 FE       
4049   EC66 33          b_04E					pulb	
4050   EC67 32          					pula	
4051   EC68 20 2A       					bra	b_051
4052   EC6A             				endif
4052   EC6A             
4052   EC6A             
4052   EC6A             
4052   EC6A             
4052   EC6A             
4052   EC6A~            				endif
4052   EC6A~            				endif
4052   EC6A             
4052   EC6A~            				endif
4052   EC6A~            				endif
4052   EC6A             
4052   EC65             
4052   EC65 04          
4052   EC66             
4052   EC66             
4052   EC66~            				endif
4052   EC66~            				endif
4052   EC66~            				endif
4052   EC66             
4052   EC6A             
4052   EC6A~            				endif
4052   EC6A~            				endif
4052   EC6A             
4053   EC6A             			endif
4053   EC6A             
4053   EC6A             
4053   EC6A             
4053   EC6A             
4053   EC6A             
4053   EC6A~            			endif
4053   EC6A~            			endif
4053   EC6A             
4053   EC6A~            			endif
4053   EC6A~            			endif
4053   EC6A             
4053   EC61             
4053   EC61 08          
4053   EC62             
4053   EC62             
4053   EC62~            			endif
4053   EC62~            			endif
4053   EC62~            			endif
4053   EC62             
4053   EC6A             
4053   EC6A~            			endif
4053   EC6A~            			endif
4053   EC6A             
4054   EC6A 4D          b_050			tsta	
4055   EC6B 2A 6B       			bpl	snd_exit_pull			;pula,pulb,rts.
4056   EC6D D6 E4       			ldab	next_sndcnt
4057   EC6F             			ifne
4057   EC6F             
4057   EC6F 27 FE       
4058   EC71 D6 E3             			ldab	next_sndflags
4059   EC73 8D 0C             			bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
4060   EC75 25 61             			bcs	snd_exit_pull			;pula,pulb,rts.
4061   EC77                   		endif
4061   EC77             
4061   EC77             
4061   EC77             
4061   EC77             
4061   EC77             
4061   EC77~                  		endif
4061   EC77~                  		endif
4061   EC77             
4061   EC77~                  		endif
4061   EC77~                  		endif
4061   EC77             
4061   EC70             
4061   EC70 06          
4061   EC71             
4061   EC71             
4061   EC71~                  		endif
4061   EC71~                  		endif
4061   EC71~                  		endif
4061   EC71             
4061   EC77             
4061   EC77~                  		endif
4061   EC77~                  		endif
4061   EC77             
4062   EC77 97 E3       			staa	next_sndflags
4063   EC79 33          			pulb	
4064   EC7A 32          			pula	
4065   EC7B 97 E5       			staa	next_sndcmd
4066   EC7D D7 E4       			stab	next_sndcnt
4067   EC7F 20 59       			bra	snd_exit					;rts
4068   EC81             			
4069   EC81 36          isnd_test		psha	
4070   EC82 37          			pshb	
4071   EC83 84 0F       			anda	#$0F
4072   EC85 C4 0F       			andb	#$0F
4073   EC87 11          			cba	
4074   EC88 33          			pulb	
4075   EC89 32          			pula	
4076   EC8A             			ifeq
4076   EC8A             
4076   EC8A 26 FE       
4077   EC8C C5 20       				bitb	#$20
4078   EC8E             				ifeq
4078   EC8E             
4078   EC8E 26 FE       
4079   EC90 0D          					sec
4080   EC91             				endif
4080   EC91             
4080   EC91             
4080   EC91             
4080   EC91             
4080   EC91             
4080   EC91~            				endif
4080   EC91~            				endif
4080   EC91             
4080   EC91~            				endif
4080   EC91~            				endif
4080   EC91             
4080   EC8F             
4080   EC8F 01          
4080   EC90             
4080   EC90             
4080   EC90~            				endif
4080   EC90~            				endif
4080   EC90~            				endif
4080   EC90             
4080   EC91             
4080   EC91~            				endif
4080   EC91~            				endif
4080   EC91             
4081   EC91             			endif
4081   EC91             
4081   EC91             
4081   EC91             
4081   EC91             
4081   EC91             
4081   EC91~            			endif
4081   EC91~            			endif
4081   EC91             
4081   EC91~            			endif
4081   EC91~            			endif
4081   EC91             
4081   EC8B             
4081   EC8B 05          
4081   EC8C             
4081   EC8C             
4081   EC8C~            			endif
4081   EC8C~            			endif
4081   EC8C~            			endif
4081   EC8C             
4081   EC91             
4081   EC91~            			endif
4081   EC91~            			endif
4081   EC91             
4082   EC91 39          			rts
4083   EC92             			
4084   EC92             ;A=sound command
4085   EC92             ;B=count
4086   EC92 DF C8       isnd_mult		stx	thread_priority
4087   EC94 36          b_051			psha	
4088   EC95 37          			pshb	
4089   EC96 D7 D6       			stab	soundcount
4090   EC98 16          			tab	                              ;store our sound in B temporarily
4091   EC99 86 7F       			ldaa	#$7F
4092   EC9B 8D 42       			bsr	send_snd				;Send Sound Stop Command
4093   EC9D 17          			tba	                              ;get it back
4094   EC9E 97 E0       			staa	soundindex				;Sound Command Table Index
4095   ECA0 48          			asla	
4096   ECA1 1B          			aba						;Index * 3
4097   ECA2 FE D0 53    			ldx	gr_soundtable_ptr			;Game ROM: Sound Table Pointer
4098   ECA5 BD EE 3E    isnd_mult_x		jsr	xplusa				;X = X + A
4099   ECA8 A6 02       			ldaa	$02,X					;Sound Command
4100   ECAA 81 FF       			cmpa	#$FF
4101   ECAC             			ifne						;Simple Sound
4101   ECAC             
4101   ECAC 27 FE       
4102   ECAE E6 00       				ldab	$00,X
4103   ECB0 C4 7F       				andb	#$7F
4104   ECB2 D7 D8       				stab	cur_sndflags			
4105   ECB4 E6 01       				ldab	$01,X
4106   ECB6 D7 DC       				stab	soundirqcount+1			
4107   ECB8 7F 00 DB    				clr	soundirqcount
4108   ECBB DE DB       				ldx	soundirqcount			;Clear the MSB of the word counter ($BD,$BE)
4109   ECBD DF DD       				stx	soundindex_com			;Store the whole counter in the Common Sound Index
4110   ECBF C6 40       				ldab	#$40
4111   ECC1 D7 DF       				stab	sys_soundflags			;Sound Flag?
4112   ECC3 8D 18       				bsr	send_snd_save			;Send the Command, Save in 'lastsound'
4113   ECC5             			else						;Complex Sound
4113   ECC5             
4113   ECC5             
4113   ECC5             
4113   ECC5             
4113   ECAD             
4113   ECAD             
4113   ECAD             
4113   ECAD~            			else						;Complex Sound
4113   ECAD~            			else						;Complex Sound
4113   ECAD~            			else						;Complex Sound
4113   ECAD~            			else						;Complex Sound
4113   ECAD             
4113   ECAD~            			else						;Complex Sound
4113   ECAD~            			else						;Complex Sound
4113   ECAD~            			else						;Complex Sound
4113   ECAD~            			else						;Complex Sound
4113   ECAD             
4113   ECAD             
4113   ECAD 19          
4113   ECC5             
4113   ECC5 20 FE       
4113   ECC7             
4113   ECC7             
4113   ECC7             
4113   ECC7~            			else						;Complex Sound
4113   ECC7~            			else						;Complex Sound
4113   ECC7~            			else						;Complex Sound
4113   ECC7~            			else						;Complex Sound
4113   ECC7~            			else						;Complex Sound
4113   ECC7             
4113   ECC7~            			else						;Complex Sound
4113   ECC7~            			else						;Complex Sound
4113   ECC7             
4113   ECC7~            			else						;Complex Sound
4113   ECC7~            			else						;Complex Sound
4113   ECC7             
4114   ECC7 EE 00       				ldx	$00,X					;Here if Complex Sound Command
4115   ECC9 C6 80       				ldab	#$80
4116   ECCB D7 DF       				stab	sys_soundflags			;Set Status Flag
4117   ECCD EA 00       				orab	$00,X
4118   ECCF D7 D8       				stab	cur_sndflags
4119   ECD1 08          				inx	
4120   ECD2 DF DD       				stx	soundindex_com
4121   ECD4 DF D9       				stx	soundptr
4122   ECD6 8D 0E       				bsr	do_complex_snd			;Process it and send
4123   ECD8             			endif
4123   ECD8             
4123   ECD8             
4123   ECD8             
4123   ECD8             
4123   ECD8             
4123   ECD8~            			endif
4123   ECD8~            			endif
4123   ECD8             
4123   ECD8~            			endif
4123   ECD8~            			endif
4123   ECD8             
4123   ECC6             
4123   ECC6 11          
4123   ECC7             
4123   ECC7             
4123   ECC7~            			endif
4123   ECC7~            			endif
4123   ECC7~            			endif
4123   ECC7             
4123   ECD8             
4123   ECD8~            			endif
4123   ECD8~            			endif
4123   ECD8             
4124   ECD8 33          snd_exit_pull	pulb	
4125   ECD9 32          			pula	
4126   ECDA DE C8       snd_exit		ldx	thread_priority
4127   ECDC 39          			rts	
4128   ECDD             
4129   ECDD             ;*****************************************************************
4130   ECDD             ;* Send the command to the sound board, stores the command sent
4131   ECDD             ;* in 'lastsound' for reference.
4132   ECDD             ;*****************************************************************			
4133   ECDD 97 D7       send_snd_save	staa	lastsound
4134   ECDF BD D0 B2    send_snd		jsr	gr_sound_event			
4135   ECE2 B7 21 00    			staa	pia_sound_data
4136   ECE5 39          			rts	
4137   ECE6             
4138   ECE6             ;*****************************************************************
4139   ECE6             ;* This routine will send the next item in a complex sound
4140   ECE6             ;* index to the Sound board PIA.
4141   ECE6             ;*****************************************************************			
4142   ECE6 DE D9       do_complex_snd	ldx	soundptr
4143   ECE8 A6 00       _csnd_loop		ldaa	$00,X				;Load the first byte of this sequence
4144   ECEA 16          			tab	
4145   ECEB C4 C0       			andb	#$C0
4146   ECED             			ifne					;Check bits $80 or $40
4146   ECED             
4146   ECED 27 FE       
4147   ECEF             				ifpl				;If bit $80 is set, then sound is immediate
4147   ECEF             
4147   ECEF 2B FE       
4148   ECF1 84 3F       					anda	#$3F
4149   ECF3 97 E1       					staa	csound_timer
4150   ECF5 08          					inx	
4151   ECF6 A6 00       					ldaa	$00,X
4152   ECF8 97 E2       b_05B					staa	csound_timer+1
4153   ECFA 96 D8       					ldaa	cur_sndflags
4154   ECFC 84 EF       					anda	#$EF			;Flag this sound as non-immediate (timer based)
4155   ECFE 97 D8       store_csndflg			staa	cur_sndflags	;Store Flag
4156   ED00 08          					inx	
4157   ED01 20 E5       					bra	_csnd_loop
4158   ED03             				endif
4158   ED03             
4158   ED03             
4158   ED03             
4158   ED03             
4158   ED03             
4158   ED03~            				endif
4158   ED03~            				endif
4158   ED03             
4158   ED03~            				endif
4158   ED03~            				endif
4158   ED03             
4158   ECF0             
4158   ECF0 12          
4158   ECF1             
4158   ECF1             
4158   ECF1~            				endif
4158   ECF1~            				endif
4158   ECF1~            				endif
4158   ECF1             
4158   ED03             
4158   ED03~            				endif
4158   ED03~            				endif
4158   ED03             
4159   ED03 7F 00 E1    				clr	csound_timer
4160   ED06 84 7F       				anda	#$7F
4161   ED08 26 EE       				bne	b_05B			;If the timer is not zero, then flag this sound as non-immediate
4162   ED0A 96 D8       				ldaa	cur_sndflags
4163   ED0C 8A 10       				oraa	#$10			;Flag as non-immediate
4164   ED0E 20 EE       				bra	store_csndflg
4165   ED10             			endif
4165   ED10             
4165   ED10             
4165   ED10             
4165   ED10             
4165   ED10             
4165   ED10~            			endif
4165   ED10~            			endif
4165   ED10             
4165   ED10~            			endif
4165   ED10~            			endif
4165   ED10             
4165   ECEE             
4165   ECEE 21          
4165   ECEF             
4165   ECEF             
4165   ECEF~            			endif
4165   ECEF~            			endif
4165   ECEF~            			endif
4165   ECEF             
4165   ED10             
4165   ED10~            			endif
4165   ED10~            			endif
4165   ED10             
4166   ED10 8D CB       			bsr	send_snd_save		;Send the Command, Save in 'lastsound'
4167   ED12 08          			inx	
4168   ED13 DF D9       			stx	soundptr			;Move pointer to next byte
4169   ED15 A6 00       			ldaa	$00,X
4170   ED17 81 3F       			cmpa	#$3F				;Are we done?
4171   ED19             			ifeq
4171   ED19             
4171   ED19 26 FE       
4172   ED1B 96 D8       				ldaa	cur_sndflags		;Yes 
4173   ED1D 84 7F       				anda	#$7F				;Mark it as a simple sound now
4174   ED1F 97 D8       				staa	cur_sndflags
4175   ED21             			endif
4175   ED21             
4175   ED21             
4175   ED21             
4175   ED21             
4175   ED21             
4175   ED21~            			endif
4175   ED21~            			endif
4175   ED21             
4175   ED21~            			endif
4175   ED21~            			endif
4175   ED21             
4175   ED1A             
4175   ED1A 06          
4175   ED1B             
4175   ED1B             
4175   ED1B~            			endif
4175   ED1B~            			endif
4175   ED1B~            			endif
4175   ED1B             
4175   ED21             
4175   ED21~            			endif
4175   ED21~            			endif
4175   ED21             
4176   ED21 DE E1       			ldx	csound_timer
4177   ED23 DF DB       			stx	soundirqcount
4178   ED25 39          			rts	
4179   ED26             
4180   ED26             ;**********************************************************
4181   ED26             ;* This routine will check two of the switch flags in the
4182   ED26             ;* B register (byte 1 of switch table). If the switch 
4183   ED26             ;* is disabled for either flag (tilt and gameover) then
4184   ED26             ;* the routine returns with the carry flag set.
4185   ED26             ;**********************************************************			
4186   ED26 36          check_sw_mask	psha	
4187   ED27 B6 D0 4D    			ldaa	gr_lastswitch			;Last Switch # for Game
4188   ED2A 91 C3       			cmpa	sw_encoded				;Switch #
4189   ED2C             			ifge						;Out of Range!
4189   ED2C             
4189   ED2C 23 FE       
4190   ED2E C5 40       				bitb	#$40					;Flag 40: Active on Game Tilt
4191   ED30             				ifeq
4191   ED30             
4191   ED30 26 FE       
4192   ED32 7D 00 E6    					tst	flag_tilt				;Tilt Flag
4193   ED35 26 09       					bne	sw_ignore
4194   ED37             				endif
4194   ED37             
4194   ED37             
4194   ED37             
4194   ED37             
4194   ED37             
4194   ED37~            				endif
4194   ED37~            				endif
4194   ED37             
4194   ED37~            				endif
4194   ED37~            				endif
4194   ED37             
4194   ED31             
4194   ED31 05          
4194   ED32             
4194   ED32             
4194   ED32~            				endif
4194   ED32~            				endif
4194   ED32~            				endif
4194   ED32             
4194   ED37             
4194   ED37~            				endif
4194   ED37~            				endif
4194   ED37             
4195   ED37 C5 20       				bitb	#$20					;Flag 20: Active on Game Over
4196   ED39 26 06       				bne	sw_active
4197   ED3B 7D 00 E7    				tst	flag_gameover			;Game Over?
4198   ED3E 27 01       				beq	sw_active
4199   ED40             			endif
4199   ED40             
4199   ED40             
4199   ED40             
4199   ED40             
4199   ED40             
4199   ED40~            			endif
4199   ED40~            			endif
4199   ED40             
4199   ED40~            			endif
4199   ED40~            			endif
4199   ED40             
4199   ED2D             
4199   ED2D 12          
4199   ED2E             
4199   ED2E             
4199   ED2E~            			endif
4199   ED2E~            			endif
4199   ED2E~            			endif
4199   ED2E             
4199   ED40             
4199   ED40~            			endif
4199   ED40~            			endif
4199   ED40             
4200   ED40 0D          sw_ignore		sec						;Ignore this switch when carry is set
4201   ED41 32          sw_active		pula	
4202   ED42 39          			rts
4203   ED43             
4204   ED43             ;**********************************************************
4205   ED43             ;* Switch is in down position, see if we should run it.
4206   ED43             ;**********************************************************			
4207   ED43 BD EE 36    sw_down		jsr	sw_tbl_lookup		;Loads X with pointer to switch table entry
4208   ED46 E6 00       			ldab	$00,X				;GAME ROM Switch Data 1(Flags,etc)
4209   ED48 96 C2       			ldaa	sys_temp5
4210   ED4A 95 C0       			bita	sys_temp3
4211   ED4C 27 06       			beq	sw_dtime			;Is switch still down?
4212   ED4E C5 08       			bitb	#$08				;No, but check Flag 08 which is Instant Trigger
4213   ED50             			ifne					;Not instant,.. leave now.
4213   ED50             
4213   ED50 27 FE       
4214   ED52 20 04       				bra	sw_trig_yes			;Must have been instant, do it now.	
4215   ED54 C5 10       sw_dtime			bitb	#$10				;Switch has been down enough, but is it enabled?
4216   ED56             				ifne					;no.. leave now.
4216   ED56             
4216   ED56 27 FE       
4217   ED58 8D CC       sw_trig_yes				bsr	check_sw_mask		;Checks Switch Flags for Tilt and Gameover and if switch is in range
4218   ED5A             					ifcc					;If not okay to run... leave
4218   ED5A             
4218   ED5A 25 FE       
4219   ED5C 4F          						clra	
4220   ED5D C5 40       						bitb	#$40				;Is it Active on Game Tilt?
4221   ED5F             						ifne					
4221   ED5F             
4221   ED5F 27 FE       
4222   ED61 8A 04       							oraa	#$04				;Give this thread a different priority then
4223   ED63             						endif
4223   ED63             
4223   ED63             
4223   ED63             
4223   ED63             
4223   ED63             
4223   ED63~            						endif
4223   ED63~            						endif
4223   ED63             
4223   ED63~            						endif
4223   ED63~            						endif
4223   ED63             
4223   ED60             
4223   ED60 02          
4223   ED61             
4223   ED61             
4223   ED61~            						endif
4223   ED61~            						endif
4223   ED61~            						endif
4223   ED61             
4223   ED63             
4223   ED63~            						endif
4223   ED63~            						endif
4223   ED63             
4224   ED63 97 C8       						staa	thread_priority
4225   ED65 96 C3       						ldaa	sw_encoded			;Switch # (encoded)
4226   ED67 EE 01       						ldx	$01,X
4227   ED69 C5 07       						bitb	#$07				;Was this a inline defined switch type? Type = 0
4228   ED6B             						ifeq					;Always?
4228   ED6B             
4228   ED6B 26 FE       
4229   ED6D EE 02       							ldx	$02,X				;Get handler address at base pointer + 2
4230   ED6F             						endif
4230   ED6F             
4230   ED6F             
4230   ED6F             
4230   ED6F             
4230   ED6F             
4230   ED6F~            						endif
4230   ED6F~            						endif
4230   ED6F             
4230   ED6F~            						endif
4230   ED6F~            						endif
4230   ED6F             
4230   ED6C             
4230   ED6C 02          
4230   ED6D             
4230   ED6D             
4230   ED6D~            						endif
4230   ED6D~            						endif
4230   ED6D~            						endif
4230   ED6D             
4230   ED6F             
4230   ED6F~            						endif
4230   ED6F~            						endif
4230   ED6F             
4231   ED6F 5D          						tstb					;Is the handler code WML7 or Native?
4232   ED70             						ifmi					;Minus = WML7
4232   ED70             
4232   ED70 2A FE       
4233   ED72 DF C4       							stx	sys_temp_w2			;X = Handler Address
4234   ED74 CE F4 52    							ldx	#macro_next		;Will put this routine into VM.
4235   ED77             						endif
4235   ED77             
4235   ED77             
4235   ED77             
4235   ED77             
4235   ED77             
4235   ED77~            						endif
4235   ED77~            						endif
4235   ED77             
4235   ED77~            						endif
4235   ED77~            						endif
4235   ED77             
4235   ED71             
4235   ED71 05          
4235   ED72             
4235   ED72             
4235   ED72~            						endif
4235   ED72~            						endif
4235   ED72~            						endif
4235   ED72             
4235   ED77             
4235   ED77~            						endif
4235   ED77~            						endif
4235   ED77             
4236   ED77 BD D0 B0    						jsr	gr_switch_event		;Game ROM switch event hook
4237   ED7A BD E9 D8    						jsr	newthread_sp		;Push VM: Data in A,B,X,threadpriority,$A6,$A7
4238   ED7D 25 69       						bcs	_clc_rts			;Carry set if VM was full and thread not added
4239   ED7F             											;Exit now and don't mark switch as attended too.
4240   ED7F             					endif
4240   ED7F             
4240   ED7F             
4240   ED7F             
4240   ED7F             
4240   ED7F             
4240   ED7F~            					endif
4240   ED7F~            					endif
4240   ED7F             
4240   ED7F~            					endif
4240   ED7F~            					endif
4240   ED7F             
4240   ED5B             
4240   ED5B 23          
4240   ED5C             
4240   ED5C             
4240   ED5C~            					endif
4240   ED5C~            					endif
4240   ED5C~            					endif
4240   ED5C             
4240   ED7F             
4240   ED7F~            					endif
4240   ED7F~            					endif
4240   ED7F             
4241   ED7F             				endif
4241   ED7F             
4241   ED7F             
4241   ED7F             
4241   ED7F             
4241   ED7F             
4241   ED7F~            				endif
4241   ED7F~            				endif
4241   ED7F             
4241   ED7F~            				endif
4241   ED7F~            				endif
4241   ED7F             
4241   ED57             
4241   ED57 27          
4241   ED58             
4241   ED58             
4241   ED58~            				endif
4241   ED58~            				endif
4241   ED58~            				endif
4241   ED58             
4241   ED7F             
4241   ED7F~            				endif
4241   ED7F~            				endif
4241   ED7F             
4242   ED7F             			endif
4242   ED7F             
4242   ED7F             
4242   ED7F             
4242   ED7F             
4242   ED7F             
4242   ED7F~            			endif
4242   ED7F~            			endif
4242   ED7F             
4242   ED7F~            			endif
4242   ED7F~            			endif
4242   ED7F             
4242   ED51             
4242   ED51 2D          
4242   ED52             
4242   ED52             
4242   ED52~            			endif
4242   ED52~            			endif
4242   ED52~            			endif
4242   ED52             
4242   ED7F             
4242   ED7F~            			endif
4242   ED7F~            			endif
4242   ED7F             
4243   ED7F DE BE       			ldx	sys_temp1
4244   ED81 96 C0       			ldaa	sys_temp3
4245   ED83 A8 7D       			eora	switch_debounced,X		;Clear Switch Matrix Flag (switch attended too)
4246   ED85 A7 7D       			staa	switch_debounced,X
4247   ED87 DE BE       sw_proc		ldx	sys_temp1
4248   ED89 D6 C0       			ldab	sys_temp3
4249   ED8B 53          			comb	
4250   ED8C 17          			tba	
4251   ED8D E4 85       			andb	switch_masked,X
4252   ED8F E7 85       			stab	switch_masked,X
4253   ED91 16          			tab	
4254   ED92 E4 8D       			andb	switch_pending,X
4255   ED94 E7 8D       			stab	switch_pending,X
4256   ED96 16          			tab	
4257   ED97 A4 95       			anda	switch_aux,X
4258   ED99 A7 95       			staa	switch_aux,X
4259   ED9B E4 9D       			andb	switch_b4,X
4260   ED9D E7 9D       			stab	switch_b4,X
4261   ED9F 39          			rts	
4262   EDA0             			
4263   EDA0             ;****************************************************************************
4264   EDA0             ;*
4265   EDA0             ;****************************************************************************			
4266   EDA0 DF BE       check_sw_close	stx	sys_temp1
4267   EDA2 E6 7D       			ldab	switch_debounced,X
4268   EDA4 D7 C2       			stab	sys_temp5				;Store 
4269   EDA6 97 C1       			staa	sys_temp4
4270   EDA8 8D 2D       _sc01			bsr	getswitch				;Clear Carry if Switch Active or Done
4271   EDAA 25 28       			bcs	to_ldx_rts				;get outta here!
4272   EDAC 8D 3C       			bsr	sw_pack				;$A5 = ($A1<<3)+BitPos($A2)
4273   EDAE 8D 6A       			bsr	sw_get_time				;Gets Switch Trigger Data
4274   EDB0             			ifne						;If it is not 0 then we must time it
4274   EDB0             
4274   EDB0 27 FE       
4275   EDB2 9B CA       				adda	irqcount				;Number of IRQ's since last loop
4276   EDB4 DE B4       				ldx	switch_queue_pointer
4277   EDB6 8C 11 18    				cpx	#switch_queue_end
4278   EDB9 27 ED       				beq	_sc01
4279   EDBB A7 00       				staa	$00,X
4280   EDBD 96 C3       				ldaa	sw_encoded				;Encoded Switch Number
4281   EDBF A7 01       				staa	$01,X
4282   EDC1 08          				inx	
4283   EDC2 08          				inx	
4284   EDC3 DF B4       				stx	switch_queue_pointer
4285   EDC5 DE BE       				ldx	sys_temp1
4286   EDC7 A6 9D       				ldaa	switch_b4,X
4287   EDC9 9A C0       				oraa	sys_temp3
4288   EDCB A7 9D       				staa	switch_b4,X
4289   EDCD 20 D9       				bra	_sc01
4290   EDCF             			endif
4290   EDCF             
4290   EDCF             
4290   EDCF             
4290   EDCF             
4290   EDCF             
4290   EDCF~            			endif
4290   EDCF~            			endif
4290   EDCF             
4290   EDCF~            			endif
4290   EDCF~            			endif
4290   EDCF             
4290   EDB1             
4290   EDB1 1D          
4290   EDB2             
4290   EDB2             
4290   EDB2~            			endif
4290   EDB2~            			endif
4290   EDB2~            			endif
4290   EDB2             
4290   EDCF             
4290   EDCF~            			endif
4290   EDCF~            			endif
4290   EDCF             
4291   EDCF BD ED 43    			jsr	sw_down				;Ready to do switch now!
4292   EDD2 20 D4       			bra	_sc01
4293   EDD4 DE BE       to_ldx_rts		ldx	sys_temp1
4294   EDD6 39          			rts
4295   EDD7             			
4296   EDD7             ;****************************************************************************
4297   EDD7             ;*
4298   EDD7             ;****************************************************************************				
4299   EDD7 4F          getswitch		clra	
4300   EDD8 0D          			sec	
4301   EDD9 D6 C1       			ldab	sys_temp4			;Switch Data
4302   EDDB             			ifne
4302   EDDB             
4302   EDDB 27 FE       
4303   EDDD             				begin
4303   EDDD             
4304   EDDD 49          					rola	
4305   EDDE 95 C1       					bita	sys_temp4
4306   EDE0             				neend
4306   EDE0             
4306   EDE0             
4306   EDE0~            				neend
4306   EDE0~            				neend
4306   EDE0             
4306   EDE0 27 FB       
4306   EDE2             
4306   EDE2~            				neend
4306   EDE2~            				neend
4306   EDE2             
4307   EDE2 97 C0       				staa	sys_temp3
4308   EDE4 98 C1       				eora	sys_temp4
4309   EDE6 97 C1       				staa	sys_temp4
4310   EDE8 0C          _clc_rts			clc	
4311   EDE9             			endif
4311   EDE9             
4311   EDE9             
4311   EDE9             
4311   EDE9             
4311   EDE9             
4311   EDE9~            			endif
4311   EDE9~            			endif
4311   EDE9             
4311   EDE9~            			endif
4311   EDE9~            			endif
4311   EDE9             
4311   EDDC             
4311   EDDC 0C          
4311   EDDD             
4311   EDDD             
4311   EDDD~            			endif
4311   EDDD~            			endif
4311   EDDD~            			endif
4311   EDDD             
4311   EDE9             
4311   EDE9~            			endif
4311   EDE9~            			endif
4311   EDE9             
4312   EDE9 39          			rts 
4313   EDEA             
4314   EDEA             ;****************************************************************************
4315   EDEA             ;* Takes the decimal representation of the switch number contained in 
4316   EDEA             ;* sys_temp2 and sys_temp3 and converts it into a more compact form of 
4317   EDEA             ;* 	
4318   EDEA             ;* AAAAABBB
4319   EDEA             ;* 
4320   EDEA             ;* where AAAAA is the column number of the switch (sw 17 = 2)
4321   EDEA             ;*       BBB   is the bit position of the current switch (sw 17 = $01)
4322   EDEA             ;****************************************************************************	
4323   EDEA 96 BF       sw_pack		ldaa	sys_temp2
4324   EDEC 48          			asla	
4325   EDED 48          			asla	
4326   EDEE 48          			asla	
4327   EDEF D6 C0       			ldab	sys_temp3
4328   EDF1             			begin
4328   EDF1             
4329   EDF1 56          				rorb	
4330   EDF2 25 03       				bcs	pack_done
4331   EDF4 4C          				inca	
4332   EDF5             			loopend
4332   EDF5             
4332   EDF5             
4332   EDF5~            			loopend
4332   EDF5~            			loopend
4332   EDF5             
4332   EDF5 20 FA       
4332   EDF7             
4332   EDF7~            			loopend
4332   EDF7~            			loopend
4332   EDF7             
4333   EDF7 97 C3       pack_done		staa	sw_encoded
4334   EDF9 39          			rts
4335   EDFA             
4336   EDFA             ;****************************************************************************
4337   EDFA             ;*
4338   EDFA             ;****************************************************************************				
4339   EDFA 97 C1       check_sw_open	staa	sys_temp4
4340   EDFC DF BE       			stx	sys_temp1
4341   EDFE 8D D7       next_switch		bsr	getswitch				;Clear Carry if Switch Activated
4342   EE00 25 D2       			bcs	to_ldx_rts				;ldx $A0, rts.
4343   EE02 8D E6       			bsr	sw_pack				;$A5(A) = ($A1<<3)+BitPos($A2) Encode Matrix Position
4344   EE04 CE 11 00    			ldx	#switch_queue
4345   EE07             			begin
4345   EE07             
4346   EE07 9C B4       				cpx	switch_queue_pointer
4347   EE09 27 F3       				beq	next_switch
4348   EE0B A1 01       				cmpa	$01,X					;Is this switch in the buffer?
4349   EE0D             				ifeq
4349   EE0D             
4349   EE0D 26 FE       
4350   EE0F 8D 3D       					bsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
4351   EE11 BD ED 87    					jsr	sw_proc
4352   EE14 20 E8       					bra	next_switch
4353   EE16             				endif
4353   EE16             
4353   EE16             
4353   EE16             
4353   EE16             
4353   EE16             
4353   EE16~            				endif
4353   EE16~            				endif
4353   EE16             
4353   EE16~            				endif
4353   EE16~            				endif
4353   EE16             
4353   EE0E             
4353   EE0E 07          
4353   EE0F             
4353   EE0F             
4353   EE0F~            				endif
4353   EE0F~            				endif
4353   EE0F~            				endif
4353   EE0F             
4353   EE16             
4353   EE16~            				endif
4353   EE16~            				endif
4353   EE16             
4354   EE16 08          				inx	
4355   EE17 08          				inx	
4356   EE18             			loopend
4356   EE18             
4356   EE18             
4356   EE18~            			loopend
4356   EE18~            			loopend
4356   EE18             
4356   EE18 20 ED       
4356   EE1A             
4356   EE1A~            			loopend
4356   EE1A~            			loopend
4356   EE1A             
4357   EE1A             
4358   EE1A             
4359   EE1A             ;****************************************************************************
4360   EE1A             ;* Looks up the trigger data (time up and time down requirements) for the
4361   EE1A             ;* switch contained in 'sw_encoded'. If the switch table lists the trigger
4362   EE1A             ;* type as 0, then the trigger data is pulled from the location in bytes
4363   EE1A             ;* 2 and 3 of the switch table entry.
4364   EE1A             ;****************************************************************************				
4365   EE1A 8D 1A       sw_get_time		bsr	sw_tbl_lookup		;X = Data@ (E051 + $A5*3)
4366   EE1C A6 00       			ldaa	$00,X
4367   EE1E 84 07       			anda	#$07				;Get the trigger type for this switch
4368   EE20             			ifne					;If 1-7, then look up data in switch type table
4368   EE20             
4368   EE20 27 FE       
4369   EE22 48          				asla						
4370   EE23 CE D0 64    				ldx	#gr_switchtypetable-2		;Game ROM Table: Switch Trigger Table
4371   EE26 8D 16       				bsr	xplusa				;X = X + A
4372   EE28             			else					;Otherwise, this switch has inline trigger data pointer
4372   EE28             
4372   EE28             
4372   EE28             
4372   EE28             
4372   EE21             
4372   EE21             
4372   EE21             
4372   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE21             
4372   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE21             
4372   EE21             
4372   EE21 08          
4372   EE28             
4372   EE28 20 FE       
4372   EE2A             
4372   EE2A             
4372   EE2A             
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A             
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A             
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
4372   EE2A             
4373   EE2A EE 01       				ldx	$01,X
4374   EE2C             			endif
4374   EE2C             
4374   EE2C             
4374   EE2C             
4374   EE2C             
4374   EE2C             
4374   EE2C~            			endif
4374   EE2C~            			endif
4374   EE2C             
4374   EE2C~            			endif
4374   EE2C~            			endif
4374   EE2C             
4374   EE29             
4374   EE29 02          
4374   EE2A             
4374   EE2A             
4374   EE2A~            			endif
4374   EE2A~            			endif
4374   EE2A~            			endif
4374   EE2A             
4374   EE2C             
4374   EE2C~            			endif
4374   EE2C~            			endif
4374   EE2C             
4375   EE2C 96 C2       			ldaa	sys_temp5			;Matrix Data
4376   EE2E 94 C0       			anda	sys_temp3			;Bit Position
4377   EE30             			ifne
4377   EE30             
4377   EE30 27 FE       
4378   EE32 08          				inx					;Point to Switch Close Trigger data instead
4379   EE33             			endif
4379   EE33             
4379   EE33             
4379   EE33             
4379   EE33             
4379   EE33             
4379   EE33~            			endif
4379   EE33~            			endif
4379   EE33             
4379   EE33~            			endif
4379   EE33~            			endif
4379   EE33             
4379   EE31             
4379   EE31 01          
4379   EE32             
4379   EE32             
4379   EE32~            			endif
4379   EE32~            			endif
4379   EE32~            			endif
4379   EE32             
4379   EE33             
4379   EE33~            			endif
4379   EE33~            			endif
4379   EE33             
4380   EE33 A6 00       			ldaa	$00,X				;Load Trigger Data
4381   EE35 39          			rts
4382   EE36             			
4383   EE36 96 C3       sw_tbl_lookup	ldaa	sw_encoded
4384   EE38 16          			tab	
4385   EE39 48          			asla					;Times 3 for switch table entry length
4386   EE3A 1B          			aba	
4387   EE3B FE D0 51    			ldx	gr_switchtable_ptr		;*** Table Pointer ***
4388   EE3E 36          xplusa		psha	
4389   EE3F DF C4       			stx	sys_temp_w2
4390   EE41 9B C5       			adda	sys_temp_w2+1
4391   EE43 97 C5       			staa	sys_temp_w2+1
4392   EE45             			ifcs
4392   EE45             
4392   EE45 24 FE       
4393   EE47 7C 00 C4    				inc	sys_temp_w2
4394   EE4A             			endif 
4394   EE4A             
4394   EE4A             
4394   EE4A             
4394   EE4A             
4394   EE4A             
4394   EE4A~            			endif 
4394   EE4A~            			endif 
4394   EE4A             
4394   EE4A~            			endif 
4394   EE4A~            			endif 
4394   EE4A             
4394   EE46             
4394   EE46 03          
4394   EE47             
4394   EE47             
4394   EE47~            			endif 
4394   EE47~            			endif 
4394   EE47~            			endif 
4394   EE47             
4394   EE4A             
4394   EE4A~            			endif 
4394   EE4A~            			endif 
4394   EE4A             
4395   EE4A DE C4       			ldx	sys_temp_w2
4396   EE4C 32          			pula	
4397   EE4D 39          			rts	  
4398   EE4E             
4399   EE4E DF C4       copy_word		stx	sys_temp_w2
4400   EE50 DE B4       			ldx	switch_queue_pointer
4401   EE52 09          			dex	
4402   EE53 09          			dex	
4403   EE54 DF B4       			stx	switch_queue_pointer
4404   EE56 A6 00       			ldaa	$00,X
4405   EE58 E6 01       			ldab	$01,X
4406   EE5A DE C4       			ldx	sys_temp_w2
4407   EE5C A7 00       			staa	$00,X
4408   EE5E E7 01       			stab	$01,X
4409   EE60 39          			rts	
4410   EE61             
4411   EE61             ;**************************************************
4412   EE61             ;* Initializes the Virtual Machine stack. Routine
4413   EE61             ;* will set up all 'next' pointers for each thread
4414   EE61             ;* placeholder. The VM size is determined by the 
4415   EE61             ;* settings in the game ROM. This must be balanced
4416   EE61             ;* properly for each game so that the created
4417   EE61             ;* threads do not clobber the cpu stack since they
4418   EE61             ;* grow towards each other.
4419   EE61             ;**************************************************
4420   EE61 F6 D0 4B    setup_vm_stack	ldab	gr_maxthreads		;Max Size of VM
4421   EE64 CE 11 9C    			ldx	#threadpool_base
4422   EE67 DF CD       			stx	vm_nextslot
4423   EE69             			begin
4423   EE69             
4424   EE69 DF BA       				stx	temp2
4425   EE6B 96 BB       				ldaa	temp2+1
4426   EE6D 8B 12       				adda	#$12
4427   EE6F A7 01       				staa	$01,X
4428   EE71 86 00       				ldaa	#$00
4429   EE73 99 BA       				adca	temp2
4430   EE75 A7 00       				staa	$00,X
4431   EE77 5A          				decb	
4432   EE78 27 04       				beq	stack_done
4433   EE7A EE 00       				ldx	$00,X
4434   EE7C             			loopend
4434   EE7C             
4434   EE7C             
4434   EE7C~            			loopend
4434   EE7C~            			loopend
4434   EE7C             
4434   EE7C 20 EB       
4434   EE7E             
4434   EE7E~            			loopend
4434   EE7E~            			loopend
4434   EE7E             
4435   EE7E E7 00       stack_done		stab	$00,X
4436   EE80 E7 01       			stab	$01,X
4437   EE82 D7 CB       			stab	vm_base
4438   EE84 D7 CC       			stab	vm_base+1
4439   EE86 CE 00 CB    			ldx	#vm_base
4440   EE89 DF D1       			stx	vm_tail_thread
4441   EE8B 39          			rts
4442   EE8C             
4443   EE8C             ;**************************************************
4444   EE8C             ;* Adds B to X, Protects A
4445   EE8C             ;**************************************************				
4446   EE8C 36          xplusb		psha	
4447   EE8D 17          			tba	
4448   EE8E 8D AE       			bsr	xplusa		;X = X + A
4449   EE90 32          			pula	
4450   EE91 39          			rts	
4451   EE92             
4452   EE92             ;**************************************************
4453   EE92             ;* Pulls data from CMOS location in X and X+1
4454   EE92             ;* and puts it in A. X is double incremented.
4455   EE92             ;*
4456   EE92             ;* Requires:	X
4457   EE92             ;* Protects:	B
4458   EE92             ;* Output:		A
4459   EE92             ;**************************************************		
4460   EE92 37          cmosinc_a		pshb	
4461   EE93 A6 00       			ldaa	$00,X
4462   EE95 E6 01       			ldab	$01,X
4463   EE97 08          			inx	
4464   EE98 08          			inx	
4465   EE99 C4 0F       			andb	#$0F
4466   EE9B 48          			asla	
4467   EE9C 48          			asla	
4468   EE9D 48          			asla	
4469   EE9E 48          			asla	
4470   EE9F 1B          			aba	
4471   EEA0 33          			pulb	
4472   EEA1 39          			rts
4473   EEA2             
4474   EEA2             ;**************************************************
4475   EEA2             ;* Pulls data from CMOS location in X and X+1
4476   EEA2             ;* and puts it in B. X is double incremented.
4477   EEA2             ;*
4478   EEA2             ;* Requires:	X
4479   EEA2             ;* Protects:	A
4480   EEA2             ;* Output:		B
4481   EEA2             ;**************************************************				
4482   EEA2 36          cmosinc_b		psha	
4483   EEA3 8D ED       			bsr	cmosinc_a
4484   EEA5 16          			tab	
4485   EEA6 32          			pula	
4486   EEA7 39          			rts
4487   EEA8             
4488   EEA8             ;**************************************************
4489   EEA8             ;* Transfers the byte value in B to the CMOS RAM
4490   EEA8             ;* location contained in X. The byte is stored in
4491   EEA8             ;* two consecutive nybbles in CMOS. X is double 
4492   EEA8             ;* incremented.
4493   EEA8             ;*
4494   EEA8             ;* Requires: 	B,X
4495   EEA8             ;* Protects:	A
4496   EEA8             ;**************************************************
4497   EEA8 36          b_cmosinc		psha	
4498   EEA9 17          			tba	
4499   EEAA 8D 42       			bsr	a_cmosinc		;A -> CMOS,X++
4500   EEAC 32          			pula	
4501   EEAD 39          			rts	
4502   EEAE             			
4503   EEAE             ;**************************************************
4504   EEAE             ;* Reset Game Audits only
4505   EEAE             ;**************************************************			
4506   EEAE CE 00 66    reset_audits	ldx	#aud_reset_end-cmos_base		;Clear RAM from 0100-0165
4507   EEB1 20 03       			bra	clr_ram
4508   EEB3 CE 01 00    clr_ram_100		ldx	#cmos_base
4509   EEB6             clr_ram		begin
4509   EEB6             
4510   EEB6 6F FF       				clr	$FF,X
4511   EEB8 09          				dex	
4512   EEB9             			eqend
4512   EEB9             
4512   EEB9             
4512   EEB9~            			eqend
4512   EEB9~            			eqend
4512   EEB9             
4512   EEB9 26 FB       
4512   EEBB             
4512   EEBB~            			eqend
4512   EEBB~            			eqend
4512   EEBB             
4513   EEBB 39          			rts	
4514   EEBC             
4515   EEBC             ;**************************************************
4516   EEBC             ;* Restores Factory Settings and resets all audit 
4517   EEBC             ;* information, reloads pricing data and restores 
4518   EEBC             ;* the backup high score.
4519   EEBC             ;**************************************************			
4520   EEBC             factory_zeroaudits	
4521   EEBC 8D F5       			bsr	clr_ram_100				;Clear RAM 0100-01FF
4522   EEBE CE 01 7D    			ldx	#adj_base
4523   EEC1 DF B8       			stx	temp1
4524   EEC3 CE D0 03    			ldx	#gr_cmoscsum			;Begining of Default Audit Data
4525   EEC6 C6 18       			ldab	#$18
4526   EEC8 8D 59       			bsr	copyblock2				;Transfer Audit Data
4527   EECA C6 01       			ldab	#$01
4528   EECC B6 21 00    			ldaa	pia_sound_data			;Read W29 Jumper Setting
4529   EECF             			ifmi
4529   EECF             
4529   EECF 2A FE       
4530   EED1 5C          				incb
4531   EED2             			endif
4531   EED2             
4531   EED2             
4531   EED2             
4531   EED2             
4531   EED2             
4531   EED2~            			endif
4531   EED2~            			endif
4531   EED2             
4531   EED2~            			endif
4531   EED2~            			endif
4531   EED2             
4531   EED0             
4531   EED0 01          
4531   EED1             
4531   EED1             
4531   EED1~            			endif
4531   EED1~            			endif
4531   EED1~            			endif
4531   EED1             
4531   EED2             
4531   EED2~            			endif
4531   EED2~            			endif
4531   EED2             
4532   EED2 8D 3B       			bsr	loadpricing				;Load Pricing Data
4533   EED4 8D 06       			bsr	restore_hstd			;Restore Backup High Score
4534   EED6 CE FC C8    			ldx	#to_audadj
4535   EED9 7E EA 24    			jmp	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
4536   EEDC             
4537   EEDC             ;**************************************************
4538   EEDC             ;* Clears the CMOS High Score RAM then copies
4539   EEDC             ;* the backup high score.
4540   EEDC             ;**************************************************			
4541   EEDC 4F          restore_hstd	clra	
4542   EEDD BD FB 7F    			jsr	fill_hstd_digits			;Fill HSTD Digits with A
4543   EEE0 CE 01 81    			ldx	#adj_backuphstd
4544   EEE3 8D AD       			bsr	cmosinc_a				;CMOS,X++ -> A
4545   EEE5 16          			tab	
4546   EEE6 BD EC 32    			jsr	split_ab				;Shift A<<4 B>>4
4547   EEE9 CE 01 66    			ldx	#aud_currenthstd			;CMOS: Current HSTD
4548   EEEC 8D BA       			bsr	b_cmosinc				;B -> CMOS,X++
4549   EEEE             
4550   EEEE             			
4551   EEEE             ;**************************************************
4552   EEEE             ;* Transfers the byte value in A to the CMOS RAM
4553   EEEE             ;* location contained in X. The byte is stored in
4554   EEEE             ;* two consecutive nybbles in CMOS. X is double 
4555   EEEE             ;* incremented.
4556   EEEE             ;*
4557   EEEE             ;* Requires: 	A,X
4558   EEEE             ;* Protects:	B
4559   EEEE             ;**************************************************			
4560   EEEE 36          a_cmosinc		psha	
4561   EEEF A7 01       			staa	$01,X
4562   EEF1 44          			lsra	
4563   EEF2 44          			lsra	
4564   EEF3 44          			lsra	
4565   EEF4 44          			lsra	
4566   EEF5 A7 00       			staa	$00,X
4567   EEF7 08          			inx	
4568   EEF8 08          			inx	
4569   EEF9 32          			pula	
4570   EEFA 39          			rts	 
4571   EEFB             
4572   EEFB             ;********************************************************
4573   EEFB             ;* Copies B bytes of data from address in X(temp2) to 
4574   EEFB             ;* address in temp1
4575   EEFB             ;*
4576   EEFB             ;* Requires:	B,X,temp1
4577   EEFB             ;* Protects:	A
4578   EEFB             ;* Destroys:	B,X,temp1,temp2
4579   EEFB             ;* Output:		B = 0
4580   EEFB             ;******************************************************** 			
4581   EEFB 36          copyblock		psha	
4582   EEFC             			begin
4582   EEFC             
4583   EEFC A6 00       				ldaa	$00,X
4584   EEFE 08          				inx	
4585   EEFF DF BA       				stx	temp2
4586   EF01 DE B8       				ldx	temp1
4587   EF03 A7 00       				staa	$00,X
4588   EF05 08          				inx	
4589   EF06 DF B8       				stx	temp1
4590   EF08 DE BA       				ldx	temp2
4591   EF0A 5A          				decb	
4592   EF0B             			eqend
4592   EF0B             
4592   EF0B             
4592   EF0B~            			eqend
4592   EF0B~            			eqend
4592   EF0B             
4592   EF0B 26 EF       
4592   EF0D             
4592   EF0D~            			eqend
4592   EF0D~            			eqend
4592   EF0D             
4593   EF0D 32          			pula	
4594   EF0E 39          			rts
4595   EF0F             
4596   EF0F             ;************************************************
4597   EF0F             ;* Copies the default pricing data block from
4598   EF0F             ;* the game ROM to CMOS RAM. Register B contains
4599   EF0F             ;* either $01 or $02 which specifies which 
4600   EF0F             ;* default table to copy based on MPU jumper W29
4601   EF0F             ;*
4602   EF0F             ;* Requires: B
4603   EF0F             ;************************************************				
4604   EF0F F7 01 AE    loadpricing		stab	adj_pricecontrol+1		;Get the LSB of the pricing index
4605   EF12 CE 01 AF    			ldx	#cmos_pricingbase   
4606   EF15 DF B8       			stx	temp1
4607   EF17 58          			aslb						
4608   EF18 17          			tba	
4609   EF19 48          			asla	
4610   EF1A 1B          			aba	
4611   EF1B CE D0 15    			ldx	#gr_gameadjust7			;*** Table Pointer ***
4612   EF1E BD EE 3E    			jsr	xplusa				;X = X + A
4613   EF21 C6 06       			ldab	#$06
4614   EF23 36          copyblock2		psha
4615   EF24             			begin	
4615   EF24             
4616   EF24 A6 00       				ldaa	$00,X
4617   EF26 08          				inx	
4618   EF27 DF BA       				stx	temp2
4619   EF29 DE B8       				ldx	temp1
4620   EF2B 8D C1       				bsr	a_cmosinc				;A -> CMOS,X++
4621   EF2D DF B8       				stx	temp1
4622   EF2F DE BA       				ldx	temp2
4623   EF31 5A          				decb	
4624   EF32             			eqend
4624   EF32             
4624   EF32             
4624   EF32~            			eqend
4624   EF32~            			eqend
4624   EF32             
4624   EF32 26 F0       
4624   EF34             
4624   EF34~            			eqend
4624   EF34~            			eqend
4624   EF34             
4625   EF34 32          			pula	
4626   EF35 39          			rts
4627   EF36             			
4628   EF36             ;******************************************************
4629   EF36             ;* IRQ Routine
4630   EF36             ;*
4631   EF36             ;* This is the main timekeeping section of the code. 
4632   EF36             ;* All events are kept track of by couting the IRQ's
4633   EF36             ;* that have run.
4634   EF36             ;*
4635   EF36             ;* Tasks processed in the IRQ:
4636   EF36             ;*		
4637   EF36             ;*		Update Next Lamp
4638   EF36             ;******************************************************
4639   EF36             sys_irq_entry
4640   EF36 D6 A5       	ldab   irq_counter
4641   EF38 7A 00 F5    			dec   randomseed
4642   EF3B 56          			rorb  
4643   EF3C             			ifcc
4643   EF3C             
4643   EF3C 25 FE       
4644   EF3E 7C 00 A7    				inc   lamp_index_wordx
4645   EF41 96 A8       				ldaa   lamp_bit
4646   EF43 48          				asla  
4647   EF44             				ifeq
4647   EF44             
4647   EF44 26 FE       
4648   EF46 97 A7       					staa   lamp_index_wordx
4649   EF48 97 A5       					staa   irq_counter
4650   EF4A 97 AE       					staa   alpha_digit_cur+1
4651   EF4C 4C          					inca  
4652   EF4D             				endif
4652   EF4D             
4652   EF4D             
4652   EF4D             
4652   EF4D             
4652   EF4D             
4652   EF4D~            				endif
4652   EF4D~            				endif
4652   EF4D             
4652   EF4D~            				endif
4652   EF4D~            				endif
4652   EF4D             
4652   EF45             
4652   EF45 07          
4652   EF46             
4652   EF46             
4652   EF46~            				endif
4652   EF46~            				endif
4652   EF46~            				endif
4652   EF46             
4652   EF4D             
4652   EF4D~            				endif
4652   EF4D~            				endif
4652   EF4D             
4653   EF4D 97 A8       				staa   lamp_bit
4654   EF4F             			endif
4654   EF4F             
4654   EF4F             
4654   EF4F             
4654   EF4F             
4654   EF4F             
4654   EF4F~            			endif
4654   EF4F~            			endif
4654   EF4F             
4654   EF4F~            			endif
4654   EF4F~            			endif
4654   EF4F             
4654   EF3D             
4654   EF3D 11          
4654   EF3E             
4654   EF3E             
4654   EF3E~            			endif
4654   EF3E~            			endif
4654   EF3E~            			endif
4654   EF3E             
4654   EF4F             
4654   EF4F~            			endif
4654   EF4F~            			endif
4654   EF4F             
4655   EF4F DE A6       			ldx   lamp_index_word
4656   EF51 D6 A5       			ldab   irq_counter
4657   EF53 C4 07       			andb  #$07
4658   EF55             			ifeq
4658   EF55             
4658   EF55 26 FE       
4659   EF57 86 FF       				ldaa  #$FF
4660   EF59 B7 28 02    				staa  pia_disp_seg_data
4661   EF5C 7F 40 00    				clr	pia_alphanum_digit_data
4662   EF5F 7F 40 02    				clr   pia_alphanum_seg_data
4663   EF62 D6 A5       				ldab  irq_counter
4664   EF64 F7 28 00    				stab  pia_disp_digit_data
4665   EF67 27 19       				beq   b_082
4666   EF69 7E F0 1A    				jmp   b_081
4667   EF6C             			endif
4667   EF6C             
4667   EF6C             
4667   EF6C             
4667   EF6C             
4667   EF6C             
4667   EF6C~            			endif
4667   EF6C~            			endif
4667   EF6C             
4667   EF6C~            			endif
4667   EF6C~            			endif
4667   EF6C             
4667   EF56             
4667   EF56 15          
4667   EF57             
4667   EF57             
4667   EF57~            			endif
4667   EF57~            			endif
4667   EF57~            			endif
4667   EF57             
4667   EF6C             
4667   EF6C~            			endif
4667   EF6C~            			endif
4667   EF6C             
4668   EF6C D7 AC       			stab   swap_player_displays
4669   EF6E 5A          			decb  
4670   EF6F             			ifne   
4670   EF6F             
4670   EF6F 27 FE       
4671   EF71 C0 03       				subb  #03
4672   EF73 26 30       				bne   snd_wr0
4673   EF75             			endif
4673   EF75             
4673   EF75             
4673   EF75             
4673   EF75             
4673   EF75             
4673   EF75~            			endif
4673   EF75~            			endif
4673   EF75             
4673   EF75~            			endif
4673   EF75~            			endif
4673   EF75             
4673   EF70             
4673   EF70 04          
4673   EF71             
4673   EF71             
4673   EF71~            			endif
4673   EF71~            			endif
4673   EF71~            			endif
4673   EF71             
4673   EF75             
4673   EF75~            			endif
4673   EF75~            			endif
4673   EF75             
4674   EF75 79 00 A9    			rol   comma_data_temp
4675   EF78 56          			rorb  
4676   EF79 79 00 A9    			rol   comma_data_temp
4677   EF7C 56          			rorb  
4678   EF7D FA 21 02    			orab  pia_comma_data
4679   EF80 20 28       			bra   snd_wr
4680   EF82 7C 00 B3    b_082			inc   irqcount16
4681   EF85 96 7C       			ldaa  comma_flags
4682   EF87 97 A9       			staa  comma_data_temp
4683   EF89 96 78       			ldaa  dmask_p1
4684   EF8B 97 AA       			staa  credp1p2_bufferselect
4685   EF8D 96 7A       			ldaa  dmask_p3
4686   EF8F 97 AB       			staa  alpha_bufferselect
4687   EF91 D6 5E       			ldab  p2_ec_b0
4688   EF93 79 00 AA    			rol   credp1p2_bufferselect
4689   EF96             			ifcs
4689   EF96             
4689   EF96 24 FE       
4690   EF98 D6 5F       				ldab   p2_ec_b1
4691   EF9A             			endif
4691   EF9A             
4691   EF9A             
4691   EF9A             
4691   EF9A             
4691   EF9A             
4691   EF9A~            			endif
4691   EF9A~            			endif
4691   EF9A             
4691   EF9A~            			endif
4691   EF9A~            			endif
4691   EF9A             
4691   EF97             
4691   EF97 02          
4691   EF98             
4691   EF98             
4691   EF98~            			endif
4691   EF98~            			endif
4691   EF98~            			endif
4691   EF98             
4691   EF9A             
4691   EF9A~            			endif
4691   EF9A~            			endif
4691   EF9A             
4692   EF9A 96 5C       			ldaa  p1_ec_b0
4693   EF9C 79 00 AB    			rol   alpha_bufferselect
4694   EF9F 24 71       			bcc   b_083
4695   EFA1 96 5D       			ldaa  p1_ec_b1
4696   EFA3 20 6D       			bra   b_083
4697   EFA5             
4698   EFA5             			;***********************************
4699   EFA5             			;* Sound command clear
4700   EFA5             			;***********************************
4701   EFA5 F6 21 02    snd_wr0		ldab  pia_comma_data
4702   EFA8 C4 3F       			andb  #$3F
4703   EFAA F7 21 02    snd_wr		stab  pia_comma_data
4704   EFAD             
4705   EFAD             			;reset displays
4706   EFAD 7F 40 00    			clr   pia_alphanum_digit_data
4707   EFB0 7F 40 02    			clr   pia_alphanum_seg_data
4708   EFB3 86 FF       			ldaa   #$FF
4709   EFB5 B7 28 02    			staa   pia_disp_seg_data
4710   EFB8 96 A5       			ldaa   irq_counter
4711   EFBA B7 28 00    			staa   pia_disp_digit_data
4712   EFBD             			
4713   EFBD             			
4714   EFBD A6 4C       			ldaa   score_p1_b0,X
4715   EFBF 79 00 AA    			rol   credp1p2_bufferselect
4716   EFC2             			ifcs
4716   EFC2             
4716   EFC2 24 FE       
4717   EFC4 A6 54       				ldaa   score_p1_b1,X
4718   EFC6             			endif
4718   EFC6             
4718   EFC6             
4718   EFC6             
4718   EFC6             
4718   EFC6             
4718   EFC6~            			endif
4718   EFC6~            			endif
4718   EFC6             
4718   EFC6~            			endif
4718   EFC6~            			endif
4718   EFC6             
4718   EFC3             
4718   EFC3 02          
4718   EFC4             
4718   EFC4             
4718   EFC4~            			endif
4718   EFC4~            			endif
4718   EFC4~            			endif
4718   EFC4             
4718   EFC6             
4718   EFC6~            			endif
4718   EFC6~            			endif
4718   EFC6             
4719   EFC6 C6 03       			ldab   #03
4720   EFC8 D1 A5       			cmpb  irq_counter
4721   EFCA             			ifgt
4721   EFCA             
4721   EFCA 2F FE       
4722   EFCC 79 00 AB    				rol   alpha_bufferselect
4723   EFCF             			else
4723   EFCF             
4723   EFCF             
4723   EFCF             
4723   EFCF             
4723   EFCB             
4723   EFCB             
4723   EFCB             
4723   EFCB~            			else
4723   EFCB~            			else
4723   EFCB~            			else
4723   EFCB~            			else
4723   EFCB             
4723   EFCB~            			else
4723   EFCB~            			else
4723   EFCB~            			else
4723   EFCB~            			else
4723   EFCB             
4723   EFCB             
4723   EFCB 05          
4723   EFCF             
4723   EFCF 20 FE       
4723   EFD1             
4723   EFD1             
4723   EFD1             
4723   EFD1~            			else
4723   EFD1~            			else
4723   EFD1~            			else
4723   EFD1~            			else
4723   EFD1~            			else
4723   EFD1             
4723   EFD1~            			else
4723   EFD1~            			else
4723   EFD1             
4723   EFD1~            			else
4723   EFD1~            			else
4723   EFD1             
4724   EFD1 DE AD       				ldx	alpha_digit_cur
4725   EFD3 7C 00 AE    				inc   alpha_digit_cur+1 	;increment LSB
4726   EFD6 E6 60       				ldab  alpha_b0,X
4727   EFD8 79 00 AB    				rol   alpha_bufferselect
4728   EFDB             				ifcs
4728   EFDB             
4728   EFDB 24 FE       
4729   EFDD E6 6C       					ldab   alpha_b1,X
4730   EFDF             				endif
4730   EFDF             
4730   EFDF             
4730   EFDF             
4730   EFDF             
4730   EFDF             
4730   EFDF~            				endif
4730   EFDF~            				endif
4730   EFDF             
4730   EFDF~            				endif
4730   EFDF~            				endif
4730   EFDF             
4730   EFDC             
4730   EFDC 02          
4730   EFDD             
4730   EFDD             
4730   EFDD~            				endif
4730   EFDD~            				endif
4730   EFDD~            				endif
4730   EFDD             
4730   EFDF             
4730   EFDF~            				endif
4730   EFDF~            				endif
4730   EFDF             
4731   EFDF FE D0 61    				ldx   gr_character_defs_ptr	;This is the index table for all characters
4732   EFE2 36          				psha  
4733   EFE3 17          				tba   
4734   EFE4 C4 3F       				andb  #$3F				;max 3F characters in lookup table
4735   EFE6 58          				aslb  
4736   EFE7 DF FE       				stx   character_ptr
4737   EFE9 DB FF       				addb  character_ptr+1
4738   EFEB D7 FF       				stab  character_ptr+1
4739   EFED             				ifcs
4739   EFED             
4739   EFED 24 FE       
4740   EFEF 7C 00 FE    					inc   character_ptr
4741   EFF2             				endif
4741   EFF2             
4741   EFF2             
4741   EFF2             
4741   EFF2             
4741   EFF2             
4741   EFF2~            				endif
4741   EFF2~            				endif
4741   EFF2             
4741   EFF2~            				endif
4741   EFF2~            				endif
4741   EFF2             
4741   EFEE             
4741   EFEE 03          
4741   EFEF             
4741   EFEF             
4741   EFEF~            				endif
4741   EFEF~            				endif
4741   EFEF~            				endif
4741   EFEF             
4741   EFF2             
4741   EFF2~            				endif
4741   EFF2~            				endif
4741   EFF2             
4742   EFF2 DE FE       				ldx   character_ptr
4743   EFF4 E6 00       				ldab   $00,X
4744   EFF6 F7 40 00    				stab   pia_alphanum_digit_data	;write character data
4745   EFF9 E6 01       				ldab   $01,X
4746   EFFB 85 80       				bita  #$80
4747   EFFD             				ifne
4747   EFFD             
4747   EFFD 27 FE       
4748   EFFF CA 40       					orab   #$40
4749   F001             				endif
4749   F001             
4749   F001             
4749   F001             
4749   F001             
4749   F001             
4749   F001~            				endif
4749   F001~            				endif
4749   F001             
4749   F001~            				endif
4749   F001~            				endif
4749   F001             
4749   EFFE             
4749   EFFE 02          
4749   EFFF             
4749   EFFF             
4749   EFFF~            				endif
4749   EFFF~            				endif
4749   EFFF~            				endif
4749   EFFF             
4749   F001             
4749   F001~            				endif
4749   F001~            				endif
4749   F001             
4750   F001 85 40       				bita  #$40
4751   F003             				ifne   
4751   F003             
4751   F003 27 FE       
4752   F005 CA 80       					orab   #$80
4753   F007             				endif
4753   F007             
4753   F007             
4753   F007             
4753   F007             
4753   F007             
4753   F007~            				endif
4753   F007~            				endif
4753   F007             
4753   F007~            				endif
4753   F007~            				endif
4753   F007             
4753   F004             
4753   F004 02          
4753   F005             
4753   F005             
4753   F005~            				endif
4753   F005~            				endif
4753   F005~            				endif
4753   F005             
4753   F007             
4753   F007~            				endif
4753   F007~            				endif
4753   F007             
4754   F007 F7 40 02    				stab   pia_alphanum_seg_data	;write comma/dot data
4755   F00A 32          				pula  	
4756   F00B             			endif
4756   F00B             
4756   F00B             
4756   F00B             
4756   F00B             
4756   F00B             
4756   F00B~            			endif
4756   F00B~            			endif
4756   F00B             
4756   F00B~            			endif
4756   F00B~            			endif
4756   F00B             
4756   EFD0             
4756   EFD0 3A          
4756   EFD1             
4756   EFD1             
4756   EFD1~            			endif
4756   EFD1~            			endif
4756   EFD1~            			endif
4756   EFD1             
4756   F00B             
4756   F00B~            			endif
4756   F00B~            			endif
4756   F00B             
4757   F00B C6 FF       			ldab   #$FF
4758   F00D 76 00 AC    			ror	swap_player_displays
4759   F010             			ifcc
4759   F010             
4759   F010 25 FE       
4760   F012 54          b_083				lsrb						;Show BA
4761   F013 54          				lsrb	
4762   F014 54          				lsrb	
4763   F015 54          				lsrb	
4764   F016 84 F0       				anda	#$F0
4765   F018 20 20       				bra	b_08A					;Goto Display End
4766   F01A 96 79       b_081				ldaa	dmask_p2
4767   F01C 97 AA       				staa	credp1p2_bufferselect
4768   F01E 96 7B       				ldaa	dmask_p4
4769   F020 97 AB       				staa	alpha_bufferselect
4770   F022 D6 5E       				ldab	p2_ec_b0
4771   F024 79 00 AA    				rol	credp1p2_bufferselect
4772   F027             				ifcs
4772   F027             
4772   F027 24 FE       
4773   F029 D6 5F       					ldab	p2_ec_b1
4774   F02B             				endif
4774   F02B             
4774   F02B             
4774   F02B             
4774   F02B             
4774   F02B             
4774   F02B~            				endif
4774   F02B~            				endif
4774   F02B             
4774   F02B~            				endif
4774   F02B~            				endif
4774   F02B             
4774   F028             
4774   F028 02          
4774   F029             
4774   F029             
4774   F029~            				endif
4774   F029~            				endif
4774   F029~            				endif
4774   F029             
4774   F02B             
4774   F02B~            				endif
4774   F02B~            				endif
4774   F02B             
4775   F02B 96 5C       				ldaa	p1_ec_b0
4776   F02D 79 00 AB    				rol	alpha_bufferselect
4777   F030             				ifcs
4777   F030             
4777   F030 24 FE       
4778   F032 96 5D       					ldaa	p1_ec_b1
4779   F034             				endif
4779   F034             
4779   F034             
4779   F034             
4779   F034             
4779   F034             
4779   F034~            				endif
4779   F034~            				endif
4779   F034             
4779   F034~            				endif
4779   F034~            				endif
4779   F034             
4779   F031             
4779   F031 02          
4779   F032             
4779   F032             
4779   F032~            				endif
4779   F032~            				endif
4779   F032~            				endif
4779   F032             
4779   F034             
4779   F034~            				endif
4779   F034~            				endif
4779   F034             
4780   F034             			endif
4780   F034             
4780   F034             
4780   F034             
4780   F034             
4780   F034             
4780   F034~            			endif
4780   F034~            			endif
4780   F034             
4780   F034~            			endif
4780   F034~            			endif
4780   F034             
4780   F011             
4780   F011 22          
4780   F012             
4780   F012             
4780   F012~            			endif
4780   F012~            			endif
4780   F012~            			endif
4780   F012             
4780   F034             
4780   F034~            			endif
4780   F034~            			endif
4780   F034             
4781   F034 48          			asla						;Show AB
4782   F035 48          			asla	
4783   F036 48          			asla	
4784   F037 48          			asla	
4785   F038 C4 0F       			andb	#$0F					;Fall through to end
4786   F03A 1B          b_08A			aba	
4787   F03B B7 28 02    			staa	pia_disp_seg_data			;Store Digit BCD Data
4788   F03E             
4789   F03E             			;***********************************
4790   F03E             			;* Now do lamps...
4791   F03E             			;***********************************
4792   F03E 86 FF       			ldaa	#$FF
4793   F040 D6 A5       			ldab	irq_counter
4794   F042 56          			rorb	
4795   F043             			ifcc						;Do Lamps every other IRQ
4795   F043             
4795   F043 25 FE       
4796   F045 CE 24 00    				ldx	#pia_lamp_row_data			;Lamp PIA Offset
4797   F048 A7 00       				staa	$00,X					;Blank Lamp Rows with an $FF
4798   F04A B7 22 00    				staa	pia_sol_low_data
4799   F04D E6 03       				ldab	$03,X
4800   F04F 6F 03       				clr	$03,X
4801   F051 A7 02       				staa	$02,X					;Blank Lamp Columns with $FF
4802   F053 E7 03       				stab	$03,X
4803   F055 96 A8       				ldaa	lamp_bit				;Which strobe are we on
4804   F057 A7 02       				staa	$02,X				;Put the strobe out there
4805   F059 A1 02       				cmpa	$02,X				;Did it take?
4806   F05B             				ifeq
4806   F05B             
4806   F05B 26 FE       
4807   F05D DE A6       					ldx	lamp_index_word			;This will always be $0001-$0080, it is
4808   F05F             											;used to index the lamp buffer bit positions.			
4809   F05F A6 28       					ldaa	lampbufferselect,X		;0=buffer_0 1=buffer_1
4810   F061 16          					tab	
4811   F062 53          					comb	
4812   F063 E4 10       					andb	lampbuffer0,X
4813   F065 A4 34       					anda	lampbuffer1,X
4814   F067 1B          					aba	
4815   F068 43          					coma	
4816   F069 B7 24 00    					staa	pia_lamp_row_data			;Store Lamp Row Data
4817   F06C             
4818   F06C             					;* In Hyperball we have another half matrix of lamps too
4819   F06C 96 A7       					ldaa  lamp_index_wordx
4820   F06E 16          					tab   
4821   F06F 44          					lsra  
4822   F070 97 A7       					staa	lamp_index_wordx
4823   F072 DE A6       					ldx   lamp_index_word
4824   F074 D7 A7       					stab  lamp_index_wordx
4825   F076 A6 30       					ldaa  lampbufferselectx,X
4826   F078 16          					tab   
4827   F079 53          					comb  
4828   F07A E4 18       					andb  lampbuffer0x,X
4829   F07C A4 3C       					anda  lampbuffer1x,X
4830   F07E 1B          					aba   
4831   F07F 43          					coma  
4832   F080 D6 A7       					ldab   lamp_index_wordx
4833   F082 0C          					clc   
4834   F083 56          					rorb  
4835   F084             					ifcs
4835   F084             
4835   F084 24 FE       
4836   F086 44          						lsra  
4837   F087 44          						lsra  
4838   F088 44          						lsra  
4839   F089 44          						lsra  
4840   F08A             					endif
4840   F08A             
4840   F08A             
4840   F08A             
4840   F08A             
4840   F08A             
4840   F08A~            					endif
4840   F08A~            					endif
4840   F08A             
4840   F08A~            					endif
4840   F08A~            					endif
4840   F08A             
4840   F085             
4840   F085 04          
4840   F086             
4840   F086             
4840   F086~            					endif
4840   F086~            					endif
4840   F086~            					endif
4840   F086             
4840   F08A             
4840   F08A~            					endif
4840   F08A~            					endif
4840   F08A             
4841   F08A 84 0F       					anda  #0F
4842   F08C B7 22 00    					staa   pia_sol_low_data
4843   F08F             				endif
4843   F08F             
4843   F08F             
4843   F08F             
4843   F08F             
4843   F08F             
4843   F08F~            				endif
4843   F08F~            				endif
4843   F08F             
4843   F08F~            				endif
4843   F08F~            				endif
4843   F08F             
4843   F05C             
4843   F05C 32          
4843   F05D             
4843   F05D             
4843   F05D~            				endif
4843   F05D~            				endif
4843   F05D~            				endif
4843   F05D             
4843   F08F             
4843   F08F~            				endif
4843   F08F~            				endif
4843   F08F             
4844   F08F             			endif
4844   F08F             
4844   F08F             
4844   F08F             
4844   F08F             
4844   F08F             
4844   F08F~            			endif
4844   F08F~            			endif
4844   F08F             
4844   F08F~            			endif
4844   F08F~            			endif
4844   F08F             
4844   F044             
4844   F044 4A          
4844   F045             
4844   F045             
4844   F045~            			endif
4844   F045~            			endif
4844   F045~            			endif
4844   F045             
4844   F08F             
4844   F08F~            			endif
4844   F08F~            			endif
4844   F08F             
4845   F08F             			
4846   F08F             			;***********************************
4847   F08F             			;* Done with Displays
4848   F08F             			;* Increment the IRQ counter
4849   F08F             			;***********************************
4850   F08F 96 A5       			ldaa	irq_counter				;We need to increment this every time.
4851   F091 4C          			inca	
4852   F092 97 A5       			staa	irq_counter
4853   F094             
4854   F094             			;******************************************************************
4855   F094             			;* Now do switches, The switch logic has a total of 5 data buffers.
4856   F094             			;* These are used for debouncing the switch through software. The
4857   F094             			;* original Level7 code used an X indexed loop to do this, which was
4858   F094             			;* much more compact, however because of the indexed addressing it
4859   F094             			;* was substantially slower, while this takes more ROM space it ends
4860   F094             			;* up being about 100 clock cycles faster
4861   F094             			;******************************************************************
4862   F094 46          			rora	
4863   F095             			ifcs
4863   F095             
4863   F095 24 FE       
4864   F097 7E F1 5F    				jmp	irq_sol
4865   F09A             			endif
4865   F09A             
4865   F09A             
4865   F09A             
4865   F09A             
4865   F09A             
4865   F09A~            			endif
4865   F09A~            			endif
4865   F09A             
4865   F09A~            			endif
4865   F09A~            			endif
4865   F09A             
4865   F096             
4865   F096 03          
4865   F097             
4865   F097             
4865   F097~            			endif
4865   F097~            			endif
4865   F097~            			endif
4865   F097             
4865   F09A             
4865   F09A~            			endif
4865   F09A~            			endif
4865   F09A             
4866   F09A 86 01       			ldaa	#$01
4867   F09C B7 30 02    			staa	pia_switch_strobe_data		;Store Switch Column Drives
4868   F09F             						
4869   F09F 96 7D       			ldaa	switch_debounced
4870   F0A1 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
4871   F0A4 16          			tab	
4872   F0A5 94 85       			anda	switch_masked
4873   F0A7 9A 8D       			oraa	switch_pending
4874   F0A9 97 8D       			staa	switch_pending
4875   F0AB D7 85       			stab	switch_masked
4876   F0AD 53          			comb	
4877   F0AE D4 8D       			andb	switch_pending
4878   F0B0 DA 95       			orab	switch_aux
4879   F0B2 D7 95       			stab	switch_aux
4880   F0B4 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
4881   F0B7 96 7E       			ldaa	switch_debounced+1
4882   F0B9 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
4883   F0BC 16          			tab	
4884   F0BD 94 86       			anda	switch_masked+1
4885   F0BF 9A 8E       			oraa	switch_pending+1
4886   F0C1 97 8E       			staa	switch_pending+1
4887   F0C3 D7 86       			stab	switch_masked+1
4888   F0C5 53          			comb	
4889   F0C6 D4 8E       			andb	switch_pending+1
4890   F0C8 DA 96       			orab	switch_aux+1
4891   F0CA D7 96       			stab	switch_aux+1
4892   F0CC 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
4893   F0CF 96 7F       			ldaa	switch_debounced+2
4894   F0D1 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
4895   F0D4 16          			tab	
4896   F0D5 94 87       			anda	switch_masked+2
4897   F0D7 9A 8F       			oraa	switch_pending+2
4898   F0D9 97 8F       			staa	switch_pending+2
4899   F0DB D7 87       			stab	switch_masked+2
4900   F0DD 53          			comb	
4901   F0DE D4 8F       			andb	switch_pending+2
4902   F0E0 DA 97       			orab	switch_aux+2
4903   F0E2 D7 97       			stab	switch_aux+2
4904   F0E4 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
4905   F0E7 96 80       			ldaa	switch_debounced+3
4906   F0E9 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
4907   F0EC 16          			tab	
4908   F0ED 94 88       			anda	switch_masked+3
4909   F0EF 9A 90       			oraa	switch_pending+3
4910   F0F1 97 90       			staa	switch_pending+3
4911   F0F3 D7 88       			stab	switch_masked+3
4912   F0F5 53          			comb	
4913   F0F6 D4 90       			andb	switch_pending+3
4914   F0F8 DA 98       			orab	switch_aux+3
4915   F0FA D7 98       			stab	switch_aux+3
4916   F0FC 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
4917   F0FF 96 81       			ldaa	switch_debounced+4
4918   F101 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
4919   F104 16          			tab	
4920   F105 94 89       			anda	switch_masked+4
4921   F107 9A 91       			oraa	switch_pending+4
4922   F109 97 91       			staa	switch_pending+4
4923   F10B D7 89       			stab	switch_masked+4
4924   F10D 53          			comb	
4925   F10E D4 91       			andb	switch_pending+4
4926   F110 DA 99       			orab	switch_aux+4
4927   F112 D7 99       			stab	switch_aux+4
4928   F114 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
4929   F117 96 82       			ldaa	switch_debounced+5
4930   F119 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
4931   F11C 16          			tab	
4932   F11D 94 8A       			anda	switch_masked+5
4933   F11F 9A 92       			oraa	switch_pending+5
4934   F121 97 92       			staa	switch_pending+5
4935   F123 D7 8A       			stab	switch_masked+5
4936   F125 53          			comb	
4937   F126 D4 92       			andb	switch_pending+5
4938   F128 DA 9A       			orab	switch_aux+5
4939   F12A D7 9A       			stab	switch_aux+5
4940   F12C 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
4941   F12F 96 83       			ldaa	switch_debounced+6
4942   F131 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
4943   F134 16          			tab	
4944   F135 94 8B       			anda	switch_masked+6
4945   F137 9A 93       			oraa	switch_pending+6
4946   F139 97 93       			staa	switch_pending+6
4947   F13B D7 8B       			stab	switch_masked+6
4948   F13D 53          			comb	
4949   F13E D4 93       			andb	switch_pending+6
4950   F140 DA 9B       			orab	switch_aux+6
4951   F142 D7 9B       			stab	switch_aux+6
4952   F144 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
4953   F147 96 84       			ldaa	switch_debounced+7
4954   F149 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
4955   F14C 16          			tab	
4956   F14D 94 8C       			anda	switch_masked+7
4957   F14F 9A 94       			oraa	switch_pending+7
4958   F151 97 94       			staa	switch_pending+7
4959   F153 D7 8C       			stab	switch_masked+7
4960   F155 53          			comb	
4961   F156 D4 94       			andb	switch_pending+7
4962   F158 DA 9C       			orab	switch_aux+7
4963   F15A D7 9C       			stab	switch_aux+7
4964   F15C 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
4965   F15F             			;***********************************
4966   F15F             			;* Now do solenoids
4967   F15F             			;***********************************
4968   F15F 96 B2       irq_sol		ldaa	solenoid_counter			;Solenoid Counter
4969   F161             			ifne
4969   F161             
4969   F161 27 FE       
4970   F163 7A 00 B2    				dec	solenoid_counter			;Solenoid Counter
4971   F166             				ifeq
4971   F166             
4971   F166 26 FE       
4972   F168 DE AF       					ldx	solenoid_address
4973   F16A A6 00       					ldaa	$00,X
4974   F16C 98 B1       					eora	solenoid_bitpos
4975   F16E A7 00       					staa	$00,X
4976   F170             				endif
4976   F170             
4976   F170             
4976   F170             
4976   F170             
4976   F170             
4976   F170~            				endif
4976   F170~            				endif
4976   F170             
4976   F170~            				endif
4976   F170~            				endif
4976   F170             
4976   F167             
4976   F167 08          
4976   F168             
4976   F168             
4976   F168~            				endif
4976   F168~            				endif
4976   F168~            				endif
4976   F168             
4976   F170             
4976   F170~            				endif
4976   F170~            				endif
4976   F170             
4977   F170             			endif
4977   F170             
4977   F170             
4977   F170             
4977   F170             
4977   F170             
4977   F170~            			endif
4977   F170~            			endif
4977   F170             
4977   F170~            			endif
4977   F170~            			endif
4977   F170             
4977   F162             
4977   F162 0D          
4977   F163             
4977   F163             
4977   F163~            			endif
4977   F163~            			endif
4977   F163~            			endif
4977   F163             
4977   F170             
4977   F170~            			endif
4977   F170~            			endif
4977   F170             
4978   F170 3B          			rti
4979   F171             
4980   F171             ;*************************************************************************
4981   F171             ;* End IRQ
4982   F171             ;*************************************************************************
4983   F171             
4984   F171             ;*************************************************************************
4985   F171             ;* PIA Data Direction Register Data - Loaded on Initialization
4986   F171             ;*************************************************************************
4987   F171 7F 3E C0 3E pia_ddr_data	.db $7F,$3E,$C0,$3E	;$2100 - Sound PIA
4988   F175 FF 3C FF 34 			.db $FF,$3C,$FF,$34	;$2200 - Solenoid PIA
4989   F179 FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2400 - Lamp PIA
4990   F17D FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2800 - Display PIA
4991   F181 00 3C FF 3C 			.db $00,$3C,$FF,$3C	;$3000 - Switch PIA
4992   F185 FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$4000 - Alpha PIA
4993   F189             
4994   F189 0010001C0034lampbuffers		.db $00,$10,$00,$1C,$00,$34,$00,$28
4994   F18F 0028
4995   F191             
4996   F191             ;*************************************************************************
4997   F191             ;* Turn On Lamp: Lamp number is in A (packed format). This can also be 
4998   F191             ;*               used to set a bitflag.
4999   F191             ;*************************************************************************
5000   F191 DF BC       lamp_on		stx	temp3
5001   F193 CE 00 10    			ldx	#lampbuffer0			;Set up correct index to lampbuffer
5002   F196 37          lamp_or		pshb	
5003   F197 8D 79       			bsr	unpack_byte				
5004   F199 37          			pshb						;B now contains the bitpos
5005   F19A EA 00       			orab	$00,X
5006   F19C E7 00       lamp_commit		stab	$00,X					;turn it on
5007   F19E DF BA       			stx	temp2
5008   F1A0 D6 BB       			ldab	temp2+1				;was item worked on within lampbuffer0
5009   F1A2 C1 1C       			cmpb	#(bitflags)&$FF			;compare index against start of bitflags
5010   F1A4 33          			pulb	
5011   F1A5 24 05       			bcc	lamp_done
5012   F1A7 53          			comb						;If we are here, then we must switch buffers.
5013   F1A8 E4 30       			andb	lampbufferselectx,X		;We are now on buffer 0
5014   F1AA E7 30       			stab	lampbufferselectx,X
5015   F1AC 33          lamp_done		pulb	
5016   F1AD DE BC       			ldx	temp3
5017   F1AF 39          			rts
5018   F1B0             
5019   F1B0             ;*************************************************************************
5020   F1B0             ;* Turn Off Lamp: Lamp number is in A (packed format). This can also be 
5021   F1B0             ;*               used to clear a bitflag.
5022   F1B0             ;*************************************************************************			
5023   F1B0 DF BC       lamp_off		stx	temp3
5024   F1B2 CE 00 10    			ldx	#lampbuffer0
5025   F1B5 37          lamp_and		pshb	
5026   F1B6 8D 5A       			bsr	unpack_byte				;seperate into X and B
5027   F1B8 37          			pshb	
5028   F1B9 53          			comb	
5029   F1BA E4 00       			andb	$00,X
5030   F1BC 20 DE       			bra	lamp_commit
5031   F1BE             
5032   F1BE             ;*************************************************************************
5033   F1BE             ;* Sets a Lamp to 'flashing' state
5034   F1BE             ;*************************************************************************			
5035   F1BE DF BC       lamp_flash		stx	temp3
5036   F1C0 CE 00 40    			ldx	#lampflashflag
5037   F1C3 20 D1       			bra	lamp_or
5038   F1C5             
5039   F1C5             ;*************************************************************************
5040   F1C5             ;* Toggle Lamp from existing state. This may be used on bitflags as well.
5041   F1C5             ;*************************************************************************			
5042   F1C5 DF BC       lamp_invert		stx	temp3
5043   F1C7 CE 00 10    			ldx	#lampbuffer0
5044   F1CA 37          lamp_eor		pshb	
5045   F1CB 8D 45       			bsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5046   F1CD E8 00       			eorb	$00,X
5047   F1CF E7 00       			stab	$00,X
5048   F1D1 20 D9       			bra	lamp_done				;Leave now
5049   F1D3             				
5050   F1D3 DF BC       lamp_on_b		stx	temp3
5051   F1D5 CE 00 28    			ldx	#lampbufferselect
5052   F1D8 20 BC       			bra	lamp_or
5053   F1DA             
5054   F1DA DF BC       lamp_off_b		stx	temp3
5055   F1DC CE 00 28    			ldx	#lampbufferselect
5056   F1DF 20 D4       			bra	lamp_and
5057   F1E1             
5058   F1E1 DF BC       lamp_invert_b	stx	temp3
5059   F1E3 CE 00 28    			ldx	#lampbufferselect
5060   F1E6 20 E2       			bra	lamp_eor
5061   F1E8             
5062   F1E8 DF BC       lamp_on_1		stx	temp3
5063   F1EA CE 00 34    			ldx	#lampbuffer1
5064   F1ED 20 A7       			bra	lamp_or
5065   F1EF             
5066   F1EF DF BC       lamp_off_1		stx	temp3
5067   F1F1 CE 00 34    			ldx	#lampbuffer1
5068   F1F4 20 BF       			bra	lamp_and
5069   F1F6             
5070   F1F6 DF BC       lamp_invert_1	stx	temp3
5071   F1F8 CE 00 34    			ldx	#lampbuffer1
5072   F1FB 20 CD       			bra	lamp_eor
5073   F1FD             			
5074   F1FD DF BC       lamp_on_f		stx	temp3
5075   F1FF CE 00 1C    			ldx	#bitflags
5076   F202 20 92       			bra	lamp_or
5077   F204             
5078   F204 DF BC       lamp_off_f		stx	temp3
5079   F206 CE 00 1C    			ldx	#bitflags
5080   F209 20 AA       			bra	lamp_and
5081   F20B             
5082   F20B DF BC       lamp_invert_f	stx	temp3
5083   F20D CE 00 1C    			ldx	#bitflags
5084   F210 20 B8       			bra	lamp_eor
5085   F212             
5086   F212             ;*********************************************************
5087   F212             ;* Converts Packed Byte data into an Index in X and a
5088   F212             ;* bitpos in B
5089   F212             ;*
5090   F212             ;* Packed Data Format: IIII IBBB
5091   F212             ;*
5092   F212             ;*	Where IIIII is the index to the lamp buffers.
5093   F212             ;*    Values between 
5094   F212             ;*      0-7		lampbuffer0
5095   F212             ;*      7-15	
5096   F212             ;*********************************************************	
5097   F212 36          unpack_byte		psha	
5098   F213 44          			lsra	
5099   F214 44          			lsra	
5100   F215 44          			lsra	
5101   F216 BD EE 3E    			jsr	xplusa				;X = X + A
5102   F219 32          			pula	
5103   F21A 7E EA E5    			jmp	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
5104   F21D             
5105   F21D             ;***************************************************************
5106   F21D             ;* Lamp Range Manipulation Code Start Here
5107   F21D             ;***************************************************************
5108   F21D             ;Clears all lamps in specified buffer, sets active buffer to 0		
5109   F21D 8D 71       lampm_clr0		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5110   F21F             			begin
5110   F21F             
5111   F21F 17          				tba	
5112   F220 43          				coma	
5113   F221 A4 00       				anda	$00,X
5114   F223 8D 07       				bsr	lampm_buf0			;Set Lamp to Buffer 0
5115   F225 BD F2 CB    				jsr	lamp_left			;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5116   F228             			csend						;Loop it!
5116   F228             
5116   F228             
5116   F228~            			csend						;Loop it!
5116   F228~            			csend						;Loop it!
5116   F228             
5116   F228 24 F5       
5116   F22A             
5116   F22A~            			csend						;Loop it!
5116   F22A~            			csend						;Loop it!
5116   F22A             
5117   F22A 20 5D       			bra	abx_ret
5118   F22C             
5119   F22C A7 00       lampm_buf0		staa	$00,X
5120   F22E DF BA       			stx	temp2
5121   F230 96 BB       			ldaa	temp2+1
5122   F232 81 1C       			cmpa	#$1C					;If we are not using Buffer $0010 then skip this
5123   F234             			ifcs
5123   F234             
5123   F234 24 FE       
5124   F236 17          				tba	
5125   F237 43          				coma	
5126   F238 A4 30       				anda	lampbufferselectx,X
5127   F23A A7 30       				staa	lampbufferselectx,X
5128   F23C             			endif
5128   F23C             
5128   F23C             
5128   F23C             
5128   F23C             
5128   F23C             
5128   F23C~            			endif
5128   F23C~            			endif
5128   F23C             
5128   F23C~            			endif
5128   F23C~            			endif
5128   F23C             
5128   F235             
5128   F235 06          
5128   F236             
5128   F236             
5128   F236~            			endif
5128   F236~            			endif
5128   F236~            			endif
5128   F236             
5128   F23C             
5128   F23C~            			endif
5128   F23C~            			endif
5128   F23C             
5129   F23C 39          			rts	 
5130   F23D             
5131   F23D             ;Invert entire range
5132   F23D 8D 51       lampm_f		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5133   F23F             			begin
5133   F23F             
5134   F23F 17          				tba	
5135   F240 A8 00       				eora	$00,X
5136   F242 A7 00       				staa	$00,X
5137   F244 BD F2 CB    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5138   F247             			csend
5138   F247             
5138   F247             
5138   F247~            			csend
5138   F247~            			csend
5138   F247             
5138   F247 24 F6       
5138   F249             
5138   F249~            			csend
5138   F249~            			csend
5138   F249             
5139   F249 20 3E       			bra	abx_ret
5140   F24B             
5141   F24B             ;This is unused in the macros. You must call it directly at $F1D5
5142   F24B             ;The behavior of this command is probably the most complex. It 
5143   F24B             ;starts at the last lamp in the range. If it is already set, then
5144   F24B             ;the routine simply exits. If the last lamp is not set, the routine
5145   F24B             ;goes down through each lamp in the range. If if finds a lamp on,
5146   F24B             ;then it turns off that lamp, then goes back up to the next lamp
5147   F24B             ;and turns it on. If no lamps are on in the range, then the first
5148   F24B             ;lamp in the range is turned on.
5149   F24B             ;The best example of this routine is for the 10-20-30 lamps on 
5150   F24B             ;Jungle Lord. It will simply incrment the 10-20-30 lamps sequentially
5151   F24B             ;and then stop at 30. If none are on, then it will turn on 10.
5152   F24B             lampm_g				
5153   F24B 8D 4F       			bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
5154   F24D 26 3A       			bne	abx_ret
5155   F24F             			begin
5155   F24F             
5156   F24F BD F2 DA    				jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5157   F252 25 08       				bcs	b_098
5158   F254             			neend
5158   F254             
5158   F254             
5158   F254~            			neend
5158   F254~            			neend
5158   F254             
5158   F254 27 F9       
5158   F256             
5158   F256~            			neend
5158   F256~            			neend
5158   F256             
5159   F256 17          			tba	
5160   F257 43          			coma	
5161   F258 A4 00       			anda	$00,X
5162   F25A A7 00       			staa	$00,X
5163   F25C 8D 6D       b_098			bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5164   F25E EA 00       b_09A			orab	$00,X
5165   F260 E7 00       			stab	$00,X
5166   F262 20 25       			bra	abx_ret
5167   F264             
5168   F264             ;***************************************************
5169   F264             ;* Goes through range bits from low to high and
5170   F264             ;* finds first cleared bit, sets it and exits.	
5171   F264             ;***************************************************	
5172   F264 8D 2A       lampm_a		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5173   F266             			begin
5173   F266             
5174   F266 27 F6       				beq	b_09A
5175   F268 8D 61       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5176   F26A 25 1D       				bcs	abx_ret				;Return if we have reached end lamp
5177   F26C             			loopend
5177   F26C             
5177   F26C             
5177   F26C~            			loopend
5177   F26C~            			loopend
5177   F26C             
5177   F26C 20 F8       
5177   F26E             
5177   F26E~            			loopend
5177   F26E~            			loopend
5177   F26E             
5178   F26E             
5179   F26E             ;***************************************************
5180   F26E             ;* Goes through range bits from low to high and
5181   F26E             ;* finds first cleared bit, sets it and exits. If 
5182   F26E             ;* all bits in range are already set, then routine 
5183   F26E             ;* clears all bits in range.
5184   F26E             ;***************************************************			
5185   F26E 8D 20       lampm_b		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5186   F270             			begin
5186   F270             
5187   F270 27 EC       				beq	b_09A
5188   F272 8D 57       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5189   F274             			csend
5189   F274             
5189   F274             
5189   F274~            			csend
5189   F274~            			csend
5189   F274             
5189   F274 24 FA       
5189   F276             
5189   F276~            			csend
5189   F276~            			csend
5189   F276             
5190   F276 DE BC       			ldx	temp3
5191   F278 96 BE       			ldaa	sys_temp1
5192   F27A D6 BF       			ldab	sys_temp2
5193   F27C 20 9F       			bra	lampm_clr0				;Turn OFF All lamps in Range
5194   F27E             
5195   F27E             ;Sets all lamp bits specified buffer, sets active buffer to 0 if action is on buffer 0			
5196   F27E 8D 10       lampm_set0		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5197   F280             			begin
5197   F280             
5198   F280 17          				tba	
5199   F281 AA 00       				oraa	$00,X
5200   F283 8D A7       				bsr	lampm_buf0			;Set Lamp to Buffer 0
5201   F285 8D 44       				bsr	lamp_left			;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5202   F287             			csend
5202   F287             
5202   F287             
5202   F287~            			csend
5202   F287~            			csend
5202   F287             
5202   F287 24 F7       
5202   F289             
5202   F289~            			csend
5202   F289~            			csend
5202   F289             
5203   F289 96 BE       abx_ret		ldaa	sys_temp1
5204   F28B D6 BF       			ldab	sys_temp2
5205   F28D DE BC       			ldx	temp3
5206   F28F 39          			rts	 
5207   F290             
5208   F290             ;************************************************************
5209   F290             ;* Lamp Range Routines: This take care of manipulating
5210   F290             ;*                      a collection of sequential lamps
5211   F290             ;*                      to create various lighting effects.
5212   F290             ;************************************************************
5213   F290             ;* Loads the Lamp range data
5214   F290             ;*
5215   F290             ;* sys_temp2 = start lamp
5216   F290             ;* sys_temp3 = end lamp
5217   F290             ;* A = Byte data anded with curent bit
5218   F290             ;* B = Bitpos
5219   F290             ;* X = Lamp Byte Postion
5220   F290             ;*
5221   F290             ;************************************			
5222   F290 BD F2 A2    lampr_start		jsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Bitpos X=Buffer
5223   F293 96 C0       			ldaa	sys_temp3				;Starting lamp in range
5224   F295 BD F2 12    lr_ret		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5225   F298 17          			tba	
5226   F299 A4 00       			anda	$00,X
5227   F29B 39          			rts	 
5228   F29C             
5229   F29C 8D 04       lampr_end		bsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Bitpos X=Buffer
5230   F29E 96 C1       			ldaa	sys_temp4				;End Lamp In range
5231   F2A0 20 F3       			bra	lr_ret
5232   F2A2             			
5233   F2A2 DF BC       lampr_setup		stx	temp3
5234   F2A4 97 BE       			staa	sys_temp1
5235   F2A6 D7 BF       			stab	sys_temp2
5236   F2A8 FE D0 4F    			ldx	gr_lamptable_ptr			;Game ROM: Lamp Range Table
5237   F2AB 16          			tab	
5238   F2AC 58          			aslb	
5239   F2AD C4 7F       			andb	#$7F
5240   F2AF BD EE 8C    			jsr	xplusb
5241   F2B2 EE 00       			ldx	$00,X
5242   F2B4 DF C0       			stx	sys_temp3				;Save Lamp Range
5243   F2B6 CE F1 89    			ldx	#lampbuffers			;Lamp Buffer Locations
5244   F2B9 49          			rola	
5245   F2BA 49          			rola	
5246   F2BB 49          			rola	
5247   F2BC 48          			asla	
5248   F2BD 84 07       			anda	#$07
5249   F2BF BD EE 3E    			jsr	xplusa				;X = X + A
5250   F2C2 EE 00       			ldx	$00,X					;Get the Buffer Pointer Specified
5251   F2C4 D6 C1       			ldab	sys_temp4
5252   F2C6 D0 C0       			subb	sys_temp3
5253   F2C8 D7 B8       			stab	temp1					;Store how many lamps affected
5254   F2CA 39          			rts	 
5255   F2CB             
5256   F2CB             ;*************************************************************
5257   F2CB             ;* Moves current lamp bit up one bit. If shifted off end of 
5258   F2CB             ;* current lamp buffer byte, then byte is incremented and bit
5259   F2CB             ;* is reset to $01.
5260   F2CB             ;*************************************************************			
5261   F2CB 58          lamp_left		aslb					;shift it
5262   F2CC             			ifcs					;did it go off end
5262   F2CC             
5262   F2CC 24 FE       
5263   F2CE 59          				rolb					;yes, rolb to #$01
5264   F2CF 08          				inx					;increment the byte position
5265   F2D0             			endif
5265   F2D0             
5265   F2D0             
5265   F2D0             
5265   F2D0             
5265   F2D0             
5265   F2D0~            			endif
5265   F2D0~            			endif
5265   F2D0             
5265   F2D0~            			endif
5265   F2D0~            			endif
5265   F2D0             
5265   F2CD             
5265   F2CD 02          
5265   F2CE             
5265   F2CE             
5265   F2CE~            			endif
5265   F2CE~            			endif
5265   F2CE~            			endif
5265   F2CE             
5265   F2D0             
5265   F2D0~            			endif
5265   F2D0~            			endif
5265   F2D0             
5266   F2D0 96 B8       ls_ret		ldaa	temp1				;load up the original lamp counter until end lamp
5267   F2D2 80 01       			suba	#$01				;take one off
5268   F2D4 97 B8       			staa	temp1				;store it again
5269   F2D6 17          			tba					;get the bit back again
5270   F2D7 A4 00       			anda	$00,X				;AND accum A with current buffer location
5271   F2D9 39          			rts	
5272   F2DA             
5273   F2DA             ;*************************************************************
5274   F2DA             ;* Moves current lamp bit down one bit. If shifted off start of 
5275   F2DA             ;* current lamp buffer byte, then byte is deincremented and bit
5276   F2DA             ;* is reset to #$80
5277   F2DA             ;*************************************************************			
5278   F2DA 54          lamp_right		lsrb	
5279   F2DB 24 F3       			bcc	ls_ret
5280   F2DD 56          			rorb	
5281   F2DE 09          			dex	
5282   F2DF 20 EF       			bra	ls_ret
5283   F2E1             
5284   F2E1             ;***************************************************
5285   F2E1             ;* Goes through range bits from high to low, routine
5286   F2E1             ;* finds first bit in range that is set and clears
5287   F2E1             ;* it and then exits.
5288   F2E1             ;***************************************************			
5289   F2E1 8D B9       lampm_c		bsr	lampr_end				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5290   F2E3             lm_test		ifeq
5290   F2E3             
5290   F2E3 26 FE       
5291   F2E5 8D F3       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5292   F2E7 24 FA       				bcc	lm_test
5293   F2E9 20 9E       				bra	abx_ret
5294   F2EB             			endif
5294   F2EB             
5294   F2EB             
5294   F2EB             
5294   F2EB             
5294   F2EB             
5294   F2EB~            			endif
5294   F2EB~            			endif
5294   F2EB             
5294   F2EB~            			endif
5294   F2EB~            			endif
5294   F2EB             
5294   F2E4             
5294   F2E4 06          
5294   F2E5             
5294   F2E5             
5294   F2E5~            			endif
5294   F2E5~            			endif
5294   F2E5~            			endif
5294   F2E5             
5294   F2EB             
5294   F2EB~            			endif
5294   F2EB~            			endif
5294   F2EB             
5295   F2EB 53          			comb	
5296   F2EC E4 00       			andb	$00,X
5297   F2EE E7 00       			stab	$00,X
5298   F2F0 20 97       			bra	abx_ret
5299   F2F2             
5300   F2F2             ;Rotate Up			
5301   F2F2 8D 9C       lampm_e		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5302   F2F4 DF BA       			stx	temp2
5303   F2F6 D7 B9       			stab	temp1+1
5304   F2F8             			begin
5304   F2F8             
5305   F2F8 97 C2       				staa	sys_temp5
5306   F2FA 8D CF       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5307   F2FC 25 04       				bcs	b_0A2					;Branch if we are at the end of the range
5308   F2FE 8D 1A       				bsr	b_0A3
5309   F300             			loopend
5309   F300             
5309   F300             
5309   F300~            			loopend
5309   F300~            			loopend
5309   F300             
5309   F300 20 F6       
5309   F302             
5309   F302~            			loopend
5309   F302~            			loopend
5309   F302             
5310   F302             			
5311   F302 DE BA       b_0A2			ldx	temp2					;Get the last Byte location
5312   F304 D6 B9       			ldab	temp1+1				;Get the last Bitpos
5313   F306 8D 12       			bsr	b_0A3
5314   F308 20 38       			bra	to_abx_ret
5315   F30A             
5316   F30A             ;Rotate Down			
5317   F30A 8D 90       lampm_d		bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
5318   F30C DF BA       			stx	temp2
5319   F30E D7 B9       			stab	temp1+1
5320   F310             			begin
5320   F310             
5321   F310 97 C2       				staa	sys_temp5
5322   F312 8D C6       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5323   F314 25 EC       				bcs	b_0A2
5324   F316 8D 02       				bsr	b_0A3
5325   F318             			loopend
5325   F318             
5325   F318             
5325   F318~            			loopend
5325   F318~            			loopend
5325   F318             
5325   F318 20 F6       
5325   F31A             
5325   F31A~            			loopend
5325   F31A~            			loopend
5325   F31A             
5326   F31A             
5327   F31A 36          b_0A3			psha					
5328   F31B 17          			tba					;B has the bitpos
5329   F31C 43          			coma	
5330   F31D A4 00       			anda	$00,X				;Mask it off
5331   F31F 7D 00 C2    			tst	sys_temp5			;sys_temp5 has the first bit in range's value or 0s
5332   F322             			ifne					;if it was on
5332   F322             
5332   F322 27 FE       
5333   F324 1B          				aba					;make it on again
5334   F325             			endif
5334   F325             
5334   F325             
5334   F325             
5334   F325             
5334   F325             
5334   F325~            			endif
5334   F325~            			endif
5334   F325             
5334   F325~            			endif
5334   F325~            			endif
5334   F325             
5334   F323             
5334   F323 01          
5334   F324             
5334   F324             
5334   F324~            			endif
5334   F324~            			endif
5334   F324~            			endif
5334   F324             
5334   F325             
5334   F325~            			endif
5334   F325~            			endif
5334   F325             
5335   F325 A7 00       			staa	$00,X				;store it
5336   F327 32          			pula	
5337   F328 39          			rts
5338   F329             
5339   F329 BD F2 9C    lampm_z		jsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
5340   F32C             			ifeq
5340   F32C             
5340   F32C 26 FE       
5341   F32E             				begin
5341   F32E             
5342   F32E 8D AA       					bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5343   F330 25 10       					bcs	to_abx_ret
5344   F332             				neend
5344   F332             
5344   F332             
5344   F332~            				neend
5344   F332~            				neend
5344   F332             
5344   F332 27 FA       
5344   F334             
5344   F334~            				neend
5344   F334~            				neend
5344   F334             
5345   F334             			endif
5345   F334             
5345   F334             
5345   F334             
5345   F334             
5345   F334             
5345   F334~            			endif
5345   F334~            			endif
5345   F334             
5345   F334~            			endif
5345   F334~            			endif
5345   F334             
5345   F32D             
5345   F32D 06          
5345   F32E             
5345   F32E             
5345   F32E~            			endif
5345   F32E~            			endif
5345   F32E~            			endif
5345   F32E             
5345   F334             
5345   F334~            			endif
5345   F334~            			endif
5345   F334             
5346   F334 17          			tba	
5347   F335 A8 00       			eora	$00,X
5348   F337 A7 00       			staa	$00,X
5349   F339 BD F2 DA    			jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
5350   F33C 25 04       			bcs	to_abx_ret
5351   F33E EA 00       			orab	$00,X
5352   F340 E7 00       			stab	$00,X
5353   F342 7E F2 89    to_abx_ret		jmp	abx_ret
5354   F345             
5355   F345 BD F2 90    lfill_a		jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5356   F348             b_0AB			ifne
5356   F348             
5356   F348 27 FE       
5357   F34A BD F2 CB    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5358   F34D 24 F9       				bcc	b_0AB
5359   F34F 20 F1       				bra	to_abx_ret
5360   F351             			endif
5360   F351             
5360   F351             
5360   F351             
5360   F351             
5360   F351             
5360   F351~            			endif
5360   F351~            			endif
5360   F351             
5360   F351~            			endif
5360   F351~            			endif
5360   F351             
5360   F349             
5360   F349 07          
5360   F34A             
5360   F34A             
5360   F34A~            			endif
5360   F34A~            			endif
5360   F34A~            			endif
5360   F34A             
5360   F351             
5360   F351~            			endif
5360   F351~            			endif
5360   F351             
5361   F351 0C          lmp_clc		clc	
5362   F352 20 EE       			bra	to_abx_ret
5363   F354             
5364   F354 BD F2 90    lfill_b		jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5365   F357             			begin
5365   F357             
5366   F357 26 F8       				bne	lmp_clc
5367   F359 BD F2 CB    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5368   F35C             			csend
5368   F35C             
5368   F35C             
5368   F35C~            			csend
5368   F35C~            			csend
5368   F35C             
5368   F35C 24 F9       
5368   F35E             
5368   F35E~            			csend
5368   F35E~            			csend
5368   F35E             
5369   F35E 20 E2       			bra	to_abx_ret
5370   F360             
5371   F360 CE 00 7D    bit_switch		ldx	#switch_debounced
5372   F363 20 12       			bra	bit_main
5373   F365 CE 00 40    bit_lamp_flash	ldx	#lampflashflag
5374   F368 20 0D       			bra	bit_main
5375   F36A CE 00 34    bit_lamp_buf_1	ldx	#lampbuffer1
5376   F36D 20 08       			bra	bit_main
5377   F36F CE 00 1C    bit_lamp_buf_f	ldx	#bitflags
5378   F372 20 03       			bra	bit_main
5379   F374 CE 00 10    bit_lamp_buf_0	ldx	#lampbuffer0
5380   F377 BD F2 12    bit_main		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5381   F37A E5 00       			bitb	$00,X
5382   F37C 39          			rts	
5383   F37D             
5384   F37D 84 3F       lampm_x		anda	#$3F
5385   F37F BD F2 90    			jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
5386   F382             			begin
5386   F382             
5387   F382 97 C8       				staa	thread_priority			;This is probably just a temp location?
5388   F384 17          				tba	
5389   F385 43          				coma	
5390   F386 A4 24       				anda	bitflagsx,X
5391   F388 9A C8       				oraa	thread_priority			;Recall temp
5392   F38A A7 24       				staa	bitflagsx,X
5393   F38C BD F2 CB    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
5394   F38F             			csend
5394   F38F             
5394   F38F             
5394   F38F~            			csend
5394   F38F~            			csend
5394   F38F             
5394   F38F 24 F1       
5394   F391             
5394   F391~            			csend
5394   F391~            			csend
5394   F391             
5395   F391 20 AF       			bra	to_abx_ret
5396   F393             			
5397   F393             ;***************************************************
5398   F393             ;* System Checksum #2: Set to make ROM csum from
5399   F393             ;*                     $F000-F7FF equal to $00
5400   F393             ;***************************************************
5401   F393             	
5402   F393 D8          csum2			.db $D8
5403   F394             
5404   F394             ;***************************************************
5405   F394             ;* VM Macro Pointers: Master Lookup Table
5406   F394             ;***************************************************
5407   F394             				
5408   F394 F4 5A       master_vm_lookup	.dw vm_control_0x		;Misc Functions
5409   F396 F4 7B       			.dw vm_control_1x		;Lamp Functions
5410   F398 F4 C1       			.dw vm_control_2x		;Lamp Functions
5411   F39A F4 DC       			.dw vm_control_3x		;Solenoid Functions
5412   F39C F4 E9       			.dw vm_control_4x		;Sound, Immediate Exe Functions
5413   F39E F5 3B       			.dw vm_control_5x		;RAM,Delay,Jump,SimpleBransh Functions
5414   F3A0 F5 DA       			.dw vm_control_6x		;Indexed Delay Functions
5415   F3A2 F5 DE       			.dw vm_control_7x		;Immediate Delay Functions
5416   F3A4 F5 E2       			.dw vm_control_8x		;Jump Relative 
5417   F3A6 F5 F2       			.dw vm_control_9x		;jsr Relative
5418   F3A8 F5 FC       			.dw vm_control_ax		;jsr to Code Relative
5419   F3AA F6 05       			.dw vm_control_bx		;Add RAM
5420   F3AC F6 12       			.dw vm_control_cx		;Set RAM
5421   F3AE F4 CD       			.dw vm_control_dx		;Extended Lamp Functions
5422   F3B0 F6 21       			.dw vm_control_ex		;Play Sound Once
5423   F3B2 F6 21       			.dw vm_control_fx		;Play Sound Once
5424   F3B4             
5425   F3B4 F4 62       vm_lookup_0x	.dw macro_pcminus100
5426   F3B6 F4 3C       			.dw macro_go
5427   F3B8 F4 36       			.dw macro_rts
5428   F3BA E9 C4       			.dw killthread
5429   F3BC F4 69       			.dw macro_code_start
5430   F3BE F4 71       			.dw macro_special
5431   F3C0 F4 76       			.dw macro_extraball
5432   F3C2             	
5433   F3C2 F2 7E       vm_lookup_1x_a	.dw lampm_set0
5434   F3C4 F2 1D       			.dw lampm_clr0
5435   F3C6 F2 64       			.dw lampm_a
5436   F3C8 F2 6E       			.dw lampm_b
5437   F3CA F2 E1       			.dw lampm_c
5438   F3CC F3 0A       			.dw lampm_d
5439   F3CE F2 F2       			.dw lampm_e
5440   F3D0 F2 3D       			.dw lampm_f 
5441   F3D2               
5442   F3D2 F1 91       vm_lookup_1x_b	.dw lamp_on
5443   F3D4 F1 B0       			.dw lamp_off
5444   F3D6 F1 C5       			.dw lamp_invert
5445   F3D8 F1 BE       			.dw lamp_flash
5446   F3DA             
5447   F3DA             vm_lookup_2x
5448   F3DA F1 D3       			.dw lamp_on_b
5449   F3DC F1 DA       			.dw lamp_off_b
5450   F3DE F1 E1       			.dw lamp_invert_b
5451   F3E0             
5452   F3E0             vm_lookup_2x_b
5453   F3E0 F1 E8       			.dw lamp_on_1
5454   F3E2 F1 EF       			.dw lamp_off_1
5455   F3E4 F1 F6       			.dw lamp_invert_1
5456   F3E6             
5457   F3E6             vm_lookup_2x_c
5458   F3E6 F1 FD       			.dw lamp_on_f
5459   F3E8 F2 04       			.dw lamp_off_f
5460   F3EA F2 0B       			.dw lamp_invert_f
5461   F3EC             
5462   F3EC             vm_lookup_4x
5463   F3EC EB D3       			.dw add_points
5464   F3EE EB 3D       			.dw score_main  
5465   F3F0 EB 36       			.dw dsnd_pts 
5466   F3F2             
5467   F3F2             vm_lookup_5x    
5468   F3F2 F5 44       			.dw macro_ramadd
5469   F3F4 F5 59       			.dw macro_ramcopy
5470   F3F6 F5 64       			.dw macro_set_pri
5471   F3F8 F5 6C       			.dw macro_delay_imm_b
5472   F3FA F5 89       			.dw macro_rem_th_s
5473   F3FC F5 90       			.dw macro_rem_th_m
5474   F3FE F5 97       			.dw macro_jsr_noreturn
5475   F400 F5 C1       			.dw macro_jsr_return
5476   F402 F6 67       			.dw macro_branch
5477   F404 F6 67       			.dw macro_branch
5478   F406 F6 67       			.dw macro_branch
5479   F408 F6 67       			.dw macro_branch
5480   F40A F5 E9       			.dw macro_jmp_cpu
5481   F40C F6 3E       			.dw macro_setswitch
5482   F40E F6 56       			.dw macro_clearswitch
5483   F410 F6 00       			.dw macro_jmp_abs
5484   F412             
5485   F412             branch_lookup
5486   F412 F6 F3       			.dw branch_tilt		;Tilt Flag				
5487   F414 F6 FA       			.dw branch_gameover     ;Game Over Flag			
5488   F416 F5 2F       			.dw macro_getnextbyte	;NextByte = Straight Data		
5489   F418 F6 D6       			.dw branch_invert		;Invert Result			
5490   F41A F6 DB       			.dw branch_lamp_on	;Check if Lamp is On or Flashing
5491   F41C F6 E7       			.dw branch_lamprangeoff	;Lamp Range All Off			
5492   F41E F6 EE       			.dw branch_lamprangeon	;Lamp Range All On			
5493   F420 F7 01       			.dw branch_lampbuf1	;RAM Matrix $0028			
5494   F422 F7 0D       			.dw branch_switch		;Check Encoded Switch		
5495   F424 F7 17       			.dw branch_add		;A = A + B				
5496   F426 F7 12       			.dw branch_and		;Logical AND 				
5497   F428 F7 19       			.dw branch_or		;Logical OR 				
5498   F42A F7 1E       			.dw branch_equal		;A = B ??				
5499   F42C F7 23       			.dw branch_ge		;A >= B ??				
5500   F42E F7 26       			.dw branch_threadpri	;Check for Priority Thread??	
5501   F430 F7 2D       			.dw branch_bitwise	;A && B	
5502   F432             
5503   F432             ;*************************************************************
5504   F432             ;* Virtual Machine Routines:
5505   F432             ;*
5506   F432             ;* These are the main routines that are called to interpret
5507   F432             ;* the commands written in WML7.
5508   F432             ;*************************************************************
5509   F432             macro_start		
5510   F432 97 00       			staa	ram_base
5511   F434 D7 01       			stab	ram_base+1
5512   F436             macro_rts		
5513   F436 32          			pula	
5514   F437 97 EF       			staa	vm_pc
5515   F439 32          			pula	
5516   F43A 97 F0       			staa	vm_pc+1
5517   F43C             macro_go		
5518   F43C BD D0 BA    			jsr	gr_macro_event
5519   F43F BD F5 2F    			jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5520   F442 16          			tab	
5521   F443 54          			lsrb	
5522   F444 54          			lsrb	
5523   F445 54          			lsrb	
5524   F446 C4 1E       			andb	#$1E
5525   F448 CE F3 94    			ldx	#master_vm_lookup
5526   F44B BD EE 8C    			jsr	xplusb
5527   F44E EE 00       			ldx	$00,X
5528   F450 6E 00       			jmp	$00,X
5529   F452             
5530   F452 DF EF       macro_next		stx	vm_pc
5531   F454 97 00       abreg_sto		staa	vm_reg_a
5532   F456 D7 01       breg_sto		stab	vm_reg_b
5533   F458 20 E2       			bra	macro_go
5534   F45A             			
5535   F45A             
5536   F45A CE F3 B4    vm_control_0x	ldx	#vm_lookup_0x
5537   F45D BD F5 28    			jsr	gettabledata_b			;X = data at (X + (A*2))
5538   F460 6E 00       			jmp	$00,X
5539   F462             			
5540   F462 DE EF       macro_pcminus100	ldx	vm_pc
5541   F464 09          			dex	
5542   F465 DF EF       			stx	vm_pc
5543   F467 20 D3       			bra	macro_go
5544   F469             
5545   F469 DE EF       macro_code_start	ldx	vm_pc
5546   F46B 96 00       			ldaa	ram_base
5547   F46D D6 01       			ldab	ram_base+1
5548   F46F 6E 00       			jmp	$00,X
5549   F471             
5550   F471 BD F7 4C    macro_special	jsr	award_replay			;Award Special
5551   F474 20 C6       			bra	macro_go
5552   F476             
5553   F476 BD F7 5C    macro_extraball	jsr	award_extraball			;Award Extra Ball
5554   F479 20 C1       			bra	macro_go
5555   F47B             			
5556   F47B 16          vm_control_1x	tab	
5557   F47C C4 0F       			andb	#$0F
5558   F47E C0 08       			subb	#$08
5559   F480 25 1D       			bcs	macro_17				;Branch for Macros 10-17
5560   F482 58          macro_x8f		aslb	
5561   F483 CE F3 C2    			ldx	#vm_lookup_1x_a
5562   F486 BD EE 8C    			jsr	xplusb				;X = X + B)
5563   F489 EE 00       			ldx	$00,X
5564   F48B 16          			tab						;Original Command #
5565   F48C 58          			aslb	
5566   F48D 58          			aslb	
5567   F48E C4 80       			andb	#$80
5568   F490             b_0AF			begin
5568   F490             
5569   F490 BD F5 2F    				jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5570   F493 36          				psha	
5571   F494 84 7F       				anda	#$7F
5572   F496 1B          				aba	
5573   F497 AD 00       				jsr	$00,X
5574   F499 32          				pula	
5575   F49A 4D          				tsta	
5576   F49B             			plend
5576   F49B             
5576   F49B             
5576   F49B~            			plend
5576   F49B~            			plend
5576   F49B             
5576   F49B 2B F3       
5576   F49D             
5576   F49D~            			plend
5576   F49D~            			plend
5576   F49D             
5577   F49D 20 9D       			bra	macro_go
5578   F49F             			
5579   F49F CE F3 D2    macro_17		ldx	#vm_lookup_1x_b
5580   F4A2 16          macro_x17		tab						;A = still instruction #
5581   F4A3 84 03       			anda	#$03
5582   F4A5 BD F5 28    			jsr	gettabledata_b			;X = data at (X + (A*2))
5583   F4A8 C5 04       			bitb	#$04
5584   F4AA             			ifeq					;Branch on 14-17
5584   F4AA             
5584   F4AA 26 FE       
5585   F4AC 5F          				clrb	
5586   F4AD 20 E1       				bra	b_0AF
5587   F4AF             			endif
5587   F4AF             
5587   F4AF             
5587   F4AF             
5587   F4AF             
5587   F4AF             
5587   F4AF~            			endif
5587   F4AF~            			endif
5587   F4AF             
5587   F4AF~            			endif
5587   F4AF~            			endif
5587   F4AF             
5587   F4AB             
5587   F4AB 03          
5587   F4AC             
5587   F4AC             
5587   F4AC~            			endif
5587   F4AC~            			endif
5587   F4AC~            			endif
5587   F4AC             
5587   F4AF             
5587   F4AF~            			endif
5587   F4AF~            			endif
5587   F4AF             
5588   F4AF             			begin
5588   F4AF             
5589   F4AF 8D 7E       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5590   F4B1 16          				tab	
5591   F4B2 DF BC       				stx	temp3
5592   F4B4 BD F5 B2    				jsr	macro_b_ram				;$00,LSD(A)->A
5593   F4B7 AD 00       				jsr	$00,X
5594   F4B9 DE BC       				ldx	temp3
5595   F4BB 5D          				tstb	
5596   F4BC             			plend
5596   F4BC             
5596   F4BC             
5596   F4BC~            			plend
5596   F4BC~            			plend
5596   F4BC             
5596   F4BC 2B F1       
5596   F4BE             
5596   F4BE~            			plend
5596   F4BE~            			plend
5596   F4BE             
5597   F4BE 7E F4 3C    to_macro_go1	jmp	macro_go
5598   F4C1             
5599   F4C1 16          vm_control_2x	tab						;A= macro
5600   F4C2 C4 0F       			andb	#$0F
5601   F4C4 C0 08       			subb	#$08
5602   F4C6 24 BA       			bcc	macro_x8f				;Branch for Macros 28-2F
5603   F4C8 CE F3 DA    			ldx	#vm_lookup_2x
5604   F4CB 20 D5       			bra	macro_x17
5605   F4CD CE F3 E0    vm_control_dx	ldx   #vm_lookup_2x_b
5606   F4D0 16          			tab   
5607   F4D1 C4 0F       			andb  #$0F
5608   F4D3 C0 08       			subb  #$08
5609   F4D5 25 CB       			bcs   macro_x17
5610   F4D7 CE F3 E6    			ldx   #vm_lookup_2x_c
5611   F4DA 20 C6       			bra   macro_x17
5612   F4DC             
5613   F4DC 16          vm_control_3x	tab	
5614   F4DD C4 0F       			andb	#$0F					;16 Solenoids Max 
5615   F4DF             			begin
5615   F4DF             
5616   F4DF 8D 4E       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5617   F4E1 BD EA 83    				jsr	solbuf				;Turn On/Off Solenoid
5618   F4E4 5A          				decb	
5619   F4E5             			eqend
5619   F4E5             
5619   F4E5             
5619   F4E5~            			eqend
5619   F4E5~            			eqend
5619   F4E5             
5619   F4E5 26 F8       
5619   F4E7             
5619   F4E7~            			eqend
5619   F4E7~            			eqend
5619   F4E7             
5620   F4E7 20 D5       			bra	to_macro_go1
5621   F4E9             
5622   F4E9 84 0F       vm_control_4x	anda	#$0F
5623   F4EB             			ifeq
5623   F4EB             
5623   F4EB 26 FE       
5624   F4ED BD F5 84    				jsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5625   F4F0 BD EB 32    				jsr	isnd_pts				;Play Sound Index(B)Once, Add Points(A)
5626   F4F3 20 C9       				bra	to_macro_go1
5627   F4F5             			endif
5627   F4F5             
5627   F4F5             
5627   F4F5             
5627   F4F5             
5627   F4F5             
5627   F4F5~            			endif
5627   F4F5~            			endif
5627   F4F5             
5627   F4F5~            			endif
5627   F4F5~            			endif
5627   F4F5             
5627   F4EC             
5627   F4EC 08          
5627   F4ED             
5627   F4ED             
5627   F4ED~            			endif
5627   F4ED~            			endif
5627   F4ED~            			endif
5627   F4ED             
5627   F4F5             
5627   F4F5~            			endif
5627   F4F5~            			endif
5627   F4F5             
5628   F4F5 81 04       			cmpa	#$04
5629   F4F7 24 0C       			bcc	macro_exec				;Branch for Macros 44-4F (execute cpu)
5630   F4F9 CE F3 EA    			ldx	#vm_lookup_4x-2
5631   F4FC BD F5 28    			jsr	gettabledata_b			;X = data at (X + (A*2))
5632   F4FF 8D 2E       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5633   F501 AD 00       			jsr	$00,X
5634   F503 20 B9       			bra	to_macro_go1			;Continue Executing Macros
5635   F505             
5636   F505 16          macro_exec		tab	
5637   F506 C0 02       			subb	#$02
5638   F508 CE 11 30    			ldx	#exe_buffer
5639   F50B             			begin
5639   F50B             
5640   F50B 8D 22       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5641   F50D A7 00       				staa	$00,X
5642   F50F 08          				inx	
5643   F510 5A          				decb	
5644   F511             			eqend						;Add B bytes to exe Buffer 
5644   F511             
5644   F511             
5644   F511~            			eqend						;Add B bytes to exe Buffer 
5644   F511~            			eqend						;Add B bytes to exe Buffer 
5644   F511             
5644   F511 26 F8       
5644   F513             
5644   F513~            			eqend						;Add B bytes to exe Buffer 
5644   F513~            			eqend						;Add B bytes to exe Buffer 
5644   F513             
5645   F513 86 7E       			ldaa	#$7E
5646   F515 A7 00       			staa	$00,X
5647   F517 86 F4       			ldaa	#((abreg_sto>>8)&$FF)
5648   F519 A7 01       			staa	$01,X
5649   F51B 86 54       			ldaa	#((abreg_sto)&$FF)		;Tack a jmp macro_next at the end of the routine
5650   F51D A7 02       			staa	$02,X
5651   F51F 96 00       			ldaa	vm_reg_a
5652   F521 D6 01       			ldab	vm_reg_b
5653   F523 7E 11 30    			jmp	exe_buffer				;Go there Now, put return A and B into RAM $00 and $01 
5654   F526             
5655   F526 84 0F       gettabledata_w	anda	#$0F
5656   F528 48          gettabledata_b	asla	
5657   F529 BD EE 3E    			jsr	xplusa
5658   F52C EE 00       			ldx	$00,X
5659   F52E 39          			rts
5660   F52F             			
5661   F52F             macro_getnextbyte	
5662   F52F DF B8       			stx	temp1
5663   F531 DE EF       			ldx	vm_pc
5664   F533 A6 00       			ldaa	$00,X
5665   F535 08          			inx	
5666   F536 DF EF       			stx	vm_pc
5667   F538 DE B8       getx_rts		ldx	temp1
5668   F53A 39          			rts	
5669   F53B             
5670   F53B CE F3 F2    vm_control_5x	ldx	#vm_lookup_5x
5671   F53E 16          			tab						;Move our Data into B
5672   F53F BD F5 26    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
5673   F542 6E 00       			jmp	$00,X
5674   F544             
5675   F544 8D E9       macro_ramadd	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5676   F546 16          			tab	
5677   F547 8D 69       			bsr	macro_b_ram				;$00,LSD(A)->A
5678   F549 97 BC       			staa	temp3
5679   F54B 54          			lsrb	
5680   F54C 54          			lsrb	
5681   F54D 54          			lsrb	
5682   F54E 54          			lsrb	
5683   F54F 17          			tba	
5684   F550 8D 60       			bsr	macro_b_ram				;$00,LSD(A)->A
5685   F552 9B BC       			adda	temp3
5686   F554 8D 4D       ram_sto2		bsr	macro_a_ram				;A->$00,LSD(B)
5687   F556 7E F4 3C    to_macro_go2	jmp	macro_go
5688   F559             
5689   F559 8D D4       macro_ramcopy	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5690   F55B 16          			tab	
5691   F55C 8D 54       			bsr	macro_b_ram				;$00,LSD(A)->A
5692   F55E 54          			lsrb	
5693   F55F 54          			lsrb	
5694   F560 54          			lsrb	
5695   F561 54          			lsrb	
5696   F562 20 F0       			bra	ram_sto2				;A->$00,LSD(B),jmp $F3B5
5697   F564             
5698   F564 8D C9       macro_set_pri	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5699   F566 DE CF       			ldx	current_thread			;Current VM Routine being run
5700   F568 A7 0D       			staa	threadobj_id,X
5701   F56A 20 EA       			bra	to_macro_go2			;Continue Executing Macros
5702   F56C             
5703   F56C             macro_delay_imm_b	
5704   F56C 8D C1       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5705   F56E 97 D5       dly_sto		staa	thread_timer_byte
5706   F570 DE EF       			ldx	vm_pc
5707   F572 96 00       			ldaa	vm_reg_a
5708   F574 D6 01       			ldab	vm_reg_b
5709   F576 BD E9 71    			jsr	delaythread				;Push Next Address onto VM, Timer at thread_timer_byte
5710   F579 7E F4 52    			jmp	macro_next
5711   F57C             
5712   F57C             macro_getnextword		
5713   F57C 8D 06       			bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5714   F57E D7 B8       			stab	temp1
5715   F580 97 B9       			staa	temp1+1
5716   F582 20 B4       			bra	getx_rts
5717   F584             			
5718   F584 8D A9       macro_get2bytes	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5719   F586 16          			tab	
5720   F587 20 A6       			bra	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5721   F589             			
5722   F589 8D F9       macro_rem_th_s	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5723   F58B BD EA 53    			jsr	kill_thread
5724   F58E 20 C6       			bra	to_macro_go2			;Continue Executing Macros
5725   F590             			
5726   F590 8D F2       macro_rem_th_m	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
5727   F592 BD EA 5B    			jsr	kill_threads
5728   F595 20 BF       			bra	to_macro_go2			;Continue Executing Macros
5729   F597             
5730   F597             macro_jsr_noreturn	
5731   F597 8D E3       			bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5732   F599 96 F0       			ldaa	vm_pc+1
5733   F59B 36          			psha	
5734   F59C 96 EF       			ldaa	vm_pc
5735   F59E 36          			psha	
5736   F59F DF EF       pc_sto2		stx	vm_pc
5737   F5A1 20 B3       			bra	to_macro_go2			;jContinue Executing Macros
5738   F5A3             			
5739   F5A3 DF B8       macro_a_ram		stx	temp1
5740   F5A5 C4 0F       			andb	#$0F
5741   F5A7 D7 BB       			stab	temp2+1
5742   F5A9 7F 00 BA    			clr	temp2
5743   F5AC DE BA       			ldx	temp2
5744   F5AE A7 00       			staa	$00,X
5745   F5B0 20 86       to_getx_rts		bra	getx_rts
5746   F5B2             
5747   F5B2 DF B8       macro_b_ram		stx	temp1
5748   F5B4 84 0F       			anda	#$0F
5749   F5B6 97 BB       			staa	temp2+1
5750   F5B8 7F 00 BA    			clr	temp2
5751   F5BB DE BA       			ldx	temp2
5752   F5BD A6 00       			ldaa	$00,X
5753   F5BF 20 EF       			bra	to_getx_rts				;ldx temp1, rts.
5754   F5C1             
5755   F5C1 8D B9       macro_jsr_return	bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5756   F5C3 96 F0       ret_sto		ldaa	vm_pc+1
5757   F5C5 36          			psha	
5758   F5C6 96 EF       			ldaa	vm_pc
5759   F5C8 36          			psha						;Push Macro PC
5760   F5C9 96 00       			ldaa	ram_base
5761   F5CB D6 01       			ldab	ram_base+1
5762   F5CD AD 00       			jsr	$00,X
5763   F5CF 97 00       			staa	ram_base
5764   F5D1 32          			pula	
5765   F5D2 97 EF       			staa	vm_pc					;Pull Macro PC
5766   F5D4 32          			pula	
5767   F5D5 97 F0       			staa	vm_pc+1
5768   F5D7 7E F4 56    			jmp	breg_sto
5769   F5DA             
5770   F5DA 8D D6       vm_control_6x	bsr	macro_b_ram				;Load RAM Data
5771   F5DC 20 90       			bra	dly_sto				;Delay it
5772   F5DE             			
5773   F5DE 84 0F       vm_control_7x	anda	#$0F
5774   F5E0 20 8C       			bra	dly_sto				;Delay it
5775   F5E2             			
5776   F5E2 8D 44       vm_control_8x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5777   F5E4 DF EF       pc_sto		stx	vm_pc					;Store X into VMPC
5778   F5E6 7E F4 3C    to_macro_go4	jmp	macro_go
5779   F5E9             
5780   F5E9 BD F5 7C    macro_jmp_cpu	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5781   F5EC 96 00       			ldaa	vm_reg_a
5782   F5EE D6 01       			ldab	vm_reg_b
5783   F5F0 6E 00       			jmp	$00,X
5784   F5F2             			
5785   F5F2 8D 34       vm_control_9x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5786   F5F4 D6 F0       			ldab	vm_pc+1
5787   F5F6 37          			pshb	
5788   F5F7 D6 EF       			ldab	vm_pc
5789   F5F9 37          			pshb	
5790   F5FA 20 E8       			bra	pc_sto				;Store X into VMPC, continue
5791   F5FC             
5792   F5FC 8D 2A       vm_control_ax	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
5793   F5FE 20 C3       			bra	ret_sto
5794   F600             			
5795   F600 BD F5 7C    macro_jmp_abs	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5796   F603 20 DF       			bra	pc_sto
5797   F605             			
5798   F605 16          vm_control_bx	tab	
5799   F606 8D AA       			bsr	macro_b_ram				;RAM Data (A&0f)->A
5800   F608 97 BA       			staa	temp2
5801   F60A 8D 58       			bsr	to_macro_getnextbyte
5802   F60C 9B BA       			adda	temp2
5803   F60E 8D 93       ram_sto		bsr	macro_a_ram				;A->RAM(B&0f)
5804   F610 20 D4       			bra	to_macro_go4
5805   F612             
5806   F612 16          vm_control_cx	tab	
5807   F613 8D 4F       			bsr	to_macro_getnextbyte
5808   F615 20 F7       			bra	ram_sto				;Save to RAM and continue
5809   F617             			
5810   F617 84 0F       vm_control_nu	anda	#$0F
5811   F619 16          			tab	
5812   F61A 8D 48       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5813   F61C BD EC 42    			jsr	sound_sub
5814   F61F 20 C5       			bra	to_macro_go4			;jmp  $F3B5 
5815   F621             
5816   F621             vm_control_ex
5817   F621 84 1F       vm_control_fx	anda	#$1F
5818   F623 BD EC 3B    			jsr	isnd_once				;Play Sound Index(A) Once
5819   F626 20 BE       			bra	to_macro_go4
5820   F628             			
5821   F628 84 0F       macro_pcadd		anda	#$0F
5822   F62A 85 08       			bita	#$08
5823   F62C             			ifne
5823   F62C             
5823   F62C 27 FE       
5824   F62E 8A F0       				oraa	#$F0
5825   F630             			endif
5825   F630             
5825   F630             
5825   F630             
5825   F630             
5825   F630             
5825   F630~            			endif
5825   F630~            			endif
5825   F630             
5825   F630~            			endif
5825   F630~            			endif
5825   F630             
5825   F62D             
5825   F62D 02          
5825   F62E             
5825   F62E             
5825   F62E~            			endif
5825   F62E~            			endif
5825   F62E~            			endif
5825   F62E             
5825   F630             
5825   F630~            			endif
5825   F630~            			endif
5825   F630             
5826   F630 16          			tab	
5827   F631 8D 31       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5828   F633 9B F0       			adda	vm_pc+1
5829   F635 97 B9       			staa	temp1+1
5830   F637 D9 EF       			adcb	vm_pc
5831   F639 D7 B8       			stab	temp1
5832   F63B DE B8       			ldx	temp1
5833   F63D 39          			rts	
5834   F63E             
5835   F63E 8D 0A       macro_setswitch	bsr	load_sw_no				;Get switch number from the data
5836   F640 EA 00       			orab	$00,X
5837   F642 E7 00       			stab	$00,X
5838   F644 96 C6       			ldaa	sys_temp_w3
5839   F646 2B F6       			bmi	macro_setswitch
5840   F648 20 17       			bra	to_macro_go3			;jmp  $F3B5
5841   F64A             			
5842   F64A 8D 18       load_sw_no		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5843   F64C 97 C6       			staa	sys_temp_w3
5844   F64E 84 3F       			anda	#$3F
5845   F650 CE 00 7D    			ldx	#switch_debounced
5846   F653 7E F2 12    			jmp	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
5847   F656             
5848   F656 8D F2       macro_clearswitch	bsr	load_sw_no				;Get switch number from the data
5849   F658 53          			comb	
5850   F659 E4 00       			andb	$00,X
5851   F65B E7 00       			stab	$00,X
5852   F65D 96 C6       			ldaa	sys_temp_w3
5853   F65F 2B F5       			bmi	macro_clearswitch
5854   F661 7E F4 3C    to_macro_go3	jmp	macro_go
5855   F664             
5856   F664             to_macro_getnextbyte			
5857   F664 7E F5 2F    			jmp	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
5858   F667             
5859   F667 37          macro_branch	pshb	
5860   F668 8D 28       			bsr	branchdata				;Gets Main Result
5861   F66A BD F7 39    			jsr	test_a				;Returns #80 or #81 in (A) based on Test of A
5862   F66D 33          			pulb						;Get Back Command in B
5863   F66E 1B          			aba	
5864   F66F 36          			psha	
5865   F670 C5 02       			bitb	#$02					;Relative or Absolute Branch Flag
5866   F672             			ifeq
5866   F672             
5866   F672 26 FE       
5867   F674 BD F5 7C    				jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
5868   F677             			else
5868   F677             
5868   F677             
5868   F677             
5868   F677             
5868   F673             
5868   F673             
5868   F673             
5868   F673~            			else
5868   F673~            			else
5868   F673~            			else
5868   F673~            			else
5868   F673             
5868   F673~            			else
5868   F673~            			else
5868   F673~            			else
5868   F673~            			else
5868   F673             
5868   F673             
5868   F673 05          
5868   F677             
5868   F677 20 FE       
5868   F679             
5868   F679             
5868   F679             
5868   F679~            			else
5868   F679~            			else
5868   F679~            			else
5868   F679~            			else
5868   F679~            			else
5868   F679             
5868   F679~            			else
5868   F679~            			else
5868   F679             
5868   F679~            			else
5868   F679~            			else
5868   F679             
5869   F679 8D E9       				bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5870   F67B C6 FF       				ldab	#$FF
5871   F67D 81 80       				cmpa	#$80
5872   F67F C9 00       				adcb	#$00
5873   F681 9B F0       				adda	vm_pc+1
5874   F683 D9 EF       				adcb	vm_pc
5875   F685 97 B9       				staa	temp1+1
5876   F687 D7 B8       				stab	temp1
5877   F689 DE B8       				ldx	temp1
5878   F68B             			endif
5878   F68B             
5878   F68B             
5878   F68B             
5878   F68B             
5878   F68B             
5878   F68B~            			endif
5878   F68B~            			endif
5878   F68B             
5878   F68B~            			endif
5878   F68B~            			endif
5878   F68B             
5878   F678             
5878   F678 12          
5878   F679             
5878   F679             
5878   F679~            			endif
5878   F679~            			endif
5878   F679~            			endif
5878   F679             
5878   F68B             
5878   F68B~            			endif
5878   F68B~            			endif
5878   F68B             
5879   F68B 32          			pula						;Get our result from above push
5880   F68C 46          			rora						;Test LSB
5881   F68D 24 D2       			bcc	to_macro_go3			;If result was #80, then ignore this branch (jmp  $F3B5)
5882   F68F 7E F5 9F    			jmp	pc_sto2				;Else, we will branch now. (stx  $D1, jmp $F3B5)
5883   F692             
5884   F692             
5885   F692 8D D0       branchdata		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
5886   F694 81 D0       			cmpa	#$D0
5887   F696 27 1D       			beq	cbra2
5888   F698 25 40       			bcs	to_rts3				;(rts) if data is below #D0
5889   F69A 81 F0       			cmpa	#$F0
5890   F69C 24 13       			bcc	complexbranch			;Branch if #F0 or above (Complex)
5891   F69E 81 E0       			cmpa	#$E0
5892   F6A0             			ifcc						;Branch if less than #E0
5892   F6A0             
5892   F6A0 25 FE       
5893   F6A2 7E F5 B2    				jmp	macro_b_ram				;RAM Data (A&0f)->A (Data is E_)
5894   F6A5             			endif
5894   F6A5             
5894   F6A5             
5894   F6A5             
5894   F6A5             
5894   F6A5             
5894   F6A5~            			endif
5894   F6A5~            			endif
5894   F6A5             
5894   F6A5~            			endif
5894   F6A5~            			endif
5894   F6A5             
5894   F6A1             
5894   F6A1 03          
5894   F6A2             
5894   F6A2             
5894   F6A2~            			endif
5894   F6A2~            			endif
5894   F6A2~            			endif
5894   F6A2             
5894   F6A5             
5894   F6A5~            			endif
5894   F6A5~            			endif
5894   F6A5             
5895   F6A5 CE 01 93    			ldx	#adj_energystandard		;Pointer to Bottom of Game Adjustments
5896   F6A8 84 0F       			anda	#$0F					;A = Index for Game Adjustment Lookup
5897   F6AA 48          			asla	
5898   F6AB BD EE 3E    			jsr	xplusa				;X = X + A
5899   F6AE 7E EE 92    			jmp	cmosinc_a				;CMOS,X++ -> A
5900   F6B1             
5901   F6B1 81 F3       complexbranch	cmpa	#$F3
5902   F6B3             			ifcc							;data is below #F3 (not complex)
5902   F6B3             
5902   F6B3 25 FE       
5903   F6B5 36          cbra2				psha						;Push Current Branch Inst.
5904   F6B6 8D DA       				bsr	branchdata				;Gets Encoded Data Type
5905   F6B8 16          				tab	
5906   F6B9 D7 B8       				stab	temp1
5907   F6BB 32          				pula	
5908   F6BC 81 F9       				cmpa	#$F9
5909   F6BE             				ifcc						;Branch if below #F9 (Lamp or Bit Test)
5909   F6BE             
5909   F6BE 25 FE       
5910   F6C0 36          					psha	
5911   F6C1 37          					pshb	
5912   F6C2 8D CE       					bsr	branchdata				;Gets Encoded Data Type
5913   F6C4 97 B8       					staa	temp1
5914   F6C6 33          					pulb	
5915   F6C7 32          					pula	
5916   F6C8             				endif
5916   F6C8             
5916   F6C8             
5916   F6C8             
5916   F6C8             
5916   F6C8             
5916   F6C8~            				endif
5916   F6C8~            				endif
5916   F6C8             
5916   F6C8~            				endif
5916   F6C8~            				endif
5916   F6C8             
5916   F6BF             
5916   F6BF 08          
5916   F6C0             
5916   F6C0             
5916   F6C0~            				endif
5916   F6C0~            				endif
5916   F6C0~            				endif
5916   F6C0             
5916   F6C8             
5916   F6C8~            				endif
5916   F6C8~            				endif
5916   F6C8             
5917   F6C8             			endif
5917   F6C8             
5917   F6C8             
5917   F6C8             
5917   F6C8             
5917   F6C8             
5917   F6C8~            			endif
5917   F6C8~            			endif
5917   F6C8             
5917   F6C8~            			endif
5917   F6C8~            			endif
5917   F6C8             
5917   F6B4             
5917   F6B4 13          
5917   F6B5             
5917   F6B5             
5917   F6B5~            			endif
5917   F6B5~            			endif
5917   F6B5~            			endif
5917   F6B5             
5917   F6C8             
5917   F6C8~            			endif
5917   F6C8~            			endif
5917   F6C8             
5918   F6C8 81 D0       			cmpa	#$D0
5919   F6CA 27 3A       			beq	branch_lampflag
5920   F6CC CE F4 12    			ldx	#branch_lookup
5921   F6CF BD F5 26    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
5922   F6D2 96 B8       			ldaa	temp1
5923   F6D4 6E 00       			jmp	$00,X
5924   F6D6             
5925   F6D6 8D 61       branch_invert	bsr	test_a
5926   F6D8 88 01       			eora	#$01
5927   F6DA 39          to_rts3		rts	
5928   F6DB             
5929   F6DB BD F3 74    branch_lamp_on	jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
5930   F6DE 26 1E       			bne	ret_true				;return true
5931   F6E0 BD F3 65    			jsr	bit_lamp_flash			;Check Encoded #(A) with $0030
5932   F6E3 26 19       test_z		bne	ret_true				;return true
5933   F6E5 20 10       			bra	ret_false				;return false
5934   F6E7             			
5935   F6E7             branch_lamprangeoff	
5936   F6E7 BD F3 54    			jsr	lfill_b
5937   F6EA 25 12       test_c		bcs	ret_true				;return true
5938   F6EC 20 09       			bra	ret_false				;return false
5939   F6EE             			
5940   F6EE             branch_lamprangeon	
5941   F6EE BD F3 45    			jsr	lfill_a
5942   F6F1 20 F7       			bra	test_c
5943   F6F3             
5944   F6F3 96 E6       branch_tilt		ldaa	flag_tilt				;tilt flag?
5945   F6F5 26 07       			bne	ret_true				;return true
5946   F6F7 86 80       ret_false		ldaa	#$80					;return false
5947   F6F9 39          			rts	
5948   F6FA             			
5949   F6FA 96 E7       branch_gameover	ldaa	flag_gameover			;game over?
5950   F6FC 27 F9       			beq	ret_false				;return false
5951   F6FE 86 81       ret_true		ldaa	#$81
5952   F700 39          			rts
5953   F701             
5954   F701 BD F3 6A    branch_lampbuf1	jsr	bit_lamp_buf_1			;Check Encoded #(A) with $0028
5955   F704 20 DD       			bra	test_z				;Return Bool based on Z
5956   F706             
5957   F706             
5958   F706 96 B8       branch_lampflag	ldaa  temp1					;Check Encoded #(A) with bitflags
5959   F708 BD F3 6F    			jsr   bit_lamp_buf_f
5960   F70B 20 D6       			bra	test_z				;Return Boolean based on Z
5961   F70D             
5962   F70D BD F3 60    branch_switch	jsr	bit_switch				;Check Encoded #(A) with $0061:
5963   F710 20 D1       			bra	test_z				;Return Boolean based on Z
5964   F712             			
5965   F712 8D 1E       branch_and		bsr	set_logic
5966   F714 94 B8       			anda	temp1
5967   F716 39          			rts	
5968   F717             			
5969   F717 1B          branch_add		aba	
5970   F718 39          			rts	
5971   F719 8D 17       branch_or		bsr	set_logic
5972   F71B 9A B8       			oraa	temp1
5973   F71D 39          			rts	
5974   F71E             			
5975   F71E 11          branch_equal	cba	
5976   F71F 27 DD       			beq	ret_true				;lda  #$81, rts
5977   F721 20 D4       			bra	ret_false				;lda  #$80, rts
5978   F723             			
5979   F723 11          branch_ge		cba	
5980   F724 20 C4       			bra	test_c
5981   F726             
5982   F726 BD EA 60    branch_threadpri	jsr	check_threadid
5983   F729 24 D3       			bcc	ret_true				;lda  #$81, rts
5984   F72B 20 CA       			bra	ret_false				;lda  #$80, rts
5985   F72D             			
5986   F72D D7 B8       branch_bitwise	stab	temp1
5987   F72F 94 B8       			anda	temp1
5988   F731 39          to_rts4		rts	
5989   F732             
5990   F732 36          set_logic		psha	
5991   F733 17          			tba	
5992   F734 8D 03       			bsr	test_a
5993   F736 97 B8       			staa	temp1
5994   F738 32          			pula	
5995   F739 4D          test_a		tsta	
5996   F73A 2B F5       			bmi	to_rts4				;rts
5997   F73C BD F3 74    			jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
5998   F73F 27 B6       			beq	ret_false				;return false
5999   F741 81 40       			cmpa	#$40					;Check Encoded Lamp #
6000   F743 24 B9       			bcc	ret_true				;return true
6001   F745 BD F3 65    			jsr	bit_lamp_flash			;Bittest with $0030
6002   F748 26 AD       			bne	ret_false				;return false
6003   F74A 20 B2       			bra	ret_true				;return true
6004   F74C             			
6005   F74C             ;*******************************************************
6006   F74C             ;* End VM Code Section
6007   F74C             ;*******************************************************			
6008   F74C             
6009   F74C 36          award_replay	psha	
6010   F74D DF FA       			stx   credit_x_temp
6011   F74F CE 01 16    			ldx	#aud_replaycredits		;AUD: Replay Score Credits
6012   F752 BD F7 E7    			jsr	ptrx_plus_1				;Add 1 to data at X
6013   F755 BD D0 B8    			jsr	gr_special_event			;Game ROM Hook
6014   F758 DE FA       			ldx   credit_x_temp
6015   F75A 20 0E       			bra	eb_rts  
6016   F75C             
6017   F75C 36          award_extraball	psha	
6018   F75D DF F8       do_eb			stx	eb_x_temp				;Save X for later
6019   F75F BD D0 B6    			jsr	gr_eb_event
6020   F762 CE 01 22    			ldx	#aud_extraballs			;AUD: Total Extra Balls
6021   F765 BD F7 E7    			jsr	ptrx_plus_1				;Add 1 to data at X
6022   F768 DE F8       			ldx	eb_x_temp				;Restore X
6023   F76A 32          eb_rts		pula	
6024   F76B 39          			rts
6025   F76C             
6026   F76C DF FA       addcredits		stx	credit_x_temp			;Save X
6027   F76E 36          			psha	
6028   F76F 37          addcredit2		pshb	
6029   F770 8D 3C       			bsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
6030   F772             			ifcs						;No more if Carry Clear.
6030   F772             
6030   F772 24 FE       
6031   F774 BD EE A2    				jsr	cmosinc_b				;CMOS,X++ -> B
6032   F777 09          				dex	
6033   F778 09          				dex	
6034   F779 1B          				aba						;Add the new credits.
6035   F77A 19          				daa						;Adjust
6036   F77B             				ifcs
6036   F77B             
6036   F77B 24 FE       
6037   F77D 86 99       					ldaa	#$99					;If it rolled, set it to 99
6038   F77F             				endif
6038   F77F             
6038   F77F             
6038   F77F             
6038   F77F             
6038   F77F             
6038   F77F~            				endif
6038   F77F~            				endif
6038   F77F             
6038   F77F~            				endif
6038   F77F~            				endif
6038   F77F             
6038   F77C             
6038   F77C 02          
6038   F77D             
6038   F77D             
6038   F77D~            				endif
6038   F77D~            				endif
6038   F77D~            				endif
6038   F77D             
6038   F77F             
6038   F77F~            				endif
6038   F77F~            				endif
6038   F77F             
6039   F77F BD EE EE    				jsr	a_cmosinc				;A -> CMOS,X++
6040   F782 F1 11 9A    				cmpb	current_credits			;Actual Credits
6041   F785             				ifeq						;Check against shown credits
6041   F785             
6041   F785 26 FE       
6042   F787 C6 0E       					ldab	#$0E
6043   F789 D7 C8       					stab	thread_priority
6044   F78B CE F7 C4    					ldx	#creditq				;Thread: Add on Queued Credits
6045   F78E BD E9 D8    					jsr	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
6046   F791             					ifcs						;If Carry is set, thread was not added
6046   F791             
6046   F791 24 FE       
6047   F793 B7 11 9A    						staa	current_credits			;Actual Credits
6048   F796             					endif
6048   F796             
6048   F796             
6048   F796             
6048   F796             
6048   F796             
6048   F796~            					endif
6048   F796~            					endif
6048   F796             
6048   F796~            					endif
6048   F796~            					endif
6048   F796             
6048   F792             
6048   F792 03          
6048   F793             
6048   F793             
6048   F793~            					endif
6048   F793~            					endif
6048   F793~            					endif
6048   F793             
6048   F796             
6048   F796~            					endif
6048   F796~            					endif
6048   F796             
6049   F796             				endif
6049   F796             
6049   F796             
6049   F796             
6049   F796             
6049   F796             
6049   F796~            				endif
6049   F796~            				endif
6049   F796             
6049   F796~            				endif
6049   F796~            				endif
6049   F796             
6049   F786             
6049   F786 0F          
6049   F787             
6049   F787             
6049   F787~            				endif
6049   F787~            				endif
6049   F787~            				endif
6049   F787             
6049   F796             
6049   F796~            				endif
6049   F796~            				endif
6049   F796             
6050   F796 8D 04       				bsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
6051   F798             			endif
6051   F798             
6051   F798             
6051   F798             
6051   F798             
6051   F798             
6051   F798~            			endif
6051   F798~            			endif
6051   F798             
6051   F798~            			endif
6051   F798~            			endif
6051   F798             
6051   F773             
6051   F773 24          
6051   F774             
6051   F774             
6051   F774~            			endif
6051   F774~            			endif
6051   F774~            			endif
6051   F774             
6051   F798             
6051   F798~            			endif
6051   F798~            			endif
6051   F798             
6052   F798 DE FA       			ldx	credit_x_temp			;Restore X
6053   F79A 20 25       			bra	pull_ba_rts				;pulb,pula,rts
6054   F79C             
6055   F79C             ;**********************************************
6056   F79C             ;* Adjust the coin lockout solenoid and the 
6057   F79C             ;* credit lamp on playfield if installed.
6058   F79C             ;**********************************************			
6059   F79C 36          coinlockout		psha	
6060   F79D BD F7 AE    			jsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
6061   F7A0 B6 D0 63    			ldaa	gr_coinlockout			;Get coil number
6062   F7A3 8A F0       			oraa	#$F0
6063   F7A5             			ifcc
6063   F7A5             
6063   F7A5 25 FE       
6064   F7A7 84 0F       				anda	#$0F
6065   F7A9             			endif
6065   F7A9             
6065   F7A9             
6065   F7A9             
6065   F7A9             
6065   F7A9             
6065   F7A9~            			endif
6065   F7A9~            			endif
6065   F7A9             
6065   F7A9~            			endif
6065   F7A9~            			endif
6065   F7A9             
6065   F7A6             
6065   F7A6 02          
6065   F7A7             
6065   F7A7             
6065   F7A7~            			endif
6065   F7A7~            			endif
6065   F7A7~            			endif
6065   F7A7             
6065   F7A9             
6065   F7A9~            			endif
6065   F7A9~            			endif
6065   F7A9             
6066   F7A9 BD EA 83    			jsr	solbuf				;Turn Off Lockout Coils
6067   F7AC 32          			pula	
6068   F7AD 39          			rts	
6069   F7AE             
6070   F7AE             ;**********************************************
6071   F7AE             ;* See if we are at the adjustable maximum 
6072   F7AE             ;* credits allowed. If we are at max then
6073   F7AE             ;* carry flag is cleared, if we are not at
6074   F7AE             ;* max then the carry flag is set.
6075   F7AE             ;**********************************************			
6076   F7AE 36          checkmaxcredits	psha	
6077   F7AF 37          			pshb	
6078   F7B0 CE 01 AB    			ldx	#adj_max_credits			;ADJ: Max Credits
6079   F7B3 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
6080   F7B6 CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
6081   F7B9 5D          			tstb						;Max Credits allowed
6082   F7BA 0D          			sec	
6083   F7BB             			ifne
6083   F7BB             
6083   F7BB 27 FE       
6084   F7BD BD FD DB    				jsr	cmos_a				;CMOS, X -> A
6085   F7C0 11          				cba	
6086   F7C1             			endif
6086   F7C1             
6086   F7C1             
6086   F7C1             
6086   F7C1             
6086   F7C1             
6086   F7C1~            			endif
6086   F7C1~            			endif
6086   F7C1             
6086   F7C1~            			endif
6086   F7C1~            			endif
6086   F7C1             
6086   F7BC             
6086   F7BC 04          
6086   F7BD             
6086   F7BD             
6086   F7BD~            			endif
6086   F7BD~            			endif
6086   F7BD~            			endif
6086   F7BD             
6086   F7C1             
6086   F7C1~            			endif
6086   F7C1~            			endif
6086   F7C1             
6087   F7C1 33          pull_ba_rts		pulb	
6088   F7C2 32          			pula	
6089   F7C3 39          			rts
6090   F7C4             
6091   F7C4             ;***********************************************
6092   F7C4             ;* This routine is spawned as a thread when the
6093   F7C4             ;* credits in memory space do not match
6094   F7C4             ;* the number of credits in the CMOS RAM. It 
6095   F7C4             ;* Takes care of bringing them equal in a timely
6096   F7C4             ;* fashion and calling the game ROM hook each
6097   F7C4             ;* time a credit is added to the memory location. 
6098   F7C4             ;* With this, the game ROM can control the credit 
6099   F7C4             ;* award process.
6100   F7C4             ;***********************************************			
6101   F7C4 CE 01 6E    creditq		ldx	#aud_currentcredits		;CMOS: Current Credits
6102   F7C7 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
6103   F7CA F1 11 9A    			cmpb	current_credits
6104   F7CD             			ifne
6104   F7CD             
6104   F7CD 27 FE       
6105   F7CF B6 11 9A    				ldaa	current_credits
6106   F7D2 8B 01       				adda	#$01
6107   F7D4 19          				daa	
6108   F7D5 B7 11 9A    				staa	current_credits
6109   F7D8 FE D0 C8    				ldx	gr_coin_ptr			;Game ROM:
6110   F7DB 11          				cba	
6111   F7DC             				ifne
6111   F7DC             
6111   F7DC 27 FE       
6112   F7DE AD 00       					jsr	$00,X					;jsr to Game ROM Credit Hook
6113   F7E0 20 E2       					bra	creditq				;Loop it.
6114   F7E2             				endif
6114   F7E2             
6114   F7E2             
6114   F7E2             
6114   F7E2             
6114   F7E2             
6114   F7E2~            				endif
6114   F7E2~            				endif
6114   F7E2             
6114   F7E2~            				endif
6114   F7E2~            				endif
6114   F7E2             
6114   F7DD             
6114   F7DD 04          
6114   F7DE             
6114   F7DE             
6114   F7DE~            				endif
6114   F7DE~            				endif
6114   F7DE~            				endif
6114   F7DE             
6114   F7E2             
6114   F7E2~            				endif
6114   F7E2~            				endif
6114   F7E2             
6115   F7E2 AD 00       				jsr	$00,X					;jsr to Game ROM/bell?
6116   F7E4             			endif
6116   F7E4             
6116   F7E4             
6116   F7E4             
6116   F7E4             
6116   F7E4             
6116   F7E4~            			endif
6116   F7E4~            			endif
6116   F7E4             
6116   F7E4~            			endif
6116   F7E4~            			endif
6116   F7E4             
6116   F7CE             
6116   F7CE 15          
6116   F7CF             
6116   F7CF             
6116   F7CF~            			endif
6116   F7CF~            			endif
6116   F7CF~            			endif
6116   F7CF             
6116   F7E4             
6116   F7E4~            			endif
6116   F7E4~            			endif
6116   F7E4             
6117   F7E4 7E E9 C4    			jmp	killthread				;Remove Current Thread from VM
6118   F7E7             
6119   F7E7             ;*************************************************
6120   F7E7             ;* Some utility routines for getting data from
6121   F7E7             ;* the CMOS RAM areas.
6122   F7E7             ;*************************************************
6123   F7E7 36          ptrx_plus_1		psha	
6124   F7E8 86 01       			ldaa	#$01
6125   F7EA 20 01       			bra	ptrx_plus
6126   F7EC 36          ptrx_plus_a		psha	
6127   F7ED 37          ptrx_plus		pshb	
6128   F7EE DF B8       			stx	temp1
6129   F7F0 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
6130   F7F3 37          			pshb	
6131   F7F4 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
6132   F7F7 1B          			aba	
6133   F7F8 19          			daa	
6134   F7F9 16          			tab	
6135   F7FA 32          			pula	
6136   F7FB 89 00       			adca	#$00
6137   F7FD 19          			daa	
6138   F7FE DE B8       			ldx	temp1
6139   F800 BD EE EE    			jsr	a_cmosinc				;A -> CMOS,X++
6140   F803 BD EE A8    			jsr	b_cmosinc				;B -> CMOS,X++
6141   F806 DE B8       			ldx	temp1
6142   F808 20 B7       			bra	pull_ba_rts				;pula, pulb, rts.
6143   F80A             	
6144   F80A             coin_accepted	
6145   F80A             			;Starts with Macros
6146   F80A 90 03       			.db $90,$03 	;MJSR $F7A7
6147   F80C 7E E9 C4    			.db $7E,$E9,$C4  	;Push $EA67 into Control Loop with delay of #0E
6148   F80F             			PRI_($0E) 		;Set this loops priority to #0E
6148   F80F 52 0E       
6149   F811             			SLEEP_($20) 	;Delay $20
6149   F811~            			SLEEP_($20) 	;Delay $20
6149   F811~            			SLEEP_($20) 	;Delay $20
6149   F811             
6149   F811 53 20       
6149   F813             
6150   F813             			CPUX_			;Resume CPU execution
6150   F813 04          
6151   F814             			
6152   F814 43          			coma 
6153   F815 8B 06       			adda	#$06
6154   F817 48          			asla 
6155   F818 16          			tab  					;A is 0,2,4  
6156   F819 58          			aslb 					;B is 0,4,8
6157   F81A CE 01 02    			ldx  	#aud_leftcoins		;AUD: Coins Left/Center/Right Chute Base for counter
6158   F81D BD EE 8C    			jsr  	xplusb			;Adjust Pointer
6159   F820 BD F7 E7    			jsr  	ptrx_plus_1   		;Add 1 click to the counter
6160   F823 CE 01 AF    			ldx  	#cmos_pricingbase		;AUD: Coin Slot Multiplier Base
6161   F826 BD EE 3E    			jsr  	xplusa   			;Adjust Pointer
6162   F829 BD EE A2    			jsr  	cmosinc_b    		;Get Multiplier into B
6163   F82C 8D 6F       			bsr  	dec2hex    			;Make it hex
6164   F82E CE 01 62    			ldx  	#cmos_bonusunits	
6165   F831 8D 46       			bsr  	cmos_a_plus_b_cmos    	;Load Previous Coin Count, Add B, Save it in CMOS++
6166   F833 8D 44       			bsr  	cmos_a_plus_b_cmos    	;Load A with CMOS $0164, add B, Save in CMOS++
6167   F835 CE 01 B9    			ldx  	#cmos_minimumcoins	;ADJ: Minimum Coin Units
6168   F838 BD EE A2    			jsr  	cmosinc_b    		;Get Minimum Coin Amount into B
6169   F83B 8D 60       			bsr	dec2hex
6170   F83D 11          			cba  
6171   F83E             			ifcc					;Have we met inserted minimum coins?
6171   F83E             
6171   F83E 25 FE       
6172   F840             									;Yes!
6173   F840 CE 01 B5    				ldx  	#cmos_coinsforcredit	;ADJ: Coin Units required for Credit
6174   F843 BD EE A2    				jsr  	cmosinc_b    		;Get Value
6175   F846 8D 55       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
6176   F848 8D 36       				bsr  	divide_ab
6177   F84A 97 B8       				staa  temp1
6178   F84C CE 01 64    				ldx  	#cmos_coinunits		;Save remainder coin units for next time
6179   F84F BD EE A8    				jsr  	b_cmosinc   		;( B -> CMOS,X++)
6180   F852 CE 01 B7    				ldx  	#cmos_bonuscoins		;ADJ: Coin Unit Bonus Point
6181   F855 BD EE A2    				jsr  	cmosinc_b    		;( CMOS,X++ -> B )
6182   F858 CE 01 62    				ldx  	#cmos_bonusunits	
6183   F85B BD EE 92    				jsr  	cmosinc_a 			;( CMOS,X++ -> A )
6184   F85E 8D 3D       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
6185   F860 8D 1E       				bsr  	divide_ab
6186   F862 4D          				tsta 
6187   F863             				ifne
6187   F863             
6187   F863 27 FE       
6188   F865 8D 2C       					bsr	clr_bonus_coins
6189   F867             				endif
6189   F867             
6189   F867             
6189   F867             
6189   F867             
6189   F867             
6189   F867~            				endif
6189   F867~            				endif
6189   F867             
6189   F867~            				endif
6189   F867~            				endif
6189   F867             
6189   F864             
6189   F864 02          
6189   F865             
6189   F865             
6189   F865~            				endif
6189   F865~            				endif
6189   F865~            				endif
6189   F865             
6189   F867             
6189   F867~            				endif
6189   F867~            				endif
6189   F867             
6190   F867 9B B8       				adda 	temp1
6191   F869 19          				daa  
6192   F86A CE 01 0E    				ldx  	#aud_paidcredits		;AUD: Total Paid Credits
6193   F86D BD F7 EC    				jsr  	ptrx_plus_a    		;Add A to data at X:
6194   F870 7E F7 6C    				jmp  	addcredits    		;Add Credits if Possible
6195   F873             			endif
6195   F873             
6195   F873             
6195   F873             
6195   F873             
6195   F873             
6195   F873~            			endif
6195   F873~            			endif
6195   F873             
6195   F873~            			endif
6195   F873~            			endif
6195   F873             
6195   F83F             
6195   F83F 33          
6195   F840             
6195   F840             
6195   F840~            			endif
6195   F840~            			endif
6195   F840~            			endif
6195   F840             
6195   F873             
6195   F873~            			endif
6195   F873~            			endif
6195   F873             
6196   F873 B6 D0 5C    			ldaa 	gr_creditsound		;Game ROM Data: Credit Sound
6197   F876 7E EC 3B    			jmp  	isnd_once			;Play Sound Index(A) Once
6198   F879             
6199   F879             ;*********************************************************
6200   F879             ;* Load A with value in X, Add B, Save to CMOS and 
6201   F879             ;* post increment
6202   F879             ;*********************************************************
6203   F879             cmos_a_plus_b_cmos	
6204   F879 BD FD DB    			jsr	cmos_a			;CMOS, X -> A 
6205   F87C 1B          			aba	
6206   F87D 7E EE EE    			jmp	a_cmosinc			;A -> CMOS,X++
6207   F880             
6208   F880             ;********************************************************
6209   F880             ;* Divides A by B, returns result in A and remainder in
6210   F880             ;* B. Input values are in Hex and not decimal.
6211   F880             ;********************************************************			
6212   F880 D7 BB       divide_ab		stab	temp2+1
6213   F882             			ifne
6213   F882             
6213   F882 27 FE       
6214   F884 16          				tab	
6215   F885 86 99       				ldaa	#$99	
6216   F887             				begin
6216   F887             
6217   F887 8B 01       					adda	#$01
6218   F889 19          					daa	
6219   F88A D0 BB       					subb	temp2+1
6220   F88C             				csend
6220   F88C             
6220   F88C             
6220   F88C~            				csend
6220   F88C~            				csend
6220   F88C             
6220   F88C 24 F9       
6220   F88E             
6220   F88E~            				csend
6220   F88E~            				csend
6220   F88E             
6221   F88E DB BB       				addb	temp2+1
6222   F890 39          				rts	
6223   F891             			endif
6223   F891             
6223   F891             
6223   F891             
6223   F891             
6223   F891             
6223   F891~            			endif
6223   F891~            			endif
6223   F891             
6223   F891~            			endif
6223   F891~            			endif
6223   F891             
6223   F883             
6223   F883 0D          
6223   F884             
6223   F884             
6223   F884~            			endif
6223   F884~            			endif
6223   F884~            			endif
6223   F884             
6223   F891             
6223   F891~            			endif
6223   F891~            			endif
6223   F891             
6224   F891 17          			tba	
6225   F892 39          			rts
6226   F893             
6227   F893             ;********************************************************
6228   F893             ;* Cleans out any half credits and bonus coins
6229   F893             ;********************************************************			
6230   F893 CE 00 00    clr_bonus_coins	ldx	#0000
6231   F896 FF 01 64    			stx	cmos_coinunits
6232   F899 FF 01 62    			stx	cmos_bonusunits
6233   F89C 39          			rts	
6234   F89D             
6235   F89D             ;********************************************************
6236   F89D             ;* Convert 2 digit decimal value into a hex number
6237   F89D             ;*
6238   F89D             ;* Requires:	Decimal Number in B
6239   F89D             ;* Protects:	A
6240   F89D             ;* Destroys:	
6241   F89D             ;* Output:		Hex Number in B
6242   F89D             ;********************************************************
6243   F89D 36          dec2hex		psha	
6244   F89E 17          			tba	
6245   F89F 5F          			clrb	
6246   F8A0             			begin
6246   F8A0             
6247   F8A0 4D          				tsta	
6248   F8A1 27 6C       				beq	to_pula_rts		;done
6249   F8A3 8B 99       				adda	#$99
6250   F8A5 19          				daa	
6251   F8A6 5C          				incb	
6252   F8A7             			loopend			;Loop forever
6252   F8A7             
6252   F8A7             
6252   F8A7~            			loopend			;Loop forever
6252   F8A7~            			loopend			;Loop forever
6252   F8A7             
6252   F8A7 20 F7       
6252   F8A9             
6252   F8A9~            			loopend			;Loop forever
6252   F8A9~            			loopend			;Loop forever
6252   F8A9             
6253   F8A9             
6254   F8A9             ;*********************************************************
6255   F8A9             ;* Stores A from X to X+B
6256   F8A9             ;* 
6257   F8A9             ;* Requires:	A,B,X
6258   F8A9             ;* Destroys:	B
6259   F8A9             ;********************************************************			
6260   F8A9             write_range		
6261   F8A9             			begin
6261   F8A9             
6262   F8A9 A7 00       				staa	$00,X
6263   F8AB 08          				inx	
6264   F8AC 5A          				decb	
6265   F8AD             			eqend
6265   F8AD             
6265   F8AD             
6265   F8AD~            			eqend
6265   F8AD~            			eqend
6265   F8AD             
6265   F8AD 26 FA       
6265   F8AF             
6265   F8AF~            			eqend
6265   F8AF~            			eqend
6265   F8AF             
6266   F8AF 39          			rts	
6267   F8B0             
6268   F8B0             ;*********************************************************
6269   F8B0             ;* Initialzes a new game.
6270   F8B0             ;*********************************************************			
6271   F8B0 FE D0 CA    do_game_init	ldx	gr_gamestart_ptr			;Game Start Hook
6272   F8B3 AD 00       			jsr	$00,X					;jsr to Game ROM Hook
6273   F8B5 BD FA 2C    			jsr	dump_score_queue			;Clean the score queue
6274   F8B8 8D 57       			bsr	clear_displays			;Blank all Player Displays (buffer 0)
6275   F8BA 4A          			deca
6276   F8BB 97 5C       			staa	p1_ec_b0
6277   F8BD 8D 36       			bsr	initialize_game			;Remove one Credit, init some game variables
6278   F8BF 8D 03       			bsr	add_player				;Add one Player
6279   F8C1 7E F9 51    			jmp	init_player_up
6280   F8C4             
6281   F8C4             
6282   F8C4             ;****************************************************
6283   F8C4             ;* Add Player: Increments player count and loads    
6284   F8C4             ;*             default game data for that player.  
6285   F8C4             ;*             Plays start sound and inits display.
6286   F8C4             ;*
6287   F8C4             ;* Requires:   No Variables
6288   F8C4             ;****************************************************	
6289   F8C4 BD D0 BE    add_player		jsr   gr_addplayer_event
6290   F8C7 7C 00 EA    			inc   num_players
6291   F8CA D6 EA       			ldab  num_players
6292   F8CC 8D 5E       			bsr   init_player_game
6293   F8CE             		
6294   F8CE CE D0 57    			ldx	#gr_p1_startsound			;Game ROM Table: Player Start Sounds
6295   F8D1 BD EE 8C    			jsr	xplusb				;X = X + B)
6296   F8D4 A6 00       			ldaa	$00,X
6297   F8D6 BD EC 3B    			jsr	isnd_once				;Play Player Start Sound From Game ROM Table
6298   F8D9 CE 01 93    			ldx	#adj_energystandard
6299   F8DC BD EE 92    			jsr	cmosinc_a			
6300   F8DF 8A F0       			oraa	#$F0
6301   F8E1 5D          			tstb
6302   F8E2             			ifne
6302   F8E2             
6302   F8E2 27 FE       
6303   F8E4 97 5C       				staa	p1_ec_b0
6304   F8E6             			else
6304   F8E6             
6304   F8E6             
6304   F8E6             
6304   F8E6             
6304   F8E3             
6304   F8E3             
6304   F8E3             
6304   F8E3~            			else
6304   F8E3~            			else
6304   F8E3~            			else
6304   F8E3~            			else
6304   F8E3             
6304   F8E3~            			else
6304   F8E3~            			else
6304   F8E3~            			else
6304   F8E3~            			else
6304   F8E3             
6304   F8E3             
6304   F8E3 04          
6304   F8E6             
6304   F8E6 20 FE       
6304   F8E8             
6304   F8E8             
6304   F8E8             
6304   F8E8~            			else
6304   F8E8~            			else
6304   F8E8~            			else
6304   F8E8~            			else
6304   F8E8~            			else
6304   F8E8             
6304   F8E8~            			else
6304   F8E8~            			else
6304   F8E8             
6304   F8E8~            			else
6304   F8E8~            			else
6304   F8E8             
6305   F8E8 97 5E       				staa	p2_ec_b0
6306   F8EA             			endif
6306   F8EA             
6306   F8EA             
6306   F8EA             
6306   F8EA             
6306   F8EA             
6306   F8EA~            			endif
6306   F8EA~            			endif
6306   F8EA             
6306   F8EA~            			endif
6306   F8EA~            			endif
6306   F8EA             
6306   F8E7             
6306   F8E7 02          
6306   F8E8             
6306   F8E8             
6306   F8E8~            			endif
6306   F8E8~            			endif
6306   F8E8~            			endif
6306   F8E8             
6306   F8EA             
6306   F8EA~            			endif
6306   F8EA~            			endif
6306   F8EA             
6307   F8EA 58          ap_shft		aslb
6308   F8EB 58          			aslb
6309   F8EC CE 00 4C    			ldx	#score_p1_b0
6310   F8EF BD EE 8C    			jsr	xplusb
6311   F8F2 6F 03       			clr	$03,X
6312   F8F4 39          			rts
6313   F8F5             
6314   F8F5             ;****************************************************	
6315   F8F5             ;* Sets up all gameplay variables for a new game.
6316   F8F5             ;****************************************************		
6317   F8F5 4F          initialize_game	clra	
6318   F8F6 97 F4       			staa	flag_timer_bip			;Ball in Play Flag
6319   F8F8 97 EB       			staa	player_up				;Default player 1 DOH
6320   F8FA 97 E7       			staa	flag_gameover			;Game Play On
6321   F8FC 97 7C       			staa	comma_flags
6322   F8FE C6 08       			ldab	#$08
6323   F900 BD EA 5B    			jsr	kill_threads
6324   F903 4A          			deca	
6325   F904 97 EA       			staa	num_players				;Subtract one Credit
6326   F906 C6 12       			ldab	#$12
6327   F908 CE 00 22    			ldx	#$0022				;Clear RAM $0022-002E
6328   F90B 36          clear_range		psha	
6329   F90C 4F          			clra	
6330   F90D 8D 9A       			bsr	write_range				;Store A from X to X+B
6331   F90F 32          to_pula_rts		pula	
6332   F910 39          			rts	
6333   F911             
6334   F911             ;******************************************************
6335   F911             ;* Resets all player display scores to Blank 'FFFFFFFF'
6336   F911             ;******************************************************			
6337   F911 86 FF       clear_displays	ldaa	#$FF
6338   F913 C6 10       			ldab	#$10
6339   F915 CE 00 4C    			ldx	#score_p1_b0
6340   F918 8D 8F       			bsr	write_range				;Store A from X to X+B
6341   F91A 4F          			clra	
6342   F91B C6 0C       			ldab	#$0C
6343   F91D CE 00 60    			ldx	#alpha_b0
6344   F920 8D 87       			bsr	write_range
6345   F922             			
6346   F922 4F          clr_dis_masks	clra
6347   F923 97 7B       			staa	dmask_p4				;These are the Display Buffer Toggles
6348   F925 97 7A       			staa	dmask_p3
6349   F927 97 79       clr_dis_masks12	staa	dmask_p2
6350   F929 97 78       			staa	dmask_p1
6351   F92B 39          			rts	
6352   F92C             
6353   F92C             ;**********************************************************
6354   F92C             ;* Loads the default game data into the player number 
6355   F92C             ;* passed in B.
6356   F92C             ;*
6357   F92C             ;* Requires:    	Player Number to init in B
6358   F92C             ;* Destroys:    	X
6359   F92C             ;* Protects:	A,B
6360   F92C             ;**********************************************************			
6361   F92C 36          init_player_game	psha	
6362   F92D 37          			pshb	
6363   F92E 8D 0B       			bsr	setplayerbuffer			;Set up the Pointer to the Players Buffer
6364   F930 8D 15       			bsr	copyplayerdata			;Copy Default Player Data into Player Buffer (X)
6365   F932 DE B8       			ldx	temp1
6366   F934 C6 06       			ldab	#$06
6367   F936 8D D3       			bsr	clear_range				;Clear Remaining Part of Player Game Data Buffer
6368   F938 33          			pulb	
6369   F939 32          			pula	
6370   F93A 39          			rts	
6371   F93B             
6372   F93B             ;**********************************************************
6373   F93B             ;* Will set up X to point at the start of the player 
6374   F93B             ;* specified in B.
6375   F93B             ;*
6376   F93B             ;* Requires:   	Player Number in B
6377   F93B             ;* Destroys:	A,B
6378   F93B             ;* Protects:	None
6379   F93B             ;* Output:		X
6380   F93B             ;**********************************************************			
6381   F93B 86 24       setplayerbuffer	ldaa	#gamedata_size			;Length of Player Buffer
6382   F93D CE 11 1C    			ldx	#p1_gamedata-gamedata_size	;Player 1 base
6383   F940             			begin
6383   F940             
6384   F940 BD EE 3E    				jsr	xplusa	;X = X + A
6385   F943 5A          				decb	
6386   F944             			miend
6386   F944             
6386   F944             
6386   F944~            			miend
6386   F944~            			miend
6386   F944             
6386   F944 2A FA       
6386   F946             
6386   F946~            			miend
6386   F946~            			miend
6386   F946             
6387   F946 39          			rts	
6388   F947             
6389   F947             ;***********************************************************
6390   F947             ;* Copies Player default data from game ROM to the player 
6391   F947             ;* buffer specified by X.
6392   F947             ;*
6393   F947             ;* Requires: Player Buffer to Fill in X
6394   F947             ;***********************************************************			
6395   F947 DF B8       copyplayerdata	stx	temp1
6396   F949 CE D0 74    			ldx	#gr_playerstartdata		;*** Table Pointer ***
6397   F94C C6 1E       			ldab	#$1E
6398   F94E 7E EE FB    			jmp	copyblock				;Copy Block: X -> temp1 B=Length
6399   F951             
6400   F951             ;***********************************************************
6401   F951             ;
6402   F951             ;***********************************************************
6403   F951 8D 78       init_player_up	bsr   init_player_sys
6404   F953 CE 00 5E    			ldx   #p2_ec_b0
6405   F956 D6 EB       			ldab   player_up
6406   F958             			ifne
6406   F958             
6406   F958 27 FE       
6407   F95A CE 00 5C    				ldx   #p1_ec_b0
6408   F95D             			endif
6408   F95D             
6408   F95D             
6408   F95D             
6408   F95D             
6408   F95D             
6408   F95D~            			endif
6408   F95D~            			endif
6408   F95D             
6408   F95D~            			endif
6408   F95D~            			endif
6408   F95D             
6408   F959             
6408   F959 03          
6408   F95A             
6408   F95A             
6408   F95A~            			endif
6408   F95A~            			endif
6408   F95A~            			endif
6408   F95A             
6408   F95D             
6408   F95D~            			endif
6408   F95D~            			endif
6408   F95D             
6409   F95D A6 00       			ldaa   $00,X
6410   F95F             			ifmi
6410   F95F             
6410   F95F 2A FE       
6411   F961 84 0F       				anda  #0F
6412   F963             			endif
6412   F963             
6412   F963             
6412   F963             
6412   F963             
6412   F963             
6412   F963~            			endif
6412   F963~            			endif
6412   F963             
6412   F963~            			endif
6412   F963~            			endif
6412   F963             
6412   F960             
6412   F960 02          
6412   F961             
6412   F961             
6412   F961~            			endif
6412   F961~            			endif
6412   F961~            			endif
6412   F961             
6412   F963             
6412   F963~            			endif
6412   F963~            			endif
6412   F963             
6413   F963 8B 99       			adda  #$99
6414   F965 19          			daa   
6415   F966 81 10       			cmpa  #$10
6416   F968             			iflt
6416   F968             
6416   F968 2C FE       
6417   F96A 8A F0       				oraa   #$F0
6418   F96C             			endif
6418   F96C             
6418   F96C             
6418   F96C             
6418   F96C             
6418   F96C             
6418   F96C~            			endif
6418   F96C~            			endif
6418   F96C             
6418   F96C~            			endif
6418   F96C~            			endif
6418   F96C             
6418   F969             
6418   F969 02          
6418   F96A             
6418   F96A             
6418   F96A~            			endif
6418   F96A~            			endif
6418   F96A~            			endif
6418   F96A             
6418   F96C             
6418   F96C~            			endif
6418   F96C~            			endif
6418   F96C             
6419   F96C A7 00       			staa	$00,X
6420   F96E 8D 7A       			bsr   resetplayerdata
6421   F970 FE D0 CC    			ldx   gr_playerinit_ptr
6422   F973 AD 00       			jsr   $00,X
6423   F975             			begin
6423   F975             
6424   F975             player_ready		SLEEP($05)		
6424   F975 BD E9 7C    
6424   F978 05          
6425   F979             				;This following loop makes the current players
6426   F979             				;score flash until any score is made.
6427   F979 8D 36       				bsr   disp_mask
6428   F97B 43          				coma  
6429   F97C 94 7C       				anda  comma_flags
6430   F97E 97 7C       				staa  comma_flags
6431   F980 8D 3C       				bsr   disp_clear
6432   F982 DE CF       				ldx   current_thread
6433   F984 86 07       				ldaa  #07
6434   F986 A7 0D       				staa  threadobj_id,X
6435   F988 CE 00 78    				ldx   #dmask_p1
6436   F98B BD EE 8C    				jsr   xplusb
6437   F98E A6 00       				ldaa  $00,X
6438   F990 8A 7F       				oraa	#$7F
6439   F992 A7 00       				staa  $00,X
6440   F994             				SLEEP($05)
6440   F994 BD E9 7C    
6440   F997 05          
6441   F998 BD D0 BC    				jsr   gr_ballstart_event			;Game ROM Hook
6442   F99B A6 00       				ldaa  $00,X
6443   F99D 84 80       				anda  #$80
6444   F99F A7 00       				staa  $00,X
6445   F9A1 BD EA F8    				jsr   update_commas
6446   F9A4 DE CF       				ldx   current_thread
6447   F9A6 86 04       				ldaa  #04
6448   F9A8 A7 0D       				staa  threadobj_id,X
6449   F9AA 96 F4       				ldaa  flag_timer_bip
6450   F9AC             			neend
6450   F9AC             
6450   F9AC             
6450   F9AC~            			neend
6450   F9AC~            			neend
6450   F9AC             
6450   F9AC 27 C7       
6450   F9AE             
6450   F9AE~            			neend
6450   F9AE~            			neend
6450   F9AE             
6451   F9AE 7E E9 C4    			jmp   killthread			;Remove Current Thread from Control Stack
6452   F9B1             
6453   F9B1 D6 EB       disp_mask		ldab	player_up				;Current Player Up (0-3)
6454   F9B3 CE EA F0    			ldx	#comma_million			;Comma Tables
6455   F9B6 BD EE 8C    			jsr	xplusb				;X = X + B)
6456   F9B9 A6 00       			ldaa	$00,X					;comma_million: 40 04 80 08
6457   F9BB AA 04       			oraa	$04,X					;comma_thousand: 10 01 20 02
6458   F9BD 39          			rts	
6459   F9BE             			
6460   F9BE DE EC       disp_clear		ldx	pscore_buf				;Start of Current Player Score Buffer
6461   F9C0 86 FF       			ldaa	#$FF
6462   F9C2 A7 08       			staa	$08,X
6463   F9C4 A7 09       			staa	$09,X
6464   F9C6 A7 0A       			staa	$0A,X
6465   F9C8 A7 0B       			staa	$0B,X
6466   F9CA 39          			rts	
6467   F9CB             
6468   F9CB             ;********************************************************
6469   F9CB             ;* Initializes new player. Clears tilt counter, reset 
6470   F9CB             ;* bonus ball enable, enables flippers, Loads Player 
6471   F9CB             ;* score buffer pointer.
6472   F9CB             ;********************************************************			
6473   F9CB 96 7D       init_player_sys	ldaa	switch_debounced
6474   F9CD 84 FE       			anda	#$FE
6475   F9CF 97 7D       			staa	switch_debounced				;Blank the Tilt Lines?
6476   F9D1 4F          			clra	
6477   F9D2 97 E6       			staa	flag_tilt				;Clear Tilt Flag
6478   F9D4 97 F1       			staa	num_tilt				;Clear Plumb Bob Tilts
6479   F9D6 97 E8       			staa	random_bool				;Clear Random
6480   F9D8 86 F9       			ldaa	#$F9
6481   F9DA BD EA 83    			jsr	solbuf				;Turn on Solenoid $18 (Flipper Enable?)
6482   F9DD 96 EB       			ldaa	player_up				;Current Player Up (0-3)
6483   F9DF 48          			asla	
6484   F9E0 48          			asla	
6485   F9E1 CE 00 4C    			ldx	#score_p1_b0
6486   F9E4 BD EE 3E    			jsr	xplusa				;X= P1:0038 P2:003C P3:0040 P4:0044
6487   F9E7 DF EC       			stx	pscore_buf				;Pointer to Start of Score Buffer 0
6488   F9E9 39          			rts	
6489   F9EA             
6490   F9EA             ;*********************************************************
6491   F9EA             ;* Applies Game ROM mask to player game data to reset 
6492   F9EA             ;* specific bits of data. Loads the flashing lamp data
6493   F9EA             ;* Resets Player game data at start of RAM.
6494   F9EA             ;*********************************************************	
6495   F9EA CE 00 10    resetplayerdata	ldx	#lampbuffer0
6496   F9ED DF B8       			stx	temp1					;temp1 Points to Base of Lamp Matrix Data
6497   F9EF BD F9 3B    			jsr	setplayerbuffer			
6498   F9F2 DF BA       			stx	temp2					;temp2 Points to Base of Player Game Data Buffer
6499   F9F4 CE D0 74    			ldx	#gr_playerstartdata		;X points to base of default player data
6500   F9F7             			begin
6500   F9F7             
6501   F9F7 A6 1E       				ldaa	$1E,X					;Get Game Data Reset Data
6502   F9F9 16          				tab	
6503   F9FA 53          				comb	
6504   F9FB E4 00       				andb	$00,X					;AND !B with Players Last Lamps
6505   F9FD 08          				inx	
6506   F9FE DF BC       				stx	temp3					;X points to base of default player data +1
6507   FA00 DE BA       				ldx	temp2					;Player Game Data Buffer
6508   FA02 A4 00       				anda	$00,X
6509   FA04 08          				inx	
6510   FA05 DF BA       				stx	temp2
6511   FA07 1B          				aba	
6512   FA08 DE B8       				ldx	temp1
6513   FA0A A7 00       				staa	$00,X
6514   FA0C 08          				inx	
6515   FA0D 8C 00 22    				cpx	#$0022
6516   FA10             				ifeq
6516   FA10             
6516   FA10 26 FE       
6517   FA12 CE 00 40    					ldx	#lampflashflag
6518   FA15             				endif
6518   FA15             
6518   FA15             
6518   FA15             
6518   FA15             
6518   FA15             
6518   FA15~            				endif
6518   FA15~            				endif
6518   FA15             
6518   FA15~            				endif
6518   FA15~            				endif
6518   FA15             
6518   FA11             
6518   FA11 03          
6518   FA12             
6518   FA12             
6518   FA12~            				endif
6518   FA12~            				endif
6518   FA12~            				endif
6518   FA12             
6518   FA15             
6518   FA15~            				endif
6518   FA15~            				endif
6518   FA15             
6519   FA15 DF B8       				stx	temp1
6520   FA17 DE BC       				ldx	temp3
6521   FA19 8C D0 92    				cpx	#gr_playerresetdata		;End of Default Player Game Data
6522   FA1C             			eqend						;Loop it!
6522   FA1C             
6522   FA1C             
6522   FA1C~            			eqend						;Loop it!
6522   FA1C~            			eqend						;Loop it!
6522   FA1C             
6522   FA1C 26 D9       
6522   FA1E             
6522   FA1E~            			eqend						;Loop it!
6522   FA1E~            			eqend						;Loop it!
6522   FA1E             
6523   FA1E CE 00 02    			ldx	#$0002
6524   FA21 DF B8       			stx	temp1
6525   FA23 DE BA       			ldx	temp2
6526   FA25 C6 06       			ldab	#$06
6527   FA27 8D 52       			bsr	to_copyblock			;Copy Data Block: Current Game Data 0-6 -> Player Game Data 0-6
6528   FA29 7E F7 9C    			jmp	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary 
6529   FA2C             
6530   FA2C             ;*********************************************************************
6531   FA2C             ;* Scoring Queue: This will bring all scores up to date with current *
6532   FA2C             ;*                scores waiting to be applied.                      *
6533   FA2C             ;*********************************************************************			
6534   FA2C CE 11 28    dump_score_queue	ldx	#score_queue
6535   FA2F 86 0F       			ldaa	#$0F
6536   FA31             			begin
6536   FA31             
6537   FA31 E6 00       				ldab	$00,X
6538   FA33             				ifne
6538   FA33             
6538   FA33 27 FE       
6539   FA35             					begin
6539   FA35             
6540   FA35 BD EB 3D    						jsr	score_main				;Main Add Points Routine
6541   FA38 6A 00       						dec	$00,X
6542   FA3A             					eqend
6542   FA3A             
6542   FA3A             
6542   FA3A~            					eqend
6542   FA3A~            					eqend
6542   FA3A             
6542   FA3A 26 F9       
6542   FA3C             
6542   FA3C~            					eqend
6542   FA3C~            					eqend
6542   FA3C             
6543   FA3C             				endif
6543   FA3C             
6543   FA3C             
6543   FA3C             
6543   FA3C             
6543   FA3C             
6543   FA3C~            				endif
6543   FA3C~            				endif
6543   FA3C             
6543   FA3C~            				endif
6543   FA3C~            				endif
6543   FA3C             
6543   FA34             
6543   FA34 07          
6543   FA35             
6543   FA35             
6543   FA35~            				endif
6543   FA35~            				endif
6543   FA35~            				endif
6543   FA35             
6543   FA3C             
6543   FA3C~            				endif
6543   FA3C~            				endif
6543   FA3C             
6544   FA3C 08          				inx	
6545   FA3D 4A          				deca	
6546   FA3E 85 08       				bita	#$08
6547   FA40             			eqend
6547   FA40             
6547   FA40             
6547   FA40~            			eqend
6547   FA40~            			eqend
6547   FA40             
6547   FA40 26 EF       
6547   FA42             
6547   FA42~            			eqend
6547   FA42~            			eqend
6547   FA42             
6548   FA42 39          			rts	
6549   FA43             
6550   FA43             ;*********************************************************************
6551   FA43             ;* Main Outhole Routine: The outhole switch will jump here on closure
6552   FA43             ;*********************************************************************			
6553   FA43 8D E7       outhole_main	bsr	dump_score_queue			
6554   FA45 BD F4 32    			jsr	macro_start				;Start Executing Macros
6555   FA48             			
6556   FA48 71          			.db $71          			;Delay 1
6557   FA49 5AFE0101FA  			.db $5A,$FE,$01,$01,$FA 	;Branch if Priority #01 to $F9B0
6558   FA4E 55 0A 00    			.db $55,$0A,$00  			;Reset Threads Based on Priority #0A	
6559   FA51             			CPUX_ 				;Resume CPU Execution
6559   FA51 04          
6560   FA52             
6561   FA52 FE D0 CE    			ldx  	gr_outhole_ptr		;Game ROM: Pointer
6562   FA55 AD 00       			jsr  	$00,X  				;JSR to GameROM
6563   FA57 7F 00 F4    			clr  	flag_timer_bip			;Ball in Play Flag (Stop Timer)
6564   FA5A D6 EB       			ldab  player_up     			;Current Player Up (0-3)
6565   FA5C 8D 05       			bsr  	saveplayertobuffer    		;Save Player Data to Buffer
6566   FA5E 8D 1E       			bsr  	balladjust				;Do Outhole Processing (EB, Bonus Ball)
6567   FA60 7E F9 51    			jmp  	init_player_up			;Init New Player Up
6568   FA63             
6569   FA63             ;*********************************************************************
6570   FA63             ;* Save Player Data: This will save lamp and game specific data to   
6571   FA63             ;*                   the holding area so information can carrry from 
6572   FA63             ;*                   ball to ball.            
6573   FA63             ;*********************************************************************
6574   FA63             saveplayertobuffer	
6575   FA63 BD F9 3B    			jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
6576   FA66 DF B8       			stx	temp1
6577   FA68 CE 00 10    			ldx	#lampbuffer0
6578   FA6B C6 12       			ldab	#$12
6579   FA6D 8D 0C       			bsr	to_copyblock			;Save current lamp settings
6580   FA6F CE 00 40    			ldx	#lampflashflag
6581   FA72 C6 0C       			ldab	#$0C
6582   FA74 8D 05       			bsr	to_copyblock			;Save Flashing lamps too!
6583   FA76 CE 00 02    			ldx	#$0002
6584   FA79 C6 06       			ldab	#$06
6585   FA7B 7E EE FB    to_copyblock	jmp	copyblock				;Finally, save player game data.
6586   FA7E             
6587   FA7E             ;*********************************************************************
6588   FA7E             ;* Ball Update: This will increment to next player if there is one   
6589   FA7E             ;*              or will increment to next ball. If we are on the last
6590   FA7E             ;*              ball then it jumps to the gameover handler.
6591   FA7E             ;*********************************************************************
6592   FA7E CE 01 2A    balladjust		ldx   #aud_totalballs
6593   FA81 BD F7 E7    			jsr   ptrx_plus_1	 		;Add 1 to data in X
6594   FA84 5F          badj_loop		clrb  
6595   FA85 96 EA       			ldaa   num_players
6596   FA87             			ifne
6596   FA87             
6596   FA87 27 FE       
6597   FA89 96 EB       				ldaa   player_up
6598   FA8B             				ifeq
6598   FA8B             
6598   FA8B 26 FE       
6599   FA8D 5C          					incb
6600   FA8E             				endif
6600   FA8E             
6600   FA8E             
6600   FA8E             
6600   FA8E             
6600   FA8E             
6600   FA8E~            				endif
6600   FA8E~            				endif
6600   FA8E             
6600   FA8E~            				endif
6600   FA8E~            				endif
6600   FA8E             
6600   FA8C             
6600   FA8C 01          
6600   FA8D             
6600   FA8D             
6600   FA8D~            				endif
6600   FA8D~            				endif
6600   FA8D~            				endif
6600   FA8D             
6600   FA8E             
6600   FA8E~            				endif
6600   FA8E~            				endif
6600   FA8E             
6601   FA8E D7 EB       				stab   player_up
6602   FA90             				ifeq
6602   FA90             
6602   FA90 26 FE       
6603   FA92 8D 18       					bsr   chk_p1
6604   FA94 27 07       					beq   badj_p2
6605   FA96 39          badj_rts				rts 
6606   FA97             				endif
6606   FA97             
6606   FA97             
6606   FA97             
6606   FA97             
6606   FA97             
6606   FA97~            				endif
6606   FA97~            				endif
6606   FA97             
6606   FA97~            				endif
6606   FA97~            				endif
6606   FA97             
6606   FA91             
6606   FA91 05          
6606   FA92             
6606   FA92             
6606   FA92~            				endif
6606   FA92~            				endif
6606   FA92~            				endif
6606   FA92             
6606   FA97             
6606   FA97~            				endif
6606   FA97~            				endif
6606   FA97             
6607   FA97 96 5C       				ldaa   p1_ec_b0
6608   FA99 81 F0       				cmpa  #$F0
6609   FA9B 26 F9       				bne   badj_rts
6610   FA9D 8D 0D       badj_p2		      bsr   chk_p1
6611   FA9F 26 E3       				bne   badj_loop
6612   FAA1 91 5C       				cmpa  p1_ec_b0
6613   FAA3 26 DF       				bne   badj_loop
6614   FAA5             			else
6614   FAA5             
6614   FAA5             
6614   FAA5             
6614   FAA5             
6614   FA88             
6614   FA88             
6614   FA88             
6614   FA88~            			else
6614   FA88~            			else
6614   FA88~            			else
6614   FA88~            			else
6614   FA88             
6614   FA88~            			else
6614   FA88~            			else
6614   FA88~            			else
6614   FA88~            			else
6614   FA88             
6614   FA88             
6614   FA88 1E          
6614   FAA5             
6614   FAA5 20 FE       
6614   FAA7             
6614   FAA7             
6614   FAA7             
6614   FAA7~            			else
6614   FAA7~            			else
6614   FAA7~            			else
6614   FAA7~            			else
6614   FAA7~            			else
6614   FAA7             
6614   FAA7~            			else
6614   FAA7~            			else
6614   FAA7             
6614   FAA7~            			else
6614   FAA7~            			else
6614   FAA7             
6615   FAA7 8D 03       				bsr   chk_p1
6616   FAA9             				ifne
6616   FAA9             
6616   FAA9 27 FE       
6617   FAAB 39          					rts 
6618   FAAC 96 5E       chk_p1			      ldaa   p2_ec_b0
6619   FAAE 81 F0       					cmpa  #$F0
6620   FAB0 39          					rts   
6621   FAB1 CE 00 54    show_hstd				ldx   #score_p1_b1
6622   FAB4 DF B8       					stx   temp1
6623   FAB6 86 02       					ldaa   #02
6624   FAB8             					begin
6624   FAB8             
6625   FAB8 C6 04       						ldab   #04
6626   FABA CE 01 66    						ldx   #aud_currenthstd
6627   FABD BD FF CD    						jsr   block_copy
6628   FAC0 4A          						deca  
6629   FAC1             					eqend
6629   FAC1             
6629   FAC1             
6629   FAC1~            					eqend
6629   FAC1~            					eqend
6629   FAC1             
6629   FAC1 26 F5       
6629   FAC3             
6629   FAC3~            					eqend
6629   FAC3~            					eqend
6629   FAC3             
6630   FAC3 39          					rts  
6631   FAC4             				endif
6631   FAC4             
6631   FAC4             
6631   FAC4             
6631   FAC4             
6631   FAC4             
6631   FAC4~            				endif
6631   FAC4~            				endif
6631   FAC4             
6631   FAC4~            				endif
6631   FAC4~            				endif
6631   FAC4             
6631   FAAA             
6631   FAAA 19          
6631   FAAB             
6631   FAAB             
6631   FAAB~            				endif
6631   FAAB~            				endif
6631   FAAB~            				endif
6631   FAAB             
6631   FAC4             
6631   FAC4~            				endif
6631   FAC4~            				endif
6631   FAC4             
6632   FAC4             			endif
6632   FAC4             
6632   FAC4             
6632   FAC4             
6632   FAC4             
6632   FAC4             
6632   FAC4~            			endif
6632   FAC4~            			endif
6632   FAC4             
6632   FAC4~            			endif
6632   FAC4~            			endif
6632   FAC4             
6632   FAA6             
6632   FAA6 1D          
6632   FAA7             
6632   FAA7             
6632   FAA7~            			endif
6632   FAA7~            			endif
6632   FAA7~            			endif
6632   FAA7             
6632   FAC4             
6632   FAC4~            			endif
6632   FAC4~            			endif
6632   FAC4             
6633   FAC4             
6634   FAC4 BD D0 C0    gameover		jsr   gr_gameover_event
6635   FAC7 CE 00 40    			ldx   #lampflashflag
6636   FACA C6 0C       			ldab  #$0C
6637   FACC BD F9 0B    			jsr   clear_range
6638   FACF 20 2B       			bra   check_hstd
6639   FAD1             
6640   FAD1 B6 D0 5B    endgame		ldaa  gr_gameoversound
6641   FAD4 BD EC 3B    			jsr   isnd_once
6642   FAD7             			;fall through to init
6643   FAD7             
6644   FAD7 B6 D0 5D    powerup_init	ldaa	gr_gameover_lamp			;Game ROM: Game Over Lamp Location
6645   FADA BD F4 32    			jsr	macro_start				;Start Macro Execution
6646   FADD             			
6647   FADD             			SOL_($09)				;Turn Off Solenoid: Shooter/BallLift Disabled
6647   FADD 31 09       
6648   FADF 17 00       			.db $17,$00 			;Flash Lamp: Lamp Locatation at RAM $00
6649   FAE1             			CPUX_ 				;Resume CPU execution
6649   FAE1 04          
6650   FAE2 7C 00 E7    set_gameover	inc	flag_gameover			;Set Game Over
6651   FAE5 FE D0 5F    			ldx	gr_gameoverthread_ptr		;Game ROM: Init Pointer
6652   FAE8 BD EA 24    			jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
6653   FAEB BD F9 22    			jsr	clr_dis_masks		
6654   FAEE 7E E9 C4    			jmp	killthread				;Remove Current Thread from VM
6655   FAF1             
6656   FAF1             
6657   FAF1             get_aud_baseawd
6658   FAF1 CE 01 46    			ldx   #aud_game7
6659   FAF4 96 EB       			ldaa   player_up
6660   FAF6             			ifne   
6660   FAF6             
6660   FAF6 27 FE       
6661   FAF8 CE 01 48    				ldx   #aud_game7+2
6662   FAFB             			endif
6662   FAFB             
6662   FAFB             
6662   FAFB             
6662   FAFB             
6662   FAFB             
6662   FAFB~            			endif
6662   FAFB~            			endif
6662   FAFB             
6662   FAFB~            			endif
6662   FAFB~            			endif
6662   FAFB             
6662   FAF7             
6662   FAF7 03          
6662   FAF8             
6662   FAF8             
6662   FAF8~            			endif
6662   FAF8~            			endif
6662   FAF8~            			endif
6662   FAF8             
6662   FAFB             
6662   FAFB~            			endif
6662   FAFB~            			endif
6662   FAFB             
6663   FAFB 39          			rts   
6664   FAFC             
6665   FAFC CE 01 81    check_hstd		ldx	#adj_backuphstd			;CMOS: Backup HSTD
6666   FAFF BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
6667   FB02             			ifne						;No award if backup HSTD is 0,000,000
6667   FB02             
6667   FB02 27 FE       
6668   FB04 7F 00 BF    				clr	sys_temp2
6669   FB07 C6 02       				ldab	#$02
6670   FB09 D7 BE       				stab	sys_temp1
6671   FB0B CE 00 49    				ldx	#score_p1_b0-3			;Start High and work down low on the digits
6672   FB0E DF C2       				stx	sys_temp5
6673   FB10             				begin
6673   FB10             
6674   FB10 C6 04       					ldab	#$04
6675   FB12 D7 C6       					stab	sys_temp_w3				;Number of score Bytes Per Player
6676   FB14 CE 01 66    					ldx	#aud_currenthstd			;CMOS: Current HSTD
6677   FB17             					begin
6677   FB17             
6678   FB17 BD EE A2    						jsr	cmosinc_b				;CMOS,X++ -> B
6679   FB1A DF C4       						stx	sys_temp_w2
6680   FB1C DE C2       						ldx	sys_temp5
6681   FB1E BD EB C3    						jsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
6682   FB21 11          						cba	
6683   FB22 22 2B       						bhi	update_hstd				;HSTD beat by this digit, adjust HSTD so we dont have multiple awards by each player beating HSTD.
6684   FB24 26 48       						bne	hstd_adddig				;$A4=$A4+$A8
6685   FB26 08          						inx						;Next Digit
6686   FB27 DF C2       						stx	sys_temp5				;Store it
6687   FB29 DE C4       						ldx	sys_temp_w2				;Next HSDT Digit (pointer)
6688   FB2B 7A 00 C6    						dec	sys_temp_w3				;Goto Next Set of Digits
6689   FB2E             					eqend						;Loop for all (4)2 digits
6689   FB2E             
6689   FB2E             
6689   FB2E~            					eqend						;Loop for all (4)2 digits
6689   FB2E~            					eqend						;Loop for all (4)2 digits
6689   FB2E             
6689   FB2E 26 E7       
6689   FB30             
6689   FB30~            					eqend						;Loop for all (4)2 digits
6689   FB30~            					eqend						;Loop for all (4)2 digits
6689   FB30             
6690   FB30 7A 00 BE    hstd_nextp			dec	sys_temp1				;Goto Next Player
6691   FB33             				eqend						;Loop for all 4 Players
6691   FB33             
6691   FB33             
6691   FB33~            				eqend						;Loop for all 4 Players
6691   FB33~            				eqend						;Loop for all 4 Players
6691   FB33             
6691   FB33 26 DB       
6691   FB35             
6691   FB35~            				eqend						;Loop for all 4 Players
6691   FB35~            				eqend						;Loop for all 4 Players
6691   FB35             
6692   FB35 96 BF       				ldaa	sys_temp2
6693   FB37             				ifne
6693   FB37             
6693   FB37 27 FE       
6694   FB39 FE D0 64    					ldx	gr_highscore_ptr			;Game ROM Data: High Score Sound
6695   FB3C 6E 00       					jmp   $00,X
6696   FB3E B6 01 66    set_hstd				ldaa	aud_currenthstd			;HSTD High Digit
6697   FB41 84 0F       					anda	#$0F
6698   FB43             					ifne					;Branch if Score is under 10 million
6698   FB43             
6698   FB43 27 FE       
6699   FB45 86 99       						ldaa	#$99
6700   FB47 8D 36       						bsr	fill_hstd_digits			;Set HSTD to 9,999,999
6701   FB49 7F 01 66    						clr	aud_currenthstd			;Clear 10 Million Digit
6702   FB4C             					endif
6702   FB4C             
6702   FB4C             
6702   FB4C             
6702   FB4C             
6702   FB4C             
6702   FB4C~            					endif
6702   FB4C~            					endif
6702   FB4C             
6702   FB4C~            					endif
6702   FB4C~            					endif
6702   FB4C             
6702   FB44             
6702   FB44 07          
6702   FB45             
6702   FB45             
6702   FB45~            					endif
6702   FB45~            					endif
6702   FB45~            					endif
6702   FB45             
6702   FB4C             
6702   FB4C~            					endif
6702   FB4C~            					endif
6702   FB4C             
6703   FB4C             				endif
6703   FB4C             
6703   FB4C             
6703   FB4C             
6703   FB4C             
6703   FB4C             
6703   FB4C~            				endif
6703   FB4C~            				endif
6703   FB4C             
6703   FB4C~            				endif
6703   FB4C~            				endif
6703   FB4C             
6703   FB38             
6703   FB38 13          
6703   FB39             
6703   FB39             
6703   FB39~            				endif
6703   FB39~            				endif
6703   FB39~            				endif
6703   FB39             
6703   FB4C             
6703   FB4C~            				endif
6703   FB4C~            				endif
6703   FB4C             
6704   FB4C             			endif
6704   FB4C             
6704   FB4C             
6704   FB4C             
6704   FB4C             
6704   FB4C             
6704   FB4C~            			endif
6704   FB4C~            			endif
6704   FB4C             
6704   FB4C~            			endif
6704   FB4C~            			endif
6704   FB4C             
6704   FB03             
6704   FB03 48          
6704   FB04             
6704   FB04             
6704   FB04~            			endif
6704   FB04~            			endif
6704   FB04~            			endif
6704   FB04             
6704   FB4C             
6704   FB4C~            			endif
6704   FB4C~            			endif
6704   FB4C             
6705   FB4C 7E FA D1    			jmp   endgame
6706   FB4F             
6707   FB4F CE 01 66    update_hstd		ldx	#aud_currenthstd			;Current HSTD
6708   FB52 96 BE       			ldaa	sys_temp1
6709   FB54 97 BF       			staa	sys_temp2
6710   FB56 DF B8       			stx	temp1
6711   FB58 8D 18       			bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
6712   FB5A C6 04       			ldab	#$04
6713   FB5C 09          			dex	
6714   FB5D BD EF 23    			jsr	copyblock2				;Transfer Data Block at X to temp1, Length B
6715   FB60 7C 01 66    			inc	aud_currenthstd			;Adjust HSTD to new player score
6716   FB63 B6 01 67    			ldaa	aud_currenthstd+1
6717   FB66 4C          			inca	
6718   FB67 84 0F       			anda	#$0F
6719   FB69 26 C5       			bne	hstd_nextp				;Go Check Next Player Score
6720   FB6B 7F 01 67    			clr	aud_currenthstd+1
6721   FB6E 8D 02       hstd_adddig		bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
6722   FB70 20 BE       			bra	hstd_nextp				;Go Check Next Player Score
6723   FB72             			
6724   FB72             ;*************************************************
6725   FB72             ;* Add LSB of sys_temp_w3 to sys_temp5
6726   FB72             ;*************************************************
6727   FB72 DE C2       wordplusbyte	ldx	sys_temp5
6728   FB74 96 C6       			ldaa	sys_temp_w3
6729   FB76 7F 00 C6    			clr	sys_temp_w3
6730   FB79 BD EE 3E    			jsr	xplusa				;X = X + A
6731   FB7C DF C2       			stx	sys_temp5
6732   FB7E 39          to_rts1		rts	
6733   FB7F             			
6734   FB7F             ;**************************************************
6735   FB7F             ;* This routine will fill the value of A into all
6736   FB7F             ;* high score digit data.
6737   FB7F             ;**************************************************
6738   FB7F CE 01 66    fill_hstd_digits	ldx	#aud_currenthstd			;CMOS: Current HSTD
6739   FB82 C6 04       			ldab	#$04
6740   FB84             			begin
6740   FB84             
6741   FB84 BD EE EE    				jsr	a_cmosinc				;A -> CMOS,X++)
6742   FB87 5A          				decb	
6743   FB88             			eqend
6743   FB88             
6743   FB88             
6743   FB88~            			eqend
6743   FB88~            			eqend
6743   FB88             
6743   FB88 26 FA       
6743   FB8A             
6743   FB8A~            			eqend
6743   FB8A~            			eqend
6743   FB8A             
6744   FB8A 39          			rts
6745   FB8B             				
6746   FB8B             send_sound		begin
6746   FB8B             
6747   FB8B             				SLEEP($02)
6747   FB8B BD E9 7C    
6747   FB8E 02          
6748   FB8F 96 DF       				ldaa  sys_soundflags			
6749   FB91             		      eqend
6749   FB91             
6749   FB91             
6749   FB91~            		      eqend
6749   FB91~            		      eqend
6749   FB91             
6749   FB91 26 F8       
6749   FB93             
6749   FB93~            		      eqend
6749   FB93~            		      eqend
6749   FB93             
6750   FB93 39          		      rts 
6751   FB94             
6752   FB94             ;******************************************************
6753   FB94             ;* Get Random: Will pull various system variables and
6754   FB94             ;*             calculate a pseudo-random number.
6755   FB94             ;******************************************************			
6756   FB94 37          get_random		pshb	
6757   FB95 96 F5       			ldaa	randomseed				;This is changed by Switch Closures
6758   FB97 16          			tab	
6759   FB98 56          			rorb	
6760   FB99 56          			rorb	
6761   FB9A 97 B8       			staa	temp1					;Use some Temp variables for data
6762   FB9C D8 B8       			eorb	temp1
6763   FB9E 49          			rola	
6764   FB9F 9B A5       			adda	irq_counter					;Throw in some switch matrix stuff
6765   FBA1 97 F5       			staa	randomseed
6766   FBA3 33          			pulb	
6767   FBA4 39          to_rts2		rts
6768   FBA5             
6769   FBA5             ;********************************************************
6770   FBA5             ;* Credit Button Press: 
6771   FBA5             ;********************************************************
6772   FBA5 CE 01 AB    credit_button	ldx	#adj_max_credits			;CMOS: Max. Credits
6773   FBA8 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
6774   FBAB CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
6775   FBAE BD FD DB    			jsr	cmos_a				;CMOS, X -> A )
6776   FBB1 26 03       			bne	has_credit
6777   FBB3 5D          			tstb						;No credits, check for free play
6778   FBB4             			ifeq						;No Free Play, get outta here.
6778   FBB4             
6778   FBB4 26 FE       
6779   FBB6 D6 E7       has_credit			ldab	flag_gameover			;Has valid credit or freeplay, is Game Over?
6780   FBB8 26 20       				bne	start_new_game			;No, goto Start New Game
6781   FBBA DF C4       				stx	sys_temp_w2
6782   FBBC CE 01 93    				ldx	#adj_energystandard
6783   FBBF BD EE A2    				jsr	cmosinc_b				;CMOS,X++ -> B
6784   FBC2 DE C4       				ldx	sys_temp_w2
6785   FBC4 5A          				decb
6786   FBC5 CA F0       				orab	#$F0
6787   FBC7 D1 5E       				cmpb	p2_ec_b0
6788   FBC9             				ifle
6788   FBC9             
6788   FBC9 2E FE       
6789   FBCB D6 EA       					ldab	num_players				;Current # of Players
6790   FBCD F1 D0 4E    					cmpb	gr_numplayers			;Max # of Players (Game ROM data)
6791   FBD0             					ifcs						;Already 4 players, outta here.
6791   FBD0             
6791   FBD0 24 FE       
6792   FBD2 8D 0B       						bsr	lesscredit				;Subtract a credit
6793   FBD4 BD F8 C4    						jsr	add_player				;Add a player.
6794   FBD7             					endif
6794   FBD7             
6794   FBD7             
6794   FBD7             
6794   FBD7             
6794   FBD7             
6794   FBD7~            					endif
6794   FBD7~            					endif
6794   FBD7             
6794   FBD7~            					endif
6794   FBD7~            					endif
6794   FBD7             
6794   FBD1             
6794   FBD1 05          
6794   FBD2             
6794   FBD2             
6794   FBD2~            					endif
6794   FBD2~            					endif
6794   FBD2~            					endif
6794   FBD2             
6794   FBD7             
6794   FBD7~            					endif
6794   FBD7~            					endif
6794   FBD7             
6795   FBD7             				endif
6795   FBD7             
6795   FBD7             
6795   FBD7             
6795   FBD7             
6795   FBD7             
6795   FBD7~            				endif
6795   FBD7~            				endif
6795   FBD7             
6795   FBD7~            				endif
6795   FBD7~            				endif
6795   FBD7             
6795   FBCA             
6795   FBCA 0C          
6795   FBCB             
6795   FBCB             
6795   FBCB~            				endif
6795   FBCB~            				endif
6795   FBCB~            				endif
6795   FBCB             
6795   FBD7             
6795   FBD7~            				endif
6795   FBD7~            				endif
6795   FBD7             
6796   FBD7             			endif
6796   FBD7             
6796   FBD7             
6796   FBD7             
6796   FBD7             
6796   FBD7             
6796   FBD7~            			endif
6796   FBD7~            			endif
6796   FBD7             
6796   FBD7~            			endif
6796   FBD7~            			endif
6796   FBD7             
6796   FBB5             
6796   FBB5 21          
6796   FBB6             
6796   FBB6             
6796   FBB6~            			endif
6796   FBB6~            			endif
6796   FBB6~            			endif
6796   FBB6             
6796   FBD7             
6796   FBD7~            			endif
6796   FBD7~            			endif
6796   FBD7             
6797   FBD7 7E E9 C4    			jmp	killthread				;Remove Current Thread from VM
6798   FBDA             
6799   FBDA             ;*********************************************************
6800   FBDA             ;* Resets Games and Starts Anew
6801   FBDA             ;*********************************************************
6802   FBDA 8D 03       start_new_game	bsr	lesscredit				;Subtract a credit
6803   FBDC 7E F8 B0    			jmp	do_game_init			;Init Player 1
6804   FBDF             
6805   FBDF             ;*********************************************************
6806   FBDF             ;* Removes a credit and adjusts coin lockout and credit 
6807   FBDF             ;* lamp appropriately. Also updates audits.
6808   FBDF             ;*
6809   FBDF             ;* 	Current Credits in A.
6810   FBDF             ;*********************************************************
6811   FBDF 4D          lesscredit		tsta	
6812   FBE0             			ifne						;Is it Zero?
6812   FBE0             
6812   FBE0 27 FE       
6813   FBE2 8B 99       				adda	#$99					;Subtract 1 credit
6814   FBE4 19          				daa						;dont' forget to adjust
6815   FBE5 BD EE EE    				jsr	a_cmosinc				;A -> CMOS,X++)
6816   FBE8 B6 11 9A    				ldaa	current_credits				;Current Credits
6817   FBEB 8B 99       				adda	#$99					;Subtract 1
6818   FBED 19          				daa	
6819   FBEE B7 11 9A    				staa	current_credits				;Store Credits
6820   FBF1             			endif
6820   FBF1             
6820   FBF1             
6820   FBF1             
6820   FBF1             
6820   FBF1             
6820   FBF1~            			endif
6820   FBF1~            			endif
6820   FBF1             
6820   FBF1~            			endif
6820   FBF1~            			endif
6820   FBF1             
6820   FBE1             
6820   FBE1 0F          
6820   FBE2             
6820   FBE2             
6820   FBE2~            			endif
6820   FBE2~            			endif
6820   FBE2~            			endif
6820   FBE2             
6820   FBF1             
6820   FBF1~            			endif
6820   FBF1~            			endif
6820   FBF1             
6821   FBF1 BD F7 9C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
6822   FBF4 BD F8 93    			jsr	clr_bonus_coins			;Reset Any Bonus Coins... too bad!
6823   FBF7 CE 01 1E    			ldx	#aud_totalcredits			;Audit: Total Credits
6824   FBFA 7E F7 E7    			jmp	ptrx_plus_1				;Add 1 to data at X
6825   FBFD             
6826   FBFD             ;*********************************************************
6827   FBFD             ;* Tilt Contacts
6828   FBFD             ;*********************************************************			
6829   FBFD 7C 00 F1    tilt_warning	inc	num_tilt				;Add 1 Tilt
6830   FC00 B6 01 92    			ldaa	adj_maxplumbbobtilts+1		;ADJ: LSD Max Plumb Bob Tilts
6831   FC03 84 0F       			anda	#$0F
6832   FC05 91 F1       			cmpa	num_tilt				;Current # of Plumb Bob Tilts
6833   FC07 22 9B       			bhi	to_rts2				;Not enough warnings yet.. Leave now!
6834   FC09 B6 D0 5E    do_tilt		ldaa	gr_tilt_lamp			;Game ROM: Tilt Lamp Location
6835   FC0C 97 E6       			staa	flag_tilt				;Tilt Flag
6836   FC0E BD F4 32    			jsr	macro_start				;Start Macro Execution-
6837   FC11             			
6838   FC11 14 00       			.db $14,$00 		;Turn on Tilt Lamp
6839   FC13             			REMTHREADS_($0C,$00)	;.db $55,$0C,$00  	;Get Rid of non-tilt threads
6839   FC13 55 0C 00    
6840   FC16             			CPUX_				;Return to Program Execution 
6840   FC16 04          
6841   FC17 39          			rts
6842   FC18             
6843   FC18             
6844   FC18             ;***********************************************************
6845   FC18             ;* Self Test Routines Begin Here, first some data tables
6846   FC18             ;***********************************************************
6847   FC18             ;* Define our test entry points
6848   FC18             ;***********************************************
6849   FC18 FD FF       testdata		.dw st_display
6850   FC1A FE 32       			.dw st_sound
6851   FC1C FE 5D       			.dw st_lamp
6852   FC1E FE 9C       			.dw st_solenoid
6853   FC20 FE D8       			.dw st_switch
6854   FC22             
6855   FC22             ;***********************************************
6856   FC22             ;* This table defines which routines
6857   FC22             ;* handel the various adjustment displays.
6858   FC22             ;***********************************************			
6859   FC22 00          testlists		.db $00		;Function 00:    Game Identification
6860   FC23 FD 46       			.dw fn_gameid	;$FD,$23
6861   FC25 01          			.db $01		;Function 01-11: System Audits
6862   FC26 FD 53       			.dw fn_sysaud	;$FD,$30
6863   FC28 0C          			.db $0C		;Function 12:    Current HSTD
6864   FC29 FD 66       			.dw fn_hstd		;$FD,$A9
6865   FC2B 0D          			.db $0D		;Function 13-17: Backup HSTD and Replays
6866   FC2C FD 6E       			.dw fn_replay	;$FD,$B1
6867   FC2E 12          			.db $12		;Function 18:    Max Credits
6868   FC2F FD E2       			.dw fn_credit	;$FE,$26
6869   FC31 13          			.db $13		;Function 19:    Pricing Control
6870   FC32 FD AC       			.dw fn_pricec	;$FD,$EF
6871   FC34 14          			.db $14		;Function 20-25: Pricing Settings
6872   FC35 FD C6       			.dw fn_prices	;$FE,$09
6873   FC37 1A          			.db $1A		;Function 26-41: System and Game Adjustments
6874   FC38 FD EF       			.dw fn_adj		;$FE,$33
6875   FC3A 2A          			.db $2A		;Function 42-49: Game Audits
6876   FC3B FD 51       			.dw fn_gameaud	;$FD,$2E
6877   FC3D 32          			.db $32		;Function 50:    Command Mode
6878   FC3E FD FA       			.dw fn_command	;$FE,$3E
6879   FC40 33          			.db $33
6880   FC41             
6881   FC41             ;************************************************
6882   FC41             ;* Main Self-Test Routine
6883   FC41             ;************************************************
6884   FC41             test_number =	$000e			;RAM Location to store where we are...
6885   FC41             test_lamptimer =	$000f			;Timer for Lamp test loop
6886   FC41             
6887   FC41 8D 51       selftest_entry	bsr	check_adv				;Advance: - if Triggered
6888   FC43             			ifpl
6888   FC43             
6888   FC43 2B FE       
6889   FC45 7E E9 C4    				jmp	killthread				;Kill Current Thread
6890   FC48             			endif
6890   FC48             
6890   FC48             
6890   FC48             
6890   FC48             
6890   FC48             
6890   FC48~            			endif
6890   FC48~            			endif
6890   FC48             
6890   FC48~            			endif
6890   FC48~            			endif
6890   FC48             
6890   FC44             
6890   FC44 03          
6890   FC45             
6890   FC45             
6890   FC45~            			endif
6890   FC45~            			endif
6890   FC45~            			endif
6890   FC45             
6890   FC48             
6890   FC48~            			endif
6890   FC48~            			endif
6890   FC48             
6891   FC48 86 09       			ldaa	#09
6892   FC4A BD EA 83    			jsr	solbuf
6893   FC4D 8D 5B       			bsr	st_init				;Set up self test
6894   FC4F 8D 4E       			bsr	check_aumd				;AUMD: + if Manual-Down
6895   FC51 2B 77       			bmi	do_audadj				;Auto-Up, go do audits and adjustments instead
6896   FC53 4F          			clra	
6897   FC54 7F 00 0E    st_diagnostics	clr	test_number				;Start at 0
6898   FC57 CE FC 18    			ldx	#testdata				;Macro Pointer
6899   FC5A 36          			psha	
6900   FC5B 86 09       			ldaa	#09
6901   FC5D BD EA 83    			jsr	solbuf
6902   FC60 32          			pula
6903   FC61 36          			psha
6904   FC62 BD F5 28    			jsr	gettabledata_b			;Load up the pointer to our test routine in X
6905   FC65 32          			pula	
6906   FC66 16          			tab	
6907   FC67 5A          			decb						;Adjust back down to where it was before table lookup incremented it
6908   FC68 D7 5E       			stab	p2_ec_b0				;Show the test number in display
6909   FC6A BD EA 24    			jsr	newthread_06			;Start a new thread with our test routine
6910   FC6D             			SLEEP($10)	
6910   FC6D BD E9 7C    
6910   FC70 10          
6911   FC71             			;This is the Advance button handler, it runs as a seperate thread to the test routine
6912   FC71             			begin
6912   FC71             
6913   FC71             				begin
6913   FC71             
6914   FC71 8D 21       					bsr	check_adv			;Advance: Stay here forever until pressed			   
6915   FC73             				miend
6915   FC73             
6915   FC73             
6915   FC73~            				miend
6915   FC73~            				miend
6915   FC73             
6915   FC73 2A FC       
6915   FC75             
6915   FC75~            				miend
6915   FC75~            				miend
6915   FC75             
6916   FC75 8D 28       				bsr	check_aumd				;AUMD: + if Manual-Down
6917   FC77 2B 40       				bmi	st_nexttest				;Do next test...
6918   FC79 D7 0E       				stab	test_number
6919   FC7B             				begin
6919   FC7B             
6920   FC7B 8D 17       					bsr	check_adv			;Advance: Stay here forever until released
6921   FC7D             				plend
6921   FC7D             
6921   FC7D             
6921   FC7D~            				plend
6921   FC7D~            				plend
6921   FC7D             
6921   FC7D 2B FC       
6921   FC7F             
6921   FC7F~            				plend
6921   FC7F~            				plend
6921   FC7F             
6922   FC7F             			loopend
6922   FC7F             
6922   FC7F             
6922   FC7F~            			loopend
6922   FC7F~            			loopend
6922   FC7F             
6922   FC7F 20 F0       
6922   FC81             
6922   FC81~            			loopend
6922   FC81~            			loopend
6922   FC81             
6923   FC81             
6924   FC81             ;*******************************************************
6925   FC81             ;*
6926   FC81             ;*******************************************************			
6927   FC81 36          do_aumd		psha	
6928   FC82 96 E9       			ldaa	flags_selftest
6929   FC84             			ifpl
6929   FC84             
6929   FC84 2B FE       
6930   FC86 8D 17       				bsr	check_aumd					;AUMD: + if Manual-Down
6931   FC88             				ifpl
6931   FC88             
6931   FC88 2B FE       
6932   FC8A 96 0E       					ldaa	test_number
6933   FC8C             					ifne
6933   FC8C             
6933   FC8C 27 FE       
6934   FC8E 4F          						clra	
6935   FC8F 97 0E       						staa	test_number
6936   FC91 4A          						deca	
6937   FC92             					endif
6937   FC92             
6937   FC92             
6937   FC92             
6937   FC92             
6937   FC92             
6937   FC92~            					endif
6937   FC92~            					endif
6937   FC92             
6937   FC92~            					endif
6937   FC92~            					endif
6937   FC92             
6937   FC8D             
6937   FC8D 04          
6937   FC8E             
6937   FC8E             
6937   FC8E~            					endif
6937   FC8E~            					endif
6937   FC8E~            					endif
6937   FC8E             
6937   FC92             
6937   FC92~            					endif
6937   FC92~            					endif
6937   FC92             
6938   FC92             				endif
6938   FC92             
6938   FC92             
6938   FC92             
6938   FC92             
6938   FC92             
6938   FC92~            				endif
6938   FC92~            				endif
6938   FC92             
6938   FC92~            				endif
6938   FC92~            				endif
6938   FC92             
6938   FC89             
6938   FC89 08          
6938   FC8A             
6938   FC8A             
6938   FC8A~            				endif
6938   FC8A~            				endif
6938   FC8A~            				endif
6938   FC8A             
6938   FC92             
6938   FC92~            				endif
6938   FC92~            				endif
6938   FC92             
6939   FC92             			endif
6939   FC92             
6939   FC92             
6939   FC92             
6939   FC92             
6939   FC92             
6939   FC92~            			endif
6939   FC92~            			endif
6939   FC92             
6939   FC92~            			endif
6939   FC92~            			endif
6939   FC92             
6939   FC85             
6939   FC85 0C          
6939   FC86             
6939   FC86             
6939   FC86~            			endif
6939   FC86~            			endif
6939   FC86~            			endif
6939   FC86             
6939   FC92             
6939   FC92~            			endif
6939   FC92~            			endif
6939   FC92             
6940   FC92 32          			pula	
6941   FC93 39          			rts
6942   FC94             
6943   FC94             ;*********************************************************
6944   FC94             ;* This will check the state of the advance switch and
6945   FC94             ;* return the control register results
6946   FC94             ;*********************************************************				
6947   FC94 F6 28 00    check_adv		ldab	pia_disp_digit_data		;Dummy read to clear previous results
6948   FC97             			SLEEP($02)
6948   FC97 BD E9 7C    
6948   FC9A 02          
6949   FC9B F6 28 01    			ldab	pia_disp_digit_ctrl
6950   FC9E 39          			rts
6951   FC9F             
6952   FC9F             ;*********************************************************
6953   FC9F             ;* This routine will check the state of the Up/Down toggle
6954   FC9F             ;* switch. First do a dummy read to clear previous results
6955   FC9F             ;*********************************************************
6956   FC9F F6 28 02    check_aumd		ldab	pia_disp_seg_data			;Dummy read to clear previous results
6957   FCA2             			SLEEP($02)
6957   FCA2 BD E9 7C    
6957   FCA5 02          
6958   FCA6 F6 28 03    			ldab	pia_disp_seg_ctrl
6959   FCA9 39          			rts 
6960   FCAA             
6961   FCAA             ;**************************************************
6962   FCAA             ;* Self Test Initializations:
6963   FCAA             ;*	Remove all VM Threads
6964   FCAA             ;*	Disable Solenoids
6965   FCAA             ;*	Clear RAM
6966   FCAA             ;**************************************************
6967   FCAA 5F          st_init		clrb	
6968   FCAB BD EA 5B    			jsr	kill_threads			;Remove All VM Threads 
6969   FCAE 7C 00 E9    			inc	flags_selftest			;Set Test Flag
6970   FCB1 CE 00 00    			ldx	#ram_base
6971   FCB4 C6 A5       			ldab	#$A5
6972   FCB6 7E F9 0B    to_clear_range	jmp	clear_range				;Clear RAM from $0000-0089
6973   FCB9             
6974   FCB9             ;**************************************************
6975   FCB9             ;* Next Test: Will advance diagnostics to next
6976   FCB9             ;*            test in sequence, if done, then fall
6977   FCB9             ;*            through to audits/adjustments
6978   FCB9             ;**************************************************
6979   FCB9 C6 3C       st_nexttest		ldab	#$3C
6980   FCBB CE 00 10    			ldx	#lampbuffer0
6981   FCBE 8D F6       			bsr	to_clear_range			;Clear RAM from $0010-0038
6982   FCC0 BD EA 5B    			jsr	kill_threads			;Remove all VM Threads
6983   FCC3 4C          			inca	
6984   FCC4 81 05       			cmpa	#$05					;are we done yet?
6985   FCC6 26 8C       			bne	st_diagnostics			;Goto back to Self-Test Diagnostics routine
6986   FCC8             			;Fall through if finished
6987   FCC8             			
6988   FCC8             ;**************************************************
6989   FCC8             ;* Main Audit/Adjustments Process Entry
6990   FCC8             ;**************************************************			
6991   FCC8 8D E0       to_audadj		bsr	st_init				;Clear all RAM and set up self testing
6992   FCCA 7F 00 5C    do_audadj		clr	p1_ec_b0
6993   FCCD 86 04       			ldaa	#$04					;Show test 04 by default
6994   FCCF 97 5E       			staa	p2_ec_b0
6995   FCD1             			SLEEP($10)
6995   FCD1 BD E9 7C    
6995   FCD4 10          
6996   FCD5             			begin
6996   FCD5             
6997   FCD5 BD F9 11    				jsr	clear_displays			;Blank all Player Displays (buffer 0)
6998   FCD8 8D 34       				bsr	b_129					;#08 -> $0F
6999   FCDA D6 5C       				ldab	p1_ec_b0
7000   FCDC BD F8 9D    				jsr	dec2hex				;Convert Decimal(B) to Hex(B)
7001   FCDF CE FC 1F    				ldx	#testlists-3
7002   FCE2             				begin
7002   FCE2             
7003   FCE2 08          					inx	
7004   FCE3 08          					inx	
7005   FCE4 08          					inx	
7006   FCE5 E1 03       					cmpb	$03,X					;Are we at next handler?
7007   FCE7             				csend
7007   FCE7             
7007   FCE7             
7007   FCE7~            				csend
7007   FCE7~            				csend
7007   FCE7             
7007   FCE7 24 F9       
7007   FCE9             
7007   FCE9~            				csend
7007   FCE9~            				csend
7007   FCE9             
7008   FCE9 EE 01       				ldx	$01,X					;Load the routine
7009   FCEB AD 00       				jsr	$00,X					;Do the routine to load up data into displays
7010   FCED             				begin
7010   FCED             
7011   FCED 8D A5       					bsr	check_adv			;Advance: - if Triggered
7012   FCEF             				miend
7012   FCEF             
7012   FCEF             
7012   FCEF~            				miend
7012   FCEF~            				miend
7012   FCEF             
7012   FCEF 2A FC       
7012   FCF1             
7012   FCF1~            				miend
7012   FCF1~            				miend
7012   FCF1             
7013   FCF1 8D 1B       b_133				bsr	b_129					;#08 -> $0F
7014   FCF3 8D 9F       show_func			bsr	check_adv				;Advance: - if Triggered
7015   FCF5             			miend
7015   FCF5             
7015   FCF5             
7015   FCF5~            			miend
7015   FCF5~            			miend
7015   FCF5             
7015   FCF5 2A DE       
7015   FCF7             
7015   FCF7~            			miend
7015   FCF7~            			miend
7015   FCF7             
7016   FCF7 8D 1A       			bsr	b_12D
7017   FCF9 26 F8       			bne	show_func				;Look at the buttons again
7018   FCFB 8D 31       			bsr	adjust_func				;Add or subtract the function number?
7019   FCFD 9B 5C       			adda	p1_ec_b0				;Change it
7020   FCFF 19          			daa	
7021   FD00 81 51       			cmpa	#$51					;Are we now on audit 51??
7022   FD02 27 35       			beq	st_reset				;Yes, Blank displays, reboot game
7023   FD04 81 99       			cmpa	#$99					;Going down, are we minus now??
7024   FD06             			ifeq
7024   FD06             
7024   FD06 26 FE       
7025   FD08 86 50       				ldaa	#$50					;Yes, wrap around to 50
7026   FD0A             			endif
7026   FD0A             
7026   FD0A             
7026   FD0A             
7026   FD0A             
7026   FD0A             
7026   FD0A~            			endif
7026   FD0A~            			endif
7026   FD0A             
7026   FD0A~            			endif
7026   FD0A~            			endif
7026   FD0A             
7026   FD07             
7026   FD07 02          
7026   FD08             
7026   FD08             
7026   FD08~            			endif
7026   FD08~            			endif
7026   FD08~            			endif
7026   FD08             
7026   FD0A             
7026   FD0A~            			endif
7026   FD0A~            			endif
7026   FD0A             
7027   FD0A 97 5C       			staa	p1_ec_b0				;Store new value
7028   FD0C 20 E5       			bra	show_func				;Look at the buttons again
7029   FD0E             
7030   FD0E 86 08       b_129			ldaa	#$08
7031   FD10 97 0F       			staa	$000F
7032   FD12 39          			rts	
7033   FD13             			
7034   FD13 96 0F       b_12D			ldaa	$000F
7035   FD15             			ifne
7035   FD15             
7035   FD15 27 FE       
7036   FD17 7A 00 0F    				dec	$000F
7037   FD1A 81 08       				cmpa	#$08
7038   FD1C             			endif
7038   FD1C             
7038   FD1C             
7038   FD1C             
7038   FD1C             
7038   FD1C             
7038   FD1C~            			endif
7038   FD1C~            			endif
7038   FD1C             
7038   FD1C~            			endif
7038   FD1C~            			endif
7038   FD1C             
7038   FD16             
7038   FD16 05          
7038   FD17             
7038   FD17             
7038   FD17~            			endif
7038   FD17~            			endif
7038   FD17~            			endif
7038   FD17             
7038   FD1C             
7038   FD1C~            			endif
7038   FD1C~            			endif
7038   FD1C             
7039   FD1C 39          			rts
7040   FD1D             
7041   FD1D             			begin
7041   FD1D             
7042   FD1D 8D EF       				bsr	b_129					;#08 -> $0F
7043   FD1F BD FC 94    b_135				jsr	check_adv				;Advance: - if Triggered
7044   FD22 2B CD       				bmi	b_133
7045   FD24 96 85       				ldaa	switch_masked
7046   FD26 85 04       				bita	#$04
7047   FD28             			neend
7047   FD28             
7047   FD28             
7047   FD28~            			neend
7047   FD28~            			neend
7047   FD28             
7047   FD28 27 F3       
7047   FD2A             
7047   FD2A~            			neend
7047   FD2A~            			neend
7047   FD2A             
7048   FD2A 8D E7       			bsr	b_12D
7049   FD2C 26 F1       			bne	b_135
7050   FD2E 86 99       adjust_func		ldaa	#$99
7051   FD30 BD FC 9F    			jsr	check_aumd				;AUMD: + if Manual-Down
7052   FD33             			ifmi
7052   FD33             
7052   FD33 2A FE       
7053   FD35 86 01       				ldaa	#$01
7054   FD37             			endif
7054   FD37             
7054   FD37             
7054   FD37             
7054   FD37             
7054   FD37             
7054   FD37~            			endif
7054   FD37~            			endif
7054   FD37             
7054   FD37~            			endif
7054   FD37~            			endif
7054   FD37             
7054   FD34             
7054   FD34 02          
7054   FD35             
7054   FD35             
7054   FD35~            			endif
7054   FD35~            			endif
7054   FD35~            			endif
7054   FD35             
7054   FD37             
7054   FD37~            			endif
7054   FD37~            			endif
7054   FD37             
7055   FD37 16          			tab	
7056   FD38 39          			rts
7057   FD39             
7058   FD39 86 FF       st_reset		ldaa	#$FF
7059   FD3B 97 5C       			staa	p1_ec_b0
7060   FD3D 97 5E       			staa	p2_ec_b0
7061   FD3F             			SLEEP($50)
7061   FD3F BD E9 7C    
7061   FD42 50          
7062   FD43 7E E7 30    			jmp	reset					;Goto Reset Entry
7063   FD46             
7064   FD46             ;************************************************************
7065   FD46             ;* Self Test Audit and Adjustment Handlers:
7066   FD46             ;* 	These routines are in charge of the functions shown
7067   FD46             ;* 	in the self test routines. Each one handles one or
7068   FD46             ;*    more functions to retrieve and display the proper 
7069   FD46             ;*    data on the various displays.
7070   FD46             ;************************************************************			
7071   FD46 FE D0 00    fn_gameid		ldx	gr_gamenumber
7072   FD49 DF 4D       			stx	score_p1_b0+1			;Game # -> Player 1 Display
7073   FD4B B6 D0 02    			ldaa	gr_romrevision
7074   FD4E 97 4F       			staa	score_p1_b0+3			;ROM Rev -> Player Display
7075   FD50 39          			rts	   
7076   FD51             
7077   FD51 C0 1E       fn_gameaud		subb	#$1E
7078   FD53 58          fn_sysaud		aslb	
7079   FD54 58          			aslb	
7080   FD55 CE 00 FE    			ldx	#$00FE
7081   FD58 BD EE 8C    			jsr	xplusb				;X = X + B)
7082   FD5B BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
7083   FD5E 97 4E       			staa	score_p1_b0+2
7084   FD60 BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
7085   FD63 97 4F       			staa	score_p1_b0+3			;Show Data in Player 1 Display
7086   FD65 39          			rts
7087   FD66             
7088   FD66 BD FA B1    fn_hstd		jsr	show_hstd				;Puts HSTD in All Player Displays(Buffer 1)
7089   FD69 86 7F       			ldaa	#$7F
7090   FD6B 97 78       			staa	dmask_p1
7091   FD6D 39          			rts
7092   FD6E             
7093   FD6E CE 01 81    fn_replay		ldx	#adj_backuphstd			;Offset to Replay Levels
7094   FD71 C0 0D       			subb	#$0D					;Subtract 13 to get correct base
7095   FD73 58          			aslb						;*2  2 bytes data per level(replay score)
7096   FD74 BD EE 8C    			jsr	xplusb				;X = X + B)
7097   FD77 DF EF       			stx	vm_pc					;Pointer to Current Replay Level Data
7098   FD79 58          			aslb						;*2  4 bytes data per level(times exceeded)
7099   FD7A CE 01 4E    			ldx	#aud_hstdcredits			;Offset to Replay Level Times Exceeded
7100   FD7D BD EE 8C    			jsr	xplusb				;X = X + B)
7101   FD80 BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
7102   FD83 97 52       			staa	score_p2_b0+2			;Show Times Exceeded MSD's in Player 2 Display
7103   FD85 BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
7104   FD88 97 53       			staa	score_p2_b0+3			;Show Times Exceeded LSD's in Player 2 Display
7105   FD8A 5F          			clrb	
7106   FD8B             			begin
7106   FD8B             
7107   FD8B DE EF       				ldx	vm_pc					;reload current offset * 2
7108   FD8D 8D 14       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
7109   FD8F 16          				tab	
7110   FD90 BD EC 32    				jsr	split_ab				;Shift the digits around for display
7111   FD93 84 F0       				anda	#$F0					;Blank MSD (10,000,000 digit)
7112   FD95 D7 4C       				stab	score_p1_b0				;Show it.
7113   FD97 97 4D       				staa	score_p1_b0+1			;Player 1 Display
7114   FD99 5F          				clrb	
7115   FD9A D7 4E       				stab	score_p1_b0+2			;Lay down some Zero's
7116   FD9C D7 4F       				stab	score_p1_b0+3			
7117   FD9E BD FD 1F    				jsr	b_135
7118   FDA1             			loopend
7118   FDA1             
7118   FDA1             
7118   FDA1~            			loopend
7118   FDA1~            			loopend
7118   FDA1             
7118   FDA1 20 E8       
7118   FDA3             
7118   FDA3~            			loopend
7118   FDA3~            			loopend
7118   FDA3             
7119   FDA3             
7120   FDA3 8D 36       cmos_add_d		bsr	cmos_a				;CMOS, X -> A )
7121   FDA5 1B          			aba	
7122   FDA6 19          			daa	
7123   FDA7 BD EE EE    			jsr	a_cmosinc				;A -> CMOS,X++)
7124   FDAA 20 32       			bra	fn_ret				;dex,dex,tsta,rts.
7125   FDAC             
7126   FDAC 5F          fn_pricec		clrb	
7127   FDAD             			begin
7127   FDAD             
7128   FDAD             				begin
7128   FDAD             
7129   FDAD CE 01 AD    					ldx	#adj_pricecontrol			;Standard/Custom Pricing Control
7130   FDB0 BD FD A3    					jsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
7131   FDB3 C6 99       					ldab	#$99
7132   FDB5 81 09       					cmpa	#$09
7133   FDB7             				csend					;Custom Pricing = 09?
7133   FDB7             
7133   FDB7             
7133   FDB7~            				csend					;Custom Pricing = 09?
7133   FDB7~            				csend					;Custom Pricing = 09?
7133   FDB7             
7133   FDB7 24 F4       
7133   FDB9             
7133   FDB9~            				csend					;Custom Pricing = 09?
7133   FDB9~            				csend					;Custom Pricing = 09?
7133   FDB9             
7134   FDB9 97 4F       				staa	score_p1_b0+3			;Player 1 Display
7135   FDBB 16          				tab	
7136   FDBC             				ifne
7136   FDBC             
7136   FDBC 27 FE       
7137   FDBE BD EF 0F    					jsr	loadpricing
7138   FDC1             				endif
7138   FDC1             
7138   FDC1             
7138   FDC1             
7138   FDC1             
7138   FDC1             
7138   FDC1~            				endif
7138   FDC1~            				endif
7138   FDC1             
7138   FDC1~            				endif
7138   FDC1~            				endif
7138   FDC1             
7138   FDBD             
7138   FDBD 03          
7138   FDBE             
7138   FDBE             
7138   FDBE~            				endif
7138   FDBE~            				endif
7138   FDBE~            				endif
7138   FDBE             
7138   FDC1             
7138   FDC1~            				endif
7138   FDC1~            				endif
7138   FDC1             
7139   FDC1 BD FD 1F    				jsr	b_135
7140   FDC4             			loopend
7140   FDC4             
7140   FDC4             
7140   FDC4~            			loopend
7140   FDC4~            			loopend
7140   FDC4             
7140   FDC4 20 E7       
7140   FDC6             
7140   FDC6~            			loopend
7140   FDC6~            			loopend
7140   FDC6             
7141   FDC6             
7142   FDC6 CE 01 AF    fn_prices		ldx	#cmos_leftcoinmult		;Left Coin Slot Multiplier
7143   FDC9 C0 14       			subb	#$14
7144   FDCB 58          			aslb	
7145   FDCC BD EE 8C    			jsr	xplusb				;X = X + B)
7146   FDCF 8D 0A       			bsr	cmos_a				;CMOS, X -> A )
7147   FDD1 97 4F       			staa	score_p1_b0+3			;Player 1 Display
7148   FDD3 B6 01 AE    			ldaa	adj_pricecontrol+1		;Standard/Custom Pricing Control LSD
7149   FDD6 84 0F       			anda	#$0F
7150   FDD8 27 0B       			beq	fn_cdtbtn
7151   FDDA 39          			rts 
7152   FDDB             
7153   FDDB BD EE 92    cmos_a		jsr	cmosinc_a				;CMOS,X++ -> A
7154   FDDE 09          fn_ret		dex	
7155   FDDF 09          			dex	
7156   FDE0 4D          			tsta	
7157   FDE1 39          			rts
7158   FDE2             
7159   FDE2 CE 01 AB    fn_credit		ldx	#adj_max_credits			;RAM Pointer Base
7160   FDE5 5F          fn_cdtbtn		clrb
7161   FDE6             			begin
7161   FDE6             
7162   FDE6 8D BB       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
7163   FDE8 97 4F       				staa	score_p1_b0+3			;Player 1 Display
7164   FDEA BD FD 1F    				jsr	b_135
7165   FDED             			loopend
7165   FDED             
7165   FDED             
7165   FDED~            			loopend
7165   FDED~            			loopend
7165   FDED             
7165   FDED 20 F7       
7165   FDEF             
7165   FDEF~            			loopend
7165   FDEF~            			loopend
7165   FDEF             
7166   FDEF             
7167   FDEF CE 01 8B    fn_adj		ldx	#adj_matchenable			;RAM Pointer Base
7168   FDF2 C0 1A       			subb	#$1A
7169   FDF4 58          			aslb	
7170   FDF5 BD EE 8C    			jsr	xplusb				;X = X + B)
7171   FDF8 20 EB       			bra	fn_cdtbtn
7172   FDFA             			
7173   FDFA CE 01 70    fn_command		ldx	#aud_command			;RAM Pointer Base
7174   FDFD 20 E6       			bra	fn_cdtbtn
7175   FDFF             
7176   FDFF             ;****************************************************
7177   FDFF             ;* Main Display Test Routine - Cycles all score 
7178   FDFF             ;*                             displays through 0-9
7179   FDFF             ;****************************************************			
7180   FDFF             st_display		begin
7180   FDFF             
7181   FDFF 4F          				clra
7182   FE00             				begin	
7182   FE00             
7183   FE00             					begin
7183   FE00             
7184   FE00 CE 00 4C    						ldx	#score_p1_b0
7185   FE03 C6 14       						ldab	#$14
7186   FE05 BD F8 A9    						jsr	write_range				;RAM $38-$5B = A: Clear all Displays
7187   FE08 36          						psha
7188   FE09 85 01       						bita	#$01
7189   FE0B             						ifne
7189   FE0B             
7189   FE0B 27 FE       
7190   FE0D 86 CF       							ldaa	#$CF
7191   FE0F             						else
7191   FE0F             
7191   FE0F             
7191   FE0F             
7191   FE0F             
7191   FE0C             
7191   FE0C             
7191   FE0C             
7191   FE0C~            						else
7191   FE0C~            						else
7191   FE0C~            						else
7191   FE0C~            						else
7191   FE0C             
7191   FE0C~            						else
7191   FE0C~            						else
7191   FE0C~            						else
7191   FE0C~            						else
7191   FE0C             
7191   FE0C             
7191   FE0C 04          
7191   FE0F             
7191   FE0F 20 FE       
7191   FE11             
7191   FE11             
7191   FE11             
7191   FE11~            						else
7191   FE11~            						else
7191   FE11~            						else
7191   FE11~            						else
7191   FE11~            						else
7191   FE11             
7191   FE11~            						else
7191   FE11~            						else
7191   FE11             
7191   FE11~            						else
7191   FE11~            						else
7191   FE11             
7192   FE11 86 2C       							ldaa	#$2C
7193   FE13             						endif
7193   FE13             
7193   FE13             
7193   FE13             
7193   FE13             
7193   FE13             
7193   FE13~            						endif
7193   FE13~            						endif
7193   FE13             
7193   FE13~            						endif
7193   FE13~            						endif
7193   FE13             
7193   FE10             
7193   FE10 02          
7193   FE11             
7193   FE11             
7193   FE11~            						endif
7193   FE11~            						endif
7193   FE11~            						endif
7193   FE11             
7193   FE13             
7193   FE13~            						endif
7193   FE13~            						endif
7193   FE13             
7194   FE13 C6 0C       						ldab	#$0C
7195   FE15 CE 00 60    						ldx	#alpha_b0
7196   FE18 BD F8 A9    						jsr	write_range
7197   FE1B 32          						pula
7198   FE1C             						SLEEP($18)
7198   FE1C BD E9 7C    
7198   FE1F 18          
7199   FE20 BD FC 81    						jsr	do_aumd				;Check Auto/Manual, return + if Manual
7200   FE23             					miend
7200   FE23             
7200   FE23             
7200   FE23~            					miend
7200   FE23~            					miend
7200   FE23             
7200   FE23 2A DB       
7200   FE25             
7200   FE25~            					miend
7200   FE25~            					miend
7200   FE25             
7201   FE25 73 00 7C    					com	comma_flags				;Toggle commas on each count
7202   FE28 8B 11       					adda	#$11					;Add one to each digit
7203   FE2A 19          					daa	
7204   FE2B             				csend
7204   FE2B             
7204   FE2B             
7204   FE2B~            				csend
7204   FE2B~            				csend
7204   FE2B             
7204   FE2B 24 D3       
7204   FE2D             
7204   FE2D~            				csend
7204   FE2D~            				csend
7204   FE2D             
7205   FE2D D6 E9       				ldab	flags_selftest
7206   FE2F             			miend				;Clear All Displays
7206   FE2F             
7206   FE2F             
7206   FE2F~            			miend				;Clear All Displays
7206   FE2F~            			miend				;Clear All Displays
7206   FE2F             
7206   FE2F 2A CE       
7206   FE31             
7206   FE31~            			miend				;Clear All Displays
7206   FE31~            			miend				;Clear All Displays
7206   FE31             
7207   FE31 39          			rts
7208   FE32             
7209   FE32             ;****************************************************
7210   FE32             ;* Main Sound Routine - Toggles each of the sound 
7211   FE32             ;*                      command line individually.
7212   FE32             ;****************************************************			
7213   FE32 BD F9 11    st_sound		jsr	clear_displays			;Blank all Player Displays (buffer 0)
7214   FE35             			begin
7214   FE35             
7215   FE35 4F          				clra	
7216   FE36 97 7C       				staa	comma_flags				;Turn off commas
7217   FE38 97 5C       				staa	p1_ec_b0				;Match/Ball in Play Display = 00
7218   FE3A 86 FE       				ldaa	#$FE					;Initial Sound Command $1E
7219   FE3C             				begin
7219   FE3C             
7220   FE3C             					begin
7220   FE3C             
7221   FE3C C6 FF       						ldab	#$FF
7222   FE3E F7 21 00    						stab	pia_sound_data			;Sound Blanking
7223   FE41             						SLEEP($00)	
7223   FE41 BD E9 7C    
7223   FE44 00          
7224   FE45 B7 21 00    						staa	pia_sound_data			;Commands.. $1E,$1D,$1B,$17,$0F
7225   FE48 BD E9 7C    						jsr	addthread				;Delay $40 IRQ's
7226   FE4B 40          						.db	$40
7227   FE4C BD FC 81    						jsr	do_aumd				;Either repeat same sound or move on to next
7228   FE4F             					miend
7228   FE4F             
7228   FE4F             
7228   FE4F~            					miend
7228   FE4F~            					miend
7228   FE4F             
7228   FE4F 2A EB       
7228   FE51             
7228   FE51~            					miend
7228   FE51~            					miend
7228   FE51             
7229   FE51 7C 00 5C    					inc	p1_ec_b0				;Increment Match/Ball in Play Display
7230   FE54 48          					asla	
7231   FE55 4C          					inca	
7232   FE56             				plend
7232   FE56             
7232   FE56             
7232   FE56~            				plend
7232   FE56~            				plend
7232   FE56             
7232   FE56 2B E4       
7232   FE58             
7232   FE58~            				plend
7232   FE58~            				plend
7232   FE58             
7233   FE58 D6 E9       				ldab	flags_selftest
7234   FE5A             			miend					;Start Over
7234   FE5A             
7234   FE5A             
7234   FE5A~            			miend					;Start Over
7234   FE5A~            			miend					;Start Over
7234   FE5A             
7234   FE5A 2A D9       
7234   FE5C             
7234   FE5C~            			miend					;Start Over
7234   FE5C~            			miend					;Start Over
7234   FE5C             
7235   FE5C 39          			rts
7236   FE5D             
7237   FE5D             ;****************************************************
7238   FE5D             ;* Main Lamp Routine - Flashes all lamps 
7239   FE5D             ;****************************************************			
7240   FE5D C6 AA       st_lamp		ldab	#$AA
7241   FE5F D7 5C       			stab	p1_ec_b0				;Match/Ball in Play Display Buffer 0
7242   FE61 D7 0F       			stab	test_lamptimer
7243   FE63             			begin
7243   FE63             
7244   FE63             				begin
7244   FE63             
7245   FE63 96 10       					ldaa	lampbuffer0
7246   FE65 43          					coma	
7247   FE66 CE 00 10    					ldx	#lampbuffer0
7248   FE69 C6 0C       					ldab	#$0C
7249   FE6B BD F8 A9    					jsr	write_range				;Store A from $0010-0017
7250   FE6E BD E9 7C    					jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
7251   FE71 1B          					.db	$1B
7252   FE72 7A 00 0F    					dec  	test_lamptimer
7253   FE75             				eqend
7253   FE75             
7253   FE75             
7253   FE75~            				eqend
7253   FE75~            				eqend
7253   FE75             
7253   FE75 26 EC       
7253   FE77             
7253   FE77~            				eqend
7253   FE77~            				eqend
7253   FE77             
7254   FE77 D6 E9       				ldab  flags_selftest			;Auto-Cycle??
7255   FE79             			miend
7255   FE79             
7255   FE79             
7255   FE79~            			miend
7255   FE79~            			miend
7255   FE79             
7255   FE79 2A E8       
7255   FE7B             
7255   FE7B~            			miend
7255   FE7B~            			miend
7255   FE7B             
7256   FE7B 39          			rts 
7257   FE7C             
7258   FE7C             ;****************************************************
7259   FE7C             ;* Auto-Cycle Routine - This is the timing thread to
7260   FE7C             ;*                      allow each test routine to 
7261   FE7C             ;*                      repeat indefinitely.
7262   FE7C             ;****************************************************			
7263   FE7C BD FC AA    st_autocycle	jsr  	st_init
7264   FE7F 5A          			decb 
7265   FE80 D7 E9       			stab  flags_selftest
7266   FE82             			begin
7266   FE82             
7267   FE82 BD FD FF    				jsr  	st_display    		;Clear All Displays
7268   FE85 7F 00 5E    				clr  	p2_ec_b0
7269   FE88 8D A8       				bsr  	st_sound
7270   FE8A 7C 00 5E    				inc  	p2_ec_b0
7271   FE8D 8D CE       				bsr  	st_lamp
7272   FE8F 7C 00 5E    				inc  	p2_ec_b0
7273   FE92 8D 08       				bsr  	st_solenoid
7274   FE94 CE 01 4A    				ldx  	#aud_autocycles		;Audit: Auto-Cycles
7275   FE97 BD F7 E7    				jsr  	ptrx_plus_1 		;Add 1 to data at X
7276   FE9A             			loopend
7276   FE9A             
7276   FE9A             
7276   FE9A~            			loopend
7276   FE9A~            			loopend
7276   FE9A             
7276   FE9A 20 E6       
7276   FE9C             
7276   FE9C~            			loopend
7276   FE9C~            			loopend
7276   FE9C             
7277   FE9C             
7278   FE9C             ;****************************************************
7279   FE9C             ;* Main Solenoid Routine - Steps through each solenoid 
7280   FE9C             ;****************************************************			
7281   FE9C 86 F9       st_solenoid		ldaa	#$F9
7282   FE9E BD EA 83    			jsr	solbuf
7283   FEA1             			begin
7283   FEA1             
7284   FEA1 C6 01       				ldab  #$01
7285   FEA3 D7 5C       				stab 	p1_ec_b0	 
7286   FEA5 86 20       				ldaa 	#$20
7287   FEA7             				begin
7287   FEA7             
7288   FEA7             					begin
7288   FEA7             
7289   FEA7 85 08       						bita	#$08
7290   FEA9             						ifne
7290   FEA9             
7290   FEA9 27 FE       
7291   FEAB 8D 1F       							bsr   solenoid_wait
7292   FEAD             						else
7292   FEAD             
7292   FEAD             
7292   FEAD             
7292   FEAD             
7292   FEAA             
7292   FEAA             
7292   FEAA             
7292   FEAA~            						else
7292   FEAA~            						else
7292   FEAA~            						else
7292   FEAA~            						else
7292   FEAA             
7292   FEAA~            						else
7292   FEAA~            						else
7292   FEAA~            						else
7292   FEAA~            						else
7292   FEAA             
7292   FEAA             
7292   FEAA 04          
7292   FEAD             
7292   FEAD 20 FE       
7292   FEAF             
7292   FEAF             
7292   FEAF             
7292   FEAF~            						else
7292   FEAF~            						else
7292   FEAF~            						else
7292   FEAF~            						else
7292   FEAF~            						else
7292   FEAF             
7292   FEAF~            						else
7292   FEAF~            						else
7292   FEAF             
7292   FEAF~            						else
7292   FEAF~            						else
7292   FEAF             
7293   FEAF BD EA 83    							jsr  	solbuf			;Turn On Outhole Solenoid
7294   FEB2             							SLEEP($20)
7294   FEB2 BD E9 7C    
7294   FEB5 20          
7295   FEB6             							
7296   FEB6             						endif
7296   FEB6             
7296   FEB6             
7296   FEB6             
7296   FEB6             
7296   FEB6             
7296   FEB6~            						endif
7296   FEB6~            						endif
7296   FEB6             
7296   FEB6~            						endif
7296   FEB6~            						endif
7296   FEB6             
7296   FEAE             
7296   FEAE 07          
7296   FEAF             
7296   FEAF             
7296   FEAF~            						endif
7296   FEAF~            						endif
7296   FEAF~            						endif
7296   FEAF             
7296   FEB6             
7296   FEB6~            						endif
7296   FEB6~            						endif
7296   FEB6             
7297   FEB6             						SLEEP($20)
7297   FEB6 BD E9 7C    
7297   FEB9 20          
7298   FEBA BD FC 81    						jsr  	do_aumd			;AUMD: + if Manual-Down
7299   FEBD             					miend
7299   FEBD             
7299   FEBD             
7299   FEBD~            					miend
7299   FEBD~            					miend
7299   FEBD             
7299   FEBD 2A E8       
7299   FEBF             
7299   FEBF~            					miend
7299   FEBF~            					miend
7299   FEBF             
7300   FEBF 4C          					inca
7301   FEC0 7C 00 5C    					inc	p1_ec_b0
7302   FEC3 81 09       					cmpa	#$09
7303   FEC5             				eqend
7303   FEC5             
7303   FEC5             
7303   FEC5~            				eqend
7303   FEC5~            				eqend
7303   FEC5             
7303   FEC5 26 E0       
7303   FEC7             
7303   FEC7~            				eqend
7303   FEC7~            				eqend
7303   FEC7             
7304   FEC7 D6 E9       				ldab  flags_selftest			;Auto-Cycle??
7305   FEC9             			miend
7305   FEC9             
7305   FEC9             
7305   FEC9~            			miend
7305   FEC9~            			miend
7305   FEC9             
7305   FEC9 2A D6       
7305   FECB             
7305   FECB~            			miend
7305   FECB~            			miend
7305   FECB             
7306   FECB 39          			rts  
7307   FECC             
7308   FECC             solenoid_wait
7309   FECC             			begin
7309   FECC             
7310   FECC D6 B2       				ldab   solenoid_counter
7311   FECE             			eqend
7311   FECE             
7311   FECE             
7311   FECE~            			eqend
7311   FECE~            			eqend
7311   FECE             
7311   FECE 26 FC       
7311   FED0             
7311   FED0~            			eqend
7311   FED0~            			eqend
7311   FED0             
7312   FED0 86 08       			ldaa   #08
7313   FED2 C6 0E       			ldab   #0E
7314   FED4 37          			pshb  
7315   FED5 7E EA B1    			jmp   set_sol_counter
7316   FED8             
7317   FED8             ;****************************************************
7318   FED8             ;* Main Switch Routine - Scans for closed switches
7319   FED8             ;****************************************************			
7320   FED8             st_switch		begin
7320   FED8             
7321   FED8 86 FF       				ldaa	#$FF
7322   FEDA 97 5C       				staa  p1_ec_b0
7323   FEDC             				SLEEP($00)
7323   FEDC BD E9 7C    
7323   FEDF 00          
7324   FEE0 B6 D0 4D    				ldaa 	gr_lastswitch		;Game ROM: Last Switch Used
7325   FEE3 4A          				deca 
7326   FEE4 36          st_swnext			psha
7327   FEE5 FE D0 51    				ldx  	gr_switchtable_ptr
7328   FEE8 C6 03       				ldab	#$03
7329   FEEA             				begin
7329   FEEA             
7330   FEEA 4A          					deca					;Switchtable entries are 3 bytes each
7331   FEEB 2B 05       					bmi	st_dosw		
7332   FEED BD EE 8C    					jsr	xplusb
7333   FEF0             				loopend
7333   FEF0             
7333   FEF0             
7333   FEF0~            				loopend
7333   FEF0~            				loopend
7333   FEF0             
7333   FEF0 20 F8       
7333   FEF2             
7333   FEF2~            				loopend
7333   FEF2~            				loopend
7333   FEF2             
7334   FEF2 A6 00       st_dosw			ldaa	$00,X
7335   FEF4 84 10       				anda	#$10
7336   FEF6 97 00       				staa	vm_reg_a
7337   FEF8 32          				pula
7338   FEF9 CE 00 85    				ldx	#switch_masked
7339   FEFC BD F2 12    				jsr  	unpack_byte    		;Unpack Switch
7340   FEFF 7D 00 00    				tst	vm_reg_a
7341   FF02             				ifeq
7341   FF02             
7341   FF02 26 FE       
7342   FF04 E5 00       					bitb 	$00,X
7343   FF06 26 18       					bne	st_swe
7344   FF08             				else
7344   FF08             
7344   FF08             
7344   FF08             
7344   FF08             
7344   FF03             
7344   FF03             
7344   FF03             
7344   FF03~            				else
7344   FF03~            				else
7344   FF03~            				else
7344   FF03~            				else
7344   FF03             
7344   FF03~            				else
7344   FF03~            				else
7344   FF03~            				else
7344   FF03~            				else
7344   FF03             
7344   FF03             
7344   FF03 06          
7344   FF08             
7344   FF08 20 FE       
7344   FF0A             
7344   FF0A             
7344   FF0A             
7344   FF0A~            				else
7344   FF0A~            				else
7344   FF0A~            				else
7344   FF0A~            				else
7344   FF0A~            				else
7344   FF0A             
7344   FF0A~            				else
7344   FF0A~            				else
7344   FF0A             
7344   FF0A~            				else
7344   FF0A~            				else
7344   FF0A             
7345   FF0A E5 00       					bitb 	$00,X
7346   FF0C 27 12       					beq   st_swe
7347   FF0E             				endif
7347   FF0E             
7347   FF0E             
7347   FF0E             
7347   FF0E             
7347   FF0E             
7347   FF0E~            				endif
7347   FF0E~            				endif
7347   FF0E             
7347   FF0E~            				endif
7347   FF0E~            				endif
7347   FF0E             
7347   FF09             
7347   FF09 04          
7347   FF0A             
7347   FF0A             
7347   FF0A~            				endif
7347   FF0A~            				endif
7347   FF0A~            				endif
7347   FF0A             
7347   FF0E             
7347   FF0E~            				endif
7347   FF0E~            				endif
7347   FF0E             
7348   FF0E 36          				psha  
7349   FF0F 4C          				inca  
7350   FF10 C6 01       				ldab  #01
7351   FF12 BD F8 80    				jsr   divide_ab
7352   FF15 97 5C       				staa   p1_ec_b0
7353   FF17 4F          				clra  
7354   FF18 BD EC 3B    				jsr   isnd_once
7355   FF1B 32          				pula  
7356   FF1C             				SLEEP($40)
7356   FF1C BD E9 7C    
7356   FF1F 40          
7357   FF20 4A          st_swe			deca  
7358   FF21             			plend
7358   FF21             
7358   FF21             
7358   FF21~            			plend
7358   FF21~            			plend
7358   FF21             
7358   FF21 2B B5       
7358   FF23             
7358   FF23~            			plend
7358   FF23~            			plend
7358   FF23             
7359   FF23 20 BF       			bra 	st_swnext
7360   FF25             
7361   FF25             ;**********************************************************************************
7362   FF25             ;* NMI Routines - This section of code is run only when the 
7363   FF25             ;*                diagnostic switch on the CPU board is pressed.
7364   FF25             ;*                It will test the hardware and report any errors
7365   FF25             ;*                via the LED display on the CPU board. If all tests
7366   FF25             ;*                are passed, the LED display will show '0' and
7367   FF25             ;*                the code jumps to the normal power-up routines.
7368   FF25             ;*
7369   FF25             ;* Errors are as Follows:
7370   FF25             ;*
7371   FF25             ;*      0 - Test Passed
7372   FF25             ;*      1 - IC13 RAM Fault (Most Significant Nybble)
7373   FF25             ;*      2 - IC16 RAM Fault (Least Significant Nybble)
7374   FF25             ;*      3 - IC17 ROM 2 Fault (Location $F000-$FFFF)
7375   FF25             ;*      4 - IC14 ROM 1 Fault (Location $E000-$EFFF)
7376   FF25             ;*      5 - IC20 ROM 0 Fault (Location $D000-$DFFF)
7377   FF25             ;*      6 - Not Used
7378   FF25             ;*      7 - Not Used
7379   FF25             ;*      8 - IC19 CMOS RAM Fault or Memory Protect Failure
7380   FF25             ;*      9 - Coin Door Closed or Memory Protect Failure or IC19 CMOS RAM Fault
7381   FF25             ;**********************************************************************************
7382   FF25 C6 20       rambad		ldab	#$20
7383   FF27 A8 00       			eora	$00,X
7384   FF29 84 F0       			anda	#$F0
7385   FF2B 27 52       			beq	diag_showerror
7386   FF2D C6 10       			ldab	#$10
7387   FF2F 20 4E       			bra	diag_showerror
7388   FF31             
7389   FF31             ;*******************************************************************
7390   FF31             ;* Main NMI Entry 
7391   FF31             ;*******************************************************************
7392   FF31 0F          diag			sei	
7393   FF32 CE 28 00    			ldx	#pia_disp_digit_data
7394   FF35 6F 01       			clr	$01,X
7395   FF37 86 F0       			ldaa	#$F0
7396   FF39 A7 00       			staa	$00,X
7397   FF3B C6 3C       			ldab	#$3C
7398   FF3D E7 01       			stab	$01,X
7399   FF3F A7 00       			staa	$00,X			;Blank Diagnostic Display
7400   FF41 4F          			clra	
7401   FF42             			begin
7401   FF42             
7402   FF42 CE 10 00    				ldx	#$1000
7403   FF45             				begin					;\
7403   FF45             
7404   FF45 A7 00       					staa	$00,X			;|
7405   FF47 08          					inx				;| Clear RAM $1000-13FF
7406   FF48 8C 14 00    					cpx	#$1400		;|
7407   FF4B             				eqend					;/
7407   FF4B             
7407   FF4B             
7407   FF4B~            				eqend					;/
7407   FF4B~            				eqend					;/
7407   FF4B             
7407   FF4B 26 F8       
7407   FF4D             
7407   FF4D~            				eqend					;/
7407   FF4D~            				eqend					;/
7407   FF4D             
7408   FF4D 35          				txs	
7409   FF4E             				begin
7409   FF4E             
7410   FF4E 09          					dex	
7411   FF4F A1 00       					cmpa	$00,X			;Test
7412   FF51 26 D2       					bne	rambad		;Bad RAM
7413   FF53 8C 10 00    					cpx	#$1000
7414   FF56             				eqend
7414   FF56             
7414   FF56             
7414   FF56~            				eqend
7414   FF56~            				eqend
7414   FF56             
7414   FF56 26 F6       
7414   FF58             
7414   FF58~            				eqend
7414   FF58~            				eqend
7414   FF58             
7415   FF58 43          				coma					;Test with #$FF
7416   FF59             			eqend
7416   FF59             
7416   FF59             
7416   FF59~            			eqend
7416   FF59~            			eqend
7416   FF59             
7416   FF59 26 E7       
7416   FF5B             
7416   FF5B~            			eqend
7416   FF5B~            			eqend
7416   FF5B             
7417   FF5B 86 03       			ldaa	#$03
7418   FF5D 97 BA       			staa	temp2
7419   FF5F C6 20       			ldab	#$20					;Begin ROM Test
7420   FF61 CE FF FF    			ldx	#$FFFF
7421   FF64             			begin
7421   FF64             
7422   FF64 DF B8       				stx	temp1
7423   FF66 CB 10       				addb	#$10
7424   FF68 7A 00 BA    				dec	temp2
7425   FF6B 2B 18       				bmi	diag_ramtest
7426   FF6D 96 B8       				ldaa	temp1					
7427   FF6F 80 10       				suba	#$10
7428   FF71 97 B8       				staa	temp1					;Set our stopping address
7429   FF73 4F          				clra	
7430   FF74             				begin
7430   FF74             
7431   FF74 A9 00       					adca	$00,X					;Add with carry!!
7432   FF76 09          					dex	
7433   FF77 9C B8       					cpx	temp1
7434   FF79             				eqend
7434   FF79             
7434   FF79             
7434   FF79~            				eqend
7434   FF79~            				eqend
7434   FF79             
7434   FF79 26 F9       
7434   FF7B             
7434   FF7B~            				eqend
7434   FF7B~            				eqend
7434   FF7B             
7435   FF7B 81 80       				cmpa	#$80					;Done changing data?
7436   FF7D             			neend						;CSUM must be = #00
7436   FF7D             
7436   FF7D             
7436   FF7D~            			neend						;CSUM must be = #00
7436   FF7D~            			neend						;CSUM must be = #00
7436   FF7D             
7436   FF7D 27 E5       
7436   FF7F             
7436   FF7F~            			neend						;CSUM must be = #00
7436   FF7F~            			neend						;CSUM must be = #00
7436   FF7F             
7437   FF7F             			;fall through on error, B contains error code
7438   FF7F             			
7439   FF7F 53          diag_showerror	comb	
7440   FF80 F7 28 00    			stab	pia_disp_digit_data		;Dump Error to Display
7441   FF83 20 FE       tightloop		bra	tightloop				;Stay Here forever
7442   FF85             
7443   FF85             
7444   FF85             ;Define a single CMOS location to write test
7445   FF85             cmos_byteloc	=	$01BB
7446   FF85             
7447   FF85 C6 90       diag_ramtest	ldab	#$90					;Begin CMOS RAM Test
7448   FF87 B6 01 BB    			ldaa	cmos_byteloc			;Test a single byte
7449   FF8A 7C 01 BB    			inc	cmos_byteloc
7450   FF8D B1 01 BB    			cmpa	cmos_byteloc
7451   FF90 27 ED       			beq	diag_showerror			;Wrong
7452   FF92 C6 80       			ldab	#$80					;Backup CMOS data now
7453   FF94 CE 12 00    			ldx	#$1200
7454   FF97 DF B8       			stx	temp1
7455   FF99 CE 01 00    			ldx	#cmos_base
7456   FF9C 8D 2F       			bsr	block_copy					;Copy Block from X -> temp1, Length = B
7457   FF9E 86 F1       			ldaa	#$F1
7458   FFA0 97 BC       			staa	temp3
7459   FFA2             			begin				
7459   FFA2             
7460   FFA2 CE 01 00    				ldx	#cmos_base
7461   FFA5 96 BC       				ldaa	temp3
7462   FFA7             				begin
7462   FFA7             
7463   FFA7 A7 00       					staa	$00,X
7464   FFA9 8D 43       					bsr	adjust_a
7465   FFAB             				eqend
7465   FFAB             
7465   FFAB             
7465   FFAB~            				eqend
7465   FFAB~            				eqend
7465   FFAB             
7465   FFAB 26 FA       
7465   FFAD             
7465   FFAD~            				eqend
7465   FFAD~            				eqend
7465   FFAD             
7466   FFAD CE 01 00    				ldx	#cmos_base
7467   FFB0 96 BC       				ldaa	temp3
7468   FFB2             				begin
7468   FFB2             
7469   FFB2 16          					tab	
7470   FFB3 E8 00       					eorb	$00,X
7471   FFB5 C4 0F       					andb	#$0F
7472   FFB7 26 0E       					bne	cmos_error
7473   FFB9 8D 33       					bsr	adjust_a
7474   FFBB             				eqend
7474   FFBB             
7474   FFBB             
7474   FFBB~            				eqend
7474   FFBB~            				eqend
7474   FFBB             
7474   FFBB 26 F5       
7474   FFBD             
7474   FFBD~            				eqend
7474   FFBD~            				eqend
7474   FFBD             
7475   FFBD 7C 00 BC    				inc	temp3
7476   FFC0             			eqend
7476   FFC0             
7476   FFC0             
7476   FFC0~            			eqend
7476   FFC0~            			eqend
7476   FFC0             
7476   FFC0 26 E0       
7476   FFC2             
7476   FFC2~            			eqend
7476   FFC2~            			eqend
7476   FFC2             
7477   FFC2 8D 1D       			bsr	cmos_restore			;Put back original CMOS data
7478   FFC4 7E E7 30    			jmp	reset					;Goto Reset Entry, Everything OK.
7479   FFC7             
7480   FFC7 8D 18       cmos_error		bsr	cmos_restore
7481   FFC9 C6 80       			ldab	#$80
7482   FFCB 20 B2       			bra	diag_showerror
7483   FFCD             			
7484   FFCD 36          block_copy		psha	
7485   FFCE             			begin
7485   FFCE             
7486   FFCE BD EE 92    				jsr	cmosinc_a				;CMOS,X++ -> A
7487   FFD1 DF BA       				stx	temp2
7488   FFD3 DE B8       				ldx	temp1
7489   FFD5 A7 00       				staa	$00,X
7490   FFD7 08          				inx	
7491   FFD8 DF B8       				stx	temp1
7492   FFDA DE BA       				ldx	temp2
7493   FFDC 5A          				decb	
7494   FFDD             			eqend
7494   FFDD             
7494   FFDD             
7494   FFDD~            			eqend
7494   FFDD~            			eqend
7494   FFDD             
7494   FFDD 26 EF       
7494   FFDF             
7494   FFDF~            			eqend
7494   FFDF~            			eqend
7494   FFDF             
7495   FFDF 32          			pula	
7496   FFE0 39          			rts  
7497   FFE1             
7498   FFE1 CE 01 00    cmos_restore	ldx	#$0100
7499   FFE4 DF B8       			stx	temp1
7500   FFE6 CE 12 00    			ldx	#$1200
7501   FFE9 C6 80       			ldab	#$80
7502   FFEB 7E EF 23    			jmp	copyblock2				;Transfer Data Block at X to temp1, Length B
7503   FFEE             			
7504   FFEE 4C          adjust_a		inca	
7505   FFEF             			ifeq
7505   FFEF             
7505   FFEF 26 FE       
7506   FFF1 86 F1       				ldaa	#$F1
7507   FFF3             			endif
7507   FFF3             
7507   FFF3             
7507   FFF3             
7507   FFF3             
7507   FFF3             
7507   FFF3~            			endif
7507   FFF3~            			endif
7507   FFF3             
7507   FFF3~            			endif
7507   FFF3~            			endif
7507   FFF3             
7507   FFF0             
7507   FFF0 02          
7507   FFF1             
7507   FFF1             
7507   FFF1~            			endif
7507   FFF1~            			endif
7507   FFF1~            			endif
7507   FFF1             
7507   FFF3             
7507   FFF3~            			endif
7507   FFF3~            			endif
7507   FFF3             
7508   FFF3 08          			inx
7509   FFF4 8C 02 00    			cpx	#$0200
7510   FFF7 39          			rts	
7511   FFF8             
7512   FFF8             ;*******************************************
7513   FFF8             ;* CPU Startup/Interrupt Vectors go here.
7514   FFF8             ;*******************************************
7515   FFF8             	
7516   FFF8 D0 D0       irq_entry		.dw gr_irq_entry	;Goes to Game ROM
7517   FFFA D0 D3       swi_entry		.dw gr_swi_entry	;Goes to Game ROM 
7518   FFFC FF 31       nmi_entry		.dw diag
7519   FFFE E7 30       res_entry		.dw reset
7520   10000             
7521   10000             	.end
7522   10000             
tasm: Number of errors = 0
