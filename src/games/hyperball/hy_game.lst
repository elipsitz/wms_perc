0001   0000             ;--------------------------------------------------------------
0002   0000             ;Hyperball Game ROM Disassembly
0003   0000             ;Dumped by Hydasm ©2000-2013 Jess M. Askey
0004   0000             ;--------------------------------------------------------------
0005   0000             ; Errors/Warnings Generated:
0006   0000             ;    Unlabeled immediate address at E6F9: ($13AB)
0007   0000             ;    Unlabeled immediate address at E334: ($5501)
0008   0000             ;    Unlabeled extended address at E32B: ($13B6)
0009   0000             ;    Unlabeled immediate address at E31E: ($13A9)
0010   0000             ;    Unlabeled immediate address at E311: ($13AA)
0011   0000             ;    Unlabeled extended address at E30E: ($13A9)
0012   0000             ;    Unlabeled extended address at E2EC: ($13B6)
0013   0000             ;    Unlabeled extended address at E2E0: ($13B6)
0014   0000             ;    Unlabeled extended address at E2A5: ($13B7)
0015   0000             ;    Unlabeled extended address at E29E: ($13B7)
0016   0000             ;    Unlabeled extended address at E28E: ($13B7)
0017   0000             ;    Unlabeled extended address at E287: ($13B7)
0018   0000             ;    Unlabeled extended address at E275: ($13B7)
0019   0000             ;    Unlabeled extended address at E269: ($13B6)
0020   0000             ;    Unlabeled extended address at E25C: ($13B7)
0021   0000             ;    Unlabeled extended address at E237: ($13B8)
0022   0000             ;    Unlabeled extended address at E234: ($13B7)
0023   0000             ;    Unlabeled extended address at E22F: ($13B8)
0024   0000             ;    Unlabeled extended address at E22A: ($13B6)
0025   0000             ;    Unlabeled extended address at E1A3: ($13B7)
0026   0000             ;    Unlabeled extended address at E190: ($13B7)
0027   0000             ;    Unlabeled immediate address at D95C: ($13AD)
0028   0000             ;    Unlabeled immediate address at D8D6: ($13AD)
0029   0000             ;    Unlabeled immediate address at D162: ($0303)
0030   0000             ;--------------------------------------------------
0031   0000             
0032   0000             #include  "../../68logic.asm"	;680X logic definitions      
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin		     logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ y	*+5
0050+  0000             #defcont						\ jmp	var2_
0051+  0000             #defcont					\#else
0052+  0000             #defcont						\ x	var2_
0053+  0000             #defcont					\#endif
0054+  0000             #defcont				\#else
0055+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0056+  0000             #defcont				\#endif
0057+  0000             
0058+  0000             ;*******************************************************************
0059+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0060+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0061+  0000             ;*             at that address to point to the current address.    *
0062+  0000             ;*******************************************************************
0063+  0000             #define logic_end \var1_ .set *
0064+  0000             #defcont		\ .pop var3_, var4_
0065+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0066+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0067+  0000             #defcont  				\var2_ .set var1_-var4_-2
0068+  0000             #defcont				\#if var2_+127 < 0
0069+  0000             #defcont					\ .error "Branch Range < -127"
0070+  0000             #defcont				\#else
0071+  0000             #defcont					\#if var2_-128 > 0
0072+  0000             #defcont						\ .error "Branch Range > 128"
0073+  0000             #defcont					\#else
0074+  0000             #defcont    					\ .org var4_+1
0075+  0000             #defcont						\ .byte var2_
0076+  0000             #defcont					\#endif
0077+  0000             #defcont				\#endif
0078+  0000             #defcont			\#else	
0079+  0000             #defcont    			\ .org  var4_-2	
0080+  0000             #defcont				\ .word var1_
0081+  0000             #defcont			\#endif
0082+  0000             #defcont			\ .org	var1_
0083+  0000             #defcont		\#else
0084+  0000             #defcont			\.error "Wrong Endtype for IF block"
0085+  0000             #defcont		\#endif
0086+  0000             
0087+  0000             ;*******************************************************************
0088+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0089+  0000             ;*             (ie. with additional logic as defined below). The   *
0090+  0000             ;*             ELSE block will resove how to terminate the current *
0091+  0000             ;*             code and then set the owning IF statement's data    *
0092+  0000             ;*             byte.                                               *
0093+  0000             ;*******************************************************************
0094+  0000             #define	logic_else(x,y)	\var1_ .set $
0095+  0000             #defcont		\ .pop var3_, var4_
0096+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0097+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0098+  0000             #defcont				\ .org var4_+1
0099+  0000             #defcont	      		\#if x==0
0100+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0101+  0000             #defcont					\#if var2_+127 < 0
0102+  0000             #defcont						\ .org var1_
0103+  0000             #defcont						\.push $+3, 1
0104+  0000             #defcont						\ jmp $
0105+  0000             #defcont					\#else
0106+  0000             #defcont						\#if var2_-128>0
0107+  0000             #defcont							\ .org var1_
0108+  0000             #defcont							\.push $+3, 1
0109+  0000             #defcont							\ jmp $
0110+  0000             #defcont						\#else
0111+  0000             #defcont							\.push var1_, 0
0112+  0000             #defcont							\ .byte var2_
0113+  0000             #defcont							\ .org var1_
0114+  0000             #defcont							\ BRA $
0115+  0000             #defcont							\ .org var1_+2
0116+  0000             #defcont						\#endif
0117+  0000             #defcont					\#endif
0118+  0000             #defcont				\#else
0119+  0000             #defcont					\ .byte var1_-var4_-2+2
0120+  0000             #defcont					\ .org var1_
0121+  0000             #defcont					\.push $, 0
0122+  0000             #defcont					\ y $		
0123+  0000             #defcont				\#endif
0124+  0000             #defcont			\#else
0125+  0000             #defcont				\.error "Duplicate ELSE Statement"
0126+  0000             #defcont			\#endif
0127+  0000             #defcont		\#else
0128+  0000             #defcont			\ .error "Misplaced Else"
0129+  0000             #defcont		\#endif
0130+  0000             
0131+  0000             
0132+  0000             ;*******************************************************************
0133+  0000             ;* Defines how to use the various logic macros defined above.      *
0134+  0000             ;*******************************************************************
0135+  0000             #define	ifeq	logic_ifxx(BNE)		
0136+  0000             #define	ifne	logic_ifxx(BEQ)
0137+  0000             #define	ifpl	logic_ifxx(BMI)
0138+  0000             #define	ifhi	logic_ifxx(BLO)
0139+  0000             #define	ifmi	logic_ifxx(BPL)
0140+  0000             #define	iflo	logic_ifxx(BHI)
0141+  0000             #define	ifcs	logic_ifxx(BCC)
0142+  0000             #define	ifcc	logic_ifxx(BCS)
0143+  0000             #define 	ifvc	logic_ifxx(BVS)
0144+  0000             #define 	ifvs	logic_ifxx(BVC)
0145+  0000             #define	ifge	logic_ifxx(BLS)
0146+  0000             #define	ifgt	logic_ifxx(BLE)
0147+  0000             #define	iflt 	logic_ifxx(BGE)
0148+  0000             #define	ifle	logic_ifxx(BGT)
0149+  0000             
0150+  0000             
0151+  0000             #define	else  	logic_else(0,0)
0152+  0000             #define	else_eq	logic_else(1,BEQ)
0153+  0000             #define	else_ne	logic_else(1,BNE)
0154+  0000             #define	else_pl	logic_else(1,BPL)
0155+  0000             #define	else_mi	logic_else(1,BMI)
0156+  0000             #define	else_cc	logic_else(1,BCC)
0157+  0000             #define	else_cs	logic_else(1,BCS)
0158+  0000             
0159+  0000             #define 	endif		logic_end
0160+  0000             
0161+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0162+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0163+  0000             #define	plend	logic_loopend(BMI,BPL)
0164+  0000             #define	miend	logic_loopend(BPL,BMI)
0165+  0000             #define	csend	logic_loopend(BCC,BCS)
0166+  0000             #define	ccend	logic_loopend(BCS,BCC)
0167+  0000             #define	vcend	logic_loopend(BVS,BVC)
0168+  0000             #define	vsend	logic_loopend(BVC,BVS)
0169+  0000             
0170+  0000             #define	loopend	logic_loopend(BRA,BRA)
0171+  0000             
0172+  0000             #define	lsb(x)	x&$FF
0173+  0000             
0174+  0000             #define	msb(x)	(x>>8)&$FF0033   0000             #include  "hy_wvm.asm"		;Virtual Machine Instruction Definitions       
0001+  0000             ;*****************************************************************************
0002+  0000             ;* Williams Hyperball Virtual Machine Macro Definitions
0003+  0000             ;*****************************************************************************
0004+  0000             ;* Code copyright Williams Electronic Games Inc.
0005+  0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  0000             ;* For use with TASMx Assembler
0007+  0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  0000             ;* for more information.
0009+  0000             ;* You may redistribute this file as long as this header remains intact.
0010+  0000             ;*****************************************************************************
0011+  0000             
0012+  0000             .module wml7
0013+  0000             .msfirst
0014+  0000             
0015+  0000             wml1_       .equ  $00
0016+  0000             wml2_       .equ  $00
0017+  0000             wml3_       .equ  $00
0018+  0000             wml4_       .equ  $00
0019+  0000             wml5_       .equ  $00
0020+  0000             wml6_       .equ  $00
0021+  0000             
0022+  0000             #define     FLAG_WML_IF       $10
0023+  0000             #define     FLAG_WML_ELSE     $20
0024+  0000             #define	FLAG_WML_BEGIN 	$40
0025+  0000             #define     FLAG_WML_EXE      $80
0026+  0000             
0027+  0000             ;********************************************************
0028+  0000             ;* First Define the Thread Structure used in the virtual 
0029+  0000             ;* machine linked list.
0030+  0000             ;********************************************************
0031+  0000             ;* Next:	This is the pointer to the next thread in 
0032+  0000             ;* 		the linked list. The VM requires this to 
0033+  0000             ;*		move about the list of threads. This is 
0034+  0000             ;* 		set by the VM thread handlers and does not
0035+  0000             ;*          need to be manually fiddled with by the 
0036+  0000             ;*          game program as it is automatic.
0037+  0000             ;*
0038+  0000             ;* Timer:	This is a byte timer (0-255) that holds the 
0039+  0000             ;*          number of IRQ's counts required before the 
0040+  0000             ;*          thread is executed. This is set by the 
0041+  0000             ;*          programmer for delays between executions.	
0042+  0000             ;*
0043+  0000             ;* Vars:	When a thread is created, the originating
0044+  0000             ;*          program may push up to 8 additional bytes
0045+  0000             ;* 		of data onto the stack which will then be
0046+  0000             ;*          placed into these 8 byte holders.
0047+  0000             ;*
0048+  0000             ;* PC:	This is the address of the program entry 
0049+  0000             ;*          point that will be executed when the thread
0050+  0000             ;*       	timer expires.
0051+  0000             ;*
0052+  0000             ;* ID:	The thread ID is a number that identifies 
0053+  0000             ;* 		the thread type. The ID defintions are all
0054+  0000             ;*		decided by the programmer except for thread
0055+  0000             ;*		ID #06 which is a general 'end-of-ball' terminated
0056+  0000             ;*		thread. Because the VM can destroy groups of 
0057+  0000             ;* 		threads by ID and branch on existence of threads
0058+  0000             ;*    	with certain ID's, this is a very important
0059+  0000             ;*		design consideration. See the programming 
0060+  0000             ;*  		manual for more information.
0061+  0000             ;*	
0062+  0000             ;* RegA:	This holds the value that was contained in 
0063+  0000             ;*		the CPU register A when the Thread was created.
0064+  0000             ;*
0065+  0000             ;* RegB:	Similar to above, holds the value of CPU reg B.
0066+  0000             ;*
0067+  0000             ;* RegX:	Again, holds the value of the X register upon
0068+  0000             ;*		thread creation.
0069+  0000             ;*
0070+  0000             ;************************************************************
0071+  0000             
0072+  0000             threadobj_next	.equ	$00
0073+  0000             threadobj_timer	.equ	$02
0074+  0000             threadobj_var1	.equ	$03
0075+  0000             threadobj_var2	.equ	$04
0076+  0000             threadobj_var3	.equ	$05
0077+  0000             threadobj_var4	.equ	$06
0078+  0000             threadobj_var5	.equ	$07
0079+  0000             threadobj_var6	.equ	$09
0080+  0000             threadobj_var7	.equ	$09
0081+  0000             threadobj_var8	.equ	$0a
0082+  0000             threadobj_pc	.equ	$0b
0083+  0000             threadobj_id	.equ	$0d
0084+  0000             threadobj_rega	.equ	$0e
0085+  0000             threadobj_regb	.equ	$0f
0086+  0000             threadobj_regx	.equ	$10
0087+  0000             
0088+  0000             ;********************************************************
0089+  0000             ;* Now define some standard RAM locations etc...
0090+  0000             ;********************************************************
0091+  0000             rega	.equ	$00
0092+  0000             regb	.equ	$01
0093+  0000             
0094+  0000             ;********************************************************
0095+  0000             ;* Switch Table Equates
0096+  0000             ;********************************************************
0097+  0000             #define	switchentry(a,b)	.db a /.dw b
0098+  0000             
0099+  0000             sf_wml7	.equ	$80
0100+  0000             sf_code 	.equ 	$00
0101+  0000             sf_tilt	.equ	$40
0102+  0000             sf_gameover	.equ	$20
0103+  0000             sf_enabled	.equ	$10
0104+  0000             sf_instant	.equ	$08
0105+  0000             
0106+  0000             ;********************************************************
0107+  0000             ;* Test for our current execution mode, CODE or WML7
0108+  0000             ;* If we think the programmer has their code wrong, 
0109+  0000             ;* then throw an error.
0110+  0000             ;********************************************************
0111+  0000             ;_MODECPU_         .equ  $00
0112+  0000             ;_MODEWML_         .equ  $80
0113+  0000             ;_CURRENTMODE_     .equ  _MODECPU_
0114+  0000             ;
0115+  0000             ;#define     _SETMODECPU_      \_CURRENTMODE_     .set  _MODECPU_
0116+  0000             ;#define     _SETMODEWML_      \_CURRENTMODE_     .set  _MODEWML_
0117+  0000             ;
0118+  0000             ;#define     _CHECKWML_        \#if _CURRENTMODE_ != _MODEWML_
0119+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect WML codes now, are you sure your code is structured properly?"
0120+  0000             ;#defcont                      \#endif
0121+  0000             ;
0122+  0000             ;#define     _CHECKCPU_        \#if _CURRENTMODE_ != _MODECPU_
0123+  0000             ;#defcont                      \     .error "WML7: Execution mode does not expect CPU codes now, are you sure your code is structured properly?"
0124+  0000             ;#defcont                      \#endif
0125+  0000             
0126+  0000             ;********************************************************
0127+  0000             ;* Define our Level 7 macros.
0128+  0000             ;********************************************************
0129+  0000             
0130+  0000             #define 	PC100_	\.db $00	
0131+  0000             #define 	NOP_		\.db $01	
0132+  0000             #define	MRTS_		\.db $02
0133+  0000             #define	KILL_		\.db $03	
0134+  0000             #define 	CPUX_		\.db $04
0135+  0000             #define	SPEC_		\.db $05	
0136+  0000             #define	EB_		\.db $06	
0137+  0000             
0138+  0000             ;********************************************************
0139+  0000             ;* Lamp Macro Definition: These take care of turning lamps
0140+  0000             ;*                        on/off and doing the basic lamp
0141+  0000             ;*                        effects.
0142+  0000             ;********************************************************
0143+  0000             #define	BITX_(x,a)		      \.db x,a
0144+  0000             #define	BITX_(x,a,b)		\.db x,((a&$7F)+$80),b
0145+  0000             #define	BITX_(x,a,b,c)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),c
0146+  0000             #define	BITX_(x,a,b,c,d)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0147+  0000             #define	BITX_(x,a,b,c,d,e)	\.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0148+  0000             #define	BITX_(x,a,b,c,d,e,f)    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
0149+  0000             #define	BITX_(x,a,b,c,d,e,f,g)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
0150+  0000             #define	BITX_(x,a,b,c,d,e,f,g,h)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7f)+$80),h
0151+  0000             #define	BITX_(x,a,b,c,d,e,f,g,h,i)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7f)+$80),((h&$7f)+$80),i
0152+  0000             
0153+  0000             ;*****************************************************************
0154+  0000             ;* Macros 1X_
0155+  0000             ;*****************************************************************
0156+  0000             #define	BITON_(a)		      \BITX_($10,a)
0157+  0000             #define	BITON_(a,b)		      \BITX_($10,a,b)
0158+  0000             #define	BITON_(a,b,c)	      \BITX_($10,a,b,c)
0159+  0000             #define	BITON_(a,b,c,d)	      \BITX_($10,a,b,c,d)
0160+  0000             #define	BITON_(a,b,c,d,e)	      \BITX_($10,a,b,c,d,e)
0161+  0000             #define	BITON_(a,b,c,d,e,f)     \BITX_($10,a,b,c,d,e,f)
0162+  0000             #define	BITON_(a,b,c,d,e,f,g)   \BITX_($10,a,b,c,d,e,f,g)
0163+  0000             
0164+  0000             #define	BITOFF_(a)		      \BITX_($11,a)            
0165+  0000             #define	BITOFF_(a,b)		\BITX_($11,a,b)          
0166+  0000             #define	BITOFF_(a,b,c)	      \BITX_($11,a,b,c)        
0167+  0000             #define	BITOFF_(a,b,c,d)	      \BITX_($11,a,b,c,d)      
0168+  0000             #define	BITOFF_(a,b,c,d,e)	\BITX_($11,a,b,c,d,e)    
0169+  0000             #define	BITOFF_(a,b,c,d,e,f)    \BITX_($11,a,b,c,d,e,f)  
0170+  0000             #define	BITOFF_(a,b,c,d,e,f,g)  \BITX_($11,a,b,c,d,e,f,g)
0171+  0000                                                 
0172+  0000             #define	BITINV_(a)		      \BITX_($12,a)            
0173+  0000             #define	BITINV_(a,b)		\BITX_($12,a,b)          
0174+  0000             #define	BITINV_(a,b,c)	      \BITX_($12,a,b,c)        
0175+  0000             #define	BITINV_(a,b,c,d)	      \BITX_($12,a,b,c,d)      
0176+  0000             #define	BITINV_(a,b,c,d,e)	\BITX_($12,a,b,c,d,e)    
0177+  0000             #define	BITINV_(a,b,c,d,e,f)    \BITX_($12,a,b,c,d,e,f)  
0178+  0000             #define	BITINV_(a,b,c,d,e,f,g)  \BITX_($12,a,b,c,d,e,f,g)
0179+  0000             
0180+  0000             #define	BITFL_(a)		      \BITX_($13,a)            
0181+  0000             #define	BITFL_(a,b)			\BITX_($13,a,b)          
0182+  0000             #define	BITFL_(a,b,c)	      \BITX_($13,a,b,c)        
0183+  0000             #define	BITFL_(a,b,c,d)	      \BITX_($13,a,b,c,d)      
0184+  0000             #define	BITFL_(a,b,c,d,e)		\BITX_($13,a,b,c,d,e)    
0185+  0000             #define	BITFL_(a,b,c,d,e,f)    	\BITX_($13,a,b,c,d,e,f)  
0186+  0000             #define	BITFL_(a,b,c,d,e,f,g)  	\BITX_($13,a,b,c,d,e,f,g)
0187+  0000              
0188+  0000             #define	BITONP_(a)		      \BITX_($14,a)            
0189+  0000             #define	BITONP_(a,b)		\BITX_($14,a,b)          
0190+  0000             #define	BITONP_(a,b,c)	      \BITX_($14,a,b,c)        
0191+  0000             #define	BITONP_(a,b,c,d)	      \BITX_($14,a,b,c,d)      
0192+  0000             #define	BITONP_(a,b,c,d,e)	\BITX_($14,a,b,c,d,e)    
0193+  0000             #define	BITONP_(a,b,c,d,e,f)    \BITX_($14,a,b,c,d,e,f)  
0194+  0000             #define	BITONP_(a,b,c,d,e,f,g)  \BITX_($14,a,b,c,d,e,f,g)
0195+  0000             
0196+  0000             #define	BITOFFP_(a)		      \BITX_($15,a)            
0197+  0000             #define	BITOFFP_(a,b)		\BITX_($15,a,b)          
0198+  0000             #define	BITOFFP_(a,b,c)	      \BITX_($15,a,b,c)        
0199+  0000             #define	BITOFFP_(a,b,c,d)	      \BITX_($15,a,b,c,d)      
0200+  0000             #define	BITOFFP_(a,b,c,d,e)	\BITX_($15,a,b,c,d,e)    
0201+  0000             #define	BITOFFP_(a,b,c,d,e,f)   \BITX_($15,a,b,c,d,e,f)  
0202+  0000             #define	BITOFFP_(a,b,c,d,e,f,g) \BITX_($15,a,b,c,d,e,f,g)
0203+  0000             
0204+  0000             #define	BITINVP_(a)		      \BITX_($16,a)            
0205+  0000             #define	BITINVP_(a,b)		\BITX_($16,a,b)          
0206+  0000             #define	BITINVP_(a,b,c)	      \BITX_($16,a,b,c)        
0207+  0000             #define	BITINVP_(a,b,c,d)	      \BITX_($16,a,b,c,d)      
0208+  0000             #define	BITINVP_(a,b,c,d,e)	\BITX_($16,a,b,c,d,e)    
0209+  0000             #define	BITINVP_(a,b,c,d,e,f)   \BITX_($16,a,b,c,d,e,f)  
0210+  0000             #define	BITINVP_(a,b,c,d,e,f,g) \BITX_($16,a,b,c,d,e,f,g)
0211+  0000             
0212+  0000             #define	BITFLP_(a)		      \BITX_($17,a)            
0213+  0000             #define	BITFLP_(a,b)		\BITX_($17,a,b)          
0214+  0000             #define	BITFLP_(a,b,c)	      \BITX_($17,a,b,c)        
0215+  0000             #define	BITFLP_(a,b,c,d)	      \BITX_($17,a,b,c,d)      
0216+  0000             #define	BITFLP_(a,b,c,d,e)	\BITX_($17,a,b,c,d,e)    
0217+  0000             #define	BITFLP_(a,b,c,d,e,f)   	\BITX_($17,a,b,c,d,e,f)  
0218+  0000             #define	BITFLP_(a,b,c,d,e,f,g) 	\BITX_($17,a,b,c,d,e,f,g)
0219+  0000             
0220+  0000             ;************************
0221+  0000             ;* Lamp/Bit Effects
0222+  0000             ;************************
0223+  0000             #define	RSET0_(a)		      \BITX_($18,a)            
0224+  0000             #define	RSET0_(a,b)			\BITX_($18,a,b)          
0225+  0000             #define	RSET0_(a,b,c)	      \BITX_($18,a,b,c)        
0226+  0000             #define	RSET0_(a,b,c,d)	      \BITX_($18,a,b,c,d)      
0227+  0000             #define	RSET0_(a,b,c,d,e)		\BITX_($18,a,b,c,d,e)    
0228+  0000             #define	RSET0_(a,b,c,d,e,f)   	\BITX_($18,a,b,c,d,e,f)  
0229+  0000             #define	RSET0_(a,b,c,d,e,f,g) 	\BITX_($18,a,b,c,d,e,f,g)
0230+  0000             
0231+  0000             #define	RCLR0_(a)		      \BITX_($19,a)            
0232+  0000             #define	RCLR0_(a,b)			\BITX_($19,a,b)          
0233+  0000             #define	RCLR0_(a,b,c)	      \BITX_($19,a,b,c)        
0234+  0000             #define	RCLR0_(a,b,c,d)	      \BITX_($19,a,b,c,d)      
0235+  0000             #define	RCLR0_(a,b,c,d,e)		\BITX_($19,a,b,c,d,e)    
0236+  0000             #define	RCLR0_(a,b,c,d,e,f)   	\BITX_($19,a,b,c,d,e,f)  
0237+  0000             #define	RCLR0_(a,b,c,d,e,f,g) 	\BITX_($19,a,b,c,d,e,f,g)
0238+  0000             
0239+  0000             #define	RSET1R0_(a)		      \BITX_($1A,a)            
0240+  0000             #define	RSET1R0_(a,b)		\BITX_($1A,a,b)          
0241+  0000             #define	RSET1R0_(a,b,c)	      \BITX_($1A,a,b,c)        
0242+  0000             #define	RSET1R0_(a,b,c,d)	      \BITX_($1A,a,b,c,d)      
0243+  0000             #define	RSET1R0_(a,b,c,d,e)	\BITX_($1A,a,b,c,d,e)    
0244+  0000             #define	RSET1R0_(a,b,c,d,e,f)   \BITX_($1A,a,b,c,d,e,f)  
0245+  0000             #define	RSET1R0_(a,b,c,d,e,f,g) \BITX_($1A,a,b,c,d,e,f,g)
0246+  0000             
0247+  0000             #define	RSET1RC0_(a)		\BITX_($1B,a)            
0248+  0000             #define	RSET1RC0_(a,b)		\BITX_($1B,a,b)          
0249+  0000             #define	RSET1RC0_(a,b,c)	      \BITX_($1B,a,b,c)        
0250+  0000             #define	RSET1RC0_(a,b,c,d)	\BITX_($1B,a,b,c,d)      
0251+  0000             #define	RSET1RC0_(a,b,c,d,e)	\BITX_($1B,a,b,c,d,e)    
0252+  0000             #define	RSET1RC0_(a,b,c,d,e,f)  \BITX_($1B,a,b,c,d,e,f)  
0253+  0000             #define	RSET1RC0_(a,b,c,d,e,f,g) \BITX_($1B,a,b,c,d,e,f,g)
0254+  0000             
0255+  0000             #define	RCLR1L0_(a)		      \BITX_($1C,a)            
0256+  0000             #define	RCLR1L0_(a,b)		\BITX_($1C,a,b)          
0257+  0000             #define	RCLR1L0_(a,b,c)	      \BITX_($1C,a,b,c)        
0258+  0000             #define	RCLR1L0_(a,b,c,d)	      \BITX_($1C,a,b,c,d)      
0259+  0000             #define	RCLR1L0_(a,b,c,d,e)	\BITX_($1C,a,b,c,d,e)    
0260+  0000             #define	RCLR1L0_(a,b,c,d,e,f)   \BITX_($1C,a,b,c,d,e,f)  
0261+  0000             #define	RCLR1L0_(a,b,c,d,e,f,g) \BITX_($1C,a,b,c,d,e,f,g)
0262+  0000             
0263+  0000             #define	RROL0_(a)		      \BITX_($1D,a)            
0264+  0000             #define	RROL0_(a,b)			\BITX_($1D,a,b)          
0265+  0000             #define	RROL0_(a,b,c)	      \BITX_($1D,a,b,c)        
0266+  0000             #define	RROL0_(a,b,c,d)	      \BITX_($1D,a,b,c,d)      
0267+  0000             #define	RROL0_(a,b,c,d,e)		\BITX_($1D,a,b,c,d,e)    
0268+  0000             #define	RROL0_(a,b,c,d,e,f)   	\BITX_($1D,a,b,c,d,e,f)  
0269+  0000             #define	RROL0_(a,b,c,d,e,f,g) 	\BITX_($1D,a,b,c,d,e,f,g)
0270+  0000             #define	RROL0_(a,b,c,d,e,f,g,h,i) 	\BITX_($1D,a,b,c,d,e,f,g,h,i)
0271+  0000             
0272+  0000             #define	RROR0_(a)		      \BITX_($1E,a)            
0273+  0000             #define	RROR0_(a,b)			\BITX_($1E,a,b)          
0274+  0000             #define	RROR0_(a,b,c)	      \BITX_($1E,a,b,c)        
0275+  0000             #define	RROR0_(a,b,c,d)	      \BITX_($1E,a,b,c,d)      
0276+  0000             #define	RROR0_(a,b,c,d,e)		\BITX_($1E,a,b,c,d,e)    
0277+  0000             #define	RROR0_(a,b,c,d,e,f)   	\BITX_($1E,a,b,c,d,e,f)  
0278+  0000             #define	RROR0_(a,b,c,d,e,f,g) 	\BITX_($1E,a,b,c,d,e,f,g)
0279+  0000             
0280+  0000             #define	RINV0_(a)		      \BITX_($1F,a)            
0281+  0000             #define	RINV0_(a,b)			\BITX_($1F,a,b)          
0282+  0000             #define	RINV0_(a,b,c)	      \BITX_($1F,a,b,c)        
0283+  0000             #define	RINV0_(a,b,c,d)	      \BITX_($1F,a,b,c,d)      
0284+  0000             #define	RINV0_(a,b,c,d,e)		\BITX_($1F,a,b,c,d,e)    
0285+  0000             #define	RINV0_(a,b,c,d,e,f)   	\BITX_($1F,a,b,c,d,e,f)  
0286+  0000             #define	RINV0_(a,b,c,d,e,f,g) 	\BITX_($1F,a,b,c,d,e,f,g)
0287+  0000             
0288+  0000             ;*****************************************************************
0289+  0000             ;* Macros 2X_
0290+  0000             ;*****************************************************************
0291+  0000             
0292+  0000             #define	BITON2_(a)		      	\BITX_($20,a)
0293+  0000             #define	BITON2_(a,b)			\BITX_($20,a,b)
0294+  0000             #define	BITON2_(a,b,c)	      	\BITX_($20,a,b,c)
0295+  0000             #define	BITON2_(a,b,c,d)	      	\BITX_($20,a,b,c,d)
0296+  0000             #define	BITON2_(a,b,c,d,e)		\BITX_($20,a,b,c,d,e)
0297+  0000             #define	BITON2_(a,b,c,d,e,f)    	\BITX_($20,a,b,c,d,e,f)
0298+  0000             #define	BITON2_(a,b,c,d,e,f,g)  	\BITX_($20,a,b,c,d,e,f,g)
0299+  0000             
0300+  0000             #define	BITOFF2_(a)		      	\BITX_($21,a)            
0301+  0000             #define	BITOFF2_(a,b)			\BITX_($21,a,b)          
0302+  0000             #define	BITOFF2_(a,b,c)	      	\BITX_($21,a,b,c)        
0303+  0000             #define	BITOFF2_(a,b,c,d)	      	\BITX_($21,a,b,c,d)      
0304+  0000             #define	BITOFF2_(a,b,c,d,e)		\BITX_($21,a,b,c,d,e)    
0305+  0000             #define	BITOFF2_(a,b,c,d,e,f)   	\BITX_($21,a,b,c,d,e,f)  
0306+  0000             #define	BITOFF2_(a,b,c,d,e,f,g) 	\BITX_($21,a,b,c,d,e,f,g)
0307+  0000                                                 
0308+  0000             #define	BITINV2_(a)		      	\BITX_($22,a)            
0309+  0000             #define	BITINV2_(a,b)			\BITX_($22,a,b)          
0310+  0000             #define	BITINV2_(a,b,c)	      	\BITX_($22,a,b,c)        
0311+  0000             #define	BITINV2_(a,b,c,d)	      	\BITX_($22,a,b,c,d)      
0312+  0000             #define	BITINV2_(a,b,c,d,e)		\BITX_($22,a,b,c,d,e)    
0313+  0000             #define	BITINV2_(a,b,c,d,e,f)   	\BITX_($22,a,b,c,d,e,f)  
0314+  0000             #define	BITINV2_(a,b,c,d,e,f,g) 	\BITX_($22,a,b,c,d,e,f,g)
0315+  0000             
0316+  0000             #define	BITFL2_(a)		      	\BITX_($23,a)            
0317+  0000             #define	BITFL2_(a,b)			\BITX_($23,a,b)          
0318+  0000             #define	BITFL2_(a,b,c)	      	\BITX_($23,a,b,c)        
0319+  0000             #define	BITFL2_(a,b,c,d)	      	\BITX_($23,a,b,c,d)      
0320+  0000             #define	BITFL2_(a,b,c,d,e)		\BITX_($23,a,b,c,d,e)    
0321+  0000             #define	BITFL2_(a,b,c,d,e,f)    	\BITX_($23,a,b,c,d,e,f)  
0322+  0000             #define	BITFL2_(a,b,c,d,e,f,g)  	\BITX_($23,a,b,c,d,e,f,g)
0323+  0000              
0324+  0000             #define	BITONP2_(a)		      	\BITX_($24,a)            
0325+  0000             #define	BITONP2_(a,b)			\BITX_($24,a,b)          
0326+  0000             #define	BITONP2_(a,b,c)	      	\BITX_($24,a,b,c)        
0327+  0000             #define	BITONP2_(a,b,c,d)	      	\BITX_($24,a,b,c,d)      
0328+  0000             #define	BITONP2_(a,b,c,d,e)		\BITX_($24,a,b,c,d,e)    
0329+  0000             #define	BITONP2_(a,b,c,d,e,f)   	\BITX_($24,a,b,c,d,e,f)  
0330+  0000             #define	BITONP2_(a,b,c,d,e,f,g) 	\BITX_($24,a,b,c,d,e,f,g)
0331+  0000             
0332+  0000             #define	BITOFFP2_(a)			\BITX_($25,a)            
0333+  0000             #define	BITOFFP2_(a,b)			\BITX_($25,a,b)          
0334+  0000             #define	BITOFFP2_(a,b,c)	      	\BITX_($25,a,b,c)        
0335+  0000             #define	BITOFFP2_(a,b,c,d)		\BITX_($25,a,b,c,d)      
0336+  0000             #define	BITOFFP2_(a,b,c,d,e)		\BITX_($25,a,b,c,d,e)    
0337+  0000             #define	BITOFFP2_(a,b,c,d,e,f)  	\BITX_($25,a,b,c,d,e,f)  
0338+  0000             #define	BITOFFP2_(a,b,c,d,e,f,g)	\BITX_($25,a,b,c,d,e,f,g)
0339+  0000             
0340+  0000             #define	BITINVP2_(a)			\BITX_($26,a)            
0341+  0000             #define	BITINVP2_(a,b)			\BITX_($26,a,b)          
0342+  0000             #define	BITINVP2_(a,b,c)	      	\BITX_($26,a,b,c)        
0343+  0000             #define	BITINVP2_(a,b,c,d)		\BITX_($26,a,b,c,d)      
0344+  0000             #define	BITINVP2_(a,b,c,d,e)		\BITX_($26,a,b,c,d,e)    
0345+  0000             #define	BITINVP2_(a,b,c,d,e,f)   	\BITX_($26,a,b,c,d,e,f)  
0346+  0000             #define	BITINVP2_(a,b,c,d,e,f,g) 	\BITX_($26,a,b,c,d,e,f,g)
0347+  0000             
0348+  0000             #define	BITFLP2_(a)		      	\BITX_($27,a)            
0349+  0000             #define	BITFLP2_(a,b)			\BITX_($27,a,b)          
0350+  0000             #define	BITFLP2_(a,b,c)	      	\BITX_($27,a,b,c)        
0351+  0000             #define	BITFLP2_(a,b,c,d)	      	\BITX_($27,a,b,c,d)      
0352+  0000             #define	BITFLP2_(a,b,c,d,e)		\BITX_($27,a,b,c,d,e)    
0353+  0000             #define	BITFLP2_(a,b,c,d,e,f)   	\BITX_($27,a,b,c,d,e,f)  
0354+  0000             #define	BITFLP2_(a,b,c,d,e,f,g) 	\BITX_($27,a,b,c,d,e,f,g)
0355+  0000             
0356+  0000             ;************************
0357+  0000             ;* Lamp/Bit Effects
0358+  0000             ;************************
0359+  0000             #define	RSET1_(a)		      \BITX_($28,a)            
0360+  0000             #define	RSET1_(a,b)			\BITX_($28,a,b)          
0361+  0000             #define	RSET1_(a,b,c)	      \BITX_($28,a,b,c)        
0362+  0000             #define	RSET1_(a,b,c,d)	      \BITX_($28,a,b,c,d)      
0363+  0000             #define	RSET1_(a,b,c,d,e)		\BITX_($28,a,b,c,d,e)    
0364+  0000             #define	RSET1_(a,b,c,d,e,f)   	\BITX_($28,a,b,c,d,e,f)  
0365+  0000             #define	RSET1_(a,b,c,d,e,f,g) 	\BITX_($28,a,b,c,d,e,f,g)
0366+  0000             
0367+  0000             #define	RCLR1_(a)		      \BITX_($29,a)            
0368+  0000             #define	RCLR1_(a,b)			\BITX_($29,a,b)          
0369+  0000             #define	RCLR1_(a,b,c)	      \BITX_($29,a,b,c)        
0370+  0000             #define	RCLR1_(a,b,c,d)	      \BITX_($29,a,b,c,d)      
0371+  0000             #define	RCLR1_(a,b,c,d,e)		\BITX_($29,a,b,c,d,e)    
0372+  0000             #define	RCLR1_(a,b,c,d,e,f)   	\BITX_($29,a,b,c,d,e,f)  
0373+  0000             #define	RCLR1_(a,b,c,d,e,f,g) 	\BITX_($29,a,b,c,d,e,f,g)
0374+  0000             
0375+  0000             #define	RSET1R1_(a)		      \BITX_($2A,a)            
0376+  0000             #define	RSET1R1_(a,b)		\BITX_($2A,a,b)          
0377+  0000             #define	RSET1R1_(a,b,c)	      \BITX_($2A,a,b,c)        
0378+  0000             #define	RSET1R1_(a,b,c,d)	      \BITX_($2A,a,b,c,d)      
0379+  0000             #define	RSET1R1_(a,b,c,d,e)	\BITX_($2A,a,b,c,d,e)    
0380+  0000             #define	RSET1R1_(a,b,c,d,e,f)   \BITX_($2A,a,b,c,d,e,f)  
0381+  0000             #define	RSET1R1_(a,b,c,d,e,f,g) \BITX_($2A,a,b,c,d,e,f,g)
0382+  0000             
0383+  0000             #define	RSET1RC1_(a)		\BITX_($2B,a)            
0384+  0000             #define	RSET1RC1_(a,b)		\BITX_($2B,a,b)          
0385+  0000             #define	RSET1RC1_(a,b,c)	      \BITX_($2B,a,b,c)        
0386+  0000             #define	RSET1RC1_(a,b,c,d)	\BITX_($2B,a,b,c,d)      
0387+  0000             #define	RSET1RC1_(a,b,c,d,e)	\BITX_($2B,a,b,c,d,e)    
0388+  0000             #define	RSET1RC1_(a,b,c,d,e,f)  \BITX_($2B,a,b,c,d,e,f)  
0389+  0000             #define	RSET1RC1_(a,b,c,d,e,f,g) \BITX_($2B,a,b,c,d,e,f,g)
0390+  0000             
0391+  0000             #define	RCLR1L1_(a)		      \BITX_($2C,a)            
0392+  0000             #define	RCLR1L1_(a,b)		\BITX_($2C,a,b)          
0393+  0000             #define	RCLR1L1_(a,b,c)	      \BITX_($2C,a,b,c)        
0394+  0000             #define	RCLR1L1_(a,b,c,d)	      \BITX_($2C,a,b,c,d)      
0395+  0000             #define	RCLR1L1_(a,b,c,d,e)	\BITX_($2C,a,b,c,d,e)    
0396+  0000             #define	RCLR1L1_(a,b,c,d,e,f)   \BITX_($2C,a,b,c,d,e,f)  
0397+  0000             #define	RCLR1L1_(a,b,c,d,e,f,g) \BITX_($2C,a,b,c,d,e,f,g)
0398+  0000             
0399+  0000             #define	RROL1_(a)		      \BITX_($2D,a)            
0400+  0000             #define	RROL1_(a,b)			\BITX_($2D,a,b)          
0401+  0000             #define	RROL1_(a,b,c)	      \BITX_($2D,a,b,c)        
0402+  0000             #define	RROL1_(a,b,c,d)	      \BITX_($2D,a,b,c,d)      
0403+  0000             #define	RROL1_(a,b,c,d,e)		\BITX_($2D,a,b,c,d,e)    
0404+  0000             #define	RROL1_(a,b,c,d,e,f)   	\BITX_($2D,a,b,c,d,e,f)  
0405+  0000             #define	RROL1_(a,b,c,d,e,f,g) 	\BITX_($2D,a,b,c,d,e,f,g)
0406+  0000             
0407+  0000             #define	RROR1_(a)		      \BITX_($2E,a)            
0408+  0000             #define	RROR1_(a,b)			\BITX_($2E,a,b)          
0409+  0000             #define	RROR1_(a,b,c)	      \BITX_($2E,a,b,c)        
0410+  0000             #define	RROR1_(a,b,c,d)	      \BITX_($2E,a,b,c,d)      
0411+  0000             #define	RROR1_(a,b,c,d,e)		\BITX_($2E,a,b,c,d,e)    
0412+  0000             #define	RROR1_(a,b,c,d,e,f)   	\BITX_($2E,a,b,c,d,e,f)  
0413+  0000             #define	RROR1_(a,b,c,d,e,f,g) 	\BITX_($2E,a,b,c,d,e,f,g)
0414+  0000             
0415+  0000             #define	RINV1_(a)		      \BITX_($2F,a)            
0416+  0000             #define	RINV1_(a,b)			\BITX_($2F,a,b)          
0417+  0000             #define	RINV1_(a,b,c)	      \BITX_($2F,a,b,c)        
0418+  0000             #define	RINV1_(a,b,c,d)	      \BITX_($2F,a,b,c,d)      
0419+  0000             #define	RINV1_(a,b,c,d,e)		\BITX_($2F,a,b,c,d,e)    
0420+  0000             #define	RINV1_(a,b,c,d,e,f)   	\BITX_($2F,a,b,c,d,e,f)  
0421+  0000             #define	RINV1_(a,b,c,d,e,f,g) 	\BITX_($2F,a,b,c,d,e,f,g)
0422+  0000             
0423+  0000             
0424+  0000             ;********************************************************
0425+  0000             ;* Solenoid Macro Definition: Up to 15 Solenoids are Supported
0426+  0000             ;* 
0427+  0000             ;* The macro takes a coded value of the solenoid number 
0428+  0000             ;* and the number of IRQ's to leave the solenoid on.
0429+  0000             ;* You can define the solenoid number plus the time by using
0430+  0000             ;* the equates following this macro definition...
0431+  0000             ;* 
0432+  0000             ;* Example #1:  Turn on Solenoid #1 for 4 IRQ cycles
0433+  0000             ;*
0434+  0000             ;*          sol_1_on    .equ  $00+SOLENOID_ON_4_CYCLES
0435+  0000             ;*          sol_1_off   .equ  $00+SOLENOID_OFF
0436+  0000             ;* 
0437+  0000             ;* Then use the SOL_ macro...
0438+  0000             ;*
0439+  0000             ;*    Turn it on:       SOL_(sol_1_on)
0440+  0000             ;*    Turn it off:      SOL_(sol_1_off)
0441+  0000             ;*
0442+  0000             ;* Example #2:  Turn on Solenoid #15 indefinitely, and Solenoid #6 for 2 IRQ cycles
0443+  0000             ;*
0444+  0000             ;*          sol_15_on   .equ  $0E+SOLENOID_ON_LATCH
0445+  0000             ;*          sol_15_off  .equ  $0E+SOLENOID_OFF
0446+  0000             ;*
0447+  0000             ;*          sol_2_on    .equ  $01+SOLENOID_ON_2_CYCLES
0448+  0000             ;*          sol_2_off   .equ  $01+SOLENOID_OFF
0449+  0000             ;* 
0450+  0000             ;* Then use the SOL_ macro...
0451+  0000             ;*
0452+  0000             ;*    Turn them on:       SOL_(sol_15_on,sol_2_on)
0453+  0000             ;*    Turn them off:      SOL_(sol_15_off,sol_2_off)
0454+  0000             ;********************************************************
0455+  0000             #define	SOL_(a)		                  \.db $31,a
0456+  0000             #define	SOL_(a,b)		                  \.db $32,a,b
0457+  0000             #define 	SOL_(a,b,c)		                  \.db $33,a,b,c
0458+  0000             #define	SOL_(a,b,c,d)	                  \.db $34,a,b,c,d
0459+  0000             #define	SOL_(a,b,c,d,e)	                  \.db $35,a,b,c,d,e
0460+  0000             #define	SOL_(a,b,c,d,e,f)	                  \.db $36,a,b,c,d,e,f
0461+  0000             #define	SOL_(a,b,c,d,e,f,g)	            \.db $37,a,b,c,d,e,f,g
0462+  0000             #define	SOL_(a,b,c,d,e,f,g,h)	            \.db $38,a,b,c,d,e,f,g,h
0463+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i)	            \.db $39,a,b,c,d,e,f,g,h,i
0464+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j)	      \.db $3A,a,b,c,d,e,f,g,h,i,j
0465+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k)	      \.db $3B,a,b,c,d,e,f,g,h,i,j,k
0466+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l)	      \.db $3C,a,b,c,d,e,f,g,h,i,j,k,l
0467+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m)	\.db $3D,a,b,c,d,e,f,g,h,i,j,k,l,m
0468+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n)	\.db $3E,a,b,c,d,e,f,g,h,i,j,k,l,m,n
0469+  0000             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)	\.db $3F,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o
0470+  0000             
0471+  0000             ;********************************************************
0472+  0000             ;* some additional solenoid defines for timing
0473+  0000             ;* Use these in the top of your game definition to specify 
0474+  0000             ;* static lables for each solenoid
0475+  0000             ;********************************************************
0476+  0000             SOLENOID_ON_1_CYCLES       .equ  $10
0477+  0000             SOLENOID_ON_2_CYCLES       .equ  $20
0478+  0000             SOLENOID_ON_3_CYCLES       .equ  $30
0479+  0000             SOLENOID_ON_4_CYCLES       .equ  $40
0480+  0000             SOLENOID_ON_5_CYCLES       .equ  $50
0481+  0000             SOLENOID_ON_6_CYCLES       .equ  $60
0482+  0000             SOLENOID_ON_LATCH          .equ  $70
0483+  0000             SOLENOID_OFF               .equ  $00
0484+  0000             
0485+  0000             ;********************************************************
0486+  0000             ;* Macros 40-43: Static Length, easy
0487+  0000             ;********************************************************
0488+  0000             #define	PTSND_(snd,count,unit)	\.db $40,snd      \ ADDPOINTS_(count,unit)
0489+  0000             
0490+  0000             #define	PTCHIME_(count,unit)	\.db $41    \ ADDPOINTS_(count,unit)
0491+  0000             
0492+  0000             #define	POINTS_(count,unit)	\.db $42    \ ADDPOINTS_(count,unit)
0493+  0000             
0494+  0000             #define	PTSDIG_(count,unit)	\.db $43    \ ADDPOINTS_(count,unit)
0495+  0000             
0496+  0000             #define     ADDPOINTS_(count,unit)  \#if ((unit < 10) & (count <= 32))
0497+  0000             #defcont				      \	.error "Point unit must be multples of 10 and count must be less than 33"
0498+  0000             #defcont				      \#else
0499+  0000             #defcont					      \#if (unit == 10)
0500+  0000             #defcont					      \	.db (((count)<<3)&$F8)+1
0501+  0000             #defcont					      \#else 
0502+  0000             #defcont					      	\#if (unit == 100)
0503+  0000             #defcont						      \	.db (((count)<<3)&$F8)+2
0504+  0000             #defcont						      \#else 
0505+  0000             #defcont							      \#if (unit == 1000)
0506+  0000             #defcont							      \	.db (((count)<<3)&$F8)+3
0507+  0000             #defcont							      \#else 
0508+  0000             #defcont								      \#if (unit == 10000)
0509+  0000             #defcont								      \	.db (((count)<<3)&$F8)+4
0510+  0000             #defcont								      \#else 
0511+  0000             #defcont									      \#if (unit == 100000)
0512+  0000             #defcont									      \	.db (((count)<<3)&$F8)+5
0513+  0000             #defcont									      \#else 
0514+  0000             #defcont									      \	.error "Macros only support points under 1,000,000 points"
0515+  0000             #defcont									      \#endif
0516+  0000             #defcont								      \#endif
0517+  0000             #defcont							      \#endif
0518+  0000             #defcont						      \#endif
0519+  0000             #defcont					      \#endif
0520+  0000             #defcont				      \#endif
0521+  0000             
0522+  0000             ;********************************************************
0523+  0000             ;* Macros 44-4F: Define temporary execution of CPU code.
0524+  0000             ;*               The length of bytes to execute is in 
0525+  0000             ;*               the lower nibble and must be between
0526+  0000             ;*               4-f. Therefore, number is bytes to 
0527+  0000             ;*               execute must be between 2 and 13.
0528+  0000             ;********************************************************
0529+  0000             #define	EXE_(a)		\#if (a>13)|(a<2)
0530+  0000             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0531+  0000             #defcont				\#else
0532+  0000             #defcont				\    .db ($44+a-2)
0533+  0000             #defcont				\#endif
0534+  0000             
0535+  0000             ;********************************************************
0536+  0000             ;* Macros 50-57:
0537+  0000             ;********************************************************
0538+  0000             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0539+  0000             #defcont				\	.db $50,((a*16)+b) 
0540+  0000             #defcont				\#else
0541+  0000             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0542+  0000             #defcont				\#endif
0543+  0000             
0544+  0000             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0545+  0000             #defcont				\	.db $51,((a*16)+b) 
0546+  0000             #defcont				\#else
0547+  0000             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0548+  0000             #defcont				\#endif
0549+  0000             
0550+  0000             #define	PRI_(a)		\.db $52,a
0551+  0000             
0552+  0000             #define	SLEEP_(a)		\#if (a<16)
0553+  0000             #defcont				\	.db ($70+a)
0554+  0000             #defcont				\#else
0555+  0000             #defcont				\	.db $53,a
0556+  0000             #defcont				\#endif
0557+  0000             
0558+  0000             #define	REMTHREAD_(a,b)	\.db $54,a,b
0559+  0000             
0560+  0000             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0561+  0000             
0562+  0000             #define 	JSR_(a)		\.db $56 \.dw a
0563+  0000             #define	JSRD_(a)		\.db $57 \.dw a
0564+  0000             
0565+  0000             ;*******************************************************************
0566+  0000             ;* Branch Macros: 58-5B
0567+  0000             ;*******************************************************************
0568+  0000             #define     IFLOC_(type,vars)    \ .push  *, vars, type        
0569+  0000             
0570+  0000             ;*******************************************************************
0571+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0572+  0000             ;*        an 'XXEND_' statement.                                    *
0573+  0000             ;******************************************************************* 
0574+  0000             #define     BEGIN_	      IFLOC_(FLAG_WML_BEGIN,0)
0575+  0000             
0576+  0000             ;*******************************************************************
0577+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0578+  0000             ;*            pulls the pc location of the beginning of the loop   *
0579+  0000             ;*            and verifies that the 'type' is correct.             *
0580+  0000             ;*******************************************************************
0581+  0000             #define 	LOGIC_LOOPEND_(vars)	\ .pop wml1_, wml2_, wml3_
0582+  0000             #defcont						\wml2_ .set vars
0583+  0000             #defcont						\wml4_ .set *
0584+  0000             #defcont						\#if (wml1_ & FLAG_WML_BEGIN)
0585+  0000             #defcont							\#if ((wml4_-wml3_) <= 127)
0586+  0000             #defcont								\ .org wml4_-1
0587+  0000             #defcont								\ .db wml3_-wml4_
0588+  0000             #defcont								\ .org wml4_
0589+  0000             #defcont							\#else
0590+  0000             #defcont								\ .error "Loop Branch out of Range."
0591+  0000             #defcont							\#endif
0592+  0000             #defcont						\#else
0593+  0000             #defcont							\ .error "Inappropriate End for BEGIN Loop."
0594+  0000             #defcont						\#endif
0595+  0000             
0596+  0000             ;*******************************************************************
0597+  0000             ;* Basic Loop
0598+  0000             ;*******************************************************************
0599+  0000             #define	LOOP_		\ .pop wml1_, wml2_, wml3_ \ JMPR_(wml3_)
0600+  0000             
0601+  0000             ;*******************************************************************
0602+  0000             ;* Conditional Looping
0603+  0000             ;*******************************************************************
0604+  0000             #define	EQEND_(z)						BNER_(z,*+3) \ LOGIC_LOOPEND_(1)		
0605+  0000             #define	EQEND_(z,y)						BNER_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0606+  0000             #define	EQEND_(z,y,x)					BNER_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0607+  0000             #define	EQEND_(z,y,x,w)					BNER_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0608+  0000             #define	EQEND_(z,y,x,w,v)					BNER_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0609+  0000             #define     EQEND_(z,y,x,w,v,u)				BNER_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0610+  0000             #define     EQEND_(z,y,x,w,v,u,t)			     	BNER_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0611+  0000             #define     EQEND_(z,y,x,w,v,u,t,s)     			BNER_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0612+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r)     		BNER_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0613+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q)     		BNER_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0614+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p)     		BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0615+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0616+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0617+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0618+  0000             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0619+  0000             
0620+  0000             #define	NEEND_(z)						BEQR_(z,*+3) \ LOGIC_LOOPEND_(1)		
0621+  0000             #define	NEEND_(z,y)						BEQR_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0622+  0000             #define	NEEND_(z,y,x)					BEQR_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0623+  0000             #define	NEEND_(z,y,x,w)					BEQR_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0624+  0000             #define	NEEND_(z,y,x,w,v)					BEQR_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0625+  0000             #define     NEEND_(z,y,x,w,v,u)				BEQR_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0626+  0000             #define     NEEND_(z,y,x,w,v,u,t)			     	BEQR_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0627+  0000             #define     NEEND_(z,y,x,w,v,u,t,s)     			BEQR_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0628+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r)     		BEQR_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0629+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q)     		BEQR_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0630+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p)     		BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0631+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0632+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0633+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0634+  0000             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0635+  0000             ;*******************************************************************
0636+  0000             ;* IFxxx: These are the standard 'if' statements, they will always  
0637+  0000             ;*        be of type FLAG_WML_IF                                           
0638+  0000             ;*******************************************************************
0639+  0000             #define     IFEQR_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BNER_(z,*+3)     
0640+  0000             #define     IFEQR_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BNER_(z,y,*+3)   
0641+  0000             #define     IFEQR_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BNER_(z,y,x,*+3) 
0642+  0000             #define     IFEQR_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BNER_(z,y,x,w,*+3)   
0643+  0000             #define     IFEQR_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BNER_(z,y,x,w,v,*+3) 
0644+  0000             #define     IFEQR_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BNER_(z,y,x,w,v,u,*+3) 
0645+  0000             #define     IFEQR_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BNER_(z,y,x,w,v,u,t,*+3) 
0646+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BNER_(z,y,x,w,v,u,t,s,*+3) 
0647+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BNER_(z,y,x,w,v,u,t,s,r,*+3)
0648+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BNER_(z,y,x,w,v,u,t,s,r,q,*+3)
0649+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0650+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0651+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0652+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0653+  0000             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0654+  0000             
0655+  0000             #define     IFNER_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BEQR_(z,*+3)     
0656+  0000             #define     IFNER_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BEQR_(z,y,*+3)   
0657+  0000             #define     IFNER_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BEQR_(z,y,x,*+3) 
0658+  0000             #define     IFNER_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BEQR_(z,y,x,w,*+3) 
0659+  0000             #define     IFNER_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BEQR_(z,y,x,w,v,*+3) 
0660+  0000             #define     IFNER_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BEQR_(z,y,x,w,v,u,*+3) 
0661+  0000             #define     IFNER_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BEQR_(z,y,x,w,v,u,t,*+3) 
0662+  0000             #define     IFNER_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BEQR_(z,y,x,w,v,u,t,s,*+3) 
0663+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BEQR_(z,y,x,w,v,u,t,s,r,*+3)
0664+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BEQR_(z,y,x,w,v,u,t,s,r,q,*+3)
0665+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0666+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0667+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0668+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0669+  0000             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0670+  0000             
0671+  0000             #define     ENDIF_ \wml1_ .set *
0672+  0000             #defcont		 \ .pop wml3_, wml5_, wml4_
0673+  0000             #defcont		 \#if (wml3_ & FLAG_WML_BEGIN)==0
0674+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0675+  0000             #defcont  			      \wml2_ .set wml1_-wml4_-wml5_-2
0676+  0000             #defcont			      \#if wml2_+127 < 0
0677+  0000             #defcont				      \ .error "Branch Range < -127"
0678+  0000             #defcont			      \#else
0679+  0000             #defcont				      \#if wml2_-128 > 0
0680+  0000             #defcont					      \ .error "Branch Range > 128"
0681+  0000             #defcont				      \#else
0682+  0000             #defcont    				      \ .org wml4_+wml5_+1
0683+  0000             #defcont					      \ .byte wml2_
0684+  0000             #defcont				      \#endif
0685+  0000             #defcont			      \#endif
0686+  0000             #defcont                \#else
0687+  0000             #defcont                      \ .org  wml4_-2	
0688+  0000             #defcont				\ JMP_(wml1_)
0689+  0000             #defcont                      \ .error "123: Not Tested"
0690+  0000             #defcont                \#endif
0691+  0000             #defcont			\ .org	wml1_
0692+  0000             #defcont		 \#else
0693+  0000             #defcont			\.error "Wrong Endtype for IFXXR_ block"
0694+  0000             #defcont		 \#endif
0695+  0000             
0696+  0000             #define	ELSE_	\wml1_ .set $
0697+  0000             #defcont		\ .pop wml3_, wml5_, wml4_
0698+  0000             #defcont		\#if (wml3_ & FLAG_WML_BEGIN)==0
0699+  0000             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0700+  0000             #defcont				\ .org wml4_+wml5_+1
0701+  0000             #defcont				\wml2_ .set wml1_-wml4_
0702+  0000             #defcont					\#if wml2_+127 < 0
0703+  0000             #defcont						\ .org wml1_
0704+  0000             #defcont						\.push wml1_+3, wml5_, FLAG_WML_ELSE
0705+  0000             #defcont						\ JMP_($)
0706+  0000             #defcont                                  \ .error "(124)ELSE_: Not Tested with long JMP"
0707+  0000             #defcont					\#else
0708+  0000             #defcont						\#if wml2_-128>0
0709+  0000             #defcont							\ .org wml1_
0710+  0000             #defcont							\.push wml1_+3, wml5_, FLAG_WML_ELSE
0711+  0000             #defcont							\ JMP_($)
0712+  0000             #defcont                                  \ .error "(125)ELSE_: Not Tested with long JMP"
0713+  0000             #defcont						\#else
0714+  0000             #defcont							\.push wml1_-wml5_, wml5_, FLAG_WML_IF
0715+  0000             #defcont							\ .byte wml2_-wml5_
0716+  0000             #defcont							\ .org wml1_
0717+  0000             #defcont							\ JMPR_($+1)
0718+  0000             #defcont							\ .org wml1_+2
0719+  0000             #defcont						\#endif
0720+  0000             #defcont					\#endif
0721+  0000             #defcont			\#else
0722+  0000             #defcont				\.error "Duplicate ELSE Statement"
0723+  0000             #defcont			\#endif
0724+  0000             #defcont		\#else
0725+  0000             #defcont			\ .error "Misplaced Else"
0726+  0000             #defcont		\#endif
0727+  0000             
0728+  0000             #define     BEQR_(p1__,ba__)     \#if $+3-ba__ < 128
0729+  0000             #defcont                                 \.db $5A,p1__,ba__-$-3
0730+  0000             #defcont				\#else
0731+  0000             #defcont					\#if ba__-$+3 < 127
0732+  0000             #defcont                                 \.db $5A,p1__,$+3-ba__
0733+  0000             #defcont					\#else
0734+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0735+  0000             #defcont					\#endif
0736+  0000             #defcont				\#endif
0737+  0000             
0738+  0000             #define     BEQR_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0739+  0000             #defcont                                 \.db $5A,p1__,p2__,ba__-$-4
0740+  0000             #defcont				\#else
0741+  0000             #defcont					\#if ba__-$+4 < 127
0742+  0000             #defcont                                 \.db $5A,p1__,p2__,$+4-ba__
0743+  0000             #defcont					\#else
0744+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0745+  0000             #defcont					\#endif
0746+  0000             #defcont				\#endif
0747+  0000             
0748+  0000             #define     BEQR_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0749+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,ba__-$-5
0750+  0000             #defcont				\#else
0751+  0000             #defcont					\#if ba__-$+5 < 127
0752+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,$+5-ba__
0753+  0000             #defcont					\#else
0754+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0755+  0000             #defcont					\#endif
0756+  0000             #defcont				\#endif
0757+  0000             
0758+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0759+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,ba__-$-6
0760+  0000             #defcont				\#else
0761+  0000             #defcont					\#if ba__-$+6 < 127
0762+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,$+6-ba__
0763+  0000             #defcont					\#else
0764+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0765+  0000             #defcont					\#endif
0766+  0000             #defcont				\#endif
0767+  0000             
0768+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0769+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0770+  0000             #defcont				\#else
0771+  0000             #defcont					\#if ba__-$+7 < 127
0772+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0773+  0000             #defcont					\#else
0774+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0775+  0000             #defcont					\#endif
0776+  0000             #defcont				\#endif
0777+  0000             
0778+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0779+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0780+  0000             #defcont				\#else
0781+  0000             #defcont					\#if ba__-$+8 < 127
0782+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0783+  0000             #defcont					\#else
0784+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0785+  0000             #defcont					\#endif
0786+  0000             #defcont				\#endif
0787+  0000             
0788+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0789+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0790+  0000             #defcont				\#else
0791+  0000             #defcont					\#if ba__-$+9 < 127
0792+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0793+  0000             #defcont					\#else
0794+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0795+  0000             #defcont					\#endif
0796+  0000             #defcont				\#endif
0797+  0000             
0798+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0799+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0800+  0000             #defcont				\#else
0801+  0000             #defcont					\#if ba__-$+10 < 127
0802+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0803+  0000             #defcont					\#else
0804+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0805+  0000             #defcont					\#endif
0806+  0000             #defcont				\#endif
0807+  0000             
0808+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0809+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0810+  0000             #defcont				\#else
0811+  0000             #defcont					\#if ba__-$+11 < 127
0812+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0813+  0000             #defcont					\#else
0814+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0815+  0000             #defcont					\#endif
0816+  0000             #defcont				\#endif
0817+  0000             
0818+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0819+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0820+  0000             #defcont				\#else
0821+  0000             #defcont					\#if ba__-$+12 < 127
0822+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0823+  0000             #defcont					\#else
0824+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0825+  0000             #defcont					\#endif
0826+  0000             #defcont				\#endif
0827+  0000             
0828+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0829+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0830+  0000             #defcont				\#else
0831+  0000             #defcont					\#if ba__-$+13 < 127
0832+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0833+  0000             #defcont					\#else
0834+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0835+  0000             #defcont					\#endif
0836+  0000             #defcont				\#endif
0837+  0000             
0838+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0839+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0840+  0000             #defcont				\#else
0841+  0000             #defcont					\#if ba__-$+14 < 127
0842+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0843+  0000             #defcont					\#else
0844+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0845+  0000             #defcont					\#endif
0846+  0000             #defcont				\#endif
0847+  0000             
0848+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0849+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0850+  0000             #defcont				\#else
0851+  0000             #defcont					\#if ba__-$+15 < 127
0852+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0853+  0000             #defcont					\#else
0854+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0855+  0000             #defcont					\#endif
0856+  0000             #defcont				\#endif
0857+  0000             
0858+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0859+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0860+  0000             #defcont				\#else
0861+  0000             #defcont					\#if ba__-$+16 < 127
0862+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0863+  0000             #defcont					\#else
0864+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0865+  0000             #defcont					\#endif
0866+  0000             #defcont				\#endif
0867+  0000             
0868+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
0869+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
0870+  0000             #defcont				\#else
0871+  0000             #defcont					\#if ba__-$+17 < 127
0872+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
0873+  0000             #defcont					\#else
0874+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0875+  0000             #defcont					\#endif
0876+  0000             #defcont				\#endif
0877+  0000             
0878+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
0879+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
0880+  0000             #defcont				\#else
0881+  0000             #defcont					\#if ba__-$+18 < 127
0882+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
0883+  0000             #defcont					\#else
0884+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0885+  0000             #defcont					\#endif
0886+  0000             #defcont				\#endif
0887+  0000             
0888+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
0889+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
0890+  0000             #defcont				\#else
0891+  0000             #defcont					\#if ba__-$+19 < 127
0892+  0000             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
0893+  0000             #defcont					\#else
0894+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0895+  0000             #defcont					\#endif
0896+  0000             #defcont				\#endif
0897+  0000             
0898+  0000             #define     BEQA_(p1__,ba__)     \.db $58,p1__ \.dw ba__
0899+  0000             #define     BEQA_(p1__,p2__,ba__)     \.db $58,p1__,p2__ \.dw ba__
0900+  0000             #define     BEQA_(p1__,p2__,p3__,ba__)     \.db $58,p1__,p2__,p3__ \.dw ba__
0901+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,ba__)     \.db $58,p1__,p2__,p3__,p4__ \.dw ba__
0902+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__ \.dw ba__
0903+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
0904+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
0905+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
0906+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
0907+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
0908+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
0909+  0000             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
0910+  0000             
0911+  0000             #define     BNER_(p1__,ba__)     \#if $+3-ba__ < 128
0912+  0000             #defcont                                 \.db $5B,p1__,ba__-$-3
0913+  0000             #defcont				\#else
0914+  0000             #defcont					\#if ba__-$+3 < 127
0915+  0000             #defcont                                 \.db $5B,p1__,$+3-ba__
0916+  0000             #defcont					\#else
0917+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0918+  0000             #defcont					\#endif
0919+  0000             #defcont				\#endif
0920+  0000             
0921+  0000             #define     BNER_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0922+  0000             #defcont                                 \.db $5B,p1__,p2__,ba__-$-4
0923+  0000             #defcont				\#else
0924+  0000             #defcont					\#if ba__-$+4 < 127
0925+  0000             #defcont                                 \.db $5B,p1__,p2__,$+4-ba__
0926+  0000             #defcont					\#else
0927+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0928+  0000             #defcont					\#endif
0929+  0000             #defcont				\#endif
0930+  0000             
0931+  0000             #define     BNER_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0932+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,ba__-$-5
0933+  0000             #defcont				\#else
0934+  0000             #defcont					\#if ba__-$+5 < 127
0935+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,$+5-ba__
0936+  0000             #defcont					\#else
0937+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0938+  0000             #defcont					\#endif
0939+  0000             #defcont				\#endif
0940+  0000             
0941+  0000             #define     BNER_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0942+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,ba__-$-6
0943+  0000             #defcont				\#else
0944+  0000             #defcont					\#if ba__-$+6 < 127
0945+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,$+6-ba__
0946+  0000             #defcont					\#else
0947+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0948+  0000             #defcont					\#endif
0949+  0000             #defcont				\#endif
0950+  0000             
0951+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0952+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0953+  0000             #defcont				\#else
0954+  0000             #defcont					\#if ba__-$+7 < 127
0955+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0956+  0000             #defcont					\#else
0957+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0958+  0000             #defcont					\#endif
0959+  0000             #defcont				\#endif
0960+  0000             
0961+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0962+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0963+  0000             #defcont				\#else
0964+  0000             #defcont					\#if ba__-$+8 < 127
0965+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0966+  0000             #defcont					\#else
0967+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0968+  0000             #defcont					\#endif
0969+  0000             #defcont				\#endif
0970+  0000             
0971+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0972+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0973+  0000             #defcont				\#else
0974+  0000             #defcont					\#if ba__-$+9 < 127
0975+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0976+  0000             #defcont					\#else
0977+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0978+  0000             #defcont					\#endif
0979+  0000             #defcont				\#endif
0980+  0000             
0981+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0982+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0983+  0000             #defcont				\#else
0984+  0000             #defcont					\#if ba__-$+10 < 127
0985+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0986+  0000             #defcont					\#else
0987+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0988+  0000             #defcont					\#endif
0989+  0000             #defcont				\#endif
0990+  0000             
0991+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0992+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0993+  0000             #defcont				\#else
0994+  0000             #defcont					\#if ba__-$+11 < 127
0995+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0996+  0000             #defcont					\#else
0997+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0998+  0000             #defcont					\#endif
0999+  0000             #defcont				\#endif
1000+  0000             
1001+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
1002+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
1003+  0000             #defcont				\#else
1004+  0000             #defcont					\#if ba__-$+12 < 127
1005+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
1006+  0000             #defcont					\#else
1007+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1008+  0000             #defcont					\#endif
1009+  0000             #defcont				\#endif
1010+  0000             
1011+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
1012+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
1013+  0000             #defcont				\#else
1014+  0000             #defcont					\#if ba__-$+13 < 127
1015+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
1016+  0000             #defcont					\#else
1017+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1018+  0000             #defcont					\#endif
1019+  0000             #defcont				\#endif
1020+  0000             
1021+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
1022+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
1023+  0000             #defcont				\#else
1024+  0000             #defcont					\#if ba__-$+14 < 127
1025+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
1026+  0000             #defcont					\#else
1027+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1028+  0000             #defcont					\#endif
1029+  0000             #defcont				\#endif
1030+  0000             
1031+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
1032+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
1033+  0000             #defcont				\#else
1034+  0000             #defcont					\#if ba__-$+15 < 127
1035+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
1036+  0000             #defcont					\#else
1037+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1038+  0000             #defcont					\#endif
1039+  0000             #defcont				\#endif
1040+  0000             
1041+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
1042+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
1043+  0000             #defcont				\#else
1044+  0000             #defcont					\#if ba__-$+16 < 127
1045+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
1046+  0000             #defcont					\#else
1047+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1048+  0000             #defcont					\#endif
1049+  0000             #defcont				\#endif
1050+  0000             
1051+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
1052+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
1053+  0000             #defcont				\#else
1054+  0000             #defcont					\#if ba__-$+17 < 127
1055+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
1056+  0000             #defcont					\#else
1057+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1058+  0000             #defcont					\#endif
1059+  0000             #defcont				\#endif
1060+  0000             
1061+  0000             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
1062+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
1063+  0000             #defcont				\#else
1064+  0000             #defcont					\#if ba__-$+18 < 127
1065+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
1066+  0000             #defcont					\#else
1067+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1068+  0000             #defcont					\#endif
1069+  0000             #defcont				\#endif
1070+  0000             
1071+  0000             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
1072+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
1073+  0000             #defcont				\#else
1074+  0000             #defcont					\#if ba__-$+19 < 127
1075+  0000             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
1076+  0000             #defcont					\#else
1077+  0000             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1078+  0000             #defcont					\#endif
1079+  0000             #defcont				\#endif
1080+  0000             
1081+  0000             #define     BNEA_(p1__,ba__)     \.db $59,p1__ \.dw ba__
1082+  0000             #define     BNEA_(p1__,p2__,ba__)     \.db $59,p1__,p2__ \.dw ba__
1083+  0000             #define     BNEA_(p1__,p2__,p3__,ba__)     \.db $59,p1__,p2__,p3__ \.dw ba__
1084+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,ba__)     \.db $59,p1__,p2__,p3__,p4__ \.dw ba__
1085+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__ \.dw ba__
1086+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
1087+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
1088+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
1089+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
1090+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
1091+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
1092+  0000             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
1093+  0000             
1094+  0000             ;**********************************************************
1095+  0000             ;* Macros 5C-5F
1096+  0000             ;**********************************************************
1097+  0000             #define	JMPD_(a)		.db $5c \.dw a
1098+  0000             
1099+  0000             #define	SWSET_(a)		.db $5d,a
1100+  0000             #define	SWSET_(a,b)		.db $5d,a,b
1101+  0000             #define	SWSET_(a,b,c)	.db $5d,a,b,c
1102+  0000             #define	SWSET_(a,b,c,d)	.db $5d,a,b,c,d
1103+  0000             
1104+  0000             #define	SWCLR_(a)		.db $5e,a
1105+  0000             #define	SWCLR_(a,b)		.db $5e,a,b
1106+  0000             #define	SWCLR_(a,b,c)	.db $5e,a,b,c
1107+  0000             #define	SWCLR_(a,b,c,d)	.db $5e,a,b,c,d
1108+  0000             
1109+  0000             #define	JMP_(a)		.db $5f \.dw a
1110+  0000             
1111+  0000             ;**********************************************************
1112+  0000             ;* Macro 6X:
1113+  0000             ;**********************************************************
1114+  0000             #define	SLEEPI_(a)		.db ($60+a)
1115+  0000             
1116+  0000             ;**********************************************************
1117+  0000             ;* Macro 7X: 
1118+  0000             ;**********************************************************
1119+  0000             ;See SLEEP macro previous...
1120+  0000             
1121+  0000             ;**********************************************************
1122+  0000             ;* Macro 8X:
1123+  0000             ;**********************************************************
1124+  0000             #define 	JMPR_(a)		\#if a-$ > $7ff
1125+  0000             #defcont				\	.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1126+  0000             #defcont				\#else
1127+  0000             #defcont				\	#if $-a > $7ff
1128+  0000             #defcont				\		.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1129+  0000             #defcont				\	#endif
1130+  0000             #defcont				\#endif
1131+  0000             #defcont				\	.db ($80+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1132+  0000             
1133+  0000             ;**********************************************************
1134+  0000             ;* Macro 9X:
1135+  0000             ;**********************************************************
1136+  0000             #define 	JSRR_(a)		\#if a-$ > $7ff
1137+  0000             #defcont				\	.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1138+  0000             #defcont				\#else
1139+  0000             #defcont				\	#if $-a > $7ff
1140+  0000             #defcont				\		.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1141+  0000             #defcont				\	#endif
1142+  0000             #defcont				\#endif
1143+  0000             #defcont				\	.db ($90+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1144+  0000             ;**********************************************************
1145+  0000             ;* Macro AX:
1146+  0000             ;**********************************************************
1147+  0000             #define 	JSRDR_(a)		\#if a-$ > $7ff
1148+  0000             #defcont				\	.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1149+  0000             #defcont				\#else
1150+  0000             #defcont				\	#if $-a > $7ff
1151+  0000             #defcont				\		.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1152+  0000             #defcont				\	#endif
1153+  0000             #defcont				\#endif
1154+  0000             #defcont				\	.db ($a0+(((a-($+2))>>8)&$0f)) \.db ((a-($+1))&$ff)
1155+  0000             
1156+  0000             
1157+  0000             ;**********************************************************
1158+  0000             ;* Macro BX: Add NextByte to RAM LSD(command) 
1159+  0000             ;**********************************************************
1160+  0000             #define 	ADDRAM_(ramloc,data)	.db ($b0+ramloc),data
1161+  0000             
1162+  0000             ;**********************************************************
1163+  0000             ;* Macro CX: Set NextByte to RAM LSD(command) 
1164+  0000             ;**********************************************************
1165+  0000             #define 	SETRAM_(ramloc,data)	.db ($c0+ramloc),data
1166+  0000             
1167+  0000             ;**********************************************************
1168+  0000             ;* Macro DX: Lamp Range Effects for extended lamp matrix
1169+  0000             ;**********************************************************
1170+  0000             #define	BITON3_(a)		\.db $d0,a
1171+  0000             #define	BITON3_(a,b)	\.db $d0,(a+$80),b
1172+  0000             #define	BITON3_(a,b,c)	\.db $d0,(a+$80),(b+$80),c
1173+  0000             #define	BITON3_(a,b,c,d)	\.db $d0,(a+$80),(b+$80),(c+$80),d
1174+  0000             
1175+  0000             #define	BITOFF3_(a)		\.db $d1,a
1176+  0000             #define	BITOFF3_(a,b)	\.db $d1,(a+$80),b
1177+  0000             #define	BITOFF3_(a,b,c)	\.db $d1,(a+$80),(b+$80),c
1178+  0000             #define	BITOFF3_(a,b,c,d)	\.db $d1,(a+$80),(b+$80),(c+$80),d
1179+  0000             
1180+  0000             #define	BITINV3_(a)		\.db $d2,a
1181+  0000             #define	BITINV3_(a,b)	\.db $d2,(a+$80),b
1182+  0000             #define	BITINV3_(a,b,c)	\.db $d2,(a+$80),(b+$80),c
1183+  0000             #define	BITINV3_(a,b,c,d)	\.db $d2,(a+$80),(b+$80),(c+$80),d
1184+  0000             
1185+  0000             #define	BITON3a_(a)		\.db $d4,a
1186+  0000             #define	BITON3a_(a,b)	\.db $d4,(a+$80),b
1187+  0000             #define	BITON3a_(a,b,c)	\.db $d4,(a+$80),(b+$80),c
1188+  0000             #define	BITON3a_(a,b,c,d)	\.db $d4,(a+$80),(b+$80),(c+$80),d
1189+  0000             
1190+  0000             #define	BITOFF3a_(a)	\.db $d5,a
1191+  0000             #define	BITOFF3a_(a,b)	\.db $d5,(a+$80),b
1192+  0000             #define	BITOFF3a_(a,b,c)	\.db $d5,(a+$80),(b+$80),c
1193+  0000             #define	BITOFF3a_(a,b,c,d) \.db $d5,(a+$80),(b+$80),(c+$80),d
1194+  0000             
1195+  0000             #define	BITINV3a_(a)	\.db $d6,a
1196+  0000             #define	BITINV3a_(a,b)	\.db $d6,(a+$80),b
1197+  0000             #define	BITINV3a_(a,b,c)	\.db $d6,(a+$80),(b+$80),c
1198+  0000             #define	BITINV3a_(a,b,c,d) \.db $d6,(a+$80),(b+$80),(c+$80),d
1199+  0000             
1200+  0000             #define	BITON4_(a)		\.db $d8,a
1201+  0000             #define	BITON4_(a,b)	\.db $d8,(a+$80),b
1202+  0000             #define	BITON4_(a,b,c)	\.db $d8,(a+$80),(b+$80),c
1203+  0000             #define	BITON4_(a,b,c,d)	\.db $d8,(a+$80),(b+$80),(c+$80),d
1204+  0000             
1205+  0000             #define	BITOFF4_(a)		\.db $d9,a
1206+  0000             #define	BITOFF4_(a,b)	\.db $d9,(a+$80),b
1207+  0000             #define	BITOFF4_(a,b,c)	\.db $d9,(a+$80),(b+$80),c
1208+  0000             #define	BITOFF4_(a,b,c,d)	\.db $d9,(a+$80),(b+$80),(c+$80),d
1209+  0000             
1210+  0000             #define	BITINV4_(a)		\.db $da,a
1211+  0000             #define	BITINV4_(a,b)	\.db $da,(a+$80),b
1212+  0000             #define	BITINV4_(a,b,c)	\.db $da,(a+$80),(b+$80),c
1213+  0000             #define	BITINV4_(a,b,c,d)	\.db $da,(a+$80),(b+$80),(c+$80),d
1214+  0000             
1215+  0000             #define	BITON4a_(a)		\.db $dc,a
1216+  0000             #define	BITON4a_(a,b)	\.db $dc,(a+$80),b
1217+  0000             #define	BITON4a_(a,b,c)	\.db $dc,(a+$80),(b+$80),c
1218+  0000             #define	BITON4a_(a,b,c,d)	\.db $dc,(a+$80),(b+$80),(c+$80),d
1219+  0000             
1220+  0000             #define	BITOFF4a_(a)	\.db $dd,a
1221+  0000             #define	BITOFF4a_(a,b)	\.db $dd,(a+$80),b
1222+  0000             #define	BITOFF4a_(a,b,c)	\.db $dd,(a+$80),(b+$80),c
1223+  0000             #define	BITOFF4a_(a,b,c,d) \.db $dd,(a+$80),(b+$80),(c+$80),d
1224+  0000             
1225+  0000             #define	BITINV4a_(a)	\.db $de,a
1226+  0000             #define	BITINV4a_(a,b)	\.db $de,(a+$80),b
1227+  0000             #define	BITINV4a_(a,b,c)	\.db $de,(a+$80),(b+$80),c
1228+  0000             #define	BITINV4a_(a,b,c,d) \.db $de,(a+$80),(b+$80),(c+$80),d
1229+  0000             
1230+  0000             ;**********************************************************
1231+  0000             ;* Macro EX,FX: Play Index Sound Once 
1232+  0000             ;**********************************************************
1233+  0000             #define	SND_(a)			.db $e0+a
0034   0000             #include  "hy_sys.exp"	;System defines                         
0001+  0000             .module wml7
0002+  0000             
0003+  0000             addthread        .EQU  $e97c
0004+  0000             add_points       .EQU  $ebd3
0005+  0000             a_cmosinc        .EQU  $eeee
0006+  0000             abx_ret          .EQU  $f289
0007+  0000             award_replay     .EQU  $f74c
0008+  0000             award_extraball  .EQU  $f75c
0009+  0000             addcredits       .EQU  $f76c
0010+  0000             addcredit2       .EQU  $f76f
0011+  0000             add_player       .EQU  $f8c4
0012+  0000             adjust_func      .EQU  $fd2e
0013+  0000             adjust_a         .EQU  $ffee
0014+  0000             b_plus10         .EQU  $ec2b
0015+  0000             b_cmosinc        .EQU  $eea8
0016+  0000             bit_switch       .EQU  $f360
0017+  0000             bit_lamp_flash   .EQU  $f365
0018+  0000             bit_lamp_buf_1   .EQU  $f36a
0019+  0000             bit_lamp_buf_f   .EQU  $f36f
0020+  0000             bit_lamp_buf_0   .EQU  $f374
0021+  0000             bit_main         .EQU  $f377
0022+  0000             branch_lookup    .EQU  $f412
0023+  0000             breg_sto         .EQU  $f456
0024+  0000             branchdata       .EQU  $f692
0025+  0000             branch_invert    .EQU  $f6d6
0026+  0000             branch_lamp_on   .EQU  $f6db
0027+  0000             branch_lamprangeoff .EQU  $f6e7
0028+  0000             branch_lamprangeon .EQU  $f6ee
0029+  0000             branch_tilt      .EQU  $f6f3
0030+  0000             branch_gameover  .EQU  $f6fa
0031+  0000             branch_lampbuf1  .EQU  $f701
0032+  0000             branch_switch    .EQU  $f70d
0033+  0000             branch_and       .EQU  $f712
0034+  0000             branch_add       .EQU  $f717
0035+  0000             branch_or        .EQU  $f719
0036+  0000             branch_equal     .EQU  $f71e
0037+  0000             branch_ge        .EQU  $f723
0038+  0000             branch_threadpri .EQU  $f726
0039+  0000             branch_bitwise   .EQU  $f72d
0040+  0000             balladjust       .EQU  $fa7e
0041+  0000             block_copy       .EQU  $ffcd
0042+  0000             csum1            .EQU  $e777
0043+  0000             clear_all        .EQU  $e7a4
0044+  0000             checkswitch      .EQU  $e812
0045+  0000             check_threads    .EQU  $e93a
0046+  0000             check_threadid   .EQU  $ea60
0047+  0000             comma_million    .EQU  $eaf0
0048+  0000             comma_thousand   .EQU  $eaf4
0049+  0000             checkreplay      .EQU  $ebe9
0050+  0000             check_sw_mask    .EQU  $ed26
0051+  0000             check_sw_close   .EQU  $eda0
0052+  0000             check_sw_open    .EQU  $edfa
0053+  0000             copy_word        .EQU  $ee4e
0054+  0000             cmosinc_a        .EQU  $ee92
0055+  0000             cmosinc_b        .EQU  $eea2
0056+  0000             clr_ram_100      .EQU  $eeb3
0057+  0000             clr_ram          .EQU  $eeb6
0058+  0000             copyblock        .EQU  $eefb
0059+  0000             copyblock2       .EQU  $ef23
0060+  0000             csum2            .EQU  $f393
0061+  0000             complexbranch    .EQU  $f6b1
0062+  0000             coinlockout      .EQU  $f79c
0063+  0000             checkmaxcredits  .EQU  $f7ae
0064+  0000             creditq          .EQU  $f7c4
0065+  0000             coin_accepted    .EQU  $f80a
0066+  0000             cmos_a_plus_b_cmos .EQU  $f879
0067+  0000             clr_bonus_coins  .EQU  $f893
0068+  0000             clear_range      .EQU  $f90b
0069+  0000             clear_displays   .EQU  $f911
0070+  0000             clr_dis_masks    .EQU  $f922
0071+  0000             clr_dis_masks12  .EQU  $f927
0072+  0000             copyplayerdata   .EQU  $f947
0073+  0000             check_hstd       .EQU  $fafc
0074+  0000             credit_button    .EQU  $fba5
0075+  0000             check_adv        .EQU  $fc94
0076+  0000             check_aumd       .EQU  $fc9f
0077+  0000             cmos_add_d       .EQU  $fda3
0078+  0000             cmos_a           .EQU  $fddb
0079+  0000             cmos_error       .EQU  $ffc7
0080+  0000             cmos_restore     .EQU  $ffe1
0081+  0000             delaythread      .EQU  $e971
0082+  0000             dump_thread      .EQU  $e986
0083+  0000             dsnd_pts         .EQU  $eb36
0084+  0000             do_complex_snd   .EQU  $ece6
0085+  0000             dly_sto          .EQU  $f56e
0086+  0000             do_eb            .EQU  $f75d
0087+  0000             divide_ab        .EQU  $f880
0088+  0000             dec2hex          .EQU  $f89d
0089+  0000             do_game_init     .EQU  $f8b0
0090+  0000             disp_mask        .EQU  $f9b1
0091+  0000             disp_clear       .EQU  $f9be
0092+  0000             dump_score_queue .EQU  $fa2c
0093+  0000             do_tilt          .EQU  $fc09
0094+  0000             do_aumd          .EQU  $fc81
0095+  0000             do_audadj        .EQU  $fcca
0096+  0000             diag             .EQU  $ff31
0097+  0000             diag_showerror   .EQU  $ff7f
0098+  0000             diag_ramtest     .EQU  $ff85
0099+  0000             flashlamp        .EQU  $e895
0100+  0000             factory_zeroaudits .EQU  $eebc
0101+  0000             fill_hstd_digits .EQU  $fb7f
0102+  0000             fn_gameid        .EQU  $fd46
0103+  0000             fn_gameaud       .EQU  $fd51
0104+  0000             fn_sysaud        .EQU  $fd53
0105+  0000             fn_hstd          .EQU  $fd66
0106+  0000             fn_replay        .EQU  $fd6e
0107+  0000             fn_pricec        .EQU  $fdac
0108+  0000             fn_prices        .EQU  $fdc6
0109+  0000             fn_ret           .EQU  $fdde
0110+  0000             fn_credit        .EQU  $fde2
0111+  0000             fn_cdtbtn        .EQU  $fde5
0112+  0000             fn_adj           .EQU  $fdef
0113+  0000             fn_command       .EQU  $fdfa
0114+  0000             get_hs_digits    .EQU  $ec1f
0115+  0000             getswitch        .EQU  $edd7
0116+  0000             gettabledata_w   .EQU  $f526
0117+  0000             gettabledata_b   .EQU  $f528
0118+  0000             getx_rts         .EQU  $f538
0119+  0000             gameover         .EQU  $fac4
0120+  0000             get_random       .EQU  $fb94
0121+  0000             hex2bitpos       .EQU  $eae5
0122+  0000             hex2dec          .EQU  $ebbc
0123+  0000             hstd_nextp       .EQU  $fb30
0124+  0000             hstd_adddig      .EQU  $fb6e
0125+  0000             has_credit       .EQU  $fbb6
0126+  0000             init_done        .EQU  $e778
0127+  0000             isnd_pts         .EQU  $eb32
0128+  0000             isnd_once        .EQU  $ec3b
0129+  0000             isnd_test        .EQU  $ec81
0130+  0000             isnd_mult        .EQU  $ec92
0131+  0000             isnd_mult_x      .EQU  $eca5
0132+  0000             initialize_game  .EQU  $f8f5
0133+  0000             init_player_game .EQU  $f92c
0134+  0000             init_player_up   .EQU  $f951
0135+  0000             init_player_sys  .EQU  $f9cb
0136+  0000             irq_entry        .EQU  $fff8
0137+  0000             killthread       .EQU  $e9c4
0138+  0000             killthread_sp    .EQU  $ea2c
0139+  0000             kill_thread      .EQU  $ea53
0140+  0000             kill_threads     .EQU  $ea5b
0141+  0000             loadpricing      .EQU  $ef0f
0142+  0000             lampbuffers      .EQU  $f189
0143+  0000             lamp_on          .EQU  $f191
0144+  0000             lamp_or          .EQU  $f196
0145+  0000             lamp_commit      .EQU  $f19c
0146+  0000             lamp_done        .EQU  $f1ac
0147+  0000             lamp_off         .EQU  $f1b0
0148+  0000             lamp_and         .EQU  $f1b5
0149+  0000             lamp_flash       .EQU  $f1be
0150+  0000             lamp_invert      .EQU  $f1c5
0151+  0000             lamp_eor         .EQU  $f1ca
0152+  0000             lamp_on_b        .EQU  $f1d3
0153+  0000             lamp_off_b       .EQU  $f1da
0154+  0000             lamp_invert_b    .EQU  $f1e1
0155+  0000             lamp_on_1        .EQU  $f1e8
0156+  0000             lamp_off_1       .EQU  $f1ef
0157+  0000             lamp_invert_1    .EQU  $f1f6
0158+  0000             lamp_on_f        .EQU  $f1fd
0159+  0000             lamp_off_f       .EQU  $f204
0160+  0000             lampm_clr0       .EQU  $f21d
0161+  0000             lampm_buf0       .EQU  $f22c
0162+  0000             lampm_f          .EQU  $f23d
0163+  0000             lampm_a          .EQU  $f264
0164+  0000             lampm_b          .EQU  $f26e
0165+  0000             lampm_set0       .EQU  $f27e
0166+  0000             lampr_start      .EQU  $f290
0167+  0000             lr_ret           .EQU  $f295
0168+  0000             lampr_end        .EQU  $f29c
0169+  0000             lampr_setup      .EQU  $f2a2
0170+  0000             lamp_left        .EQU  $f2cb
0171+  0000             ls_ret           .EQU  $f2d0
0172+  0000             lamp_right       .EQU  $f2da
0173+  0000             lampm_c          .EQU  $f2e1
0174+  0000             lm_test          .EQU  $f2e3
0175+  0000             lampm_e          .EQU  $f2f2
0176+  0000             lampm_d          .EQU  $f30a
0177+  0000             lampm_z          .EQU  $f329
0178+  0000             lfill_a          .EQU  $f345
0179+  0000             lfill_b          .EQU  $f354
0180+  0000             lampm_x          .EQU  $f37d
0181+  0000             load_sw_no       .EQU  $f64a
0182+  0000             lesscredit       .EQU  $fbdf
0183+  0000             main             .EQU  $e7eb
0184+  0000             master_vm_lookup .EQU  $f394
0185+  0000             macro_start      .EQU  $f432
0186+  0000             macro_rts        .EQU  $f436
0187+  0000             macro_go         .EQU  $f43c
0188+  0000             macro_next       .EQU  $f452
0189+  0000             macro_pcminus100 .EQU  $f462
0190+  0000             macro_code_start .EQU  $f469
0191+  0000             macro_special    .EQU  $f471
0192+  0000             macro_extraball  .EQU  $f476
0193+  0000             macro_x8f        .EQU  $f482
0194+  0000             macro_17         .EQU  $f49f
0195+  0000             macro_x17        .EQU  $f4a2
0196+  0000             macro_exec       .EQU  $f505
0197+  0000             macro_getnextbyte .EQU  $f52f
0198+  0000             macro_ramadd     .EQU  $f544
0199+  0000             macro_ramcopy    .EQU  $f559
0200+  0000             macro_set_pri    .EQU  $f564
0201+  0000             macro_delay_imm_b .EQU  $f56c
0202+  0000             macro_getnextword .EQU  $f57c
0203+  0000             macro_get2bytes  .EQU  $f584
0204+  0000             macro_rem_th_s   .EQU  $f589
0205+  0000             macro_rem_th_m   .EQU  $f590
0206+  0000             macro_jsr_noreturn .EQU  $f597
0207+  0000             macro_a_ram      .EQU  $f5a3
0208+  0000             macro_b_ram      .EQU  $f5b2
0209+  0000             macro_jsr_return .EQU  $f5c1
0210+  0000             macro_jmp_cpu    .EQU  $f5e9
0211+  0000             macro_jmp_abs    .EQU  $f600
0212+  0000             macro_pcadd      .EQU  $f628
0213+  0000             macro_setswitch  .EQU  $f63e
0214+  0000             macro_clearswitch .EQU  $f656
0215+  0000             macro_branch     .EQU  $f667
0216+  0000             next_sw          .EQU  $e84e
0217+  0000             nextthread       .EQU  $e93d
0218+  0000             newthread_sp     .EQU  $e9d8
0219+  0000             newthread_06     .EQU  $ea24
0220+  0000             nmi_entry        .EQU  $fffc
0221+  0000             outhole_main     .EQU  $fa43
0222+  0000             pri_next         .EQU  $ea6a
0223+  0000             pri_skipme       .EQU  $ea77
0224+  0000             pack_done        .EQU  $edf7
0225+  0000             pia_ddr_data     .EQU  $f171
0226+  0000             pc_sto2          .EQU  $f59f
0227+  0000             pc_sto           .EQU  $f5e4
0228+  0000             pull_ba_rts      .EQU  $f7c1
0229+  0000             ptrx_plus_1      .EQU  $f7e7
0230+  0000             ptrx_plus_a      .EQU  $f7ec
0231+  0000             ptrx_plus        .EQU  $f7ed
0232+  0000             player_ready     .EQU  $f975
0233+  0000             powerup_init     .EQU  $fad7
0234+  0000             reset            .EQU  $e730
0235+  0000             reset_audits     .EQU  $eeae
0236+  0000             restore_hstd     .EQU  $eedc
0237+  0000             ram_sto2         .EQU  $f554
0238+  0000             ret_sto          .EQU  $f5c3
0239+  0000             ram_sto          .EQU  $f60e
0240+  0000             ret_false        .EQU  $f6f7
0241+  0000             ret_true         .EQU  $f6fe
0242+  0000             resetplayerdata  .EQU  $f9ea
0243+  0000             rambad           .EQU  $ff25
0244+  0000             res_entry        .EQU  $fffe
0245+  0000             switches         .EQU  $e84b
0246+  0000             sw_break         .EQU  $e880
0247+  0000             solq             .EQU  $e8ae
0248+  0000             snd_queue        .EQU  $e8ca
0249+  0000             solbuf           .EQU  $ea83
0250+  0000             set_solenoid     .EQU  $eaa7
0251+  0000             set_ss_off       .EQU  $eabf
0252+  0000             set_s_pia        .EQU  $eac2
0253+  0000             set_ss_on        .EQU  $eacb
0254+  0000             soladdr          .EQU  $ead1
0255+  0000             set_comma_bit    .EQU  $eb1b
0256+  0000             snd_pts          .EQU  $eb39
0257+  0000             score_main       .EQU  $eb3d
0258+  0000             score_update     .EQU  $eb5a
0259+  0000             score2hex        .EQU  $ebc3
0260+  0000             sh_exit          .EQU  $ebd2
0261+  0000             split_ab         .EQU  $ec32
0262+  0000             sound_sub        .EQU  $ec42
0263+  0000             snd_exit_pull    .EQU  $ecd8
0264+  0000             snd_exit         .EQU  $ecda
0265+  0000             send_snd_save    .EQU  $ecdd
0266+  0000             send_snd         .EQU  $ecdf
0267+  0000             store_csndflg    .EQU  $ecfe
0268+  0000             sw_ignore        .EQU  $ed40
0269+  0000             sw_active        .EQU  $ed41
0270+  0000             sw_down          .EQU  $ed43
0271+  0000             sw_dtime         .EQU  $ed54
0272+  0000             sw_trig_yes      .EQU  $ed58
0273+  0000             sw_proc          .EQU  $ed87
0274+  0000             sw_pack          .EQU  $edea
0275+  0000             sw_get_time      .EQU  $ee1a
0276+  0000             sw_tbl_lookup    .EQU  $ee36
0277+  0000             setup_vm_stack   .EQU  $ee61
0278+  0000             stack_done       .EQU  $ee7e
0279+  0000             sys_irq_entry    .EQU  $ef36
0280+  0000             set_logic        .EQU  $f732
0281+  0000             setplayerbuffer  .EQU  $f93b
0282+  0000             saveplayertobuffer .EQU  $fa63
0283+  0000             show_hstd        .EQU  $fab1
0284+  0000             set_gameover     .EQU  $fae2
0285+  0000             set_hstd         .EQU  $fb3e
0286+  0000             send_sound       .EQU  $fb8b
0287+  0000             start_new_game   .EQU  $fbda
0288+  0000             selftest_entry   .EQU  $fc41
0289+  0000             st_diagnostics   .EQU  $fc54
0290+  0000             st_init          .EQU  $fcaa
0291+  0000             st_nexttest      .EQU  $fcb9
0292+  0000             show_func        .EQU  $fcf3
0293+  0000             st_reset         .EQU  $fd39
0294+  0000             st_display       .EQU  $fdff
0295+  0000             st_sound         .EQU  $fe32
0296+  0000             st_lamp          .EQU  $fe5d
0297+  0000             st_autocycle     .EQU  $fe7c
0298+  0000             st_solenoid      .EQU  $fe9c
0299+  0000             solenoid_wait    .EQU  $fecc
0300+  0000             st_switch        .EQU  $fed8
0301+  0000             st_swnext        .EQU  $fee4
0302+  0000             swi_entry        .EQU  $fffa
0303+  0000             time             .EQU  $e82e
0304+  0000             test_mask_b      .EQU  $eb27
0305+  0000             to_ldx_rts       .EQU  $edd4
0306+  0000             to_macro_go1     .EQU  $f4be
0307+  0000             to_macro_go2     .EQU  $f556
0308+  0000             to_getx_rts      .EQU  $f5b0
0309+  0000             to_macro_go4     .EQU  $f5e6
0310+  0000             to_macro_go3     .EQU  $f661
0311+  0000             to_macro_getnextbyte .EQU  $f664
0312+  0000             to_rts3          .EQU  $f6da
0313+  0000             test_z           .EQU  $f6e3
0314+  0000             test_c           .EQU  $f6ea
0315+  0000             to_rts4          .EQU  $f731
0316+  0000             to_pula_rts      .EQU  $f90f
0317+  0000             to_copyblock     .EQU  $fa7b
0318+  0000             to_rts1          .EQU  $fb7e
0319+  0000             to_rts2          .EQU  $fba4
0320+  0000             tilt_warning     .EQU  $fbfd
0321+  0000             testdata         .EQU  $fc18
0322+  0000             testlists        .EQU  $fc22
0323+  0000             to_clear_range   .EQU  $fcb6
0324+  0000             to_audadj        .EQU  $fcc8
0325+  0000             tightloop        .EQU  $ff83
0326+  0000             update_commas    .EQU  $eaf8
0327+  0000             unpack_byte      .EQU  $f212
0328+  0000             update_hstd      .EQU  $fb4f
0329+  0000             vm_irqcheck      .EQU  $e884
0330+  0000             vm_lookup_0x     .EQU  $f3b4
0331+  0000             vm_lookup_1x_a   .EQU  $f3c2
0332+  0000             vm_lookup_1x_b   .EQU  $f3d2
0333+  0000             vm_lookup_2x     .EQU  $f3da
0334+  0000             vm_lookup_4x     .EQU  $f3ec
0335+  0000             vm_lookup_5x     .EQU  $f3f2
0336+  0000             vm_control_0x    .EQU  $f45a
0337+  0000             vm_control_1x    .EQU  $f47b
0338+  0000             vm_control_2x    .EQU  $f4c1
0339+  0000             vm_control_dx    .EQU  $f4cd
0340+  0000             vm_control_3x    .EQU  $f4dc
0341+  0000             vm_control_4x    .EQU  $f4e9
0342+  0000             vm_control_5x    .EQU  $f53b
0343+  0000             vm_control_6x    .EQU  $f5da
0344+  0000             vm_control_7x    .EQU  $f5de
0345+  0000             vm_control_8x    .EQU  $f5e2
0346+  0000             vm_control_9x    .EQU  $f5f2
0347+  0000             vm_control_ax    .EQU  $f5fc
0348+  0000             vm_control_bx    .EQU  $f605
0349+  0000             vm_control_cx    .EQU  $f612
0350+  0000             vm_control_ex    .EQU  $f621
0351+  0000             vm_control_fx    .EQU  $f621
0352+  0000             write_range      .EQU  $f8a9
0353+  0000             wordplusbyte     .EQU  $fb72
0354+  0000             xplusa           .EQU  $ee3e
0355+  0000             xplusb           .EQU  $ee8c
0035   0000             #include  "hy_hard.asm"	;Macro defines                 
0001+  0000             ;***********************************************************
0002+  0000             ;* Hyperball Hardware Definitions                          *
0003+  0000             ;* 1999-2001 Jess M. Askey (jess@askey.org)                *
0004+  0000             ;***********************************************************
0005+  0000             ;* This file defines the RAM structure and the actual      *
0006+  0000             ;* hardware contained on Hyperball.                        *
0007+  0000             ;***********************************************************
0008+  0000             	.org $0000
0009+  0000             
0010+  0000             ram_base	
0011+  0000             vm_reg_a			.block	1		;Virtual Machine Register A
0012+  0001             vm_reg_b			.block	1		;Virtual Machine Register B
0013+  0002             game_ram_2			.block	1
0014+  0003             game_ram_3			.block	1
0015+  0004             game_ram_4			.block	1
0016+  0005             game_ram_5			.block	1
0017+  0006             game_ram_6			.block	1
0018+  0007             game_ram_7			.block	1
0019+  0008             game_ram_8			.block	1
0020+  0009             game_ram_9			.block	1
0021+  000A             game_ram_a			.block	1
0022+  000B             game_ram_b			.block	1
0023+  000C             game_ram_c			.block	1
0024+  000D             game_ram_d			.block	1
0025+  000E             game_ram_e			.block	1
0026+  000F             game_ram_f			.block	1
0027+  0010             
0028+  0010             
0029+  0010             
0030+  0010             lampbuffer0			.block	8		;Lamp Buffer 0
0031+  0018             lampbuffer0x		.block	4		;Extended Lamp Buffer 0
0032+  001C             bitflags			.block	8		;Game Flags
0033+  0024             bitflagsx			.block	4		;Extended Game Flags
0034+  0028             lampbufferselect		.block	8		;Lamp Buffer Selection Bit
0035+  0030             lampbufferselectx		.block	4
0036+  0034             lampbuffer1			.block	8		;Lamp Buffer 1
0037+  003C             lampbuffer1x		.block	4		;Extended Lamp Buffer 1
0038+  0040             lampflashflag		.block	8		;Lamp Flashing Bits
0039+  0048             lampflashflagx		.block	4		
0040+  004C             
0041+  004C             score_p1_b0			.block	4
0042+  0050             score_p2_b0			.block	4
0043+  0054             score_p1_b1			.block	4
0044+  0058             score_p2_b1			.block	4
0045+  005C             wave_p1_b0			.block	1
0046+  005D             wave_p1_b1			.block	1
0047+  005E             wave_p2_b0			.block	1		;$119A  TODO: this is WAY off from L7 which is 
0048+  005F             wave_p2_b1			.block	1
0049+  0060             alpha_b0			.block	12
0050+  006C             alpha_b1			.block	12
0051+  0078             
0052+  0078             dmask_p1			.block	1
0053+  0079             dmask_p2			.block	1
0054+  007A             dmask_p3			.block	1
0055+  007B             dmask_p4			.block	1
0056+  007C             comma_flags			.block	1
0057+  007D             switch_debounced		.block	8
0058+  0085             switch_masked		.block	8
0059+  008D             switch_pending		.block	8
0060+  0095             switch_aux			.block	8
0061+  009D             switch_b4			.block	8
0062+  00A5             irq_counter			.block	1
0063+  00A6             lamp_index_word		.block	1		;Rotating bit for lamp columns
0064+  00A7             lamp_index_wordx		.block	1		;Rotating bit for extended lamp colulmns
0065+  00A8             lamp_bit			.block	1		;
0066+  00A9             comma_data_temp		.block	1
0067+  00AA             
0068+  00AA             credp1p2_bufferselect	.block	1
0069+  00AB             mbipp3p4_bufferselect	.block	1
0070+  00AC             swap_player_displays	.block	1
0071+  00AD             alpha_digit_cur		.block	2
0072+  00AF             solenoid_address		.block	2
0073+  00B1             solenoid_bitpos		.block	1
0074+  00B2             solenoid_counter		.block	1
0075+  00B3             irqcount16			.block	1
0076+  00B4             switch_queue_pointer	.block	2		;switch_queue_pointer
0077+  00B6             solenoid_queue_pointer	.block	2		;solenoid_queue_pointer
0078+  00B8             temp1				.block	2
0079+  00BA             temp2				.block	2
0080+  00BC             temp3				.block	2		;$00BC
0081+  00BE             sys_temp1			.block	1
0082+  00BF             sys_temp2			.block	1
0083+  00C0             sys_temp3			.block	1
0084+  00C1             sys_temp4			.block	1
0085+  00C2             sys_temp5			.block	1
0086+  00C3             
0087+  00C3             sw_encoded			.block	1
0088+  00C4             sys_temp_w2			.block	2
0089+  00C6             sys_temp_w3			.block	2
0090+  00C8             thread_priority		.block	1
0091+  00C9             unused_ram1			.block	1		;$00
0092+  00CA             irqcount			.block	1
0093+  00CB             vm_base			.block	2
0094+  00CD             vm_nextslot			.block	2
0095+  00CF             current_thread		.block	2
0096+  00D1             vm_tail_thread		.block	2
0097+  00D3             lamp_flash_rate		.block	1		;lamp_flash_rate
0098+  00D4             lamp_flash_count		.block	1
0099+  00D5             thread_timer_byte		.block	1
0100+  00D6             soundcount			.block	1
0101+  00D7             lastsound			.block	1
0102+  00D8             cur_sndflags		.block	1		;$00
0103+  00D9             soundptr			.block	2
0104+  00DB             soundirqcount		.block	2
0105+  00DD             soundindex_com		.block	2
0106+  00DF             sys_soundflags		.block	1		;$00DF
0107+  00E0             soundindex			.block	1		;$00E0
0108+  00E1             csound_timer		.block	2		;$00E1
0109+  00E3             next_sndflags		.block	1		;$00E3
0110+  00E4             next_sndcnt		      .block	1		;$00E4
0111+  00E5             next_sndcmd		      .block	1		;$00E5
0112+  00E6             
0113+  00E6             flag_tilt			.block	1
0114+  00E7             flag_gameover		.block	1
0115+  00E8             random_bool			.block	1
0116+  00E9             flags_selftest		.block	1
0117+  00EA             num_players			.block	1
0118+  00EB             player_up			.block	1
0119+  00EC             pscore_buf			.block	2
0120+  00EE             				.block	1
0121+  00EF             vm_pc				.block	2		
0122+  00F1             num_tilt			.block	1
0123+  00F2             minutetimer			.block	2
0124+  00F4             flag_timer_bip		.block	1		;$00F4
0125+  00F5             randomseed			.block	1
0126+  00F6             x_temp_1			.block	2		;$00
0127+  00F8             eb_x_temp			.block	2		;$00
0128+  00FA             credit_x_temp		.block	2		;$00
0129+  00FC             x_temp_2			.block	2
0130+  00FE             character_ptr		.block	2
0131+  0100             
0132+  0100             ;***************************************************************
0133+  0100             ;* Spare RAM: The last 32 bytes are available to the GAME ROM
0134+  0100             ;*            if needed. Only the first 8 are defined by name.
0135+  0100             ;***************************************************************
0136+  0100             spare_ram			.block	1
0137+  0101             spare_ram+1			.block	1
0138+  0102             spare_ram+2			.block	1
0139+  0103             spare_ram+3			.block	1
0140+  0104             spare_ram+4			.block	1
0141+  0105             spare_ram+5			.block	1
0142+  0106             spare_ram+6			.block	1
0143+  0107             spare_ram+7			.block	1
0144+  0108             
0145+  0108             ;***************************************************************
0146+  0108             ;* CMOS RAM - The cmos RAM data bus is only 4-bits wide, so
0147+  0108             ;*            each byte of data takes two consecutive address
0148+  0108             ;*            locations. The lower address is the most 
0149+  0108             ;*            significant nibble in the byte.
0150+  0108             ;***************************************************************
0151+  0100             	.org $0100
0152+  0100             
0153+  0100             cmos_base
0154+  0100             cmos_csum			.block	2
0155+  0102             
0156+  0102             ;* First section is game audits
0157+  0102             aud_base
0158+  0102             aud_leftcoins		.block	4	;0102-0105	"Coins, Left Chute"
0159+  0106             aud_centercoins		.block	4	;0106-0109	"Coins, Center Chute"
0160+  010A             aud_rightcoins		.block	4	;010A-010D	"Coins, Right Chute"
0161+  010E             aud_paidcredits		.block	4	;010E-0111	Total Paid Credits
0162+  0112             aud_specialcredits	.block	4	;0112-0115	Special Credits
0163+  0116             aud_replaycredits		.block	4	;0116-0119	Replay Score Credits
0164+  011A             aud_matchcredits		.block	4	;011A-011D	Match Credits
0165+  011E             aud_totalcredits		.block	4	;011E-0121	Total Credits
0166+  0122             aud_extraballs		.block	4	;0122-0125	Total Extra Balls *NOT USED IN HYPERBALL*
0167+  0126             aud_avgballtime		.block	4	;0126-0129	Ball Time in Minutes
0168+  012A             aud_totalballs		.block	4	;012A-012D	Total Balls Played
0169+  012E             
0170+  012E             aud_game1			.block	4	;012E-0131	Game Specific Audit#1
0171+  0132             aud_game2			.block	4	;0132-0135	Game Specific Audit#2
0172+  0136             aud_game3			.block	4	;0136-0139	Game Specific Audit#3
0173+  013A             aud_game4			.block	4	;013A-013D	Game Specific Audit#4
0174+  013E             aud_game5			.block	4	;013E-0141	Game Specific Audit#5
0175+  0142             aud_game6			.block	4	;0142-0145	Game Specific Audit#6
0176+  0146             aud_game7			.block	4	;0146-0149	Game Specific Audit#7
0177+  014A             
0178+  014A             aud_autocycles		.block	4	;014A-014D	Number of Auto Cycles Completed
0179+  014E             aud_hstdcredits		.block	2	;014E-014F	2 -HSTD Credits Awarded
0180+  0150             aud_replay1times		.block	4	;0150-0153	2 -Times Exceeded
0181+  0154             aud_replay2times		.block	4	;0154-0157	2 -Times Exceeded
0182+  0158             aud_replay3times		.block	4	;0158-015B	2 -Times Exceeded
0183+  015C             aud_replay4times		.block	4	;015C-015F	2 -Times Exceeded
0184+  0160             				.block	2	;0160-0161	Unknown
0185+  0162             cmos_bonusunits		.block	2	;0162-1063	Hold Over Bonus Coin Units
0186+  0164             cmos_coinunits		.block	2	;0164-0165	Hold Over Total Coin Units
0187+  0166             aud_reset_end					;Defines upper bound of RAM to clear on reset	
0188+  0166             				
0189+  0166             aud_currenthstd		.block	8	;0166-016D	Current HSTD
0190+  016E             aud_currentcredits	.block	2	;016D-016F  Current Credits			
0191+  0170             aud_command			.block	2	;0170-0171	Command Entry
0192+  0172             
0193+  0172             				.block	11
0194+  017D             
0195+  017D             
0196+  017D             
0197+  017D             
0198+  017D             ;* Then adjustments
0199+  017D             adj_base
0200+  017D             adj_cmoscsum			.block	4	;017D-0180	"Game #, ROM Revision"                                     
0201+  0181             adj_backuphstd			.block	2     ;0181-0182	Backup HSTD                                                
0202+  0183             adj_replay1				.block	2     ;0183-0184	Replay 1 Score                                             
0203+  0185             adj_replay2				.block	2     ;0185-0186	Replay 2 Score                                             
0204+  0187             adj_replay3				.block	2     ;0187-0188	Replay 3 Score                                             
0205+  0189             adj_replay4				.block	2     ;0189-018A	Replay 4 Score                                             
0206+  018B             adj_matchenable			.block	2     ;018B-018C	Match: 00=On 01=OFF                                        
0207+  018D             adj_specialaward			.block	2     ;018D-018E	Special:00=Awards Credit 01=Extra Ball 02=Awards Points    
0208+  018F             adj_replayaward			.block	2     ;018F-0190	Replay Scores: 00=Awards Credit 01=Extra Ball              
0209+  0191             adj_maxplumbbobtilts		.block	2     ;0191-0192	Max Plumb Bob Tilts                                        
0210+  0193             adj_energystandard		.block	2     ;0193-0194	Number of Energy Bases to start in standard play                                  
0211+  0195             adj_energyextended		.block	2     ;0195-0196	Number of Energy Bases to start in extended play                                 
0212+  0197             adj_reflex_diff			.block	2     ;0197-0198	Game Specific Adjustment#2 (adj_gameadjust2)                            
0213+  0199             adj_ec_award_level		.block	2     ;0199-019A	Game Specific Adjustment#3 (adj_gameadjust3)                             
0214+  019B             adj_bolt_speed			.block	2     ;019B-019C	Game Specific Adjustment#4 (adj_gameadjust4)                           
0215+  019D             adj_bolt_feed			.block	2     ;019D-019E	Game Specific Adjustment#5 (adj_gameadjust5)                             
0216+  019F             adj_baiter_speed			.block	2     ;019F-01A0	Game Specific Adjustment#6 (adj_gameadjust6)                                 
0217+  01A1             adj_gameadjust7			.block	2     ;01A1-01A2	Game Specific Adjustment#7                                 
0218+  01A3             adj_gameadjust8			.block	2     ;01A3-01A4	Game Specific Adjustment#8                                 
0219+  01A5             adj_gameadjust9			.block	2     ;01A5-01A6	Game Specific Adjustment#9                                 
0220+  01A7             adj_hstdcredits			.block	2     ;01A7-01A8	High Score Credit Award                                    
0221+  01A9             adj_max_extraballs		.block	2     ;01A9-019A	Maximum Extra Balls 00=No Extra Balls                      
0222+  01AB             adj_max_credits			.block	2     ;01AB-01AC	Maximum Credits                                            
0223+  01AD             adj_pricecontrol			.block	2     ;01AD-01AE	Standard/Custom Pricing Control   
0224+  01AF             
0225+  01AF             cmos_pricingbase                         
0226+  01AF             cmos_leftcoinmult			.block	2     ;01AF-01B0	Left Coin Slot Multiplier                                  
0227+  01B1             cmos_centercoinmult		.block	2     ;01B1-01B2	Center Coin Slot Multiplier    
0228+  01B3             cmos_rightcoinmult		.block	2     ;01B3-01B4	Right Coin Slot Multiplier     
0229+  01B5             cmos_coinsforcredit		.block	2     ;01B5-01B6	Coin Units Required for Credit 
0230+  01B7             cmos_bonuscoins			.block	2     ;01B7-01B8	Coin Units Bonus Point         
0231+  01B9             cmos_minimumcoins			.block	2     ;01B9-01BA	Minimum Coin Units             
0232+  01BB             
0233+  01BB             
0234+  01BB             
0235+  01BB             ;***************************************************************
0236+  01BB             ;* Extended RAM area. This RAM space was added in Level 7 games
0237+  01BB             ;* for extended flexibility. The HYPERBALL space is a little
0238+  01BB             ;* different than regular Level 7 games in that the solenoid
0239+  01BB             ;* space is only 8 bytes (instead of 16)
0240+  01BB             ;***************************************************************
0241+  1100             	.org $1100
0242+  1100             
0243+  1100             switch_queue		.block	$18
0244+  1118             switch_queue_end
0245+  1118             
0246+  1118             sol_queue			.block	$10
0247+  1128             sol_queue_end
0248+  1128             
0249+  1128             score_queue			.block	8
0250+  1130             score_queue_end
0251+  1130             
0252+  1130             	.org $1130
0253+  1130             exe_buffer			.block	$10		;Temp code buffer for exe macro
0254+  1140             
0255+  1140             ;define the size of each player data block first
0256+  1140             gamedata_size		.equ		$24
0257+  1140             ;then apply it to all players
0258+  1140             p1_gamedata			.block	gamedata_size
0259+  1164             p2_gamedata			.block	gamedata_size
0260+  1188             
0261+  1188             game_var_0			.block 	2
0262+  118A             game_var_1			.block 	2
0263+  118C             game_var_2			.block 	2
0264+  118E             game_var_3			.block 	2
0265+  1190             game_var_4			.block 	2
0266+  1192             game_var_5			.block 	2
0267+  1194             game_var_6			.block 	2
0268+  1196             game_var_7			.block 	2
0269+  1198             			
0270+  1198             game_var_unknown		.block	2
0271+  119A             				
0272+  119A             current_credits		.block	2
0273+  119C             
0274+  119C             threadpool_base		.block	1
0275+  119D             
0276+  119D              
0277+  1396              	.org $1396
0278+  1396             hy_unknown_1		.block	2
0279+  1398             hy_unknown_2		.block	2
0280+  139A             p1_ecs			.block 	1
0281+  139B             p2_ecs			.block	1
0282+  139C             hy_unknown_3		.block	1
0283+  139D             hy_unknown_4		.block	1
0284+  139E             hy_unknown_5		.block	1
0285+  139F             hy_unknown_6		.block	1
0286+  13A0             hy_unknown_7		.block	1
0287+  13A1             hy_unknown_8		.block	1
0288+  13A2             hy_unknown_9		.block	1
0289+  13A3             hy_unknown_a		.block	1
0290+  13A4             hy_unknown_b		.block	1
0291+  13A5             hy_unknown_c		.block	1
0292+  13A6             hy_unknown_d		.block	1
0293+  13A7             hy_unknown_e		.block	1
0294+  13A8             
0295+  13A8             
0296+  13A8             	
0297+  13A8             
0298+  13A8             ;***************************************************************
0299+  13A8             ;* PIA Input/Output hardware
0300+  13A8             ;***************************************************************
0301+  13A8             ;* Some equates for indexing
0302+  13A8             pia_pir			.equ		0
0303+  13A8             pia_control			.equ		1
0304+  13A8             pia_pir_a			.equ		0
0305+  13A8             pia_control_a		.equ		1
0306+  13A8             pia_pir_b			.equ		2
0307+  13A8             pia_control_b		.equ		3
0308+  13A8             
0309+  13A8             pia_sound_data		.equ		$2100
0310+  13A8             pia_sound_ctrl		.equ		$2101
0311+  13A8             pia_comma_data		.equ		$2102
0312+  13A8             pia_comma_ctrl		.equ		$2103
0313+  13A8             
0314+  13A8             pia_sol_low_data		.equ		$2200
0315+  13A8             pia_sol_low_ctrl		.equ		$2201
0316+  13A8             pia_sol_high_data		.equ		$2202
0317+  13A8             pia_sol_high_ctrl		.equ		$2203
0318+  13A8             
0319+  13A8             pia_lamp_row_data		.equ		$2400
0320+  13A8             pia_lamp_row_ctrl		.equ		$2401
0321+  13A8             pia_lamp_col_data		.equ		$2402
0322+  13A8             pia_lamp_col_ctrl		.equ		$2403
0323+  13A8             
0324+  13A8             pia_disp_digit_data	.equ		$2800
0325+  13A8             pia_disp_digit_ctrl	.equ		$2801
0326+  13A8             pia_disp_seg_data		.equ		$2802
0327+  13A8             pia_disp_seg_ctrl		.equ		$2803
0328+  13A8             
0329+  13A8             pia_switch_return_data	.equ		$3000
0330+  13A8             pia_switch_return_ctrl	.equ		$3001
0331+  13A8             pia_switch_strobe_data	.equ		$3002
0332+  13A8             pia_switch_strobe_ctrl	.equ		$3003
0333+  13A8             
0334+  13A8             ;*******************************************
0335+  13A8             ;* Special PIA for Hyperball Driver Boards *
0336+  13A8             ;* Controls the Alpha-Numeric Display      *
0337+  13A8             ;*******************************************
0338+  13A8             pia_alphanum_digit_data	.equ		$4000
0339+  13A8             pia_alphanum_digit_ctrl	.equ		$4001
0340+  13A8             pia_alphanum_seg_data	.equ		$4002
0341+  13A8             pia_alphanum_seg_ctrl	.equ		$4003
0342+  13A8             
0036   13A8             
0037   13A8             
0038   D000              	.org $d000
0039   D000             
0040   D000             ;---------------------------------------------------------------------------
0041   D000             ;  Default game data and basic system tables start at $e000, these can not  
0042   D000             ;  ever be moved
0043   D000             ;---------------------------------------------------------------------------
0044   D000             
0045   D000 35 09       gr_gamenumber		.dw $3509
0046   D002 F4          gr_romrevision		.db $F4
0047   D003 B2 A5       gr_cmoscsum			.db $B2,$A5
0048   D005 05          gr_backuphstd		.db $05
0049   D006 00          gr_replay1			.db $00
0050   D007 00          gr_replay2			.db $00
0051   D008 00          gr_replay3			.db $00
0052   D009 00          gr_replay4			.db $00
0053   D00A 01          gr_matchenable		.db $01
0054   D00B 01          gr_specialaward		.db $01
0055   D00C 00          gr_replayaward		.db $00
0056   D00D 03          gr_maxplumbbobtilts	.db $03
0057   D00E 02          gr_numberofballs		.db $02
0058   D00F 03          gr_gameadjust1		.db $03
0059   D010 05          gr_gameadjust2		.db $05
0060   D011 04          gr_gameadjust3		.db $04
0061   D012 12          gr_gameadjust4		.db $12
0062   D013 05          gr_gameadjust5		.db $05
0063   D014 05          gr_gameadjust6		.db $05
0064   D015 05          gr_gameadjust7		.db $05
0065   D016 00          gr_gameadjust8		.db $00
0066   D017 00          gr_gameadjust9		.db $00
0067   D018 00          gr_hstdcredits		.db $00
0068   D019 00          gr_max_extraballs		.db $00
0069   D01A 30          gr_max_credits		.db $30
0070   D01B             ;---------------
0071   D01B             ;Pricing Data  |
0072   D01B             ;---------------
0073   D01B             
0074   D01B 01          gr_pricingdata		.db $01	;Left Coin Mult
0075   D01C 04          				.db $04	;Center Coin Mult
0076   D01D 01          				.db $01	;Right Coin Mult
0077   D01E 01          				.db $01	;Coin Units Required
0078   D01F 00          				.db $00	;Bonus Coins
0079   D020 00          				.db $00	;Minimum Coin Units
0080   D021             
0081   D021 09          				.db $09	;Left Coin Mult
0082   D022 45          				.db $45	;Center Coin Mult
0083   D023 18          				.db $18	;Right Coin Mult
0084   D024 05          				.db $05	;Coin Units Required
0085   D025 45          				.db $45	;Bonus Coins
0086   D026 00          				.db $00	;Minimum Coin Units
0087   D027             
0088   D027 01          				.db $01	;Left Coin Mult
0089   D028 04          				.db $04	;Center Coin Mult
0090   D029 01          				.db $01	;Right Coin Mult
0091   D02A 02          				.db $02	;Coin Units Required
0092   D02B 04          				.db $04	;Bonus Coins
0093   D02C 00          				.db $00	;Minimum Coin Units
0094   D02D             
0095   D02D 01          				.db $01	;Left Coin Mult
0096   D02E 16          				.db $16	;Center Coin Mult
0097   D02F 06          				.db $06	;Right Coin Mult
0098   D030 02          				.db $02	;Coin Units Required
0099   D031 00          				.db $00	;Bonus Coins
0100   D032 00          				.db $00	;Minimum Coin Units
0101   D033             
0102   D033 03          				.db $03	;Left Coin Mult
0103   D034 15          				.db $15	;Center Coin Mult
0104   D035 03          				.db $03	;Right Coin Mult
0105   D036 04          				.db $04	;Coin Units Required
0106   D037 15          				.db $15	;Bonus Coins
0107   D038 00          				.db $00	;Minimum Coin Units
0108   D039             
0109   D039 01          				.db $01	;Left Coin Mult
0110   D03A 00          				.db $00	;Center Coin Mult
0111   D03B 04          				.db $04	;Right Coin Mult
0112   D03C 01          				.db $01	;Coin Units Required
0113   D03D 00          				.db $00	;Bonus Coins
0114   D03E 00          				.db $00	;Minimum Coin Units
0115   D03F             
0116   D03F 01          				.db $01	;Left Coin Mult
0117   D040 00          				.db $00	;Center Coin Mult
0118   D041 02          				.db $02	;Right Coin Mult
0119   D042 01          				.db $01	;Coin Units Required
0120   D043 00          				.db $00	;Bonus Coins
0121   D044 00          				.db $00	;Minimum Coin Units
0122   D045             
0123   D045 01          				.db $01	;Left Coin Mult
0124   D046 00          				.db $00	;Center Coin Mult
0125   D047 02          				.db $02	;Right Coin Mult
0126   D048 02          				.db $02	;Coin Units Required
0127   D049 00          				.db $00	;Bonus Coins
0128   D04A 00          				.db $00	;Minimum Coin Units
0129   D04B             
0130   D04B             ;--------------
0131   D04B             ;System Data  |
0132   D04B             ;--------------
0133   D04B             
0134   D04B 1C          gr_maxthreads		.db $1C
0135   D04C 03          gr_extendedromtest	.db $03
0136   D04D 22          gr_lastswitch		.db (switchtable_end-switchtable)/3
0137   D04E 01          gr_numplayers		.db $01
0138   D04F             
0139   D04F E3 69       gr_lamptable_ptr		.dw lamptable
0140   D051 E4 0B       gr_switchtable_ptr	.dw switchtable
0141   D053 E3 99       gr_soundtable_ptr		.dw soundtable
0142   D055             
0143   D055 05          gr_lampflashrate		.db $05
0144   D056             
0145   D056 0D          gr_specialawardsound	.db $0D	;Special Sound
0146   D057 03          gr_p1_startsound		.db $03
0147   D058 03          gr_p2_startsound		.db $03
0148   D059 1A          gr_unknownvar1		.db $1A
0149   D05A 11          gr_hssound			.db $11
0150   D05B 1A          gr_gameoversound		.db $1A
0151   D05C 00          gr_creditsound		.db $00
0152   D05D             
0153   D05D 5F          gr_gameover_lamp		.db $5F
0154   D05E 5F          gr_tilt_lamp		.db $5F
0155   D05F             
0156   D05F DE A7       gr_gameoverthread_ptr	.dw gameover_entry
0157   D061 E4 CB       gr_character_defs_ptr	.dw character_defs
0158   D063 05          gr_coinlockout		.db $05
0159   D064 E1 89       gr_highscoresound		.dw highscoresound
0160   D066             
0161   D066             gr_switchtypetable
0162   D066 00 02       				.db $00,$02
0163   D068 00 09       				.db $00,$09
0164   D06A 00 04       				.db $00,$04
0165   D06C 00 01       				.db $00,$01
0166   D06E 02 05       				.db $02,$05
0167   D070 08 05       				.db $08,$05
0168   D072 00 00       				.db $00,$00
0169   D074             
0170   D074 0000000000  gr_playerstartdata	.db $00,$00,$00,$00,$00
0171   D079 0000000000  				.db $00,$00,$00,$00,$00
0172   D07E 0000000000  				.db $00,$00,$00,$00,$00
0173   D083 0000000000  				.db $00,$00,$00,$00,$00
0174   D088 0000000000  				.db $00,$00,$00,$00,$00
0175   D08D 0000000000  				.db $00,$00,$00,$00,$00
0176   D092             
0177   D092 0000000000  gr_playerresetdata	.db $00,$00,$00,$00,$00
0178   D097 0000000000  				.db $00,$00,$00,$00,$00
0179   D09C FF03000000  				.db $FF,$03,$00,$00,$00
0180   D0A1 0000000000  				.db $00,$00,$00,$00,$00
0181   D0A6 0000000000  				.db $00,$00,$00,$00,$00
0182   D0AB 0000000000  				.db $00,$00,$00,$00,$00
0183   D0B0             
0184   D0B0 39          gr_switch_event		rts\ .db $00	;(Switch Event)
0184   D0B1 00          
0185   D0B2 39          gr_sound_event		rts\ .db $DD	;(Sound Event )
0185   D0B3 DD          
0186   D0B4 39          gr_score_event		rts\ .db $00	;(Score Event)
0186   D0B5 00          
0187   D0B6 39          gr_eb_event		rts\ .db $00		;(Extra Ball Event)
0187   D0B7 00          
0188   D0B8 20 22       gr_special_event		bra special_event	;(Special Event)
0189   D0BA 39          gr_macro_event		rts\ .db $00	;(Start Macro Event)
0189   D0BB 00          
0190   D0BC 39          gr_ballstart_event		rts\ .db $00;(Ball Start Event)
0190   D0BD 00          
0191   D0BE 39          gr_addplayer_event		rts\ .db $00;(Add Player Event)
0191   D0BF 00          
0192   D0C0 39          gr_gameover_event		rts\ .db $00	;(Game Over Event)
0192   D0C1 00          
0193   D0C2 39          gr_hstdtoggle_event		rts\ .db $00;(HSTD Toggle Event)
0193   D0C3 00          
0194   D0C4             
0195   D0C4 D1 08       hook_reset_ptr		.dw hook_reset		;Reset
0196   D0C6 D0 BA       hook_mainloop_ptr		.dw gr_macro_event		;Main Loop Begin
0197   D0C8 E1 72       hook_coin_ptr		.dw hook_coin		;Coin Accepted
0198   D0CA D1 20       hook_gamestart_ptr	.dw hook_gamestart	;New Game Start
0199   D0CC D3 B0       hook_playerinit_ptr	.dw hook_playerinit	;Init New Player
0200   D0CE D1 FF       hook_outhole_ptr		.dw hook_outhole		;Outhole
0201   D0D0             
0202   D0D0             ;------------------------ end system data ---------------------------
0203   D0D0             
0204   D0D0 7E EF 36    gr_irq_entry	jmp	sys_irq_entry
0205   D0D3             
0206   D0D3 0E          gr_swi_entry	cli	
0207   D0D4 31          			ins	
0208   D0D5 31          			ins	
0209   D0D6 31          			ins	
0210   D0D7 31          			ins	
0211   D0D8 31          			ins	
0212   D0D9 7E F4 32    			jmp	macro_start
0213   D0DC             
0214   D0DC CE 01 99    special_event	ldx	#adj_ec_award_level
0215   D0DF BD EE A2    			jsr	cmosinc_b
0216   D0E2 27 DE       			beq	gr_hstdtoggle_event
0217   D0E4 DE FA       			ldx	credit_x_temp
0218   D0E6 09          			dex	
0219   D0E7 09          			dex	
0220   D0E8 BD FD DB    			jsr	cmos_a
0221   D0EB 1B          			aba	
0222   D0EC 19          			daa	
0223   D0ED 8D 4C       			bsr	gb_01
0224   D0EF 86 12       			ldaa	#$12
0225   D0F1 BD EC 3B    			jsr	isnd_once
0226   D0F4 C6 01       			ldab	#$01
0227   D0F6 BD D9 CB    			jsr	add_b_cur_ecs
0228   D0F9 CE 00 5E    			ldx	#wave_p2_b0
0229   D0FC 96 EB       			ldaa	player_up
0230   D0FE 27 03       			beq	gb_02
0231   D100 CE 00 5C    			ldx	#wave_p1_b0
0232   D103 86 01       gb_02			ldaa	#$01
0233   D105 7E D1 CC    			jmp	add_a_to_wave
0234   D108             
0235   D108 BD EE DC    hook_reset		jsr	restore_hstd
0236   D10B CE 01 2E    			ldx	#aud_game1
0237   D10E DF B8       			stx	temp1
0238   D110 CE E5 D0    			ldx	#msg_ssr_ejs
0239   D113 E6 00       			ldab	$00,X
0240   D115 C4 0F       			andb	#$0F
0241   D117 08          			inx	
0242   D118 7E EF 23    			jmp	copyblock2
0243   D11B             
0244   D11B 8D EB       sw_hstd_res		bsr	hook_reset
0245   D11D 7E E9 C4    to_kill		jmp	killthread
0246   D120             
0247   D120 CE 13 A0    hook_gamestart	ldx	#hy_unknown_7
0248   D123 6F 00       gb_03			clr	$00,X
0249   D125 08          			inx	
0250   D126 8C 13 A7    			cpx	#hy_unknown_e
0251   D129 26 F8       			bne	gb_03
0252   D12B CE 01 99    			ldx	#adj_ec_award_level
0253   D12E 86 F3       			ldaa	#$F3
0254   D130 BD EA 83    			jsr	solbuf
0255   D133 BD D1 B9    			jsr	jmp_cmosa
0256   D136 CE 01 46    			ldx	#aud_game7
0257   D139 8D 00       			bsr	gb_01
0258   D13B 7E EE EE    gb_01			jmp	a_cmosinc
0259   D13E             
0260   D13E 4F          sw_1p_start		clra	
0261   D13F 4C          sw_2p_start		inca	
0262   D140 D6 E7       			ldab	flag_gameover
0263   D142 27 2E       			beq	gb_06
0264   D144 B7 13 9E    			staa	hy_unknown_5
0265   D147 16          			tab	
0266   D148 CE 01 AB    			ldx	#adj_max_credits
0267   D14B 8D 6C       			bsr	jmp_cmosa
0268   D14D 27 08       			beq	gb_07
0269   D14F CE 01 6E    			ldx	#aud_currentcredits
0270   D152 8D 65       			bsr	jmp_cmosa
0271   D154 11          			cba	
0272   D155 25 C6       			bcs	to_kill
0273   D157 86 08       gb_07			ldaa	#$08
0274   D159 CE FB A5    			ldx	#credit_button
0275   D15C BD D5 0E    			jsr	newthreadp
0276   D15F 5A          			decb	
0277   D160 26 F5       			bne	gb_07
0278   D162 CE 03 03    			ldx	#$0303
0279   D165 FF 13 9A    			stx	p1_ecs
0280   D168 8D 5A       			bsr	get_aud_ec_ex
0281   D16A 27 B1       			beq	to_kill
0282   D16C 3F          			swi	
0283   D16D             			PRI_($48)				;Priority=#48
0283   D16D 52 48       
0284   D16F             gs_forever		SLEEP_(5)
0284   D16F             
0284   D16F 75          
0284   D170~            gs_forever		SLEEP_(5)
0284   D170~            gs_forever		SLEEP_(5)
0284   D170             
0285   D170             			JMPR_(gs_forever)
0285   D170~            			JMPR_(gs_forever)
0285   D170~            			JMPR_(gs_forever)
0285   D170             
0285   D170~            			JMPR_(gs_forever)
0285   D170~            			JMPR_(gs_forever)
0285   D170             
0285   D170             
0285   D170 8F          
0285   D171 FD          
0286   D172             		
0287   D172 B1 13 9E    gb_06			cmpa	hy_unknown_5
0288   D175 26 A6       			bne	to_kill
0289   D177 86 48       			ldaa	#$48
0290   D179 C6 FF       			ldab	#$FF
0291   D17B BD EA 60    			jsr	check_threadid
0292   D17E 25 69       			bcs	to_kill2
0293   D180 BD D1 FA    			jsr	killthreads_ff
0294   D183 F6 13 9E    			ldab	hy_unknown_5
0295   D186 CE 01 AB    			ldx	#adj_max_credits
0296   D189 8D 2E       			bsr	jmp_cmosa
0297   D18B 27 06       			beq	gb_52
0298   D18D B6 11 9A    			ldaa	current_credits
0299   D190 11          			cba	
0300   D191 25 56       			bcs	to_kill2
0301   D193 C1 02       gb_52			cmpb	#$02
0302   D195 26 10       			bne	gb_53
0303   D197 8D 23       			bsr	extend_game
0304   D199 F6 13 9B    			ldab	p2_ecs
0305   D19C 36          			psha	
0306   D19D 1B          			aba	
0307   D19E B7 13 9B    			staa	p2_ecs
0308   D1A1 32          			pula	
0309   D1A2 CE 00 5C    			ldx	#wave_p1_b0
0310   D1A5 8D 25       			bsr	add_a_to_wave
0311   D1A7 8D 13       gb_53			bsr	extend_game
0312   D1A9 F6 13 9A    			ldab	p1_ecs
0313   D1AC 36          			psha	
0314   D1AD 1B          			aba	
0315   D1AE B7 13 9A    			staa	p1_ecs
0316   D1B1 32          			pula	
0317   D1B2 CE 00 5E    			ldx	#wave_p2_b0
0318   D1B5 8D 15       			bsr	add_a_to_wave
0319   D1B7 20 30       			bra	to_kill2
0320   D1B9             
0321   D1B9 7E FD DB    jmp_cmosa		jmp	cmos_a
0322   D1BC             
0323   D1BC CE 01 6E    extend_game		ldx	#aud_currentcredits
0324   D1BF 8D F8       			bsr	jmp_cmosa
0325   D1C1 BD FB DF    			jsr	lesscredit
0326   D1C4 CE 01 95    get_aud_ec_ex	ldx	#adj_energyextended
0327   D1C7 8D F0       			bsr	jmp_cmosa
0328   D1C9 84 0F       			anda	#$0F
0329   D1CB 39          			rts	
0330   D1CC             
0331   D1CC E6 00       add_a_to_wave	ldab	$00,X
0332   D1CE 2A 02       			bpl	gb_4D
0333   D1D0 C4 0F       			andb	#$0F
0334   D1D2 1B          gb_4D			aba	
0335   D1D3 19          			daa	
0336   D1D4 81 09       			cmpa	#$09
0337   D1D6 2E 02       			bgt	gb_4E
0338   D1D8 8A F0       			oraa	#$F0
0339   D1DA A7 00       gb_4E			staa	$00,X
0340   D1DC 39          			rts	
0341   D1DD             
0342   D1DD CE 00 66    ani_game_lr		ldx	#alpha_b0+6
0343   D1E0 FF 11 8E    			stx	game_var_3
0344   D1E3 CE E5 5F    			ldx	#msg_game
0345   D1E6 BD D2 49    			jsr	slide_r
0346   D1E9 7E E9 C4    to_kill2		jmp	killthread
0347   D1EC             
0348   D1EC CE 00 65    ani_over_rl		ldx	#alpha_b0+5
0349   D1EF FF 11 92    			stx	game_var_5
0350   D1F2 CE E5 65    			ldx	#msg_over
0351   D1F5 BD D2 58    			jsr	slide_l
0352   D1F8 20 EF       			bra	to_kill2
0353   D1FA             
0354   D1FA C6 FF       killthreads_ff	ldab	#$FF
0355   D1FC 7E EA 5B    			jmp	kill_threads
0356   D1FF             
0357   D1FF 86 78       hook_outhole	ldaa	#$78
0358   D201 8D F7       			bsr	killthreads_ff
0359   D203 96 E8       			ldaa	random_bool
0360   D205 26 05       			bne	gb_04
0361   D207 86 29       			ldaa	#$29
0362   D209 BD EB 3D    			jsr	score_main
0363   D20C 7C 00 E6    gb_04			inc	flag_tilt
0364   D20F D6 5E       			ldab	wave_p2_b0
0365   D211 96 EB       			ldaa	player_up
0366   D213 27 02       			beq	gb_05
0367   D215 D6 5C       			ldab	wave_p1_b0
0368   D217 C1 F0       gb_05			cmpb	#$F0
0369   D219 26 2B       			bne	goto_sme
0370   D21B CE E5 58    			ldx	#msg_player
0371   D21E BD D3 0B    			jsr	load_message
0372   D221 8B 1C       			adda	#$1C
0373   D223 DE B8       			ldx	temp1
0374   D225 A7 02       			staa	$02,X
0375   D227 96 EA       			ldaa	num_players
0376   D229 27 04       			beq	show_gameover
0377   D22B BD E9 7C    			jsr	addthread
0378   D22E 60          			.db $60
0379   D22F             
0380   D22F CE D1 DD    show_gameover	ldx	#ani_game_lr
0381   D232 BD EA 24    			jsr	newthread_06
0382   D235 CE D1 EC    			ldx	#ani_over_rl
0383   D238 BD EA 24    			jsr	newthread_06
0384   D23B 8D 09       			bsr	goto_sme
0385   D23D 86 09       			ldaa	#$09
0386   D23F BD EC 3B    			jsr	isnd_once
0387   D242 BD E9 7C    			jsr	addthread
0388   D245 F0          			.db $F0
0389   D246             
0390   D246 7E D2 D6    goto_sme		jmp	setup_msg_endptr
0391   D249             
0392   D249 A6 00       slide_r		ldaa	$00,X
0393   D24B 84 0F       			anda	#$0F
0394   D24D BD EE 3E    			jsr	xplusa
0395   D250 E6 00       gb_5D			ldab	$00,X
0396   D252 09          			dex	
0397   D253 8D 21       gb_0D			bsr	step_r
0398   D255 26 F9       			bne	gb_5D
0399   D257 39          			rts	
0400   D258             
0401   D258 A6 00       slide_l		ldaa	$00,X
0402   D25A 84 0F       			anda	#$0F
0403   D25C 08          gb_5F			inx	
0404   D25D E6 00       			ldab	$00,X
0405   D25F 8D 2A       gb_0F			bsr	step_l
0406   D261 26 F9       			bne	gb_5F
0407   D263 39          			rts	
0408   D264             
0409   D264 8D 55       			bsr	gb_0C
0410   D266 8D E1       			bsr	slide_r
0411   D268 5F          			clrb	
0412   D269 86 01       			ldaa	#$01
0413   D26B 20 E6       			bra	gb_0D
0414   D26D             
0415   D26D 8D 41       ani_msg_rlslide	bsr	gb_0E
0416   D26F 8D E7       			bsr	slide_l
0417   D271 5F          			clrb	
0418   D272 86 01       gj_2E			ldaa	#$01
0419   D274 20 E9       			bra	gb_0F
0420   D276             
0421   D276 36          step_r		psha	
0422   D277 37          			pshb	
0423   D278 FF 11 8C    			stx	game_var_2
0424   D27B CE 00 60    			ldx	#alpha_b0
0425   D27E 17          gb_60			tba	
0426   D27F E6 00       			ldab	$00,X
0427   D281 A7 00       			staa	$00,X
0428   D283 08          			inx	
0429   D284 BC 11 8E    			cpx	game_var_3
0430   D287 26 F5       			bne	gb_60
0431   D289 20 13       			bra	gb_61
0432   D28B             
0433   D28B 36          step_l		psha	
0434   D28C 37          			pshb	
0435   D28D FF 11 8C    			stx	game_var_2
0436   D290 CE 00 6B    			ldx	#alpha_b0+11
0437   D293 17          gb_A0			tba	
0438   D294 E6 00       			ldab	$00,X
0439   D296 A7 00       			staa	$00,X
0440   D298 09          			dex	
0441   D299 BC 11 92    			cpx	game_var_5
0442   D29C 26 F5       			bne	gb_A0
0443   D29E FE 11 8C    gb_61			ldx	game_var_2
0444   D2A1 33          			pulb	
0445   D2A2 96 0A       			ldaa	game_ram_a
0446   D2A4 26 02       			bne	gb_A1
0447   D2A6 86 09       			ldaa	#$09
0448   D2A8 97 D5       gb_A1			staa	thread_timer_byte
0449   D2AA 32          			pula	
0450   D2AB BD E9 71    			jsr	delaythread
0451   D2AE 4A          			deca	
0452   D2AF 39          			rts	
0453   D2B0             
0454   D2B0 FF 11 90    gb_0E			stx	game_var_4
0455   D2B3 CE 00 5F    			ldx	#wave_p2_b1
0456   D2B6 FF 11 92    			stx	game_var_5
0457   D2B9 20 09       			bra	gb_5E
0458   D2BB             
0459   D2BB FF 11 90    gb_0C			stx	game_var_4
0460   D2BE CE 00 6C    			ldx	#alpha_b1
0461   D2C1 FF 11 8E    			stx	game_var_3
0462   D2C4 FE 11 90    gb_5E			ldx	game_var_4
0463   D2C7 39          			rts	
0464   D2C8             
0465   D2C8 8D E6       gj_20			bsr	gb_0E
0466   D2CA 8D BF       gb_93			bsr	step_l
0467   D2CC 26 FC       			bne	gb_93
0468   D2CE 39          			rts	
0469   D2CF             
0470   D2CF 8D EA       gj_3D			bsr	gb_0C
0471   D2D1 8D A3       gb_10			bsr	step_r
0472   D2D3 26 FC       			bne	gb_10
0473   D2D5 39          			rts	
0474   D2D6             
0475   D2D6 36          setup_msg_endptr	psha	
0476   D2D7 37          			pshb	
0477   D2D8 DF C2       			stx	sys_temp5
0478   D2DA CE 00 60    			ldx	#alpha_b0
0479   D2DD DF B8       			stx	temp1
0480   D2DF 8D 73       			bsr	clr_next_12
0481   D2E1 DE C2       			ldx	sys_temp5
0482   D2E3 E6 00       			ldab	$00,X
0483   D2E5 DE B8       			ldx	temp1
0484   D2E7 BD EC 32    			jsr	split_ab
0485   D2EA F7 11 88    			stab	game_var_0
0486   D2ED BD EE 8C    			jsr	xplusb
0487   D2F0 DF B8       			stx	temp1
0488   D2F2 DE C2       			ldx	sys_temp5
0489   D2F4 33          pulab_rts		pulb	
0490   D2F5 32          			pula	
0491   D2F6 39          			rts	
0492   D2F7             
0493   D2F7 36          ani_circle		psha	
0494   D2F8 37          			pshb	
0495   D2F9 86 26       gb_91			ldaa	#$26
0496   D2FB 5A          			decb	
0497   D2FC 27 F6       			beq	pulab_rts
0498   D2FE A7 00       gb_92			staa	$00,X
0499   D300 BD E9 7C    			jsr	addthread
0500   D303 02          			.db $02
0501   D304 4C          			inca	
0502   D305 81 2A       			cmpa	#$2A
0503   D307 27 F0       			beq	gb_91
0504   D309 20 F3       			bra	gb_92
0505   D30B             
0506   D30B 8D C9       load_message	bsr	setup_msg_endptr
0507   D30D E6 00       gj_29			ldab	$00,X
0508   D30F C4 0F       			andb	#$0F
0509   D311 08          			inx	
0510   D312 7E EE FB    			jmp	copyblock
0511   D315             
0512   D315 8D BF       ani_msg_letters	bsr	setup_msg_endptr
0513   D317 A6 00       			ldaa	$00,X
0514   D319 84 0F       			anda	#$0F
0515   D31B C6 0B       gb_CD			ldab	#$0B
0516   D31D 36          			psha	
0517   D31E 08          			inx	
0518   D31F FF 11 8A    			stx	game_var_1
0519   D322 A6 00       			ldaa	$00,X
0520   D324 97 6B       			staa	alpha_b0+11
0521   D326 CE 00 6A    			ldx	#alpha_b0+10
0522   D329 BD E9 7C    gb_CC			jsr	addthread
0523   D32C 04          			.db $04
0524   D32D A6 01       			ldaa	$01,X
0525   D32F A7 00       			staa	$00,X
0526   D331 4F          			clra	
0527   D332 A7 01       			staa	$01,X
0528   D334 09          			dex	
0529   D335 5A          			decb	
0530   D336 F1 11 88    			cmpb	game_var_0
0531   D339 26 EE       			bne	gb_CC
0532   D33B FE 11 8A    			ldx	game_var_1
0533   D33E 7C 11 88    			inc	game_var_0
0534   D341 32          			pula	
0535   D342 4A          			deca	
0536   D343 26 D6       			bne	gb_CD
0537   D345 39          			rts	
0538   D346             
0539   D346 BD EA F8    gj_0D			jsr	update_commas
0540   D349 5F          gj_08			clrb	
0541   D34A 20 02       			bra	clr_alpha_set_bx
0542   D34C             
0543   D34C C6 7F       clr_alpha_set_b1	ldab	#$7F
0544   D34E BD D8 58    clr_alpha_set_bx	jsr	stab_all_alphmsk
0545   D351 CE 00 6C    			ldx	#alpha_b1
0546   D354 4F          clr_next_12		clra	
0547   D355 C6 0C       			ldab	#$0C
0548   D357 7E F8 A9    			jmp	write_range
0549   D35A             
0550   D35A 5AFEF2FFC010sw_plumbtilt	.db $5A,$FE,$F2,$FF,$C0,$10	;BEQ_(BIT#80 P #FF) to tilt_kill
0551   D360             			EXE_($06)				;CPU Execute Next 6 Bytes
0551   D360~            			EXE_($06)				;CPU Execute Next 6 Bytes
0551   D360~            			EXE_($06)				;CPU Execute Next 6 Bytes
0551   D360             
0551   D360 48          
0551   D361             
0552   D361 CE D3 71    			ldx	#tilt_sleeper
0553   D364 BD EA 24    			jsr	newthread_06
0554   D367 F5          			SND_($15)				;Sound #15
0555   D368             			JSRD_(tilt_warning)		
0555   D368 57          
0555   D369 FB FD       
0556   D36B 5A F0 09    			.db $5A,$F0,$09			;BEQ_TILT to game_tilt
0557   D36E             			SOL_($46)				; Sol#6:gi_relay_pf
0557   D36E 31 46       
0558   D370             tilt_kill		KILL_					;Remove This Thread
0558   D370 03          
0559   D371             
0560   D371 3F          tilt_sleeper	swi	
0561   D372             			PRI_($C0)				;Priority=#C0
0561   D372 52 C0       
0562   D374             			SLEEP_(24)
0562   D374~            			SLEEP_(24)
0562   D374~            			SLEEP_(24)
0562   D374             
0562   D374 53 18       
0562   D376             
0563   D376             			KILL_					;Remove This Thread
0563   D376 03          
0564   D377             
0565   D377             game_tilt		SOL_($F6)				; Sol#6:gi_relay_pf
0565   D377 31 F6       
0566   D379             			PRI_($A0)				;Priority=#A0
0566   D379 52 A0       
0567   D37B             			REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
0567   D37B 55 08 00    
0568   D37E             			JSRR_(gj_06)			
0568   D37E~            			JSRR_(gj_06)			
0568   D37E~            			JSRR_(gj_06)			
0568   D37E             
0568   D37E~            			JSRR_(gj_06)			
0568   D37E~            			JSRR_(gj_06)			
0568   D37E             
0568   D37E             
0568   D37E 93          
0568   D37F 8A          
0569   D380             			CPUX_					;Resume CPU Execution
0569   D380 04          
0570   D381 CE E5 F4    			ldx	#msg_tilt
0571   D384 8D 85       			bsr	load_message
0572   D386 8D C4       			bsr	clr_alpha_set_b1
0573   D388 86 31       			ldaa	#$31
0574   D38A BD D8 53    gb_99			jsr	invert_alphamsk
0575   D38D BD E9 7C    			jsr	addthread
0576   D390 06          			.db $06
0577   D391 4A          			deca	
0578   D392 26 F6       			bne	gb_99
0579   D394 CE 00 00    			ldx	#vm_reg_a
0580   D397 FF 11 98    			stx	game_var_unknown
0581   D39A 3F          			swi	
0582   D39B             			JSRDR_(setup_msg_endptr)
0582   D39B~            			JSRDR_(setup_msg_endptr)
0582   D39B~            			JSRDR_(setup_msg_endptr)
0582   D39B             
0582   D39B~            			JSRDR_(setup_msg_endptr)
0582   D39B~            			JSRDR_(setup_msg_endptr)
0582   D39B             
0582   D39B             
0582   D39B AF          
0582   D39C 39          
0583   D39D             			JSRDR_(stab_all_alphmsk)
0583   D39D~            			JSRDR_(stab_all_alphmsk)
0583   D39D~            			JSRDR_(stab_all_alphmsk)
0583   D39D             
0583   D39D~            			JSRDR_(stab_all_alphmsk)
0583   D39D~            			JSRDR_(stab_all_alphmsk)
0583   D39D             
0583   D39D             
0583   D39D A4          
0583   D39E B9          
0584   D39F             			RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
0584   D39F             
0584   D39F 51 60       
0584   D3A1~            			RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
0584   D3A1~            			RAMCPY_($6,$0)			;Copy RAM;RAM,6 = RAM,0
0584   D3A1             
0585   D3A1             gj_45			SOL_($06,$01,$02,$07)		; Sol#6:gi_relay_pf Sol#1:energy_flash Sol#2:p1_flash Sol#7:p2_flash
0585   D3A1 3406010207  
0586   D3A6             			PRI_($00)				;Priority=#00
0586   D3A6 52 00       
0587   D3A8             			JSRDR_(gj_05)		
0587   D3A8~            			JSRDR_(gj_05)		
0587   D3A8~            			JSRDR_(gj_05)		
0587   D3A8             
0587   D3A8~            			JSRDR_(gj_05)		
0587   D3A8~            			JSRDR_(gj_05)		
0587   D3A8             
0587   D3A8             
0587   D3A8 A5          
0587   D3A9 DD          
0588   D3AA             			JSRD_(update_commas)		
0588   D3AA 57          
0588   D3AB EA F8       
0589   D3AD 5C          			JMPD_(outhole_main)
0589   D3AE FA 43       
0590   D3B0             		
0591   D3B0 7C 00 E6    hook_playerinit	inc	flag_tilt
0592   D3B3 CE E5 58    			ldx	#msg_player
0593   D3B6 BD D3 0B    			jsr	load_message
0594   D3B9 DE CF       			ldx	current_thread
0595   D3BB E7 0D       			stab	$0D,X
0596   D3BD 96 EB       			ldaa	player_up
0597   D3BF 8B 1C       			adda	#$1C
0598   D3C1 DE B8       			ldx	temp1
0599   D3C3 A7 02       			staa	$02,X
0600   D3C5 BD D3 4C    			jsr	clr_alpha_set_b1
0601   D3C8 BD DF 11    			jsr	ani_starslide
0602   D3CB CE E3 34    plyer_load		ldx	#gj_01
0603   D3CE BD D5 0D    			jsr	addthread_clra
0604   D3D1 8D 20       			bsr	get_current_ecs
0605   D3D3 7F 13 9D    			clr	hy_unknown_4
0606   D3D6 3F          			swi	
0607   D3D7 5BFCE60006  			.db $5B,$FC,$E6,$00,$06		;BNE_RAM$06==#0 to gb_11
0608   D3DC C2 00       			SETRAM_($02,$00)			;RAM$02=$00
0609   D3DE C6 05       			SETRAM_($06,$05)			;RAM$06=$05
0610   D3E0             			RSET0_($0A)				;Effect: Range #0A
0610   D3E0             
0610   D3E0 18 0A       
0611   D3E2             gb_11			RCLR0_($4F)				;Effect: Range #4F
0611   D3E2             
0611   D3E2 19 4F       
0612   D3E4             			RCLR1_($40)				;Effect: Range #40
0612   D3E4             
0612   D3E4 29 40       
0613   D3E6 B0 0B       			ADDRAM_($00,$0B)			;RAM$00+=$0B
0614   D3E8 5AFCE10012  gj_0B			.db $5A,$FC,$E1,$00,$12		;BEQ_RAM$01==#0 to begin_play
0615   D3ED             			JSRDR_(to_lampm_a)	
0615   D3ED~            			JSRDR_(to_lampm_a)	
0615   D3ED~            			JSRDR_(to_lampm_a)	
0615   D3ED             
0615   D3ED~            			JSRDR_(to_lampm_a)	
0615   D3ED~            			JSRDR_(to_lampm_a)	
0615   D3ED             
0615   D3ED             
0615   D3ED A5          
0615   D3EE FF          
0616   D3EF B1 FF       			ADDRAM_($01,$FF)			;RAM$01+=$FF
0617   D3F1             			JMPR_(gj_0B)
0617   D3F1~            			JMPR_(gj_0B)
0617   D3F1~            			JMPR_(gj_0B)
0617   D3F1             
0617   D3F1~            			JMPR_(gj_0B)
0617   D3F1~            			JMPR_(gj_0B)
0617   D3F1             
0617   D3F1             
0617   D3F1 8F          
0617   D3F2 F5          
0618   D3F3             			
0619   D3F3 D6 EB       get_current_ecs	ldab	player_up
0620   D3F5 17          			tba	
0621   D3F6 CE 13 9A    			ldx	#p1_ecs
0622   D3F9 BD EE 8C    xplusb_ldb		jsr	xplusb
0623   D3FC E6 00       			ldab	$00,X
0624   D3FE 39          			rts	
0625   D3FF             
0626   D3FF B0 43       begin_play		ADDRAM_($00,$43)			;RAM$00+=$43
0627   D401             			SOL_($06)				; Sol#6:gi_relay_pf
0627   D401 31 06       
0628   D403             			BITFLP_($00)			;Flash Lamp/Bit @RAM:00
0628   D403             
0628   D403 17 00       
0629   D405 C1 10       			SETRAM_($01,$10)			;RAM$01=$10
0630   D407 E7          gb_12			SND_($07)				;Sound #07
0631   D408             			SLEEP_(10)
0631   D408             
0631   D408 7A          
0631   D409~            			SLEEP_(10)
0631   D409~            			SLEEP_(10)
0631   D409             
0632   D409 B1 FF       			ADDRAM_($01,$FF)			;RAM$01+=$FF
0633   D40B 5BFCE100F7  			.db $5B,$FC,$E1,$00,$F7		;BNE_RAM$01==#0 to gb_12
0634   D410             			BITONP_($00)			;Turn ON Lamp/Bit @RAM:00
0634   D410             
0634   D410 14 00       
0635   D412             			BITOFF4_($30)			;Turn OFF: Lamp#30(lamp_p1)
0635   D412 D9 30       
0636   D414             			JSRDR_(setup_msg_endptr)
0636   D414~            			JSRDR_(setup_msg_endptr)
0636   D414~            			JSRDR_(setup_msg_endptr)
0636   D414             
0636   D414~            			JSRDR_(setup_msg_endptr)
0636   D414~            			JSRDR_(setup_msg_endptr)
0636   D414             
0636   D414             
0636   D414 AE          
0636   D415 C0          
0637   D416             			SOL_($F9)				; Sol#9:ball_lift
0637   D416 31 F9       
0638   D418             			SLEEP_(64)
0638   D418~            			SLEEP_(64)
0638   D418~            			SLEEP_(64)
0638   D418             
0638   D418 53 40       
0638   D41A             
0639   D41A             			REMTHREADS_($FF,$48)		;Remove Multiple Threads Based on Priority
0639   D41A 55 FF 48    
0640   D41D             			CPUX_					;Resume CPU Execution
0640   D41D 04          
0641   D41E 4F          			clra	
0642   D41F 97 E6       			staa	flag_tilt
0643   D421 97 0A       			staa	game_ram_a
0644   D423 CE 01 97    			ldx	#adj_reflex_diff
0645   D426 BD EE A2    			jsr	cmosinc_b
0646   D429 86 11       			ldaa	#$11
0647   D42B C4 0F       			andb	#$0F
0648   D42D 27 0A       			beq	gb_62
0649   D42F 4A          gb_63			deca	
0650   D430 5A          			decb	
0651   D431 26 FC       			bne	gb_63
0652   D433 81 04       			cmpa	#$04
0653   D435 2E 02       			bgt	gb_62
0654   D437 86 04       			ldaa	#$04
0655   D439 97 0C       gb_62			staa	game_ram_c
0656   D43B 96 05       			ldaa	game_ram_5
0657   D43D D6 03       			ldab	game_ram_3
0658   D43F 26 32       			bne	gb_64
0659   D441 8B 01       			adda	#$01
0660   D443 19          			daa	
0661   D444 97 05       			staa	game_ram_5
0662   D446 36          			psha	
0663   D447 C6 0F       			ldab	#$0F
0664   D449 D7 07       			stab	game_ram_7
0665   D44B C6 04       			ldab	#$04
0666   D44D CE 01 9F    			ldx	#adj_baiter_speed
0667   D450 BD EE 92    			jsr	cmosinc_a
0668   D453 84 0F       			anda	#$0F
0669   D455 27 0A       			beq	gb_65
0670   D457 7A 00 07    gb_66			dec	game_ram_7
0671   D45A D1 07       			cmpb	game_ram_7
0672   D45C 27 03       			beq	gb_65
0673   D45E 4A          			deca	
0674   D45F 26 F6       			bne	gb_66
0675   D461 D6 05       gb_65			ldab	game_ram_5
0676   D463 BD F8 9D    			jsr	dec2hex
0677   D466 96 07       			ldaa	game_ram_7
0678   D468 81 04       gb_68			cmpa	#$04
0679   D46A 27 04       			beq	gb_67
0680   D46C 4A          			deca	
0681   D46D 5A          			decb	
0682   D46E 26 F8       			bne	gb_68
0683   D470 97 07       gb_67			staa	game_ram_7
0684   D472 32          			pula	
0685   D473 5F          gb_64			clrb	
0686   D474 36          			psha	
0687   D475 96 0C       			ldaa	game_ram_c
0688   D477 4A          			deca	
0689   D478 81 03       			cmpa	#$03
0690   D47A 2D 02       			blt	gb_69
0691   D47C 97 0C       			staa	game_ram_c
0692   D47E 32          gb_69			pula	
0693   D47F 8B 99       gb_6B			adda	#$99
0694   D481 19          			daa	
0695   D482 27 07       			beq	gb_6A
0696   D484 5C          			incb	
0697   D485 C1 05       			cmpb	#$05
0698   D487 27 EA       			beq	gb_64
0699   D489 20 F4       			bra	gb_6B
0700   D48B             
0701   D48B 96 05       gb_6A			ldaa	game_ram_5
0702   D48D C1 04       			cmpb	#$04
0703   D48F 27 70       			beq	start_reflex
0704   D491 7D 00 03    			tst	game_ram_3
0705   D494 26 0E       			bne	gb_A2
0706   D496 CE E4 A2    			ldx	#gj_3A
0707   D499 BD D3 F9    			jsr	xplusb_ldb
0708   D49C 81 09       			cmpa	#$09
0709   D49E 2D 02       			blt	gb_A3
0710   D4A0 C6 20       			ldab	#$20
0711   D4A2 D7 03       gb_A3			stab	game_ram_3
0712   D4A4 96 04       gb_A2			ldaa	game_ram_4
0713   D4A6 26 04       			bne	gb_A4
0714   D4A8 86 14       			ldaa	#$14
0715   D4AA 97 04       			staa	game_ram_4
0716   D4AC CE 01 9B    gb_A4			ldx	#adj_bolt_speed
0717   D4AF BD EE A2    			jsr	cmosinc_b
0718   D4B2 C1 20       			cmpb	#$20
0719   D4B4 2F 02       			ble	gb_A5
0720   D4B6 C6 20       			ldab	#$20
0721   D4B8 BD F8 9D    gb_A5			jsr	dec2hex
0722   D4BB 17          			tba	
0723   D4BC D6 05       			ldab	game_ram_5
0724   D4BE BD F8 9D    			jsr	dec2hex
0725   D4C1 C1 01       			cmpb	#$01
0726   D4C3 27 01       			beq	gb_A6
0727   D4C5 58          			aslb	
0728   D4C6 10          gb_A6			sba	
0729   D4C7 25 04       			bcs	gb_A7
0730   D4C9 81 06       			cmpa	#$06
0731   D4CB 2C 02       			bge	gb_A8
0732   D4CD 86 06       gb_A7			ldaa	#$06
0733   D4CF 97 09       gb_A8			staa	game_ram_9
0734   D4D1 CE D5 13    			ldx	#bolt_launcher
0735   D4D4 8D 29       			bsr	to_addthr_noa
0736   D4D6 CE DD 87    			ldx	#gb_3A
0737   D4D9 8D 24       			bsr	to_addthr_noa
0738   D4DB BD FB 94    			jsr	get_random
0739   D4DE C6 06       			ldab	#$06
0740   D4E0 81 25       			cmpa	#$25
0741   D4E2 22 0C       			bhi	gb_A9
0742   D4E4 C6 04       			ldab	#$04
0743   D4E6 CE DA AE    			ldx	#gj_3B
0744   D4E9 8D 14       			bsr	to_addthr_noa
0745   D4EB CE DA 86    			ldx	#gj_3C
0746   D4EE 8D 0F       			bsr	to_addthr_noa
0747   D4F0 D7 08       gb_A9			stab	game_ram_8
0748   D4F2 CE D8 85    			ldx	#start_spell
0749   D4F5 8D 08       			bsr	to_addthr_noa
0750   D4F7 CE D5 AA    			ldx	#start_rndawd
0751   D4FA 8D 03       			bsr	to_addthr_noa
0752   D4FC CE DB E5    			ldx	#start_baiter
0753   D4FF 20 0C       to_addthr_noa	bra	addthread_clra
0754   D501             
0755   D501 86 2E       start_reflex	ldaa	#$2E
0756   D503 BD F1 FD    			jsr	lamp_on_f
0757   D506 86 10       			ldaa	#$10
0758   D508 97 0F       			staa	game_ram_f
0759   D50A CE DF F0    			ldx	#reflex_thread
0760   D50D 4F          addthread_clra	clra	
0761   D50E 97 C8       newthreadp		staa	thread_priority
0762   D510 7E E9 D8    			jmp	newthread_sp
0763   D513             
0764   D513 BD E9 7C    bolt_launcher	jsr	addthread
0765   D516 03          			.db $03
0766   D517             
0767   D517 96 08       gb_17			ldaa	game_ram_8
0768   D519 27 F8       			beq	bolt_launcher
0769   D51B CE D9 F1    			ldx	#gj_0C
0770   D51E 8D ED       			bsr	addthread_clra
0771   D520 CE 01 9D    			ldx	#adj_bolt_feed
0772   D523 BD EE 92    			jsr	cmosinc_a
0773   D526 84 0F       			anda	#$0F
0774   D528 D6 05       			ldab	game_ram_5
0775   D52A C1 09       			cmpb	#$09
0776   D52C 2F 02       			ble	gb_13
0777   D52E C6 09       			ldab	#$09
0778   D530 10          gb_13			sba	
0779   D531 24 01       			bcc	gb_14
0780   D533 4F          			clra	
0781   D534 8B 0B       gb_14			adda	#$0B
0782   D536 D6 09       gb_16			ldab	game_ram_9
0783   D538 C1 0C       			cmpb	#$0C
0784   D53A 2F 01       			ble	gb_15
0785   D53C 54          			lsrb	
0786   D53D D7 D5       gb_15			stab	thread_timer_byte
0787   D53F BD E9 71    			jsr	delaythread
0788   D542 4A          			deca	
0789   D543 26 F1       			bne	gb_16
0790   D545 20 D0       			bra	gb_17
0791   D547             
0792   D547             sw_l_shooter
0793   D547             sw_r_shooter	PRI_($B0)				;Priority=#B0
0793   D547 52 B0       
0794   D549 5BFBD030FEF2gj_0A			.db $5B,$FB,$D0,$30,$FE,$F2,$F0,$F2,$F0,$09;BNE_((#F0 P #F0) || BIT2#30) to gb_0A
0794   D54F F0F2F009
0795   D553 5AFEF2F0B00A			.db $5A,$FE,$F2,$F0,$B0,$0A	;BEQ_(BIT#70 P #F0) to gb_0B
0796   D559             			SLEEP_(1)
0796   D559             
0796   D559 71          
0796   D55A~            			SLEEP_(1)
0796   D55A~            			SLEEP_(1)
0796   D55A             
0797   D55A             			JMPR_(gj_0A)
0797   D55A~            			JMPR_(gj_0A)
0797   D55A~            			JMPR_(gj_0A)
0797   D55A             
0797   D55A~            			JMPR_(gj_0A)
0797   D55A~            			JMPR_(gj_0A)
0797   D55A             
0797   D55A             
0797   D55A 8F          
0797   D55B ED          
0798   D55C             			
0799   D55C             gb_0A			PRI_($F0)				;Priority=#F0
0799   D55C 52 F0       
0800   D55E E4          			SND_($04)				;Sound #04
0801   D55F             			JSRD_(solenoid_wait)		
0801   D55F 57          
0801   D560 FE CC       
0802   D562             			SLEEP_(11)
0802   D562             
0802   D562 7B          
0802   D563~            			SLEEP_(11)
0802   D563~            			SLEEP_(11)
0802   D563             
0803   D563             gb_0B			KILL_					;Remove This Thread
0803   D563 03          
0804   D564             
0805   D564 3F          gj_11			swi	
0806   D565             gb_18			SLEEP_(4)
0806   D565             
0806   D565 74          
0806   D566~            gb_18			SLEEP_(4)
0806   D566~            gb_18			SLEEP_(4)
0806   D566             
0807   D566 5AFEF2F0A0F9			.db $5A,$FE,$F2,$F0,$A0,$F9	;BEQ_(BIT#60 P #F0) to gb_18
0808   D56C             			PRI_($A1)				;Priority=#A1
0808   D56C 52 A1       
0809   D56E             			JSRDR_(gj_0D)		
0809   D56E~            			JSRDR_(gj_0D)		
0809   D56E~            			JSRDR_(gj_0D)		
0809   D56E             
0809   D56E~            			JSRDR_(gj_0D)		
0809   D56E~            			JSRDR_(gj_0D)		
0809   D56E             
0809   D56E             
0809   D56E AD          
0809   D56F D6          
0810   D570             			JSRDR_(setup_msg_endptr)
0810   D570~            			JSRDR_(setup_msg_endptr)
0810   D570~            			JSRDR_(setup_msg_endptr)
0810   D570             
0810   D570~            			JSRDR_(setup_msg_endptr)
0810   D570~            			JSRDR_(setup_msg_endptr)
0810   D570             
0810   D570             
0810   D570 AD          
0810   D571 64          
0811   D572             			EXE_($06)				;CPU Execute Next 6 Bytes
0811   D572~            			EXE_($06)				;CPU Execute Next 6 Bytes
0811   D572~            			EXE_($06)				;CPU Execute Next 6 Bytes
0811   D572             
0811   D572 48          
0811   D573             
0812   D573 CE E5 6B    			ldx	#msg_critical
0813   D576 BD D3 0B    			jsr	load_message
0814   D579 C0 14       			SETRAM_($00,$14)			;RAM$00=$14
0815   D57B             gb_19			JSRDR_(invert_alphamsk)	
0815   D57B~            gb_19			JSRDR_(invert_alphamsk)	
0815   D57B~            gb_19			JSRDR_(invert_alphamsk)	
0815   D57B             
0815   D57B~            gb_19			JSRDR_(invert_alphamsk)	
0815   D57B~            gb_19			JSRDR_(invert_alphamsk)	
0815   D57B             
0815   D57B             
0815   D57B A2          
0815   D57C D6          
0816   D57D F1          			SND_($11)				;Sound #11
0817   D57E             			SOL_($F6)				; Sol#6:gi_relay_pf
0817   D57E 31 F6       
0818   D580             			SLEEP_(8)
0818   D580             
0818   D580 78          
0818   D581~            			SLEEP_(8)
0818   D581~            			SLEEP_(8)
0818   D581             
0819   D581             			SOL_($06)				; Sol#6:gi_relay_pf
0819   D581 31 06       
0820   D583             			SLEEP_(8)
0820   D583             
0820   D583 78          
0820   D584~            			SLEEP_(8)
0820   D584~            			SLEEP_(8)
0820   D584             
0821   D584 B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
0822   D586 5BFCE000F0  			.db $5B,$FC,$E0,$00,$F0		;BNE_RAM$00==#0 to gb_19
0823   D58B F8          			SND_($18)				;Sound #18
0824   D58C C1 00       			SETRAM_($01,$00)			;RAM$01=$00
0825   D58E             			JSRDR_(stab_all_alphmsk)
0825   D58E~            			JSRDR_(stab_all_alphmsk)
0825   D58E~            			JSRDR_(stab_all_alphmsk)
0825   D58E             
0825   D58E~            			JSRDR_(stab_all_alphmsk)
0825   D58E~            			JSRDR_(stab_all_alphmsk)
0825   D58E             
0825   D58E             
0825   D58E A2          
0825   D58F C8          
0826   D590             			KILL_					;Remove This Thread
0826   D590 03          
0827   D591             
0828   D591             gb_1B			SLEEP_(1)
0828   D591             
0828   D591 71          
0828   D592~            gb_1B			SLEEP_(1)
0828   D592~            gb_1B			SLEEP_(1)
0828   D592             
0829   D592 5B F6 4E 02 			.db $5B,$F6,$4E,$02		;BNE_RangeON#4E to gb_1A
0830   D596             			RCLR0_($4E)				;Effect: Range #4E
0830   D596             
0830   D596 19 4E       
0831   D598             gb_1A			JSRDR_(random_x0f)	
0831   D598~            gb_1A			JSRDR_(random_x0f)	
0831   D598~            gb_1A			JSRDR_(random_x0f)	
0831   D598             
0831   D598~            gb_1A			JSRDR_(random_x0f)	
0831   D598~            gb_1A			JSRDR_(random_x0f)	
0831   D598             
0831   D598             
0831   D598 A0          
0831   D599 5B          
0832   D59A 5AFDE00DF2  			.db $5A,$FD,$E0,$0D,$F2		;BEQ_RAM$00>=#13 to gb_1B
0833   D59F             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
0833   D59F             
0833   D59F 51 10       
0833   D5A1~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
0833   D5A1~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
0833   D5A1             
0834   D5A1 B1 3A       			ADDRAM_($01,$3A)			;RAM$01+=$3A
0835   D5A3 5A D0 E1 EA 			.db $5A,$D0,$E1,$EA		;BEQ_BIT2#E1 to gb_1B
0836   D5A7             			BITON4a_($01)			;Turn ON: Lamp#01(lamp_h2)
0836   D5A7 DC 01       
0837   D5A9             			MRTS_					;Macro RTS, Save MRA,MRB
0837   D5A9 02          
0838   D5AA             
0839   D5AA 8D 49       start_rndawd	bsr	random_x0f
0840   D5AC 26 01       			bne	gb_D2
0841   D5AE 4C          			inca	
0842   D5AF 3F          gb_D2			swi	
0843   D5B0             			PRI_($00)				;Priority=#00
0843   D5B0 52 00       
0844   D5B2             gb_1C			SLEEP_(112)
0844   D5B2~            gb_1C			SLEEP_(112)
0844   D5B2~            gb_1C			SLEEP_(112)
0844   D5B2             
0844   D5B2 53 70       
0844   D5B4             
0845   D5B4 B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
0846   D5B6 5BFCE000F7  			.db $5B,$FC,$E0,$00,$F7		;BNE_RAM$00==#0 to gb_1C
0847   D5BB             gb_1D			SLEEP_(10)
0847   D5BB             
0847   D5BB 7A          
0847   D5BC~            gb_1D			SLEEP_(10)
0847   D5BC~            gb_1D			SLEEP_(10)
0847   D5BC             
0848   D5BC 5AFEF2F0A0F9			.db $5A,$FE,$F2,$F0,$A0,$F9	;BEQ_(BIT#60 P #F0) to gb_1D
0849   D5C2             			PRI_($A6)				;Priority=#A6
0849   D5C2 52 A6       
0850   D5C4             gb_20			JSRR_(gb_1B)			
0850   D5C4~            gb_20			JSRR_(gb_1B)			
0850   D5C4~            gb_20			JSRR_(gb_1B)			
0850   D5C4             
0850   D5C4~            gb_20			JSRR_(gb_1B)			
0850   D5C4~            gb_20			JSRR_(gb_1B)			
0850   D5C4             
0850   D5C4             
0850   D5C4 9F          
0850   D5C5 CB          
0851   D5C6             			EXE_($03)				;CPU Execute Next 3 Bytes
0851   D5C6~            			EXE_($03)				;CPU Execute Next 3 Bytes
0851   D5C6~            			EXE_($03)				;CPU Execute Next 3 Bytes
0851   D5C6             
0851   D5C6 45          
0851   D5C7             
0852   D5C7 B7 11 9B    			staa	current_credits+1
0853   D5CA 5BFDE00B2B  			.db $5B,$FD,$E0,$0B,$2B		;BNE_RAM$00>=#11 to gb_1E
0854   D5CF 5AFCE00D0A  			.db $5A,$FC,$E0,$0D,$0A		;BEQ_RAM$00==#13 to gb_1F
0855   D5D4 5A F4 3C EC 			.db $5A,$F4,$3C,$EC		;BEQ_LampOn/Flash#3C to gb_20
0856   D5D8             			BITFL_($BA,$BB,$3C)		;Flash: Lamp#3A(lamp_e3), Lamp#3B(lamp_e2), Lamp#3C(lamp_e1)
0856   D5D8             
0856   D5D8 13 BA BB 3C 
0857   D5DC             			JMPR_(gj_0E)
0857   D5DC~            			JMPR_(gj_0E)
0857   D5DC~            			JMPR_(gj_0E)
0857   D5DC             
0857   D5DC~            			JMPR_(gj_0E)
0857   D5DC~            			JMPR_(gj_0E)
0857   D5DC             
0857   D5DC             
0857   D5DC 80          
0857   D5DD 24          
0858   D5DE             			
0859   D5DE 5A F4 45 E2 gb_1F			.db $5A,$F4,$45,$E2		;BEQ_LampOn/Flash#45 to gb_20
0860   D5E2             			BITFL_($C3,$C4,$45)		;Flash: Bit#03, Bit#04, Bit#05
0860   D5E2             
0860   D5E2 13 C3 C4 45 
0861   D5E6             			JMPR_(gj_0E)
0861   D5E6~            			JMPR_(gj_0E)
0861   D5E6~            			JMPR_(gj_0E)
0861   D5E6             
0861   D5E6~            			JMPR_(gj_0E)
0861   D5E6~            			JMPR_(gj_0E)
0861   D5E6             
0861   D5E6             
0861   D5E6 80          
0861   D5E7 1A          
0862   D5E8             			
0863   D5E8 7E FB 94    jmp_getrandom	jmp	get_random
0864   D5EB             
0865   D5EB 8D FB       random_x03		bsr	jmp_getrandom
0866   D5ED 84 03       			anda	#$03
0867   D5EF 39          			rts	
0868   D5F0             
0869   D5F0 8D F6       random_x07		bsr	jmp_getrandom
0870   D5F2 84 07       			anda	#$07
0871   D5F4 39          			rts	
0872   D5F5             
0873   D5F5 8D F1       random_x0f		bsr	jmp_getrandom
0874   D5F7 84 0F       			anda	#$0F
0875   D5F9 39          			rts	
0876   D5FA             
0877   D5FA             gb_1E			JSRDR_(get_rnd_lampnum)	
0877   D5FA~            gb_1E			JSRDR_(get_rnd_lampnum)	
0877   D5FA~            gb_1E			JSRDR_(get_rnd_lampnum)	
0877   D5FA             
0877   D5FA~            gb_1E			JSRDR_(get_rnd_lampnum)	
0877   D5FA~            gb_1E			JSRDR_(get_rnd_lampnum)	
0877   D5FA             
0877   D5FA             
0877   D5FA A0          
0877   D5FB C3          
0878   D5FC 5A F4 E0 C4 			.db $5A,$F4,$E0,$C4		;BEQ_LampOn/Flash#E0 to gb_20
0879   D600             			BITFLP_($00)			;Flash Lamp/Bit @RAM:00
0879   D600             
0879   D600 17 00       
0880   D602 CA 04       gj_0E			SETRAM_($0A,$04)			;RAM$0A=$04
0881   D604             			CPUX_					;Resume CPU Execution
0881   D604 04          
0882   D605 CE E5 AC    			ldx	#msg_hit
0883   D608 BD D2 6D    			jsr	ani_msg_rlslide
0884   D60B F6 11 9B    			ldab	current_credits+1
0885   D60E CE E4 94    			ldx	#gj_2D
0886   D611 BD EE 8C    			jsr	xplusb
0887   D614 E6 00       			ldab	$00,X
0888   D616 BD D2 72    			jsr	gj_2E
0889   D619 C6 26       			ldab	#$26
0890   D61B BD D2 72    			jsr	gj_2E
0891   D61E CE 13 A7    			ldx	#hy_unknown_e
0892   D621 8D C8       			bsr	random_x03
0893   D623 27 01       			beq	gb_6C
0894   D625 4A          			deca	
0895   D626 B7 13 9F    gb_6C			staa	hy_unknown_6
0896   D629 26 07       			bne	gb_6D
0897   D62B 96 04       			ldaa	game_ram_4
0898   D62D BD DF D2    			jsr	gj_2F
0899   D630 20 1C       			bra	gb_6E
0900   D632             
0901   D632 6F 01       gb_6D			clr	$01,X
0902   D634 C6 1C       			ldab	#$1C
0903   D636 E7 02       			stab	$02,X
0904   D638 C6 26       			ldab	#$26
0905   D63A E7 03       			stab	$03,X
0906   D63C 81 02       			cmpa	#$02
0907   D63E 27 06       			beq	gb_AA
0908   D640 86 5A       			ldaa	#$5A
0909   D642 C6 42       			ldab	#$42
0910   D644 20 04       			bra	gb_AB
0911   D646             
0912   D646 86 45       gb_AA			ldaa	#$45
0913   D648 C6 55       			ldab	#$55
0914   D64A A7 04       gb_AB			staa	$04,X
0915   D64C E7 05       			stab	$05,X
0916   D64E 86 05       gb_6E			ldaa	#$05
0917   D650 A7 00       			staa	$00,X
0918   D652 BD D2 6D    			jsr	ani_msg_rlslide
0919   D655 97 0A       			staa	game_ram_a
0920   D657 DE CF       			ldx	current_thread
0921   D659 86 A4       			ldaa	#$A4
0922   D65B A7 0D       			staa	$0D,X
0923   D65D 86 02       			ldaa	#$02
0924   D65F BD E9 7C    gb_AD			jsr	addthread
0925   D662 C0          			.db $C0
0926   D663 4A          			deca	
0927   D664 26 F9       			bne	gb_AD
0928   D666 B6 11 9B    sumthin		ldaa	current_credits+1
0929   D669 3F          			swi	
0930   D66A             			PRI_($A1)				;Priority=#A1
0930   D66A 52 A1       
0931   D66C 5AFDE00B06  			.db $5A,$FD,$E0,$0B,$06		;BEQ_RAM$00>=#11 to gb_21
0932   D671             			JSRDR_(get_rnd_lampnum)	
0932   D671~            			JSRDR_(get_rnd_lampnum)	
0932   D671~            			JSRDR_(get_rnd_lampnum)	
0932   D671             
0932   D671~            			JSRDR_(get_rnd_lampnum)	
0932   D671~            			JSRDR_(get_rnd_lampnum)	
0932   D671             
0932   D671             
0932   D671 A0          
0932   D672 4C          
0933   D673             			BITOFFP_($00)			;Turn OFF Lamp/Bit @RAM:00
0933   D673             
0933   D673 15 00       
0934   D675             			JMPR_(gj_0F)
0934   D675~            			JMPR_(gj_0F)
0934   D675~            			JMPR_(gj_0F)
0934   D675             
0934   D675~            			JMPR_(gj_0F)
0934   D675~            			JMPR_(gj_0F)
0934   D675             
0934   D675             
0934   D675 80          
0934   D676 0B          
0935   D677             			
0936   D677 5AFCE00D04  gb_21			.db $5A,$FC,$E0,$0D,$04		;BEQ_RAM$00==#13 to gb_6F
0937   D67C             			RCLR0_($10)				;Effect: Range #10
0937   D67C             
0937   D67C 19 10       
0938   D67E             			JMPR_(gj_0F)
0938   D67E~            			JMPR_(gj_0F)
0938   D67E~            			JMPR_(gj_0F)
0938   D67E             
0938   D67E~            			JMPR_(gj_0F)
0938   D67E~            			JMPR_(gj_0F)
0938   D67E             
0938   D67E             
0938   D67E 80          
0938   D67F 02          
0939   D680             			
0940   D680             gb_6F			RCLR0_($11)				;Effect: Range #11
0940   D680             
0940   D680 19 11       
0941   D682 CA 04       gj_0F			SETRAM_($0A,$04)			;RAM$0A=$04
0942   D684             			CPUX_					;Resume CPU Execution
0942   D684 04          
0943   D685 86 0C       			ldaa	#$0C
0944   D687 5F          			clrb	
0945   D688 BD D2 CF    			jsr	gj_3D
0946   D68B 97 0A       			staa	game_ram_a
0947   D68D 7E D5 AA    			jmp	start_rndawd
0948   D690             
0949   D690 3F          gj_10			swi	
0950   D691             gb_22			SLEEP_(4)
0950   D691             
0950   D691 74          
0950   D692~            gb_22			SLEEP_(4)
0950   D692~            gb_22			SLEEP_(4)
0950   D692             
0951   D692 5AFEF2FF68F9			.db $5A,$FE,$F2,$FF,$68,$F9	;BEQ_(BIT#28 P #FF) to gb_22
0952   D698             			PRI_($68)				;Priority=#68
0952   D698 52 68       
0953   D69A EE          			SND_($0E)				;Sound #0E
0954   D69B             			SOL_($F1,$F2,$F7)			; Sol#1:energy_flash Sol#2:p1_flash Sol#7:p2_flash
0954   D69B 33 F1 F2 F7 
0955   D69F             			SLEEP_(4)
0955   D69F             
0955   D69F 74          
0955   D6A0~            			SLEEP_(4)
0955   D6A0~            			SLEEP_(4)
0955   D6A0             
0956   D6A0             			SOL_($01,$02,$07)			; Sol#1:energy_flash Sol#2:p1_flash Sol#7:p2_flash
0956   D6A0 33 01 02 07 
0957   D6A4             			KILL_					;Remove This Thread
0957   D6A4 03          
0958   D6A5             
0959   D6A5 36          gj_35			psha	
0960   D6A6 CE D6 90    			ldx	#gj_10
0961   D6A9 BD D5 0D    			jsr	addthread_clra
0962   D6AC 96 06       			ldaa	game_ram_6
0963   D6AE 8B 99       			adda	#$99
0964   D6B0 19          			daa	
0965   D6B1 97 06       			staa	game_ram_6
0966   D6B3 81 01       			cmpa	#$01
0967   D6B5 26 06       			bne	gb_23
0968   D6B7 CE D5 64    			ldx	#gj_11
0969   D6BA BD D5 0D    			jsr	addthread_clra
0970   D6BD 32          gb_23			pula	
0971   D6BE 39          			rts	
0972   D6BF             
0973   D6BF CE E4 71    get_rnd_lampnum	ldx	#gj_12
0974   D6C2 BD EE 3E    			jsr	xplusa
0975   D6C5 A6 00       			ldaa	$00,X
0976   D6C7 39          			rts	
0977   D6C8             
0978   D6C8 36          gb_54			psha	
0979   D6C9 37          			pshb	
0980   D6CA 4A          			deca	
0981   D6CB BD F3 6F    			jsr	bit_lamp_buf_f
0982   D6CE 27 04       			beq	gb_9A
0983   D6D0 86 01       			ldaa	#$01
0984   D6D2 20 09       			bra	gb_9B
0985   D6D4             
0986   D6D4 4C          gb_9A			inca	
0987   D6D5 4C          			inca	
0988   D6D6 BD F3 6F    			jsr	bit_lamp_buf_f
0989   D6D9 27 05       			beq	gb_55
0990   D6DB 86 02       			ldaa	#$02
0991   D6DD B7 13 9D    gb_9B			staa	hy_unknown_4
0992   D6E0 33          gb_55			pulb	
0993   D6E1 32          			pula	
0994   D6E2 39          			rts	
0995   D6E3             
0996   D6E3 36          gj_03			psha	
0997   D6E4 37          			pshb	
0998   D6E5 16          			tab	
0999   D6E6 8B 41       			adda	#$41
1000   D6E8 8D DE       			bsr	gb_54
1001   D6EA BD F2 04    			jsr	lamp_off_f
1002   D6ED C0 08       			subb	#$08
1003   D6EF CE E4 B4    			ldx	#gj_26
1004   D6F2 BD D3 F9    			jsr	xplusb_ldb
1005   D6F5 F7 13 9C    			stab	hy_unknown_3
1006   D6F8 FE 11 96    			ldx	game_var_7
1007   D6FB 27 E3       			beq	gb_55
1008   D6FD E1 00       			cmpb	$00,X
1009   D6FF 26 DF       			bne	gb_55
1010   D701 08          			inx	
1011   D702 FF 11 96    			stx	game_var_7
1012   D705 74 11 98    			lsr	game_var_unknown
1013   D708 20 D6       			bra	gb_55
1014   D70A             
1015   D70A             gj_06			BITON4_($30)			;Turn ON: Lamp#30(lamp_p1)
1015   D70A D8 30       
1016   D70C             			RCLR0_($CF,$4D)			;Effect: Range #CF Range #4D
1016   D70C             
1016   D70C 19 CF 4D    
1017   D70F             			RCLR1_($C0,$00)			;Effect: Range #C0 Range #00
1017   D70F             
1017   D70F 29 C0 00    
1018   D712 CA 00       			SETRAM_($0A,$00)			;RAM$0A=$00
1019   D714             			JSRD_(clr_dis_masks)		
1019   D714 57          
1019   D715 F9 22       
1020   D717             			JSRDR_(gj_0D)		
1020   D717~            			JSRDR_(gj_0D)		
1020   D717~            			JSRDR_(gj_0D)		
1020   D717             
1020   D717~            			JSRDR_(gj_0D)		
1020   D717~            			JSRDR_(gj_0D)		
1020   D717             
1020   D717             
1020   D717 AC          
1020   D718 2D          
1021   D719             			EXE_($0A)				;CPU Execute Next 10 Bytes
1021   D719~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1021   D719~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1021   D719             
1021   D719 4C          
1021   D71A             
1022   D71A 7C 00 E6    			inc	flag_tilt
1023   D71D D6 EB       			ldab	player_up
1024   D71F BD FA 63    			jsr	saveplayertobuffer
1025   D722 D6 EB       			ldab	player_up
1026   D724             			JSRD_(resetplayerdata)		
1026   D724 57          
1026   D725 F9 EA       
1027   D727             			MRTS_					;Macro RTS, Save MRA,MRB
1027   D727 02          
1028   D728             
1029   D728             sw_H
1030   D728             sw_I
1031   D728             sw_J
1032   D728             sw_K
1033   D728             sw_L
1034   D728             sw_M
1035   D728             sw_N
1036   D728             sw_O
1037   D728             sw_P			JSRDR_(gj_03)		
1037   D728~            sw_P			JSRDR_(gj_03)		
1037   D728~            sw_P			JSRDR_(gj_03)		
1037   D728             
1037   D728~            sw_P			JSRDR_(gj_03)		
1037   D728~            sw_P			JSRDR_(gj_03)		
1037   D728             
1037   D728             
1037   D728 AF          
1037   D729 B9          
1038   D72A             			EXE_($02)				;CPU Execute Next 2 Bytes
1038   D72A~            			EXE_($02)				;CPU Execute Next 2 Bytes
1038   D72A~            			EXE_($02)				;CPU Execute Next 2 Bytes
1038   D72A             
1038   D72A 44          
1038   D72B             
1039   D72B 80 12       			suba	#$12
1040   D72D 5B D0 E0 42 			.db $5B,$D0,$E0,$42		;BNE_BIT2#E0 to s_kill
1041   D731             			BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
1041   D731 DD 00       
1042   D733             			EXE_($0A)				;CPU Execute Next 10 Bytes
1042   D733~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1042   D733~            			EXE_($0A)				;CPU Execute Next 10 Bytes
1042   D733             
1042   D733 4C          
1042   D734             
1043   D734 C6 21       			ldab	#$21
1044   D736 D7 C8       			stab	thread_priority
1045   D738 CE DD 76    			ldx	#gj_27
1046   D73B BD E9 D8    			jsr	newthread_sp
1047   D73E             			POINTS_(1,1000)			;1000 Points
1047   D73E 42          
1047   D73F             
1047   D73F~            			POINTS_(1,1000)			;1000 Points
1047   D73F~            			POINTS_(1,1000)			;1000 Points
1047   D73F             
1047   D73F~            			POINTS_(1,1000)			;1000 Points
1047   D73F~            			POINTS_(1,1000)			;1000 Points
1047   D73F             
1047   D73F~            			POINTS_(1,1000)			;1000 Points
1047   D73F~            			POINTS_(1,1000)			;1000 Points
1047   D73F             
1047   D73F             
1047   D73F 0B          
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740~            			POINTS_(1,1000)			;1000 Points
1047   D740             
1047   D740             
1047   D740             
1047   D740             
1048   D740 E8          			SND_($08)				;Sound #08
1049   D741 B3 FF       sw_common		ADDRAM_($03,$FF)			;RAM$03+=$FF
1050   D743 5AFBFBF3FCE3chk_wave_compl	.db $5A,$FB,$FB,$F3,$FC,$E3,$00,$D0,$2E,$D0,$2F,$24;BEQ_(BIT2#2F || (BIT2#2E || (!RAM$03==#0))) to s_kill
1050   D749 00D02ED02F24
1051   D74F             			REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
1051   D74F 55 08 00    
1052   D752 E5          			SND_($05)				;Sound #05
1053   D753             			JSRDR_(gj_05)		
1053   D753~            			JSRDR_(gj_05)		
1053   D753~            			JSRDR_(gj_05)		
1053   D753             
1053   D753~            			JSRDR_(gj_05)		
1053   D753~            			JSRDR_(gj_05)		
1053   D753             
1053   D753             
1053   D753 A2          
1053   D754 32          
1054   D755             			JSRR_(gj_06)			
1054   D755~            			JSRR_(gj_06)			
1054   D755~            			JSRR_(gj_06)			
1054   D755             
1054   D755~            			JSRR_(gj_06)			
1054   D755~            			JSRR_(gj_06)			
1054   D755             
1054   D755             
1054   D755 9F          
1054   D756 B3          
1055   D757             			JSRD_(gj_07)			
1055   D757 57          
1055   D758 DF 64       
1056   D75A             			JSRDR_(show_wave_compl)	
1056   D75A~            			JSRDR_(show_wave_compl)	
1056   D75A~            			JSRDR_(show_wave_compl)	
1056   D75A             
1056   D75A~            			JSRDR_(show_wave_compl)	
1056   D75A~            			JSRDR_(show_wave_compl)	
1056   D75A             
1056   D75A             
1056   D75A A0          
1056   D75B 18          
1057   D75C             			JSRDR_(show_eunit_bonus)
1057   D75C~            			JSRDR_(show_eunit_bonus)
1057   D75C~            			JSRDR_(show_eunit_bonus)
1057   D75C             
1057   D75C~            			JSRDR_(show_eunit_bonus)
1057   D75C~            			JSRDR_(show_eunit_bonus)
1057   D75C             
1057   D75C             
1057   D75C A4          
1057   D75D 2A          
1058   D75E             setup_next_wave	REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
1058   D75E 55 08 00    
1059   D761             			EXE_($05)				;CPU Execute Next 5 Bytes
1059   D761~            			EXE_($05)				;CPU Execute Next 5 Bytes
1059   D761~            			EXE_($05)				;CPU Execute Next 5 Bytes
1059   D761             
1059   D761 47          
1059   D762             
1060   D762 D6 EB       			ldab	player_up
1061   D764 BD F9 EA    			jsr	resetplayerdata
1062   D767             			EXE_($08)				;CPU Execute Next 8 Bytes
1062   D767~            			EXE_($08)				;CPU Execute Next 8 Bytes
1062   D767~            			EXE_($08)				;CPU Execute Next 8 Bytes
1062   D767             
1062   D767 4A          
1062   D768             
1063   D768 97 F4       			staa	flag_timer_bip
1064   D76A CE F9 75    			ldx	#player_ready
1065   D76D BD D5 0E    			jsr	newthreadp
1066   D770             			JSRD_(plyer_load)			
1066   D770 57          
1066   D771 D3 CB       
1067   D773             s_kill		KILL_					;Remove This Thread
1067   D773 03          
1068   D774             
1069   D774 CE E5 74    show_wave_compl	ldx	#msg_wave
1070   D777 BD D3 0B    			jsr	load_message
1071   D77A BD E6 D2    			jsr	disp_wave_num
1072   D77D 8D 06       			bsr	sleep45
1073   D77F CE E5 79    			ldx	#msg_completed
1074   D782 BD D3 0B    			jsr	load_message
1075   D785 BD E9 7C    sleep45		jsr	addthread
1076   D788 45          			.db $45
1077   D789 39          			rts	
1078   D78A             
1079   D78A             sw_T			JSRDR_(gj_03)		
1079   D78A~            sw_T			JSRDR_(gj_03)		
1079   D78A~            sw_T			JSRDR_(gj_03)		
1079   D78A             
1079   D78A~            sw_T			JSRDR_(gj_03)		
1079   D78A~            sw_T			JSRDR_(gj_03)		
1079   D78A             
1079   D78A             
1079   D78A AF          
1079   D78B 57          
1080   D78C 5B F4 43 2E 			.db $5B,$F4,$43,$2E		;BNE_LampOn/Flash#43 to gb_08
1081   D790             			RCLR0_($11)				;Effect: Range #11
1081   D790             
1081   D790 19 11       
1082   D792             			JMPR_(gj_04)
1082   D792~            			JMPR_(gj_04)
1082   D792~            			JMPR_(gj_04)
1082   D792             
1082   D792~            			JMPR_(gj_04)
1082   D792~            			JMPR_(gj_04)
1082   D792             
1082   D792             
1082   D792 80          
1082   D793 19          
1083   D794             			
1084   D794             sw_E			JSRDR_(gj_03)		
1084   D794~            sw_E			JSRDR_(gj_03)		
1084   D794~            sw_E			JSRDR_(gj_03)		
1084   D794             
1084   D794~            sw_E			JSRDR_(gj_03)		
1084   D794~            sw_E			JSRDR_(gj_03)		
1084   D794             
1084   D794             
1084   D794 AF          
1084   D795 4D          
1085   D796 5B F4 3A 24 			.db $5B,$F4,$3A,$24		;BNE_LampOn/Flash#3A to gb_08
1086   D79A             			RCLR0_($10)				;Effect: Range #10
1086   D79A             
1086   D79A 19 10       
1087   D79C             			JMPR_(gj_04)
1087   D79C~            			JMPR_(gj_04)
1087   D79C~            			JMPR_(gj_04)
1087   D79C             
1087   D79C~            			JMPR_(gj_04)
1087   D79C~            			JMPR_(gj_04)
1087   D79C             
1087   D79C             
1087   D79C 80          
1087   D79D 0F          
1088   D79E             			
1089   D79E C6 3D       sw_F			ldab	#$3D
1090   D7A0 20 02       			bra	ssw_handler
1091   D7A2             
1092   D7A2 C6 3E       sw_G			ldab	#$3E
1093   D7A4 3F          ssw_handler		swi	
1094   D7A5             			JSRDR_(gj_03)		
1094   D7A5~            			JSRDR_(gj_03)		
1094   D7A5~            			JSRDR_(gj_03)		
1094   D7A5             
1094   D7A5~            			JSRDR_(gj_03)		
1094   D7A5~            			JSRDR_(gj_03)		
1094   D7A5             
1094   D7A5             
1094   D7A5 AF          
1094   D7A6 3C          
1095   D7A7 5B F4 E1 13 			.db $5B,$F4,$E1,$13		;BNE_LampOn/Flash#E1 to gb_08
1096   D7AB             			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1096   D7AB             
1096   D7AB 15 01       
1097   D7AD             gj_04			JSRR_(gj_13)			
1097   D7AD~            gj_04			JSRR_(gj_13)			
1097   D7AD~            gj_04			JSRR_(gj_13)			
1097   D7AD             
1097   D7AD~            gj_04			JSRR_(gj_13)			
1097   D7AD~            gj_04			JSRR_(gj_13)			
1097   D7AD             
1097   D7AD             
1097   D7AD 96          
1097   D7AE 87          
1098   D7AF 5AFEF2F4A427			.db $5A,$FE,$F2,$F4,$A4,$27	;BEQ_(BIT#64 P #F4) to gb_24
1099   D7B5 5A D0 2E 05 gb_AE			.db $5A,$D0,$2E,$05		;BEQ_BIT2#2E to gb_08
1100   D7B9 E0          			SND_($00)				;Sound #00
1101   D7BA             			POINTS_(5,1000)			;5000 Points
1101   D7BA 42          
1101   D7BB             
1101   D7BB~            			POINTS_(5,1000)			;5000 Points
1101   D7BB~            			POINTS_(5,1000)			;5000 Points
1101   D7BB             
1101   D7BB~            			POINTS_(5,1000)			;5000 Points
1101   D7BB~            			POINTS_(5,1000)			;5000 Points
1101   D7BB             
1101   D7BB~            			POINTS_(5,1000)			;5000 Points
1101   D7BB~            			POINTS_(5,1000)			;5000 Points
1101   D7BB             
1101   D7BB             
1101   D7BB 2B          
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC~            			POINTS_(5,1000)			;5000 Points
1101   D7BC             
1101   D7BC             
1101   D7BC             
1101   D7BC             
1102   D7BC             			JMPR_(sw_common)
1102   D7BC~            			JMPR_(sw_common)
1102   D7BC~            			JMPR_(sw_common)
1102   D7BC             
1102   D7BC~            			JMPR_(sw_common)
1102   D7BC~            			JMPR_(sw_common)
1102   D7BC             
1102   D7BC             
1102   D7BC 8F          
1102   D7BD 83          
1103   D7BE             		
1104   D7BE             gb_08			KILL_					;Remove This Thread
1104   D7BE 03          
1105   D7BF             
1106   D7BF C6 46       sw_S			ldab	#$46
1107   D7C1 20 E1       			bra	ssw_handler
1108   D7C3             
1109   D7C3 C6 47       sw_R			ldab	#$47
1110   D7C5 20 DD       			bra	ssw_handler
1111   D7C7             
1112   D7C7             sw_A
1113   D7C7             sw_B
1114   D7C7             sw_C
1115   D7C7             sw_D
1116   D7C7             sw_U
1117   D7C7             sw_V
1118   D7C7             sw_W
1119   D7C7 16          sw_Y			tab	
1120   D7C8 C0 08       			subb	#$08
1121   D7CA CE E4 73    			ldx	#gj_02
1122   D7CD BD D3 F9    			jsr	xplusb_ldb
1123   D7D0 20 D2       			bra	ssw_handler
1124   D7D2             
1125   D7D2 3F          gj_49			swi	
1126   D7D3 5AFEF2F6A418gj_14			.db $5A,$FE,$F2,$F6,$A4,$18	;BEQ_(BIT#64 P #F6) to gb_25
1127   D7D9             			SLEEP_(2)
1127   D7D9             
1127   D7D9 72          
1127   D7DA~            			SLEEP_(2)
1127   D7DA~            			SLEEP_(2)
1127   D7DA             
1128   D7DA             			JMPR_(gj_14)
1128   D7DA~            			JMPR_(gj_14)
1128   D7DA~            			JMPR_(gj_14)
1128   D7DA             
1128   D7DA~            			JMPR_(gj_14)
1128   D7DA~            			JMPR_(gj_14)
1128   D7DA             
1128   D7DA             
1128   D7DA 8F          
1128   D7DB F7          
1129   D7DC             			
1130   D7DC             gb_24			EXE_($03)				;CPU Execute Next 3 Bytes
1130   D7DC~            gb_24			EXE_($03)				;CPU Execute Next 3 Bytes
1130   D7DC~            gb_24			EXE_($03)				;CPU Execute Next 3 Bytes
1130   D7DC             
1130   D7DC 45          
1130   D7DD             
1131   D7DD B6 13 9C    			ldaa	hy_unknown_3
1132   D7E0 5AFEF2F6A403gj_30			.db $5A,$FE,$F2,$F6,$A4,$03	;BEQ_(BIT#64 P #F6) to gb_71
1133   D7E6             			SLEEP_(6)
1133   D7E6             
1133   D7E6 76          
1133   D7E7~            			SLEEP_(6)
1133   D7E7~            			SLEEP_(6)
1133   D7E7             
1134   D7E7             			JMPR_(gj_30)
1134   D7E7~            			JMPR_(gj_30)
1134   D7E7~            			JMPR_(gj_30)
1134   D7E7             
1134   D7E7~            			JMPR_(gj_30)
1134   D7E7~            			JMPR_(gj_30)
1134   D7E7             
1134   D7E7             
1134   D7E7 8F          
1134   D7E8 F7          
1135   D7E9             			
1136   D7E9             gb_71			EXE_($02)				;CPU Execute Next 2 Bytes
1136   D7E9~            gb_71			EXE_($02)				;CPU Execute Next 2 Bytes
1136   D7E9~            gb_71			EXE_($02)				;CPU Execute Next 2 Bytes
1136   D7E9             
1136   D7E9 44          
1136   D7EA             
1137   D7EA D6 64       			ldab	$64
1138   D7EC 5BFCE0E1C4  			.db $5B,$FC,$E0,$E1,$C4		;BNE_RAM$00==#225 to gb_AE
1139   D7F1             gb_25			REMTHREADS_($F1,$A0)		;Remove Multiple Threads Based on Priority
1139   D7F1 55 F1 A0    
1140   D7F4             			PRI_($A1)				;Priority=#A1
1140   D7F4 52 A1       
1141   D7F6             			JSRDR_(random_x03)	
1141   D7F6~            			JSRDR_(random_x03)	
1141   D7F6~            			JSRDR_(random_x03)	
1141   D7F6             
1141   D7F6~            			JSRDR_(random_x03)	
1141   D7F6~            			JSRDR_(random_x03)	
1141   D7F6             
1141   D7F6             
1141   D7F6 AD          
1141   D7F7 F3          
1142   D7F8             			CPUX_					;Resume CPU Execution
1142   D7F8 04          
1143   D7F9 9B 04       			adda	game_ram_4
1144   D7FB 19          			daa	
1145   D7FC 97 04       			staa	game_ram_4
1146   D7FE C6 01       			ldab	#$01
1147   D800 B6 13 9F    			ldaa	hy_unknown_6
1148   D803 27 0D       			beq	gb_AF
1149   D805 46          			rora	
1150   D806 24 05       			bcc	gb_B0
1151   D808 BD D9 CB    			jsr	add_b_cur_ecs
1152   D80B 20 0A       			bra	gb_B1
1153   D80D             
1154   D80D BD D9 DA    gb_B0			jsr	gj_44
1155   D810 20 05       			bra	gb_B1
1156   D812             
1157   D812 CE 00 66    gb_AF			ldx	#alpha_b0+6
1158   D815 8D 1D       			bsr	gb_D3
1159   D817 BD D3 46    gb_B1			jsr	gj_0D
1160   D81A C6 10       			ldab	#$10
1161   D81C 86 01       			ldaa	#$01
1162   D81E BD EC 3B    			jsr	isnd_once
1163   D821 96 7B       gb_D4			ldaa	dmask_p4
1164   D823 43          			coma	
1165   D824 84 3F       			anda	#$3F
1166   D826 97 7B       			staa	dmask_p4
1167   D828 BD E9 7C    			jsr	addthread
1168   D82B 05          			.db $05
1169   D82C 5A          			decb	
1170   D82D 26 F2       			bne	gb_D4
1171   D82F D7 7B       			stab	dmask_p4
1172   D831 7E D6 66    			jmp	sumthin
1173   D834             
1174   D834 E6 01       gb_D3			ldab	$01,X
1175   D836 C4 3F       			andb	#$3F
1176   D838 C0 1B       			subb	#$1B
1177   D83A 27 08       			beq	gb_F1
1178   D83C 86 0B       			ldaa	#$0B
1179   D83E BD EB 3D    gb_F2			jsr	score_main
1180   D841 5A          			decb	
1181   D842 26 FA       			bne	gb_F2
1182   D844 E6 00       gb_F1			ldab	$00,X
1183   D846 27 0A       			beq	gb_F3
1184   D848 C0 1B       			subb	#$1B
1185   D84A 86 0C       			ldaa	#$0C
1186   D84C BD EB 3D    gb_F4			jsr	score_main
1187   D84F 5A          			decb	
1188   D850 26 FA       			bne	gb_F4
1189   D852 39          gb_F3			rts	
1190   D853             
1191   D853 D6 7A       invert_alphamsk	ldab	dmask_p3
1192   D855 53          			comb	
1193   D856 C4 7F       			andb	#$7F
1194   D858 D7 7A       stab_all_alphmsk	stab	dmask_p3
1195   D85A D7 7B       			stab	dmask_p4
1196   D85C 39          			rts	
1197   D85D             
1198   D85D 36          gb_79			psha	
1199   D85E BD D5 EB    gb_27			jsr	random_x03
1200   D861 BD E9 7C    			jsr	addthread
1201   D864 01          			.db $01
1202   D865 27 14       			beq	gb_26
1203   D867 81 03       			cmpa	#$03
1204   D869 27 F3       			beq	gb_27
1205   D86B 81 02       			cmpa	#$02
1206   D86D 26 0C       			bne	gb_26
1207   D86F 86 0A       			ldaa	#$0A
1208   D871 BD F3 45    			jsr	lfill_a
1209   D874 25 04       			bcs	gb_28
1210   D876 86 02       			ldaa	#$02
1211   D878 20 01       			bra	gb_26
1212   D87A             
1213   D87A 4F          gb_28			clra	
1214   D87B B7 13 9E    gb_26			staa	hy_unknown_5
1215   D87E 32          			pula	
1216   D87F 39          			rts	
1217   D880             
1218   D880 DE CF       gb_29			ldx	current_thread
1219   D882 6F 0D       			clr	$0D,X
1220   D884 39          			rts	
1221   D885             
1222   D885 8D F9       start_spell		bsr	gb_29
1223   D887 CE 00 00    			ldx	#vm_reg_a
1224   D88A FF 11 96    			stx	game_var_7
1225   D88D 8D 7D       			bsr	gb_2A
1226   D88F A6 00       			ldaa	$00,X
1227   D891 B7 13 9E    			staa	hy_unknown_5
1228   D894 EE 01       			ldx	$01,X
1229   D896 FF 11 98    			stx	game_var_unknown
1230   D899 26 31       			bne	gb_2B
1231   D89B 3F          			swi	
1232   D89C             gb_2C			SLEEP_(64)
1232   D89C~            gb_2C			SLEEP_(64)
1232   D89C~            gb_2C			SLEEP_(64)
1232   D89C             
1232   D89C 53 40       
1232   D89E             
1233   D89E 5AFEF2F0A0F8			.db $5A,$FE,$F2,$F0,$A0,$F8	;BEQ_(BIT#60 P #F0) to gb_2C
1234   D8A4             			PRI_($A0)				;Priority=#A0
1234   D8A4 52 A0       
1235   D8A6             			CPUX_					;Resume CPU Execution
1235   D8A6 04          
1236   D8A7 CE E5 83    			ldx	#msg_spell
1237   D8AA BD D3 0B    			jsr	load_message
1238   D8AD BD D3 4C    			jsr	clr_alpha_set_b1
1239   D8B0 86 10       			ldaa	#$10
1240   D8B2 8D 9F       gb_77			bsr	invert_alphamsk
1241   D8B4 BD E9 7C    			jsr	addthread
1242   D8B7 08          			.db $08
1243   D8B8 4A          			deca	
1244   D8B9 26 F7       			bne	gb_77
1245   D8BB BD D5 F0    			jsr	random_x07
1246   D8BE 26 01       			bne	gb_78
1247   D8C0 4C          			inca	
1248   D8C1 8D 9A       gb_78			bsr	gb_79
1249   D8C3 4A          			deca	
1250   D8C4 B7 11 99    			staa	game_var_unknown+1
1251   D8C7 86 20       			ldaa	#$20
1252   D8C9 B7 11 98    			staa	game_var_unknown
1253   D8CC BD D9 71    gb_2B			jsr	gj_31
1254   D8CF 24 FB       			bcc	gb_2B
1255   D8D1 BD D3 4C    			jsr	clr_alpha_set_b1
1256   D8D4 8D 51       			bsr	gb_73
1257   D8D6 CE 13 AD    			ldx	#$13AD
1258   D8D9 DF B8       			stx	temp1
1259   D8DB B6 11 98    			ldaa	game_var_unknown
1260   D8DE 27 71       			beq	gb_74
1261   D8E0 85 20       gb_76			bita	#$20
1262   D8E2 26 06       			bne	gb_75
1263   D8E4 48          			asla	
1264   D8E5 27 6A       			beq	gb_74
1265   D8E7 08          			inx	
1266   D8E8 20 F6       			bra	gb_76
1267   D8EA             
1268   D8EA FF 11 96    gb_75			stx	game_var_7
1269   D8ED BD D3 54    			jsr	clr_next_12
1270   D8F0 8D 53       			bsr	gb_B7
1271   D8F2 8D 8C       			bsr	gb_29
1272   D8F4 86 7F       gb_D8			ldaa	#$7F
1273   D8F6 97 7A       			staa	dmask_p3
1274   D8F8 84 7F       gb_BA			anda	#$7F
1275   D8FA 97 7B       			staa	dmask_p4
1276   D8FC 8D 73       			bsr	gj_31
1277   D8FE 24 17       			bcc	gb_B8
1278   D900 8D 7A       			bsr	gb_B9
1279   D902 27 4D       			beq	gb_74
1280   D904 43          			coma	
1281   D905 9A 7B       			oraa	dmask_p4
1282   D907 B8 11 98    			eora	game_var_unknown
1283   D90A 20 EC       			bra	gb_BA
1284   D90C             
1285   D90C CE 13 A0    gb_2A			ldx	#hy_unknown_7
1286   D90F D6 EB       			ldab	player_up
1287   D911 27 03       			beq	gb_72
1288   D913 08          			inx	
1289   D914 08          			inx	
1290   D915 08          			inx	
1291   D916 39          gb_72			rts	
1292   D917             
1293   D917 5F          gb_B8			clrb	
1294   D918 BD D8 58    			jsr	stab_all_alphmsk
1295   D91B 8D 5F       gb_D7			bsr	gb_B9
1296   D91D 27 32       			beq	gb_74
1297   D91F 8D 50       			bsr	gj_31
1298   D921 24 F8       			bcc	gb_D7
1299   D923 8D 02       			bsr	gb_73
1300   D925 20 CD       			bra	gb_D8
1301   D927             
1302   D927 BD D2 D6    gb_73			jsr	setup_msg_endptr
1303   D92A CE 00 6C    			ldx	#alpha_b1
1304   D92D DF B8       			stx	temp1
1305   D92F CE E5 BC    			ldx	#msg_zeros
1306   D932 B6 13 9E    			ldaa	hy_unknown_5
1307   D935 27 09       			beq	gb_B2
1308   D937 CE E5 B6    			ldx	#msg_3zb
1309   D93A 46          			rora	
1310   D93B 25 03       			bcs	gb_B2
1311   D93D CE E5 B0    			ldx	#msg_3eu
1312   D940 8D 0C       gb_B2			bsr	gb_B3
1313   D942 7C 00 B9    			inc	temp1+1
1314   D945 CE E4 A6    gb_B7			ldx	#gj_3E
1315   D948 B6 11 99    			ldaa	game_var_unknown+1
1316   D94B BD F5 28    			jsr	gettabledata_b
1317   D94E 7E D3 0D    gb_B3			jmp	gj_29
1318   D951             
1319   D951 CE 00 00    gb_74			ldx	#vm_reg_a
1320   D954 FF 11 96    			stx	game_var_7
1321   D957 FF 11 98    			stx	game_var_unknown
1322   D95A 8D 2B       			bsr	gj_05
1323   D95C CE 13 AD    			ldx	#$13AD
1324   D95F BD D3 54    			jsr	clr_next_12
1325   D962 C6 03       			ldab	#$03
1326   D964 B6 13 9E    			ldaa	hy_unknown_5
1327   D967 27 34       			beq	gb_B4
1328   D969 81 02       			cmpa	#$02
1329   D96B 27 2C       			beq	gb_B5
1330   D96D 8D 5C       			bsr	add_b_cur_ecs
1331   D96F 20 31       			bra	gb_B6
1332   D971             
1333   D971 BD E9 7C    gj_31			jsr	addthread
1334   D974 05          			.db $05
1335   D975 86 A0       			ldaa	#$A0
1336   D977 C6 F0       			ldab	#$F0
1337   D979 7E EA 60    			jmp	check_threadid
1338   D97C             
1339   D97C FE 11 96    gb_B9			ldx	game_var_7
1340   D97F A6 00       			ldaa	$00,X
1341   D981 27 03       			beq	gb_D9
1342   D983 B6 11 98    			ldaa	game_var_unknown
1343   D986 39          gb_D9			rts	
1344   D987             
1345   D987 8D 83       gj_05			bsr	gb_2A
1346   D989 B6 13 9E    			ldaa	hy_unknown_5
1347   D98C A7 00       			staa	$00,X
1348   D98E B6 11 98    			ldaa	game_var_unknown
1349   D991 A7 01       			staa	$01,X
1350   D993 B6 11 99    			ldaa	game_var_unknown+1
1351   D996 A7 02       			staa	$02,X
1352   D998 39          			rts	
1353   D999             
1354   D999 8D 3F       gb_B5			bsr	gj_44
1355   D99B 20 05       			bra	gb_B6
1356   D99D             
1357   D99D 86 4C       gb_B4			ldaa	#$4C
1358   D99F BD EB 3D    			jsr	score_main
1359   D9A2 86 06       gb_B6			ldaa	#$06
1360   D9A4 BD EC 3B    			jsr	isnd_once
1361   D9A7 8D C8       			bsr	gj_31
1362   D9A9 24 1A       			bcc	gb_D5
1363   D9AB DE CF       			ldx	current_thread
1364   D9AD 86 A1       			ldaa	#$A1
1365   D9AF A7 0D       			staa	$0D,X
1366   D9B1 86 7F       			ldaa	#$7F
1367   D9B3 97 7B       			staa	dmask_p4
1368   D9B5 86 10       			ldaa	#$10
1369   D9B7 D6 7A       gb_D6			ldab	dmask_p3
1370   D9B9 53          			comb	
1371   D9BA C4 7F       			andb	#$7F
1372   D9BC D7 7A       			stab	dmask_p3
1373   D9BE BD E9 7C    			jsr	addthread
1374   D9C1 05          			.db $05
1375   D9C2 4A          			deca	
1376   D9C3 26 F2       			bne	gb_D6
1377   D9C5 BD D3 46    gb_D5			jsr	gj_0D
1378   D9C8 7E D8 85    			jmp	start_spell
1379   D9CB             
1380   D9CB 37          add_b_cur_ecs	pshb	
1381   D9CC BD D3 F3    			jsr	get_current_ecs
1382   D9CF 17          			tba	
1383   D9D0 33          			pulb	
1384   D9D1 1B          			aba	
1385   D9D2 A7 00       			staa	$00,X
1386   D9D4 96 EB       			ldaa	player_up
1387   D9D6 8B 0B       			adda	#$0B
1388   D9D8 20 0E       			bra	gb_4C
1389   D9DA             
1390   D9DA 96 06       gj_44			ldaa	game_ram_6
1391   D9DC 1B          			aba	
1392   D9DD 81 05       			cmpa	#$05
1393   D9DF 2F 02       			ble	gb_F5
1394   D9E1 86 05       			ldaa	#$05
1395   D9E3 97 06       gb_F5			staa	game_ram_6
1396   D9E5 86 0A       			ldaa	#$0A
1397   D9E7 58          			aslb	
1398   D9E8 8D 04       gb_4C			bsr	to_lampm_a
1399   D9EA 5A          			decb	
1400   D9EB 26 FB       			bne	gb_4C
1401   D9ED 39          			rts	
1402   D9EE             
1403   D9EE 7E F2 64    to_lampm_a		jmp	lampm_a
1404   D9F1             
1405   D9F1 3F          gj_0C			swi	
1406   D9F2 AB F4       gb_7D			adda	$F4,X
1407   D9F4 44          			lsra	
1408   D9F5 84 02       			anda	#$02
1409   D9F7 5B D0 2F 01 			.db $5B,$D0,$2F,$01		;BNE_BIT2#2F to gb_2D
1410   D9FB             gb_7A			KILL_					;Remove This Thread
1410   D9FB 03          
1411   D9FC             
1412   D9FC             gb_2D			PRI_($50)				;Priority=#50
1412   D9FC 52 50       
1413   D9FE 5AFCE800F8  			.db $5A,$FC,$E8,$00,$F8		;BEQ_RAM$08==#0 to gb_7A
1414   DA03 B8 FF       			ADDRAM_($08,$FF)			;RAM$08+=$FF
1415   DA05 5AFCE0022C  			.db $5A,$FC,$E0,$02,$2C		;BEQ_RAM$00==#2 to gb_7B
1416   DA0A C1 36       			SETRAM_($01,$36)			;RAM$01=$36
1417   DA0C 5A F4 E1 09 gb_80			.db $5A,$F4,$E1,$09		;BEQ_LampOn/Flash#E1 to gb_7C
1418   DA10             gj_32			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1418   DA10             
1418   DA10 14 01       
1419   DA12 69          			SLEEPI_($9)				;Delay RAM$09
1420   DA13 69          			SLEEPI_($9)				;Delay RAM$09
1421   DA14 5B E1 DB    			.db $5B,$E1,$DB			;BNE_RAM$01 to gb_7D
1422   DA17             			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1422   DA17             
1422   DA17 15 01       
1423   DA19 5AFCE13E69  gb_7C			.db $5A,$FC,$E1,$3E,$69		;BEQ_RAM$01==#62 to gb_7E
1424   DA1E 5BFCE13C02  			.db $5B,$FC,$E1,$3C,$02		;BNE_RAM$01==#60 to gb_7F
1425   DA23             			RCLR0_($10)				;Effect: Range #10
1425   DA23             
1425   DA23 19 10       
1426   DA25 B1 01       gb_7F			ADDRAM_($01,$01)			;RAM$01+=$01
1427   DA27 5BFCE13AE0  			.db $5B,$FC,$E1,$3A,$E0		;BNE_RAM$01==#58 to gb_80
1428   DA2C B1 02       			ADDRAM_($01,$02)			;RAM$01+=$02
1429   DA2E 5A F4 E1 F3 			.db $5A,$F4,$E1,$F3		;BEQ_LampOn/Flash#E1 to gb_7F
1430   DA32             			RSET0_($10)				;Effect: Range #10
1430   DA32             
1430   DA32 18 10       
1431   DA34             			JMPR_(gj_32)
1431   DA34~            			JMPR_(gj_32)
1431   DA34~            			JMPR_(gj_32)
1431   DA34             
1431   DA34~            			JMPR_(gj_32)
1431   DA34~            			JMPR_(gj_32)
1431   DA34             
1431   DA34             
1431   DA34 8F          
1431   DA35 DA          
1432   DA36             			
1433   DA36 C1 3F       gb_7B			SETRAM_($01,$3F)			;RAM$01=$3F
1434   DA38 5A F4 E1 09 gb_BE			.db $5A,$F4,$E1,$09		;BEQ_LampOn/Flash#E1 to gb_BB
1435   DA3C             gj_3F			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1435   DA3C             
1435   DA3C 14 01       
1436   DA3E 69          			SLEEPI_($9)				;Delay RAM$09
1437   DA3F 69          			SLEEPI_($9)				;Delay RAM$09
1438   DA40 5B E1 AF    			.db $5B,$E1,$AF			;BNE_RAM$01 to gb_7D
1439   DA43             			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1439   DA43             
1439   DA43 15 01       
1440   DA45 5AFCE14765  gb_BB			.db $5A,$FC,$E1,$47,$65		;BEQ_RAM$01==#71 to gb_BC
1441   DA4A 5BFCE14502  			.db $5B,$FC,$E1,$45,$02		;BNE_RAM$01==#69 to gb_BD
1442   DA4F             			RCLR0_($11)				;Effect: Range #11
1442   DA4F             
1442   DA4F 19 11       
1443   DA51 B1 01       gb_BD			ADDRAM_($01,$01)			;RAM$01+=$01
1444   DA53 5BFCE143E0  			.db $5B,$FC,$E1,$43,$E0		;BNE_RAM$01==#67 to gb_BE
1445   DA58 B1 02       			ADDRAM_($01,$02)			;RAM$01+=$02
1446   DA5A 5A F4 E1 F3 			.db $5A,$F4,$E1,$F3		;BEQ_LampOn/Flash#E1 to gb_BD
1447   DA5E             			RSET0_($11)				;Effect: Range #11
1447   DA5E             
1447   DA5E 18 11       
1448   DA60             			JMPR_(gj_3F)
1448   DA60~            			JMPR_(gj_3F)
1448   DA60~            			JMPR_(gj_3F)
1448   DA60             
1448   DA60~            			JMPR_(gj_3F)
1448   DA60~            			JMPR_(gj_3F)
1448   DA60             
1448   DA60             
1448   DA60 8F          
1448   DA61 DA          
1449   DA62             			
1450   DA62 37          gj_41			pshb	
1451   DA63 16          			tab	
1452   DA64 BD DD 17    			jsr	gj_16
1453   DA67 3F          			swi	
1454   DA68 5AFBD0E0F3F5			.db $5A,$FB,$D0,$E0,$F3,$F5,$E0,$13	;BEQ_((!RangeOFF#E0) || BIT2#E0) to gb_2E
1454   DA6E E013
1455   DA70             			BITON4a_($00)			;Turn ON: Lamp#00(lamp_h1)
1455   DA70 DC 00       
1456   DA72             			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1456   DA72             
1456   DA72 14 01       
1457   DA74 69          			SLEEPI_($9)				;Delay RAM$09
1458   DA75 69          			SLEEPI_($9)				;Delay RAM$09
1459   DA76 5A D0 E0 04 			.db $5A,$D0,$E0,$04		;BEQ_BIT2#E0 to gb_2F
1460   DA7A C0 00       			SETRAM_($00,$00)			;RAM$00=$00
1461   DA7C             			JMPR_(gb_2E)
1461   DA7C~            			JMPR_(gb_2E)
1461   DA7C~            			JMPR_(gb_2E)
1461   DA7C             
1461   DA7C~            			JMPR_(gb_2E)
1461   DA7C~            			JMPR_(gb_2E)
1461   DA7C             
1461   DA7C             
1461   DA7C 80          
1461   DA7D 05          
1462   DA7E             			
1463   DA7E             gb_2F			BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
1463   DA7E DD 00       
1464   DA80             			JSRD_(lampm_clr0)			
1464   DA80 57          
1464   DA81 F2 1D       
1465   DA83             gb_2E			CPUX_					;Resume CPU Execution
1465   DA83 04          
1466   DA84 33          			pulb	
1467   DA85 39          			rts	
1468   DA86             
1469   DA86 3F          gj_3C			.db $3F
1470   DA87             
1471   DA87             
1472   DA87             gb_7E			JSRR_(gj_40)			
1472   DA87~            gb_7E			JSRR_(gj_40)			
1472   DA87~            gb_7E			JSRR_(gj_40)			
1472   DA87             
1472   DA87~            gb_7E			JSRR_(gj_40)			
1472   DA87~            gb_7E			JSRR_(gj_40)			
1472   DA87             
1472   DA87             
1472   DA87 90          
1472   DA88 D0          
1473   DA89 5A D0 2F 5F 			.db $5A,$D0,$2F,$5F		;BEQ_BIT2#2F to gb_BF
1474   DA8D C0 00       			SETRAM_($00,$00)			;RAM$00=$00
1475   DA8F B0 01       gb_C0			ADDRAM_($00,$01)			;RAM$00+=$01
1476   DA91 5AFAD0E0F3FC			.db $5A,$FA,$D0,$E0,$F3,$FC,$E0,$E1,$F5;BEQ_((!RAM$00==#225) && BIT2#E0) to gb_C0
1476   DA97 E0E1F5
1477   DA9A 5AFEF2F0304C			.db $5A,$FE,$F2,$F0,$30,$4C	;BEQ_(BIT#FFFFFFF0 P #F0) to gb_BF
1478   DAA0             			JSRDR_(gj_41)		
1478   DAA0~            			JSRDR_(gj_41)		
1478   DAA0~            			JSRDR_(gj_41)		
1478   DAA0             
1478   DAA0~            			JSRDR_(gj_41)		
1478   DAA0~            			JSRDR_(gj_41)		
1478   DAA0             
1478   DAA0             
1478   DAA0 AF          
1478   DAA1 C0          
1479   DAA2 5AFCE00045  			.db $5A,$FC,$E0,$00,$45		;BEQ_RAM$00==#0 to gb_BF
1480   DAA7 5AFCE0E128  			.db $5A,$FC,$E0,$E1,$28		;BEQ_RAM$00==#225 to gb_C1
1481   DAAC             			JMPR_(gb_C0)
1481   DAAC~            			JMPR_(gb_C0)
1481   DAAC~            			JMPR_(gb_C0)
1481   DAAC             
1481   DAAC~            			JMPR_(gb_C0)
1481   DAAC~            			JMPR_(gb_C0)
1481   DAAC             
1481   DAAC             
1481   DAAC 8F          
1481   DAAD E1          
1482   DAAE             			
1483   DAAE 3F          gj_3B			.db $3F
1484   DAAF             
1485   DAAF             
1486   DAAF             gb_BC			JSRR_(gj_40)			
1486   DAAF~            gb_BC			JSRR_(gj_40)			
1486   DAAF~            gb_BC			JSRR_(gj_40)			
1486   DAAF             
1486   DAAF~            gb_BC			JSRR_(gj_40)			
1486   DAAF~            gb_BC			JSRR_(gj_40)			
1486   DAAF             
1486   DAAF             
1486   DAAF 90          
1486   DAB0 A8          
1487   DAB1 5A D0 2F 37 			.db $5A,$D0,$2F,$37		;BEQ_BIT2#2F to gb_BF
1488   DAB5 C0 0A       			SETRAM_($00,$0A)			;RAM$00=$0A
1489   DAB7 B0 FF       gb_DA			ADDRAM_($00,$FF)			;RAM$00+=$FF
1490   DAB9 5AFAD0E0F3FC			.db $5A,$FA,$D0,$E0,$F3,$FC,$E0,$E1,$F5;BEQ_((!RAM$00==#225) && BIT2#E0) to gb_DA
1490   DABF E0E1F5
1491   DAC2 5AFEF2F03024			.db $5A,$FE,$F2,$F0,$30,$24	;BEQ_(BIT#FFFFFFF0 P #F0) to gb_BF
1492   DAC8             			JSRDR_(gj_41)		
1492   DAC8~            			JSRDR_(gj_41)		
1492   DAC8~            			JSRDR_(gj_41)		
1492   DAC8             
1492   DAC8~            			JSRDR_(gj_41)		
1492   DAC8~            			JSRDR_(gj_41)		
1492   DAC8             
1492   DAC8             
1492   DAC8 AF          
1492   DAC9 98          
1493   DACA 5AFCE0001D  			.db $5A,$FC,$E0,$00,$1D		;BEQ_RAM$00==#0 to gb_BF
1494   DACF 5BFCE0E1E3  			.db $5B,$FC,$E0,$E1,$E3		;BNE_RAM$00==#225 to gb_DA
1495   DAD4 5AFAF5E0F3D0gb_C1			.db $5A,$FA,$F5,$E0,$F3,$D0,$E0,$03	;BEQ_((!BIT2#E0) && RangeOFF#E0) to gb_DB
1495   DADA E003
1496   DADC             			SLEEP_(1)
1496   DADC             
1496   DADC 71          
1496   DADD~            			SLEEP_(1)
1496   DADD~            			SLEEP_(1)
1496   DADD             
1497   DADD             			JMPR_(gb_C1)
1497   DADD~            			JMPR_(gb_C1)
1497   DADD~            			JMPR_(gb_C1)
1497   DADD             
1497   DADD~            			JMPR_(gb_C1)
1497   DADD~            			JMPR_(gb_C1)
1497   DADD             
1497   DADD             
1497   DADD 8F          
1497   DADE F5          
1498   DADF             			
1499   DADF             gb_DB			BITON4a_($00)			;Turn ON: Lamp#00(lamp_h1)
1499   DADF DC 00       
1500   DAE1             gb_F7			JSRDR_(to_lampm_a)	
1500   DAE1~            gb_F7			JSRDR_(to_lampm_a)	
1500   DAE1~            gb_F7			JSRDR_(to_lampm_a)	
1500   DAE1             
1500   DAE1~            gb_F7			JSRDR_(to_lampm_a)	
1500   DAE1~            gb_F7			JSRDR_(to_lampm_a)	
1500   DAE1             
1500   DAE1             
1500   DAE1 AF          
1500   DAE2 0B          
1501   DAE3 5A F6 E0 08 			.db $5A,$F6,$E0,$08		;BEQ_RangeON#E0 to gb_F6
1502   DAE7 69          			SLEEPI_($9)				;Delay RAM$09
1503   DAE8 5A D0 E0 F5 			.db $5A,$D0,$E0,$F5		;BEQ_BIT2#E0 to gb_F7
1504   DAEC             gb_BF			JSRR_(gj_13)			
1504   DAEC~            gb_BF			JSRR_(gj_13)			
1504   DAEC~            gb_BF			JSRR_(gj_13)			
1504   DAEC             
1504   DAEC~            gb_BF			JSRR_(gj_13)			
1504   DAEC~            gb_BF			JSRR_(gj_13)			
1504   DAEC             
1504   DAEC             
1504   DAEC 93          
1504   DAED 48          
1505   DAEE             gb_8C			KILL_					;Remove This Thread
1505   DAEE 03          
1506   DAEF             
1507   DAEF             gb_F6			JSRD_(lampm_c)			
1507   DAEF 57          
1507   DAF0 F2 E1       
1508   DAF2             			JSRD_(lampm_e)			
1508   DAF2 57          
1508   DAF3 F2 F2       
1509   DAF5 5A F5 E0 07 			.db $5A,$F5,$E0,$07		;BEQ_RangeOFF#E0 to gb_102
1510   DAF9             			SLEEP_(4)
1510   DAF9             
1510   DAF9 74          
1510   DAFA~            			SLEEP_(4)
1510   DAFA~            			SLEEP_(4)
1510   DAFA             
1511   DAFA 5B D0 E0 EE 			.db $5B,$D0,$E0,$EE		;BNE_BIT2#E0 to gb_BF
1512   DAFE             			JMPR_(gb_F6)
1512   DAFE~            			JMPR_(gb_F6)
1512   DAFE~            			JMPR_(gb_F6)
1512   DAFE             
1512   DAFE~            			JMPR_(gb_F6)
1512   DAFE~            			JMPR_(gb_F6)
1512   DAFE             
1512   DAFE             
1512   DAFE 8F          
1512   DAFF EF          
1513   DB00             			
1514   DB00             gb_102		BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
1514   DB00 DD 00       
1515   DB02             			PRI_($00)				;Priority=#00
1515   DB02 52 00       
1516   DB04             			JSRR_(gj_13)			
1516   DB04~            			JSRR_(gj_13)			
1516   DB04~            			JSRR_(gj_13)			
1516   DB04             
1516   DB04~            			JSRR_(gj_13)			
1516   DB04~            			JSRR_(gj_13)			
1516   DB04             
1516   DB04             
1516   DB04 93          
1516   DB05 30          
1517   DB06             gj_1A			JSRDR_(gj_35)		
1517   DB06~            gj_1A			JSRDR_(gj_35)		
1517   DB06~            gj_1A			JSRDR_(gj_35)		
1517   DB06             
1517   DB06~            gj_1A			JSRDR_(gj_35)		
1517   DB06~            gj_1A			JSRDR_(gj_35)		
1517   DB06             
1517   DB06             
1517   DB06 AB          
1517   DB07 9D          
1518   DB08             			RCLR1L0_($8A,$0A)			;Effect: Range #8A Range #0A
1518   DB08             
1518   DB08 1C 8A 0A    
1519   DB0B B2 04       			ADDRAM_($02,$04)			;RAM$02+=$04
1520   DB0D 5BFCE600DC  			.db $5B,$FC,$E6,$00,$DC		;BNE_RAM$06==#0 to gb_8C
1521   DB12             gj_19			REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
1521   DB12 55 08 00    
1522   DB15             			SOL_($F6)				; Sol#6:gi_relay_pf
1522   DB15 31 F6       
1523   DB17             			JSRR_(gj_06)			
1523   DB17~            			JSRR_(gj_06)			
1523   DB17~            			JSRR_(gj_06)			
1523   DB17             
1523   DB17~            			JSRR_(gj_06)			
1523   DB17~            			JSRR_(gj_06)			
1523   DB17             
1523   DB17             
1523   DB17 9B          
1523   DB18 F1          
1524   DB19 C0 05       			SETRAM_($00,$05)			;RAM$00=$05
1525   DB1B C1 05       			SETRAM_($01,$05)			;RAM$01=$05
1526   DB1D             gj_34			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1526   DB1D             
1526   DB1D 14 01       
1527   DB1F 5AFCE13504  			.db $5A,$FC,$E1,$35,$04		;BEQ_RAM$01==#53 to gb_89
1528   DB24 B1 06       			ADDRAM_($01,$06)			;RAM$01+=$06
1529   DB26             			JMPR_(gj_34)
1529   DB26~            			JMPR_(gj_34)
1529   DB26~            			JMPR_(gj_34)
1529   DB26             
1529   DB26~            			JMPR_(gj_34)
1529   DB26~            			JMPR_(gj_34)
1529   DB26             
1529   DB26             
1529   DB26 8F          
1529   DB27 F5          
1530   DB28             			
1531   DB28 5B 05 0D    gb_89			.db $5B,$05,$0D			;BNE_LAMP#05(lamp_h6) to gb_CA
1532   DB2B B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
1533   DB2D 5AFCE00022  			.db $5A,$FC,$E0,$00,$22		;BEQ_RAM$00==#0 to gb_CB
1534   DB32 EE          			SND_($0E)				;Sound #0E
1535   DB33             			SOL_($40,$41,$42,$47)		; Sol#0:hyper_flash Sol#1:energy_flash Sol#2:p1_flash Sol#7:p2_flash
1535   DB33 3440414247  
1536   DB38             gb_CA			RROL0_($81,$82,$83,$84,$85,$86,$87,$88,$09);Effect: Range #81 Range #82 Range #83 Range #84 Range #85 Range #86 Range #87 Range #88 Range #09
1536   DB38             
1536   DB38 1D8182838485
1536   DB3E 86878809
1537   DB42             			SLEEP_(7)
1537   DB42             
1537   DB42 77          
1537   DB43~            			SLEEP_(7)
1537   DB43~            			SLEEP_(7)
1537   DB43             
1538   DB43 5B 00 E2    			.db $5B,$00,$E2			;BNE_LAMP#00(lamp_h1) to gb_89
1539   DB46             			BITON_($BE,$BD,$C6,$47)		;Turn ON: Lamp#3E(lamp_g), Lamp#3D(lamp_f), Bit#06, Bit#07
1539   DB46             
1539   DB46 10BEBDC647  
1540   DB4B             			EXE_($06)				;CPU Execute Next 6 Bytes
1540   DB4B~            			EXE_($06)				;CPU Execute Next 6 Bytes
1540   DB4B~            			EXE_($06)				;CPU Execute Next 6 Bytes
1540   DB4B             
1540   DB4B 48          
1540   DB4C             
1541   DB4C CE DD B0    			ldx	#gj_46
1542   DB4F BD EA 24    			jsr	newthread_06
1543   DB52             			JMPR_(gb_89)
1543   DB52~            			JMPR_(gb_89)
1543   DB52~            			JMPR_(gb_89)
1543   DB52             
1543   DB52~            			JMPR_(gb_89)
1543   DB52~            			JMPR_(gb_89)
1543   DB52             
1543   DB52             
1543   DB52 8F          
1543   DB53 D4          
1544   DB54             			
1545   DB54 C6 00       gb_CB			SETRAM_($06,$00)			;RAM$06=$00
1546   DB56 5F          			JMP_(gj_45)				
1546   DB57 D3 A1       
1547   DB59             
1548   DB59             
1549   DB59             gj_40			SLEEP_(1)
1549   DB59             
1549   DB59 71          
1549   DB5A~            gj_40			SLEEP_(1)
1549   DB5A~            gj_40			SLEEP_(1)
1549   DB5A             
1550   DB5A 5AFEF2F121F9			.db $5A,$FE,$F2,$F1,$21,$F9	;BEQ_(LAMP#21(lamp_m4) P #F1) to gj_40
1551   DB60             			PRI_($20)				;Priority=#20
1551   DB60 52 20       
1552   DB62 5B F6 4D 02 			.db $5B,$F6,$4D,$02		;BNE_RangeON#4D to gb_DC
1553   DB66             			RCLR0_($4D)				;Effect: Range #4D
1553   DB66             
1553   DB66 19 4D       
1554   DB68             gb_DC			JSRDR_(gj_15)		
1554   DB68~            gb_DC			JSRDR_(gj_15)		
1554   DB68~            gb_DC			JSRDR_(gj_15)		
1554   DB68             
1554   DB68~            gb_DC			JSRDR_(gj_15)		
1554   DB68~            gb_DC			JSRDR_(gj_15)		
1554   DB68             
1554   DB68             
1554   DB68 A0          
1554   DB69 13          
1555   DB6A B1 30       			ADDRAM_($01,$30)			;RAM$01+=$30
1556   DB6C 5AFBFBD0E1D0			.db $5A,$FB,$FB,$D0,$E1,$D0,$E0,$D0,$F9,$E1;BEQ_(BIT2#F9 || (BIT2#E0 || BIT2#E1)) to gb_DD
1556   DB72 E0D0F9E1
1557   DB76             			BITFL2_($E1,$DC,$01)		;Flash: Lamp#21(lamp_m4), Lamp#1C(lamp_l5), Lamp#01(lamp_h2)
1557   DB76             
1557   DB76 23 E1 DC 01 
1558   DB7A             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1558   DB7A             
1558   DB7A 51 10       
1558   DB7C~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1558   DB7C~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
1558   DB7C             
1559   DB7C             			MRTS_					;Macro RTS, Save MRA,MRB
1559   DB7C 02          
1560   DB7D             
1561   DB7D BD D5 F5    gj_15			jsr	random_x0f
1562   DB80 81 08       			cmpa	#$08
1563   DB82 2F 01       			ble	gb_81
1564   DB84 44          			lsra	
1565   DB85 4C          gb_81			inca	
1566   DB86 16          			tab	
1567   DB87 39          			rts	
1568   DB88             
1569   DB88 BD D2 D6    show_eunit_bonus	jsr	setup_msg_endptr
1570   DB8B CE 00 60    			ldx	#alpha_b0
1571   DB8E DF B8       			stx	temp1
1572   DB90 CE E5 C8    			ldx	#msg_enuit
1573   DB93 BD D3 0D    			jsr	gj_29
1574   DB96 CE E5 8D    			ldx	#msg_bonus
1575   DB99 BD D3 0D    			jsr	gj_29
1576   DB9C BD E9 7C    			jsr	addthread
1577   DB9F 25          			.db $25
1578   DBA0 BD D2 D6    			jsr	setup_msg_endptr
1579   DBA3 D6 06       			ldab	game_ram_6
1580   DBA5 CE 00 61    			ldx	#alpha_b0+1
1581   DBA8 BD EC 32    			jsr	split_ab
1582   DBAB 5D          			tstb	
1583   DBAC 27 04       			beq	gb_56
1584   DBAE CB 1B       			addb	#$1B
1585   DBB0 E7 00       			stab	$00,X
1586   DBB2 D6 06       gb_56			ldab	game_ram_6
1587   DBB4 C4 0F       			andb	#$0F
1588   DBB6 CB 1B       			addb	#$1B
1589   DBB8 E7 01       			stab	$01,X
1590   DBBA 86 18       			ldaa	#$18
1591   DBBC A7 03       			staa	$03,X
1592   DBBE 96 05       			ldaa	game_ram_5
1593   DBC0 81 09       			cmpa	#$09
1594   DBC2 23 02       			bls	gb_57
1595   DBC4 86 09       			ldaa	#$09
1596   DBC6 16          gb_57			tab	
1597   DBC7 CB 9B       			addb	#$9B
1598   DBC9 E7 05       			stab	$05,X
1599   DBCB C6 1B       			ldab	#$1B
1600   DBCD E7 06       			stab	$06,X
1601   DBCF E7 07       			stab	$07,X
1602   DBD1 E7 08       			stab	$08,X
1603   DBD3 48          			asla	
1604   DBD4 48          			asla	
1605   DBD5 48          			asla	
1606   DBD6 8A 03       			oraa	#$03
1607   DBD8 D6 06       			ldab	game_ram_6
1608   DBDA BD EB 3D    gb_58			jsr	score_main
1609   DBDD 5A          			decb	
1610   DBDE 26 FA       			bne	gb_58
1611   DBE0 BD E9 7C    			jsr	addthread
1612   DBE3 25          			.db $25
1613   DBE4 39          			rts	
1614   DBE5             
1615   DBE5 D6 05       start_baiter	ldab	game_ram_5
1616   DBE7 BD F8 9D    			jsr	dec2hex
1617   DBEA 86 7F       			ldaa	#$7F
1618   DBEC 80 04       gb_31			suba	#$04
1619   DBEE 81 09       			cmpa	#$09
1620   DBF0 2D 05       			blt	gb_30
1621   DBF2 5A          			decb	
1622   DBF3 26 F7       			bne	gb_31
1623   DBF5 20 02       			bra	gb_32
1624   DBF7             
1625   DBF7 86 08       gb_30			ldaa	#$08
1626   DBF9 3F          gb_32			swi	
1627   DBFA CE 00       			SETRAM_($0E,$00)			;RAM$0E=$00
1628   DBFC 67          gb_33			SLEEPI_($7)				;Delay RAM$07
1629   DBFD BE 01       			ADDRAM_($0E,$01)			;RAM$0E+=$01
1630   DBFF 5A D0 2F F9 			.db $5A,$D0,$2F,$F9		;BEQ_BIT2#2F to gb_33
1631   DC03             			EXE_($03)				;CPU Execute Next 3 Bytes
1631   DC03~            			EXE_($03)				;CPU Execute Next 3 Bytes
1631   DC03~            			EXE_($03)				;CPU Execute Next 3 Bytes
1631   DC03             
1631   DC03 45          
1631   DC04             
1632   DC04 D6 E8       			ldab	random_bool
1633   DC06 4A          			deca	
1634   DC07 5AFCE00009  			.db $5A,$FC,$E0,$00,$09		;BEQ_RAM$00==#0 to gb_34
1635   DC0C 5BFAFCE100FD			.db $5B,$FA,$FC,$E1,$00,$FD,$EE,$30,$E7;BNE_(RAM$0E>=#48 && RAM$01==#0) to gb_33
1635   DC12 EE30E7
1636   DC15             gb_34			SLEEP_(1)
1636   DC15             
1636   DC15 71          
1636   DC16~            gb_34			SLEEP_(1)
1636   DC16~            gb_34			SLEEP_(1)
1636   DC16             
1637   DC16             			EXE_($03)				;CPU Execute Next 3 Bytes
1637   DC16~            			EXE_($03)				;CPU Execute Next 3 Bytes
1637   DC16~            			EXE_($03)				;CPU Execute Next 3 Bytes
1637   DC16             
1637   DC16 45          
1637   DC17             
1638   DC17 7F 13 96    			clr	hy_unknown_1
1639   DC1A             			JSRDR_(gj_15)		
1639   DC1A~            			JSRDR_(gj_15)		
1639   DC1A~            			JSRDR_(gj_15)		
1639   DC1A             
1639   DC1A~            			JSRDR_(gj_15)		
1639   DC1A~            			JSRDR_(gj_15)		
1639   DC1A             
1639   DC1A             
1639   DC1A AF          
1639   DC1B 61          
1640   DC1C 5AFBF3F5E0D0			.db $5A,$FB,$F3,$F5,$E0,$D0,$E0,$F1	;BEQ_(BIT2#E0 || (!RangeOFF#E0)) to gb_34
1640   DC22 E0F1
1641   DC24 B0 53       			ADDRAM_($00,$53)			;RAM$00+=$53
1642   DC26             			JSRDR_(gj_16)		
1642   DC26~            			JSRDR_(gj_16)		
1642   DC26~            			JSRDR_(gj_16)		
1642   DC26             
1642   DC26~            			JSRDR_(gj_16)		
1642   DC26~            			JSRDR_(gj_16)		
1642   DC26             
1642   DC26             
1642   DC26 A0          
1642   DC27 EF          
1643   DC28             			PRI_($30)				;Priority=#30
1643   DC28 52 30       
1644   DC2A CE 06       gb_37			SETRAM_($0E,$06)			;RAM$0E=$06
1645   DC2C             			BITON4a_($00)			;Turn ON: Lamp#00(lamp_h1)
1645   DC2C DC 00       
1646   DC2E             			BITONP_($01)			;Turn ON Lamp/Bit @RAM:01
1646   DC2E             
1646   DC2E 14 01       
1647   DC30             			BITOFF3a_($01)			;Turn OFF: Lamp#01(lamp_h2)
1647   DC30 D5 01       
1648   DC32             gb_36			BITINVP2_($01)			;Toggle Lamp/Bit @RAM:01
1648   DC32             
1648   DC32 26 01       
1649   DC34 E2          			SND_($02)				;Sound #02
1650   DC35 67          			SLEEPI_($7)				;Delay RAM$07
1651   DC36 5B D0 E0 20 			.db $5B,$D0,$E0,$20		;BNE_BIT2#E0 to gb_35
1652   DC3A BE FF       			ADDRAM_($0E,$FF)			;RAM$0E+=$FF
1653   DC3C 5BFCEE00F1  			.db $5B,$FC,$EE,$00,$F1		;BNE_RAM$0E==#0 to gb_36
1654   DC41             			BITONP2_($01)			;Turn ON Lamp/Bit @RAM:01
1654   DC41             
1654   DC41 24 01       
1655   DC43             			JSRDR_(gj_17)		
1655   DC43~            			JSRDR_(gj_17)		
1655   DC43~            			JSRDR_(gj_17)		
1655   DC43             
1655   DC43~            			JSRDR_(gj_17)		
1655   DC43~            			JSRDR_(gj_17)		
1655   DC43             
1655   DC43             
1655   DC43 A0          
1655   DC44 3F          
1656   DC45             			BITOFFP2_($01)			;Turn OFF Lamp/Bit @RAM:01
1656   DC45             
1656   DC45 25 01       
1657   DC47             			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1657   DC47             
1657   DC47 15 01       
1658   DC49 5B D0 E0 0D 			.db $5B,$D0,$E0,$0D		;BNE_BIT2#E0 to gb_35
1659   DC4D             			BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
1659   DC4D DD 00       
1660   DC4F             			JSRDR_(gj_18)		
1660   DC4F~            			JSRDR_(gj_18)		
1660   DC4F~            			JSRDR_(gj_18)		
1660   DC4F             
1660   DC4F~            			JSRDR_(gj_18)		
1660   DC4F~            			JSRDR_(gj_18)		
1660   DC4F             
1660   DC4F             
1660   DC4F A0          
1660   DC50 D2          
1661   DC51 5BFCE100D4  			.db $5B,$FC,$E1,$00,$D4		;BNE_RAM$01==#0 to gb_37
1662   DC56             			PRI_($00)				;Priority=#00
1662   DC56 52 00       
1663   DC58             			JMPR_(gj_19)
1663   DC58~            			JMPR_(gj_19)
1663   DC58~            			JMPR_(gj_19)
1663   DC58             
1663   DC58~            			JMPR_(gj_19)
1663   DC58~            			JMPR_(gj_19)
1663   DC58             
1663   DC58             
1663   DC58 8E          
1663   DC59 B8          
1664   DC5A             			
1665   DC5A             gb_35			BITOFFP_($01)			;Turn OFF Lamp/Bit @RAM:01
1665   DC5A             
1665   DC5A 15 01       
1666   DC5C             			BITOFFP2_($01)			;Turn OFF Lamp/Bit @RAM:01
1666   DC5C             
1666   DC5C 25 01       
1667   DC5E             			PRI_($00)				;Priority=#00
1667   DC5E 52 00       
1668   DC60             			POINTS_(1,10000)			;10000 Points
1668   DC60 42          
1668   DC61             
1668   DC61~            			POINTS_(1,10000)			;10000 Points
1668   DC61~            			POINTS_(1,10000)			;10000 Points
1668   DC61             
1668   DC61~            			POINTS_(1,10000)			;10000 Points
1668   DC61~            			POINTS_(1,10000)			;10000 Points
1668   DC61             
1668   DC61~            			POINTS_(1,10000)			;10000 Points
1668   DC61~            			POINTS_(1,10000)			;10000 Points
1668   DC61             
1668   DC61~            			POINTS_(1,10000)			;10000 Points
1668   DC61~            			POINTS_(1,10000)			;10000 Points
1668   DC61             
1668   DC61             
1668   DC61 0C          
1668   DC62~            			POINTS_(1,10000)			;10000 Points
1668   DC62~            			POINTS_(1,10000)			;10000 Points
1668   DC62~            			POINTS_(1,10000)			;10000 Points
1668   DC62~            			POINTS_(1,10000)			;10000 Points
1668   DC62~            			POINTS_(1,10000)			;10000 Points
1668   DC62~            			POINTS_(1,10000)			;10000 Points
1668   DC62             
1668   DC62             
1668   DC62             
1668   DC62             
1668   DC62             
1669   DC62 5AFCE70402  			.db $5A,$FC,$E7,$04,$02		;BEQ_RAM$07==#4 to gb_84
1670   DC67 B7 FF       			ADDRAM_($07,$FF)			;RAM$07+=$FF
1671   DC69             gb_84			JSRDR_(random_x07)	
1671   DC69~            gb_84			JSRDR_(random_x07)	
1671   DC69~            gb_84			JSRDR_(random_x07)	
1671   DC69             
1671   DC69~            gb_84			JSRDR_(random_x07)	
1671   DC69~            gb_84			JSRDR_(random_x07)	
1671   DC69             
1671   DC69             
1671   DC69 A9          
1671   DC6A 85          
1672   DC6B             			EXE_($02)				;CPU Execute Next 2 Bytes
1672   DC6B~            			EXE_($02)				;CPU Execute Next 2 Bytes
1672   DC6B~            			EXE_($02)				;CPU Execute Next 2 Bytes
1672   DC6B             
1672   DC6B 44          
1672   DC6C             
1673   DC6C 9B 03       			adda	game_ram_3
1674   DC6E FB          			SND_($1B)				;Sound #1B
1675   DC6F 5AFDE50902  gb_86			.db $5A,$FD,$E5,$09,$02		;BEQ_RAM$05>=#9 to gb_85
1676   DC74             			SLEEP_(32)
1676   DC74~            			SLEEP_(32)
1676   DC74~            			SLEEP_(32)
1676   DC74             
1676   DC74 53 20       
1676   DC76             
1677   DC76             gb_85			SLEEP_(15)
1677   DC76             
1677   DC76 7F          
1677   DC77~            gb_85			SLEEP_(15)
1677   DC77~            gb_85			SLEEP_(15)
1677   DC77             
1678   DC77 5A D0 2F F4 			.db $5A,$D0,$2F,$F4		;BEQ_BIT2#2F to gb_86
1679   DC7B B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
1680   DC7D 5BFCE000ED  			.db $5B,$FC,$E0,$00,$ED		;BNE_RAM$00==#0 to gb_86
1681   DC82             			JMPR_(gb_34)
1681   DC82~            			JMPR_(gb_34)
1681   DC82~            			JMPR_(gb_34)
1681   DC82             
1681   DC82~            			JMPR_(gb_34)
1681   DC82~            			JMPR_(gb_34)
1681   DC82             
1681   DC82             
1681   DC82 8F          
1681   DC83 91          
1682   DC84             			
1683   DC84 36          gj_17			psha	
1684   DC85 37          			pshb	
1685   DC86 BD D5 EB    			jsr	random_x03
1686   DC89 97 0E       			staa	game_ram_e
1687   DC8B 33          			pulb	
1688   DC8C 32          			pula	
1689   DC8D 27 2D       			beq	gb_87
1690   DC8F 36          			psha	
1691   DC90 B6 13 96    			ldaa	hy_unknown_1
1692   DC93 81 03       			cmpa	#$03
1693   DC95 32          			pula	
1694   DC96 2E 24       			bgt	gb_87
1695   DC98 36          gb_8B			psha	
1696   DC99 86 30       			ldaa	#$30
1697   DC9B 97 C8       			staa	thread_priority
1698   DC9D 32          			pula	
1699   DC9E CE DC BD    			ldx	#gj_33
1700   DCA1 BD E9 D8    			jsr	newthread_sp
1701   DCA4 3F          			swi	
1702   DCA5 FD          			SND_($1D)				;Sound #1D
1703   DCA6             gb_38			SLEEP_(10)
1703   DCA6             
1703   DCA6 7A          
1703   DCA7~            gb_38			SLEEP_(10)
1703   DCA7~            gb_38			SLEEP_(10)
1703   DCA7             
1704   DCA7 5AFEF2FF30F9			.db $5A,$FE,$F2,$FF,$30,$F9	;BEQ_(BIT#FFFFFFF0 P #FF) to gb_38
1705   DCAD             			CPUX_					;Resume CPU Execution
1705   DCAD 04          
1706   DCAE 8D 5F       			bsr	gb_8A
1707   DCB0 27 0A       			beq	gb_87
1708   DCB2 7D 13 9D    			tst	hy_unknown_4
1709   DCB5 26 05       			bne	gb_87
1710   DCB7 7A 00 0E    			dec	game_ram_e
1711   DCBA 26 DC       			bne	gb_8B
1712   DCBC 39          gb_87			rts	
1713   DCBD             
1714   DCBD 97 0D       gj_33			staa	game_ram_d
1715   DCBF 80 53       			suba	#$53
1716   DCC1 BD F3 7D    			jsr	lampm_x
1717   DCC4 8A C0       			oraa	#$C0
1718   DCC6 BD F2 7E    			jsr	lampm_set0
1719   DCC9 84 8F       			anda	#$8F
1720   DCCB 36          			psha	
1721   DCCC 17          			tba	
1722   DCCD F6 13 96    			ldab	hy_unknown_1
1723   DCD0 BD F1 DA    			jsr	lamp_off_b
1724   DCD3 32          			pula	
1725   DCD4 BD E9 7C    gb_C3			jsr	addthread
1726   DCD7 08          			.db $08
1727   DCD8 36          			psha	
1728   DCD9 37          			pshb	
1729   DCDA 96 0D       			ldaa	game_ram_d
1730   DCDC BD F3 6F    			jsr	bit_lamp_buf_f
1731   DCDF 33          			pulb	
1732   DCE0 32          			pula	
1733   DCE1 27 21       			beq	gb_C2
1734   DCE3 BD F2 F2    			jsr	lampm_e
1735   DCE6 5C          			incb	
1736   DCE7 C1 05       			cmpb	#$05
1737   DCE9 23 E9       			bls	gb_C3
1738   DCEB 8D 05       			bsr	gb_C4
1739   DCED 3F          			swi	
1740   DCEE             			PRI_($00)				;Priority=#00
1740   DCEE 52 00       
1741   DCF0             			JMPR_(gj_1A)
1741   DCF0~            			JMPR_(gj_1A)
1741   DCF0~            			JMPR_(gj_1A)
1741   DCF0             
1741   DCF0~            			JMPR_(gj_1A)
1741   DCF0~            			JMPR_(gj_1A)
1741   DCF0             
1741   DCF0             
1741   DCF0 8E          
1741   DCF1 14          
1742   DCF2             			
1743   DCF2 36          gb_C4			psha	
1744   DCF3 37          			pshb	
1745   DCF4 86 2F       			ldaa	#$2F
1746   DCF6 BD F3 6F    			jsr	bit_lamp_buf_f
1747   DCF9 33          			pulb	
1748   DCFA 32          			pula	
1749   DCFB 26 BF       			bne	gb_87
1750   DCFD 8D 02       			bsr	gb_DE
1751   DCFF 8A C0       			oraa	#$C0
1752   DD01 7E F2 1D    gb_DE			jmp	lampm_clr0
1753   DD04             
1754   DD04 36          gb_C2			psha	
1755   DD05 86 0B       			ldaa	#$0B
1756   DD07 BD EB 3D    			jsr	score_main
1757   DD0A 32          			pula	
1758   DD0B 8D E5       			bsr	gb_C4
1759   DD0D 20 75       			bra	gb_3B
1760   DD0F             
1761   DD0F 36          gb_8A			psha	
1762   DD10 37          			pshb	
1763   DD11 BD F3 6F    			jsr	bit_lamp_buf_f
1764   DD14 33          gb_E1			pulb	
1765   DD15 32          			pula	
1766   DD16 39          			rts	
1767   DD17             
1768   DD17 36          gj_16			psha	
1769   DD18 4F          			clra	
1770   DD19 5A          gb_83			decb	
1771   DD1A 27 04       			beq	gb_82
1772   DD1C 8B 06       			adda	#$06
1773   DD1E 20 F9       			bra	gb_83
1774   DD20             
1775   DD20 16          gb_82			tab	
1776   DD21 32          			pula	
1777   DD22 39          			rts	
1778   DD23             
1779   DD23 36          gj_18			psha	
1780   DD24 B6 13 96    			ldaa	hy_unknown_1
1781   DD27 4C          			inca	
1782   DD28 B7 13 96    			staa	hy_unknown_1
1783   DD2B 81 06       			cmpa	#$06
1784   DD2D 32          			pula	
1785   DD2E 26 02       			bne	gb_88
1786   DD30 5F          			clrb	
1787   DD31 39          			rts	
1788   DD32             
1789   DD32 74 13 9D    gb_88			lsr	hy_unknown_4
1790   DD35 25 11       			bcs	gb_C5
1791   DD37 74 13 9D    			lsr	hy_unknown_4
1792   DD3A 25 15       			bcs	gb_C6
1793   DD3C 36          			psha	
1794   DD3D BD FB 94    			jsr	get_random
1795   DD40 46          			rora	
1796   DD41 85 08       			bita	#$08
1797   DD43 32          			pula	
1798   DD44 25 18       			bcs	gb_C7
1799   DD46 27 09       			beq	gb_C6
1800   DD48 4A          gb_C5			deca	
1801   DD49 81 53       			cmpa	#$53
1802   DD4B 27 0D       			beq	gb_C8
1803   DD4D C0 05       			subb	#$05
1804   DD4F 20 0E       			bra	gb_C9
1805   DD51             
1806   DD51 4C          gb_C6			inca	
1807   DD52 81 5D       			cmpa	#$5D
1808   DD54 27 07       			beq	gb_DF
1809   DD56 CB 07       			addb	#$07
1810   DD58 20 05       			bra	gb_C9
1811   DD5A             
1812   DD5A 4C          gb_C8			inca	
1813   DD5B 20 01       			bra	gb_C7
1814   DD5D             
1815   DD5D 4A          gb_DF			deca	
1816   DD5E 5C          gb_C7			incb	
1817   DD5F 36          gb_C9			psha	
1818   DD60 37          			pshb	
1819   DD61 80 53       			suba	#$53
1820   DD63 BD F3 54    			jsr	lfill_b
1821   DD66 24 05       			bcc	gb_E0
1822   DD68 BD F3 6F    			jsr	bit_lamp_buf_f
1823   DD6B 27 A7       			beq	gb_E1
1824   DD6D 33          gb_E0			pulb	
1825   DD6E 32          			pula	
1826   DD6F BD E9 7C    			jsr	addthread
1827   DD72 01          			.db $01
1828   DD73 5A          			decb	
1829   DD74 20 BC       			bra	gb_88
1830   DD76             
1831   DD76 BD F2 E1    gj_27			jsr	lampm_c
1832   DD79 BD F3 54    			jsr	lfill_b
1833   DD7C 25 06       			bcs	gb_3B
1834   DD7E BD E9 7C    			jsr	addthread
1835   DD81 04          			.db $04
1836   DD82 20 F2       			bra	gj_27
1837   DD84             
1838   DD84 7E E9 C4    gb_3B			jmp	killthread
1839   DD87             
1840   DD87 C6 0F       gb_3A			ldab	#$0F
1841   DD89 BD E9 7C    gb_39			jsr	addthread
1842   DD8C 40          			.db $40
1843   DD8D 5A          			decb	
1844   DD8E 26 F9       			bne	gb_39
1845   DD90 96 09       			ldaa	game_ram_9
1846   DD92 4A          			deca	
1847   DD93 97 09       			staa	game_ram_9
1848   DD95 81 09       			cmpa	#$09
1849   DD97 2E EE       			bgt	gb_3A
1850   DD99 20 E9       			bra	gb_3B
1851   DD9B             
1852   DD9B 5AFBF3F1D030sw_z_bomb		.db $5A,$FB,$F3,$F1,$D0,$30,$1E	;BEQ_(BIT2#30 || (!GAME)) to gb_09
1852   DDA1 1E
1853   DDA2             			PRI_($10)				;Priority=#10
1853   DDA2 52 10       
1854   DDA4             			REMTHREADS_($FF,$10)		;Remove Multiple Threads Based on Priority
1854   DDA4 55 FF 10    
1855   DDA7             			JSRD_(setup_msg_endptr)		
1855   DDA7 57          
1855   DDA8 D2 D6       
1856   DDAA             			JSRD_(gj_08)			
1856   DDAA 57          
1856   DDAB D3 49       
1857   DDAD 5C          			JMPD_(gj_09)
1857   DDAE DE EE       
1858   DDB0             			
1859   DDB0 3F          gj_46			swi	
1860   DDB1 C0 09       			SETRAM_($00,$09)			;RAM$00=$09
1861   DDB3             gb_3C			RROL0_($96,$15)			;Effect: Range #96 Range #15
1861   DDB3             
1861   DDB3 1D 96 15    
1862   DDB6 EF          			SND_($0F)				;Sound #0F
1863   DDB7             			SLEEP_(5)
1863   DDB7             
1863   DDB7 75          
1863   DDB8~            			SLEEP_(5)
1863   DDB8~            			SLEEP_(5)
1863   DDB8             
1864   DDB8 B0 FF       			ADDRAM_($00,$FF)			;RAM$00+=$FF
1865   DDBA 5BFCE000F4  			.db $5B,$FC,$E0,$00,$F4		;BNE_RAM$00==#0 to gb_3C
1866   DDBF             gb_59			KILL_					;Remove This Thread
1866   DDBF 03          
1867   DDC0             
1868   DDC0 5AFBD02FD030gb_09			.db $5A,$FB,$D0,$2F,$D0,$30,$F8	;BEQ_(BIT2#30 || BIT2#2F) to gb_59
1868   DDC6 F8
1869   DDC7             			EXE_($08)				;CPU Execute Next 8 Bytes
1869   DDC7~            			EXE_($08)				;CPU Execute Next 8 Bytes
1869   DDC7~            			EXE_($08)				;CPU Execute Next 8 Bytes
1869   DDC7             
1869   DDC7 4A          
1869   DDC8             
1870   DDC8 BD D3 F3    			jsr	get_current_ecs
1871   DDCB 27 03       			beq	gb_9D
1872   DDCD 5A          			decb	
1873   DDCE E7 00       			stab	$00,X
1874   DDD0 B0 0B       gb_9D			ADDRAM_($00,$0B)			;RAM$00+=$0B
1875   DDD2 5A F5 E0 E9 			.db $5A,$F5,$E0,$E9		;BEQ_RangeOFF#E0 to gb_59
1876   DDD6 5AFDE10203  			.db $5A,$FD,$E1,$02,$03		;BEQ_RAM$01>=#2 to gb_5A
1877   DDDB             			JSRD_(lampm_c)			
1877   DDDB 57          
1877   DDDC F2 E1       
1878   DDDE             gb_5A			BITON4_($2F)			;Turn ON: Lamp#2F(lamp_o6)
1878   DDDE D8 2F       
1879   DDE0             			POINTS_(1,10)			;10 Points
1879   DDE0 42          
1879   DDE1             
1879   DDE1~            			POINTS_(1,10)			;10 Points
1879   DDE1~            			POINTS_(1,10)			;10 Points
1879   DDE1             
1879   DDE1             
1879   DDE1 09          
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2~            			POINTS_(1,10)			;10 Points
1879   DDE2             
1879   DDE2             
1880   DDE2             			PRI_($A1)				;Priority=#A1
1880   DDE2 52 A1       
1881   DDE4             			RCLR1_($52)				;Effect: Range #52
1881   DDE4             
1881   DDE4 29 52       
1882   DDE6             			RCLR0_($CF,$D3,$12)		;Effect: Range #CF Range #D3 Range #12
1882   DDE6             
1882   DDE6 19 CF D3 12 
1883   DDEA C1 00       			SETRAM_($01,$00)			;RAM$01=$00
1884   DDEC 5BFEF2FF500Bgj_2A			.db $5B,$FE,$F2,$FF,$50,$0B	;BNE_(BIT#10 P #FF) to gb_5B
1885   DDF2 B8 01       			ADDRAM_($08,$01)			;RAM$08+=$01
1886   DDF4 B1 01       			ADDRAM_($01,$01)			;RAM$01+=$01
1887   DDF6             			POINTS_(5,1000)			;5000 Points
1887   DDF6 42          
1887   DDF7             
1887   DDF7~            			POINTS_(5,1000)			;5000 Points
1887   DDF7~            			POINTS_(5,1000)			;5000 Points
1887   DDF7             
1887   DDF7~            			POINTS_(5,1000)			;5000 Points
1887   DDF7~            			POINTS_(5,1000)			;5000 Points
1887   DDF7             
1887   DDF7~            			POINTS_(5,1000)			;5000 Points
1887   DDF7~            			POINTS_(5,1000)			;5000 Points
1887   DDF7             
1887   DDF7             
1887   DDF7 2B          
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8~            			POINTS_(5,1000)			;5000 Points
1887   DDF8             
1887   DDF8             
1887   DDF8             
1887   DDF8             
1888   DDF8             			REMTHREAD_($FF,$50)		;Remove Single Thread Based on Priority
1888   DDF8 54 FF 50    
1889   DDFB             			JMPR_(gj_2A)
1889   DDFB~            			JMPR_(gj_2A)
1889   DDFB~            			JMPR_(gj_2A)
1889   DDFB             
1889   DDFB~            			JMPR_(gj_2A)
1889   DDFB~            			JMPR_(gj_2A)
1889   DDFB             
1889   DDFB             
1889   DDFB 8F          
1889   DDFC EF          
1890   DDFD             			
1891   DDFD 5BFEF2FF200Bgb_5B			.db $5B,$FE,$F2,$FF,$20,$0B	;BNE_(LAMP#20(lamp_m3) P #FF) to gb_9E
1892   DE03             			POINTS_(1,1000)			;1000 Points
1892   DE03 42          
1892   DE04             
1892   DE04~            			POINTS_(1,1000)			;1000 Points
1892   DE04~            			POINTS_(1,1000)			;1000 Points
1892   DE04             
1892   DE04~            			POINTS_(1,1000)			;1000 Points
1892   DE04~            			POINTS_(1,1000)			;1000 Points
1892   DE04             
1892   DE04~            			POINTS_(1,1000)			;1000 Points
1892   DE04~            			POINTS_(1,1000)			;1000 Points
1892   DE04             
1892   DE04             
1892   DE04 0B          
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05~            			POINTS_(1,1000)			;1000 Points
1892   DE05             
1892   DE05             
1892   DE05             
1892   DE05             
1893   DE05 B1 01       			ADDRAM_($01,$01)			;RAM$01+=$01
1894   DE07 B8 01       			ADDRAM_($08,$01)			;RAM$08+=$01
1895   DE09             			REMTHREAD_($FF,$20)		;Remove Single Thread Based on Priority
1895   DE09 54 FF 20    
1896   DE0C             			JMPR_(gb_5B)
1896   DE0C~            			JMPR_(gb_5B)
1896   DE0C~            			JMPR_(gb_5B)
1896   DE0C             
1896   DE0C~            			JMPR_(gb_5B)
1896   DE0C~            			JMPR_(gb_5B)
1896   DE0C             
1896   DE0C             
1896   DE0C 8F          
1896   DE0D EF          
1897   DE0E             			
1898   DE0E 5BFEF2F4A407gb_9E			.db $5B,$FE,$F2,$F4,$A4,$07	;BNE_(BIT#64 P #F4) to gb_D1
1899   DE14             			EXE_($06)				;CPU Execute Next 6 Bytes
1899   DE14~            			EXE_($06)				;CPU Execute Next 6 Bytes
1899   DE14~            			EXE_($06)				;CPU Execute Next 6 Bytes
1899   DE14             
1899   DE14 48          
1899   DE15             
1900   DE15 CE D7 D2    			ldx	#gj_49
1901   DE18 BD D5 0D    			jsr	addthread_clra
1902   DE1B             gb_D1			RSET1_($54)				;Effect: Range #54
1902   DE1B             
1902   DE1B 28 54       
1903   DE1D             			JSRR_(gj_43)			
1903   DE1D~            			JSRR_(gj_43)			
1903   DE1D~            			JSRR_(gj_43)			
1903   DE1D             
1903   DE1D~            			JSRR_(gj_43)			
1903   DE1D~            			JSRR_(gj_43)			
1903   DE1D             
1903   DE1D             
1903   DE1D 90          
1903   DE1E 19          
1904   DE1F             			EXE_($08)				;CPU Execute Next 8 Bytes
1904   DE1F~            			EXE_($08)				;CPU Execute Next 8 Bytes
1904   DE1F~            			EXE_($08)				;CPU Execute Next 8 Bytes
1904   DE1F             
1904   DE1F 4A          
1904   DE20             
1905   DE20 96 03       			ldaa	game_ram_3
1906   DE22 10          			sba	
1907   DE23 2E 01       			bgt	gb_E9
1908   DE25 4F          			clra	
1909   DE26 97 03       gb_E9			staa	game_ram_3
1910   DE28             			JSRDR_(zbomb_ani)		
1910   DE28~            			JSRDR_(zbomb_ani)		
1910   DE28~            			JSRDR_(zbomb_ani)		
1910   DE28             
1910   DE28~            			JSRDR_(zbomb_ani)		
1910   DE28~            			JSRDR_(zbomb_ani)		
1910   DE28             
1910   DE28             
1910   DE28 A0          
1910   DE29 16          
1911   DE2A EB          			SND_($0B)				;Sound #0B
1912   DE2B             			JSRDR_(zbomb_ani3)	
1912   DE2B~            			JSRDR_(zbomb_ani3)	
1912   DE2B~            			JSRDR_(zbomb_ani3)	
1912   DE2B             
1912   DE2B~            			JSRDR_(zbomb_ani3)	
1912   DE2B~            			JSRDR_(zbomb_ani3)	
1912   DE2B             
1912   DE2B             
1912   DE2B A0          
1912   DE2C 4D          
1913   DE2D             			RCLR0_($12)				;Effect: Range #12
1913   DE2D             
1913   DE2D 19 12       
1914   DE2F             			RCLR1_($54)				;Effect: Range #54
1914   DE2F             
1914   DE2F 29 54       
1915   DE31             			BITOFF4_($2F)			;Turn OFF: Lamp#2F(lamp_o6)
1915   DE31 D9 2F       
1916   DE33             			JMPR_(chk_wave_compl)
1916   DE33~            			JMPR_(chk_wave_compl)
1916   DE33~            			JMPR_(chk_wave_compl)
1916   DE33             
1916   DE33~            			JMPR_(chk_wave_compl)
1916   DE33~            			JMPR_(chk_wave_compl)
1916   DE33             
1916   DE33             
1916   DE33 89          
1916   DE34 0E          
1917   DE35             		
1918   DE35 03          			.db $03
1919   DE36             
1920   DE36             
1921   DE36 B8 01       gj_13			ADDRAM_($08,$01)			;RAM$08+=$01
1922   DE38 5BFDE80602  gj_43			.db $5B,$FD,$E8,$06,$02		;BNE_RAM$08>=#6 to gb_70
1923   DE3D C8 06       			SETRAM_($08,$06)			;RAM$08=$06
1924   DE3F             gb_70			MRTS_					;Macro RTS, Save MRA,MRB
1924   DE3F 02          
1925   DE40             
1926   DE40 CE E6 32    zbomb_ani		ldx	#lmp_ani_inout-1
1927   DE43 08          gb_EA			inx	
1928   DE44 8C E6 82    			cpx	#lmp_ani_outin
1929   DE47 27 17       			beq	zbomb_ani2
1930   DE49 E6 00       			ldab	$00,X
1931   DE4B 17          			tba	
1932   DE4C 84 7F       			anda	#$7F
1933   DE4E BD F1 E8    			jsr	lamp_on_1
1934   DE51 5D          			tstb	
1935   DE52 2B EF       			bmi	gb_EA
1936   DE54 86 0F       			ldaa	#$0F
1937   DE56 BD EC 3B    			jsr	isnd_once
1938   DE59 BD E9 7C    			jsr	addthread
1939   DE5C 02          			.db $02
1940   DE5D 20 E4       			bra	gb_EA
1941   DE5F             
1942   DE5F 39          lmpanirts		rts	
1943   DE60             
1944   DE60 CE E6 32    zbomb_ani2		ldx	#lmp_ani_inout-1
1945   DE63 08          gb_101		inx	
1946   DE64 8C E6 82    			cpx	#lmp_ani_outin
1947   DE67 27 F6       			beq	lmpanirts
1948   DE69 E6 00       			ldab	$00,X
1949   DE6B 17          			tba	
1950   DE6C 84 7F       			anda	#$7F
1951   DE6E BD F1 EF    			jsr	lamp_off_1
1952   DE71 5D          			tstb	
1953   DE72 2B EF       			bmi	gb_101
1954   DE74 BD E9 7C    			jsr	addthread
1955   DE77 02          			.db $02
1956   DE78 20 E9       			bra	gb_101
1957   DE7A             
1958   DE7A CE E6 32    zbomb_ani3		ldx	#lmp_ani_inout-1
1959   DE7D FF 13 98    gb_ED			stx	hy_unknown_2
1960   DE80 08          gb_EB			inx	
1961   DE81 8C E6 82    			cpx	#lmp_ani_outin
1962   DE84 27 D9       			beq	lmpanirts
1963   DE86 E6 00       			ldab	$00,X
1964   DE88 17          			tba	
1965   DE89 84 7F       			anda	#$7F
1966   DE8B BD F1 E8    			jsr	lamp_on_1
1967   DE8E 5D          			tstb	
1968   DE8F 2B EF       			bmi	gb_EB
1969   DE91 BD E9 7C    			jsr	addthread
1970   DE94 03          			.db $03
1971   DE95 FE 13 98    			ldx	hy_unknown_2
1972   DE98 08          gb_EC			inx	
1973   DE99 E6 00       			ldab	$00,X
1974   DE9B 17          			tba	
1975   DE9C 84 7F       			anda	#$7F
1976   DE9E BD F1 EF    			jsr	lamp_off_1
1977   DEA1 5D          			tstb	
1978   DEA2 2B F4       			bmi	gb_EC
1979   DEA4 20 D7       			bra	gb_ED
1980   DEA6             
1981   DEA6 00          			.db $00
1982   DEA7             
1983   DEA7             
1984   DEA7 3F          gameover_entry	swi	
1985   DEA8             			SOL_($01,$02,$03,$06,$07,$09)	; Sol#1:energy_flash Sol#2:p1_flash Sol#3:gi_relay_bb Sol#6:gi_relay_pf Sol#7:p2_flash Sol#9:ball_lift
1985   DEA8 360102030607
1985   DEAE 09
1986   DEAF F8          			SND_($18)				;Sound #18
1987   DEB0             			RCLR0_($14)				;Effect: Range #14
1987   DEB0             
1987   DEB0 19 14       
1988   DEB2             			RCLR1_($D4,$14)			;Effect: Range #D4 Range #14
1988   DEB2             
1988   DEB2 29 D4 14    
1989   DEB5             			PRI_($10)				;Priority=#10
1989   DEB5 52 10       
1990   DEB7             			CPUX_					;Resume CPU Execution
1990   DEB7 04          
1991   DEB8 CE DF 6F    			ldx	#gj_36
1992   DEBB BD D5 0D    			jsr	addthread_clra
1993   DEBE 7F 00 E6    			clr	flag_tilt
1994   DEC1 7F 00 22    			clr	bitflags+6
1995   DEC4 CE E5 29    gb_5C			ldx	#msg_williams
1996   DEC7 8D 45       			bsr	ani_msg_starslide
1997   DEC9 BD E9 7C    			jsr	addthread
1998   DECC 90          			.db $90
1999   DECD CE E5 32    			ldx	#msg_electronics
2000   DED0 8D 3C       			bsr	ani_msg_starslide
2001   DED2 BD E9 7C    			jsr	addthread
2002   DED5 90          			.db $90
2003   DED6 CE E5 3E    			ldx	#msg_presents
2004   DED9 8D 33       			bsr	ani_msg_starslide
2005   DEDB BD E9 7C    			jsr	addthread
2006   DEDE 70          			.db $70
2007   DEDF CE E5 47    			ldx	#msg_hyperball
2008   DEE2 5F          			clrb	
2009   DEE3 BD D3 15    			jsr	ani_msg_letters
2010   DEE6 C6 25       			ldab	#$25
2011   DEE8 CE 00 6B    			ldx	#alpha_b0+11
2012   DEEB BD D2 F7    			jsr	ani_circle
2013   DEEE 7C 00 22    gj_09			inc	bitflags+6
2014   DEF1 BD E2 E7    			jsr	gj_2B
2015   DEF4 BD D2 D6    gj_39			jsr	setup_msg_endptr
2016   DEF7 BD D3 49    			jsr	gj_08
2017   DEFA 97 22       			staa	bitflags+6
2018   DEFC CE E5 51    			ldx	#msg_credit
2019   DEFF BD D3 0B    			jsr	load_message
2020   DF02 B6 11 9A    			ldaa	current_credits
2021   DF05 BD E6 D4    			jsr	gj_2C
2022   DF08 BD E9 7C    			jsr	addthread
2023   DF0B E0          			.db $E0
2024   DF0C 20 B6       			bra	gb_5C
2025   DF0E             
2026   DF0E BD D3 0B    ani_msg_starslide	jsr	load_message
2027   DF11 BD D3 4C    ani_starslide	jsr	clr_alpha_set_b1
2028   DF14 86 04       			ldaa	#$04
2029   DF16 CE 00 6C    			ldx	#alpha_b1
2030   DF19 8D 1D       gb_50			bsr	gb_4F
2031   DF1B BD EA E5    			jsr	hex2bitpos
2032   DF1E 53          			comb	
2033   DF1F D4 7A       			andb	dmask_p3
2034   DF21 D7 7A       			stab	dmask_p3
2035   DF23 08          			inx	
2036   DF24 4A          			deca	
2037   DF25 2A F2       			bpl	gb_50
2038   DF27 86 06       			ldaa	#$06
2039   DF29 8D 0D       gb_51			bsr	gb_4F
2040   DF2B BD EA E5    			jsr	hex2bitpos
2041   DF2E 53          			comb	
2042   DF2F D4 7B       			andb	dmask_p4
2043   DF31 D7 7B       			stab	dmask_p4
2044   DF33 08          			inx	
2045   DF34 4A          			deca	
2046   DF35 2A F2       			bpl	gb_51
2047   DF37 39          			rts	
2048   DF38             
2049   DF38 36          gb_4F			psha	
2050   DF39 37          			pshb	
2051   DF3A C6 01       			ldab	#$01
2052   DF3C 86 18       gb_97			ldaa	#$18
2053   DF3E A7 00       			staa	$00,X
2054   DF40 BD E9 7C    			jsr	addthread
2055   DF43 02          			.db $02
2056   DF44 86 2B       			ldaa	#$2B
2057   DF46 A7 00       			staa	$00,X
2058   DF48 BD E9 7C    			jsr	addthread
2059   DF4B 02          			.db $02
2060   DF4C 5A          			decb	
2061   DF4D 26 ED       			bne	gb_97
2062   DF4F 20 07       			bra	gb_98
2063   DF51             
2064   DF51 36          gj_37			psha	
2065   DF52 37          			pshb	
2066   DF53 8D 06       			bsr	gj_1E
2067   DF55 BD F1 BE    			jsr	lamp_flash
2068   DF58 33          gb_98			pulb	
2069   DF59 32          			pula	
2070   DF5A 39          			rts	
2071   DF5B             
2072   DF5B CE E4 7D    gj_1E			ldx	#gj_1B
2073   DF5E BD EE 8C    			jsr	xplusb
2074   DF61 A6 00       			ldaa	$00,X
2075   DF63 39          			rts	
2076   DF64             
2077   DF64 CE DF 74    gj_07			ldx	#gj_28
2078   DF67 8D 03       			bsr	gb_3D
2079   DF69 CE E3 5E    			ldx	#gb_4B
2080   DF6C 7E D5 0D    gb_3D			jmp	addthread_clra
2081   DF6F             
2082   DF6F CE E3 34    gj_36			ldx	#gj_01
2083   DF72 8D F8       			bsr	gb_3D
2084   DF74 CE DF B0    gj_28			ldx	#gj_1C
2085   DF77 8D F3       			bsr	gb_3D
2086   DF79 CE E6 81    gb_8D			ldx	#lmp_ani_outin-1
2087   DF7C 08          gb_3F			inx	
2088   DF7D 8C E6 D2    			cpx	#disp_wave_num
2089   DF80 27 14       			beq	gb_3E
2090   DF82 A6 00       			ldaa	$00,X
2091   DF84 16          			tab	
2092   DF85 84 7F       			anda	#$7F
2093   DF87 BD F1 91    			jsr	lamp_on
2094   DF8A BD F1 D3    			jsr	lamp_on_b
2095   DF8D 5D          			tstb	
2096   DF8E 2B EC       			bmi	gb_3F
2097   DF90 BD E9 7C    			jsr	addthread
2098   DF93 05          			.db $05
2099   DF94 20 E6       			bra	gb_3F
2100   DF96             
2101   DF96 CE E6 81    gb_3E			ldx	#lmp_ani_outin-1
2102   DF99 08          gb_8E			inx	
2103   DF9A 8C E6 D2    			cpx	#disp_wave_num
2104   DF9D 27 DA       			beq	gb_8D
2105   DF9F A6 00       			ldaa	$00,X
2106   DFA1 16          			tab	
2107   DFA2 84 7F       			anda	#$7F
2108   DFA4 BD F1 B0    			jsr	lamp_off
2109   DFA7 5D          			tstb	
2110   DFA8 2B EF       			bmi	gb_8E
2111   DFAA BD E9 7C    			jsr	addthread
2112   DFAD 05          			.db $05
2113   DFAE 20 E9       			bra	gb_8E
2114   DFB0             
2115   DFB0 86 D4       gj_1C			ldaa	#$D4
2116   DFB2 BD F2 3D    			jsr	lampm_f
2117   DFB5 BD E9 7C    			jsr	addthread
2118   DFB8 04          			.db $04
2119   DFB9 20 F5       			bra	gj_1C
2120   DFBB             
2121   DFBB 86 08       			ldaa	#$08
2122   DFBD BD E9 7C    gb_40			jsr	addthread
2123   DFC0 40          			.db $40
2124   DFC1 4A          			deca	
2125   DFC2 26 F9       			bne	gb_40
2126   DFC4 86 09       			ldaa	#$09
2127   DFC6 BD EA 83    			jsr	solbuf
2128   DFC9 7E E9 C4    			jmp	killthread
2129   DFCC             
2130   DFCC 5F          gj_48			clrb	
2131   DFCD 86 0C       			ldaa	#$0C
2132   DFCF 7E D2 C8    			jmp	gj_20
2133   DFD2             
2134   DFD2 16          gj_2F			tab	
2135   DFD3 84 0F       			anda	#$0F
2136   DFD5 8B 1B       			adda	#$1B
2137   DFD7 8A 80       			oraa	#$80
2138   DFD9 A7 02       			staa	$02,X
2139   DFDB BD EC 32    			jsr	split_ab
2140   DFDE 4F          			clra	
2141   DFDF 5D          			tstb	
2142   DFE0 27 03       			beq	gb_AC
2143   DFE2 CB 1B       			addb	#$1B
2144   DFE4 17          			tba	
2145   DFE5 A7 01       gb_AC			staa	$01,X
2146   DFE7 86 1B       			ldaa	#$1B
2147   DFE9 A7 03       			staa	$03,X
2148   DFEB A7 04       			staa	$04,X
2149   DFED A7 05       			staa	$05,X
2150   DFEF 39          			rts	
2151   DFF0             
2152   DFF0 CE E5 A5    reflex_thread	ldx	#msg_reflex
2153   DFF3 86 04       			ldaa	#$04
2154   DFF5 97 0A       			staa	game_ram_a
2155   DFF7 BD D2 6D    			jsr	ani_msg_rlslide
2156   DFFA CE E5 74    			ldx	#msg_wave
2157   DFFD BD D2 6D    			jsr	ani_msg_rlslide
2158   E000 BD E9 7C    			jsr	addthread
2159   E003 40          			.db $40
2160   E004 8D C6       			bsr	gj_48
2161   E006 97 0E       			staa	game_ram_e
2162   E008 97 0A       			staa	game_ram_a
2163   E00A BD D2 D6    reflex_lp		jsr	setup_msg_endptr
2164   E00D 7C 00 0E    			inc	game_ram_e
2165   E010 86 14       			ldaa	#$14
2166   E012 91 0E       			cmpa	game_ram_e
2167   E014 26 53       			bne	gb_EE
2168   E016 BD D2 D6    			jsr	setup_msg_endptr
2169   E019 86 10       			ldaa	#$10
2170   E01B BD EC 3B    			jsr	isnd_once
2171   E01E 86 01       			ldaa	#$01
2172   E020 97 22       			staa	bitflags+6
2173   E022 CE E5 FD    			ldx	#msg_great_reflex
2174   E025 BD D2 6D    			jsr	ani_msg_rlslide
2175   E028 8D A2       			bsr	gj_48
2176   E02A CE 00 60    			ldx	#alpha_b0
2177   E02D 96 05       			ldaa	game_ram_5
2178   E02F 81 06       			cmpa	#$06
2179   E031 2E 0B       			bgt	gb_EF
2180   E033 86 2C       			ldaa	#$2C
2181   E035 BD EB 3D    			jsr	score_main
2182   E038 86 50       			ldaa	#$50
2183   E03A 8D 96       			bsr	gj_2F
2184   E03C 20 11       			bra	gb_F0
2185   E03E             
2186   E03E 86 0D       gb_EF			ldaa	#$0D
2187   E040 BD EB 3D    			jsr	score_main
2188   E043 86 1C       			ldaa	#$1C
2189   E045 A7 00       			staa	$00,X
2190   E047 86 9B       			ldaa	#$9B
2191   E049 A7 02       			staa	$02,X
2192   E04B 86 1B       			ldaa	#$1B
2193   E04D 8D 96       			bsr	gb_AC
2194   E04F CE 00 67    gb_F0			ldx	#alpha_b0+7
2195   E052 DF B8       			stx	temp1
2196   E054 CE E5 8D    			ldx	#msg_bonus
2197   E057 BD D3 0D    			jsr	gj_29
2198   E05A 3F          to_next_wave	swi	
2199   E05B             			REMTHREADS_($08,$00)		;Remove Multiple Threads Based on Priority
2199   E05B 55 08 00    
2200   E05E             			JSR_(gj_06)				
2200   E05E 56          
2200   E05F D7 0A       
2201   E061             			JSRDR_(gj_07)		
2201   E061~            			JSRDR_(gj_07)		
2201   E061~            			JSRDR_(gj_07)		
2201   E061             
2201   E061~            			JSRDR_(gj_07)		
2201   E061~            			JSRDR_(gj_07)		
2201   E061             
2201   E061             
2201   E061 AF          
2201   E062 01          
2202   E063 ED          			SND_($0D)				;Sound #0D
2203   E064             			SLEEP_(80)
2203   E064~            			SLEEP_(80)
2203   E064~            			SLEEP_(80)
2203   E064             
2203   E064 53 50       
2203   E066             
2204   E066 5F          			JMP_(setup_next_wave)		
2204   E067 D7 5E       
2205   E069             
2206   E069             
2207   E069 3F          gb_EE			swi	
2208   E06A             			PRI_($00)				;Priority=#00
2208   E06A 52 00       
2209   E06C             gb_41			SLEEP_(1)
2209   E06C             
2209   E06C 71          
2209   E06D~            gb_41			SLEEP_(1)
2209   E06D~            gb_41			SLEEP_(1)
2209   E06D             
2210   E06D             			JSRD_(get_random)			
2210   E06D 57          
2210   E06E FB 94       
2211   E070             gj_1D			EXE_($02)				;CPU Execute Next 2 Bytes
2211   E070~            gj_1D			EXE_($02)				;CPU Execute Next 2 Bytes
2211   E070~            gj_1D			EXE_($02)				;CPU Execute Next 2 Bytes
2211   E070             
2211   E070 44          
2211   E071             
2212   E071 84 1F       			anda	#$1F
2213   E073 5AFBFDE016D0			.db $5A,$FB,$FD,$E0,$16,$D0,$2F,$F1	;BEQ_(BIT2#2F || RAM$00>=#22) to gb_41
2213   E079 2FF1
2214   E07B 5B F6 57 02 			.db $5B,$F6,$57,$02		;BNE_RangeON#57 to gb_42
2215   E07F             			RCLR0_($57)				;Effect: Range #57
2215   E07F             
2215   E07F 19 57       
2216   E081             gb_42			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2216   E081             
2216   E081 51 10       
2216   E083~            gb_42			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2216   E083~            gb_42			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2216   E083             
2217   E083 B1 31       			ADDRAM_($01,$31)			;RAM$01+=$31
2218   E085 5B D0 E1 04 			.db $5B,$D0,$E1,$04		;BNE_BIT2#E1 to gb_43
2219   E089 B0 01       			ADDRAM_($00,$01)			;RAM$00+=$01
2220   E08B             			JMPR_(gj_1D)
2220   E08B~            			JMPR_(gj_1D)
2220   E08B~            			JMPR_(gj_1D)
2220   E08B             
2220   E08B~            			JMPR_(gj_1D)
2220   E08B~            			JMPR_(gj_1D)
2220   E08B             
2220   E08B             
2220   E08B 8F          
2220   E08C E3          
2221   E08D             			
2222   E08D             gb_43			BITON4a_($01)			;Turn ON: Lamp#01(lamp_h2)
2222   E08D DC 01       
2223   E08F             			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2223   E08F             
2223   E08F 51 10       
2223   E091~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2223   E091~            			RAMCPY_($1,$0)			;Copy RAM;RAM,1 = RAM,0
2223   E091             
2224   E091 B0 49       			ADDRAM_($00,$49)			;RAM$00+=$49
2225   E093             			BITON4a_($00)			;Turn ON: Lamp#00(lamp_h1)
2225   E093 DC 00       
2226   E095 5AFBFCE116FC			.db $5A,$FB,$FC,$E1,$16,$FC,$E1,$08,$04;BEQ_(RAM$01==#8 || RAM$01==#22) to gb_8F
2226   E09B E10804
2227   E09E             			JSRDR_(gj_37)		
2227   E09E~            			JSRDR_(gj_37)		
2227   E09E~            			JSRDR_(gj_37)		
2227   E09E             
2227   E09E~            			JSRDR_(gj_37)		
2227   E09E~            			JSRDR_(gj_37)		
2227   E09E             
2227   E09E             
2227   E09E AE          
2227   E09F B1          
2228   E0A0             			JMPR_(gj_38)
2228   E0A0~            			JMPR_(gj_38)
2228   E0A0~            			JMPR_(gj_38)
2228   E0A0             
2228   E0A0~            			JMPR_(gj_38)
2228   E0A0~            			JMPR_(gj_38)
2228   E0A0             
2228   E0A0             
2228   E0A0 80          
2228   E0A1 0F          
2229   E0A2             			
2230   E0A2 5AFDE10806  gb_8F			.db $5A,$FD,$E1,$08,$06		;BEQ_RAM$01>=#8 to gb_CE
2231   E0A7             			BITFL_($BA,$BB,$3C)		;Flash: Lamp#3A(lamp_e3), Lamp#3B(lamp_e2), Lamp#3C(lamp_e1)
2231   E0A7             
2231   E0A7 13 BA BB 3C 
2232   E0AB             			JMPR_(gj_38)
2232   E0AB~            			JMPR_(gj_38)
2232   E0AB~            			JMPR_(gj_38)
2232   E0AB             
2232   E0AB~            			JMPR_(gj_38)
2232   E0AB~            			JMPR_(gj_38)
2232   E0AB             
2232   E0AB             
2232   E0AB 80          
2232   E0AC 04          
2233   E0AD             			
2234   E0AD             gb_CE			BITFL_($C3,$C4,$45)		;Flash: Bit#03, Bit#04, Bit#05
2234   E0AD             
2234   E0AD 13 C3 C4 45 
2235   E0B1             gj_38			CPUX_					;Resume CPU Execution
2235   E0B1 04          
2236   E0B2 36          			psha	
2237   E0B3 37          			pshb	
2238   E0B4 CE 00 62    			ldx	#alpha_b0+2
2239   E0B7 96 0F       			ldaa	game_ram_f
2240   E0B9 BD DF D2    			jsr	gj_2F
2241   E0BC 33          			pulb	
2242   E0BD 32          			pula	
2243   E0BE BD E9 7C    			jsr	addthread
2244   E0C1 30          			.db $30
2245   E0C2 36          			psha	
2246   E0C3 96 0C       			ldaa	game_ram_c
2247   E0C5 97 0D       			staa	game_ram_d
2248   E0C7 96 0D       gb_E4			ldaa	game_ram_d
2249   E0C9 81 04       			cmpa	#$04
2250   E0CB 2D 03       			blt	gb_E2
2251   E0CD 7A 00 0D    			dec	game_ram_d
2252   E0D0 97 D5       gb_E2			staa	thread_timer_byte
2253   E0D2 86 01       			ldaa	#$01
2254   E0D4 BD EC 3B    			jsr	isnd_once
2255   E0D7 BD E9 71    			jsr	delaythread
2256   E0DA 32          			pula	
2257   E0DB BD DD 0F    			jsr	gb_8A
2258   E0DE 27 2F       			beq	gb_E3
2259   E0E0 CE 00 63    			ldx	#alpha_b0+3
2260   E0E3 36          			psha	
2261   E0E4 BD E1 37    			jsr	gj_47
2262   E0E7 26 DE       			bne	gb_E4
2263   E0E9 96 0E       			ldaa	game_ram_e
2264   E0EB 81 05       			cmpa	#$05
2265   E0ED 2F 1B       			ble	gb_E5
2266   E0EF 32          			pula	
2267   E0F0 86 1E       			ldaa	#$1E
2268   E0F2 97 E6       			staa	flag_tilt
2269   E0F4 BD EC 3B    			jsr	isnd_once
2270   E0F7 BD D2 D6    			jsr	setup_msg_endptr
2271   E0FA 86 01       			ldaa	#$01
2272   E0FC 97 22       			staa	bitflags+6
2273   E0FE CE E5 9A    			ldx	#msg_youmissed
2274   E101 BD D2 6D    			jsr	ani_msg_rlslide
2275   E104 BD DF CC    			jsr	gj_48
2276   E107 7E E0 5A    			jmp	to_next_wave
2277   E10A             
2278   E10A 32          gb_E5			pula	
2279   E10B 8D 46       			bsr	gb_F8
2280   E10D 20 25       			bra	gb_FC
2281   E10F             
2282   E10F 8D 42       gb_E3			bsr	gb_F8
2283   E111 CE 00 63    			ldx	#alpha_b0+3
2284   E114 BD D8 34    			jsr	gb_D3
2285   E117 BD D3 46    			jsr	gj_0D
2286   E11A 86 06       			ldaa	#$06
2287   E11C BD D8 53    gb_F9			jsr	invert_alphamsk
2288   E11F 36          			psha	
2289   E120 86 0E       			ldaa	#$0E
2290   E122 BD EC 3B    			jsr	isnd_once
2291   E125 32          			pula	
2292   E126 BD E9 7C    			jsr	addthread
2293   E129 05          			.db $05
2294   E12A 4A          			deca	
2295   E12B 26 EF       			bne	gb_F9
2296   E12D 96 0F       			ldaa	game_ram_f
2297   E12F 8B 01       			adda	#$01
2298   E131 19          			daa	
2299   E132 97 0F       			staa	game_ram_f
2300   E134 7E E0 0A    gb_FC			jmp	reflex_lp
2301   E137             
2302   E137 A6 01       gj_47			ldaa	$01,X
2303   E139 81 9B       			cmpa	#$9B
2304   E13B 27 05       			beq	gb_FA
2305   E13D 4A          			deca	
2306   E13E A7 01       			staa	$01,X
2307   E140 20 10       			bra	gb_FB
2308   E142             
2309   E142 A6 00       gb_FA			ldaa	$00,X
2310   E144 27 0C       			beq	gb_FB
2311   E146 4A          			deca	
2312   E147 81 1B       			cmpa	#$1B
2313   E149 26 01       			bne	gb_103
2314   E14B 4F          			clra	
2315   E14C A7 00       gb_103		staa	$00,X
2316   E14E 86 A4       			ldaa	#$A4
2317   E150 A7 01       			staa	$01,X
2318   E152 39          gb_FB			rts	
2319   E153             
2320   E153 3F          gb_F8			swi	
2321   E154             			BITOFF4a_($00)			;Turn OFF: Lamp#00(lamp_h1)
2321   E154 DD 00       
2322   E156 5AFBFCE116FC			.db $5A,$FB,$FC,$E1,$16,$FC,$E1,$08,$06;BEQ_(RAM$01==#8 || RAM$01==#22) to gb_44
2322   E15C E10806
2323   E15F             			JSRDR_(gj_1E)		
2323   E15F~            			JSRDR_(gj_1E)		
2323   E15F~            			JSRDR_(gj_1E)		
2323   E15F             
2323   E15F~            			JSRDR_(gj_1E)		
2323   E15F~            			JSRDR_(gj_1E)		
2323   E15F             
2323   E15F             
2323   E15F AD          
2323   E160 FA          
2324   E161             			BITOFFP_($00)			;Turn OFF Lamp/Bit @RAM:00
2324   E161             
2324   E161 15 00       
2325   E163             			JMPR_(gj_1F)
2325   E163~            			JMPR_(gj_1F)
2325   E163~            			JMPR_(gj_1F)
2325   E163             
2325   E163~            			JMPR_(gj_1F)
2325   E163~            			JMPR_(gj_1F)
2325   E163             
2325   E163             
2325   E163 80          
2325   E164 0B          
2326   E165             			
2327   E165 5AFDE10804  gb_44			.db $5A,$FD,$E1,$08,$04		;BEQ_RAM$01>=#8 to gb_90
2328   E16A             			RCLR0_($10)				;Effect: Range #10
2328   E16A             
2328   E16A 19 10       
2329   E16C             			JMPR_(gj_1F)
2329   E16C~            			JMPR_(gj_1F)
2329   E16C~            			JMPR_(gj_1F)
2329   E16C             
2329   E16C~            			JMPR_(gj_1F)
2329   E16C~            			JMPR_(gj_1F)
2329   E16C             
2329   E16C             
2329   E16C 80          
2329   E16D 02          
2330   E16E             			
2331   E16E             gb_90			RCLR0_($11)				;Effect: Range #11
2331   E16E             
2331   E16E 19 11       
2332   E170             gj_1F			CPUX_					;Resume CPU Execution
2332   E170 04          
2333   E171 39          			rts	
2334   E172             
2335   E172 3F          hook_coin		swi	
2336   E173 E6          			SND_($06)				;Sound #06
2337   E174 5AFBFBF0D030			.db $5A,$FB,$FB,$F0,$D0,$30,$F3,$F1,$F3;BEQ_((!GAME) || (BIT2#30 || TILT)) to gj_1F
2337   E17A F3F1F3
2338   E17D             			REMTHREADS_($FF,$10)		;Remove Multiple Threads Based on Priority
2338   E17D 55 FF 10    
2339   E180             			CPUX_					;Resume CPU Execution
2339   E180 04          
2340   E181 86 10       			ldaa	#$10
2341   E183 CE DE F4    			ldx	#gj_39
2342   E186 7E D5 0E    			jmp	newthreadp
2343   E189             
2344   E189 C6 0A       highscoresound	ldab	#$0A
2345   E18B 7F 00 E6    			clr	flag_tilt
2346   E18E 96 BF       			ldaa	sys_temp2
2347   E190 B7 13 B7    			staa	$13B7
2348   E193 97 E7       			staa	flag_gameover
2349   E195 B6 D0 5A    gb_45			ldaa	gr_hssound
2350   E198 BD EC 3B    			jsr	isnd_once
2351   E19B CE E5 58    			ldx	#msg_player
2352   E19E 37          			pshb	
2353   E19F BD D3 0B    			jsr	load_message
2354   E1A2 33          			pulb	
2355   E1A3 B6 13 B7    			ldaa	$13B7
2356   E1A6 40          			nega	
2357   E1A7 8B 1E       			adda	#$1E
2358   E1A9 DE B8       			ldx	temp1
2359   E1AB A7 01       			staa	$01,X
2360   E1AD BD E9 7C    			jsr	addthread
2361   E1B0 08          			.db $08
2362   E1B1 BD D2 D6    			jsr	setup_msg_endptr
2363   E1B4 BD E9 7C    			jsr	addthread
2364   E1B7 08          			.db $08
2365   E1B8 5A          			decb	
2366   E1B9 26 DA       			bne	gb_45
2367   E1BB CE E6 1E    			ldx	#msg_great_score
2368   E1BE BD D3 0B    			jsr	load_message
2369   E1C1 DE B8       			ldx	temp1
2370   E1C3 C6 10       			ldab	#$10
2371   E1C5 BD D2 F7    			jsr	ani_circle
2372   E1C8 86 18       			ldaa	#$18
2373   E1CA BD EC 3B    			jsr	isnd_once
2374   E1CD 86 05       			ldaa	#$05
2375   E1CF C6 40       			ldab	#$40
2376   E1D1 E7 00       			stab	$00,X
2377   E1D3 BD D2 C8    			jsr	gj_20
2378   E1D6 CE E6 0A    			ldx	#msg_enter_your
2379   E1D9 BD D2 6D    			jsr	ani_msg_rlslide
2380   E1DC CE E6 15    			ldx	#msg_initials
2381   E1DF BD D2 6D    			jsr	ani_msg_rlslide
2382   E1E2 86 05       			ldaa	#$05
2383   E1E4 C6 40       			ldab	#$40
2384   E1E6 BD D2 C8    			jsr	gj_20
2385   E1E9 BD E6 E8    			jsr	gj_21
2386   E1EC CE 00 60    			ldx	#alpha_b0
2387   E1EF FF 13 A7    			stx	hy_unknown_e
2388   E1F2 86 2E       gb_48			ldaa	#$2E
2389   E1F4 A7 00       			staa	$00,X
2390   E1F6 BD E2 28    gb_47			jsr	gj_22
2391   E1F9 A6 00       			ldaa	$00,X
2392   E1FB 81 2D       			cmpa	#$2D
2393   E1FD 26 09       			bne	gb_46
2394   E1FF 6F 00       			clr	$00,X
2395   E201 09          			dex	
2396   E202 A6 00       			ldaa	$00,X
2397   E204 26 F0       			bne	gb_47
2398   E206 20 EA       			bra	gb_48
2399   E208             
2400   E208 81 2E       gb_46			cmpa	#$2E
2401   E20A 26 04       			bne	gb_96
2402   E20C 86 00       			ldaa	#$00
2403   E20E A7 00       			staa	$00,X
2404   E210 08          gb_96			inx	
2405   E211 8C 00 63    			cpx	#alpha_b0+3
2406   E214 26 DC       			bne	gb_48
2407   E216 CE 01 2E    gb_95			ldx	#aud_game1
2408   E219 DF B8       			stx	temp1
2409   E21B C6 0C       			ldab	#$0C
2410   E21D CE 00 60    			ldx	#alpha_b0
2411   E220 BD EF 23    			jsr	copyblock2
2412   E223 D7 22       			stab	bitflags+6
2413   E225 7E FB 3E    			jmp	set_hstd
2414   E228             
2415   E228 A6 00       gj_22			ldaa	$00,X
2416   E22A B7 13 B6    			staa	$13B6
2417   E22D 86 60       			ldaa	#$60
2418   E22F B7 13 B8    			staa	$13B8
2419   E232 86 06       gb_E8			ldaa	#$06
2420   E234 B7 13 B7    			staa	$13B7
2421   E237 7A 13 B8    			dec	$13B8
2422   E23A 26 06       			bne	gb_94
2423   E23C 31          			ins	
2424   E23D 31          			ins	
2425   E23E 6F 00       			clr	$00,X
2426   E240 20 D4       			bra	gb_95
2427   E242             
2428   E242 BD E9 7C    gb_94			jsr	addthread
2429   E245 02          			.db $02
2430   E246 96 80       			ldaa	$80
2431   E248 2A 0C       			bpl	gb_CF
2432   E24A BD E2 DF    			jsr	gj_42
2433   E24D BD E9 7C    gb_D0			jsr	addthread
2434   E250 02          			.db $02
2435   E251 96 80       			ldaa	$80
2436   E253 2B F8       			bmi	gb_D0
2437   E255 39          			rts	
2438   E256             
2439   E256 96 81       gb_CF			ldaa	$81
2440   E258 84 03       			anda	#$03
2441   E25A 26 14       			bne	gb_E6
2442   E25C 7A 13 B7    			dec	$13B7
2443   E25F 26 E1       			bne	gb_94
2444   E261 A6 00       			ldaa	$00,X
2445   E263 27 04       			beq	gb_E7
2446   E265 6F 00       			clr	$00,X
2447   E267 20 C9       			bra	gb_E8
2448   E269             
2449   E269 B6 13 B6    gb_E7			ldaa	$13B6
2450   E26C A7 00       			staa	$00,X
2451   E26E 20 C2       			bra	gb_E8
2452   E270             
2453   E270 BD E2 DF    gb_E6			jsr	gj_42
2454   E273 C6 20       			ldab	#$20
2455   E275 F7 13 B7    			stab	$13B7
2456   E278 46          			rora	
2457   E279 25 18       			bcs	gb_FD
2458   E27B 8D 2D       gb_100		bsr	gb_FE
2459   E27D BD E9 7C    gb_FF			jsr	addthread
2460   E280 01          			.db $01
2461   E281 96 81       			ldaa	$81
2462   E283 85 02       			bita	#$02
2463   E285 27 A1       			beq	gj_22
2464   E287 7A 13 B7    			dec	$13B7
2465   E28A 26 F1       			bne	gb_FF
2466   E28C 86 05       			ldaa	#$05
2467   E28E B7 13 B7    			staa	$13B7
2468   E291 20 E8       			bra	gb_100
2469   E293             
2470   E293 8D 32       gb_FD			bsr	gb_104
2471   E295 BD E9 7C    gb_105		jsr	addthread
2472   E298 01          			.db $01
2473   E299 96 81       			ldaa	$81
2474   E29B 46          			rora	
2475   E29C 24 8A       			bcc	gj_22
2476   E29E 7A 13 B7    			dec	$13B7
2477   E2A1 26 F2       			bne	gb_105
2478   E2A3 86 05       			ldaa	#$05
2479   E2A5 B7 13 B7    			staa	$13B7
2480   E2A8 20 E9       			bra	gb_FD
2481   E2AA             
2482   E2AA A6 00       gb_FE			ldaa	$00,X
2483   E2AC 4C          			inca	
2484   E2AD 81 2E       			cmpa	#$2E
2485   E2AF 26 02       			bne	gb_106
2486   E2B1 86 2E       gb_109		ldaa	#$2E
2487   E2B3 81 2F       gb_106		cmpa	#$2F
2488   E2B5 26 02       			bne	gb_107
2489   E2B7 86 01       			ldaa	#$01
2490   E2B9 81 1B       gb_107		cmpa	#$1B
2491   E2BB 26 07       			bne	gb_108
2492   E2BD 8C 00 60    			cpx	#alpha_b0
2493   E2C0 27 EF       			beq	gb_109
2494   E2C2 86 2D       gb_10D		ldaa	#$2D
2495   E2C4 A7 00       gb_108		staa	$00,X
2496   E2C6 39          			rts	
2497   E2C7             
2498   E2C7 A6 00       gb_104		ldaa	$00,X
2499   E2C9 4A          			deca	
2500   E2CA 26 02       			bne	gb_10A
2501   E2CC 86 2E       			ldaa	#$2E
2502   E2CE 81 2C       gb_10A		cmpa	#$2C
2503   E2D0 26 02       			bne	gb_10B
2504   E2D2 86 1A       gb_10C		ldaa	#$1A
2505   E2D4 81 2D       gb_10B		cmpa	#$2D
2506   E2D6 26 EC       			bne	gb_108
2507   E2D8 8C 00 60    			cpx	#alpha_b0
2508   E2DB 27 F5       			beq	gb_10C
2509   E2DD 20 E3       			bra	gb_10D
2510   E2DF             
2511   E2DF 36          gj_42			psha	
2512   E2E0 B6 13 B6    			ldaa	$13B6
2513   E2E3 A7 00       			staa	$00,X
2514   E2E5 32          			pula	
2515   E2E6 39          			rts	
2516   E2E7             
2517   E2E7 BD FA B1    gj_2B			jsr	show_hstd
2518   E2EA D6 7C       			ldab	comma_flags
2519   E2EC F7 13 B6    			stab	$13B6
2520   E2EF 43          			coma	
2521   E2F0 7D 00 54    			tst	score_p1_b1
2522   E2F3 26 06       			bne	gb_9F
2523   E2F5 97 54       			staa	score_p1_b1
2524   E2F7 97 58       			staa	score_p2_b1
2525   E2F9 86 33       			ldaa	#$33
2526   E2FB 97 7C       gb_9F			staa	comma_flags
2527   E2FD 86 7F       			ldaa	#$7F
2528   E2FF BD F9 27    			jsr	clr_dis_masks12
2529   E302 CE E6 2A    			ldx	#msg_hy_score
2530   E305 BD D3 0B    			jsr	load_message
2531   E308 BD E9 7C    			jsr	addthread
2532   E30B 30          			.db $30
2533   E30C 86 0C       			ldaa	#$0C
2534   E30E B7 13 A9    			staa	$13A9
2535   E311 CE 13 AA    			ldx	#$13AA
2536   E314 DF B8       			stx	temp1
2537   E316 CE 01 2E    			ldx	#aud_game1
2538   E319 C6 0C       			ldab	#$0C
2539   E31B BD FF CD    			jsr	block_copy
2540   E31E CE 13 A9    			ldx	#$13A9
2541   E321 BD D2 B0    			jsr	gb_0E
2542   E324 BD D2 58    			jsr	slide_l
2543   E327 BD E9 7C    			jsr	addthread
2544   E32A A0          			.db $A0
2545   E32B F6 13 B6    			ldab	$13B6
2546   E32E D7 7C       			stab	comma_flags
2547   E330 4F          			clra	
2548   E331 7E F9 27    			jmp	clr_dis_masks12
2549   E334             
2550   E334 CE 55 01    gj_01			ldx	#$5501
2551   E337 DF 32       			stx	lampbufferselectx+2
2552   E339 86 80       			ldaa	#$80
2553   E33B D6 EB       			ldab	player_up
2554   E33D 27 01       			beq	gb_49
2555   E33F 44          			lsra	
2556   E340 97 31       gb_49			staa	lampbufferselectx+1
2557   E342 CE E3 58    			ldx	#gj_23
2558   E345 BD D5 0D    			jsr	addthread_clra
2559   E348 3F          			swi	
2560   E349 5B F1 05    			.db $5B,$F1,$05			;BNE_GAME to gb_4A
2561   E34C             			RSET0_($0A)				;Effect: Range #0A
2561   E34C             
2561   E34C 18 0A       
2562   E34E             			RCLR1L0_($8A,$0A)			;Effect: Range #8A Range #0A
2562   E34E             
2562   E34E 1C 8A 0A    
2563   E351             gb_4A			RCLR1_($0A)				;Effect: Range #0A
2563   E351             
2563   E351 29 0A       
2564   E353             gj_24			SLEEP_(5)
2564   E353             
2564   E353 75          
2564   E354~            gj_24			SLEEP_(5)
2564   E354~            gj_24			SLEEP_(5)
2564   E354             
2565   E354             			RINV1_($4A)				;Effect: Range #4A
2565   E354             
2565   E354 2F 4A       
2566   E356             			JMPR_(gj_24)
2566   E356~            			JMPR_(gj_24)
2566   E356~            			JMPR_(gj_24)
2566   E356             
2566   E356~            			JMPR_(gj_24)
2566   E356~            			JMPR_(gj_24)
2566   E356             
2566   E356             
2566   E356 8F          
2566   E357 FB          
2567   E358             			
2568   E358 3F          gj_23			swi	
2569   E359 62          gj_25			SLEEPI_($2)				;Delay RAM$02
2570   E35A             			RROR0_($0A)				;Effect: Range #0A
2570   E35A             
2570   E35A 1E 0A       
2571   E35C             			JMPR_(gj_25)
2571   E35C~            			JMPR_(gj_25)
2571   E35C~            			JMPR_(gj_25)
2571   E35C             
2571   E35C~            			JMPR_(gj_25)
2571   E35C~            			JMPR_(gj_25)
2571   E35C             
2571   E35C             
2571   E35C 8F          
2571   E35D FB          
2572   E35E             			
2573   E35E 86 40       gb_4B			ldaa	#$40
2574   E360 BD EA 83    			jsr	solbuf
2575   E363 BD E9 7C    			jsr	addthread
2576   E366 0A          			.db $0A
2577   E367 20 F5       			bra	gb_4B
2578   E369             
2579   E369             
2580   E369 00 5F       lamptable		.db $00 ,$5F	;(00) lamp_h1 -- lamp_uu6
2581   E36B 00 05       			.db $00 ,$05	;(01) lamp_h1 -- lamp_h6
2582   E36D 06 0B       			.db $06 ,$0B	;(02) lamp_i1 -- lamp_i6
2583   E36F 0C 11       			.db $0C ,$11	;(03) lamp_j1 -- lamp_j6
2584   E371 12 17       			.db $12 ,$17	;(04) lamp_k1 -- lamp_k6
2585   E373 18 1D       			.db $18 ,$1D	;(05) lamp_l1 -- lamp_l6
2586   E375 1E 23       			.db $1E ,$23	;(06) lamp_m1 -- lamp_m6
2587   E377 24 29       			.db $24 ,$29	;(07) lamp_n1 -- lamp_n6
2588   E379 2A 2F       			.db $2A ,$2F	;(08) lamp_o1 -- lamp_o6
2589   E37B 30 35       			.db $30 ,$35	;(09) lamp_p1 -- lamp_p6
2590   E37D 50 59       			.db $50 ,$59	;(0A) lamp_ec1 -- lamp_ec10
2591   E37F 48 4A       			.db $48 ,$4A	;(0B) lamp_p1b1 -- lamp_p1b3
2592   E381 4B 4D       			.db $4B ,$4D	;(0C) lamp_p2b1 -- lamp_p2b3
2593   E383 31 39       			.db $31 ,$39	;(0D) lamp_p2 -- lamp_d
2594   E385 3A 47       			.db $3A ,$47	;(0E) lamp_e3 -- lamp_r
2595   E387 49 5F       			.db $49 ,$5F	;(0F) lamp_p1b2 -- lamp_uu6
2596   E389 3A 3C       			.db $3A ,$3C	;(10) lamp_e3 -- lamp_e1
2597   E38B 43 45       			.db $43 ,$45	;(11) lamp_t1 -- lamp_t3
2598   E38D 00 47       			.db $00 ,$47	;(12) lamp_h1 -- lamp_r
2599   E38F 01 09       			.db $01 ,$09	;(13) lamp_h2 -- lamp_i4
2600   E391 00 4F       			.db $00 ,$4F	;(14) lamp_h1 -- lamp_p2
2601   E393 36 3E       			.db $36 ,$3E	;(15) lamp_a -- lamp_g
2602   E395 3F 47       			.db $3F ,$47	;(16) lamp_y -- lamp_r
2603   E397 31 47       			.db $31 ,$47	;(17) lamp_p2 -- lamp_r
2604   E399             
2605   E399             
2606   E399 22 30 3C    soundtable		.db $22, $30,	$3C		;(00) 
2607   E39C 23 10 3B    			.db $23, $10,	$3B		;(01) 
2608   E39F 22 20 3A    			.db $22, $20,	$3A		;(02) 
2609   E3A2 E3 FB       			.dw c_sound1\	.db $FF	;(03) 
2609   E3A4 FF          
2610   E3A5 E3 F6       			.dw c_sound2\	.db $FF	;(04) 
2610   E3A7 FF          
2611   E3A8 E4 06       			.dw c_sound3\	.db $FF	;(05) 
2611   E3AA FF          
2612   E3AB 22 30 36    			.db $22, $30,	$36		;(06) 
2613   E3AE 22 20 35    			.db $22, $20,	$35		;(07) 
2614   E3B1 22 20 34    			.db $22, $20,	$34		;(08) 
2615   E3B4 E4 01       			.dw c_sound4\	.db $FF	;(09) 
2615   E3B6 FF          
2616   E3B7 22 20 30    			.db $22, $20,	$30		;(0A) 
2617   E3BA 22 20 2F    			.db $22, $20,	$2F		;(0B) 
2618   E3BD 22 20 2E    			.db $22, $20,	$2E		;(0C) 
2619   E3C0 22 20 2D    			.db $22, $20,	$2D		;(0D) 
2620   E3C3 22 20 2C    			.db $22, $20,	$2C		;(0E) 
2621   E3C6 22 20 2B    			.db $22, $20,	$2B		;(0F) 
2622   E3C9 83 50 2A    			.db $83, $50,	$2A		;(10) 
2623   E3CC 22 20 29    			.db $22, $20,	$29		;(11) 
2624   E3CF 83 40 32    			.db $83, $40,	$32		;(12) 
2625   E3D2 22 20 28    			.db $22, $20,	$28		;(13) 
2626   E3D5 22 20 27    			.db $22, $20,	$27		;(14) 
2627   E3D8 23 20 3D    			.db $23, $20,	$3D		;(15) 
2628   E3DB 22 20 26    			.db $22, $20,	$26		;(16) 
2629   E3DE 22 20 25    			.db $22, $20,	$25		;(17) 
2630   E3E1 24 20 3E    			.db $24, $20,	$3E		;(18) 
2631   E3E4 22 20 24    			.db $22, $20,	$24		;(19) 
2632   E3E7 22 20 23    			.db $22, $20,	$23		;(1A) 
2633   E3EA 22 20 22    			.db $22, $20,	$22		;(1B) 
2634   E3ED 22 20 31    			.db $22, $20,	$31		;(1C) 
2635   E3F0 22 20 21    			.db $22, $20,	$21		;(1D) 
2636   E3F3 23 30 20    			.db $23, $30,	$20		;(1E) 
2637   E3F6             
2638   E3F6 2192383E3F  c_sound2		.db $21,$92,$38,$3E,$3F
2639   E3FB             
2640   E3FB 26F52EC02D3Fc_sound1		.db $26,$F5,$2E,$C0,$2D,$3F
2641   E401             
2642   E401 26FF372D3F  c_sound4		.db $26,$FF,$37,$2D,$3F
2643   E406             
2644   E406 26FF242D3F  c_sound3		.db $26,$FF,$24,$2D,$3F
2645   E40B             
2646   E40B             
2647   E40B 93          switchtable		.db %10010011	\.dw sw_plumbtilt		;(1) plumbtilt
2647   E40C D3 5A       
2648   E40E 71          			.db %01110001	\.dw sw_2p_start		;(2) 2p_start
2648   E40F D1 3F       
2649   E411 71          			.db %01110001	\.dw sw_1p_start		;(3) 1p_start
2649   E412 D1 3E       
2650   E414 F2          			.db %11110010	\.dw coin_accepted	;(4) coin_r
2650   E415 F8 0A       
2651   E417 F2          			.db %11110010	\.dw coin_accepted	;(5) coin_c
2651   E418 F8 0A       
2652   E41A F2          			.db %11110010	\.dw coin_accepted	;(6) coin_l
2652   E41B F8 0A       
2653   E41D 71          			.db %01110001	\.dw sw_slam		;(7) slam
2653   E41E E7 30       
2654   E420 71          			.db %01110001	\.dw sw_hstd_res		;(8) hstd_res
2654   E421 D1 1B       
2655   E423 11          			.db %00010001	\.dw sw_A			;(9) A
2655   E424 D7 C7       
2656   E426 11          			.db %00010001	\.dw sw_B			;(10) B
2656   E427 D7 C7       
2657   E429 11          			.db %00010001	\.dw sw_C			;(11) C
2657   E42A D7 C7       
2658   E42C 11          			.db %00010001	\.dw sw_D			;(12) D
2658   E42D D7 C7       
2659   E42F 11          			.db %00010001	\.dw sw_Y			;(13) Y
2659   E430 D7 C7       
2660   E432 11          			.db %00010001	\.dw sw_W			;(14) W
2660   E433 D7 C7       
2661   E435 11          			.db %00010001	\.dw sw_V			;(15) V
2661   E436 D7 C7       
2662   E438 11          			.db %00010001	\.dw sw_U			;(16) U
2662   E439 D7 C7       
2663   E43B 91          			.db %10010001	\.dw sw_E			;(17) E
2663   E43C D7 94       
2664   E43E 11          			.db %00010001	\.dw sw_F			;(18) F
2664   E43F D7 9E       
2665   E441 11          			.db %00010001	\.dw sw_G			;(19) G
2665   E442 D7 A2       
2666   E444 8F          			.db %10001111	\.dw sw_H			;(20) H
2666   E445 D7 28       
2667   E447 8F          			.db %10001111	\.dw sw_I			;(21) I
2667   E448 D7 28       
2668   E44A 8F          			.db %10001111	\.dw sw_J			;(22) J
2668   E44B D7 28       
2669   E44D 8F          			.db %10001111	\.dw sw_K			;(23) K
2669   E44E D7 28       
2670   E450 8F          			.db %10001111	\.dw sw_L			;(24) L
2670   E451 D7 28       
2671   E453 8F          			.db %10001111	\.dw sw_M			;(25) M
2671   E454 D7 28       
2672   E456 8F          			.db %10001111	\.dw sw_N			;(26) N
2672   E457 D7 28       
2673   E459 8F          			.db %10001111	\.dw sw_O			;(27) O
2673   E45A D7 28       
2674   E45C 8F          			.db %10001111	\.dw sw_P			;(28) P
2674   E45D D7 28       
2675   E45F 11          			.db %00010001	\.dw sw_R			;(29) R
2675   E460 D7 C3       
2676   E462 11          			.db %00010001	\.dw sw_S			;(30) S
2676   E463 D7 BF       
2677   E465 91          			.db %10010001	\.dw sw_T			;(31) T
2677   E466 D7 8A       
2678   E468 B3          			.db %10110011	\.dw sw_z_bomb		;(32) z_bomb
2678   E469 DD 9B       
2679   E46B 94          			.db %10010100	\.dw sw_l_shooter		;(33) l_shooter
2679   E46C D5 47       
2680   E46E 94          			.db %10010100	\.dw sw_r_shooter		;(34) r_shooter
2680   E46F D5 47       
2681   E471             switchtable_end
2682   E471             
2683   E471 3D 3E       gj_12			.db $3D,$3E
2684   E473             
2685   E473 363738393F40gj_02			.db $36,$37,$38,$39,$3F,$40,$41,$42,$46,$47
2685   E479 41424647
2686   E47D             
2687   E47D 363738393F40gj_1B			.db $36,$37,$38,$39,$3F,$40,$41,$42,$00,$3D,$3E,$00,$06,$0C,$12,$18
2687   E483 4142003D3E00060C1218
2688   E48D 1E242A304746			.db $1E,$24,$2A,$30,$47,$46,$00
2688   E493 00
2689   E494             
2690   E494 060701020304gj_2D			.db $06,$07,$01,$02,$03,$04,$19,$17,$16,$15,$13,$12,$05,$14
2690   E49A 1917161513120514
2691   E4A2             
2692   E4A2 0C 0F 13 15 gj_3A			.db $0C,$0F,$13,$15
2693   E4A6             
2694   E4A6 E593E58DE5C2gj_3E			.db $E5,$93,$E5,$8D,$E5,$C2,$E5,$DD,$E5,$EA,$E5,$E4,$E5,$F0
2694   E4AC E5DDE5EAE5E4E5F0
2695   E4B4             
2696   E4B4 010203041917gj_26			.db $01,$02,$03,$04,$19,$17,$16,$15,$05,$06,$07,$08,$09,$0A,$0B,$0C
2696   E4BA 161505060708090A0B0C
2697   E4C4 0D0E0F101213			.db $0D,$0E,$0F,$10,$12,$13,$14
2697   E4CA 14
2698   E4CB             
2699   E4CB 000037068F14character_defs	.db $00,$00,$37,$06,$8F,$14,$39,$00,$8F,$10,$39,$02,$31,$02,$3D,$04
2699   E4D1 39008F10390231023D04
2700   E4DB 360689101E00			.db $36,$06,$89,$10,$1E,$00,$30,$23,$38,$00,$76,$01,$76,$20,$3F,$00
2700   E4E1 30233800760176203F00
2701   E4EB 33063F203326			.db $33,$06,$3F,$20,$33,$26,$2D,$06,$81,$10,$3E,$00,$30,$09,$36,$28
2701   E4F1 2D0681103E0030093628
2702   E4FB 402922160909			.db $40,$29,$22,$16,$09,$09,$3F,$09,$80,$10,$0B,$0C,$0D,$05,$26,$06
2702   E501 3F0980100B0C0D052606
2703   E50B 29223D060700			.db $29,$22,$3D,$06,$07,$00,$3F,$06,$2F,$06,$82,$00,$00,$06,$40,$20
2703   E511 3F062F06820000064020
2704   E51B 80100009BB04			.db $80,$10,$00,$09,$BB,$04,$80,$16,$C0,$3F,$00,$25,$08,$00
2704   E521 8016C03F00250800
2705   E529             
2706   E529 2817090C0C09msg_williams	.db $28,$17,$09,$0C,$0C,$09,$01,$0D,$13
2706   E52F 010D13
2707   E532             
2708   E532 0B050C050314msg_electronics	.db $0B,$05,$0C,$05,$03,$14,$12,$0F,$0E,$09,$03,$13
2708   E538 120F0E090313
2709   E53E             
2710   E53E 281012051305msg_presents	.db $28,$10,$12,$05,$13,$05,$0E,$14,$13
2710   E544 0E1413
2711   E547             
2712   E547 190819100512msg_hyperball	.db $19,$08,$19,$10,$05,$12,$02,$01,$0C,$0C
2712   E54D 02010C0C
2713   E551             
2714   E551 160312050409msg_credit		.db $16,$03,$12,$05,$04,$09,$14
2714   E557 14
2715   E558             
2716   E558 26100C011905msg_player		.db $26,$10,$0C,$01,$19,$05,$12
2716   E55E 12
2717   E55F             
2718   E55F 050007010D05msg_game		.db $05,$00,$07,$01,$0D,$05
2719   E565             
2720   E565 050F16051200msg_over		.db $05,$0F,$16,$05,$12,$00
2721   E56B             
2722   E56B 280312091409msg_critical	.db $28,$03,$12,$09,$14,$09,$03,$01,$0C
2722   E571 03010C
2723   E574             
2724   E574 2417011605  msg_wave		.db $24,$17,$01,$16,$05
2725   E579             
2726   E579 19030F0D100Cmsg_completed	.db $19,$03,$0F,$0D,$10,$0C,$05,$14,$05,$04
2726   E57F 05140504
2727   E583             
2728   E583 192C00131005msg_spell		.db $19,$2C,$00,$13,$10,$05,$0C,$0C,$00,$2C
2728   E589 0C0C002C
2729   E58D             
2730   E58D 05020F0E1513msg_bonus		.db $05,$02,$0F,$0E,$15,$13
2731   E593             
2732   E593 06050E051207msg_energy		.db $06,$05,$0E,$05,$12,$07,$19
2732   E599 19
2733   E59A             
2734   E59A 0A190F15000Dmsg_youmissed	.db $0A,$19,$0F,$15,$00,$0D,$09,$13,$13,$05,$04
2734   E5A0 0913130504
2735   E5A5             
2736   E5A5 061205060C05msg_reflex		.db $06,$12,$05,$06,$0C,$05,$18
2736   E5AB 18
2737   E5AC             
2738   E5AC 03 08 09 14 msg_hit		.db $03,$08,$09,$14
2739   E5B0             
2740   E5B0 151E26455500msg_3eu		.db $15,$1E,$26,$45,$55,$00
2741   E5B6             
2742   E5B6 151E265A4200msg_3zb		.db $15,$1E,$26,$5A,$42,$00
2743   E5BC             
2744   E5BC 05249B1B1B1Bmsg_zeros		.db $05,$24,$9B,$1B,$1B,$1B
2745   E5C2             
2746   E5C2 050819100512msg_hyper		.db $05,$08,$19,$10,$05,$12
2747   E5C8             
2748   E5C8 070526150E09msg_enuit		.db $07,$05,$26,$15,$0E,$09,$14,$00
2748   E5CE 1400
2749   E5D0             
2750   E5D0 0C2C00131312msg_ssr_ejs		.db $0C,$2C,$00,$13,$13,$12,$00,$00,$05,$0A,$13,$00,$2C
2750   E5D6 0000050A13002C
2751   E5DD             
2752   E5DD 0603010E0E0Fmsg_cannon		.db $06,$03,$01,$0E,$0E,$0F,$0E
2752   E5E3 0E
2753   E5E4             
2754   E5E4 05010C09050Emsg_alien		.db $05,$01,$0C,$09,$05,$0E
2755   E5EA             
2756   E5EA 050C01130512msg_laser		.db $05,$0C,$01,$13,$05,$12
2757   E5F0             
2758   E5F0 03 12 01 19 msg_ray		.db $03,$12,$01,$19
2759   E5F4             
2760   E5F4 282C0014090Cmsg_tilt		.db $28,$2C,$00,$14,$09,$0C,$14,$00,$2C
2760   E5FA 14002C
2761   E5FD             
2762   E5FD 0C0712050114msg_great_reflex	.db $0C,$07,$12,$05,$01,$14,$00,$12,$05,$06,$0C,$05,$18
2762   E603 001205060C0518
2763   E60A             
2764   E60A 0A050E140512msg_enter_your	.db $0A,$05,$0E,$14,$05,$12,$00,$19,$0F,$15,$12
2764   E610 00190F1512
2765   E615             
2766   E615 08090E091409msg_initials	.db $08,$09,$0E,$09,$14,$09,$01,$0C,$13
2766   E61B 010C13
2767   E61E             
2768   E61E 0B0712050114msg_great_score	.db $0B,$07,$12,$05,$01,$14,$00,$13,$03,$0F,$12,$05
2768   E624 0013030F1205
2769   E62A             
2770   E62A 280819001303msg_hy_score	.db $28,$08,$19,$00,$13,$03,$0F,$12
2770   E630 0F12
2771   E632             
2772   E632 05          lmp_ani_inout-1	.db $05
2773   E633             
2774   E633 1B9521A7A29Clmp_ani_inout	.db $1B,$95,$21,$A7,$A2,$9C,$96,$8F,$1A,$A0,$AD,$A8,$90,$89,$14,$A6
2774   E639 968F1AA0ADA8908914A6
2775   E643 B3AE8A830EAC			.db $B3,$AE,$8A,$83,$0E,$AC,$A9,$A3,$9D,$97,$91,$84,$B4,$08,$B2,$B5
2775   E649 A9A39D979184B408B2B5
2776   E653 AF8B8502CECF			.db $AF,$8B,$85,$02,$CE,$CF,$C8,$CB,$93,$99,$1F,$CD,$CC,$C9,$CA,$81
2776   E659 C8CB93991FCDCCC9CA81
2777   E663 878DA5AB31C7			.db $87,$8D,$A5,$AB,$31,$C7,$C3,$C2,$BA,$B9,$3E,$C6,$C4,$C1,$B8,$BB
2777   E669 C3C2BAB93EC6C4C1B8BB
2778   E673 BD92981EA4AA			.db $BD,$92,$98,$1E,$A4,$AA,$B0,$C5,$BF,$B6,$B7,$BC,$80,$86
2778   E679 B0C5BFB6B7BC8086
2779   E681             
2780   E681 0C          lmp_ani_outin-1	.db $0C
2781   E682             
2782   E682 B63FB740B8C1lmp_ani_outin	.db $B6,$3F,$B7,$40,$B8,$C1,$CA,$4D,$C9,$CC,$85,$8B,$91,$97,$9D,$A3
2782   E688 CA4DC9CC858B91979DA3
2783   E692 A9AF35C8CB84			.db $A9,$AF,$35,$C8,$CB,$84,$8A,$90,$96,$9C,$A2,$A8,$AE,$34,$C2,$CF
2783   E698 8A90969CA2A8AE34C2CF
2784   E6A2 B94E83898F95			.db $B9,$4E,$83,$89,$8F,$95,$9B,$A1,$A7,$AD,$33,$BA,$C3,$82,$88,$8E
2784   E6A8 9BA1A7AD33BAC382888E
2785   E6B2 949AA0A6AC32			.db $94,$9A,$A0,$A6,$AC,$32,$BB,$44,$C6,$C7,$BC,$81,$87,$8D,$93,$99
2785   E6B8 BB44C6C7BC81878D9399
2786   E6C2 9FA5AB31BDC5			.db $9F,$A5,$AB,$31,$BD,$C5,$3E,$80,$86,$8C,$92,$98,$9E,$A4,$AA,$30
2786   E6C8 3E80868C92989EA4AA30
2787   E6D2             
2788   E6D2             
2789   E6D2 96 05       disp_wave_num	ldaa	game_ram_5
2790   E6D4 16          gj_2C			tab	
2791   E6D5 84 0F       			anda	#$0F
2792   E6D7 8B 1B       			adda	#$1B
2793   E6D9 DE B8       			ldx	temp1
2794   E6DB A7 02       			staa	$02,X
2795   E6DD BD EC 32    			jsr	split_ab
2796   E6E0 5D          			tstb	
2797   E6E1 27 02       			beq	gb_9C
2798   E6E3 CB 1B       			addb	#$1B
2799   E6E5 E7 01       gb_9C			stab	$01,X
2800   E6E7 39          			rts	
2801   E6E8             
2802   E6E8 CE 13 A7    gj_21			ldx	#hy_unknown_e
2803   E6EB DF B8       			stx	temp1
2804   E6ED 8D E3       			bsr	disp_wave_num
2805   E6EF 86 08       			ldaa	#$08
2806   E6F1 A7 00       			staa	$00,X
2807   E6F3 86 13       			ldaa	#$13
2808   E6F5 A7 08       			staa	$08,X
2809   E6F7 6F 03       			clr	$03,X
2810   E6F9 CE 13 AB    			ldx	#$13AB
2811   E6FC DF B8       			stx	temp1
2812   E6FE CE E5 74    			ldx	#msg_wave
2813   E701 BD D3 0D    			jsr	gj_29
2814   E704 BD D2 B0    			jsr	gb_0E
2815   E707 5F          			clrb	
2816   E708 86 04       			ldaa	#$04
2817   E70A BD D2 C8    			jsr	gj_20
2818   E70D CE 13 A7    			ldx	#hy_unknown_e
2819   E710 7E D2 58    			jmp	slide_l
2820   E713             
2821   E713 000000000000dt_E713		.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2821   E719 00000000000000000000
2822   E723 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2822   E729 00000000000000
2823   E730             
2824   E730 000000000000sw_slam		.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2824   E736 00000000000000000000
2825   E740 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2825   E746 00000000000000000000
2826   E750 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2826   E756 00000000000000000000
2827   E760 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2827   E766 00000000000000000000
2828   E770 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2828   E776 00000000000000000000
2829   E780 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2829   E786 00000000000000000000
2830   E790 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2830   E796 00000000000000000000
2831   E7A0 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2831   E7A6 00000000000000000000
2832   E7B0 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2832   E7B6 00000000000000000000
2833   E7C0 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2833   E7C6 00000000000000000000
2834   E7D0 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2834   E7D6 00000000000000000000
2835   E7E0 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2835   E7E6 00000000000000000000
2836   E7F0 000000000000			.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
2836   E7F6 00000000000000000000
2837   E800             
2838   E800             
2839   E800             	.end
2840   E800             
2841   E800             ;**************************************
2842   E800             ;* Label Definitions                   
2843   E800             ;**************************************
2844   E800             ; d000	gr_gamenumber
2845   E800             ; d002	gr_romrevision
2846   E800             ; d003	gr_cmoscsum
2847   E800             ; d005	gr_backuphstd
2848   E800             ; d006	gr_replay1
2849   E800             ; d007	gr_replay2
2850   E800             ; d008	gr_replay3
2851   E800             ; d009	gr_replay4
2852   E800             ; d00a	gr_matchenable
2853   E800             ; d00b	gr_specialaward
2854   E800             ; d00c	gr_replayaward
2855   E800             ; d00d	gr_maxplumbbobtilts
2856   E800             ; d00e	gr_numberofballs
2857   E800             ; d00f	gr_gameadjust1
2858   E800             ; d010	gr_gameadjust2
2859   E800             ; d011	gr_gameadjust3
2860   E800             ; d012	gr_gameadjust4
2861   E800             ; d013	gr_gameadjust5
2862   E800             ; d014	gr_gameadjust6
2863   E800             ; d015	gr_gameadjust7
2864   E800             ; d016	gr_gameadjust8
2865   E800             ; d017	gr_gameadjust9
2866   E800             ; d018	gr_hstdcredits
2867   E800             ; d019	gr_max_extraballs
2868   E800             ; d01a	gr_max_credits
2869   E800             ; d01b	gr_pricingdata
2870   E800             ; d04b	gr_maxthreads
2871   E800             ; d04c	gr_extendedromtest
2872   E800             ; d04d	gr_lastswitch
2873   E800             ; d04e	gr_numplayers
2874   E800             ; d04f	gr_lamptable_ptr
2875   E800             ; d051	gr_switchtable_ptr
2876   E800             ; d053	gr_soundtable_ptr
2877   E800             ; d055	gr_lampflashrate
2878   E800             ; d056	gr_specialawardsound
2879   E800             ; d057	gr_p1_startsound
2880   E800             ; d058	gr_p2_startsound
2881   E800             ; d05a	gr_hssound
2882   E800             ; d05b	gr_gameoversound
2883   E800             ; d05c	gr_creditsound
2884   E800             ; d05d	gr_gameover_lamp
2885   E800             ; d05f	gr_gameoverthread_ptr
2886   E800             ; d05f	gr_tilt_lamp
2887   E800             ; d066	gr_switchtypetable
2888   E800             ; d074	gr_playerstartdata
2889   E800             ; d092	gr_playerresetdata
2890   E800             ; d0b0	gr_switch_event
2891   E800             ; d0b2	gr_sound_event
2892   E800             ; d0b4	gr_score_event
2893   E800             ; d0b6	gr_eb_event
2894   E800             ; d0b8	gr_special_event
2895   E800             ; D0BA hook_mainloop
2896   E800             ; d0ba	gr_macro_event
2897   E800             ; d0bc	gr_ballstart_event
2898   E800             ; d0be	gr_addplayer_event
2899   E800             ; d0c0	gr_gameover_event
2900   E800             ; d0c2	gr_hstdtoggle_event
2901   E800             ; d0c4	gr_reset_hook_ptr
2902   E800             ; d0c6	gr_main_hook_ptr
2903   E800             ; d0c8	gr_coin_hook_ptr
2904   E800             ; d0ca	gr_game_hook_ptr
2905   E800             ; d0cc	gr_player_hook_ptr
2906   E800             ; d0ce	gr_outhole_hook_ptr
2907   E800             ; d0d0	gr_irq_entry
2908   E800             ; d0d3	gr_swi_entry
2909   E800             ; D0DC special_event
2910   E800             ; D103 gb_02
2911   E800             ; D108 hook_reset
2912   E800             ; D11B sw_hstd_res
2913   E800             ; D11D to_kill
2914   E800             ; D120 hook_gamestart
2915   E800             ; D123 gb_03
2916   E800             ; D13B gb_01
2917   E800             ; D13E sw_1p_start
2918   E800             ; D13F sw_2p_start
2919   E800             ; D157 gb_07
2920   E800             ; D16F gs_forever
2921   E800             ; D172 gb_06
2922   E800             ; D193 gb_52
2923   E800             ; D1A7 gb_53
2924   E800             ; D1B9 jmp_cmosa
2925   E800             ; D1BC extend_game
2926   E800             ; D1C4 get_aud_ec_ex
2927   E800             ; D1CC add_a_to_wave
2928   E800             ; D1D2 gb_4D
2929   E800             ; D1DA gb_4E
2930   E800             ; D1DD ani_game_lr
2931   E800             ; D1E9 to_kill2
2932   E800             ; D1EC ani_over_rl
2933   E800             ; D1FA killthreads_ff
2934   E800             ; D1FF hook_outhole
2935   E800             ; D20C gb_04
2936   E800             ; D217 gb_05
2937   E800             ; D22F show_gameover
2938   E800             ; D246 goto_sme
2939   E800             ; D249 slide_r
2940   E800             ; D250 gb_5D
2941   E800             ; D253 gb_0D
2942   E800             ; D258 slide_l
2943   E800             ; D25C gb_5F
2944   E800             ; D25F gb_0F
2945   E800             ; D26D ani_msg_rlslide
2946   E800             ; D272 gj_2E
2947   E800             ; D276 step_r
2948   E800             ; D27E gb_60
2949   E800             ; D28B step_l
2950   E800             ; D293 gb_A0
2951   E800             ; D29E gb_61
2952   E800             ; D2A8 gb_A1
2953   E800             ; D2B0 gb_0E
2954   E800             ; D2BB gb_0C
2955   E800             ; D2C4 gb_5E
2956   E800             ; D2C8 gj_20
2957   E800             ; D2CA gb_93
2958   E800             ; D2CF gj_3D
2959   E800             ; D2D1 gb_10
2960   E800             ; D2D6 setup_msg_endptr
2961   E800             ; D2F4 pulab_rts
2962   E800             ; D2F7 ani_circle
2963   E800             ; D2F9 gb_91
2964   E800             ; D2FE gb_92
2965   E800             ; D30B load_message
2966   E800             ; D30D gj_29
2967   E800             ; D315 ani_msg_letters
2968   E800             ; D31B gb_CD
2969   E800             ; D329 gb_CC
2970   E800             ; D346 gj_0D
2971   E800             ; D349 gj_08
2972   E800             ; D34C clr_alpha_set_b1
2973   E800             ; D34E clr_alpha_set_bx
2974   E800             ; D354 clr_next_12
2975   E800             ; D35A sw_plumbtilt
2976   E800             ; D370 tilt_kill
2977   E800             ; D371 tilt_sleeper
2978   E800             ; D377 game_tilt
2979   E800             ; D38A gb_99
2980   E800             ; D3A1 gj_45
2981   E800             ; D3B0 hook_playerinit
2982   E800             ; D3CB plyer_load
2983   E800             ; D3E2 gb_11
2984   E800             ; D3E8 gj_0B
2985   E800             ; D3F3 get_current_ecs
2986   E800             ; D3F9 xplusb_ldb
2987   E800             ; D3FF begin_play
2988   E800             ; D407 gb_12
2989   E800             ; D42F gb_63
2990   E800             ; D439 gb_62
2991   E800             ; D457 gb_66
2992   E800             ; D461 gb_65
2993   E800             ; D468 gb_68
2994   E800             ; D470 gb_67
2995   E800             ; D473 gb_64
2996   E800             ; D47E gb_69
2997   E800             ; D47F gb_6B
2998   E800             ; D48B gb_6A
2999   E800             ; D4A2 gb_A3
3000   E800             ; D4A4 gb_A2
3001   E800             ; D4AC gb_A4
3002   E800             ; D4B8 gb_A5
3003   E800             ; D4C6 gb_A6
3004   E800             ; D4CD gb_A7
3005   E800             ; D4CF gb_A8
3006   E800             ; D4F0 gb_A9
3007   E800             ; D4FF to_addthr_noa
3008   E800             ; D501 start_reflex
3009   E800             ; D50D addthread_clra
3010   E800             ; D50E newthreadp
3011   E800             ; D513 bolt_launcher
3012   E800             ; D517 gb_17
3013   E800             ; D530 gb_13
3014   E800             ; D534 gb_14
3015   E800             ; D536 gb_16
3016   E800             ; D53D gb_15
3017   E800             ; D547 sw_l_shooter
3018   E800             ; D547 sw_r_shooter
3019   E800             ; D549 gj_0A
3020   E800             ; D55C gb_0A
3021   E800             ; D563 gb_0B
3022   E800             ; D564 gj_11
3023   E800             ; D565 gb_18
3024   E800             ; D57B gb_19
3025   E800             ; D591 gb_1B
3026   E800             ; D598 gb_1A
3027   E800             ; D5AA start_rndawd
3028   E800             ; D5AF gb_D2
3029   E800             ; D5B2 gb_1C
3030   E800             ; D5BB gb_1D
3031   E800             ; D5C4 gb_20
3032   E800             ; D5DE gb_1F
3033   E800             ; D5E8 jmp_getrandom
3034   E800             ; D5EB random_x03
3035   E800             ; D5F0 random_x07
3036   E800             ; D5F5 random_x0f
3037   E800             ; D5FA gb_1E
3038   E800             ; D602 gj_0E
3039   E800             ; D626 gb_6C
3040   E800             ; D632 gb_6D
3041   E800             ; D646 gb_AA
3042   E800             ; D64A gb_AB
3043   E800             ; D64E gb_6E
3044   E800             ; D65F gb_AD
3045   E800             ; D666 sumthin
3046   E800             ; D677 gb_21
3047   E800             ; D680 gb_6F
3048   E800             ; D682 gj_0F
3049   E800             ; D690 gj_10
3050   E800             ; D691 gb_22
3051   E800             ; D6A5 gj_35
3052   E800             ; D6BD gb_23
3053   E800             ; D6BF get_rnd_lampnum
3054   E800             ; D6C8 gb_54
3055   E800             ; D6D4 gb_9A
3056   E800             ; D6DD gb_9B
3057   E800             ; D6E0 gb_55
3058   E800             ; D6E3 gj_03
3059   E800             ; D70A gj_06
3060   E800             ; D728 sw_H
3061   E800             ; D728 sw_I
3062   E800             ; D728 sw_J
3063   E800             ; D728 sw_K
3064   E800             ; D728 sw_L
3065   E800             ; D728 sw_M
3066   E800             ; D728 sw_N
3067   E800             ; D728 sw_O
3068   E800             ; D728 sw_P
3069   E800             ; D741 sw_common
3070   E800             ; D743 chk_wave_compl
3071   E800             ; D75E setup_next_wave
3072   E800             ; D773 s_kill
3073   E800             ; D774 show_wave_compl
3074   E800             ; D785 sleep45
3075   E800             ; D78A sw_T
3076   E800             ; D794 sw_E
3077   E800             ; D79E sw_F
3078   E800             ; D7A2 sw_G
3079   E800             ; D7A4 ssw_handler
3080   E800             ; D7AD gj_04
3081   E800             ; D7B5 gb_AE
3082   E800             ; D7BE gb_08
3083   E800             ; D7BF sw_S
3084   E800             ; D7C3 sw_R
3085   E800             ; D7C7 sw_A
3086   E800             ; D7C7 sw_B
3087   E800             ; D7C7 sw_C
3088   E800             ; D7C7 sw_D
3089   E800             ; D7C7 sw_U
3090   E800             ; D7C7 sw_V
3091   E800             ; D7C7 sw_W
3092   E800             ; D7C7 sw_Y
3093   E800             ; D7D2 gj_49
3094   E800             ; D7D3 gj_14
3095   E800             ; D7DC gb_24
3096   E800             ; D7E0 gj_30
3097   E800             ; D7E9 gb_71
3098   E800             ; D7F1 gb_25
3099   E800             ; D80D gb_B0
3100   E800             ; D812 gb_AF
3101   E800             ; D817 gb_B1
3102   E800             ; D821 gb_D4
3103   E800             ; D834 gb_D3
3104   E800             ; D83E gb_F2
3105   E800             ; D844 gb_F1
3106   E800             ; D84C gb_F4
3107   E800             ; D852 gb_F3
3108   E800             ; D853 invert_alphamsk
3109   E800             ; D858 stab_all_alphmsk
3110   E800             ; D85D gb_79
3111   E800             ; D85E gb_27
3112   E800             ; D87A gb_28
3113   E800             ; D87B gb_26
3114   E800             ; D880 gb_29
3115   E800             ; D885 start_spell
3116   E800             ; D89C gb_2C
3117   E800             ; D8B2 gb_77
3118   E800             ; D8C1 gb_78
3119   E800             ; D8CC gb_2B
3120   E800             ; D8E0 gb_76
3121   E800             ; D8EA gb_75
3122   E800             ; D8F4 gb_D8
3123   E800             ; D8F8 gb_BA
3124   E800             ; D90C gb_2A
3125   E800             ; D916 gb_72
3126   E800             ; D917 gb_B8
3127   E800             ; D91B gb_D7
3128   E800             ; D927 gb_73
3129   E800             ; D940 gb_B2
3130   E800             ; D945 gb_B7
3131   E800             ; D94E gb_B3
3132   E800             ; D951 gb_74
3133   E800             ; D971 gj_31
3134   E800             ; D97C gb_B9
3135   E800             ; D986 gb_D9
3136   E800             ; D987 gj_05
3137   E800             ; D999 gb_B5
3138   E800             ; D99D gb_B4
3139   E800             ; D9A2 gb_B6
3140   E800             ; D9B7 gb_D6
3141   E800             ; D9C5 gb_D5
3142   E800             ; D9CB add_b_cur_ecs
3143   E800             ; D9DA gj_44
3144   E800             ; D9E3 gb_F5
3145   E800             ; D9E8 gb_4C
3146   E800             ; D9EE to_lampm_a
3147   E800             ; D9F1 gj_0C
3148   E800             ; D9F2 gb_7D
3149   E800             ; D9FB gb_7A
3150   E800             ; D9FC gb_2D
3151   E800             ; DA0C gb_80
3152   E800             ; DA10 gj_32
3153   E800             ; DA19 gb_7C
3154   E800             ; DA25 gb_7F
3155   E800             ; DA36 gb_7B
3156   E800             ; DA38 gb_BE
3157   E800             ; DA3C gj_3F
3158   E800             ; DA45 gb_BB
3159   E800             ; DA51 gb_BD
3160   E800             ; DA62 gj_41
3161   E800             ; DA7E gb_2F
3162   E800             ; DA83 gb_2E
3163   E800             ; DA86 gj_3C
3164   E800             ; DA87 gb_7E
3165   E800             ; DA8F gb_C0
3166   E800             ; DAAE gj_3B
3167   E800             ; DAAF gb_BC
3168   E800             ; DAB7 gb_DA
3169   E800             ; DAD4 gb_C1
3170   E800             ; DADF gb_DB
3171   E800             ; DAE1 gb_F7
3172   E800             ; DAEC gb_BF
3173   E800             ; DAEE gb_8C
3174   E800             ; DAEF gb_F6
3175   E800             ; DB00 gb_102
3176   E800             ; DB06 gj_1A
3177   E800             ; DB12 gj_19
3178   E800             ; DB1D gj_34
3179   E800             ; DB28 gb_89
3180   E800             ; DB38 gb_CA
3181   E800             ; DB54 gb_CB
3182   E800             ; DB57 gb_DD
3183   E800             ; DB59 gj_40
3184   E800             ; DB68 gb_DC
3185   E800             ; DB7D gj_15
3186   E800             ; DB85 gb_81
3187   E800             ; DB88 show_eunit_bonus
3188   E800             ; DBB2 gb_56
3189   E800             ; DBC6 gb_57
3190   E800             ; DBDA gb_58
3191   E800             ; DBE5 start_baiter
3192   E800             ; DBEC gb_31
3193   E800             ; DBF7 gb_30
3194   E800             ; DBF9 gb_32
3195   E800             ; DBFC gb_33
3196   E800             ; DC15 gb_34
3197   E800             ; DC2A gb_37
3198   E800             ; DC32 gb_36
3199   E800             ; DC5A gb_35
3200   E800             ; DC69 gb_84
3201   E800             ; DC6F gb_86
3202   E800             ; DC76 gb_85
3203   E800             ; DC84 gj_17
3204   E800             ; DC98 gb_8B
3205   E800             ; DCA6 gb_38
3206   E800             ; DCBC gb_87
3207   E800             ; DCBD gj_33
3208   E800             ; DCD4 gb_C3
3209   E800             ; DCF2 gb_C4
3210   E800             ; DD01 gb_DE
3211   E800             ; DD04 gb_C2
3212   E800             ; DD0F gb_8A
3213   E800             ; DD14 gb_E1
3214   E800             ; DD17 gj_16
3215   E800             ; DD19 gb_83
3216   E800             ; DD20 gb_82
3217   E800             ; DD23 gj_18
3218   E800             ; DD32 gb_88
3219   E800             ; DD48 gb_C5
3220   E800             ; DD51 gb_C6
3221   E800             ; DD5A gb_C8
3222   E800             ; DD5D gb_DF
3223   E800             ; DD5E gb_C7
3224   E800             ; DD5F gb_C9
3225   E800             ; DD6D gb_E0
3226   E800             ; DD76 gj_27
3227   E800             ; DD84 gb_3B
3228   E800             ; DD87 gb_3A
3229   E800             ; DD89 gb_39
3230   E800             ; DD9B sw_z_bomb
3231   E800             ; DDB0 gj_46
3232   E800             ; DDB3 gb_3C
3233   E800             ; DDBF gb_59
3234   E800             ; DDC0 gb_09
3235   E800             ; DDD0 gb_9D
3236   E800             ; DDDE gb_5A
3237   E800             ; DDEC gj_2A
3238   E800             ; DDFD gb_5B
3239   E800             ; DE0E gb_9E
3240   E800             ; DE1B gb_D1
3241   E800             ; DE26 gb_E9
3242   E800             ; DE36 gj_13
3243   E800             ; DE38 gj_43
3244   E800             ; DE3F gb_70
3245   E800             ; DE40 zbomb_ani
3246   E800             ; DE43 gb_EA
3247   E800             ; DE5F lmpanirts
3248   E800             ; DE60 zbomb_ani2
3249   E800             ; DE63 gb_101
3250   E800             ; DE7A zbomb_ani3
3251   E800             ; DE7D gb_ED
3252   E800             ; DE80 gb_EB
3253   E800             ; DE98 gb_EC
3254   E800             ; DEA7 gameover_entry
3255   E800             ; DEC4 gb_5C
3256   E800             ; DEEE gj_09
3257   E800             ; DEF4 gj_39
3258   E800             ; DF0E ani_msg_starslide
3259   E800             ; DF11 ani_starslide
3260   E800             ; DF19 gb_50
3261   E800             ; DF29 gb_51
3262   E800             ; DF38 gb_4F
3263   E800             ; DF3C gb_97
3264   E800             ; DF51 gj_37
3265   E800             ; DF58 gb_98
3266   E800             ; DF5B gj_1E
3267   E800             ; DF64 gj_07
3268   E800             ; DF6C gb_3D
3269   E800             ; DF6F gj_36
3270   E800             ; DF74 gj_28
3271   E800             ; DF79 gb_8D
3272   E800             ; DF7C gb_3F
3273   E800             ; DF96 gb_3E
3274   E800             ; DF99 gb_8E
3275   E800             ; DFB0 gj_1C
3276   E800             ; DFBD gb_40
3277   E800             ; DFCC gj_48
3278   E800             ; DFD2 gj_2F
3279   E800             ; DFE5 gb_AC
3280   E800             ; DFF0 reflex_thread
3281   E800             ; E00A reflex_lp
3282   E800             ; E03E gb_EF
3283   E800             ; E04F gb_F0
3284   E800             ; E05A to_next_wave
3285   E800             ; E069 gb_EE
3286   E800             ; E06C gb_41
3287   E800             ; E070 gj_1D
3288   E800             ; E081 gb_42
3289   E800             ; E08D gb_43
3290   E800             ; E0A2 gb_8F
3291   E800             ; E0AD gb_CE
3292   E800             ; E0B1 gj_38
3293   E800             ; E0C7 gb_E4
3294   E800             ; E0D0 gb_E2
3295   E800             ; E10A gb_E5
3296   E800             ; E10F gb_E3
3297   E800             ; E11C gb_F9
3298   E800             ; E134 gb_FC
3299   E800             ; E137 gj_47
3300   E800             ; E142 gb_FA
3301   E800             ; E14C gb_103
3302   E800             ; E152 gb_FB
3303   E800             ; E153 gb_F8
3304   E800             ; E165 gb_44
3305   E800             ; E16E gb_90
3306   E800             ; E170 gj_1F
3307   E800             ; E172 hook_coin
3308   E800             ; E189 highscoresound
3309   E800             ; E195 gb_45
3310   E800             ; E1F2 gb_48
3311   E800             ; E1F6 gb_47
3312   E800             ; E208 gb_46
3313   E800             ; E210 gb_96
3314   E800             ; E216 gb_95
3315   E800             ; E228 gj_22
3316   E800             ; E232 gb_E8
3317   E800             ; E242 gb_94
3318   E800             ; E24D gb_D0
3319   E800             ; E256 gb_CF
3320   E800             ; E269 gb_E7
3321   E800             ; E270 gb_E6
3322   E800             ; E27B gb_100
3323   E800             ; E27D gb_FF
3324   E800             ; E293 gb_FD
3325   E800             ; E295 gb_105
3326   E800             ; E2AA gb_FE
3327   E800             ; E2B1 gb_109
3328   E800             ; E2B3 gb_106
3329   E800             ; E2B9 gb_107
3330   E800             ; E2C2 gb_10D
3331   E800             ; E2C4 gb_108
3332   E800             ; E2C7 gb_104
3333   E800             ; E2CE gb_10A
3334   E800             ; E2D2 gb_10C
3335   E800             ; E2D4 gb_10B
3336   E800             ; E2DF gj_42
3337   E800             ; E2E7 gj_2B
3338   E800             ; E2FB gb_9F
3339   E800             ; E334 gj_01
3340   E800             ; E340 gb_49
3341   E800             ; E351 gb_4A
3342   E800             ; E353 gj_24
3343   E800             ; E358 gj_23
3344   E800             ; E359 gj_25
3345   E800             ; E35E gb_4B
3346   E800             ; E471 gj_12
3347   E800             ; E473 gj_02
3348   E800             ; E47D gj_1B
3349   E800             ; E494 gj_2D
3350   E800             ; E4A2 gj_3A
3351   E800             ; E4A6 gj_3E
3352   E800             ; E4B4 gj_26
3353   E800             ; E4CB character_defs
3354   E800             ; E529 msg_williams
3355   E800             ; E532 msg_electronics
3356   E800             ; E53E msg_presents
3357   E800             ; E547 msg_hyperball
3358   E800             ; E551 msg_credit
3359   E800             ; E558 msg_player
3360   E800             ; E55F msg_game
3361   E800             ; E565 msg_over
3362   E800             ; E56B msg_critical
3363   E800             ; E574 msg_wave
3364   E800             ; E579 msg_completed
3365   E800             ; E583 msg_spell
3366   E800             ; E58D msg_bonus
3367   E800             ; E593 msg_energy
3368   E800             ; E59A msg_youmissed
3369   E800             ; E5A5 msg_reflex
3370   E800             ; E5AC msg_hit
3371   E800             ; E5B0 msg_3eu
3372   E800             ; E5B6 msg_3zb
3373   E800             ; E5BC msg_zeros
3374   E800             ; E5C2 msg_hyper
3375   E800             ; E5C8 msg_enuit
3376   E800             ; E5D0 msg_ssr_ejs
3377   E800             ; E5DD msg_cannon
3378   E800             ; E5E4 msg_alien
3379   E800             ; E5EA msg_laser
3380   E800             ; E5F0 msg_ray
3381   E800             ; E5F4 msg_tilt
3382   E800             ; E5FD msg_great_reflex
3383   E800             ; E60A msg_enter_your
3384   E800             ; E615 msg_initials
3385   E800             ; E61E msg_great_score
3386   E800             ; E62A msg_hy_score
3387   E800             ; E632 lmp_ani_inout-1
3388   E800             ; E633 lmp_ani_inout
3389   E800             ; E681 lmp_ani_outin-1
3390   E800             ; E682 lmp_ani_outin
3391   E800             ; E6D2 disp_wave_num
3392   E800             ; E6D4 gj_2C
3393   E800             ; E6E5 gb_9C
3394   E800             ; E6E8 gj_21
3395   E800             ; E730 sw_slam
tasm: Number of errors = 0
