0001   0000             ;*****************************************************************************
0002   0000             ;* Williams Hyperball System Code
0003   0000             ;***************************************************************************
0004   0000             ;* Code copyright Williams Electronic Games Inc.
0005   0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006   0000             ;* For use with TASMx Assembler
0007   0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008   0000             ;* for more information.
0009   0000             ;* You may redistribute this file as long as this header remains intact.
0010   0000             ;***************************************************************************
0011   0000             ;* This file is set up with tab stops at 6
0012   0000             ;*****************************************************************************
0013   0000             ;* DB pointed out that this is probably a good idea.
0014   0000             .msfirst	
0015   0000             
0016   0000             #include "../../68logic.asm"		;68XX Logic Definitions
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin		     logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ y	*+5
0050+  0000             #defcont						\ jmp	var2_
0051+  0000             #defcont					\#else
0052+  0000             #defcont						\ x	var2_
0053+  0000             #defcont					\#endif
0054+  0000             #defcont				\#else
0055+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0056+  0000             #defcont				\#endif
0057+  0000             
0058+  0000             ;*******************************************************************
0059+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0060+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0061+  0000             ;*             at that address to point to the current address.    *
0062+  0000             ;*******************************************************************
0063+  0000             #define logic_end \var1_ .set *
0064+  0000             #defcont		\ .pop var3_, var4_
0065+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0066+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0067+  0000             #defcont  				\var2_ .set var1_-var4_-2
0068+  0000             #defcont				\#if var2_+127 < 0
0069+  0000             #defcont					\ .error "Branch Range < -127"
0070+  0000             #defcont				\#else
0071+  0000             #defcont					\#if var2_-128 > 0
0072+  0000             #defcont						\ .error "Branch Range > 128"
0073+  0000             #defcont					\#else
0074+  0000             #defcont    					\ .org var4_+1
0075+  0000             #defcont						\ .byte var2_
0076+  0000             #defcont					\#endif
0077+  0000             #defcont				\#endif
0078+  0000             #defcont			\#else	
0079+  0000             #defcont    			\ .org  var4_-2	
0080+  0000             #defcont				\ .word var1_
0081+  0000             #defcont			\#endif
0082+  0000             #defcont			\ .org	var1_
0083+  0000             #defcont		\#else
0084+  0000             #defcont			\.error "Wrong Endtype for IF block"
0085+  0000             #defcont		\#endif
0086+  0000             
0087+  0000             ;*******************************************************************
0088+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0089+  0000             ;*             (ie. with additional logic as defined below). The   *
0090+  0000             ;*             ELSE block will resove how to terminate the current *
0091+  0000             ;*             code and then set the owning IF statement's data    *
0092+  0000             ;*             byte.                                               *
0093+  0000             ;*******************************************************************
0094+  0000             #define	logic_else(x,y)	\var1_ .set $
0095+  0000             #defcont		\ .pop var3_, var4_
0096+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0097+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0098+  0000             #defcont				\ .org var4_+1
0099+  0000             #defcont	      		\#if x==0
0100+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0101+  0000             #defcont					\#if var2_+127 < 0
0102+  0000             #defcont						\ .org var1_
0103+  0000             #defcont						\.push $+3, 1
0104+  0000             #defcont						\ jmp $
0105+  0000             #defcont					\#else
0106+  0000             #defcont						\#if var2_-128>0
0107+  0000             #defcont							\ .org var1_
0108+  0000             #defcont							\.push $+3, 1
0109+  0000             #defcont							\ jmp $
0110+  0000             #defcont						\#else
0111+  0000             #defcont							\.push var1_, 0
0112+  0000             #defcont							\ .byte var2_
0113+  0000             #defcont							\ .org var1_
0114+  0000             #defcont							\ BRA $
0115+  0000             #defcont							\ .org var1_+2
0116+  0000             #defcont						\#endif
0117+  0000             #defcont					\#endif
0118+  0000             #defcont				\#else
0119+  0000             #defcont					\ .byte var1_-var4_-2+2
0120+  0000             #defcont					\ .org var1_
0121+  0000             #defcont					\.push $, 0
0122+  0000             #defcont					\ y $		
0123+  0000             #defcont				\#endif
0124+  0000             #defcont			\#else
0125+  0000             #defcont				\.error "Duplicate ELSE Statement"
0126+  0000             #defcont			\#endif
0127+  0000             #defcont		\#else
0128+  0000             #defcont			\ .error "Misplaced Else"
0129+  0000             #defcont		\#endif
0130+  0000             
0131+  0000             
0132+  0000             ;*******************************************************************
0133+  0000             ;* Defines how to use the various logic macros defined above.      *
0134+  0000             ;*******************************************************************
0135+  0000             #define	ifeq	logic_ifxx(BNE)		
0136+  0000             #define	ifne	logic_ifxx(BEQ)
0137+  0000             #define	ifpl	logic_ifxx(BMI)
0138+  0000             #define	ifhi	logic_ifxx(BLO)
0139+  0000             #define	ifmi	logic_ifxx(BPL)
0140+  0000             #define	iflo	logic_ifxx(BHI)
0141+  0000             #define	ifcs	logic_ifxx(BCC)
0142+  0000             #define	ifcc	logic_ifxx(BCS)
0143+  0000             #define 	ifvc	logic_ifxx(BVS)
0144+  0000             #define 	ifvs	logic_ifxx(BVC)
0145+  0000             #define	ifge	logic_ifxx(BLS)
0146+  0000             #define	ifgt	logic_ifxx(BLE)
0147+  0000             #define	iflt 	logic_ifxx(BGE)
0148+  0000             #define	ifle	logic_ifxx(BGT)
0149+  0000             
0150+  0000             
0151+  0000             #define	else  	logic_else(0,0)
0152+  0000             #define	else_eq	logic_else(1,BEQ)
0153+  0000             #define	else_ne	logic_else(1,BNE)
0154+  0000             #define	else_pl	logic_else(1,BPL)
0155+  0000             #define	else_mi	logic_else(1,BMI)
0156+  0000             #define	else_cc	logic_else(1,BCC)
0157+  0000             #define	else_cs	logic_else(1,BCS)
0158+  0000             
0159+  0000             #define 	endif		logic_end
0160+  0000             
0161+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0162+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0163+  0000             #define	plend	logic_loopend(BMI,BPL)
0164+  0000             #define	miend	logic_loopend(BPL,BMI)
0165+  0000             #define	csend	logic_loopend(BCC,BCS)
0166+  0000             #define	ccend	logic_loopend(BCS,BCC)
0167+  0000             #define	vcend	logic_loopend(BVS,BVC)
0168+  0000             #define	vsend	logic_loopend(BVC,BVS)
0169+  0000             
0170+  0000             #define	loopend	logic_loopend(BRA,BRA)
0171+  0000             
0172+  0000             #define	lsb(x)	x&$FF
0173+  0000             
0174+  0000             #define	msb(x)	(x>>8)&$FF0017   0000             #include "hy_hard.asm"		;Level 7 Hardware Definitions
0001+  0000             ;***********************************************************
0002+  0000             ;* Hyperball Hardware Definitions                          *
0003+  0000             ;* 1999-2001 Jess M. Askey (jess@askey.org)                *
0004+  0000             ;***********************************************************
0005+  0000             ;* This file defines the RAM structure and the actual      *
0006+  0000             ;* hardware contained on Hyperball.                        *
0007+  0000             ;***********************************************************
0008+  0000             	.org $0000
0009+  0000             
0010+  0000             ram_base	
0011+  0000             vm_reg_a			.block	1		;Virtual Machine Register A
0012+  0001             vm_reg_b			.block	1		;Virtual Machine Register B
0013+  0002             game_ram_2			.block	1
0014+  0003             game_ram_3			.block	1
0015+  0004             game_ram_4			.block	1
0016+  0005             game_ram_5			.block	1
0017+  0006             game_ram_6			.block	1
0018+  0007             game_ram_7			.block	1
0019+  0008             game_ram_8			.block	1
0020+  0009             game_ram_9			.block	1
0021+  000A             game_ram_a			.block	1
0022+  000B             game_ram_b			.block	1
0023+  000C             game_ram_c			.block	1
0024+  000D             game_ram_d			.block	1
0025+  000E             game_ram_e			.block	1
0026+  000F             game_ram_f			.block	1
0027+  0010             
0028+  0010             
0029+  0010             
0030+  0010             lampbuffer0			.block	8		;Lamp Buffer 0
0031+  0018             lampbuffer0x		.block	4		;Extended Lamp Buffer 0
0032+  001C             bitflags			.block	8		;Game Flags
0033+  0024             bitflagsx			.block	4		;Extended Game Flags
0034+  0028             lampbufferselect		.block	8		;Lamp Buffer Selection Bit
0035+  0030             lampbufferselectx		.block	4
0036+  0034             lampbuffer1			.block	8		;Lamp Buffer 1
0037+  003C             lampbuffer1x		.block	4		;Extended Lamp Buffer 1
0038+  0040             lampflashflag		.block	8		;Lamp Flashing Bits
0039+  0048             lampflashflagx		.block	4		
0040+  004C             
0041+  004C             score_p1_b0			.block	4
0042+  0050             score_p2_b0			.block	4
0043+  0054             score_p1_b1			.block	4
0044+  0058             score_p2_b1			.block	4
0045+  005C             wave_p1_b0			.block	1
0046+  005D             wave_p1_b1			.block	1
0047+  005E             wave_p2_b0			.block	1		;$119A  TODO: this is WAY off from L7 which is 
0048+  005F             wave_p2_b1			.block	1
0049+  0060             alpha_b0			.block	12
0050+  006C             alpha_b1			.block	12
0051+  0078             
0052+  0078             dmask_p1			.block	1
0053+  0079             dmask_p2			.block	1
0054+  007A             dmask_p3			.block	1
0055+  007B             dmask_p4			.block	1
0056+  007C             comma_flags			.block	1
0057+  007D             switch_debounced		.block	8
0058+  0085             switch_masked		.block	8
0059+  008D             switch_pending		.block	8
0060+  0095             switch_aux			.block	8
0061+  009D             switch_b4			.block	8
0062+  00A5             irq_counter			.block	1
0063+  00A6             lamp_index_word		.block	1		;Rotating bit for lamp columns
0064+  00A7             lamp_index_wordx		.block	1		;Rotating bit for extended lamp colulmns
0065+  00A8             lamp_bit			.block	1		;
0066+  00A9             comma_data_temp		.block	1
0067+  00AA             
0068+  00AA             credp1p2_bufferselect	.block	1
0069+  00AB             mbipp3p4_bufferselect	.block	1
0070+  00AC             swap_player_displays	.block	1
0071+  00AD             alpha_digit_cur		.block	2
0072+  00AF             solenoid_address		.block	2
0073+  00B1             solenoid_bitpos		.block	1
0074+  00B2             solenoid_counter		.block	1
0075+  00B3             irqcount16			.block	1
0076+  00B4             switch_queue_pointer	.block	2		;switch_queue_pointer
0077+  00B6             solenoid_queue_pointer	.block	2		;solenoid_queue_pointer
0078+  00B8             temp1				.block	2
0079+  00BA             temp2				.block	2
0080+  00BC             temp3				.block	2		;$00BC
0081+  00BE             sys_temp1			.block	1
0082+  00BF             sys_temp2			.block	1
0083+  00C0             sys_temp3			.block	1
0084+  00C1             sys_temp4			.block	1
0085+  00C2             sys_temp5			.block	1
0086+  00C3             
0087+  00C3             sw_encoded			.block	1
0088+  00C4             sys_temp_w2			.block	2
0089+  00C6             sys_temp_w3			.block	2
0090+  00C8             thread_priority		.block	1
0091+  00C9             unused_ram1			.block	1		;$00
0092+  00CA             irqcount			.block	1
0093+  00CB             vm_base			.block	2
0094+  00CD             vm_nextslot			.block	2
0095+  00CF             current_thread		.block	2
0096+  00D1             vm_tail_thread		.block	2
0097+  00D3             lamp_flash_rate		.block	1		;lamp_flash_rate
0098+  00D4             lamp_flash_count		.block	1
0099+  00D5             thread_timer_byte		.block	1
0100+  00D6             soundcount			.block	1
0101+  00D7             lastsound			.block	1
0102+  00D8             cur_sndflags		.block	1		;$00
0103+  00D9             soundptr			.block	2
0104+  00DB             soundirqcount		.block	2
0105+  00DD             soundindex_com		.block	2
0106+  00DF             sys_soundflags		.block	1		;$00DF
0107+  00E0             soundindex			.block	1		;$00E0
0108+  00E1             csound_timer		.block	2		;$00E1
0109+  00E3             next_sndflags		.block	1		;$00E3
0110+  00E4             next_sndcnt		      .block	1		;$00E4
0111+  00E5             next_sndcmd		      .block	1		;$00E5
0112+  00E6             
0113+  00E6             flag_tilt			.block	1
0114+  00E7             flag_gameover		.block	1
0115+  00E8             random_bool			.block	1
0116+  00E9             flags_selftest		.block	1
0117+  00EA             num_players			.block	1
0118+  00EB             player_up			.block	1
0119+  00EC             pscore_buf			.block	2
0120+  00EE             				.block	1
0121+  00EF             vm_pc				.block	2		
0122+  00F1             num_tilt			.block	1
0123+  00F2             minutetimer			.block	2
0124+  00F4             flag_timer_bip		.block	1		;$00F4
0125+  00F5             randomseed			.block	1
0126+  00F6             x_temp_1			.block	2		;$00
0127+  00F8             eb_x_temp			.block	2		;$00
0128+  00FA             credit_x_temp		.block	2		;$00
0129+  00FC             x_temp_2			.block	2
0130+  00FE             character_ptr		.block	2
0131+  0100             
0132+  0100             ;***************************************************************
0133+  0100             ;* Spare RAM: The last 32 bytes are available to the GAME ROM
0134+  0100             ;*            if needed. Only the first 8 are defined by name.
0135+  0100             ;***************************************************************
0136+  0100             spare_ram			.block	1
0137+  0101             spare_ram+1			.block	1
0138+  0102             spare_ram+2			.block	1
0139+  0103             spare_ram+3			.block	1
0140+  0104             spare_ram+4			.block	1
0141+  0105             spare_ram+5			.block	1
0142+  0106             spare_ram+6			.block	1
0143+  0107             spare_ram+7			.block	1
0144+  0108             
0145+  0108             ;***************************************************************
0146+  0108             ;* CMOS RAM - The cmos RAM data bus is only 4-bits wide, so
0147+  0108             ;*            each byte of data takes two consecutive address
0148+  0108             ;*            locations. The lower address is the most 
0149+  0108             ;*            significant nibble in the byte.
0150+  0108             ;***************************************************************
0151+  0100             	.org $0100
0152+  0100             
0153+  0100             cmos_base
0154+  0100             cmos_csum			.block	2
0155+  0102             
0156+  0102             ;* First section is game audits
0157+  0102             aud_base
0158+  0102             aud_leftcoins		.block	4	;0102-0105	"Coins, Left Chute"
0159+  0106             aud_centercoins		.block	4	;0106-0109	"Coins, Center Chute"
0160+  010A             aud_rightcoins		.block	4	;010A-010D	"Coins, Right Chute"
0161+  010E             aud_paidcredits		.block	4	;010E-0111	Total Paid Credits
0162+  0112             aud_specialcredits	.block	4	;0112-0115	Special Credits
0163+  0116             aud_replaycredits		.block	4	;0116-0119	Replay Score Credits
0164+  011A             aud_matchcredits		.block	4	;011A-011D	Match Credits
0165+  011E             aud_totalcredits		.block	4	;011E-0121	Total Credits
0166+  0122             aud_extraballs		.block	4	;0122-0125	Total Extra Balls *NOT USED IN HYPERBALL*
0167+  0126             aud_avgballtime		.block	4	;0126-0129	Ball Time in Minutes
0168+  012A             aud_totalballs		.block	4	;012A-012D	Total Balls Played
0169+  012E             
0170+  012E             aud_game1			.block	4	;012E-0131	Game Specific Audit#1
0171+  0132             aud_game2			.block	4	;0132-0135	Game Specific Audit#2
0172+  0136             aud_game3			.block	4	;0136-0139	Game Specific Audit#3
0173+  013A             aud_game4			.block	4	;013A-013D	Game Specific Audit#4
0174+  013E             aud_game5			.block	4	;013E-0141	Game Specific Audit#5
0175+  0142             aud_game6			.block	4	;0142-0145	Game Specific Audit#6
0176+  0146             aud_game7			.block	4	;0146-0149	Game Specific Audit#7
0177+  014A             
0178+  014A             aud_autocycles		.block	4	;014A-014D	Number of Auto Cycles Completed
0179+  014E             aud_hstdcredits		.block	2	;014E-014F	2 -HSTD Credits Awarded
0180+  0150             aud_replay1times		.block	4	;0150-0153	2 -Times Exceeded
0181+  0154             aud_replay2times		.block	4	;0154-0157	2 -Times Exceeded
0182+  0158             aud_replay3times		.block	4	;0158-015B	2 -Times Exceeded
0183+  015C             aud_replay4times		.block	4	;015C-015F	2 -Times Exceeded
0184+  0160             				.block	2	;0160-0161	Unknown
0185+  0162             cmos_bonusunits		.block	2	;0162-1063	Hold Over Bonus Coin Units
0186+  0164             cmos_coinunits		.block	2	;0164-0165	Hold Over Total Coin Units
0187+  0166             aud_reset_end					;Defines upper bound of RAM to clear on reset	
0188+  0166             				
0189+  0166             aud_currenthstd		.block	8	;0166-016D	Current HSTD
0190+  016E             aud_currentcredits	.block	2	;016D-016F  Current Credits			
0191+  0170             aud_command			.block	2	;0170-0171	Command Entry
0192+  0172             
0193+  0172             				.block	11
0194+  017D             
0195+  017D             
0196+  017D             
0197+  017D             
0198+  017D             ;* Then adjustments
0199+  017D             adj_base
0200+  017D             adj_cmoscsum			.block	4	;017D-0180	"Game #, ROM Revision"                                     
0201+  0181             adj_backuphstd			.block	2     ;0181-0182	Backup HSTD                                                
0202+  0183             adj_replay1				.block	2     ;0183-0184	Replay 1 Score                                             
0203+  0185             adj_replay2				.block	2     ;0185-0186	Replay 2 Score                                             
0204+  0187             adj_replay3				.block	2     ;0187-0188	Replay 3 Score                                             
0205+  0189             adj_replay4				.block	2     ;0189-018A	Replay 4 Score                                             
0206+  018B             adj_matchenable			.block	2     ;018B-018C	Match: 00=On 01=OFF                                        
0207+  018D             adj_specialaward			.block	2     ;018D-018E	Special:00=Awards Credit 01=Extra Ball 02=Awards Points    
0208+  018F             adj_replayaward			.block	2     ;018F-0190	Replay Scores: 00=Awards Credit 01=Extra Ball              
0209+  0191             adj_maxplumbbobtilts		.block	2     ;0191-0192	Max Plumb Bob Tilts                                        
0210+  0193             adj_energystandard		.block	2     ;0193-0194	Number of Energy Bases to start in standard play                                  
0211+  0195             adj_energyextended		.block	2     ;0195-0196	Number of Energy Bases to start in extended play                                 
0212+  0197             adj_reflex_diff			.block	2     ;0197-0198	Game Specific Adjustment#2 (adj_gameadjust2)                            
0213+  0199             adj_ec_award_level		.block	2     ;0199-019A	Game Specific Adjustment#3 (adj_gameadjust3)                             
0214+  019B             adj_bolt_speed			.block	2     ;019B-019C	Game Specific Adjustment#4 (adj_gameadjust4)                           
0215+  019D             adj_bolt_feed			.block	2     ;019D-019E	Game Specific Adjustment#5 (adj_gameadjust5)                             
0216+  019F             adj_baiter_speed			.block	2     ;019F-01A0	Game Specific Adjustment#6 (adj_gameadjust6)                                 
0217+  01A1             adj_gameadjust7			.block	2     ;01A1-01A2	Game Specific Adjustment#7                                 
0218+  01A3             adj_gameadjust8			.block	2     ;01A3-01A4	Game Specific Adjustment#8                                 
0219+  01A5             adj_gameadjust9			.block	2     ;01A5-01A6	Game Specific Adjustment#9                                 
0220+  01A7             adj_hstdcredits			.block	2     ;01A7-01A8	High Score Credit Award                                    
0221+  01A9             adj_max_extraballs		.block	2     ;01A9-019A	Maximum Extra Balls 00=No Extra Balls                      
0222+  01AB             adj_max_credits			.block	2     ;01AB-01AC	Maximum Credits                                            
0223+  01AD             adj_pricecontrol			.block	2     ;01AD-01AE	Standard/Custom Pricing Control   
0224+  01AF             
0225+  01AF             cmos_pricingbase                         
0226+  01AF             cmos_leftcoinmult			.block	2     ;01AF-01B0	Left Coin Slot Multiplier                                  
0227+  01B1             cmos_centercoinmult		.block	2     ;01B1-01B2	Center Coin Slot Multiplier    
0228+  01B3             cmos_rightcoinmult		.block	2     ;01B3-01B4	Right Coin Slot Multiplier     
0229+  01B5             cmos_coinsforcredit		.block	2     ;01B5-01B6	Coin Units Required for Credit 
0230+  01B7             cmos_bonuscoins			.block	2     ;01B7-01B8	Coin Units Bonus Point         
0231+  01B9             cmos_minimumcoins			.block	2     ;01B9-01BA	Minimum Coin Units             
0232+  01BB             
0233+  01BB             
0234+  01BB             
0235+  01BB             ;***************************************************************
0236+  01BB             ;* Extended RAM area. This RAM space was added in Level 7 games
0237+  01BB             ;* for extended flexibility. The HYPERBALL space is a little
0238+  01BB             ;* different than regular Level 7 games in that the solenoid
0239+  01BB             ;* space is only 8 bytes (instead of 16)
0240+  01BB             ;***************************************************************
0241+  1100             	.org $1100
0242+  1100             
0243+  1100             switch_queue		.block	$18
0244+  1118             switch_queue_end
0245+  1118             
0246+  1118             sol_queue			.block	$10
0247+  1128             sol_queue_end
0248+  1128             
0249+  1128             score_queue			.block	8
0250+  1130             score_queue_end
0251+  1130             
0252+  1130             	.org $1130
0253+  1130             exe_buffer			.block	$10		;Temp code buffer for exe macro
0254+  1140             
0255+  1140             ;define the size of each player data block first
0256+  1140             gamedata_size		.equ		$24
0257+  1140             ;then apply it to all players
0258+  1140             p1_gamedata			.block	gamedata_size
0259+  1164             p2_gamedata			.block	gamedata_size
0260+  1188             
0261+  1188             game_var_0			.block 	2
0262+  118A             game_var_1			.block 	2
0263+  118C             game_var_2			.block 	2
0264+  118E             game_var_3			.block 	2
0265+  1190             game_var_4			.block 	2
0266+  1192             game_var_5			.block 	2
0267+  1194             game_var_6			.block 	2
0268+  1196             game_var_7			.block 	2
0269+  1198             			
0270+  1198             game_var_unknown		.block	2
0271+  119A             				
0272+  119A             current_credits		.block	2
0273+  119C             
0274+  119C             threadpool_base		.block	1
0275+  119D             
0276+  119D              
0277+  1396              	.org $1396
0278+  1396             hy_unknown_1		.block	2
0279+  1398             hy_unknown_2		.block	2
0280+  139A             p1_ecs			.block 	1
0281+  139B             p2_ecs			.block	1
0282+  139C             hy_unknown_3		.block	1
0283+  139D             hy_unknown_4		.block	1
0284+  139E             hy_unknown_5		.block	1
0285+  139F             hy_unknown_6		.block	1
0286+  13A0             hy_unknown_7		.block	1
0287+  13A1             hy_unknown_8		.block	1
0288+  13A2             hy_unknown_9		.block	1
0289+  13A3             hy_unknown_a		.block	1
0290+  13A4             hy_unknown_b		.block	1
0291+  13A5             hy_unknown_c		.block	1
0292+  13A6             hy_unknown_d		.block	1
0293+  13A7             hy_unknown_e		.block	1
0294+  13A8             
0295+  13A8             
0296+  13A8             	
0297+  13A8             
0298+  13A8             ;***************************************************************
0299+  13A8             ;* PIA Input/Output hardware
0300+  13A8             ;***************************************************************
0301+  13A8             ;* Some equates for indexing
0302+  13A8             pia_pir			.equ		0
0303+  13A8             pia_control			.equ		1
0304+  13A8             pia_pir_a			.equ		0
0305+  13A8             pia_control_a		.equ		1
0306+  13A8             pia_pir_b			.equ		2
0307+  13A8             pia_control_b		.equ		3
0308+  13A8             
0309+  13A8             pia_sound_data		.equ		$2100
0310+  13A8             pia_sound_ctrl		.equ		$2101
0311+  13A8             pia_comma_data		.equ		$2102
0312+  13A8             pia_comma_ctrl		.equ		$2103
0313+  13A8             
0314+  13A8             pia_sol_low_data		.equ		$2200
0315+  13A8             pia_sol_low_ctrl		.equ		$2201
0316+  13A8             pia_sol_high_data		.equ		$2202
0317+  13A8             pia_sol_high_ctrl		.equ		$2203
0318+  13A8             
0319+  13A8             pia_lamp_row_data		.equ		$2400
0320+  13A8             pia_lamp_row_ctrl		.equ		$2401
0321+  13A8             pia_lamp_col_data		.equ		$2402
0322+  13A8             pia_lamp_col_ctrl		.equ		$2403
0323+  13A8             
0324+  13A8             pia_disp_digit_data	.equ		$2800
0325+  13A8             pia_disp_digit_ctrl	.equ		$2801
0326+  13A8             pia_disp_seg_data		.equ		$2802
0327+  13A8             pia_disp_seg_ctrl		.equ		$2803
0328+  13A8             
0329+  13A8             pia_switch_return_data	.equ		$3000
0330+  13A8             pia_switch_return_ctrl	.equ		$3001
0331+  13A8             pia_switch_strobe_data	.equ		$3002
0332+  13A8             pia_switch_strobe_ctrl	.equ		$3003
0333+  13A8             
0334+  13A8             ;*******************************************
0335+  13A8             ;* Special PIA for Hyperball Driver Boards *
0336+  13A8             ;* Controls the Alpha-Numeric Display      *
0337+  13A8             ;*******************************************
0338+  13A8             pia_alphanum_digit_data	.equ		$4000
0339+  13A8             pia_alphanum_digit_ctrl	.equ		$4001
0340+  13A8             pia_alphanum_seg_data	.equ		$4002
0341+  13A8             pia_alphanum_seg_ctrl	.equ		$4003
0342+  13A8             
0018   13A8             #include "hy_wvm.asm"		;Virtual Machine Instruction Definitions
0001+  13A8             ;*****************************************************************************
0002+  13A8             ;* Williams Hyperball Virtual Machine Macro Definitions
0003+  13A8             ;*****************************************************************************
0004+  13A8             ;* Code copyright Williams Electronic Games Inc.
0005+  13A8             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  13A8             ;* For use with TASMx Assembler
0007+  13A8             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  13A8             ;* for more information.
0009+  13A8             ;* You may redistribute this file as long as this header remains intact.
0010+  13A8             ;*****************************************************************************
0011+  13A8             
0012+  13A8             .module wml7
0013+  13A8             .msfirst
0014+  13A8             
0015+  13A8             wml1_       .equ  $00
0016+  13A8             wml2_       .equ  $00
0017+  13A8             wml3_       .equ  $00
0018+  13A8             wml4_       .equ  $00
0019+  13A8             wml5_       .equ  $00
0020+  13A8             wml6_       .equ  $00
0021+  13A8             
0022+  13A8             #define     FLAG_WML_IF       $10
0023+  13A8             #define     FLAG_WML_ELSE     $20
0024+  13A8             #define	FLAG_WML_BEGIN 	$40
0025+  13A8             #define     FLAG_WML_EXE      $80
0026+  13A8             
0027+  13A8             ;********************************************************
0028+  13A8             ;* First Define the Thread Structure used in the virtual 
0029+  13A8             ;* machine linked list.
0030+  13A8             ;********************************************************
0031+  13A8             ;* Next:	This is the pointer to the next thread in 
0032+  13A8             ;* 		the linked list. The VM requires this to 
0033+  13A8             ;*		move about the list of threads. This is 
0034+  13A8             ;* 		set by the VM thread handlers and does not
0035+  13A8             ;*          need to be manually fiddled with by the 
0036+  13A8             ;*          game program as it is automatic.
0037+  13A8             ;*
0038+  13A8             ;* Timer:	This is a byte timer (0-255) that holds the 
0039+  13A8             ;*          number of IRQ's counts required before the 
0040+  13A8             ;*          thread is executed. This is set by the 
0041+  13A8             ;*          programmer for delays between executions.	
0042+  13A8             ;*
0043+  13A8             ;* Vars:	When a thread is created, the originating
0044+  13A8             ;*          program may push up to 8 additional bytes
0045+  13A8             ;* 		of data onto the stack which will then be
0046+  13A8             ;*          placed into these 8 byte holders.
0047+  13A8             ;*
0048+  13A8             ;* PC:	This is the address of the program entry 
0049+  13A8             ;*          point that will be executed when the thread
0050+  13A8             ;*       	timer expires.
0051+  13A8             ;*
0052+  13A8             ;* ID:	The thread ID is a number that identifies 
0053+  13A8             ;* 		the thread type. The ID defintions are all
0054+  13A8             ;*		decided by the programmer except for thread
0055+  13A8             ;*		ID #06 which is a general 'end-of-ball' terminated
0056+  13A8             ;*		thread. Because the VM can destroy groups of 
0057+  13A8             ;* 		threads by ID and branch on existence of threads
0058+  13A8             ;*    	with certain ID's, this is a very important
0059+  13A8             ;*		design consideration. See the programming 
0060+  13A8             ;*  		manual for more information.
0061+  13A8             ;*	
0062+  13A8             ;* RegA:	This holds the value that was contained in 
0063+  13A8             ;*		the CPU register A when the Thread was created.
0064+  13A8             ;*
0065+  13A8             ;* RegB:	Similar to above, holds the value of CPU reg B.
0066+  13A8             ;*
0067+  13A8             ;* RegX:	Again, holds the value of the X register upon
0068+  13A8             ;*		thread creation.
0069+  13A8             ;*
0070+  13A8             ;************************************************************
0071+  13A8             
0072+  13A8             threadobj_next	.equ	$00
0073+  13A8             threadobj_timer	.equ	$02
0074+  13A8             threadobj_var1	.equ	$03
0075+  13A8             threadobj_var2	.equ	$04
0076+  13A8             threadobj_var3	.equ	$05
0077+  13A8             threadobj_var4	.equ	$06
0078+  13A8             threadobj_var5	.equ	$07
0079+  13A8             threadobj_var6	.equ	$09
0080+  13A8             threadobj_var7	.equ	$09
0081+  13A8             threadobj_var8	.equ	$0a
0082+  13A8             threadobj_pc	.equ	$0b
0083+  13A8             threadobj_id	.equ	$0d
0084+  13A8             threadobj_rega	.equ	$0e
0085+  13A8             threadobj_regb	.equ	$0f
0086+  13A8             threadobj_regx	.equ	$10
0087+  13A8             
0088+  13A8             ;********************************************************
0089+  13A8             ;* Now define some standard RAM locations etc...
0090+  13A8             ;********************************************************
0091+  13A8             rega	.equ	$00
0092+  13A8             regb	.equ	$01
0093+  13A8             
0094+  13A8             ;********************************************************
0095+  13A8             ;* Switch Table Equates
0096+  13A8             ;********************************************************
0097+  13A8             #define	switchentry(a,b)	.db a /.dw b
0098+  13A8             
0099+  13A8             sf_wml7	.equ	$80
0100+  13A8             sf_code 	.equ 	$00
0101+  13A8             sf_tilt	.equ	$40
0102+  13A8             sf_gameover	.equ	$20
0103+  13A8             sf_enabled	.equ	$10
0104+  13A8             sf_instant	.equ	$08
0105+  13A8             
0106+  13A8             ;********************************************************
0107+  13A8             ;* Test for our current execution mode, CODE or WML7
0108+  13A8             ;* If we think the programmer has their code wrong, 
0109+  13A8             ;* then throw an error.
0110+  13A8             ;********************************************************
0111+  13A8             ;_MODECPU_         .equ  $00
0112+  13A8             ;_MODEWML_         .equ  $80
0113+  13A8             ;_CURRENTMODE_     .equ  _MODECPU_
0114+  13A8             ;
0115+  13A8             ;#define     _SETMODECPU_      \_CURRENTMODE_     .set  _MODECPU_
0116+  13A8             ;#define     _SETMODEWML_      \_CURRENTMODE_     .set  _MODEWML_
0117+  13A8             ;
0118+  13A8             ;#define     _CHECKWML_        \#if _CURRENTMODE_ != _MODEWML_
0119+  13A8             ;#defcont                      \     .error "WML7: Execution mode does not expect WML codes now, are you sure your code is structured properly?"
0120+  13A8             ;#defcont                      \#endif
0121+  13A8             ;
0122+  13A8             ;#define     _CHECKCPU_        \#if _CURRENTMODE_ != _MODECPU_
0123+  13A8             ;#defcont                      \     .error "WML7: Execution mode does not expect CPU codes now, are you sure your code is structured properly?"
0124+  13A8             ;#defcont                      \#endif
0125+  13A8             
0126+  13A8             ;********************************************************
0127+  13A8             ;* Define our Level 7 macros.
0128+  13A8             ;********************************************************
0129+  13A8             
0130+  13A8             #define 	PC100_	\.db $00	
0131+  13A8             #define 	NOP_		\.db $01	
0132+  13A8             #define	MRTS_		\.db $02
0133+  13A8             #define	KILL_		\.db $03	
0134+  13A8             #define 	CPUX_		\.db $04
0135+  13A8             #define	SPEC_		\.db $05	
0136+  13A8             #define	EB_		\.db $06	
0137+  13A8             
0138+  13A8             ;********************************************************
0139+  13A8             ;* Lamp Macro Definition: These take care of turning lamps
0140+  13A8             ;*                        on/off and doing the basic lamp
0141+  13A8             ;*                        effects.
0142+  13A8             ;********************************************************
0143+  13A8             #define	BITX_(x,a)		      \.db x,a
0144+  13A8             #define	BITX_(x,a,b)		\.db x,((a&$7F)+$80),b
0145+  13A8             #define	BITX_(x,a,b,c)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),c
0146+  13A8             #define	BITX_(x,a,b,c,d)	      \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),d
0147+  13A8             #define	BITX_(x,a,b,c,d,e)	\.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),e
0148+  13A8             #define	BITX_(x,a,b,c,d,e,f)    \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),f
0149+  13A8             #define	BITX_(x,a,b,c,d,e,f,g)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),g
0150+  13A8             #define	BITX_(x,a,b,c,d,e,f,g,h)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7f)+$80),h
0151+  13A8             #define	BITX_(x,a,b,c,d,e,f,g,h,i)  \.db x,((a&$7F)+$80),((b&$7F)+$80),((c&$7F)+$80),((d&$7F)+$80),((e&$7F)+$80),((f&$7F)+$80),((g&$7f)+$80),((h&$7f)+$80),i
0152+  13A8             
0153+  13A8             ;*****************************************************************
0154+  13A8             ;* Macros 1X_
0155+  13A8             ;*****************************************************************
0156+  13A8             #define	BITON_(a)		      \BITX_($10,a)
0157+  13A8             #define	BITON_(a,b)		      \BITX_($10,a,b)
0158+  13A8             #define	BITON_(a,b,c)	      \BITX_($10,a,b,c)
0159+  13A8             #define	BITON_(a,b,c,d)	      \BITX_($10,a,b,c,d)
0160+  13A8             #define	BITON_(a,b,c,d,e)	      \BITX_($10,a,b,c,d,e)
0161+  13A8             #define	BITON_(a,b,c,d,e,f)     \BITX_($10,a,b,c,d,e,f)
0162+  13A8             #define	BITON_(a,b,c,d,e,f,g)   \BITX_($10,a,b,c,d,e,f,g)
0163+  13A8             
0164+  13A8             #define	BITOFF_(a)		      \BITX_($11,a)            
0165+  13A8             #define	BITOFF_(a,b)		\BITX_($11,a,b)          
0166+  13A8             #define	BITOFF_(a,b,c)	      \BITX_($11,a,b,c)        
0167+  13A8             #define	BITOFF_(a,b,c,d)	      \BITX_($11,a,b,c,d)      
0168+  13A8             #define	BITOFF_(a,b,c,d,e)	\BITX_($11,a,b,c,d,e)    
0169+  13A8             #define	BITOFF_(a,b,c,d,e,f)    \BITX_($11,a,b,c,d,e,f)  
0170+  13A8             #define	BITOFF_(a,b,c,d,e,f,g)  \BITX_($11,a,b,c,d,e,f,g)
0171+  13A8                                                 
0172+  13A8             #define	BITINV_(a)		      \BITX_($12,a)            
0173+  13A8             #define	BITINV_(a,b)		\BITX_($12,a,b)          
0174+  13A8             #define	BITINV_(a,b,c)	      \BITX_($12,a,b,c)        
0175+  13A8             #define	BITINV_(a,b,c,d)	      \BITX_($12,a,b,c,d)      
0176+  13A8             #define	BITINV_(a,b,c,d,e)	\BITX_($12,a,b,c,d,e)    
0177+  13A8             #define	BITINV_(a,b,c,d,e,f)    \BITX_($12,a,b,c,d,e,f)  
0178+  13A8             #define	BITINV_(a,b,c,d,e,f,g)  \BITX_($12,a,b,c,d,e,f,g)
0179+  13A8             
0180+  13A8             #define	BITFL_(a)		      \BITX_($13,a)            
0181+  13A8             #define	BITFL_(a,b)			\BITX_($13,a,b)          
0182+  13A8             #define	BITFL_(a,b,c)	      \BITX_($13,a,b,c)        
0183+  13A8             #define	BITFL_(a,b,c,d)	      \BITX_($13,a,b,c,d)      
0184+  13A8             #define	BITFL_(a,b,c,d,e)		\BITX_($13,a,b,c,d,e)    
0185+  13A8             #define	BITFL_(a,b,c,d,e,f)    	\BITX_($13,a,b,c,d,e,f)  
0186+  13A8             #define	BITFL_(a,b,c,d,e,f,g)  	\BITX_($13,a,b,c,d,e,f,g)
0187+  13A8              
0188+  13A8             #define	BITONP_(a)		      \BITX_($14,a)            
0189+  13A8             #define	BITONP_(a,b)		\BITX_($14,a,b)          
0190+  13A8             #define	BITONP_(a,b,c)	      \BITX_($14,a,b,c)        
0191+  13A8             #define	BITONP_(a,b,c,d)	      \BITX_($14,a,b,c,d)      
0192+  13A8             #define	BITONP_(a,b,c,d,e)	\BITX_($14,a,b,c,d,e)    
0193+  13A8             #define	BITONP_(a,b,c,d,e,f)    \BITX_($14,a,b,c,d,e,f)  
0194+  13A8             #define	BITONP_(a,b,c,d,e,f,g)  \BITX_($14,a,b,c,d,e,f,g)
0195+  13A8             
0196+  13A8             #define	BITOFFP_(a)		      \BITX_($15,a)            
0197+  13A8             #define	BITOFFP_(a,b)		\BITX_($15,a,b)          
0198+  13A8             #define	BITOFFP_(a,b,c)	      \BITX_($15,a,b,c)        
0199+  13A8             #define	BITOFFP_(a,b,c,d)	      \BITX_($15,a,b,c,d)      
0200+  13A8             #define	BITOFFP_(a,b,c,d,e)	\BITX_($15,a,b,c,d,e)    
0201+  13A8             #define	BITOFFP_(a,b,c,d,e,f)   \BITX_($15,a,b,c,d,e,f)  
0202+  13A8             #define	BITOFFP_(a,b,c,d,e,f,g) \BITX_($15,a,b,c,d,e,f,g)
0203+  13A8             
0204+  13A8             #define	BITINVP_(a)		      \BITX_($16,a)            
0205+  13A8             #define	BITINVP_(a,b)		\BITX_($16,a,b)          
0206+  13A8             #define	BITINVP_(a,b,c)	      \BITX_($16,a,b,c)        
0207+  13A8             #define	BITINVP_(a,b,c,d)	      \BITX_($16,a,b,c,d)      
0208+  13A8             #define	BITINVP_(a,b,c,d,e)	\BITX_($16,a,b,c,d,e)    
0209+  13A8             #define	BITINVP_(a,b,c,d,e,f)   \BITX_($16,a,b,c,d,e,f)  
0210+  13A8             #define	BITINVP_(a,b,c,d,e,f,g) \BITX_($16,a,b,c,d,e,f,g)
0211+  13A8             
0212+  13A8             #define	BITFLP_(a)		      \BITX_($17,a)            
0213+  13A8             #define	BITFLP_(a,b)		\BITX_($17,a,b)          
0214+  13A8             #define	BITFLP_(a,b,c)	      \BITX_($17,a,b,c)        
0215+  13A8             #define	BITFLP_(a,b,c,d)	      \BITX_($17,a,b,c,d)      
0216+  13A8             #define	BITFLP_(a,b,c,d,e)	\BITX_($17,a,b,c,d,e)    
0217+  13A8             #define	BITFLP_(a,b,c,d,e,f)   	\BITX_($17,a,b,c,d,e,f)  
0218+  13A8             #define	BITFLP_(a,b,c,d,e,f,g) 	\BITX_($17,a,b,c,d,e,f,g)
0219+  13A8             
0220+  13A8             ;************************
0221+  13A8             ;* Lamp/Bit Effects
0222+  13A8             ;************************
0223+  13A8             #define	RSET0_(a)		      \BITX_($18,a)            
0224+  13A8             #define	RSET0_(a,b)			\BITX_($18,a,b)          
0225+  13A8             #define	RSET0_(a,b,c)	      \BITX_($18,a,b,c)        
0226+  13A8             #define	RSET0_(a,b,c,d)	      \BITX_($18,a,b,c,d)      
0227+  13A8             #define	RSET0_(a,b,c,d,e)		\BITX_($18,a,b,c,d,e)    
0228+  13A8             #define	RSET0_(a,b,c,d,e,f)   	\BITX_($18,a,b,c,d,e,f)  
0229+  13A8             #define	RSET0_(a,b,c,d,e,f,g) 	\BITX_($18,a,b,c,d,e,f,g)
0230+  13A8             
0231+  13A8             #define	RCLR0_(a)		      \BITX_($19,a)            
0232+  13A8             #define	RCLR0_(a,b)			\BITX_($19,a,b)          
0233+  13A8             #define	RCLR0_(a,b,c)	      \BITX_($19,a,b,c)        
0234+  13A8             #define	RCLR0_(a,b,c,d)	      \BITX_($19,a,b,c,d)      
0235+  13A8             #define	RCLR0_(a,b,c,d,e)		\BITX_($19,a,b,c,d,e)    
0236+  13A8             #define	RCLR0_(a,b,c,d,e,f)   	\BITX_($19,a,b,c,d,e,f)  
0237+  13A8             #define	RCLR0_(a,b,c,d,e,f,g) 	\BITX_($19,a,b,c,d,e,f,g)
0238+  13A8             
0239+  13A8             #define	RSET1R0_(a)		      \BITX_($1A,a)            
0240+  13A8             #define	RSET1R0_(a,b)		\BITX_($1A,a,b)          
0241+  13A8             #define	RSET1R0_(a,b,c)	      \BITX_($1A,a,b,c)        
0242+  13A8             #define	RSET1R0_(a,b,c,d)	      \BITX_($1A,a,b,c,d)      
0243+  13A8             #define	RSET1R0_(a,b,c,d,e)	\BITX_($1A,a,b,c,d,e)    
0244+  13A8             #define	RSET1R0_(a,b,c,d,e,f)   \BITX_($1A,a,b,c,d,e,f)  
0245+  13A8             #define	RSET1R0_(a,b,c,d,e,f,g) \BITX_($1A,a,b,c,d,e,f,g)
0246+  13A8             
0247+  13A8             #define	RSET1RC0_(a)		\BITX_($1B,a)            
0248+  13A8             #define	RSET1RC0_(a,b)		\BITX_($1B,a,b)          
0249+  13A8             #define	RSET1RC0_(a,b,c)	      \BITX_($1B,a,b,c)        
0250+  13A8             #define	RSET1RC0_(a,b,c,d)	\BITX_($1B,a,b,c,d)      
0251+  13A8             #define	RSET1RC0_(a,b,c,d,e)	\BITX_($1B,a,b,c,d,e)    
0252+  13A8             #define	RSET1RC0_(a,b,c,d,e,f)  \BITX_($1B,a,b,c,d,e,f)  
0253+  13A8             #define	RSET1RC0_(a,b,c,d,e,f,g) \BITX_($1B,a,b,c,d,e,f,g)
0254+  13A8             
0255+  13A8             #define	RCLR1L0_(a)		      \BITX_($1C,a)            
0256+  13A8             #define	RCLR1L0_(a,b)		\BITX_($1C,a,b)          
0257+  13A8             #define	RCLR1L0_(a,b,c)	      \BITX_($1C,a,b,c)        
0258+  13A8             #define	RCLR1L0_(a,b,c,d)	      \BITX_($1C,a,b,c,d)      
0259+  13A8             #define	RCLR1L0_(a,b,c,d,e)	\BITX_($1C,a,b,c,d,e)    
0260+  13A8             #define	RCLR1L0_(a,b,c,d,e,f)   \BITX_($1C,a,b,c,d,e,f)  
0261+  13A8             #define	RCLR1L0_(a,b,c,d,e,f,g) \BITX_($1C,a,b,c,d,e,f,g)
0262+  13A8             
0263+  13A8             #define	RROL0_(a)		      \BITX_($1D,a)            
0264+  13A8             #define	RROL0_(a,b)			\BITX_($1D,a,b)          
0265+  13A8             #define	RROL0_(a,b,c)	      \BITX_($1D,a,b,c)        
0266+  13A8             #define	RROL0_(a,b,c,d)	      \BITX_($1D,a,b,c,d)      
0267+  13A8             #define	RROL0_(a,b,c,d,e)		\BITX_($1D,a,b,c,d,e)    
0268+  13A8             #define	RROL0_(a,b,c,d,e,f)   	\BITX_($1D,a,b,c,d,e,f)  
0269+  13A8             #define	RROL0_(a,b,c,d,e,f,g) 	\BITX_($1D,a,b,c,d,e,f,g)
0270+  13A8             #define	RROL0_(a,b,c,d,e,f,g,h,i) 	\BITX_($1D,a,b,c,d,e,f,g,h,i)
0271+  13A8             
0272+  13A8             #define	RROR0_(a)		      \BITX_($1E,a)            
0273+  13A8             #define	RROR0_(a,b)			\BITX_($1E,a,b)          
0274+  13A8             #define	RROR0_(a,b,c)	      \BITX_($1E,a,b,c)        
0275+  13A8             #define	RROR0_(a,b,c,d)	      \BITX_($1E,a,b,c,d)      
0276+  13A8             #define	RROR0_(a,b,c,d,e)		\BITX_($1E,a,b,c,d,e)    
0277+  13A8             #define	RROR0_(a,b,c,d,e,f)   	\BITX_($1E,a,b,c,d,e,f)  
0278+  13A8             #define	RROR0_(a,b,c,d,e,f,g) 	\BITX_($1E,a,b,c,d,e,f,g)
0279+  13A8             
0280+  13A8             #define	RINV0_(a)		      \BITX_($1F,a)            
0281+  13A8             #define	RINV0_(a,b)			\BITX_($1F,a,b)          
0282+  13A8             #define	RINV0_(a,b,c)	      \BITX_($1F,a,b,c)        
0283+  13A8             #define	RINV0_(a,b,c,d)	      \BITX_($1F,a,b,c,d)      
0284+  13A8             #define	RINV0_(a,b,c,d,e)		\BITX_($1F,a,b,c,d,e)    
0285+  13A8             #define	RINV0_(a,b,c,d,e,f)   	\BITX_($1F,a,b,c,d,e,f)  
0286+  13A8             #define	RINV0_(a,b,c,d,e,f,g) 	\BITX_($1F,a,b,c,d,e,f,g)
0287+  13A8             
0288+  13A8             ;*****************************************************************
0289+  13A8             ;* Macros 2X_
0290+  13A8             ;*****************************************************************
0291+  13A8             
0292+  13A8             #define	BITON2_(a)		      	\BITX_($20,a)
0293+  13A8             #define	BITON2_(a,b)			\BITX_($20,a,b)
0294+  13A8             #define	BITON2_(a,b,c)	      	\BITX_($20,a,b,c)
0295+  13A8             #define	BITON2_(a,b,c,d)	      	\BITX_($20,a,b,c,d)
0296+  13A8             #define	BITON2_(a,b,c,d,e)		\BITX_($20,a,b,c,d,e)
0297+  13A8             #define	BITON2_(a,b,c,d,e,f)    	\BITX_($20,a,b,c,d,e,f)
0298+  13A8             #define	BITON2_(a,b,c,d,e,f,g)  	\BITX_($20,a,b,c,d,e,f,g)
0299+  13A8             
0300+  13A8             #define	BITOFF2_(a)		      	\BITX_($21,a)            
0301+  13A8             #define	BITOFF2_(a,b)			\BITX_($21,a,b)          
0302+  13A8             #define	BITOFF2_(a,b,c)	      	\BITX_($21,a,b,c)        
0303+  13A8             #define	BITOFF2_(a,b,c,d)	      	\BITX_($21,a,b,c,d)      
0304+  13A8             #define	BITOFF2_(a,b,c,d,e)		\BITX_($21,a,b,c,d,e)    
0305+  13A8             #define	BITOFF2_(a,b,c,d,e,f)   	\BITX_($21,a,b,c,d,e,f)  
0306+  13A8             #define	BITOFF2_(a,b,c,d,e,f,g) 	\BITX_($21,a,b,c,d,e,f,g)
0307+  13A8                                                 
0308+  13A8             #define	BITINV2_(a)		      	\BITX_($22,a)            
0309+  13A8             #define	BITINV2_(a,b)			\BITX_($22,a,b)          
0310+  13A8             #define	BITINV2_(a,b,c)	      	\BITX_($22,a,b,c)        
0311+  13A8             #define	BITINV2_(a,b,c,d)	      	\BITX_($22,a,b,c,d)      
0312+  13A8             #define	BITINV2_(a,b,c,d,e)		\BITX_($22,a,b,c,d,e)    
0313+  13A8             #define	BITINV2_(a,b,c,d,e,f)   	\BITX_($22,a,b,c,d,e,f)  
0314+  13A8             #define	BITINV2_(a,b,c,d,e,f,g) 	\BITX_($22,a,b,c,d,e,f,g)
0315+  13A8             
0316+  13A8             #define	BITFL2_(a)		      	\BITX_($23,a)            
0317+  13A8             #define	BITFL2_(a,b)			\BITX_($23,a,b)          
0318+  13A8             #define	BITFL2_(a,b,c)	      	\BITX_($23,a,b,c)        
0319+  13A8             #define	BITFL2_(a,b,c,d)	      	\BITX_($23,a,b,c,d)      
0320+  13A8             #define	BITFL2_(a,b,c,d,e)		\BITX_($23,a,b,c,d,e)    
0321+  13A8             #define	BITFL2_(a,b,c,d,e,f)    	\BITX_($23,a,b,c,d,e,f)  
0322+  13A8             #define	BITFL2_(a,b,c,d,e,f,g)  	\BITX_($23,a,b,c,d,e,f,g)
0323+  13A8              
0324+  13A8             #define	BITONP2_(a)		      	\BITX_($24,a)            
0325+  13A8             #define	BITONP2_(a,b)			\BITX_($24,a,b)          
0326+  13A8             #define	BITONP2_(a,b,c)	      	\BITX_($24,a,b,c)        
0327+  13A8             #define	BITONP2_(a,b,c,d)	      	\BITX_($24,a,b,c,d)      
0328+  13A8             #define	BITONP2_(a,b,c,d,e)		\BITX_($24,a,b,c,d,e)    
0329+  13A8             #define	BITONP2_(a,b,c,d,e,f)   	\BITX_($24,a,b,c,d,e,f)  
0330+  13A8             #define	BITONP2_(a,b,c,d,e,f,g) 	\BITX_($24,a,b,c,d,e,f,g)
0331+  13A8             
0332+  13A8             #define	BITOFFP2_(a)			\BITX_($25,a)            
0333+  13A8             #define	BITOFFP2_(a,b)			\BITX_($25,a,b)          
0334+  13A8             #define	BITOFFP2_(a,b,c)	      	\BITX_($25,a,b,c)        
0335+  13A8             #define	BITOFFP2_(a,b,c,d)		\BITX_($25,a,b,c,d)      
0336+  13A8             #define	BITOFFP2_(a,b,c,d,e)		\BITX_($25,a,b,c,d,e)    
0337+  13A8             #define	BITOFFP2_(a,b,c,d,e,f)  	\BITX_($25,a,b,c,d,e,f)  
0338+  13A8             #define	BITOFFP2_(a,b,c,d,e,f,g)	\BITX_($25,a,b,c,d,e,f,g)
0339+  13A8             
0340+  13A8             #define	BITINVP2_(a)			\BITX_($26,a)            
0341+  13A8             #define	BITINVP2_(a,b)			\BITX_($26,a,b)          
0342+  13A8             #define	BITINVP2_(a,b,c)	      	\BITX_($26,a,b,c)        
0343+  13A8             #define	BITINVP2_(a,b,c,d)		\BITX_($26,a,b,c,d)      
0344+  13A8             #define	BITINVP2_(a,b,c,d,e)		\BITX_($26,a,b,c,d,e)    
0345+  13A8             #define	BITINVP2_(a,b,c,d,e,f)   	\BITX_($26,a,b,c,d,e,f)  
0346+  13A8             #define	BITINVP2_(a,b,c,d,e,f,g) 	\BITX_($26,a,b,c,d,e,f,g)
0347+  13A8             
0348+  13A8             #define	BITFLP2_(a)		      	\BITX_($27,a)            
0349+  13A8             #define	BITFLP2_(a,b)			\BITX_($27,a,b)          
0350+  13A8             #define	BITFLP2_(a,b,c)	      	\BITX_($27,a,b,c)        
0351+  13A8             #define	BITFLP2_(a,b,c,d)	      	\BITX_($27,a,b,c,d)      
0352+  13A8             #define	BITFLP2_(a,b,c,d,e)		\BITX_($27,a,b,c,d,e)    
0353+  13A8             #define	BITFLP2_(a,b,c,d,e,f)   	\BITX_($27,a,b,c,d,e,f)  
0354+  13A8             #define	BITFLP2_(a,b,c,d,e,f,g) 	\BITX_($27,a,b,c,d,e,f,g)
0355+  13A8             
0356+  13A8             ;************************
0357+  13A8             ;* Lamp/Bit Effects
0358+  13A8             ;************************
0359+  13A8             #define	RSET1_(a)		      \BITX_($28,a)            
0360+  13A8             #define	RSET1_(a,b)			\BITX_($28,a,b)          
0361+  13A8             #define	RSET1_(a,b,c)	      \BITX_($28,a,b,c)        
0362+  13A8             #define	RSET1_(a,b,c,d)	      \BITX_($28,a,b,c,d)      
0363+  13A8             #define	RSET1_(a,b,c,d,e)		\BITX_($28,a,b,c,d,e)    
0364+  13A8             #define	RSET1_(a,b,c,d,e,f)   	\BITX_($28,a,b,c,d,e,f)  
0365+  13A8             #define	RSET1_(a,b,c,d,e,f,g) 	\BITX_($28,a,b,c,d,e,f,g)
0366+  13A8             
0367+  13A8             #define	RCLR1_(a)		      \BITX_($29,a)            
0368+  13A8             #define	RCLR1_(a,b)			\BITX_($29,a,b)          
0369+  13A8             #define	RCLR1_(a,b,c)	      \BITX_($29,a,b,c)        
0370+  13A8             #define	RCLR1_(a,b,c,d)	      \BITX_($29,a,b,c,d)      
0371+  13A8             #define	RCLR1_(a,b,c,d,e)		\BITX_($29,a,b,c,d,e)    
0372+  13A8             #define	RCLR1_(a,b,c,d,e,f)   	\BITX_($29,a,b,c,d,e,f)  
0373+  13A8             #define	RCLR1_(a,b,c,d,e,f,g) 	\BITX_($29,a,b,c,d,e,f,g)
0374+  13A8             
0375+  13A8             #define	RSET1R1_(a)		      \BITX_($2A,a)            
0376+  13A8             #define	RSET1R1_(a,b)		\BITX_($2A,a,b)          
0377+  13A8             #define	RSET1R1_(a,b,c)	      \BITX_($2A,a,b,c)        
0378+  13A8             #define	RSET1R1_(a,b,c,d)	      \BITX_($2A,a,b,c,d)      
0379+  13A8             #define	RSET1R1_(a,b,c,d,e)	\BITX_($2A,a,b,c,d,e)    
0380+  13A8             #define	RSET1R1_(a,b,c,d,e,f)   \BITX_($2A,a,b,c,d,e,f)  
0381+  13A8             #define	RSET1R1_(a,b,c,d,e,f,g) \BITX_($2A,a,b,c,d,e,f,g)
0382+  13A8             
0383+  13A8             #define	RSET1RC1_(a)		\BITX_($2B,a)            
0384+  13A8             #define	RSET1RC1_(a,b)		\BITX_($2B,a,b)          
0385+  13A8             #define	RSET1RC1_(a,b,c)	      \BITX_($2B,a,b,c)        
0386+  13A8             #define	RSET1RC1_(a,b,c,d)	\BITX_($2B,a,b,c,d)      
0387+  13A8             #define	RSET1RC1_(a,b,c,d,e)	\BITX_($2B,a,b,c,d,e)    
0388+  13A8             #define	RSET1RC1_(a,b,c,d,e,f)  \BITX_($2B,a,b,c,d,e,f)  
0389+  13A8             #define	RSET1RC1_(a,b,c,d,e,f,g) \BITX_($2B,a,b,c,d,e,f,g)
0390+  13A8             
0391+  13A8             #define	RCLR1L1_(a)		      \BITX_($2C,a)            
0392+  13A8             #define	RCLR1L1_(a,b)		\BITX_($2C,a,b)          
0393+  13A8             #define	RCLR1L1_(a,b,c)	      \BITX_($2C,a,b,c)        
0394+  13A8             #define	RCLR1L1_(a,b,c,d)	      \BITX_($2C,a,b,c,d)      
0395+  13A8             #define	RCLR1L1_(a,b,c,d,e)	\BITX_($2C,a,b,c,d,e)    
0396+  13A8             #define	RCLR1L1_(a,b,c,d,e,f)   \BITX_($2C,a,b,c,d,e,f)  
0397+  13A8             #define	RCLR1L1_(a,b,c,d,e,f,g) \BITX_($2C,a,b,c,d,e,f,g)
0398+  13A8             
0399+  13A8             #define	RROL1_(a)		      \BITX_($2D,a)            
0400+  13A8             #define	RROL1_(a,b)			\BITX_($2D,a,b)          
0401+  13A8             #define	RROL1_(a,b,c)	      \BITX_($2D,a,b,c)        
0402+  13A8             #define	RROL1_(a,b,c,d)	      \BITX_($2D,a,b,c,d)      
0403+  13A8             #define	RROL1_(a,b,c,d,e)		\BITX_($2D,a,b,c,d,e)    
0404+  13A8             #define	RROL1_(a,b,c,d,e,f)   	\BITX_($2D,a,b,c,d,e,f)  
0405+  13A8             #define	RROL1_(a,b,c,d,e,f,g) 	\BITX_($2D,a,b,c,d,e,f,g)
0406+  13A8             
0407+  13A8             #define	RROR1_(a)		      \BITX_($2E,a)            
0408+  13A8             #define	RROR1_(a,b)			\BITX_($2E,a,b)          
0409+  13A8             #define	RROR1_(a,b,c)	      \BITX_($2E,a,b,c)        
0410+  13A8             #define	RROR1_(a,b,c,d)	      \BITX_($2E,a,b,c,d)      
0411+  13A8             #define	RROR1_(a,b,c,d,e)		\BITX_($2E,a,b,c,d,e)    
0412+  13A8             #define	RROR1_(a,b,c,d,e,f)   	\BITX_($2E,a,b,c,d,e,f)  
0413+  13A8             #define	RROR1_(a,b,c,d,e,f,g) 	\BITX_($2E,a,b,c,d,e,f,g)
0414+  13A8             
0415+  13A8             #define	RINV1_(a)		      \BITX_($2F,a)            
0416+  13A8             #define	RINV1_(a,b)			\BITX_($2F,a,b)          
0417+  13A8             #define	RINV1_(a,b,c)	      \BITX_($2F,a,b,c)        
0418+  13A8             #define	RINV1_(a,b,c,d)	      \BITX_($2F,a,b,c,d)      
0419+  13A8             #define	RINV1_(a,b,c,d,e)		\BITX_($2F,a,b,c,d,e)    
0420+  13A8             #define	RINV1_(a,b,c,d,e,f)   	\BITX_($2F,a,b,c,d,e,f)  
0421+  13A8             #define	RINV1_(a,b,c,d,e,f,g) 	\BITX_($2F,a,b,c,d,e,f,g)
0422+  13A8             
0423+  13A8             
0424+  13A8             ;********************************************************
0425+  13A8             ;* Solenoid Macro Definition: Up to 15 Solenoids are Supported
0426+  13A8             ;* 
0427+  13A8             ;* The macro takes a coded value of the solenoid number 
0428+  13A8             ;* and the number of IRQ's to leave the solenoid on.
0429+  13A8             ;* You can define the solenoid number plus the time by using
0430+  13A8             ;* the equates following this macro definition...
0431+  13A8             ;* 
0432+  13A8             ;* Example #1:  Turn on Solenoid #1 for 4 IRQ cycles
0433+  13A8             ;*
0434+  13A8             ;*          sol_1_on    .equ  $00+SOLENOID_ON_4_CYCLES
0435+  13A8             ;*          sol_1_off   .equ  $00+SOLENOID_OFF
0436+  13A8             ;* 
0437+  13A8             ;* Then use the SOL_ macro...
0438+  13A8             ;*
0439+  13A8             ;*    Turn it on:       SOL_(sol_1_on)
0440+  13A8             ;*    Turn it off:      SOL_(sol_1_off)
0441+  13A8             ;*
0442+  13A8             ;* Example #2:  Turn on Solenoid #15 indefinitely, and Solenoid #6 for 2 IRQ cycles
0443+  13A8             ;*
0444+  13A8             ;*          sol_15_on   .equ  $0E+SOLENOID_ON_LATCH
0445+  13A8             ;*          sol_15_off  .equ  $0E+SOLENOID_OFF
0446+  13A8             ;*
0447+  13A8             ;*          sol_2_on    .equ  $01+SOLENOID_ON_2_CYCLES
0448+  13A8             ;*          sol_2_off   .equ  $01+SOLENOID_OFF
0449+  13A8             ;* 
0450+  13A8             ;* Then use the SOL_ macro...
0451+  13A8             ;*
0452+  13A8             ;*    Turn them on:       SOL_(sol_15_on,sol_2_on)
0453+  13A8             ;*    Turn them off:      SOL_(sol_15_off,sol_2_off)
0454+  13A8             ;********************************************************
0455+  13A8             #define	SOL_(a)		                  \.db $31,a
0456+  13A8             #define	SOL_(a,b)		                  \.db $32,a,b
0457+  13A8             #define 	SOL_(a,b,c)		                  \.db $33,a,b,c
0458+  13A8             #define	SOL_(a,b,c,d)	                  \.db $34,a,b,c,d
0459+  13A8             #define	SOL_(a,b,c,d,e)	                  \.db $35,a,b,c,d,e
0460+  13A8             #define	SOL_(a,b,c,d,e,f)	                  \.db $36,a,b,c,d,e,f
0461+  13A8             #define	SOL_(a,b,c,d,e,f,g)	            \.db $37,a,b,c,d,e,f,g
0462+  13A8             #define	SOL_(a,b,c,d,e,f,g,h)	            \.db $38,a,b,c,d,e,f,g,h
0463+  13A8             #define	SOL_(a,b,c,d,e,f,g,h,i)	            \.db $39,a,b,c,d,e,f,g,h,i
0464+  13A8             #define	SOL_(a,b,c,d,e,f,g,h,i,j)	      \.db $3A,a,b,c,d,e,f,g,h,i,j
0465+  13A8             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k)	      \.db $3B,a,b,c,d,e,f,g,h,i,j,k
0466+  13A8             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l)	      \.db $3C,a,b,c,d,e,f,g,h,i,j,k,l
0467+  13A8             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m)	\.db $3D,a,b,c,d,e,f,g,h,i,j,k,l,m
0468+  13A8             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n)	\.db $3E,a,b,c,d,e,f,g,h,i,j,k,l,m,n
0469+  13A8             #define	SOL_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)	\.db $3F,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o
0470+  13A8             
0471+  13A8             ;********************************************************
0472+  13A8             ;* some additional solenoid defines for timing
0473+  13A8             ;* Use these in the top of your game definition to specify 
0474+  13A8             ;* static lables for each solenoid
0475+  13A8             ;********************************************************
0476+  13A8             SOLENOID_ON_1_CYCLES       .equ  $10
0477+  13A8             SOLENOID_ON_2_CYCLES       .equ  $20
0478+  13A8             SOLENOID_ON_3_CYCLES       .equ  $30
0479+  13A8             SOLENOID_ON_4_CYCLES       .equ  $40
0480+  13A8             SOLENOID_ON_5_CYCLES       .equ  $50
0481+  13A8             SOLENOID_ON_6_CYCLES       .equ  $60
0482+  13A8             SOLENOID_ON_LATCH          .equ  $70
0483+  13A8             SOLENOID_OFF               .equ  $00
0484+  13A8             
0485+  13A8             ;********************************************************
0486+  13A8             ;* Macros 40-43: Static Length, easy
0487+  13A8             ;********************************************************
0488+  13A8             #define	PTSND_(snd,count,unit)	\.db $40,snd      \ ADDPOINTS_(count,unit)
0489+  13A8             
0490+  13A8             #define	PTCHIME_(count,unit)	\.db $41    \ ADDPOINTS_(count,unit)
0491+  13A8             
0492+  13A8             #define	POINTS_(count,unit)	\.db $42    \ ADDPOINTS_(count,unit)
0493+  13A8             
0494+  13A8             #define	PTSDIG_(count,unit)	\.db $43    \ ADDPOINTS_(count,unit)
0495+  13A8             
0496+  13A8             #define     ADDPOINTS_(count,unit)  \#if ((unit < 10) & (count <= 32))
0497+  13A8             #defcont				      \	.error "Point unit must be multples of 10 and count must be less than 33"
0498+  13A8             #defcont				      \#else
0499+  13A8             #defcont					      \#if (unit == 10)
0500+  13A8             #defcont					      \	.db (((count)<<3)&$F8)+1
0501+  13A8             #defcont					      \#else 
0502+  13A8             #defcont					      	\#if (unit == 100)
0503+  13A8             #defcont						      \	.db (((count)<<3)&$F8)+2
0504+  13A8             #defcont						      \#else 
0505+  13A8             #defcont							      \#if (unit == 1000)
0506+  13A8             #defcont							      \	.db (((count)<<3)&$F8)+3
0507+  13A8             #defcont							      \#else 
0508+  13A8             #defcont								      \#if (unit == 10000)
0509+  13A8             #defcont								      \	.db (((count)<<3)&$F8)+4
0510+  13A8             #defcont								      \#else 
0511+  13A8             #defcont									      \#if (unit == 100000)
0512+  13A8             #defcont									      \	.db (((count)<<3)&$F8)+5
0513+  13A8             #defcont									      \#else 
0514+  13A8             #defcont									      \	.error "Macros only support points under 1,000,000 points"
0515+  13A8             #defcont									      \#endif
0516+  13A8             #defcont								      \#endif
0517+  13A8             #defcont							      \#endif
0518+  13A8             #defcont						      \#endif
0519+  13A8             #defcont					      \#endif
0520+  13A8             #defcont				      \#endif
0521+  13A8             
0522+  13A8             ;********************************************************
0523+  13A8             ;* Macros 44-4F: Define temporary execution of CPU code.
0524+  13A8             ;*               The length of bytes to execute is in 
0525+  13A8             ;*               the lower nibble and must be between
0526+  13A8             ;*               4-f. Therefore, number is bytes to 
0527+  13A8             ;*               execute must be between 2 and 13.
0528+  13A8             ;********************************************************
0529+  13A8             #define	EXE_(a)		\#if (a>13)|(a<2)
0530+  13A8             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0531+  13A8             #defcont				\#else
0532+  13A8             #defcont				\    .db ($44+a-2)
0533+  13A8             #defcont				\#endif
0534+  13A8             
0535+  13A8             ;********************************************************
0536+  13A8             ;* Macros 50-57:
0537+  13A8             ;********************************************************
0538+  13A8             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0539+  13A8             #defcont				\	.db $50,((a*16)+b) 
0540+  13A8             #defcont				\#else
0541+  13A8             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0542+  13A8             #defcont				\#endif
0543+  13A8             
0544+  13A8             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0545+  13A8             #defcont				\	.db $51,((a*16)+b) 
0546+  13A8             #defcont				\#else
0547+  13A8             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0548+  13A8             #defcont				\#endif
0549+  13A8             
0550+  13A8             #define	PRI_(a)		\.db $52,a
0551+  13A8             
0552+  13A8             #define	SLEEP_(a)		\#if (a<16)
0553+  13A8             #defcont				\	.db ($70+a)
0554+  13A8             #defcont				\#else
0555+  13A8             #defcont				\	.db $53,a
0556+  13A8             #defcont				\#endif
0557+  13A8             
0558+  13A8             #define	REMTHREAD_(a,b)	\.db $54,a,b
0559+  13A8             
0560+  13A8             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0561+  13A8             
0562+  13A8             #define 	JSR_(a)		\.db $56 \.dw a
0563+  13A8             #define	JSRD_(a)		\.db $57 \.dw a
0564+  13A8             
0565+  13A8             ;*******************************************************************
0566+  13A8             ;* Branch Macros: 58-5B
0567+  13A8             ;*******************************************************************
0568+  13A8             #define     IFLOC_(type,vars)    \ .push  *, vars, type        
0569+  13A8             
0570+  13A8             ;*******************************************************************
0571+  13A8             ;* Begin: The start marker for logical loops, must terminate with  *
0572+  13A8             ;*        an 'XXEND_' statement.                                    *
0573+  13A8             ;******************************************************************* 
0574+  13A8             #define     BEGIN_	      IFLOC_(FLAG_WML_BEGIN,0)
0575+  13A8             
0576+  13A8             ;*******************************************************************
0577+  13A8             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0578+  13A8             ;*            pulls the pc location of the beginning of the loop   *
0579+  13A8             ;*            and verifies that the 'type' is correct.             *
0580+  13A8             ;*******************************************************************
0581+  13A8             #define 	LOGIC_LOOPEND_(vars)	\ .pop wml1_, wml2_, wml3_
0582+  13A8             #defcont						\wml2_ .set vars
0583+  13A8             #defcont						\wml4_ .set *
0584+  13A8             #defcont						\#if (wml1_ & FLAG_WML_BEGIN)
0585+  13A8             #defcont							\#if ((wml4_-wml3_) <= 127)
0586+  13A8             #defcont								\ .org wml4_-1
0587+  13A8             #defcont								\ .db wml3_-wml4_
0588+  13A8             #defcont								\ .org wml4_
0589+  13A8             #defcont							\#else
0590+  13A8             #defcont								\ .error "Loop Branch out of Range."
0591+  13A8             #defcont							\#endif
0592+  13A8             #defcont						\#else
0593+  13A8             #defcont							\ .error "Inappropriate End for BEGIN Loop."
0594+  13A8             #defcont						\#endif
0595+  13A8             
0596+  13A8             ;*******************************************************************
0597+  13A8             ;* Basic Loop
0598+  13A8             ;*******************************************************************
0599+  13A8             #define	LOOP_		\ .pop wml1_, wml2_, wml3_ \ JMPR_(wml3_)
0600+  13A8             
0601+  13A8             ;*******************************************************************
0602+  13A8             ;* Conditional Looping
0603+  13A8             ;*******************************************************************
0604+  13A8             #define	EQEND_(z)						BNER_(z,*+3) \ LOGIC_LOOPEND_(1)		
0605+  13A8             #define	EQEND_(z,y)						BNER_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0606+  13A8             #define	EQEND_(z,y,x)					BNER_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0607+  13A8             #define	EQEND_(z,y,x,w)					BNER_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0608+  13A8             #define	EQEND_(z,y,x,w,v)					BNER_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0609+  13A8             #define     EQEND_(z,y,x,w,v,u)				BNER_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0610+  13A8             #define     EQEND_(z,y,x,w,v,u,t)			     	BNER_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0611+  13A8             #define     EQEND_(z,y,x,w,v,u,t,s)     			BNER_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0612+  13A8             #define     EQEND_(z,y,x,w,v,u,t,s,r)     		BNER_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0613+  13A8             #define     EQEND_(z,y,x,w,v,u,t,s,r,q)     		BNER_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0614+  13A8             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p)     		BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0615+  13A8             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0616+  13A8             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0617+  13A8             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0618+  13A8             #define     EQEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0619+  13A8             
0620+  13A8             #define	NEEND_(z)						BEQR_(z,*+3) \ LOGIC_LOOPEND_(1)		
0621+  13A8             #define	NEEND_(z,y)						BEQR_(z,y,*+3) \ LOGIC_LOOPEND_(2)
0622+  13A8             #define	NEEND_(z,y,x)					BEQR_(z,y,x,*+3) \ LOGIC_LOOPEND_(3)
0623+  13A8             #define	NEEND_(z,y,x,w)					BEQR_(z,y,x,w,*+3) \ LOGIC_LOOPEND_(4)
0624+  13A8             #define	NEEND_(z,y,x,w,v)					BEQR_(z,y,x,w,v,*+3) \ LOGIC_LOOPEND_(5)
0625+  13A8             #define     NEEND_(z,y,x,w,v,u)				BEQR_(z,y,x,w,v,u,*+3) \ LOGIC_LOOPEND_(6)
0626+  13A8             #define     NEEND_(z,y,x,w,v,u,t)			     	BEQR_(z,y,x,w,v,u,t,*+3) \ LOGIC_LOOPEND_(7)
0627+  13A8             #define     NEEND_(z,y,x,w,v,u,t,s)     			BEQR_(z,y,x,w,v,u,t,s,*+3) \ LOGIC_LOOPEND_(8)
0628+  13A8             #define     NEEND_(z,y,x,w,v,u,t,s,r)     		BEQR_(z,y,x,w,v,u,t,s,r,*+3) \ LOGIC_LOOPEND_(9)
0629+  13A8             #define     NEEND_(z,y,x,w,v,u,t,s,r,q)     		BEQR_(z,y,x,w,v,u,t,s,r,q,*+3) \ LOGIC_LOOPEND_(10)
0630+  13A8             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p)     		BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3) \ LOGIC_LOOPEND_(11)
0631+  13A8             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o)    		BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3) \ LOGIC_LOOPEND_(12)
0632+  13A8             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3) \ LOGIC_LOOPEND_(13)
0633+  13A8             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)     	BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3) \ LOGIC_LOOPEND_(14)
0634+  13A8             #define     NEEND_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3) \ LOGIC_LOOPEND_(15)
0635+  13A8             ;*******************************************************************
0636+  13A8             ;* IFxxx: These are the standard 'if' statements, they will always  
0637+  13A8             ;*        be of type FLAG_WML_IF                                           
0638+  13A8             ;*******************************************************************
0639+  13A8             #define     IFEQR_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BNER_(z,*+3)     
0640+  13A8             #define     IFEQR_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BNER_(z,y,*+3)   
0641+  13A8             #define     IFEQR_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BNER_(z,y,x,*+3) 
0642+  13A8             #define     IFEQR_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BNER_(z,y,x,w,*+3)   
0643+  13A8             #define     IFEQR_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BNER_(z,y,x,w,v,*+3) 
0644+  13A8             #define     IFEQR_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BNER_(z,y,x,w,v,u,*+3) 
0645+  13A8             #define     IFEQR_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BNER_(z,y,x,w,v,u,t,*+3) 
0646+  13A8             #define     IFEQR_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BNER_(z,y,x,w,v,u,t,s,*+3) 
0647+  13A8             #define     IFEQR_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BNER_(z,y,x,w,v,u,t,s,r,*+3)
0648+  13A8             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BNER_(z,y,x,w,v,u,t,s,r,q,*+3)
0649+  13A8             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0650+  13A8             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0651+  13A8             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0652+  13A8             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0653+  13A8             #define     IFEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0654+  13A8             
0655+  13A8             #define     IFNER_(z)                                 IFLOC_(FLAG_WML_IF,1)  \ BEQR_(z,*+3)     
0656+  13A8             #define     IFNER_(z,y)                               IFLOC_(FLAG_WML_IF,2)  \ BEQR_(z,y,*+3)   
0657+  13A8             #define     IFNER_(z,y,x)                             IFLOC_(FLAG_WML_IF,3)  \ BEQR_(z,y,x,*+3) 
0658+  13A8             #define     IFNER_(z,y,x,w)                           IFLOC_(FLAG_WML_IF,4)  \ BEQR_(z,y,x,w,*+3) 
0659+  13A8             #define     IFNER_(z,y,x,w,v)                         IFLOC_(FLAG_WML_IF,5)  \ BEQR_(z,y,x,w,v,*+3) 
0660+  13A8             #define     IFNER_(z,y,x,w,v,u)                       IFLOC_(FLAG_WML_IF,6)  \ BEQR_(z,y,x,w,v,u,*+3) 
0661+  13A8             #define     IFNER_(z,y,x,w,v,u,t)                     IFLOC_(FLAG_WML_IF,7)  \ BEQR_(z,y,x,w,v,u,t,*+3) 
0662+  13A8             #define     IFNER_(z,y,x,w,v,u,t,s)                   IFLOC_(FLAG_WML_IF,8)  \ BEQR_(z,y,x,w,v,u,t,s,*+3) 
0663+  13A8             #define     IFNER_(z,y,x,w,v,u,t,s,r)                 IFLOC_(FLAG_WML_IF,9)  \ BEQR_(z,y,x,w,v,u,t,s,r,*+3)
0664+  13A8             #define     IFNER_(z,y,x,w,v,u,t,s,r,q)               IFLOC_(FLAG_WML_IF,10) \ BEQR_(z,y,x,w,v,u,t,s,r,q,*+3)
0665+  13A8             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p)             IFLOC_(FLAG_WML_IF,11) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,*+3)
0666+  13A8             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o)           IFLOC_(FLAG_WML_IF,12) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,*+3)
0667+  13A8             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n)         IFLOC_(FLAG_WML_IF,13) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,*+3)
0668+  13A8             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m)       IFLOC_(FLAG_WML_IF,14) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,*+3)
0669+  13A8             #define     IFNER_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l)     IFLOC_(FLAG_WML_IF,15) \ BEQR_(z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,*+3)
0670+  13A8             
0671+  13A8             #define     ENDIF_ \wml1_ .set *
0672+  13A8             #defcont		 \ .pop wml3_, wml5_, wml4_
0673+  13A8             #defcont		 \#if (wml3_ & FLAG_WML_BEGIN)==0
0674+  13A8             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0675+  13A8             #defcont  			      \wml2_ .set wml1_-wml4_-wml5_-2
0676+  13A8             #defcont			      \#if wml2_+127 < 0
0677+  13A8             #defcont				      \ .error "Branch Range < -127"
0678+  13A8             #defcont			      \#else
0679+  13A8             #defcont				      \#if wml2_-128 > 0
0680+  13A8             #defcont					      \ .error "Branch Range > 128"
0681+  13A8             #defcont				      \#else
0682+  13A8             #defcont    				      \ .org wml4_+wml5_+1
0683+  13A8             #defcont					      \ .byte wml2_
0684+  13A8             #defcont				      \#endif
0685+  13A8             #defcont			      \#endif
0686+  13A8             #defcont                \#else
0687+  13A8             #defcont                      \ .org  wml4_-2	
0688+  13A8             #defcont				\ JMP_(wml1_)
0689+  13A8             #defcont                      \ .error "123: Not Tested"
0690+  13A8             #defcont                \#endif
0691+  13A8             #defcont			\ .org	wml1_
0692+  13A8             #defcont		 \#else
0693+  13A8             #defcont			\.error "Wrong Endtype for IFXXR_ block"
0694+  13A8             #defcont		 \#endif
0695+  13A8             
0696+  13A8             #define	ELSE_	\wml1_ .set $
0697+  13A8             #defcont		\ .pop wml3_, wml5_, wml4_
0698+  13A8             #defcont		\#if (wml3_ & FLAG_WML_BEGIN)==0
0699+  13A8             #defcont			\#if (wml3_ & FLAG_WML_ELSE)==0
0700+  13A8             #defcont				\ .org wml4_+wml5_+1
0701+  13A8             #defcont				\wml2_ .set wml1_-wml4_
0702+  13A8             #defcont					\#if wml2_+127 < 0
0703+  13A8             #defcont						\ .org wml1_
0704+  13A8             #defcont						\.push wml1_+3, wml5_, FLAG_WML_ELSE
0705+  13A8             #defcont						\ JMP_($)
0706+  13A8             #defcont                                  \ .error "(124)ELSE_: Not Tested with long JMP"
0707+  13A8             #defcont					\#else
0708+  13A8             #defcont						\#if wml2_-128>0
0709+  13A8             #defcont							\ .org wml1_
0710+  13A8             #defcont							\.push wml1_+3, wml5_, FLAG_WML_ELSE
0711+  13A8             #defcont							\ JMP_($)
0712+  13A8             #defcont                                  \ .error "(125)ELSE_: Not Tested with long JMP"
0713+  13A8             #defcont						\#else
0714+  13A8             #defcont							\.push wml1_-wml5_, wml5_, FLAG_WML_IF
0715+  13A8             #defcont							\ .byte wml2_-wml5_
0716+  13A8             #defcont							\ .org wml1_
0717+  13A8             #defcont							\ JMPR_($+1)
0718+  13A8             #defcont							\ .org wml1_+2
0719+  13A8             #defcont						\#endif
0720+  13A8             #defcont					\#endif
0721+  13A8             #defcont			\#else
0722+  13A8             #defcont				\.error "Duplicate ELSE Statement"
0723+  13A8             #defcont			\#endif
0724+  13A8             #defcont		\#else
0725+  13A8             #defcont			\ .error "Misplaced Else"
0726+  13A8             #defcont		\#endif
0727+  13A8             
0728+  13A8             #define     BEQR_(p1__,ba__)     \#if $+3-ba__ < 128
0729+  13A8             #defcont                                 \.db $5A,p1__,ba__-$-3
0730+  13A8             #defcont				\#else
0731+  13A8             #defcont					\#if ba__-$+3 < 127
0732+  13A8             #defcont                                 \.db $5A,p1__,$+3-ba__
0733+  13A8             #defcont					\#else
0734+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0735+  13A8             #defcont					\#endif
0736+  13A8             #defcont				\#endif
0737+  13A8             
0738+  13A8             #define     BEQR_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0739+  13A8             #defcont                                 \.db $5A,p1__,p2__,ba__-$-4
0740+  13A8             #defcont				\#else
0741+  13A8             #defcont					\#if ba__-$+4 < 127
0742+  13A8             #defcont                                 \.db $5A,p1__,p2__,$+4-ba__
0743+  13A8             #defcont					\#else
0744+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0745+  13A8             #defcont					\#endif
0746+  13A8             #defcont				\#endif
0747+  13A8             
0748+  13A8             #define     BEQR_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0749+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,ba__-$-5
0750+  13A8             #defcont				\#else
0751+  13A8             #defcont					\#if ba__-$+5 < 127
0752+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,$+5-ba__
0753+  13A8             #defcont					\#else
0754+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0755+  13A8             #defcont					\#endif
0756+  13A8             #defcont				\#endif
0757+  13A8             
0758+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0759+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,ba__-$-6
0760+  13A8             #defcont				\#else
0761+  13A8             #defcont					\#if ba__-$+6 < 127
0762+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,$+6-ba__
0763+  13A8             #defcont					\#else
0764+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0765+  13A8             #defcont					\#endif
0766+  13A8             #defcont				\#endif
0767+  13A8             
0768+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0769+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0770+  13A8             #defcont				\#else
0771+  13A8             #defcont					\#if ba__-$+7 < 127
0772+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0773+  13A8             #defcont					\#else
0774+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0775+  13A8             #defcont					\#endif
0776+  13A8             #defcont				\#endif
0777+  13A8             
0778+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0779+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0780+  13A8             #defcont				\#else
0781+  13A8             #defcont					\#if ba__-$+8 < 127
0782+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0783+  13A8             #defcont					\#else
0784+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0785+  13A8             #defcont					\#endif
0786+  13A8             #defcont				\#endif
0787+  13A8             
0788+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0789+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0790+  13A8             #defcont				\#else
0791+  13A8             #defcont					\#if ba__-$+9 < 127
0792+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0793+  13A8             #defcont					\#else
0794+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0795+  13A8             #defcont					\#endif
0796+  13A8             #defcont				\#endif
0797+  13A8             
0798+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0799+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0800+  13A8             #defcont				\#else
0801+  13A8             #defcont					\#if ba__-$+10 < 127
0802+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0803+  13A8             #defcont					\#else
0804+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0805+  13A8             #defcont					\#endif
0806+  13A8             #defcont				\#endif
0807+  13A8             
0808+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0809+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0810+  13A8             #defcont				\#else
0811+  13A8             #defcont					\#if ba__-$+11 < 127
0812+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0813+  13A8             #defcont					\#else
0814+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0815+  13A8             #defcont					\#endif
0816+  13A8             #defcont				\#endif
0817+  13A8             
0818+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
0819+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
0820+  13A8             #defcont				\#else
0821+  13A8             #defcont					\#if ba__-$+12 < 127
0822+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
0823+  13A8             #defcont					\#else
0824+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0825+  13A8             #defcont					\#endif
0826+  13A8             #defcont				\#endif
0827+  13A8             
0828+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
0829+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
0830+  13A8             #defcont				\#else
0831+  13A8             #defcont					\#if ba__-$+13 < 127
0832+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
0833+  13A8             #defcont					\#else
0834+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0835+  13A8             #defcont					\#endif
0836+  13A8             #defcont				\#endif
0837+  13A8             
0838+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
0839+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
0840+  13A8             #defcont				\#else
0841+  13A8             #defcont					\#if ba__-$+14 < 127
0842+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
0843+  13A8             #defcont					\#else
0844+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0845+  13A8             #defcont					\#endif
0846+  13A8             #defcont				\#endif
0847+  13A8             
0848+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
0849+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
0850+  13A8             #defcont				\#else
0851+  13A8             #defcont					\#if ba__-$+15 < 127
0852+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
0853+  13A8             #defcont					\#else
0854+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0855+  13A8             #defcont					\#endif
0856+  13A8             #defcont				\#endif
0857+  13A8             
0858+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
0859+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
0860+  13A8             #defcont				\#else
0861+  13A8             #defcont					\#if ba__-$+16 < 127
0862+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
0863+  13A8             #defcont					\#else
0864+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0865+  13A8             #defcont					\#endif
0866+  13A8             #defcont				\#endif
0867+  13A8             
0868+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
0869+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
0870+  13A8             #defcont				\#else
0871+  13A8             #defcont					\#if ba__-$+17 < 127
0872+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
0873+  13A8             #defcont					\#else
0874+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0875+  13A8             #defcont					\#endif
0876+  13A8             #defcont				\#endif
0877+  13A8             
0878+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
0879+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
0880+  13A8             #defcont				\#else
0881+  13A8             #defcont					\#if ba__-$+18 < 127
0882+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
0883+  13A8             #defcont					\#else
0884+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0885+  13A8             #defcont					\#endif
0886+  13A8             #defcont				\#endif
0887+  13A8             
0888+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
0889+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
0890+  13A8             #defcont				\#else
0891+  13A8             #defcont					\#if ba__-$+19 < 127
0892+  13A8             #defcont                                 \.db $5A,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
0893+  13A8             #defcont					\#else
0894+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0895+  13A8             #defcont					\#endif
0896+  13A8             #defcont				\#endif
0897+  13A8             
0898+  13A8             #define     BEQA_(p1__,ba__)     \.db $58,p1__ \.dw ba__
0899+  13A8             #define     BEQA_(p1__,p2__,ba__)     \.db $58,p1__,p2__ \.dw ba__
0900+  13A8             #define     BEQA_(p1__,p2__,p3__,ba__)     \.db $58,p1__,p2__,p3__ \.dw ba__
0901+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,ba__)     \.db $58,p1__,p2__,p3__,p4__ \.dw ba__
0902+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__ \.dw ba__
0903+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
0904+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
0905+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
0906+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
0907+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
0908+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
0909+  13A8             #define     BEQA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $58,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
0910+  13A8             
0911+  13A8             #define     BNER_(p1__,ba__)     \#if $+3-ba__ < 128
0912+  13A8             #defcont                                 \.db $5B,p1__,ba__-$-3
0913+  13A8             #defcont				\#else
0914+  13A8             #defcont					\#if ba__-$+3 < 127
0915+  13A8             #defcont                                 \.db $5B,p1__,$+3-ba__
0916+  13A8             #defcont					\#else
0917+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0918+  13A8             #defcont					\#endif
0919+  13A8             #defcont				\#endif
0920+  13A8             
0921+  13A8             #define     BNER_(p1__,p2__,ba__)     \#if $+4-ba__ < 128
0922+  13A8             #defcont                                 \.db $5B,p1__,p2__,ba__-$-4
0923+  13A8             #defcont				\#else
0924+  13A8             #defcont					\#if ba__-$+4 < 127
0925+  13A8             #defcont                                 \.db $5B,p1__,p2__,$+4-ba__
0926+  13A8             #defcont					\#else
0927+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0928+  13A8             #defcont					\#endif
0929+  13A8             #defcont				\#endif
0930+  13A8             
0931+  13A8             #define     BNER_(p1__,p2__,p3__,ba__)     \#if $+5-ba__ < 128
0932+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,ba__-$-5
0933+  13A8             #defcont				\#else
0934+  13A8             #defcont					\#if ba__-$+5 < 127
0935+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,$+5-ba__
0936+  13A8             #defcont					\#else
0937+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0938+  13A8             #defcont					\#endif
0939+  13A8             #defcont				\#endif
0940+  13A8             
0941+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,ba__)     \#if $+6-ba__ < 128
0942+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,ba__-$-6
0943+  13A8             #defcont				\#else
0944+  13A8             #defcont					\#if ba__-$+6 < 127
0945+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,$+6-ba__
0946+  13A8             #defcont					\#else
0947+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0948+  13A8             #defcont					\#endif
0949+  13A8             #defcont				\#endif
0950+  13A8             
0951+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,ba__)     \#if $+7-ba__ < 128
0952+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,ba__-$-7
0953+  13A8             #defcont				\#else
0954+  13A8             #defcont					\#if ba__-$+7 < 127
0955+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,$+7-ba__
0956+  13A8             #defcont					\#else
0957+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0958+  13A8             #defcont					\#endif
0959+  13A8             #defcont				\#endif
0960+  13A8             
0961+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \#if $+8-ba__ < 128
0962+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,ba__-$-8
0963+  13A8             #defcont				\#else
0964+  13A8             #defcont					\#if ba__-$+8 < 127
0965+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,$+8-ba__
0966+  13A8             #defcont					\#else
0967+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0968+  13A8             #defcont					\#endif
0969+  13A8             #defcont				\#endif
0970+  13A8             
0971+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \#if $+9-ba__ < 128
0972+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__-$-9
0973+  13A8             #defcont				\#else
0974+  13A8             #defcont					\#if ba__-$+9 < 127
0975+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,$+9-ba__
0976+  13A8             #defcont					\#else
0977+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0978+  13A8             #defcont					\#endif
0979+  13A8             #defcont				\#endif
0980+  13A8             
0981+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \#if $+10-ba__ < 128
0982+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__-$-10
0983+  13A8             #defcont				\#else
0984+  13A8             #defcont					\#if ba__-$+10 < 127
0985+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,$+10-ba__
0986+  13A8             #defcont					\#else
0987+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0988+  13A8             #defcont					\#endif
0989+  13A8             #defcont				\#endif
0990+  13A8             
0991+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \#if $+11-ba__ < 128
0992+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__-$-11
0993+  13A8             #defcont				\#else
0994+  13A8             #defcont					\#if ba__-$+11 < 127
0995+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,$+11-ba__
0996+  13A8             #defcont					\#else
0997+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
0998+  13A8             #defcont					\#endif
0999+  13A8             #defcont				\#endif
1000+  13A8             
1001+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \#if $+12-ba__ < 128
1002+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__-$-12
1003+  13A8             #defcont				\#else
1004+  13A8             #defcont					\#if ba__-$+12 < 127
1005+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,$+12-ba__
1006+  13A8             #defcont					\#else
1007+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1008+  13A8             #defcont					\#endif
1009+  13A8             #defcont				\#endif
1010+  13A8             
1011+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \#if $+13-ba__ < 128
1012+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__-$-13
1013+  13A8             #defcont				\#else
1014+  13A8             #defcont					\#if ba__-$+13 < 127
1015+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,$+13-ba__
1016+  13A8             #defcont					\#else
1017+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1018+  13A8             #defcont					\#endif
1019+  13A8             #defcont				\#endif
1020+  13A8             
1021+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \#if $+14-ba__ < 128
1022+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__-$-14
1023+  13A8             #defcont				\#else
1024+  13A8             #defcont					\#if ba__-$+14 < 127
1025+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,$+14-ba__
1026+  13A8             #defcont					\#else
1027+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1028+  13A8             #defcont					\#endif
1029+  13A8             #defcont				\#endif
1030+  13A8             
1031+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__)     \#if $+15-ba__ < 128
1032+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,ba__-$-15
1033+  13A8             #defcont				\#else
1034+  13A8             #defcont					\#if ba__-$+15 < 127
1035+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,$+15-ba__
1036+  13A8             #defcont					\#else
1037+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1038+  13A8             #defcont					\#endif
1039+  13A8             #defcont				\#endif
1040+  13A8             
1041+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__)     \#if $+16-ba__ < 128
1042+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,ba__-$-16
1043+  13A8             #defcont				\#else
1044+  13A8             #defcont					\#if ba__-$+16 < 127
1045+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,$+16-ba__
1046+  13A8             #defcont					\#else
1047+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1048+  13A8             #defcont					\#endif
1049+  13A8             #defcont				\#endif
1050+  13A8             
1051+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__)     \#if $+17-ba__ < 128
1052+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,ba__-$-17
1053+  13A8             #defcont				\#else
1054+  13A8             #defcont					\#if ba__-$+17 < 127
1055+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,$+17-ba__
1056+  13A8             #defcont					\#else
1057+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1058+  13A8             #defcont					\#endif
1059+  13A8             #defcont				\#endif
1060+  13A8             
1061+  13A8             #define     BNER_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__)     \#if $+18-ba__ < 128
1062+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,ba__-$-18
1063+  13A8             #defcont				\#else
1064+  13A8             #defcont					\#if ba__-$+18 < 127
1065+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,$+18-ba__
1066+  13A8             #defcont					\#else
1067+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1068+  13A8             #defcont					\#endif
1069+  13A8             #defcont				\#endif
1070+  13A8             
1071+  13A8             #define     BEQR_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__)     \#if $+19-ba__ < 128
1072+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,ba__-$-19
1073+  13A8             #defcont				\#else
1074+  13A8             #defcont					\#if ba__-$+19 < 127
1075+  13A8             #defcont                                 \.db $5B,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,p13__,p14__,p15__,p16__,p17__,$+19-ba__
1076+  13A8             #defcont					\#else
1077+  13A8             #defcont    					 \ .error "WML7: Branch Macro Out Of Range."
1078+  13A8             #defcont					\#endif
1079+  13A8             #defcont				\#endif
1080+  13A8             
1081+  13A8             #define     BNEA_(p1__,ba__)     \.db $59,p1__ \.dw ba__
1082+  13A8             #define     BNEA_(p1__,p2__,ba__)     \.db $59,p1__,p2__ \.dw ba__
1083+  13A8             #define     BNEA_(p1__,p2__,p3__,ba__)     \.db $59,p1__,p2__,p3__ \.dw ba__
1084+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,ba__)     \.db $59,p1__,p2__,p3__,p4__ \.dw ba__
1085+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__ \.dw ba__
1086+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__ \.dw ba__
1087+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__ \.dw ba__
1088+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__ \.dw ba__
1089+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__ \.dw ba__
1090+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__ \.dw ba__
1091+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__ \.dw ba__
1092+  13A8             #define     BNEA_(p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__,ba__)     \.db $59,p1__,p2__,p3__,p4__,p5__,p6__,p7__,p8__,p9__,p10__,p11__,p12__ \.dw ba__
1093+  13A8             
1094+  13A8             ;**********************************************************
1095+  13A8             ;* Macros 5C-5F
1096+  13A8             ;**********************************************************
1097+  13A8             #define	JMPD_(a)		.db $5c \.dw a
1098+  13A8             
1099+  13A8             #define	SWSET_(a)		.db $5d,a
1100+  13A8             #define	SWSET_(a,b)		.db $5d,a,b
1101+  13A8             #define	SWSET_(a,b,c)	.db $5d,a,b,c
1102+  13A8             #define	SWSET_(a,b,c,d)	.db $5d,a,b,c,d
1103+  13A8             
1104+  13A8             #define	SWCLR_(a)		.db $5e,a
1105+  13A8             #define	SWCLR_(a,b)		.db $5e,a,b
1106+  13A8             #define	SWCLR_(a,b,c)	.db $5e,a,b,c
1107+  13A8             #define	SWCLR_(a,b,c,d)	.db $5e,a,b,c,d
1108+  13A8             
1109+  13A8             #define	JMP_(a)		.db $5f \.dw a
1110+  13A8             
1111+  13A8             ;**********************************************************
1112+  13A8             ;* Macro 6X:
1113+  13A8             ;**********************************************************
1114+  13A8             #define	SLEEPI_(a)		.db ($60+a)
1115+  13A8             
1116+  13A8             ;**********************************************************
1117+  13A8             ;* Macro 7X: 
1118+  13A8             ;**********************************************************
1119+  13A8             ;See SLEEP macro previous...
1120+  13A8             
1121+  13A8             ;**********************************************************
1122+  13A8             ;* Macro 8X:
1123+  13A8             ;**********************************************************
1124+  13A8             #define 	JMPR_(a)		\#if a-$ > $7ff
1125+  13A8             #defcont				\	.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1126+  13A8             #defcont				\#else
1127+  13A8             #defcont				\	#if $-a > $7ff
1128+  13A8             #defcont				\		.error "Macro JMPR_: Relative branch exceedes limit. Use JMP_ instead."
1129+  13A8             #defcont				\	#endif
1130+  13A8             #defcont				\#endif
1131+  13A8             #defcont				\	.db ($80+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1132+  13A8             
1133+  13A8             ;**********************************************************
1134+  13A8             ;* Macro 9X:
1135+  13A8             ;**********************************************************
1136+  13A8             #define 	JSRR_(a)		\#if a-$ > $7ff
1137+  13A8             #defcont				\	.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1138+  13A8             #defcont				\#else
1139+  13A8             #defcont				\	#if $-a > $7ff
1140+  13A8             #defcont				\		.error "Macro JSRR_: Relative branch exceedes limit. Use JSR_ instead."
1141+  13A8             #defcont				\	#endif
1142+  13A8             #defcont				\#endif
1143+  13A8             #defcont				\	.db ($90+(((a-($+1))>>8)&$0f)) \.db ((a-($+1))&$ff)
1144+  13A8             ;**********************************************************
1145+  13A8             ;* Macro AX:
1146+  13A8             ;**********************************************************
1147+  13A8             #define 	JSRDR_(a)		\#if a-$ > $7ff
1148+  13A8             #defcont				\	.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1149+  13A8             #defcont				\#else
1150+  13A8             #defcont				\	#if $-a > $7ff
1151+  13A8             #defcont				\		.error "Macro JSRDR_: Relative branch exceedes limit. Use JSRD_ instead."
1152+  13A8             #defcont				\	#endif
1153+  13A8             #defcont				\#endif
1154+  13A8             #defcont				\	.db ($a0+(((a-($+2))>>8)&$0f)) \.db ((a-($+1))&$ff)
1155+  13A8             
1156+  13A8             
1157+  13A8             ;**********************************************************
1158+  13A8             ;* Macro BX: Add NextByte to RAM LSD(command) 
1159+  13A8             ;**********************************************************
1160+  13A8             #define 	ADDRAM_(ramloc,data)	.db ($b0+ramloc),data
1161+  13A8             
1162+  13A8             ;**********************************************************
1163+  13A8             ;* Macro CX: Set NextByte to RAM LSD(command) 
1164+  13A8             ;**********************************************************
1165+  13A8             #define 	SETRAM_(ramloc,data)	.db ($c0+ramloc),data
1166+  13A8             
1167+  13A8             ;**********************************************************
1168+  13A8             ;* Macro DX: Lamp Range Effects for extended lamp matrix
1169+  13A8             ;**********************************************************
1170+  13A8             #define	BITON3_(a)		\.db $d0,a
1171+  13A8             #define	BITON3_(a,b)	\.db $d0,(a+$80),b
1172+  13A8             #define	BITON3_(a,b,c)	\.db $d0,(a+$80),(b+$80),c
1173+  13A8             #define	BITON3_(a,b,c,d)	\.db $d0,(a+$80),(b+$80),(c+$80),d
1174+  13A8             
1175+  13A8             #define	BITOFF3_(a)		\.db $d1,a
1176+  13A8             #define	BITOFF3_(a,b)	\.db $d1,(a+$80),b
1177+  13A8             #define	BITOFF3_(a,b,c)	\.db $d1,(a+$80),(b+$80),c
1178+  13A8             #define	BITOFF3_(a,b,c,d)	\.db $d1,(a+$80),(b+$80),(c+$80),d
1179+  13A8             
1180+  13A8             #define	BITINV3_(a)		\.db $d2,a
1181+  13A8             #define	BITINV3_(a,b)	\.db $d2,(a+$80),b
1182+  13A8             #define	BITINV3_(a,b,c)	\.db $d2,(a+$80),(b+$80),c
1183+  13A8             #define	BITINV3_(a,b,c,d)	\.db $d2,(a+$80),(b+$80),(c+$80),d
1184+  13A8             
1185+  13A8             #define	BITON3a_(a)		\.db $d4,a
1186+  13A8             #define	BITON3a_(a,b)	\.db $d4,(a+$80),b
1187+  13A8             #define	BITON3a_(a,b,c)	\.db $d4,(a+$80),(b+$80),c
1188+  13A8             #define	BITON3a_(a,b,c,d)	\.db $d4,(a+$80),(b+$80),(c+$80),d
1189+  13A8             
1190+  13A8             #define	BITOFF3a_(a)	\.db $d5,a
1191+  13A8             #define	BITOFF3a_(a,b)	\.db $d5,(a+$80),b
1192+  13A8             #define	BITOFF3a_(a,b,c)	\.db $d5,(a+$80),(b+$80),c
1193+  13A8             #define	BITOFF3a_(a,b,c,d) \.db $d5,(a+$80),(b+$80),(c+$80),d
1194+  13A8             
1195+  13A8             #define	BITINV3a_(a)	\.db $d6,a
1196+  13A8             #define	BITINV3a_(a,b)	\.db $d6,(a+$80),b
1197+  13A8             #define	BITINV3a_(a,b,c)	\.db $d6,(a+$80),(b+$80),c
1198+  13A8             #define	BITINV3a_(a,b,c,d) \.db $d6,(a+$80),(b+$80),(c+$80),d
1199+  13A8             
1200+  13A8             #define	BITON4_(a)		\.db $d8,a
1201+  13A8             #define	BITON4_(a,b)	\.db $d8,(a+$80),b
1202+  13A8             #define	BITON4_(a,b,c)	\.db $d8,(a+$80),(b+$80),c
1203+  13A8             #define	BITON4_(a,b,c,d)	\.db $d8,(a+$80),(b+$80),(c+$80),d
1204+  13A8             
1205+  13A8             #define	BITOFF4_(a)		\.db $d9,a
1206+  13A8             #define	BITOFF4_(a,b)	\.db $d9,(a+$80),b
1207+  13A8             #define	BITOFF4_(a,b,c)	\.db $d9,(a+$80),(b+$80),c
1208+  13A8             #define	BITOFF4_(a,b,c,d)	\.db $d9,(a+$80),(b+$80),(c+$80),d
1209+  13A8             
1210+  13A8             #define	BITINV4_(a)		\.db $da,a
1211+  13A8             #define	BITINV4_(a,b)	\.db $da,(a+$80),b
1212+  13A8             #define	BITINV4_(a,b,c)	\.db $da,(a+$80),(b+$80),c
1213+  13A8             #define	BITINV4_(a,b,c,d)	\.db $da,(a+$80),(b+$80),(c+$80),d
1214+  13A8             
1215+  13A8             #define	BITON4a_(a)		\.db $dc,a
1216+  13A8             #define	BITON4a_(a,b)	\.db $dc,(a+$80),b
1217+  13A8             #define	BITON4a_(a,b,c)	\.db $dc,(a+$80),(b+$80),c
1218+  13A8             #define	BITON4a_(a,b,c,d)	\.db $dc,(a+$80),(b+$80),(c+$80),d
1219+  13A8             
1220+  13A8             #define	BITOFF4a_(a)	\.db $dd,a
1221+  13A8             #define	BITOFF4a_(a,b)	\.db $dd,(a+$80),b
1222+  13A8             #define	BITOFF4a_(a,b,c)	\.db $dd,(a+$80),(b+$80),c
1223+  13A8             #define	BITOFF4a_(a,b,c,d) \.db $dd,(a+$80),(b+$80),(c+$80),d
1224+  13A8             
1225+  13A8             #define	BITINV4a_(a)	\.db $de,a
1226+  13A8             #define	BITINV4a_(a,b)	\.db $de,(a+$80),b
1227+  13A8             #define	BITINV4a_(a,b,c)	\.db $de,(a+$80),(b+$80),c
1228+  13A8             #define	BITINV4a_(a,b,c,d) \.db $de,(a+$80),(b+$80),(c+$80),d
1229+  13A8             
1230+  13A8             ;**********************************************************
1231+  13A8             ;* Macro EX,FX: Play Index Sound Once 
1232+  13A8             ;**********************************************************
1233+  13A8             #define	SND_(a)			.db $e0+a
0019   13A8             
0020   13A8             ;Requires game definition file, link to the export file
0021   13A8             #include "hy_game.exp"
0001+  13A8             
0002+  13A8             
0003+  13A8             
0004+  13A8             gr_maxthreads		.equ	$D04B	;.db $1C
0005+  13A8             gr_lastswitch		.equ	$D04D	;.db (switchtable_end-switchtable)/3
0006+  13A8             gr_numplayers		.equ	$D04E	;.db $01
0007+  13A8             gr_lamptable_ptr		.equ	$D04F	;.dw lamptable		;D04F
0008+  13A8             gr_switchtable_ptr	.equ	$D051	;.dw switchtable
0009+  13A8             gr_soundtable_ptr		.equ	$D053	;.dw soundtable
0010+  13A8             gr_lampflashrate		.equ	$D055
0011+  13A8             
0012+  13A8             gr_gameoverthread_ptr	.equ	$D05F
0013+  13A8             gr_character_defs_ptr	.equ	$D061
0014+  13A8             ;character_defs		.equ	$E4CB
0015+  13A8             
0016+  13A8             gr_switchtypetable 	.equ	$D066
0017+  13A8             
0018+  13A8             gr_switch_event		.equ	$D0B0
0019+  13A8             gr_sound_event  		.equ	$D0B2
0020+  13A8             gr_score_event		.equ	$D0B4	;rts .db 0
0021+  13A8             gr_eb_event			.equ	$D0B6	;rts .db 0
0022+  13A8             gr_special_event		.equ	$D0B8	;bra	gr_special   
0023+  13A8             gr_macro_event		.equ	$D0BA	;rts .db 0	;Main Loop Begin Hook - rts
0024+  13A8             gr_ready_event		.equ	$D0BC	;rts .db 0
0025+  13A8             gr_addplayer_event 	.equ	$D0BE	;rts .db 0
0026+  13A8             gr_gameover_event		.equ	$D0C0	;rts .db 0
0027+  13A8             gr_hstdtoggle_event	.equ	$D0C2	;rts .db 0
0028+  13A8             
0029+  13A8             
0030+  13A8             gr_reset_hook_ptr		.equ	$D0C4
0031+  13A8             gr_main_hook_ptr		.equ	$D0C6
0032+  13A8             gr_coin_hook_ptr		.equ	$D0C8
0033+  13A8             gr_game_hook_ptr		.equ	$D0CA
0034+  13A8             gr_player_hook_ptr	.equ	$D0CC
0035+  13A8             gr_outhole_hook_ptr	.equ	$D0CE
0036+  13A8             
0037+  13A8             
0038+  13A8             gr_defaudit			.equ	$D003
0039+  13A8             gr_gameadjust7		.equ	$D015
0040+  13A8             gr_coinlockout		.equ	$D063
0041+  13A8             gr_creditsound		.equ	$D05C
0042+  13A8             gr_p1_startsound		.equ	$D057
0043+  13A8             gr_playerstartdata	.equ	$D074
0044+  13A8             gr_playerresetdata	.equ	$D092
0045+  13A8             gr_gameoversound		.equ	$D05B
0046+  13A8             gr_gameover_lamp		.equ	$D05D
0047+  13A8             gr_highscoresound		.equ	$D064
0048+  13A8             gr_tilt_lamp		.equ	$D05E
0049+  13A8             gr_gamenumber		.equ	$D000
0050+  13A8             gr_romrevision		.equ	$D002
0051+  13A8             gr_irq_entry		.equ	$D0D0
0052+  13A8             gr_swi_entry		.equ	$D0D3
0053+  13A8             
0054+  13A8             
0055+  13A8             
0056+  13A8             
0022   13A8             
0023   13A8             ;*****************************************************************************
0024   13A8             ;* Some Global Equates
0025   13A8             ;*****************************************************************************
0026   13A8             
0027   13A8             irq_per_minute =	$0EFF
0028   13A8             
0029   13A8             ;*****************************************************************************
0030   13A8             ;*Program starts at $e800 for standard games... we can expand this later..
0031   13A8             ;*****************************************************************************
0032   E730             	.org $E730
0033   E730             
0034   E730             
0035   E730             
0036   E730             ;**************************************
0037   E730             ;* Main Entry from Reset
0038   E730             ;**************************************
0039   E730 0F          reset			sei	
0040   E731 8E F1 70    			lds	#pia_ddr_data-1		;Point stack to start of init data
0041   E734 C6 0C       			ldab	#$0C				;Number of PIA sections to initialize
0042   E736 CE 21 00    			ldx	#pia_sound_data		;Start with the lowest PIA
0043   E739 86 04       			ldaa	#$04
0044   E73B A7 01       			staa	pia_control,X		;Select control register
0045   E73D 86 7F       			ldaa	#$7F				
0046   E73F A7 00       			staa	pia_pir,X
0047   E741 DF B8       			stx	temp1
0048   E743 9C B8       			cpx	temp1
0049   E745             			ifeq
0049   E745             
0049   E745 26 FE       
0050   E747             				begin
0050   E747             
0051   E747 DE B8       nxt_pia				ldx	temp1			;Get next PIA address base
0052   E749             					begin
0052   E749             
0053   E749 6F 01       						clr	pia_control,X	;Initialize all PIA data direction registers
0054   E74B 32          						pula				;Get DDR data
0055   E74C A7 00       						staa	pia_pir,X
0056   E74E 32          						pula	
0057   E74F A7 01       						staa	pia_control,X	;Get Control Data
0058   E751 8C 21 00    						cpx	#pia_sound_data	;This is the last PIA to do in shooter games
0059   E754             						ifne
0059   E754             
0059   E754 27 FE       
0060   E756 6F 00       							clr	pia_pir,X		;If we are on the sound PIA, then clear the PIR 
0061   E758             						endif
0061   E758             
0061   E758             
0061   E758             
0061   E758             
0061   E758             
0061   E758~            						endif
0061   E758~            						endif
0061   E758             
0061   E758~            						endif
0061   E758~            						endif
0061   E758             
0061   E755             
0061   E755 02          
0061   E756             
0061   E756             
0061   E756~            						endif
0061   E756~            						endif
0061   E756~            						endif
0061   E756             
0061   E758             
0061   E758~            						endif
0061   E758~            						endif
0061   E758             
0062   E758 08          						inx	
0063   E759 08          						inx	
0064   E75A 5A          						decb	
0065   E75B 27 1B       						beq	init_done
0066   E75D C5 01       						bitb	#$01
0067   E75F             					eqend
0067   E75F             
0067   E75F             
0067   E75F~            					eqend
0067   E75F~            					eqend
0067   E75F~            					eqend
0067   E75F             
0067   E75F 26 E8       
0067   E761             
0067   E761~            					eqend
0067   E761~            					eqend
0067   E761             
0068   E761 96 B8       					ldaa	temp1			;Get current PIA address MSB
0069   E763 48          					asla	
0070   E764 84 1F       					anda	#$1F			;Move to next PIA
0071   E766             					ifeq
0071   E766             
0071   E766 26 FE       
0072   E768 86 40       						ldaa	#$40
0073   E76A 97 B8       						staa	temp1
0074   E76C 20 D9       						bra	nxt_pia
0075   E76E             					endif
0075   E76E             
0075   E76E             
0075   E76E             
0075   E76E             
0075   E76E             
0075   E76E~            					endif
0075   E76E~            					endif
0075   E76E             
0075   E76E~            					endif
0075   E76E~            					endif
0075   E76E             
0075   E767             
0075   E767 06          
0075   E768             
0075   E768             
0075   E768~            					endif
0075   E768~            					endif
0075   E768~            					endif
0075   E768             
0075   E76E             
0075   E76E~            					endif
0075   E76E~            					endif
0075   E76E             
0076   E76E 8A 20       					oraa	#$20
0077   E770 97 B8       					staa	temp1			;Store it
0078   E772             				loopend
0078   E772             
0078   E772             
0078   E772~            				loopend
0078   E772~            				loopend
0078   E772~            				loopend
0078   E772             
0078   E772 20 D3       
0078   E774             
0078   E774~            				loopend
0078   E774~            				loopend
0078   E774             
0079   E774             			endif
0079   E774             
0079   E774             
0079   E774             
0079   E774             
0079   E774             
0079   E774~            			endif
0079   E774~            			endif
0079   E774             
0079   E774~            			endif
0079   E774~            			endif
0079   E774             
0079   E746             
0079   E746 2D          
0079   E747             
0079   E747             
0079   E747~            			endif
0079   E747~            			endif
0079   E747~            			endif
0079   E747             
0079   E774             
0079   E774~            			endif
0079   E774~            			endif
0079   E774             
0080   E774 7E FF 31    			jmp	diag					;NMI Entry
0081   E777             
0082   E777             ;***************************************************
0083   E777             ;* System Checksum #1: Set to make ROM csum from
0084   E777             ;*                     $E000-$EFFF equal to $00
0085   E777             ;***************************************************		
0086   E777             	
0087   E777 C0          csum1	.db $C0 	 
0088   E778             
0089   E778             
0090   E778             ;***************************************************************
0091   E778             ;* PIA initialization is done now, set up the vm etc.
0092   E778             ;***************************************************************			
0093   E778 CE 13 FF    init_done		ldx	#$13FF				;\
0094   E77B 35          			txs						;|
0095   E77C             			begin						;|
0095   E77C             
0096   E77C 6F 00       				clr	$00,X				;Clear RAM 1000-13FF
0097   E77E 09          				dex					;|
0098   E77F 8C 0F FF    				cpx	#$0FFF			;|
0099   E782             			eqend						;/
0099   E782             
0099   E782             
0099   E782~            			eqend						;/
0099   E782~            			eqend						;/
0099   E782~            			eqend						;/
0099   E782             
0099   E782 26 F8       
0099   E784             
0099   E784~            			eqend						;/
0099   E784~            			eqend						;/
0099   E784             
0100   E784 BD EE 61    			jsr	setup_vm_stack			;Initially Set up the VM
0101   E787 B6 D0 55    			ldaa	gr_lampflashrate			;Get Lamp Flash Rate
0102   E78A 97 D3       			staa	lamp_flash_rate
0103   E78C CE 11 00    			ldx	#switch_queue
0104   E78F DF B4       			stx	switch_queue_pointer
0105   E791 CE 11 18    			ldx	#sol_queue				;Works from top down
0106   E794 DF B6       			stx	solenoid_queue_pointer		;Set up Solenoid Buffer Pointer
0107   E796 CE 01 7D    			ldx	#adj_cmoscsum			;CMOS Checksum
0108   E799 BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
0109   E79C BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
0110   E79F 1B          			aba	
0111   E7A0 81 57       			cmpa	#$57					;CSUM CMOS RAM
0112   E7A2             			ifne
0112   E7A2             
0112   E7A2 27 FE       
0113   E7A4 BD EE BC    clear_all			jsr	factory_zeroaudits		;Restore Factory Settings and Zero Audit Totals
0114   E7A7             			endif
0114   E7A7             
0114   E7A7             
0114   E7A7             
0114   E7A7             
0114   E7A7             
0114   E7A7~            			endif
0114   E7A7~            			endif
0114   E7A7             
0114   E7A7~            			endif
0114   E7A7~            			endif
0114   E7A7             
0114   E7A3             
0114   E7A3 03          
0114   E7A4             
0114   E7A4             
0114   E7A4~            			endif
0114   E7A4~            			endif
0114   E7A4~            			endif
0114   E7A4             
0114   E7A7             
0114   E7A7~            			endif
0114   E7A7~            			endif
0114   E7A7             
0115   E7A7 CE 01 6E    			ldx	#aud_currentcredits		;Current Credits
0116   E7AA BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
0117   E7AD B7 11 9A    			staa	current_credits
0118   E7B0 BD FD DB    			jsr	cmos_a				;CMOS, X -> A Audit 50 Command
0119   E7B3 6F 00       			clr	$00,X
0120   E7B5 6F 01       			clr	$01,X
0121   E7B7 81 15       			cmpa	#$15					;Auto-Cycle?
0122   E7B9             			ifeq
0122   E7B9             
0122   E7B9 26 FE       
0123   E7BB CE FE 7C    				ldx	#st_autocycle			;Set-Up Auto Cycle Mode
0124   E7BE BD EA 24    				jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
0125   E7C1             			endif
0125   E7C1             
0125   E7C1             
0125   E7C1             
0125   E7C1             
0125   E7C1             
0125   E7C1~            			endif
0125   E7C1~            			endif
0125   E7C1             
0125   E7C1~            			endif
0125   E7C1~            			endif
0125   E7C1             
0125   E7BA             
0125   E7BA 06          
0125   E7BB             
0125   E7BB             
0125   E7BB~            			endif
0125   E7BB~            			endif
0125   E7BB~            			endif
0125   E7BB             
0125   E7C1             
0125   E7C1~            			endif
0125   E7C1~            			endif
0125   E7C1             
0126   E7C1 81 45       			cmpa	#$45
0127   E7C3 27 DF       			beq	clear_all				;Restore Factory Setting/Zero Audits
0128   E7C5 81 35       			cmpa	#$35
0129   E7C7             			ifeq						;Zero Audits
0129   E7C7             
0129   E7C7 26 FE       
0130   E7C9 BD EE AE    				jsr	reset_audits			;(Reset Audits 0100-0165)
0131   E7CC             			endif
0131   E7CC             
0131   E7CC             
0131   E7CC             
0131   E7CC             
0131   E7CC             
0131   E7CC~            			endif
0131   E7CC~            			endif
0131   E7CC             
0131   E7CC~            			endif
0131   E7CC~            			endif
0131   E7CC             
0131   E7C8             
0131   E7C8 03          
0131   E7C9             
0131   E7C9             
0131   E7C9~            			endif
0131   E7C9~            			endif
0131   E7C9~            			endif
0131   E7C9             
0131   E7CC             
0131   E7CC~            			endif
0131   E7CC~            			endif
0131   E7CC             
0132   E7CC BD F7 9C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
0133   E7CF 7A 00 7D    			dec	switch_debounced
0134   E7D2 BD F9 11    			jsr	clear_displays			;Blank all Player Displays (buffer 0)
0135   E7D5 97 4F       			staa	score_p1_b0+3			;Set player one score to '00'
0136   E7D7 4A          			deca
0137   E7D8 97 5E       			staa	wave_p2_b0
0138   E7DA 97 5C       			staa	wave_p1_b0
0139   E7DC 0E          			cli
0140   E7DD FE D0 C4    			ldx	gr_reset_hook_ptr
0141   E7E0 AD 00       			jsr	$00,X					;jsr GameROM
0142   E7E2 CE FA D7    			ldx	#powerup_init			;Jump to Game Over Mode
0143   E7E5 BD EA 24    			jsr	newthread_06			;Start the thread
0144   E7E8 7E E9 3A    			jmp	check_threads			;Run the loop
0145   E7EB             			
0146   E7EB             ;************************************************************************************
0147   E7EB             ;* Begin Main Loop - This is the end of all initialization and the start of the loop
0148   E7EB             ;*                   that runs consistently to support the VM.
0149   E7EB             ;************************************************************************************
0150   E7EB CE 00 CB    main			ldx	#vm_base
0151   E7EE DF D1       			stx	vm_tail_thread			;Current VM Routine being run
0152   E7F0 DF CF       			stx	current_thread			;Current VM Routine being run
0153   E7F2 FE D0 C6    			ldx	gr_main_hook_ptr
0154   E7F5 AD 00       			jsr	$00,X					;Game ROM:Main Loop Hook
0155   E7F7 0F          			sei	
0156   E7F8 96 B3       			ldaa	irqcount16				;IRQ Counter, Incremented every 16 IRQ's
0157   E7FA 7F 00 B3    			clr	irqcount16				;Reset the counter
0158   E7FD 0E          			cli	
0159   E7FE 97 CA       			staa	irqcount				;Put the data into counter holder, use later
0160   E800 96 E9       			ldaa	flags_selftest			;See if we are in test mode
0161   E802             			ifne
0161   E802             
0161   E802 27 FE       
0162   E804 7E E8 84    				jmp	vm_irqcheck				;If so, then skip a bunch of stuff...
0163   E807             			endif
0163   E807             
0163   E807             
0163   E807             
0163   E807             
0163   E807             
0163   E807~            			endif
0163   E807~            			endif
0163   E807             
0163   E807~            			endif
0163   E807~            			endif
0163   E807             
0163   E803             
0163   E803 03          
0163   E804             
0163   E804             
0163   E804~            			endif
0163   E804~            			endif
0163   E804~            			endif
0163   E804             
0163   E807             
0163   E807~            			endif
0163   E807~            			endif
0163   E807             
0164   E807 B6 28 01    			ldaa	pia_disp_digit_ctrl		;Check the Advance Switch
0165   E80A             			ifmi
0165   E80A             
0165   E80A 2A FE       
0166   E80C CE FC 41    				ldx	#selftest_entry
0167   E80F BD EA 24    				jsr	newthread_06			;Create the diagnostics thread
0168   E812             			endif
0168   E812             
0168   E812             
0168   E812             
0168   E812             
0168   E812             
0168   E812~            			endif
0168   E812~            			endif
0168   E812             
0168   E812~            			endif
0168   E812~            			endif
0168   E812             
0168   E80B             
0168   E80B 06          
0168   E80C             
0168   E80C             
0168   E80C~            			endif
0168   E80C~            			endif
0168   E80C~            			endif
0168   E80C             
0168   E812             
0168   E812~            			endif
0168   E812~            			endif
0168   E812             
0169   E812 CE 00 00    checkswitch		ldx	#0000
0170   E815             			begin
0170   E815             
0171   E815 A6 9D       				ldaa	switch_b4,X
0172   E817 43          				coma	
0173   E818 A4 8D       				anda	switch_pending,X
0174   E81A             				ifne
0174   E81A             
0174   E81A 27 FE       
0175   E81C BD ED A0    					jsr	check_sw_close				;Switch Closed?
0176   E81F             				endif
0176   E81F             
0176   E81F             
0176   E81F             
0176   E81F             
0176   E81F             
0176   E81F~            				endif
0176   E81F~            				endif
0176   E81F             
0176   E81F~            				endif
0176   E81F~            				endif
0176   E81F             
0176   E81B             
0176   E81B 03          
0176   E81C             
0176   E81C             
0176   E81C~            				endif
0176   E81C~            				endif
0176   E81C~            				endif
0176   E81C             
0176   E81F             
0176   E81F~            				endif
0176   E81F~            				endif
0176   E81F             
0177   E81F A6 9D       				ldaa	switch_b4,X
0178   E821 A4 95       				anda	switch_aux,X
0179   E823             				ifne
0179   E823             
0179   E823 27 FE       
0180   E825 BD ED FA    					jsr	check_sw_open				;Switch Open?
0181   E828             				endif
0181   E828             
0181   E828             
0181   E828             
0181   E828             
0181   E828             
0181   E828~            				endif
0181   E828~            				endif
0181   E828             
0181   E828~            				endif
0181   E828~            				endif
0181   E828             
0181   E824             
0181   E824 03          
0181   E825             
0181   E825             
0181   E825~            				endif
0181   E825~            				endif
0181   E825~            				endif
0181   E825             
0181   E828             
0181   E828~            				endif
0181   E828~            				endif
0181   E828             
0182   E828 08          				inx	
0183   E829 8C 00 08    				cpx	#$0008
0184   E82C             			eqend
0184   E82C             
0184   E82C             
0184   E82C~            			eqend
0184   E82C~            			eqend
0184   E82C~            			eqend
0184   E82C             
0184   E82C 26 E7       
0184   E82E             
0184   E82E~            			eqend
0184   E82E~            			eqend
0184   E82E             
0185   E82E D6 F4       time			ldab	flag_timer_bip			;Ball Timer Flag
0186   E830             			ifne
0186   E830             
0186   E830 27 FE       
0187   E832 96 CA       				ldaa	irqcount				;Number of IRQ's since last
0188   E834 DE F2       				ldx	minutetimer
0189   E836 BD EE 3E    				jsr	xplusa				;X = X + A
0190   E839 DF F2       				stx	minutetimer
0191   E83B 8C 0E FF    				cpx	#irq_per_minute
0192   E83E 2B 0B       				bmi	switches				;Not 1 minute yet
0193   E840 5F          				clrb	
0194   E841 D7 F2       				stab	minutetimer				;Clear the Minute Timer
0195   E843 D7 F3       				stab	minutetimer+1
0196   E845 CE 01 26    				ldx	#aud_avgballtime			;AUD: Ball time in Minutes
0197   E848 BD F7 E7    				jsr	ptrx_plus_1				;Add 1 to data at X
0198   E84B             			endif
0198   E84B             
0198   E84B             
0198   E84B             
0198   E84B             
0198   E84B             
0198   E84B~            			endif
0198   E84B~            			endif
0198   E84B             
0198   E84B~            			endif
0198   E84B~            			endif
0198   E84B             
0198   E831             
0198   E831 19          
0198   E832             
0198   E832             
0198   E832~            			endif
0198   E832~            			endif
0198   E832~            			endif
0198   E832             
0198   E84B             
0198   E84B~            			endif
0198   E84B~            			endif
0198   E84B             
0199   E84B CE 11 00    switches		ldx	#switch_queue
0200   E84E 9C B4       next_sw		cpx	switch_queue_pointer		;Check Buffer Pointer
0201   E850             			ifne
0201   E850             
0201   E850 27 FE       
0202   E852 A6 00       				ldaa	$00,X					;Command Timer
0203   E854 90 CA       				suba	irqcount				;Subtract our IRQ's
0204   E856             				iflo						;Ready to run?
0204   E856             
0204   E856 22 FE       
0205   E858 DF C6       					stx	sys_temp_w3				;Yes!
0206   E85A A6 01       					ldaa	$01,X					;Encoded Switch #
0207   E85C 97 C3       					staa	sw_encoded
0208   E85E 7F 00 BE    					clr	sys_temp1
0209   E861 16          					tab	
0210   E862 57          					asrb	
0211   E863 57          					asrb	
0212   E864 57          					asrb	
0213   E865 D7 BF       					stab	sys_temp2
0214   E867 BD EA E5    					jsr	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
0215   E86A D7 C0       					stab	sys_temp3
0216   E86C DE BE       					ldx	sys_temp1
0217   E86E A6 7D       					ldaa	switch_debounced,X
0218   E870 97 C2       					staa	sys_temp5
0219   E872 BD ED 43    					jsr	sw_down
0220   E875 DE C6       					ldx	sys_temp_w3
0221   E877 24 07       					bcc	sw_break
0222   E879 BD EE 4E    					jsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
0223   E87C 20 D0       					bra	next_sw
0224   E87E             				endif
0224   E87E             
0224   E87E             
0224   E87E             
0224   E87E             
0224   E87E             
0224   E87E~            				endif
0224   E87E~            				endif
0224   E87E             
0224   E87E~            				endif
0224   E87E~            				endif
0224   E87E             
0224   E857             
0224   E857 26          
0224   E858             
0224   E858             
0224   E858~            				endif
0224   E858~            				endif
0224   E858~            				endif
0224   E858             
0224   E87E             
0224   E87E~            				endif
0224   E87E~            				endif
0224   E87E             
0225   E87E A7 00       				staa	$00,X
0226   E880 08          sw_break			inx	
0227   E881 08          				inx	
0228   E882 20 CA       				bra	next_sw
0229   E884             			endif
0229   E884             
0229   E884             
0229   E884             
0229   E884             
0229   E884             
0229   E884~            			endif
0229   E884~            			endif
0229   E884             
0229   E884~            			endif
0229   E884~            			endif
0229   E884             
0229   E851             
0229   E851 32          
0229   E852             
0229   E852             
0229   E852~            			endif
0229   E852~            			endif
0229   E852~            			endif
0229   E852             
0229   E884             
0229   E884~            			endif
0229   E884~            			endif
0229   E884             
0230   E884             ;Entry here if we are in auto-cycle mode...						
0231   E884 DE CB       vm_irqcheck		ldx	vm_base				;Check the start of the vm loop
0232   E886             			begin
0232   E886             
0233   E886 27 0D       				beq	flashlamp
0234   E888 A6 02       				ldaa	$02,X
0235   E88A 90 CA       				suba	irqcount			;Subtract the number of IRQ loops completed
0236   E88C             				ifcs
0236   E88C             
0236   E88C 24 FE       
0237   E88E 4F          					clra					;Clear it so it can be run next loop
0238   E88F             				endif
0238   E88F             
0238   E88F             
0238   E88F             
0238   E88F             
0238   E88F             
0238   E88F~            				endif
0238   E88F~            				endif
0238   E88F             
0238   E88F~            				endif
0238   E88F~            				endif
0238   E88F             
0238   E88D             
0238   E88D 01          
0238   E88E             
0238   E88E             
0238   E88E~            				endif
0238   E88E~            				endif
0238   E88E~            				endif
0238   E88E             
0238   E88F             
0238   E88F~            				endif
0238   E88F~            				endif
0238   E88F             
0239   E88F A7 02       				staa	$02,X
0240   E891 EE 00       				ldx	$00,X
0241   E893             			loopend
0241   E893             
0241   E893             
0241   E893~            			loopend
0241   E893~            			loopend
0241   E893~            			loopend
0241   E893             
0241   E893 20 F1       
0241   E895             
0241   E895~            			loopend
0241   E895~            			loopend
0241   E895             
0242   E895 96 D4       flashlamp		ldaa	lamp_flash_count		;Timer for Flashing Lamps
0243   E897 90 CA       			suba	irqcount			;Subtract the IRQ's
0244   E899             			iflo
0244   E899             
0244   E899 22 FE       
0245   E89B CE 00 00    				ldx	#ram_base
0246   E89E C6 0C       				ldab	#$0C				;12 rows in Hyperball games, instead of 8
0247   E8A0             				begin
0247   E8A0             
0248   E8A0 A6 10       					ldaa	lampbuffer0,X			;Invert Selected Lamps.
0249   E8A2 A8 40       					eora	lampflashflag,X
0250   E8A4 A7 10       					staa	lampbuffer0,X
0251   E8A6 08          					inx	
0252   E8A7 5A          					decb	
0253   E8A8             				eqend
0253   E8A8             
0253   E8A8             
0253   E8A8~            				eqend
0253   E8A8~            				eqend
0253   E8A8~            				eqend
0253   E8A8             
0253   E8A8 26 F6       
0253   E8AA             
0253   E8AA~            				eqend
0253   E8AA~            				eqend
0253   E8AA             
0254   E8AA 96 D3       				ldaa	lamp_flash_rate		;Get Reset Value
0255   E8AC             			endif
0255   E8AC             
0255   E8AC             
0255   E8AC             
0255   E8AC             
0255   E8AC             
0255   E8AC~            			endif
0255   E8AC~            			endif
0255   E8AC             
0255   E8AC~            			endif
0255   E8AC~            			endif
0255   E8AC             
0255   E89A             
0255   E89A 11          
0255   E89B             
0255   E89B             
0255   E89B~            			endif
0255   E89B~            			endif
0255   E89B~            			endif
0255   E89B             
0255   E8AC             
0255   E8AC~            			endif
0255   E8AC~            			endif
0255   E8AC             
0256   E8AC 97 D4       			staa	lamp_flash_count			;Reset the Lamp Timer
0257   E8AE 96 B2       solq			ldaa	solenoid_counter			;Solenoid Counter
0258   E8B0             			ifeq						;Skip if Counter hasnt Expired
0258   E8B0             
0258   E8B0 26 FE       
0259   E8B2 CE 11 18    				ldx	#sol_queue				;Start at bottom of Queue
0260   E8B5 9C B6       				cpx	solenoid_queue_pointer		
0261   E8B7             				ifne						;Do we have any to do?
0261   E8B7             
0261   E8B7 27 FE       
0262   E8B9 A6 00       					ldaa	$00,X					;Takes lowest Solenoid # into A
0263   E8BB             											;We only do 1 solenoid at a time
0264   E8BB             					begin
0264   E8BB             
0265   E8BB E6 01       						ldab	$01,X					;Moves the rest down into place
0266   E8BD E7 00       						stab	$00,X
0267   E8BF 08          						inx	
0268   E8C0 9C B6       						cpx	solenoid_queue_pointer
0269   E8C2             					eqend
0269   E8C2             
0269   E8C2             
0269   E8C2~            					eqend
0269   E8C2~            					eqend
0269   E8C2~            					eqend
0269   E8C2             
0269   E8C2 26 F7       
0269   E8C4             
0269   E8C4~            					eqend
0269   E8C4~            					eqend
0269   E8C4             
0270   E8C4 09          					dex	
0271   E8C5 DF B6       					stx	solenoid_queue_pointer		;Adjust Pointer to end of list
0272   E8C7 BD EA A7    					jsr	set_solenoid			;Turn On/Off Solenoid (Solenoid # in A)
0273   E8CA             				endif
0273   E8CA             
0273   E8CA             
0273   E8CA             
0273   E8CA             
0273   E8CA             
0273   E8CA~            				endif
0273   E8CA~            				endif
0273   E8CA             
0273   E8CA~            				endif
0273   E8CA~            				endif
0273   E8CA             
0273   E8B8             
0273   E8B8 11          
0273   E8B9             
0273   E8B9             
0273   E8B9~            				endif
0273   E8B9~            				endif
0273   E8B9~            				endif
0273   E8B9             
0273   E8CA             
0273   E8CA~            				endif
0273   E8CA~            				endif
0273   E8CA             
0274   E8CA             			endif
0274   E8CA             
0274   E8CA             
0274   E8CA             
0274   E8CA             
0274   E8CA             
0274   E8CA~            			endif
0274   E8CA~            			endif
0274   E8CA             
0274   E8CA~            			endif
0274   E8CA~            			endif
0274   E8CA             
0274   E8B1             
0274   E8B1 18          
0274   E8B2             
0274   E8B2             
0274   E8B2~            			endif
0274   E8B2~            			endif
0274   E8B2~            			endif
0274   E8B2             
0274   E8CA             
0274   E8CA~            			endif
0274   E8CA~            			endif
0274   E8CA             
0275   E8CA 96 DF       snd_queue		ldaa	sys_soundflags			;Sound Flag??
0276   E8CC             			ifne						;If not zero, time to check for the score queue sound/pts
0276   E8CC             
0276   E8CC 27 FE       
0277   E8CE 96 D8       				ldaa	cur_sndflags
0278   E8D0 85 10       				bita	#$10					;Is this an immediate or timed sound?
0279   E8D2             				ifne
0279   E8D2             
0279   E8D2 27 FE       
0280   E8D4 F6 21 02    					ldab	pia_comma_data			;Do immediate, but only if sound board is not busy.
0281   E8D7 C4 20       					andb	#$20
0282   E8D9 27 5F       					beq	check_threads			;Get Outta Here
0283   E8DB             				else
0283   E8DB             
0283   E8DB             
0283   E8DB             
0283   E8DB             
0283   E8D3             
0283   E8D3             
0283   E8D3             
0283   E8D3~            				else
0283   E8D3~            				else
0283   E8D3~            				else
0283   E8D3~            				else
0283   E8D3             
0283   E8D3~            				else
0283   E8D3~            				else
0283   E8D3~            				else
0283   E8D3~            				else
0283   E8D3             
0283   E8D3             
0283   E8D3 09          
0283   E8DB             
0283   E8DB 20 FE       
0283   E8DD             
0283   E8DD             
0283   E8DD             
0283   E8DD~            				else
0283   E8DD~            				else
0283   E8DD~            				else
0283   E8DD~            				else
0283   E8DD~            				else
0283   E8DD             
0283   E8DD~            				else
0283   E8DD~            				else
0283   E8DD             
0283   E8DD~            				else
0283   E8DD~            				else
0283   E8DD             
0284   E8DD 96 DC       					ldaa	soundirqcount+1			;LSB Sound IRQ Counter
0285   E8DF 90 CA       					suba	irqcount				;Subtract the number of IRQ's that have cycled
0286   E8E1 97 DC       					staa	soundirqcount+1
0287   E8E3 96 DB       					ldaa	soundirqcount			;Update the counter
0288   E8E5 82 00       					sbca	#$00
0289   E8E7 97 DB       					staa	soundirqcount			;Carry over to MSB of couter as well
0290   E8E9 24 4F       					bcc	check_threads			;Leave if counter has not gone under zero.
0291   E8EB             				endif
0291   E8EB             
0291   E8EB             
0291   E8EB             
0291   E8EB             
0291   E8EB             
0291   E8EB~            				endif
0291   E8EB~            				endif
0291   E8EB             
0291   E8EB~            				endif
0291   E8EB~            				endif
0291   E8EB             
0291   E8DC             
0291   E8DC 0E          
0291   E8DD             
0291   E8DD             
0291   E8DD~            				endif
0291   E8DD~            				endif
0291   E8DD~            				endif
0291   E8DD             
0291   E8EB             
0291   E8EB~            				endif
0291   E8EB~            				endif
0291   E8EB             
0292   E8EB 86 7F       				ldaa	#$7F
0293   E8ED BD EC DF    				jsr	send_snd			;Send A->Sound Board (mute?)
0294   E8F0 96 D8       				ldaa	cur_sndflags		;Is this a simple sound
0295   E8F2             				ifpl					;yes
0295   E8F2             
0295   E8F2 2B FE       
0296   E8F4 7A 00 D6    					dec	soundcount
0297   E8F7 27 1C       					beq	_sndnext			;Sound Repeat Counter
0298   E8F9 D6 DF       					ldab	sys_soundflags		;
0299   E8FB             					ifpl
0299   E8FB             
0299   E8FB 2B FE       
0300   E8FD DE DD       						ldx	soundindex_com
0301   E8FF DF DB       						stx	soundirqcount
0302   E901 96 D7       						ldaa	lastsound
0303   E903 BD EC DD    						jsr	send_snd_save		;Send the Command, Save in 'lastsound'
0304   E906 20 32       						bra	check_threads		;Get Outta here.
0305   E908             					endif
0305   E908             
0305   E908             
0305   E908             
0305   E908             
0305   E908             
0305   E908~            					endif
0305   E908~            					endif
0305   E908             
0305   E908~            					endif
0305   E908~            					endif
0305   E908             
0305   E8FC             
0305   E8FC 0B          
0305   E8FD             
0305   E8FD             
0305   E8FD~            					endif
0305   E8FD~            					endif
0305   E8FD~            					endif
0305   E8FD             
0305   E908             
0305   E908~            					endif
0305   E908~            					endif
0305   E908             
0306   E908 8A 80       					oraa	#$80
0307   E90A 97 D8       					staa	cur_sndflags		;make it a complex sound now.
0308   E90C DE DD       					ldx	soundindex_com
0309   E90E DF D9       					stx	soundptr
0310   E910             				endif
0310   E910             
0310   E910             
0310   E910             
0310   E910             
0310   E910             
0310   E910~            				endif
0310   E910~            				endif
0310   E910             
0310   E910~            				endif
0310   E910~            				endif
0310   E910             
0310   E8F3             
0310   E8F3 1C          
0310   E8F4             
0310   E8F4             
0310   E8F4~            				endif
0310   E8F4~            				endif
0310   E8F4~            				endif
0310   E8F4             
0310   E910             
0310   E910~            				endif
0310   E910~            				endif
0310   E910             
0311   E910 BD EC E6    				jsr	do_complex_snd
0312   E913 20 25       				bra	check_threads		;Get Outta Here.
0313   E915 D6 E4       _sndnext			ldab	next_sndcnt			;Here if we are done iterating the sound command.
0314   E917             				ifne			;Check the scoring queue
0314   E917             
0314   E917 27 FE       
0315   E919 96 E5       					ldaa	next_sndcmd
0316   E91B BD EC 92    					jsr	isnd_mult			;Play Sound Index(A),(B)Times
0317   E91E 7F 00 E4    					clr	next_sndcnt
0318   E921 20 17       					bra	check_threads		;Get Outta Here.
0319   E923             				endif
0319   E923             
0319   E923             
0319   E923             
0319   E923             
0319   E923             
0319   E923~            				endif
0319   E923~            				endif
0319   E923             
0319   E923~            				endif
0319   E923~            				endif
0319   E923             
0319   E918             
0319   E918 0A          
0319   E919             
0319   E919             
0319   E919~            				endif
0319   E919~            				endif
0319   E919~            				endif
0319   E919             
0319   E923             
0319   E923~            				endif
0319   E923~            				endif
0319   E923             
0320   E923             			endif
0320   E923             
0320   E923             
0320   E923             
0320   E923             
0320   E923             
0320   E923~            			endif
0320   E923~            			endif
0320   E923             
0320   E923~            			endif
0320   E923~            			endif
0320   E923             
0320   E8CD             
0320   E8CD 55          
0320   E8CE             
0320   E8CE             
0320   E8CE~            			endif
0320   E8CE~            			endif
0320   E8CE~            			endif
0320   E8CE             
0320   E923             
0320   E923~            			endif
0320   E923~            			endif
0320   E923             
0321   E923 7F 00 DF    doscoreq		clr	sys_soundflags		;Reset the Sound Flag??
0322   E926 CE 11 27    			ldx	#$1127			;See if there is something in this stack
0323   E929 86 08       			ldaa	#$08
0324   E92B             			begin
0324   E92B             
0325   E92B 08          				inx	
0326   E92C 4A          				deca	
0327   E92D 2B 0B       				bmi	check_threads		;Nuttin' Honey, Skip this Sound Crap!
0328   E92F E6 00       				ldab	$00,X
0329   E931             			neend					;Nuttin' Honey, Check next Entry!
0329   E931             
0329   E931             
0329   E931~            			neend					;Nuttin' Honey, Check next Entry!
0329   E931~            			neend					;Nuttin' Honey, Check next Entry!
0329   E931~            			neend					;Nuttin' Honey, Check next Entry!
0329   E931             
0329   E931 27 F8       
0329   E933             
0329   E933~            			neend					;Nuttin' Honey, Check next Entry!
0329   E933~            			neend					;Nuttin' Honey, Check next Entry!
0329   E933             
0330   E933 6A 00       			dec	$00,X				;Re-Adjust the Sound Command So Sound #00 will still work!
0331   E935 8A 08       			oraa	#$08
0332   E937 BD EB 36    			jsr	dsnd_pts			;Add Points(A),Play Digit Sound
0333   E93A             
0334   E93A CE 00 CB    check_threads	ldx	#vm_base
0335   E93D             			begin
0335   E93D             
0336   E93D EE 00       nextthread			ldx	$00,X				;Check to see if we have a routine to do?
0337   E93F             				ifeq
0337   E93F             
0337   E93F 26 FE       
0338   E941 7E E7 EB    					jmp main				;Back to the start of the main loop
0339   E944             				endif
0339   E944             
0339   E944             
0339   E944             
0339   E944             
0339   E944             
0339   E944~            				endif
0339   E944~            				endif
0339   E944             
0339   E944~            				endif
0339   E944~            				endif
0339   E944             
0339   E940             
0339   E940 03          
0339   E941             
0339   E941             
0339   E941~            				endif
0339   E941~            				endif
0339   E941~            				endif
0339   E941             
0339   E944             
0339   E944~            				endif
0339   E944~            				endif
0339   E944             
0340   E944 A6 02       				ldaa	$02,X				;Timer expired?
0341   E946             			eqend					;No, goto next one.
0341   E946             
0341   E946             
0341   E946~            			eqend					;No, goto next one.
0341   E946~            			eqend					;No, goto next one.
0341   E946~            			eqend					;No, goto next one.
0341   E946             
0341   E946 26 F5       
0341   E948             
0341   E948~            			eqend					;No, goto next one.
0341   E948~            			eqend					;No, goto next one.
0341   E948             
0342   E948 DF CF       			stx	current_thread		;Yes, lets do this one now.
0343   E94A DF D1       			stx	vm_tail_thread		;Current VM Routine being run
0344   E94C A6 03       			ldaa	$03,X
0345   E94E 36          			psha	
0346   E94F A6 04       			ldaa	$04,X
0347   E951 36          			psha	
0348   E952 A6 05       			ldaa	$05,X
0349   E954 36          			psha	
0350   E955 A6 06       			ldaa	$06,X
0351   E957 36          			psha
0352   E958 A6 07       			ldaa	$07,X
0353   E95A 36          			psha
0354   E95B A6 08       			ldaa	$08,X
0355   E95D 36          			psha
0356   E95E A6 09       			ldaa	$09,X
0357   E960 36          			psha
0358   E961 A6 0A       			ldaa	$0A,X
0359   E963 36          			psha
0360   E964 A6 0C       			ldaa	$0C,X
0361   E966 36          			psha
0362   E967 A6 0B       			ldaa	$0B,X
0363   E969 36          			psha
0364   E96A A6 0E       			ldaa	$0E,X
0365   E96C E6 0F       			ldab	$0F,X
0366   E96E EE 10       			ldx	$10,X
0367   E970 39          			rts					;Jump to the offending routine.
0368   E971             
0369   E971             ;**************************************************************************
0370   E971             ;* This is similar to 'addthread' below but the timer data does not follow
0371   E971             ;* the jsr. Instead, the timer data is pre-loaded into 'thread_timer_byte'.
0372   E971             ;* The thread is started in the same manner as described below.
0373   E971             ;**************************************************************************			
0374   E971 97 BA       delaythread		staa	temp2				;Routine returns here when done
0375   E973 DF B8       			stx	temp1
0376   E975 96 D5       			ldaa	thread_timer_byte
0377   E977 30          			tsx					;Get where we came from
0378   E978 EE 00       			ldx	$00,X				;Get the address of the new thread
0379   E97A 20 0A       			bra	dump_thread
0380   E97C             
0381   E97C             ;**************************************************************************
0382   E97C             ;* Adds a new thread to the VM. The data for this routine is contained 
0383   E97C             ;* directly after the jsr to this routine. A single byte follows the
0384   E97C             ;* jsr and is the timer byte used for the delay until the thread starts.
0385   E97C             ;* The actual address directly after the timer byte is where the thread
0386   E97C             ;* will start running. Example:
0387   E97C             ;*
0388   E97C             ;* 	jsr addthread
0389   E97C             ;*    .db 05		;This is the timer byte
0390   E97C             ;*	ldaa #FF		;This code is executed as the thread.
0391   E97C             ;***************************************************************************
0392   E97C DF B8       addthread		stx	temp1
0393   E97E 97 BA       			staa	temp2
0394   E980 30          			tsx	
0395   E981 EE 00       			ldx	$00,X				;Return Address from rts to $EA2F
0396   E983 A6 00       			ldaa	$00,X				;New Timer Value
0397   E985 08          			inx	
0398   E986             
0399   E986             ;**************************************************************************
0400   E986             ;* Will take all variables in RAM and dump them into the thread data 
0401   E986             ;* structure for next time. This gives the thread memory over executions
0402   E986             ;* until it is killed.
0403   E986             ;**************************************************************************			
0404   E986 DF BC       dump_thread		stx	temp3				;Now X points the the replacement address
0405   E988 DE CF       			ldx	current_thread		;Current VM Routine being run
0406   E98A A7 02       			staa	$02,X				;Timer For next Time
0407   E98C 96 BC       			ldaa	temp3
0408   E98E A7 0B       			staa	$0B,X
0409   E990 96 BD       			ldaa	temp3+1
0410   E992 A7 0C       			staa	$0C,X
0411   E994 E7 0F       			stab	$0F,X
0412   E996 96 BA       			ldaa	temp2
0413   E998 A7 0E       			staa	$0E,X
0414   E99A 96 B8       			ldaa	temp1
0415   E99C A7 10       			staa	$10,X
0416   E99E 96 B9       			ldaa	temp1+1
0417   E9A0 A7 11       			staa	$11,X
0418   E9A2 31          			ins	
0419   E9A3 31          			ins	
0420   E9A4 32          			pula
0421   E9A5 A7 0A       			staa	$0A,X
0422   E9A7 32          			pula
0423   E9A8 A7 09       			staa	$09,X
0424   E9AA 32          			pula
0425   E9AB A7 08       			staa	$08,X
0426   E9AD 32          			pula
0427   E9AE A7 07       			staa	$07,X
0428   E9B0 32          			pula
0429   E9B1 A7 06       			staa	$06,X
0430   E9B3 32          			pula
0431   E9B4 A7 05       			staa	$05,X
0432   E9B6 32          			pula
0433   E9B7 A7 04       			staa	$04,X
0434   E9B9 32          			pula
0435   E9BA A7 03       			staa	$03,X
0436   E9BC DE CF       			ldx	current_thread			;Current VM Routine being run
0437   E9BE             			begin
0437   E9BE             
0438   E9BE 8E 13 F7    				lds	#$13F7			;Restore the stack.
0439   E9C1 7E E9 3D    				jmp	nextthread			;Go check the Control Routine for another job.
0440   E9C4             				
0441   E9C4 CE 00 CB    killthread			ldx	#vm_base
0442   E9C7             				begin
0442   E9C7             
0443   E9C7 DF BA       					stx	temp2					;Thread that points to killed thread
0444   E9C9 EE 00       					ldx	$00,X
0445   E9CB             					ifeq
0445   E9CB             
0445   E9CB 26 FE       
0446   E9CD 7E E9 3A    						jmp	check_threads			;Nothing on VM
0447   E9D0             					endif
0447   E9D0             
0447   E9D0             
0447   E9D0             
0447   E9D0             
0447   E9D0             
0447   E9D0~            					endif
0447   E9D0~            					endif
0447   E9D0             
0447   E9D0~            					endif
0447   E9D0~            					endif
0447   E9D0             
0447   E9CC             
0447   E9CC 03          
0447   E9CD             
0447   E9CD             
0447   E9CD~            					endif
0447   E9CD~            					endif
0447   E9CD~            					endif
0447   E9CD             
0447   E9D0             
0447   E9D0~            					endif
0447   E9D0~            					endif
0447   E9D0             
0448   E9D0 9C CF       					cpx	current_thread			;Current VM Routine being run
0449   E9D2             				eqend						;If $B1 != *$00AD check next entry
0449   E9D2             
0449   E9D2             
0449   E9D2~            				eqend						;If $B1 != *$00AD check next entry
0449   E9D2~            				eqend						;If $B1 != *$00AD check next entry
0449   E9D2~            				eqend						;If $B1 != *$00AD check next entry
0449   E9D2             
0449   E9D2 26 F3       
0449   E9D4             
0449   E9D4~            				eqend						;If $B1 != *$00AD check next entry
0449   E9D4~            				eqend						;If $B1 != *$00AD check next entry
0449   E9D4             
0450   E9D4 8D 56       				bsr	killthread_sp			;Remove Entry (X)($B1) From VM
0451   E9D6             			loopend
0451   E9D6             
0451   E9D6             
0451   E9D6~            			loopend
0451   E9D6~            			loopend
0451   E9D6~            			loopend
0451   E9D6             
0451   E9D6 20 E6       
0451   E9D8             
0451   E9D8~            			loopend
0451   E9D8~            			loopend
0451   E9D8             
0452   E9D8             			
0453   E9D8             ;****************************************************************************
0454   E9D8             ;* This is the main routine in charge of adding new threads to the
0455   E9D8             ;* virtual machine. The following variables are passed.
0456   E9D8             ;*
0457   E9D8             ;*	A: Pushed into VMregA
0458   E9D8             ;* 	B: Pushed into VMregB
0459   E9D8             ;*	X: Thread Initial Program Counter
0460   E9D8             ;* 	
0461   E9D8             ;* In addition, the following two variables contain data for the
0462   E9D8             ;* thread.
0463   E9D8             ;*	thread_priority:		Unique Identifier to classify thread
0464   E9D8             ;*	system_temp_word2:	???
0465   E9D8             ;*
0466   E9D8             ;* See header definition file for specifics on thread class structure
0467   E9D8             ;*
0468   E9D8             ;* Returns: Carry Cleared if New Thread was added
0469   E9D8             ;*          Carry Set if VM was full
0470   E9D8             ;*
0471   E9D8             ;**************************************************************************** 
0472   E9D8 DF B8       newthread_sp	stx	temp1
0473   E9DA 0D          			sec	
0474   E9DB DE CD       			ldx	vm_nextslot			;Get Next Available Slot Address
0475   E9DD             			ifne
0475   E9DD             
0475   E9DD 27 FE       
0476   E9DF 36          				psha	
0477   E9E0 A6 00       				ldaa	$00,X				;\
0478   E9E2 97 CD       				staa	vm_nextslot			;|---- Set New Next Available Slot Address
0479   E9E4 A6 01       				ldaa	$01,X				;|
0480   E9E6 97 CE       				staa	vm_nextslot+1		;/
0481   E9E8 DF BA       				stx	temp2				;Temp2 = New Thread Base Address
0482   E9EA DE D1       				ldx	vm_tail_thread		;This is the last thread in the vm, it has the tail
0483   E9EC A6 00       				ldaa	$00,X				;\
0484   E9EE 97 BC       				staa	temp3				;|
0485   E9F0 A6 01       				ldaa	$01,X				;|---- Store the running threads next pointer in temp3
0486   E9F2 97 BD       				staa	temp3+1			;/
0487   E9F4 96 BA       				ldaa	temp2				;\
0488   E9F6 A7 00       				staa	$00,X				;|
0489   E9F8 96 BB       				ldaa	temp2+1			;|---- Put the new thread into the running threads next pointer
0490   E9FA A7 01       				staa	$01,X				;/
0491   E9FC EE 00       				ldx	$00,X
0492   E9FE DF D1       				stx	vm_tail_thread		;Make the new thread the last thread
0493   EA00 96 BC       				ldaa	temp3				;\
0494   EA02 A7 00       				staa	$00,X				;|
0495   EA04 96 BD       				ldaa	temp3+1			;|---- Set the Next pointer of the new thread to the 
0496   EA06 A7 01       				staa	$01,X				;/     previous threads next pointer.
0497   EA08 96 B8       				ldaa	temp1
0498   EA0A A7 0B       				staa	$0B,X
0499   EA0C 96 B9       				ldaa	temp1+1
0500   EA0E A7 0C       				staa	$0C,X
0501   EA10 96 C8       				ldaa	thread_priority		;Store the priority
0502   EA12 A7 0D       				staa	$0D,X
0503   EA14 96 C4       				ldaa	sys_temp_w2			;Push variables from sys_temp_w2
0504   EA16 A7 10       				staa	$10,X
0505   EA18 96 C5       				ldaa	sys_temp_w2+1
0506   EA1A A7 11       				staa	$11,X
0507   EA1C 32          				pula	
0508   EA1D A7 0E       				staa	$0E,X				;Store reg A
0509   EA1F E7 0F       				stab	$0F,X				;Store reg B
0510   EA21 6F 02       				clr	$02,X				;Reset the counter
0511   EA23             			endif
0511   EA23             
0511   EA23             
0511   EA23             
0511   EA23             
0511   EA23             
0511   EA23~            			endif
0511   EA23~            			endif
0511   EA23             
0511   EA23~            			endif
0511   EA23~            			endif
0511   EA23             
0511   E9DE             
0511   E9DE 44          
0511   E9DF             
0511   E9DF             
0511   E9DF~            			endif
0511   E9DF~            			endif
0511   E9DF~            			endif
0511   E9DF             
0511   EA23             
0511   EA23~            			endif
0511   EA23~            			endif
0511   EA23             
0512   EA23 39          			rts	
0513   EA24             
0514   EA24 36          newthread_06	psha	
0515   EA25 86 06       			ldaa	#$06
0516   EA27 97 C8       			staa	thread_priority
0517   EA29 32          			pula	
0518   EA2A 20 AC       			bra	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
0519   EA2C             
0520   EA2C             ;***************************************************************************
0521   EA2C             ;* This will remove the current thread from the VM. 
0522   EA2C             ;*
0523   EA2C             ;* Requires: temp2 holds the thread that points to the thread to be killed	
0524   EA2C             ;***************************************************************************		
0525   EA2C 36          killthread_sp	psha	
0526   EA2D A6 00       			ldaa	$00,X					;\
0527   EA2F 97 B8       			staa	temp1					;|--  Get 'next'
0528   EA31 A6 01       			ldaa	$01,X					;|
0529   EA33 97 B9       			staa	temp1+1				;/
0530   EA35 96 CD       			ldaa	vm_nextslot				;\
0531   EA37 A7 00       			staa	$00,X					;|--  Kill this one by setting next to 0
0532   EA39 96 CE       			ldaa	vm_nextslot+1			;|
0533   EA3B A7 01       			staa	$01,X					;/
0534   EA3D DF CD       			stx	vm_nextslot				;Make this new blank spot the next one
0535   EA3F 9C D1       			cpx	vm_tail_thread			;Unless this was the tail thread
0536   EA41             			ifeq
0536   EA41             
0536   EA41 26 FE       
0537   EA43 DE CF       				ldx	current_thread			;Make the current thread the tail
0538   EA45 DF D1       				stx	vm_tail_thread
0539   EA47             			endif
0539   EA47             
0539   EA47             
0539   EA47             
0539   EA47             
0539   EA47             
0539   EA47~            			endif
0539   EA47~            			endif
0539   EA47             
0539   EA47~            			endif
0539   EA47~            			endif
0539   EA47             
0539   EA42             
0539   EA42 04          
0539   EA43             
0539   EA43             
0539   EA43~            			endif
0539   EA43~            			endif
0539   EA43~            			endif
0539   EA43             
0539   EA47             
0539   EA47~            			endif
0539   EA47~            			endif
0539   EA47             
0540   EA47 DE BA       			ldx	temp2					;Get Parent Thread
0541   EA49 96 B8       			ldaa	temp1					;Store killed thread 'next' into parents 'next'
0542   EA4B A7 00       			staa	$00,X
0543   EA4D 96 B9       			ldaa	temp1+1
0544   EA4F A7 01       			staa	$01,X
0545   EA51 32          			pula						;Save A
0546   EA52 39          			rts	
0547   EA53             
0548   EA53             ;*************************************************
0549   EA53             ;* Kill Single thread with the given ID
0550   EA53             ;*
0551   EA53             ;* Requires: 	A - Level Defintion
0552   EA53             ;* 			B - Select Mask
0553   EA53             ;* 
0554   EA53             ;* If B is $00, then all threads are cleared
0555   EA53             ;*************************************************			
0556   EA53 8D 0B       kill_thread		bsr	check_threadid		;Test Thread ID Mask
0557   EA55             			ifcc					;Return with Carry Set
0557   EA55             
0557   EA55 25 FE       
0558   EA57 8D D3       				bsr	killthread_sp		;Remove Entry (X)($B1) From VM
0559   EA59 0C          				clc	
0560   EA5A             			endif
0560   EA5A             
0560   EA5A             
0560   EA5A             
0560   EA5A             
0560   EA5A             
0560   EA5A~            			endif
0560   EA5A~            			endif
0560   EA5A             
0560   EA5A~            			endif
0560   EA5A~            			endif
0560   EA5A             
0560   EA56             
0560   EA56 03          
0560   EA57             
0560   EA57             
0560   EA57~            			endif
0560   EA57~            			endif
0560   EA57~            			endif
0560   EA57             
0560   EA5A             
0560   EA5A~            			endif
0560   EA5A~            			endif
0560   EA5A             
0561   EA5A 39          			rts
0562   EA5B             
0563   EA5B             ;*************************************************
0564   EA5B             ;* Kill All threads with the given ID
0565   EA5B             ;*
0566   EA5B             ;* Requires: 	A - Level Definition
0567   EA5B             ;* 			B - Select Mask
0568   EA5B             ;* 
0569   EA5B             ;* If B is $00, then all threads are cleared
0570   EA5B             ;*************************************************
0571   EA5B             kill_threads	begin
0571   EA5B             
0572   EA5B 8D F6       				bsr	kill_thread		;Kill first One
0573   EA5D             			csend				;Repeat if Carry Clear
0573   EA5D             
0573   EA5D             
0573   EA5D~            			csend				;Repeat if Carry Clear
0573   EA5D~            			csend				;Repeat if Carry Clear
0573   EA5D~            			csend				;Repeat if Carry Clear
0573   EA5D             
0573   EA5D 24 FC       
0573   EA5F             
0573   EA5F~            			csend				;Repeat if Carry Clear
0573   EA5F~            			csend				;Repeat if Carry Clear
0573   EA5F             
0574   EA5F 39          			rts
0575   EA60             
0576   EA60             ;*************************************************
0577   EA60             ;* Checks the VM thread list for threads that 
0578   EA60             ;* qualify agains the bitmasks defined in A and B.
0579   EA60             ;* If a thread qualifies, then this routine will
0580   EA60             ;* return with carry cleared.
0581   EA60             ;*************************************************		
0582   EA60 37          check_threadid	pshb	
0583   EA61 D7 B8       			stab	temp1
0584   EA63 CE 00 CB    			ldx	#vm_base		;Load Start Address
0585   EA66 DF BA       			stx	temp2			;Store it
0586   EA68 DE CB       			ldx	vm_base		;Load End Address
0587   EA6A 0D          pri_next		sec	
0588   EA6B             			ifne				;Branch if we have reached the end of the VM (Next = 0000)
0588   EA6B             
0588   EA6B 27 FE       
0589   EA6D 16          				tab	
0590   EA6E E8 0D       				eorb	threadobj_id,X		;EOR with Type Code in Current Routine
0591   EA70 53          				comb	
0592   EA71 D4 B8       				andb	temp1
0593   EA73 D1 B8       				cmpb	temp1
0594   EA75             				ifne				;Branch if Bits Dont work
0594   EA75             
0594   EA75 27 FE       
0595   EA77 DF BA       pri_skipme				stx	temp2
0596   EA79 EE 00       					ldx	threadobj_next,X
0597   EA7B 20 ED       					bra	pri_next		;Goto Next Thread ->
0598   EA7D             				endif
0598   EA7D             
0598   EA7D             
0598   EA7D             
0598   EA7D             
0598   EA7D             
0598   EA7D~            				endif
0598   EA7D~            				endif
0598   EA7D             
0598   EA7D~            				endif
0598   EA7D~            				endif
0598   EA7D             
0598   EA76             
0598   EA76 06          
0598   EA77             
0598   EA77             
0598   EA77~            				endif
0598   EA77~            				endif
0598   EA77~            				endif
0598   EA77             
0598   EA7D             
0598   EA7D~            				endif
0598   EA7D~            				endif
0598   EA7D             
0599   EA7D 9C CF       				cpx	current_thread	;Make sure it isn't this thread
0600   EA7F 27 F6       				beq	pri_skipme		;If it is this thread, skip it!
0601   EA81             			endif
0601   EA81             
0601   EA81             
0601   EA81             
0601   EA81             
0601   EA81             
0601   EA81~            			endif
0601   EA81~            			endif
0601   EA81             
0601   EA81~            			endif
0601   EA81~            			endif
0601   EA81             
0601   EA6C             
0601   EA6C 14          
0601   EA6D             
0601   EA6D             
0601   EA6D~            			endif
0601   EA6D~            			endif
0601   EA6D~            			endif
0601   EA6D             
0601   EA81             
0601   EA81~            			endif
0601   EA81~            			endif
0601   EA81             
0602   EA81 33          			pulb	
0603   EA82 39          			rts	
0604   EA83             	
0605   EA83             ;*****************************************************************	
0606   EA83             ;* Solenoid Queue Processing: This is the routine that is called
0607   EA83             ;* to fire a specific solenoid. It will add the solenoid to the 
0608   EA83             ;* queue. Works from top down. Solenoid Number is in A along with
0609   EA83             ;* data on how to handle solenoid. Format of A is ...
0610   EA83             ;*
0611   EA83             ;*  	XXXZZZZZ	Where: ZZZZZ is solenoid number 00-07
0612   EA83             ;*                       XXX is timer/command
0613   EA83             ;*
0614   EA83             ;* NOTE: Hyperball only allows 8 solenoids + Shooter + BallLift
0615   EA83             ;*****************************************************************		
0616   EA83 36          solbuf		psha					;Push Solenoid #
0617   EA84 37          			pshb	
0618   EA85 DF B8       			stx	temp1				;Put X into Temp1
0619   EA87 DE B6       			ldx	solenoid_queue_pointer	;Check Solenoid Buffer
0620   EA89 8C 11 18    			cpx	#sol_queue	
0621   EA8C             			ifne					;Buffer not full
0621   EA8C             
0621   EA8C 27 FE       
0622   EA8E 0D          				sec					;Carry Set if Buffer Full
0623   EA8F 8C 11 28    				cpx	#sol_queue_end		;Buffer end
0624   EA92             				ifne
0624   EA92             
0624   EA92 27 FE       
0625   EA94 A7 00       _sb01					staa	$00,X				;Insert Solenoid Into Buffer
0626   EA96 08          					inx	
0627   EA97 DF B6       					stx	solenoid_queue_pointer	;Update Pointer
0628   EA99 0C          _sb02					clc					;Carry Cleared on Buffer Add
0629   EA9A             				endif
0629   EA9A             
0629   EA9A             
0629   EA9A             
0629   EA9A             
0629   EA9A             
0629   EA9A~            				endif
0629   EA9A~            				endif
0629   EA9A             
0629   EA9A~            				endif
0629   EA9A~            				endif
0629   EA9A             
0629   EA93             
0629   EA93 06          
0629   EA94             
0629   EA94             
0629   EA94~            				endif
0629   EA94~            				endif
0629   EA94~            				endif
0629   EA94             
0629   EA9A             
0629   EA9A~            				endif
0629   EA9A~            				endif
0629   EA9A             
0630   EA9A 33          				pulb	
0631   EA9B 32          				pula					;Pull Solenoid #
0632   EA9C DE B8       				ldx	temp1				;Get Back X
0633   EA9E 39          				rts	
0634   EA9F             			endif
0634   EA9F             
0634   EA9F             
0634   EA9F             
0634   EA9F             
0634   EA9F             
0634   EA9F~            			endif
0634   EA9F~            			endif
0634   EA9F             
0634   EA9F~            			endif
0634   EA9F~            			endif
0634   EA9F             
0634   EA8D             
0634   EA8D 11          
0634   EA8E             
0634   EA8E             
0634   EA8E~            			endif
0634   EA8E~            			endif
0634   EA8E~            			endif
0634   EA8E             
0634   EA9F             
0634   EA9F~            			endif
0634   EA9F~            			endif
0634   EA9F             
0635   EA9F D6 B2       			ldab	solenoid_counter		;Solenoid Counter
0636   EAA1 26 F1       			bne	_sb01
0637   EAA3 8D 02       			bsr	set_solenoid		;Turn On/Off Solenoid (Solenoid # in A)
0638   EAA5 20 F2       			bra	_sb02
0639   EAA7             
0640   EAA7             ;***************************************************
0641   EAA7             ;* Turns On/Off solenoid.
0642   EAA7             ;*
0643   EAA7             ;* Requires:	A - XXXXZZZZ
0644   EAA7             ;*					
0645   EAA7             ;* Where XXXX 	= Solenoid Timer/Command
0646   EAA7             ;*       ZZZZ	= Solenoid Number
0647   EAA7             ;*
0648   EAA7             ;* Example: A = 20 turns on solenoid #00 for 2 IRQ's
0649   EAA7             ;*              F8 turns on solenoid #08 idefinitely
0650   EAA7             ;*              C3 turns on solenoid #03 for 12 IRQ's
0651   EAA7             ;*              03 turns off solenoid #03 indefinitely
0652   EAA7             ;***************************************************
0653   EAA7 37          set_solenoid	pshb	
0654   EAA8 16          			tab	
0655   EAA9 C4 F0       			andb	#$F0
0656   EAAB             			ifne
0656   EAAB             
0656   EAAB 27 FE       
0657   EAAD C1 F0       				cmpb	#$F0
0658   EAAF             				ifne
0658   EAAF             
0658   EAAF 27 FE       
0659   EAB1             					;1-15 goes into counter
0660   EAB1 D7 B2       set_sol_counter			stab	solenoid_counter		;Restore Solenoid Counter to #E0
0661   EAB3 8D 1C       					bsr	soladdr			;Get Solenoid PIA address and bitpos
0662   EAB5 DF AF       					stx	solenoid_address
0663   EAB7 D7 B1       					stab	solenoid_bitpos
0664   EAB9             				else
0664   EAB9             
0664   EAB9             
0664   EAB9             
0664   EAB9             
0664   EAB0             
0664   EAB0             
0664   EAB0             
0664   EAB0~            				else
0664   EAB0~            				else
0664   EAB0~            				else
0664   EAB0~            				else
0664   EAB0             
0664   EAB0~            				else
0664   EAB0~            				else
0664   EAB0~            				else
0664   EAB0~            				else
0664   EAB0             
0664   EAB0             
0664   EAB0 0A          
0664   EAB9             
0664   EAB9 20 FE       
0664   EABB             
0664   EABB             
0664   EABB             
0664   EABB~            				else
0664   EABB~            				else
0664   EABB~            				else
0664   EABB~            				else
0664   EABB~            				else
0664   EABB             
0664   EABB~            				else
0664   EABB~            				else
0664   EABB             
0664   EABB~            				else
0664   EABB~            				else
0664   EABB             
0665   EABB             					;Do it now... if at 0
0666   EABB 8D 14       					bsr	soladdr			;Get Solenoid PIA address and bitpos
0667   EABD             				endif
0667   EABD             
0667   EABD             
0667   EABD             
0667   EABD             
0667   EABD             
0667   EABD~            				endif
0667   EABD~            				endif
0667   EABD             
0667   EABD~            				endif
0667   EABD~            				endif
0667   EABD             
0667   EABA             
0667   EABA 02          
0667   EABB             
0667   EABB             
0667   EABB~            				endif
0667   EABB~            				endif
0667   EABB~            				endif
0667   EABB             
0667   EABD             
0667   EABD~            				endif
0667   EABD~            				endif
0667   EABD             
0668   EABD 25 0C       				bcs	set_ss_on			;Carry Set: Special Solenoid, these work in reverse
0669   EABF             				;Here to turn solenoid ON
0670   EABF 0F          set_ss_off			sei	
0671   EAC0 EA 00       				orab	$00,X
0672   EAC2 E7 00       set_s_pia			stab	$00,X			;Write Solenoid Data to PIA
0673   EAC4 0E          				cli	
0674   EAC5 33          				pulb	
0675   EAC6 39          				rts					;Outta here!
0676   EAC7             			endif
0676   EAC7             
0676   EAC7             
0676   EAC7             
0676   EAC7             
0676   EAC7             
0676   EAC7~            			endif
0676   EAC7~            			endif
0676   EAC7             
0676   EAC7~            			endif
0676   EAC7~            			endif
0676   EAC7             
0676   EAAC             
0676   EAAC 1A          
0676   EAAD             
0676   EAAD             
0676   EAAD~            			endif
0676   EAAD~            			endif
0676   EAAD~            			endif
0676   EAAD             
0676   EAC7             
0676   EAC7~            			endif
0676   EAC7~            			endif
0676   EAC7             
0677   EAC7 8D 08       			bsr	soladdr				;Get Solenoid PIA address and bitpos
0678   EAC9 25 F4       			bcs	set_ss_off				;Special Solenoids work in reverse
0679   EACB             			;Here to turn solenoid OFF			
0680   EACB 53          set_ss_on		comb	
0681   EACC 0F          			sei	
0682   EACD E4 00       			andb	$00,X
0683   EACF 20 F1       			bra	set_s_pia				;Store it now.
0684   EAD1             
0685   EAD1             			;*************************************************
0686   EAD1             ;* Get Physical Address and Bitposition of 
0687   EAD1             ;* solenoid number.
0688   EAD1             ;*
0689   EAD1             ;* Requires:	A - Solenoid Number
0690   EAD1             ;* Output:		B - PIA bit position
0691   EAD1             ;*			X - PIA address
0692   EAD1             ;*************************************************	
0693   EAD1 84 0F       soladdr		anda	#$0F				;Mask to under 16 Solenoids
0694   EAD3 CE 22 02    			ldx	#pia_sol_high_data
0695   EAD6 81 07       			cmpa	#$07				;Normal solenoids or ball shooter/ball lift
0696   EAD8             			ifgt					;Get Regular Solenoid Address (PIA)
0696   EAD8             
0696   EAD8 2F FE       
0697   EADA 08          				inx
0698   EADB C6 08       				ldab	#$08
0699   EADD 11          				cba
0700   EADE             				ifeq
0700   EADE             
0700   EADE 26 FE       
0701   EAE0             					;this is the ball shooter coil
0702   EAE0 CE 22 01    					ldx   #pia_sol_low_ctrl
0703   EAE3 0D          					sec 
0704   EAE4             				endif
0704   EAE4             
0704   EAE4             
0704   EAE4             
0704   EAE4             
0704   EAE4             
0704   EAE4~            				endif
0704   EAE4~            				endif
0704   EAE4             
0704   EAE4~            				endif
0704   EAE4~            				endif
0704   EAE4             
0704   EADF             
0704   EADF 04          
0704   EAE0             
0704   EAE0             
0704   EAE0~            				endif
0704   EAE0~            				endif
0704   EAE0~            				endif
0704   EAE0             
0704   EAE4             
0704   EAE4~            				endif
0704   EAE4~            				endif
0704   EAE4             
0705   EAE4 39          				rts	
0706   EAE5             			endif
0706   EAE5             
0706   EAE5             
0706   EAE5             
0706   EAE5             
0706   EAE5             
0706   EAE5~            			endif
0706   EAE5~            			endif
0706   EAE5             
0706   EAE5~            			endif
0706   EAE5~            			endif
0706   EAE5             
0706   EAD9             
0706   EAD9 0B          
0706   EADA             
0706   EADA             
0706   EADA~            			endif
0706   EADA~            			endif
0706   EADA~            			endif
0706   EADA             
0706   EAE5             
0706   EAE5~            			endif
0706   EAE5~            			endif
0706   EAE5             
0707   EAE5             			
0708   EAE5             
0709   EAE5             ;********************************************************
0710   EAE5             ;* Convert Hex value in A to a single bit positioned at
0711   EAE5             ;* the value of (A&7). Bitpos is returned in B
0712   EAE5             ;*
0713   EAE5             ;* Requires:	Data in A
0714   EAE5             ;* Protects:	A,X
0715   EAE5             ;* Destroys:	B
0716   EAE5             ;* Output:		Bitpos in B
0717   EAE5             ;********************************************************
0718   EAE5 36          hex2bitpos		psha	
0719   EAE6 84 07       			anda	#$07
0720   EAE8 5F          			clrb	
0721   EAE9 0D          			sec	
0722   EAEA             			begin
0722   EAEA             
0723   EAEA 59          				rolb	
0724   EAEB 4A          				deca	
0725   EAEC             			miend
0725   EAEC             
0725   EAEC             
0725   EAEC~            			miend
0725   EAEC~            			miend
0725   EAEC~            			miend
0725   EAEC             
0725   EAEC 2A FC       
0725   EAEE             
0725   EAEE~            			miend
0725   EAEE~            			miend
0725   EAEE             
0726   EAEE 32          			pula	
0727   EAEF 39          			rts	
0728   EAF0             
0729   EAF0             ;********************************************************
0730   EAF0             ;* Checks the current score shown and updates the comma
0731   EAF0             ;* flags accordingly to show the relavant ones.
0732   EAF0             ;********************************************************			
0733   EAF0 40 04 80 08 comma_million	.db $40,$04,$80,$08
0734   EAF4 10 01 20 02 comma_thousand	.db $10,$01,$20,$02
0735   EAF8             
0736   EAF8 C6 40       update_commas	ldab	#$40				;Million digit
0737   EAFA 8D 2B       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
0738   EAFC             			ifeq					;Branch if it is already set
0738   EAFC             
0738   EAFC 26 FE       
0739   EAFE DE EC       				ldx	pscore_buf			;Start of Current Player Score Buffer
0740   EB00 E6 00       				ldab	$00,X
0741   EB02 5C          				incb	
0742   EB03             				ifne					;Is MSD at FF (blank0?
0742   EB03             
0742   EB03 27 FE       
0743   EB05 CE EA F0    					ldx	#comma_million		;No.. we have a million digit.
0744   EB08 8D 11       					bsr	set_comma_bit		;Set the appropriate bit
0745   EB0A             				endif
0745   EB0A             
0745   EB0A             
0745   EB0A             
0745   EB0A             
0745   EB0A             
0745   EB0A~            				endif
0745   EB0A~            				endif
0745   EB0A             
0745   EB0A~            				endif
0745   EB0A~            				endif
0745   EB0A             
0745   EB04             
0745   EB04 05          
0745   EB05             
0745   EB05             
0745   EB05~            				endif
0745   EB05~            				endif
0745   EB05~            				endif
0745   EB05             
0745   EB0A             
0745   EB0A~            				endif
0745   EB0A~            				endif
0745   EB0A             
0746   EB0A             			endif
0746   EB0A             
0746   EB0A             
0746   EB0A             
0746   EB0A             
0746   EB0A             
0746   EB0A~            			endif
0746   EB0A~            			endif
0746   EB0A             
0746   EB0A~            			endif
0746   EB0A~            			endif
0746   EB0A             
0746   EAFD             
0746   EAFD 0C          
0746   EAFE             
0746   EAFE             
0746   EAFE~            			endif
0746   EAFE~            			endif
0746   EAFE~            			endif
0746   EAFE             
0746   EB0A             
0746   EB0A~            			endif
0746   EB0A~            			endif
0746   EB0A             
0747   EB0A C6 08       			ldab	#$08				;1000's Digit
0748   EB0C 8D 19       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
0749   EB0E             			ifeq
0749   EB0E             
0749   EB0E 26 FE       
0750   EB10 DE EC       				ldx	pscore_buf			;Start of Current Player Score Buffer
0751   EB12 E6 02       				ldab	$02,X
0752   EB14 C1 F0       				cmpb	#$F0
0753   EB16             				ifcs
0753   EB16             
0753   EB16 24 FE       
0754   EB18 CE EA F4    					ldx	#comma_thousand			;Get the appropriate bit for the thousand digit	
0755   EB1B 96 EB       set_comma_bit			ldaa	player_up				;Current Player Up (0-3)
0756   EB1D BD EE 3E    					jsr	xplusa				;X = X + A
0757   EB20 A6 00       					ldaa	$00,X
0758   EB22 9A 7C       					oraa	comma_flags
0759   EB24 97 7C       					staa	comma_flags
0760   EB26             				endif
0760   EB26             
0760   EB26             
0760   EB26             
0760   EB26             
0760   EB26             
0760   EB26~            				endif
0760   EB26~            				endif
0760   EB26             
0760   EB26~            				endif
0760   EB26~            				endif
0760   EB26             
0760   EB17             
0760   EB17 0E          
0760   EB18             
0760   EB18             
0760   EB18~            				endif
0760   EB18~            				endif
0760   EB18~            				endif
0760   EB18             
0760   EB26             
0760   EB26~            				endif
0760   EB26~            				endif
0760   EB26             
0761   EB26             			endif
0761   EB26             
0761   EB26             
0761   EB26             
0761   EB26             
0761   EB26             
0761   EB26~            			endif
0761   EB26~            			endif
0761   EB26             
0761   EB26~            			endif
0761   EB26~            			endif
0761   EB26             
0761   EB0F             
0761   EB0F 16          
0761   EB10             
0761   EB10             
0761   EB10~            			endif
0761   EB10~            			endif
0761   EB10~            			endif
0761   EB10             
0761   EB26             
0761   EB26~            			endif
0761   EB26~            			endif
0761   EB26             
0762   EB26 39          			rts	
0763   EB27             			
0764   EB27             
0765   EB27 96 EB       test_mask_b		ldaa	player_up				;Current Player Up (0-1)
0766   EB29 CE 00 78    			ldx	#dmask_p1
0767   EB2C BD EE 3E    			jsr	xplusa				;X = X + A
0768   EB2F E5 00       			bitb	$00,X
0769   EB31 39          			rts	
0770   EB32             
0771   EB32             
0772   EB32             ;**********************************************************
0773   EB32             ;* Point based sounds (chime type).
0774   EB32             ;**********************************************************			
0775   EB32 36          isnd_pts		psha	
0776   EB33 17          			tba	
0777   EB34 20 03       			bra	snd_pts
0778   EB36 36          dsnd_pts		psha	
0779   EB37 84 07       			anda	#$07
0780   EB39 BD EC 3B    snd_pts		jsr	isnd_once			;Play Sound Index(A) Once
0781   EB3C 32          			pula
0782   EB3D             			;Fall Through to points 
0783   EB3D             
0784   EB3D 36          score_main		psha	
0785   EB3E 37          			pshb	
0786   EB3F 7A 00 F5    			dec	randomseed			;Change the Random # seed
0787   EB42 DF F6       			stx	x_temp_1			;Protect X
0788   EB44 BD D0 B4    			jsr	gr_score_event		;Check Game ROM Hook
0789   EB47 D6 E8       			ldab	random_bool
0790   EB49             			ifeq
0790   EB49             
0790   EB49 26 FE       
0791   EB4B 73 00 E8    				com	random_bool
0792   EB4E             			endif
0792   EB4E             
0792   EB4E             
0792   EB4E             
0792   EB4E             
0792   EB4E             
0792   EB4E~            			endif
0792   EB4E~            			endif
0792   EB4E             
0792   EB4E~            			endif
0792   EB4E~            			endif
0792   EB4E             
0792   EB4A             
0792   EB4A 03          
0792   EB4B             
0792   EB4B             
0792   EB4B~            			endif
0792   EB4B~            			endif
0792   EB4B~            			endif
0792   EB4B             
0792   EB4E             
0792   EB4E~            			endif
0792   EB4E~            			endif
0792   EB4E             
0793   EB4E 8D 0A       			bsr	score_update		;Add Points to Current Score, Data in A:
0794   EB50 8D A6       			bsr	update_commas		;Update Master Display Toggle From Current Player
0795   EB52 BD EB E9    			jsr	checkreplay			;Check Current Player Score against all Replay Levels
0796   EB55 DE F6       			ldx	x_temp_1			;Get it back
0797   EB57 33          			pulb	
0798   EB58 32          			pula	
0799   EB59 39          			rts	
0800   EB5A             			
0801   EB5A             
0802   EB5A             ;**********************************************
0803   EB5A             ; Update Score Routine: Score to add is in A
0804   EB5A             ;**********************************************
0805   EB5A DE EC       score_update	ldx	pscore_buf			;Start of Current Player Score Buffer
0806   EB5C EE 00       			ldx	$00,X				;Get XX,XX_,b__
0807   EB5E DF FC       			stx	x_temp_2			;Store it!
0808   EB60 DE EC       			ldx	pscore_buf			;Start of Current Player Score Buffer
0809   EB62 C6 04       			ldab	#$04
0810   EB64 D7 F4       			stab	flag_timer_bip		;Run Ball Play Timer (Audit)
0811   EB66 D7 BE       			stab	sys_temp1			;Number of Ram Location to iterate (4)
0812   EB68 97 C0       			staa	sys_temp3
0813   EB6A 5F          			clrb	
0814   EB6B D7 C1       			stab	sys_temp4
0815   EB6D D7 BF       			stab	sys_temp2
0816   EB6F 16          			tab					;Get Points data
0817   EB70 C4 07       			andb	#$07
0818   EB72 26 27       _su01			bne	_su04
0819   EB74 5C          			incb	
0820   EB75 D7 BC       			stab	temp3				;Store (data&07)+1
0821   EB77 D6 C0       _su02			ldab	sys_temp3
0822   EB79 54          			lsrb	
0823   EB7A 54          			lsrb	
0824   EB7B 54          			lsrb	
0825   EB7C 8D 45       			bsr	score2hex			;Convert MSD Blanks to 0's on (X+03)
0826   EB7E             			begin
0826   EB7E             
0827   EB7E 9B BC       				adda	temp3				;(data&07)+1
0828   EB80 8D 3A       				bsr	hex2dec			;Decimal Adjust A, sys_temp2 incremented if A flipped
0829   EB82 5A          				decb					
0830   EB83             			eqend
0830   EB83             
0830   EB83             
0830   EB83~            			eqend
0830   EB83~            			eqend
0830   EB83~            			eqend
0830   EB83             
0830   EB83 26 F9       
0830   EB85             
0830   EB85~            			eqend
0830   EB85~            			eqend
0830   EB85             
0831   EB85 D6 BF       _su03			ldab	sys_temp2
0832   EB87 27 26       			beq	_su05			;A didn't Flip, Branch.
0833   EB89 A7 03       			staa	$03,X			;Store this digit
0834   EB8B 09          			dex	
0835   EB8C 7A 00 BE    			dec	sys_temp1			;Do next set of digits
0836   EB8F             			ifne
0836   EB8F             
0836   EB8F 27 FE       
0837   EB91 8D 30       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
0838   EB93 7F 00 BF    				clr	sys_temp2
0839   EB96 1B          				aba	
0840   EB97 8D 23       				bsr	hex2dec				;Decimal Adjust A, sys_temp2 incremented if A flipped
0841   EB99 20 EA       				bra	_su03
0842   EB9B 5A          _su04				decb	
0843   EB9C             				ifeq
0843   EB9C             
0843   EB9C 26 FE       
0844   EB9E C6 10       					ldab	#$10
0845   EBA0 D7 BC       					stab	temp3
0846   EBA2 20 D3       					bra	_su02
0847   EBA4             				endif
0847   EBA4             
0847   EBA4             
0847   EBA4             
0847   EBA4             
0847   EBA4             
0847   EBA4~            				endif
0847   EBA4~            				endif
0847   EBA4             
0847   EBA4~            				endif
0847   EBA4~            				endif
0847   EBA4             
0847   EB9D             
0847   EB9D 06          
0847   EB9E             
0847   EB9E             
0847   EB9E~            				endif
0847   EB9E~            				endif
0847   EB9E~            				endif
0847   EB9E             
0847   EBA4             
0847   EBA4~            				endif
0847   EBA4~            				endif
0847   EBA4             
0848   EBA4 8D 1D       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
0849   EBA6 A7 03       				staa	$03,X
0850   EBA8 7A 00 BE    				dec	sys_temp1
0851   EBAB 09          				dex	
0852   EBAC 5A          				decb	
0853   EBAD 20 C3       				bra	_su01
0854   EBAF D6 C1       _su05				ldab	sys_temp4
0855   EBB1             				ifne
0855   EBB1             
0855   EBB1 27 FE       
0856   EBB3 81 10       					cmpa	#$10
0857   EBB5             					ifcs
0857   EBB5             
0857   EBB5 24 FE       
0858   EBB7 8B F0       						adda	#$F0
0859   EBB9             					endif
0859   EBB9             
0859   EBB9             
0859   EBB9             
0859   EBB9             
0859   EBB9             
0859   EBB9~            					endif
0859   EBB9~            					endif
0859   EBB9             
0859   EBB9~            					endif
0859   EBB9~            					endif
0859   EBB9             
0859   EBB6             
0859   EBB6 02          
0859   EBB7             
0859   EBB7             
0859   EBB7~            					endif
0859   EBB7~            					endif
0859   EBB7~            					endif
0859   EBB7             
0859   EBB9             
0859   EBB9~            					endif
0859   EBB9~            					endif
0859   EBB9             
0860   EBB9             				endif
0860   EBB9             
0860   EBB9             
0860   EBB9             
0860   EBB9             
0860   EBB9             
0860   EBB9~            				endif
0860   EBB9~            				endif
0860   EBB9             
0860   EBB9~            				endif
0860   EBB9~            				endif
0860   EBB9             
0860   EBB2             
0860   EBB2 06          
0860   EBB3             
0860   EBB3             
0860   EBB3~            				endif
0860   EBB3~            				endif
0860   EBB3~            				endif
0860   EBB3             
0860   EBB9             
0860   EBB9~            				endif
0860   EBB9~            				endif
0860   EBB9             
0861   EBB9 A7 03       				staa	$03,X
0862   EBBB             			endif
0862   EBBB             
0862   EBBB             
0862   EBBB             
0862   EBBB             
0862   EBBB             
0862   EBBB~            			endif
0862   EBBB~            			endif
0862   EBBB             
0862   EBBB~            			endif
0862   EBBB~            			endif
0862   EBBB             
0862   EB90             
0862   EB90 2A          
0862   EB91             
0862   EB91             
0862   EB91~            			endif
0862   EB91~            			endif
0862   EB91~            			endif
0862   EB91             
0862   EBBB             
0862   EBBB~            			endif
0862   EBBB~            			endif
0862   EBBB             
0863   EBBB 39          			rts	
0864   EBBC             
0865   EBBC             ;******************************************************************************
0866   EBBC             ; Convert Hex to Decimal: If value was above 9 then sys_temp2 is incremented 
0867   EBBC             ;******************************************************************************
0868   EBBC 19          hex2dec		daa	
0869   EBBD             			ifcs
0869   EBBD             
0869   EBBD 24 FE       
0870   EBBF 7C 00 BF    				inc	sys_temp2
0871   EBC2             			endif
0871   EBC2             
0871   EBC2             
0871   EBC2             
0871   EBC2             
0871   EBC2             
0871   EBC2~            			endif
0871   EBC2~            			endif
0871   EBC2             
0871   EBC2~            			endif
0871   EBC2~            			endif
0871   EBC2             
0871   EBBE             
0871   EBBE 03          
0871   EBBF             
0871   EBBF             
0871   EBBF~            			endif
0871   EBBF~            			endif
0871   EBBF~            			endif
0871   EBBF             
0871   EBC2             
0871   EBC2~            			endif
0871   EBC2~            			endif
0871   EBC2             
0872   EBC2 39          			rts	
0873   EBC3             
0874   EBC3 A6 03       score2hex		ldaa	$03,X
0875   EBC5 4C          			inca	
0876   EBC6             			ifne					;Leave if both digits are blanked
0876   EBC6             
0876   EBC6 27 FE       
0877   EBC8 4A          				deca	
0878   EBC9 81 F0       				cmpa	#$F0
0879   EBCB 25 05       				bcs	sh_exit			;if A was less than #F0
0880   EBCD 8B 10       				adda	#$10				;Set High Digit to a 0
0881   EBCF             			endif
0881   EBCF             
0881   EBCF             
0881   EBCF             
0881   EBCF             
0881   EBCF             
0881   EBCF~            			endif
0881   EBCF~            			endif
0881   EBCF             
0881   EBCF~            			endif
0881   EBCF~            			endif
0881   EBCF             
0881   EBC7             
0881   EBC7 07          
0881   EBC8             
0881   EBC8             
0881   EBC8~            			endif
0881   EBC8~            			endif
0881   EBC8~            			endif
0881   EBC8             
0881   EBCF             
0881   EBCF~            			endif
0881   EBCF~            			endif
0881   EBCF             
0882   EBCF 7C 00 C1    			inc	sys_temp4			;Digit was cleared
0883   EBD2 39          sh_exit		rts 
0884   EBD3             
0885   EBD3             ;**************************************************************
0886   EBD3             ;* Add points to Scoring Queue
0887   EBD3             ;**************************************************************	
0888   EBD3 36          add_points		psha	
0889   EBD4 37          			pshb	
0890   EBD5 16          			tab	
0891   EBD6 C4 07       			andb	#$07
0892   EBD8 CE 11 30    			ldx	#score_queue_end	
0893   EBDB             			begin
0893   EBDB             
0894   EBDB 09          				dex	
0895   EBDC 5A          				decb	
0896   EBDD             			miend
0896   EBDD             
0896   EBDD             
0896   EBDD~            			miend
0896   EBDD~            			miend
0896   EBDD~            			miend
0896   EBDD             
0896   EBDD 2A FC       
0896   EBDF             
0896   EBDF~            			miend
0896   EBDF~            			miend
0896   EBDF             
0897   EBDF 44          			lsra	
0898   EBE0 44          			lsra	
0899   EBE1 44          			lsra	
0900   EBE2 AB 00       			adda	$00,X
0901   EBE4 A7 00       			staa	$00,X
0902   EBE6 33          			pulb	
0903   EBE7 32          			pula	
0904   EBE8 39          			rts	
0905   EBE9              
0906   EBE9             ;**********************************************************
0907   EBE9             ;* Checks the current player score against the energy base
0908   EBE9             ;* award level multiplier. 
0909   EBE9             ;**********************************************************
0910   EBE9 CE 00 FC    checkreplay		ldx	#x_temp_2
0911   EBEC 8D 31       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
0912   EBEE D7 FC       			stab	x_temp_2
0913   EBF0 DE EC       			ldx	pscore_buf			;Current Player Score Buffer Pointer
0914   EBF2 8D 2B       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
0915   EBF4 01          			nop
0916   EBF5 01          			nop
0917   EBF6 01          			nop
0918   EBF7 01          			nop
0919   EBF8 BD FA F1    			jsr	get_aud_baseawd		;loads the P1 or P1 audit location for base awards
0920   EBFB BD EE 92    			jsr	cmosinc_a
0921   EBFE 11          			cba
0922   EBFF             			iflo
0922   EBFF             
0922   EBFF 22 FE       
0923   EC01 91 FC       				cmpa	x_temp_2
0924   EC03             				ifge
0924   EC03             
0924   EC03 23 FE       
0925   EC05 DF C8       					stx	thread_priority
0926   EC07 01          					nop
0927   EC08 01          					nop
0928   EC09 01          					nop
0929   EC0A 01          					nop
0930   EC0B 01          					nop
0931   EC0C 01          					nop
0932   EC0D CE 01 52    					ldx	#(aud_replay1times + 2)
0933   EC10 01          					nop
0934   EC11 BD F7 E7    					jsr	ptrx_plus_1			;add 1 to address in X
0935   EC14 DE C8       					ldx	thread_priority
0936   EC16 BD F7 4C    					jsr	award_replay
0937   EC19             				endif
0937   EC19             
0937   EC19             
0937   EC19             
0937   EC19             
0937   EC19             
0937   EC19~            				endif
0937   EC19~            				endif
0937   EC19             
0937   EC19~            				endif
0937   EC19~            				endif
0937   EC19             
0937   EC04             
0937   EC04 14          
0937   EC05             
0937   EC05             
0937   EC05~            				endif
0937   EC05~            				endif
0937   EC05~            				endif
0937   EC05             
0937   EC19             
0937   EC19~            				endif
0937   EC19~            				endif
0937   EC19             
0938   EC19             			endif
0938   EC19             
0938   EC19             
0938   EC19             
0938   EC19             
0938   EC19             
0938   EC19~            			endif
0938   EC19~            			endif
0938   EC19             
0938   EC19~            			endif
0938   EC19~            			endif
0938   EC19             
0938   EC00             
0938   EC00 18          
0938   EC01             
0938   EC01             
0938   EC01~            			endif
0938   EC01~            			endif
0938   EC01~            			endif
0938   EC01             
0938   EC19             
0938   EC19~            			endif
0938   EC19~            			endif
0938   EC19             
0939   EC19 01          			nop
0940   EC1A 01          			nop
0941   EC1B 01          			nop
0942   EC1C 01          			nop
0943   EC1D 01          			nop
0944   EC1E 39          			rts
0945   EC1F             			
0946   EC1F             ;*********************************************************
0947   EC1F             ;* Load Million and Hundred Thousand Score digits into
0948   EC1F             ;* A and B. Player score buffer pointer is in X. Routine
0949   EC1F             ;* will convert blanks($ff) into 0's
0950   EC1F             ;*********************************************************			
0951   EC1F A6 00       get_hs_digits	ldaa	$00,X
0952   EC21 84 0F       			anda	#$0F
0953   EC23 E6 01       			ldab	$01,X
0954   EC25 8D 04       			bsr	b_plus10		;If B minus then B = B + 0x10
0955   EC27 8D 09       			bsr	split_ab		;Shift A<<4 B>>4
0956   EC29 1B          			aba	
0957   EC2A 16          			tab
0958   EC2B C1 A0       b_plus10		cmpb	#$A0
0959   EC2D             			ifcc
0959   EC2D             
0959   EC2D 25 FE       
0960   EC2F CB 10       				addb	#$10
0961   EC31             			endif
0961   EC31             
0961   EC31             
0961   EC31             
0961   EC31             
0961   EC31             
0961   EC31~            			endif
0961   EC31~            			endif
0961   EC31             
0961   EC31~            			endif
0961   EC31~            			endif
0961   EC31             
0961   EC2E             
0961   EC2E 02          
0961   EC2F             
0961   EC2F             
0961   EC2F~            			endif
0961   EC2F~            			endif
0961   EC2F~            			endif
0961   EC2F             
0961   EC31             
0961   EC31~            			endif
0961   EC31~            			endif
0961   EC31             
0962   EC31 39          			rts	
0963   EC32             			
0964   EC32             ;*********************************************************
0965   EC32             ;* Shifts A and B to convert million and hundred thousand
0966   EC32             ;* score digits into a single byte.
0967   EC32             ;*********************************************************
0968   EC32 48          split_ab		asla	
0969   EC33 48          			asla	
0970   EC34 48          			asla	
0971   EC35 48          			asla	
0972   EC36 54          			lsrb	
0973   EC37 54          			lsrb	
0974   EC38 54          			lsrb	
0975   EC39 54          			lsrb	
0976   EC3A 39          			rts	 
0977   EC3B             
0978   EC3B             ;*********************************************************
0979   EC3B             ;* Sound Routines 
0980   EC3B             ;*********************************************************
0981   EC3B             ;* isnd_once - will play index sound in A one time by 
0982   EC3B             ;*             loading B with 01 and calling the main
0983   EC3B             ;*             sound subroutine.
0984   EC3B             ;*********************************************************			
0985   EC3B 37          isnd_once		pshb	
0986   EC3C C6 01       			ldab	#$01
0987   EC3E 8D 02       			bsr	sound_sub
0988   EC40 33          			pulb	
0989   EC41 39          			rts
0990   EC42             
0991   EC42             ;*********************************************************
0992   EC42             ;* This is the main sound subroutine. It will play index
0993   EC42             ;* sound contained in A, B times.
0994   EC42             ;*********************************************************				
0995   EC42 DF C8       sound_sub		stx	thread_priority
0996   EC44 36          			psha	
0997   EC45 37          			pshb	
0998   EC46 D6 DF       			ldab	sys_soundflags			;Sound Status
0999   EC48 27 1C       			beq	b_04E					;Goto Sound Routine #2
1000   EC4A 16          			tab						
1001   EC4B 48          			asla	
1002   EC4C 1B          			aba	                              ;A=A*3
1003   EC4D FE D0 53    			ldx	gr_soundtable_ptr			;Game ROM Table: Sounds
1004   EC50 BD EE 3E    			jsr	xplusa				;X = X + A
1005   EC53 A6 02       			ldaa	$02,X                         ;get the actual sound command that will be sent
1006   EC55 4C          			inca	
1007   EC56             			ifeq						;If value is $FF, then this is complex sound
1007   EC56             
1007   EC56 26 FE       
1008   EC58 EE 00       				ldx	$00,X
1009   EC5A             			endif
1009   EC5A             
1009   EC5A             
1009   EC5A             
1009   EC5A             
1009   EC5A             
1009   EC5A~            			endif
1009   EC5A~            			endif
1009   EC5A             
1009   EC5A~            			endif
1009   EC5A~            			endif
1009   EC5A             
1009   EC57             
1009   EC57 02          
1009   EC58             
1009   EC58             
1009   EC58~            			endif
1009   EC58~            			endif
1009   EC58~            			endif
1009   EC58             
1009   EC5A             
1009   EC5A~            			endif
1009   EC5A~            			endif
1009   EC5A             
1010   EC5A A6 00       			ldaa	$00,X
1011   EC5C D6 D8       			ldab	cur_sndflags
1012   EC5E C5 40       			bitb	#$40
1013   EC60             			ifeq
1013   EC60             
1013   EC60 26 FE       
1014   EC62 8D 1D       				bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
1015   EC64             				ifcc
1015   EC64             
1015   EC64 25 FE       
1016   EC66 33          b_04E					pulb	
1017   EC67 32          					pula	
1018   EC68 20 2A       					bra	b_051
1019   EC6A             				endif
1019   EC6A             
1019   EC6A             
1019   EC6A             
1019   EC6A             
1019   EC6A             
1019   EC6A~            				endif
1019   EC6A~            				endif
1019   EC6A             
1019   EC6A~            				endif
1019   EC6A~            				endif
1019   EC6A             
1019   EC65             
1019   EC65 04          
1019   EC66             
1019   EC66             
1019   EC66~            				endif
1019   EC66~            				endif
1019   EC66~            				endif
1019   EC66             
1019   EC6A             
1019   EC6A~            				endif
1019   EC6A~            				endif
1019   EC6A             
1020   EC6A             			endif
1020   EC6A             
1020   EC6A             
1020   EC6A             
1020   EC6A             
1020   EC6A             
1020   EC6A~            			endif
1020   EC6A~            			endif
1020   EC6A             
1020   EC6A~            			endif
1020   EC6A~            			endif
1020   EC6A             
1020   EC61             
1020   EC61 08          
1020   EC62             
1020   EC62             
1020   EC62~            			endif
1020   EC62~            			endif
1020   EC62~            			endif
1020   EC62             
1020   EC6A             
1020   EC6A~            			endif
1020   EC6A~            			endif
1020   EC6A             
1021   EC6A 4D          b_050			tsta	
1022   EC6B 2A 6B       			bpl	snd_exit_pull			;pula,pulb,rts.
1023   EC6D D6 E4       			ldab	next_sndcnt
1024   EC6F             			ifne
1024   EC6F             
1024   EC6F 27 FE       
1025   EC71 D6 E3             			ldab	next_sndflags
1026   EC73 8D 0C             			bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
1027   EC75 25 61             			bcs	snd_exit_pull			;pula,pulb,rts.
1028   EC77                   		endif
1028   EC77             
1028   EC77             
1028   EC77             
1028   EC77             
1028   EC77             
1028   EC77~                  		endif
1028   EC77~                  		endif
1028   EC77             
1028   EC77~                  		endif
1028   EC77~                  		endif
1028   EC77             
1028   EC70             
1028   EC70 06          
1028   EC71             
1028   EC71             
1028   EC71~                  		endif
1028   EC71~                  		endif
1028   EC71~                  		endif
1028   EC71             
1028   EC77             
1028   EC77~                  		endif
1028   EC77~                  		endif
1028   EC77             
1029   EC77 97 E3       			staa	next_sndflags
1030   EC79 33          			pulb	
1031   EC7A 32          			pula	
1032   EC7B 97 E5       			staa	next_sndcmd
1033   EC7D D7 E4       			stab	next_sndcnt
1034   EC7F 20 59       			bra	snd_exit					;rts
1035   EC81             			
1036   EC81 36          isnd_test		psha	
1037   EC82 37          			pshb	
1038   EC83 84 0F       			anda	#$0F
1039   EC85 C4 0F       			andb	#$0F
1040   EC87 11          			cba	
1041   EC88 33          			pulb	
1042   EC89 32          			pula	
1043   EC8A             			ifeq
1043   EC8A             
1043   EC8A 26 FE       
1044   EC8C C5 20       				bitb	#$20
1045   EC8E             				ifeq
1045   EC8E             
1045   EC8E 26 FE       
1046   EC90 0D          					sec
1047   EC91             				endif
1047   EC91             
1047   EC91             
1047   EC91             
1047   EC91             
1047   EC91             
1047   EC91~            				endif
1047   EC91~            				endif
1047   EC91             
1047   EC91~            				endif
1047   EC91~            				endif
1047   EC91             
1047   EC8F             
1047   EC8F 01          
1047   EC90             
1047   EC90             
1047   EC90~            				endif
1047   EC90~            				endif
1047   EC90~            				endif
1047   EC90             
1047   EC91             
1047   EC91~            				endif
1047   EC91~            				endif
1047   EC91             
1048   EC91             			endif
1048   EC91             
1048   EC91             
1048   EC91             
1048   EC91             
1048   EC91             
1048   EC91~            			endif
1048   EC91~            			endif
1048   EC91             
1048   EC91~            			endif
1048   EC91~            			endif
1048   EC91             
1048   EC8B             
1048   EC8B 05          
1048   EC8C             
1048   EC8C             
1048   EC8C~            			endif
1048   EC8C~            			endif
1048   EC8C~            			endif
1048   EC8C             
1048   EC91             
1048   EC91~            			endif
1048   EC91~            			endif
1048   EC91             
1049   EC91 39          			rts
1050   EC92             			
1051   EC92             ;A=sound command
1052   EC92             ;B=count
1053   EC92 DF C8       isnd_mult		stx	thread_priority
1054   EC94 36          b_051			psha	
1055   EC95 37          			pshb	
1056   EC96 D7 D6       			stab	soundcount
1057   EC98 16          			tab	                              ;store our sound in B temporarily
1058   EC99 86 7F       			ldaa	#$7F
1059   EC9B 8D 42       			bsr	send_snd				;Send Sound Stop Command
1060   EC9D 17          			tba	                              ;get it back
1061   EC9E 97 E0       			staa	soundindex				;Sound Command Table Index
1062   ECA0 48          			asla	
1063   ECA1 1B          			aba						;Index * 3
1064   ECA2 FE D0 53    			ldx	gr_soundtable_ptr			;Game ROM: Sound Table Pointer
1065   ECA5 BD EE 3E    isnd_mult_x		jsr	xplusa				;X = X + A
1066   ECA8 A6 02       			ldaa	$02,X					;Sound Command
1067   ECAA 81 FF       			cmpa	#$FF
1068   ECAC             			ifne						;Simple Sound
1068   ECAC             
1068   ECAC 27 FE       
1069   ECAE E6 00       				ldab	$00,X
1070   ECB0 C4 7F       				andb	#$7F
1071   ECB2 D7 D8       				stab	cur_sndflags			
1072   ECB4 E6 01       				ldab	$01,X
1073   ECB6 D7 DC       				stab	soundirqcount+1			
1074   ECB8 7F 00 DB    				clr	soundirqcount
1075   ECBB DE DB       				ldx	soundirqcount			;Clear the MSB of the word counter ($BD,$BE)
1076   ECBD DF DD       				stx	soundindex_com			;Store the whole counter in the Common Sound Index
1077   ECBF C6 40       				ldab	#$40
1078   ECC1 D7 DF       				stab	sys_soundflags			;Sound Flag?
1079   ECC3 8D 18       				bsr	send_snd_save			;Send the Command, Save in 'lastsound'
1080   ECC5             			else						;Complex Sound
1080   ECC5             
1080   ECC5             
1080   ECC5             
1080   ECC5             
1080   ECAD             
1080   ECAD             
1080   ECAD             
1080   ECAD~            			else						;Complex Sound
1080   ECAD~            			else						;Complex Sound
1080   ECAD~            			else						;Complex Sound
1080   ECAD~            			else						;Complex Sound
1080   ECAD             
1080   ECAD~            			else						;Complex Sound
1080   ECAD~            			else						;Complex Sound
1080   ECAD~            			else						;Complex Sound
1080   ECAD~            			else						;Complex Sound
1080   ECAD             
1080   ECAD             
1080   ECAD 19          
1080   ECC5             
1080   ECC5 20 FE       
1080   ECC7             
1080   ECC7             
1080   ECC7             
1080   ECC7~            			else						;Complex Sound
1080   ECC7~            			else						;Complex Sound
1080   ECC7~            			else						;Complex Sound
1080   ECC7~            			else						;Complex Sound
1080   ECC7~            			else						;Complex Sound
1080   ECC7             
1080   ECC7~            			else						;Complex Sound
1080   ECC7~            			else						;Complex Sound
1080   ECC7             
1080   ECC7~            			else						;Complex Sound
1080   ECC7~            			else						;Complex Sound
1080   ECC7             
1081   ECC7 EE 00       				ldx	$00,X					;Here if Complex Sound Command
1082   ECC9 C6 80       				ldab	#$80
1083   ECCB D7 DF       				stab	sys_soundflags			;Set Status Flag
1084   ECCD EA 00       				orab	$00,X
1085   ECCF D7 D8       				stab	cur_sndflags
1086   ECD1 08          				inx	
1087   ECD2 DF DD       				stx	soundindex_com
1088   ECD4 DF D9       				stx	soundptr
1089   ECD6 8D 0E       				bsr	do_complex_snd			;Process it and send
1090   ECD8             			endif
1090   ECD8             
1090   ECD8             
1090   ECD8             
1090   ECD8             
1090   ECD8             
1090   ECD8~            			endif
1090   ECD8~            			endif
1090   ECD8             
1090   ECD8~            			endif
1090   ECD8~            			endif
1090   ECD8             
1090   ECC6             
1090   ECC6 11          
1090   ECC7             
1090   ECC7             
1090   ECC7~            			endif
1090   ECC7~            			endif
1090   ECC7~            			endif
1090   ECC7             
1090   ECD8             
1090   ECD8~            			endif
1090   ECD8~            			endif
1090   ECD8             
1091   ECD8 33          snd_exit_pull	pulb	
1092   ECD9 32          			pula	
1093   ECDA DE C8       snd_exit		ldx	thread_priority
1094   ECDC 39          			rts	
1095   ECDD             
1096   ECDD             ;*****************************************************************
1097   ECDD             ;* Send the command to the sound board, stores the command sent
1098   ECDD             ;* in 'lastsound' for reference.
1099   ECDD             ;*****************************************************************			
1100   ECDD 97 D7       send_snd_save	staa	lastsound
1101   ECDF BD D0 B2    send_snd		jsr	gr_sound_event			
1102   ECE2 B7 21 00    			staa	pia_sound_data
1103   ECE5 39          			rts	
1104   ECE6             
1105   ECE6             ;*****************************************************************
1106   ECE6             ;* This routine will send the next item in a complex sound
1107   ECE6             ;* index to the Sound board PIA.
1108   ECE6             ;*****************************************************************			
1109   ECE6 DE D9       do_complex_snd	ldx	soundptr
1110   ECE8 A6 00       _csnd_loop		ldaa	$00,X				;Load the first byte of this sequence
1111   ECEA 16          			tab	
1112   ECEB C4 C0       			andb	#$C0
1113   ECED             			ifne					;Check bits $80 or $40
1113   ECED             
1113   ECED 27 FE       
1114   ECEF             				ifpl				;If bit $80 is set, then sound is immediate
1114   ECEF             
1114   ECEF 2B FE       
1115   ECF1 84 3F       					anda	#$3F
1116   ECF3 97 E1       					staa	csound_timer
1117   ECF5 08          					inx	
1118   ECF6 A6 00       					ldaa	$00,X
1119   ECF8 97 E2       b_05B					staa	csound_timer+1
1120   ECFA 96 D8       					ldaa	cur_sndflags
1121   ECFC 84 EF       					anda	#$EF			;Flag this sound as non-immediate (timer based)
1122   ECFE 97 D8       store_csndflg			staa	cur_sndflags	;Store Flag
1123   ED00 08          					inx	
1124   ED01 20 E5       					bra	_csnd_loop
1125   ED03             				endif
1125   ED03             
1125   ED03             
1125   ED03             
1125   ED03             
1125   ED03             
1125   ED03~            				endif
1125   ED03~            				endif
1125   ED03             
1125   ED03~            				endif
1125   ED03~            				endif
1125   ED03             
1125   ECF0             
1125   ECF0 12          
1125   ECF1             
1125   ECF1             
1125   ECF1~            				endif
1125   ECF1~            				endif
1125   ECF1~            				endif
1125   ECF1             
1125   ED03             
1125   ED03~            				endif
1125   ED03~            				endif
1125   ED03             
1126   ED03 7F 00 E1    				clr	csound_timer
1127   ED06 84 7F       				anda	#$7F
1128   ED08 26 EE       				bne	b_05B			;If the timer is not zero, then flag this sound as non-immediate
1129   ED0A 96 D8       				ldaa	cur_sndflags
1130   ED0C 8A 10       				oraa	#$10			;Flag as non-immediate
1131   ED0E 20 EE       				bra	store_csndflg
1132   ED10             			endif
1132   ED10             
1132   ED10             
1132   ED10             
1132   ED10             
1132   ED10             
1132   ED10~            			endif
1132   ED10~            			endif
1132   ED10             
1132   ED10~            			endif
1132   ED10~            			endif
1132   ED10             
1132   ECEE             
1132   ECEE 21          
1132   ECEF             
1132   ECEF             
1132   ECEF~            			endif
1132   ECEF~            			endif
1132   ECEF~            			endif
1132   ECEF             
1132   ED10             
1132   ED10~            			endif
1132   ED10~            			endif
1132   ED10             
1133   ED10 8D CB       			bsr	send_snd_save		;Send the Command, Save in 'lastsound'
1134   ED12 08          			inx	
1135   ED13 DF D9       			stx	soundptr			;Move pointer to next byte
1136   ED15 A6 00       			ldaa	$00,X
1137   ED17 81 3F       			cmpa	#$3F				;Are we done?
1138   ED19             			ifeq
1138   ED19             
1138   ED19 26 FE       
1139   ED1B 96 D8       				ldaa	cur_sndflags		;Yes 
1140   ED1D 84 7F       				anda	#$7F				;Mark it as a simple sound now
1141   ED1F 97 D8       				staa	cur_sndflags
1142   ED21             			endif
1142   ED21             
1142   ED21             
1142   ED21             
1142   ED21             
1142   ED21             
1142   ED21~            			endif
1142   ED21~            			endif
1142   ED21             
1142   ED21~            			endif
1142   ED21~            			endif
1142   ED21             
1142   ED1A             
1142   ED1A 06          
1142   ED1B             
1142   ED1B             
1142   ED1B~            			endif
1142   ED1B~            			endif
1142   ED1B~            			endif
1142   ED1B             
1142   ED21             
1142   ED21~            			endif
1142   ED21~            			endif
1142   ED21             
1143   ED21 DE E1       			ldx	csound_timer
1144   ED23 DF DB       			stx	soundirqcount
1145   ED25 39          			rts	
1146   ED26             
1147   ED26             ;**********************************************************
1148   ED26             ;* This routine will check two of the switch flags in the
1149   ED26             ;* B register (byte 1 of switch table). If the switch 
1150   ED26             ;* is disabled for either flag (tilt and gameover) then
1151   ED26             ;* the routine returns with the carry flag set.
1152   ED26             ;**********************************************************			
1153   ED26 36          check_sw_mask	psha	
1154   ED27 B6 D0 4D    			ldaa	gr_lastswitch			;Last Switch # for Game
1155   ED2A 91 C3       			cmpa	sw_encoded				;Switch #
1156   ED2C             			ifge						;Out of Range!
1156   ED2C             
1156   ED2C 23 FE       
1157   ED2E C5 40       				bitb	#$40					;Flag 40: Active on Game Tilt
1158   ED30             				ifeq
1158   ED30             
1158   ED30 26 FE       
1159   ED32 7D 00 E6    					tst	flag_tilt				;Tilt Flag
1160   ED35 26 09       					bne	sw_ignore
1161   ED37             				endif
1161   ED37             
1161   ED37             
1161   ED37             
1161   ED37             
1161   ED37             
1161   ED37~            				endif
1161   ED37~            				endif
1161   ED37             
1161   ED37~            				endif
1161   ED37~            				endif
1161   ED37             
1161   ED31             
1161   ED31 05          
1161   ED32             
1161   ED32             
1161   ED32~            				endif
1161   ED32~            				endif
1161   ED32~            				endif
1161   ED32             
1161   ED37             
1161   ED37~            				endif
1161   ED37~            				endif
1161   ED37             
1162   ED37 C5 20       				bitb	#$20					;Flag 20: Active on Game Over
1163   ED39 26 06       				bne	sw_active
1164   ED3B 7D 00 E7    				tst	flag_gameover			;Game Over?
1165   ED3E 27 01       				beq	sw_active
1166   ED40             			endif
1166   ED40             
1166   ED40             
1166   ED40             
1166   ED40             
1166   ED40             
1166   ED40~            			endif
1166   ED40~            			endif
1166   ED40             
1166   ED40~            			endif
1166   ED40~            			endif
1166   ED40             
1166   ED2D             
1166   ED2D 12          
1166   ED2E             
1166   ED2E             
1166   ED2E~            			endif
1166   ED2E~            			endif
1166   ED2E~            			endif
1166   ED2E             
1166   ED40             
1166   ED40~            			endif
1166   ED40~            			endif
1166   ED40             
1167   ED40 0D          sw_ignore		sec						;Ignore this switch when carry is set
1168   ED41 32          sw_active		pula	
1169   ED42 39          			rts
1170   ED43             
1171   ED43             ;**********************************************************
1172   ED43             ;* Switch is in down position, see if we should run it.
1173   ED43             ;**********************************************************			
1174   ED43 BD EE 36    sw_down		jsr	sw_tbl_lookup		;Loads X with pointer to switch table entry
1175   ED46 E6 00       			ldab	$00,X				;GAME ROM Switch Data 1(Flags,etc)
1176   ED48 96 C2       			ldaa	sys_temp5
1177   ED4A 95 C0       			bita	sys_temp3
1178   ED4C 27 06       			beq	sw_dtime			;Is switch still down?
1179   ED4E C5 08       			bitb	#$08				;No, but check Flag 08 which is Instant Trigger
1180   ED50             			ifne					;Not instant,.. leave now.
1180   ED50             
1180   ED50 27 FE       
1181   ED52 20 04       				bra	sw_trig_yes			;Must have been instant, do it now.	
1182   ED54 C5 10       sw_dtime			bitb	#$10				;Switch has been down enough, but is it enabled?
1183   ED56             				ifne					;no.. leave now.
1183   ED56             
1183   ED56 27 FE       
1184   ED58 8D CC       sw_trig_yes				bsr	check_sw_mask		;Checks Switch Flags for Tilt and Gameover and if switch is in range
1185   ED5A             					ifcc					;If not okay to run... leave
1185   ED5A             
1185   ED5A 25 FE       
1186   ED5C 4F          						clra	
1187   ED5D C5 40       						bitb	#$40				;Is it Active on Game Tilt?
1188   ED5F             						ifne					
1188   ED5F             
1188   ED5F 27 FE       
1189   ED61 8A 04       							oraa	#$04				;Give this thread a different priority then
1190   ED63             						endif
1190   ED63             
1190   ED63             
1190   ED63             
1190   ED63             
1190   ED63             
1190   ED63~            						endif
1190   ED63~            						endif
1190   ED63             
1190   ED63~            						endif
1190   ED63~            						endif
1190   ED63             
1190   ED60             
1190   ED60 02          
1190   ED61             
1190   ED61             
1190   ED61~            						endif
1190   ED61~            						endif
1190   ED61~            						endif
1190   ED61             
1190   ED63             
1190   ED63~            						endif
1190   ED63~            						endif
1190   ED63             
1191   ED63 97 C8       						staa	thread_priority
1192   ED65 96 C3       						ldaa	sw_encoded			;Switch # (encoded)
1193   ED67 EE 01       						ldx	$01,X
1194   ED69 C5 07       						bitb	#$07				;Was this a inline defined switch type? Type = 0
1195   ED6B             						ifeq					;Always?
1195   ED6B             
1195   ED6B 26 FE       
1196   ED6D EE 02       							ldx	$02,X				;Get handler address at base pointer + 2
1197   ED6F             						endif
1197   ED6F             
1197   ED6F             
1197   ED6F             
1197   ED6F             
1197   ED6F             
1197   ED6F~            						endif
1197   ED6F~            						endif
1197   ED6F             
1197   ED6F~            						endif
1197   ED6F~            						endif
1197   ED6F             
1197   ED6C             
1197   ED6C 02          
1197   ED6D             
1197   ED6D             
1197   ED6D~            						endif
1197   ED6D~            						endif
1197   ED6D~            						endif
1197   ED6D             
1197   ED6F             
1197   ED6F~            						endif
1197   ED6F~            						endif
1197   ED6F             
1198   ED6F 5D          						tstb					;Is the handler code WML7 or Native?
1199   ED70             						ifmi					;Minus = WML7
1199   ED70             
1199   ED70 2A FE       
1200   ED72 DF C4       							stx	sys_temp_w2			;X = Handler Address
1201   ED74 CE F4 52    							ldx	#macro_next		;Will put this routine into VM.
1202   ED77             						endif
1202   ED77             
1202   ED77             
1202   ED77             
1202   ED77             
1202   ED77             
1202   ED77~            						endif
1202   ED77~            						endif
1202   ED77             
1202   ED77~            						endif
1202   ED77~            						endif
1202   ED77             
1202   ED71             
1202   ED71 05          
1202   ED72             
1202   ED72             
1202   ED72~            						endif
1202   ED72~            						endif
1202   ED72~            						endif
1202   ED72             
1202   ED77             
1202   ED77~            						endif
1202   ED77~            						endif
1202   ED77             
1203   ED77 BD D0 B0    						jsr	gr_switch_event		;Game ROM switch event hook
1204   ED7A BD E9 D8    						jsr	newthread_sp		;Push VM: Data in A,B,X,threadpriority,$A6,$A7
1205   ED7D 25 69       						bcs	_clc_rts			;Carry set if VM was full and thread not added
1206   ED7F             											;Exit now and don't mark switch as attended too.
1207   ED7F             					endif
1207   ED7F             
1207   ED7F             
1207   ED7F             
1207   ED7F             
1207   ED7F             
1207   ED7F~            					endif
1207   ED7F~            					endif
1207   ED7F             
1207   ED7F~            					endif
1207   ED7F~            					endif
1207   ED7F             
1207   ED5B             
1207   ED5B 23          
1207   ED5C             
1207   ED5C             
1207   ED5C~            					endif
1207   ED5C~            					endif
1207   ED5C~            					endif
1207   ED5C             
1207   ED7F             
1207   ED7F~            					endif
1207   ED7F~            					endif
1207   ED7F             
1208   ED7F             				endif
1208   ED7F             
1208   ED7F             
1208   ED7F             
1208   ED7F             
1208   ED7F             
1208   ED7F~            				endif
1208   ED7F~            				endif
1208   ED7F             
1208   ED7F~            				endif
1208   ED7F~            				endif
1208   ED7F             
1208   ED57             
1208   ED57 27          
1208   ED58             
1208   ED58             
1208   ED58~            				endif
1208   ED58~            				endif
1208   ED58~            				endif
1208   ED58             
1208   ED7F             
1208   ED7F~            				endif
1208   ED7F~            				endif
1208   ED7F             
1209   ED7F             			endif
1209   ED7F             
1209   ED7F             
1209   ED7F             
1209   ED7F             
1209   ED7F             
1209   ED7F~            			endif
1209   ED7F~            			endif
1209   ED7F             
1209   ED7F~            			endif
1209   ED7F~            			endif
1209   ED7F             
1209   ED51             
1209   ED51 2D          
1209   ED52             
1209   ED52             
1209   ED52~            			endif
1209   ED52~            			endif
1209   ED52~            			endif
1209   ED52             
1209   ED7F             
1209   ED7F~            			endif
1209   ED7F~            			endif
1209   ED7F             
1210   ED7F DE BE       			ldx	sys_temp1
1211   ED81 96 C0       			ldaa	sys_temp3
1212   ED83 A8 7D       			eora	switch_debounced,X		;Clear Switch Matrix Flag (switch attended too)
1213   ED85 A7 7D       			staa	switch_debounced,X
1214   ED87 DE BE       sw_proc		ldx	sys_temp1
1215   ED89 D6 C0       			ldab	sys_temp3
1216   ED8B 53          			comb	
1217   ED8C 17          			tba	
1218   ED8D E4 85       			andb	switch_masked,X
1219   ED8F E7 85       			stab	switch_masked,X
1220   ED91 16          			tab	
1221   ED92 E4 8D       			andb	switch_pending,X
1222   ED94 E7 8D       			stab	switch_pending,X
1223   ED96 16          			tab	
1224   ED97 A4 95       			anda	switch_aux,X
1225   ED99 A7 95       			staa	switch_aux,X
1226   ED9B E4 9D       			andb	switch_b4,X
1227   ED9D E7 9D       			stab	switch_b4,X
1228   ED9F 39          			rts	
1229   EDA0             			
1230   EDA0             ;****************************************************************************
1231   EDA0             ;*
1232   EDA0             ;****************************************************************************			
1233   EDA0 DF BE       check_sw_close	stx	sys_temp1
1234   EDA2 E6 7D       			ldab	switch_debounced,X
1235   EDA4 D7 C2       			stab	sys_temp5				;Store 
1236   EDA6 97 C1       			staa	sys_temp4
1237   EDA8 8D 2D       _sc01			bsr	getswitch				;Clear Carry if Switch Active or Done
1238   EDAA 25 28       			bcs	to_ldx_rts				;get outta here!
1239   EDAC 8D 3C       			bsr	sw_pack				;$A5 = ($A1<<3)+BitPos($A2)
1240   EDAE 8D 6A       			bsr	sw_get_time				;Gets Switch Trigger Data
1241   EDB0             			ifne						;If it is not 0 then we must time it
1241   EDB0             
1241   EDB0 27 FE       
1242   EDB2 9B CA       				adda	irqcount				;Number of IRQ's since last loop
1243   EDB4 DE B4       				ldx	switch_queue_pointer
1244   EDB6 8C 11 18    				cpx	#switch_queue_end
1245   EDB9 27 ED       				beq	_sc01
1246   EDBB A7 00       				staa	$00,X
1247   EDBD 96 C3       				ldaa	sw_encoded				;Encoded Switch Number
1248   EDBF A7 01       				staa	$01,X
1249   EDC1 08          				inx	
1250   EDC2 08          				inx	
1251   EDC3 DF B4       				stx	switch_queue_pointer
1252   EDC5 DE BE       				ldx	sys_temp1
1253   EDC7 A6 9D       				ldaa	switch_b4,X
1254   EDC9 9A C0       				oraa	sys_temp3
1255   EDCB A7 9D       				staa	switch_b4,X
1256   EDCD 20 D9       				bra	_sc01
1257   EDCF             			endif
1257   EDCF             
1257   EDCF             
1257   EDCF             
1257   EDCF             
1257   EDCF             
1257   EDCF~            			endif
1257   EDCF~            			endif
1257   EDCF             
1257   EDCF~            			endif
1257   EDCF~            			endif
1257   EDCF             
1257   EDB1             
1257   EDB1 1D          
1257   EDB2             
1257   EDB2             
1257   EDB2~            			endif
1257   EDB2~            			endif
1257   EDB2~            			endif
1257   EDB2             
1257   EDCF             
1257   EDCF~            			endif
1257   EDCF~            			endif
1257   EDCF             
1258   EDCF BD ED 43    			jsr	sw_down				;Ready to do switch now!
1259   EDD2 20 D4       			bra	_sc01
1260   EDD4 DE BE       to_ldx_rts		ldx	sys_temp1
1261   EDD6 39          			rts
1262   EDD7             			
1263   EDD7             ;****************************************************************************
1264   EDD7             ;*
1265   EDD7             ;****************************************************************************				
1266   EDD7 4F          getswitch		clra	
1267   EDD8 0D          			sec	
1268   EDD9 D6 C1       			ldab	sys_temp4			;Switch Data
1269   EDDB             			ifne
1269   EDDB             
1269   EDDB 27 FE       
1270   EDDD             				begin
1270   EDDD             
1271   EDDD 49          					rola	
1272   EDDE 95 C1       					bita	sys_temp4
1273   EDE0             				neend
1273   EDE0             
1273   EDE0             
1273   EDE0~            				neend
1273   EDE0~            				neend
1273   EDE0~            				neend
1273   EDE0             
1273   EDE0 27 FB       
1273   EDE2             
1273   EDE2~            				neend
1273   EDE2~            				neend
1273   EDE2             
1274   EDE2 97 C0       				staa	sys_temp3
1275   EDE4 98 C1       				eora	sys_temp4
1276   EDE6 97 C1       				staa	sys_temp4
1277   EDE8 0C          _clc_rts			clc	
1278   EDE9             			endif
1278   EDE9             
1278   EDE9             
1278   EDE9             
1278   EDE9             
1278   EDE9             
1278   EDE9~            			endif
1278   EDE9~            			endif
1278   EDE9             
1278   EDE9~            			endif
1278   EDE9~            			endif
1278   EDE9             
1278   EDDC             
1278   EDDC 0C          
1278   EDDD             
1278   EDDD             
1278   EDDD~            			endif
1278   EDDD~            			endif
1278   EDDD~            			endif
1278   EDDD             
1278   EDE9             
1278   EDE9~            			endif
1278   EDE9~            			endif
1278   EDE9             
1279   EDE9 39          			rts 
1280   EDEA             
1281   EDEA             ;****************************************************************************
1282   EDEA             ;* Takes the decimal representation of the switch number contained in 
1283   EDEA             ;* sys_temp2 and sys_temp3 and converts it into a more compact form of 
1284   EDEA             ;* 	
1285   EDEA             ;* AAAAABBB
1286   EDEA             ;* 
1287   EDEA             ;* where AAAAA is the column number of the switch (sw 17 = 2)
1288   EDEA             ;*       BBB   is the bit position of the current switch (sw 17 = $01)
1289   EDEA             ;****************************************************************************	
1290   EDEA 96 BF       sw_pack		ldaa	sys_temp2
1291   EDEC 48          			asla	
1292   EDED 48          			asla	
1293   EDEE 48          			asla	
1294   EDEF D6 C0       			ldab	sys_temp3
1295   EDF1             			begin
1295   EDF1             
1296   EDF1 56          				rorb	
1297   EDF2 25 03       				bcs	pack_done
1298   EDF4 4C          				inca	
1299   EDF5             			loopend
1299   EDF5             
1299   EDF5             
1299   EDF5~            			loopend
1299   EDF5~            			loopend
1299   EDF5~            			loopend
1299   EDF5             
1299   EDF5 20 FA       
1299   EDF7             
1299   EDF7~            			loopend
1299   EDF7~            			loopend
1299   EDF7             
1300   EDF7 97 C3       pack_done		staa	sw_encoded
1301   EDF9 39          			rts
1302   EDFA             
1303   EDFA             ;****************************************************************************
1304   EDFA             ;*
1305   EDFA             ;****************************************************************************				
1306   EDFA 97 C1       check_sw_open	staa	sys_temp4
1307   EDFC DF BE       			stx	sys_temp1
1308   EDFE 8D D7       next_switch		bsr	getswitch				;Clear Carry if Switch Activated
1309   EE00 25 D2       			bcs	to_ldx_rts				;ldx $A0, rts.
1310   EE02 8D E6       			bsr	sw_pack				;$A5(A) = ($A1<<3)+BitPos($A2) Encode Matrix Position
1311   EE04 CE 11 00    			ldx	#switch_queue
1312   EE07             			begin
1312   EE07             
1313   EE07 9C B4       				cpx	switch_queue_pointer
1314   EE09 27 F3       				beq	next_switch
1315   EE0B A1 01       				cmpa	$01,X					;Is this switch in the buffer?
1316   EE0D             				ifeq
1316   EE0D             
1316   EE0D 26 FE       
1317   EE0F 8D 3D       					bsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
1318   EE11 BD ED 87    					jsr	sw_proc
1319   EE14 20 E8       					bra	next_switch
1320   EE16             				endif
1320   EE16             
1320   EE16             
1320   EE16             
1320   EE16             
1320   EE16             
1320   EE16~            				endif
1320   EE16~            				endif
1320   EE16             
1320   EE16~            				endif
1320   EE16~            				endif
1320   EE16             
1320   EE0E             
1320   EE0E 07          
1320   EE0F             
1320   EE0F             
1320   EE0F~            				endif
1320   EE0F~            				endif
1320   EE0F~            				endif
1320   EE0F             
1320   EE16             
1320   EE16~            				endif
1320   EE16~            				endif
1320   EE16             
1321   EE16 08          				inx	
1322   EE17 08          				inx	
1323   EE18             			loopend
1323   EE18             
1323   EE18             
1323   EE18~            			loopend
1323   EE18~            			loopend
1323   EE18~            			loopend
1323   EE18             
1323   EE18 20 ED       
1323   EE1A             
1323   EE1A~            			loopend
1323   EE1A~            			loopend
1323   EE1A             
1324   EE1A             
1325   EE1A             
1326   EE1A             ;****************************************************************************
1327   EE1A             ;* Looks up the trigger data (time up and time down requirements) for the
1328   EE1A             ;* switch contained in 'sw_encoded'. If the switch table lists the trigger
1329   EE1A             ;* type as 0, then the trigger data is pulled from the location in bytes
1330   EE1A             ;* 2 and 3 of the switch table entry.
1331   EE1A             ;****************************************************************************				
1332   EE1A 8D 1A       sw_get_time		bsr	sw_tbl_lookup		;X = Data@ (E051 + $A5*3)
1333   EE1C A6 00       			ldaa	$00,X
1334   EE1E 84 07       			anda	#$07				;Get the trigger type for this switch
1335   EE20             			ifne					;If 1-7, then look up data in switch type table
1335   EE20             
1335   EE20 27 FE       
1336   EE22 48          				asla						
1337   EE23 CE D0 64    				ldx	#gr_switchtypetable-2		;Game ROM Table: Switch Trigger Table
1338   EE26 8D 16       				bsr	xplusa				;X = X + A
1339   EE28             			else					;Otherwise, this switch has inline trigger data pointer
1339   EE28             
1339   EE28             
1339   EE28             
1339   EE28             
1339   EE21             
1339   EE21             
1339   EE21             
1339   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE21             
1339   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE21~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE21             
1339   EE21             
1339   EE21 08          
1339   EE28             
1339   EE28 20 FE       
1339   EE2A             
1339   EE2A             
1339   EE2A             
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A             
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A             
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A~            			else					;Otherwise, this switch has inline trigger data pointer
1339   EE2A             
1340   EE2A EE 01       				ldx	$01,X
1341   EE2C             			endif
1341   EE2C             
1341   EE2C             
1341   EE2C             
1341   EE2C             
1341   EE2C             
1341   EE2C~            			endif
1341   EE2C~            			endif
1341   EE2C             
1341   EE2C~            			endif
1341   EE2C~            			endif
1341   EE2C             
1341   EE29             
1341   EE29 02          
1341   EE2A             
1341   EE2A             
1341   EE2A~            			endif
1341   EE2A~            			endif
1341   EE2A~            			endif
1341   EE2A             
1341   EE2C             
1341   EE2C~            			endif
1341   EE2C~            			endif
1341   EE2C             
1342   EE2C 96 C2       			ldaa	sys_temp5			;Matrix Data
1343   EE2E 94 C0       			anda	sys_temp3			;Bit Position
1344   EE30             			ifne
1344   EE30             
1344   EE30 27 FE       
1345   EE32 08          				inx					;Point to Switch Close Trigger data instead
1346   EE33             			endif
1346   EE33             
1346   EE33             
1346   EE33             
1346   EE33             
1346   EE33             
1346   EE33~            			endif
1346   EE33~            			endif
1346   EE33             
1346   EE33~            			endif
1346   EE33~            			endif
1346   EE33             
1346   EE31             
1346   EE31 01          
1346   EE32             
1346   EE32             
1346   EE32~            			endif
1346   EE32~            			endif
1346   EE32~            			endif
1346   EE32             
1346   EE33             
1346   EE33~            			endif
1346   EE33~            			endif
1346   EE33             
1347   EE33 A6 00       			ldaa	$00,X				;Load Trigger Data
1348   EE35 39          			rts
1349   EE36             			
1350   EE36 96 C3       sw_tbl_lookup	ldaa	sw_encoded
1351   EE38 16          			tab	
1352   EE39 48          			asla					;Times 3 for switch table entry length
1353   EE3A 1B          			aba	
1354   EE3B FE D0 51    			ldx	gr_switchtable_ptr		;*** Table Pointer ***
1355   EE3E 36          xplusa		psha	
1356   EE3F DF C4       			stx	sys_temp_w2
1357   EE41 9B C5       			adda	sys_temp_w2+1
1358   EE43 97 C5       			staa	sys_temp_w2+1
1359   EE45             			ifcs
1359   EE45             
1359   EE45 24 FE       
1360   EE47 7C 00 C4    				inc	sys_temp_w2
1361   EE4A             			endif 
1361   EE4A             
1361   EE4A             
1361   EE4A             
1361   EE4A             
1361   EE4A             
1361   EE4A~            			endif 
1361   EE4A~            			endif 
1361   EE4A             
1361   EE4A~            			endif 
1361   EE4A~            			endif 
1361   EE4A             
1361   EE46             
1361   EE46 03          
1361   EE47             
1361   EE47             
1361   EE47~            			endif 
1361   EE47~            			endif 
1361   EE47~            			endif 
1361   EE47             
1361   EE4A             
1361   EE4A~            			endif 
1361   EE4A~            			endif 
1361   EE4A             
1362   EE4A DE C4       			ldx	sys_temp_w2
1363   EE4C 32          			pula	
1364   EE4D 39          			rts	  
1365   EE4E             
1366   EE4E DF C4       copy_word		stx	sys_temp_w2
1367   EE50 DE B4       			ldx	switch_queue_pointer
1368   EE52 09          			dex	
1369   EE53 09          			dex	
1370   EE54 DF B4       			stx	switch_queue_pointer
1371   EE56 A6 00       			ldaa	$00,X
1372   EE58 E6 01       			ldab	$01,X
1373   EE5A DE C4       			ldx	sys_temp_w2
1374   EE5C A7 00       			staa	$00,X
1375   EE5E E7 01       			stab	$01,X
1376   EE60 39          			rts	
1377   EE61             
1378   EE61             ;**************************************************
1379   EE61             ;* Initializes the Virtual Machine stack. Routine
1380   EE61             ;* will set up all 'next' pointers for each thread
1381   EE61             ;* placeholder. The VM size is determined by the 
1382   EE61             ;* settings in the game ROM. This must be balanced
1383   EE61             ;* properly for each game so that the created
1384   EE61             ;* threads do not clobber the cpu stack since they
1385   EE61             ;* grow towards each other.
1386   EE61             ;**************************************************
1387   EE61 F6 D0 4B    setup_vm_stack	ldab	gr_maxthreads		;Max Size of VM
1388   EE64 CE 11 9C    			ldx	#threadpool_base
1389   EE67 DF CD       			stx	vm_nextslot
1390   EE69             			begin
1390   EE69             
1391   EE69 DF BA       				stx	temp2
1392   EE6B 96 BB       				ldaa	temp2+1
1393   EE6D 8B 12       				adda	#$12
1394   EE6F A7 01       				staa	$01,X
1395   EE71 86 00       				ldaa	#$00
1396   EE73 99 BA       				adca	temp2
1397   EE75 A7 00       				staa	$00,X
1398   EE77 5A          				decb	
1399   EE78 27 04       				beq	stack_done
1400   EE7A EE 00       				ldx	$00,X
1401   EE7C             			loopend
1401   EE7C             
1401   EE7C             
1401   EE7C~            			loopend
1401   EE7C~            			loopend
1401   EE7C~            			loopend
1401   EE7C             
1401   EE7C 20 EB       
1401   EE7E             
1401   EE7E~            			loopend
1401   EE7E~            			loopend
1401   EE7E             
1402   EE7E E7 00       stack_done		stab	$00,X
1403   EE80 E7 01       			stab	$01,X
1404   EE82 D7 CB       			stab	vm_base
1405   EE84 D7 CC       			stab	vm_base+1
1406   EE86 CE 00 CB    			ldx	#vm_base
1407   EE89 DF D1       			stx	vm_tail_thread
1408   EE8B 39          			rts
1409   EE8C             
1410   EE8C             ;**************************************************
1411   EE8C             ;* Adds B to X, Protects A
1412   EE8C             ;**************************************************				
1413   EE8C 36          xplusb		psha	
1414   EE8D 17          			tba	
1415   EE8E 8D AE       			bsr	xplusa		;X = X + A
1416   EE90 32          			pula	
1417   EE91 39          			rts	
1418   EE92             
1419   EE92             ;**************************************************
1420   EE92             ;* Pulls data from CMOS location in X and X+1
1421   EE92             ;* and puts it in A. X is double incremented.
1422   EE92             ;*
1423   EE92             ;* Requires:	X
1424   EE92             ;* Protects:	B
1425   EE92             ;* Output:		A
1426   EE92             ;**************************************************		
1427   EE92 37          cmosinc_a		pshb	
1428   EE93 A6 00       			ldaa	$00,X
1429   EE95 E6 01       			ldab	$01,X
1430   EE97 08          			inx	
1431   EE98 08          			inx	
1432   EE99 C4 0F       			andb	#$0F
1433   EE9B 48          			asla	
1434   EE9C 48          			asla	
1435   EE9D 48          			asla	
1436   EE9E 48          			asla	
1437   EE9F 1B          			aba	
1438   EEA0 33          			pulb	
1439   EEA1 39          			rts
1440   EEA2             
1441   EEA2             ;**************************************************
1442   EEA2             ;* Pulls data from CMOS location in X and X+1
1443   EEA2             ;* and puts it in B. X is double incremented.
1444   EEA2             ;*
1445   EEA2             ;* Requires:	X
1446   EEA2             ;* Protects:	A
1447   EEA2             ;* Output:		B
1448   EEA2             ;**************************************************				
1449   EEA2 36          cmosinc_b		psha	
1450   EEA3 8D ED       			bsr	cmosinc_a
1451   EEA5 16          			tab	
1452   EEA6 32          			pula	
1453   EEA7 39          			rts
1454   EEA8             
1455   EEA8             ;**************************************************
1456   EEA8             ;* Transfers the byte value in B to the CMOS RAM
1457   EEA8             ;* location contained in X. The byte is stored in
1458   EEA8             ;* two consecutive nybbles in CMOS. X is double 
1459   EEA8             ;* incremented.
1460   EEA8             ;*
1461   EEA8             ;* Requires: 	B,X
1462   EEA8             ;* Protects:	A
1463   EEA8             ;**************************************************
1464   EEA8 36          b_cmosinc		psha	
1465   EEA9 17          			tba	
1466   EEAA 8D 42       			bsr	a_cmosinc		;A -> CMOS,X++
1467   EEAC 32          			pula	
1468   EEAD 39          			rts	
1469   EEAE             			
1470   EEAE             ;**************************************************
1471   EEAE             ;* Reset Game Audits only
1472   EEAE             ;**************************************************			
1473   EEAE CE 00 66    reset_audits	ldx	#aud_reset_end-cmos_base		;Clear RAM from 0100-0165
1474   EEB1 20 03       			bra	clr_ram
1475   EEB3 CE 01 00    clr_ram_100		ldx	#cmos_base
1476   EEB6             clr_ram		begin
1476   EEB6             
1477   EEB6 6F FF       				clr	$FF,X
1478   EEB8 09          				dex	
1479   EEB9             			eqend
1479   EEB9             
1479   EEB9             
1479   EEB9~            			eqend
1479   EEB9~            			eqend
1479   EEB9~            			eqend
1479   EEB9             
1479   EEB9 26 FB       
1479   EEBB             
1479   EEBB~            			eqend
1479   EEBB~            			eqend
1479   EEBB             
1480   EEBB 39          			rts	
1481   EEBC             
1482   EEBC             ;**************************************************
1483   EEBC             ;* Restores Factory Settings and resets all audit 
1484   EEBC             ;* information, reloads pricing data and restores 
1485   EEBC             ;* the backup high score.
1486   EEBC             ;**************************************************			
1487   EEBC             factory_zeroaudits	
1488   EEBC 8D F5       			bsr	clr_ram_100				;Clear RAM 0100-01FF
1489   EEBE CE 01 7D    			ldx	#adj_base
1490   EEC1 DF B8       			stx	temp1
1491   EEC3 CE D0 03    			ldx	#gr_defaudit			;Begining of Default Audit Data
1492   EEC6 C6 18       			ldab	#$18
1493   EEC8 8D 59       			bsr	copyblock2				;Transfer Audit Data
1494   EECA C6 01       			ldab	#$01
1495   EECC B6 21 00    			ldaa	pia_sound_data			;Read W29 Jumper Setting
1496   EECF             			ifmi
1496   EECF             
1496   EECF 2A FE       
1497   EED1 5C          				incb
1498   EED2             			endif
1498   EED2             
1498   EED2             
1498   EED2             
1498   EED2             
1498   EED2             
1498   EED2~            			endif
1498   EED2~            			endif
1498   EED2             
1498   EED2~            			endif
1498   EED2~            			endif
1498   EED2             
1498   EED0             
1498   EED0 01          
1498   EED1             
1498   EED1             
1498   EED1~            			endif
1498   EED1~            			endif
1498   EED1~            			endif
1498   EED1             
1498   EED2             
1498   EED2~            			endif
1498   EED2~            			endif
1498   EED2             
1499   EED2 8D 3B       			bsr	loadpricing				;Load Pricing Data
1500   EED4 8D 06       			bsr	restore_hstd			;Restore Backup High Score
1501   EED6 CE FC C8    			ldx	#to_audadj
1502   EED9 7E EA 24    			jmp	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
1503   EEDC             
1504   EEDC             ;**************************************************
1505   EEDC             ;* Clears the CMOS High Score RAM then copies
1506   EEDC             ;* the backup high score.
1507   EEDC             ;**************************************************			
1508   EEDC 4F          restore_hstd	clra	
1509   EEDD BD FB 7F    			jsr	fill_hstd_digits			;Fill HSTD Digits with A
1510   EEE0 CE 01 81    			ldx	#adj_backuphstd
1511   EEE3 8D AD       			bsr	cmosinc_a				;CMOS,X++ -> A
1512   EEE5 16          			tab	
1513   EEE6 BD EC 32    			jsr	split_ab				;Shift A<<4 B>>4
1514   EEE9 CE 01 66    			ldx	#aud_currenthstd			;CMOS: Current HSTD
1515   EEEC 8D BA       			bsr	b_cmosinc				;B -> CMOS,X++
1516   EEEE             
1517   EEEE             			
1518   EEEE             ;**************************************************
1519   EEEE             ;* Transfers the byte value in A to the CMOS RAM
1520   EEEE             ;* location contained in X. The byte is stored in
1521   EEEE             ;* two consecutive nybbles in CMOS. X is double 
1522   EEEE             ;* incremented.
1523   EEEE             ;*
1524   EEEE             ;* Requires: 	A,X
1525   EEEE             ;* Protects:	B
1526   EEEE             ;**************************************************			
1527   EEEE 36          a_cmosinc		psha	
1528   EEEF A7 01       			staa	$01,X
1529   EEF1 44          			lsra	
1530   EEF2 44          			lsra	
1531   EEF3 44          			lsra	
1532   EEF4 44          			lsra	
1533   EEF5 A7 00       			staa	$00,X
1534   EEF7 08          			inx	
1535   EEF8 08          			inx	
1536   EEF9 32          			pula	
1537   EEFA 39          			rts	 
1538   EEFB             
1539   EEFB             ;********************************************************
1540   EEFB             ;* Copies B bytes of data from address in X(temp2) to 
1541   EEFB             ;* address in temp1
1542   EEFB             ;*
1543   EEFB             ;* Requires:	B,X,temp1
1544   EEFB             ;* Protects:	A
1545   EEFB             ;* Destroys:	B,X,temp1,temp2
1546   EEFB             ;* Output:		B = 0
1547   EEFB             ;******************************************************** 			
1548   EEFB 36          copyblock		psha	
1549   EEFC             			begin
1549   EEFC             
1550   EEFC A6 00       				ldaa	$00,X
1551   EEFE 08          				inx	
1552   EEFF DF BA       				stx	temp2
1553   EF01 DE B8       				ldx	temp1
1554   EF03 A7 00       				staa	$00,X
1555   EF05 08          				inx	
1556   EF06 DF B8       				stx	temp1
1557   EF08 DE BA       				ldx	temp2
1558   EF0A 5A          				decb	
1559   EF0B             			eqend
1559   EF0B             
1559   EF0B             
1559   EF0B~            			eqend
1559   EF0B~            			eqend
1559   EF0B~            			eqend
1559   EF0B             
1559   EF0B 26 EF       
1559   EF0D             
1559   EF0D~            			eqend
1559   EF0D~            			eqend
1559   EF0D             
1560   EF0D 32          			pula	
1561   EF0E 39          			rts
1562   EF0F             
1563   EF0F             ;************************************************
1564   EF0F             ;* Copies the default pricing data block from
1565   EF0F             ;* the game ROM to CMOS RAM. Register B contains
1566   EF0F             ;* either $01 or $02 which specifies which 
1567   EF0F             ;* default table to copy based on MPU jumper W29
1568   EF0F             ;*
1569   EF0F             ;* Requires: B
1570   EF0F             ;************************************************				
1571   EF0F F7 01 AE    loadpricing		stab	adj_pricecontrol+1		;Get the LSB of the pricing index
1572   EF12 CE 01 AF    			ldx	#cmos_pricingbase   
1573   EF15 DF B8       			stx	temp1
1574   EF17 58          			aslb						
1575   EF18 17          			tba	
1576   EF19 48          			asla	
1577   EF1A 1B          			aba	
1578   EF1B CE D0 15    			ldx	#gr_gameadjust7			;*** Table Pointer ***
1579   EF1E BD EE 3E    			jsr	xplusa				;X = X + A
1580   EF21 C6 06       			ldab	#$06
1581   EF23 36          copyblock2		psha
1582   EF24             			begin	
1582   EF24             
1583   EF24 A6 00       				ldaa	$00,X
1584   EF26 08          				inx	
1585   EF27 DF BA       				stx	temp2
1586   EF29 DE B8       				ldx	temp1
1587   EF2B 8D C1       				bsr	a_cmosinc				;A -> CMOS,X++
1588   EF2D DF B8       				stx	temp1
1589   EF2F DE BA       				ldx	temp2
1590   EF31 5A          				decb	
1591   EF32             			eqend
1591   EF32             
1591   EF32             
1591   EF32~            			eqend
1591   EF32~            			eqend
1591   EF32~            			eqend
1591   EF32             
1591   EF32 26 F0       
1591   EF34             
1591   EF34~            			eqend
1591   EF34~            			eqend
1591   EF34             
1592   EF34 32          			pula	
1593   EF35 39          			rts
1594   EF36             			
1595   EF36             ;******************************************************
1596   EF36             ;* IRQ Routine
1597   EF36             ;*
1598   EF36             ;* This is the main timekeeping section of the code. 
1599   EF36             ;* All events are kept track of by couting the IRQ's
1600   EF36             ;* that have run.
1601   EF36             ;*
1602   EF36             ;* Tasks processed in the IRQ:
1603   EF36             ;*		
1604   EF36             ;*		Update Next Lamp
1605   EF36             ;******************************************************
1606   EF36             sys_irq_entry
1607   EF36 D6 A5       	ldab   irq_counter
1608   EF38 7A 00 F5    			dec   randomseed
1609   EF3B 56          			rorb  
1610   EF3C             			ifcc
1610   EF3C             
1610   EF3C 25 FE       
1611   EF3E 7C 00 A7    				inc   lamp_index_wordx
1612   EF41 96 A8       				ldaa   lamp_bit
1613   EF43 48          				asla  
1614   EF44             				ifeq
1614   EF44             
1614   EF44 26 FE       
1615   EF46 97 A7       					staa   lamp_index_wordx
1616   EF48 97 A5       					staa   irq_counter
1617   EF4A 97 AE       					staa   $00AE
1618   EF4C 4C          					inca  
1619   EF4D             				endif
1619   EF4D             
1619   EF4D             
1619   EF4D             
1619   EF4D             
1619   EF4D             
1619   EF4D~            				endif
1619   EF4D~            				endif
1619   EF4D             
1619   EF4D~            				endif
1619   EF4D~            				endif
1619   EF4D             
1619   EF45             
1619   EF45 07          
1619   EF46             
1619   EF46             
1619   EF46~            				endif
1619   EF46~            				endif
1619   EF46~            				endif
1619   EF46             
1619   EF4D             
1619   EF4D~            				endif
1619   EF4D~            				endif
1619   EF4D             
1620   EF4D 97 A8       				staa   lamp_bit
1621   EF4F             			endif
1621   EF4F             
1621   EF4F             
1621   EF4F             
1621   EF4F             
1621   EF4F             
1621   EF4F~            			endif
1621   EF4F~            			endif
1621   EF4F             
1621   EF4F~            			endif
1621   EF4F~            			endif
1621   EF4F             
1621   EF3D             
1621   EF3D 11          
1621   EF3E             
1621   EF3E             
1621   EF3E~            			endif
1621   EF3E~            			endif
1621   EF3E~            			endif
1621   EF3E             
1621   EF4F             
1621   EF4F~            			endif
1621   EF4F~            			endif
1621   EF4F             
1622   EF4F DE A6       			ldx   lamp_index_word
1623   EF51 D6 A5       			ldab   irq_counter
1624   EF53 C4 07       			andb  #$07
1625   EF55             			ifeq
1625   EF55             
1625   EF55 26 FE       
1626   EF57 86 FF       				ldaa  #$FF
1627   EF59 B7 28 02    				staa  pia_disp_seg_data
1628   EF5C 7F 40 00    				clr	pia_alphanum_digit_data
1629   EF5F 7F 40 02    				clr   pia_alphanum_seg_data
1630   EF62 D6 A5       				ldab  irq_counter
1631   EF64 F7 28 00    				stab  pia_disp_digit_data
1632   EF67 27 19       				beq   b_082
1633   EF69 7E F0 1A    				jmp   b_081
1634   EF6C             			endif
1634   EF6C             
1634   EF6C             
1634   EF6C             
1634   EF6C             
1634   EF6C             
1634   EF6C~            			endif
1634   EF6C~            			endif
1634   EF6C             
1634   EF6C~            			endif
1634   EF6C~            			endif
1634   EF6C             
1634   EF56             
1634   EF56 15          
1634   EF57             
1634   EF57             
1634   EF57~            			endif
1634   EF57~            			endif
1634   EF57~            			endif
1634   EF57             
1634   EF6C             
1634   EF6C~            			endif
1634   EF6C~            			endif
1634   EF6C             
1635   EF6C D7 AC       			stab   swap_player_displays
1636   EF6E 5A          			decb  
1637   EF6F             			ifne   
1637   EF6F             
1637   EF6F 27 FE       
1638   EF71 C0 03       				subb  #03
1639   EF73 26 30       				bne   snd_wr0
1640   EF75             			endif
1640   EF75             
1640   EF75             
1640   EF75             
1640   EF75             
1640   EF75             
1640   EF75~            			endif
1640   EF75~            			endif
1640   EF75             
1640   EF75~            			endif
1640   EF75~            			endif
1640   EF75             
1640   EF70             
1640   EF70 04          
1640   EF71             
1640   EF71             
1640   EF71~            			endif
1640   EF71~            			endif
1640   EF71~            			endif
1640   EF71             
1640   EF75             
1640   EF75~            			endif
1640   EF75~            			endif
1640   EF75             
1641   EF75 79 00 A9    			rol   comma_data_temp
1642   EF78 56          			rorb  
1643   EF79 79 00 A9    			rol   comma_data_temp
1644   EF7C 56          			rorb  
1645   EF7D FA 21 02    			orab  pia_comma_data
1646   EF80 20 28       			bra   snd_wr
1647   EF82 7C 00 B3    b_082			inc   irqcount16
1648   EF85 96 7C       			ldaa  comma_flags
1649   EF87 97 A9       			staa  comma_data_temp
1650   EF89 96 78       			ldaa  dmask_p1
1651   EF8B 97 AA       			staa  credp1p2_bufferselect
1652   EF8D 96 7A       			ldaa  dmask_p3
1653   EF8F 97 AB       			staa  mbipp3p4_bufferselect
1654   EF91 D6 5E       			ldab  wave_p2_b0
1655   EF93 79 00 AA    			rol   credp1p2_bufferselect
1656   EF96             			ifcs
1656   EF96             
1656   EF96 24 FE       
1657   EF98 D6 5F       				ldab   wave_p2_b1
1658   EF9A             			endif
1658   EF9A             
1658   EF9A             
1658   EF9A             
1658   EF9A             
1658   EF9A             
1658   EF9A~            			endif
1658   EF9A~            			endif
1658   EF9A             
1658   EF9A~            			endif
1658   EF9A~            			endif
1658   EF9A             
1658   EF97             
1658   EF97 02          
1658   EF98             
1658   EF98             
1658   EF98~            			endif
1658   EF98~            			endif
1658   EF98~            			endif
1658   EF98             
1658   EF9A             
1658   EF9A~            			endif
1658   EF9A~            			endif
1658   EF9A             
1659   EF9A 96 5C       			ldaa  wave_p1_b0
1660   EF9C 79 00 AB    			rol   mbipp3p4_bufferselect
1661   EF9F 24 71       			bcc   b_083
1662   EFA1 96 5D       			ldaa  wave_p1_b1
1663   EFA3 20 6D       			bra   b_083
1664   EFA5             
1665   EFA5             			;***********************************
1666   EFA5             			;* Sound command clear
1667   EFA5             			;***********************************
1668   EFA5 F6 21 02    snd_wr0		ldab  pia_comma_data
1669   EFA8 C4 3F       			andb  #$3F
1670   EFAA F7 21 02    snd_wr		stab  pia_comma_data
1671   EFAD             
1672   EFAD             			;reset displays
1673   EFAD 7F 40 00    			clr   pia_alphanum_digit_data
1674   EFB0 7F 40 02    			clr   pia_alphanum_seg_data
1675   EFB3 86 FF       			ldaa   #$FF
1676   EFB5 B7 28 02    			staa   pia_disp_seg_data
1677   EFB8 96 A5       			ldaa   irq_counter
1678   EFBA B7 28 00    			staa   pia_disp_digit_data
1679   EFBD             			
1680   EFBD             			
1681   EFBD A6 4C       			ldaa   score_p1_b0,X
1682   EFBF 79 00 AA    			rol   credp1p2_bufferselect
1683   EFC2             			ifcs
1683   EFC2             
1683   EFC2 24 FE       
1684   EFC4 A6 54       				ldaa   score_p1_b1,X
1685   EFC6             			endif
1685   EFC6             
1685   EFC6             
1685   EFC6             
1685   EFC6             
1685   EFC6             
1685   EFC6~            			endif
1685   EFC6~            			endif
1685   EFC6             
1685   EFC6~            			endif
1685   EFC6~            			endif
1685   EFC6             
1685   EFC3             
1685   EFC3 02          
1685   EFC4             
1685   EFC4             
1685   EFC4~            			endif
1685   EFC4~            			endif
1685   EFC4~            			endif
1685   EFC4             
1685   EFC6             
1685   EFC6~            			endif
1685   EFC6~            			endif
1685   EFC6             
1686   EFC6 C6 03       			ldab   #03
1687   EFC8 D1 A5       			cmpb  irq_counter
1688   EFCA             			ifgt
1688   EFCA             
1688   EFCA 2F FE       
1689   EFCC 79 00 AB    				rol   mbipp3p4_bufferselect
1690   EFCF             			else
1690   EFCF             
1690   EFCF             
1690   EFCF             
1690   EFCF             
1690   EFCB             
1690   EFCB             
1690   EFCB             
1690   EFCB~            			else
1690   EFCB~            			else
1690   EFCB~            			else
1690   EFCB~            			else
1690   EFCB             
1690   EFCB~            			else
1690   EFCB~            			else
1690   EFCB~            			else
1690   EFCB~            			else
1690   EFCB             
1690   EFCB             
1690   EFCB 05          
1690   EFCF             
1690   EFCF 20 FE       
1690   EFD1             
1690   EFD1             
1690   EFD1             
1690   EFD1~            			else
1690   EFD1~            			else
1690   EFD1~            			else
1690   EFD1~            			else
1690   EFD1~            			else
1690   EFD1             
1690   EFD1~            			else
1690   EFD1~            			else
1690   EFD1             
1690   EFD1~            			else
1690   EFD1~            			else
1690   EFD1             
1691   EFD1 DE AD       				ldx	alpha_digit_cur
1692   EFD3 7C 00 AE    				inc   alpha_digit_cur+1 	;increment LSB
1693   EFD6 E6 60       				ldab  alpha_b0,X
1694   EFD8 79 00 AB    				rol   mbipp3p4_bufferselect
1695   EFDB             				ifcs
1695   EFDB             
1695   EFDB 24 FE       
1696   EFDD E6 6C       					ldab   alpha_b1,X
1697   EFDF             				endif
1697   EFDF             
1697   EFDF             
1697   EFDF             
1697   EFDF             
1697   EFDF             
1697   EFDF~            				endif
1697   EFDF~            				endif
1697   EFDF             
1697   EFDF~            				endif
1697   EFDF~            				endif
1697   EFDF             
1697   EFDC             
1697   EFDC 02          
1697   EFDD             
1697   EFDD             
1697   EFDD~            				endif
1697   EFDD~            				endif
1697   EFDD~            				endif
1697   EFDD             
1697   EFDF             
1697   EFDF~            				endif
1697   EFDF~            				endif
1697   EFDF             
1698   EFDF FE D0 61    				ldx   gr_character_defs_ptr	;This is the index table for all characters
1699   EFE2 36          				psha  
1700   EFE3 17          				tba   
1701   EFE4 C4 3F       				andb  #$3F				;max 3F characters in lookup table
1702   EFE6 58          				aslb  
1703   EFE7 DF FE       				stx   character_ptr
1704   EFE9 DB FF       				addb  character_ptr+1
1705   EFEB D7 FF       				stab  character_ptr+1
1706   EFED             				ifcs
1706   EFED             
1706   EFED 24 FE       
1707   EFEF 7C 00 FE    					inc   character_ptr
1708   EFF2             				endif
1708   EFF2             
1708   EFF2             
1708   EFF2             
1708   EFF2             
1708   EFF2             
1708   EFF2~            				endif
1708   EFF2~            				endif
1708   EFF2             
1708   EFF2~            				endif
1708   EFF2~            				endif
1708   EFF2             
1708   EFEE             
1708   EFEE 03          
1708   EFEF             
1708   EFEF             
1708   EFEF~            				endif
1708   EFEF~            				endif
1708   EFEF~            				endif
1708   EFEF             
1708   EFF2             
1708   EFF2~            				endif
1708   EFF2~            				endif
1708   EFF2             
1709   EFF2 DE FE       				ldx   character_ptr
1710   EFF4 E6 00       				ldab   $00,X
1711   EFF6 F7 40 00    				stab   pia_alphanum_digit_data	;write character data
1712   EFF9 E6 01       				ldab   $01,X
1713   EFFB 85 80       				bita  #$80
1714   EFFD             				ifne
1714   EFFD             
1714   EFFD 27 FE       
1715   EFFF CA 40       					orab   #$40
1716   F001             				endif
1716   F001             
1716   F001             
1716   F001             
1716   F001             
1716   F001             
1716   F001~            				endif
1716   F001~            				endif
1716   F001             
1716   F001~            				endif
1716   F001~            				endif
1716   F001             
1716   EFFE             
1716   EFFE 02          
1716   EFFF             
1716   EFFF             
1716   EFFF~            				endif
1716   EFFF~            				endif
1716   EFFF~            				endif
1716   EFFF             
1716   F001             
1716   F001~            				endif
1716   F001~            				endif
1716   F001             
1717   F001 85 40       				bita  #$40
1718   F003             				ifne   
1718   F003             
1718   F003 27 FE       
1719   F005 CA 80       					orab   #$80
1720   F007             				endif
1720   F007             
1720   F007             
1720   F007             
1720   F007             
1720   F007             
1720   F007~            				endif
1720   F007~            				endif
1720   F007             
1720   F007~            				endif
1720   F007~            				endif
1720   F007             
1720   F004             
1720   F004 02          
1720   F005             
1720   F005             
1720   F005~            				endif
1720   F005~            				endif
1720   F005~            				endif
1720   F005             
1720   F007             
1720   F007~            				endif
1720   F007~            				endif
1720   F007             
1721   F007 F7 40 02    				stab   pia_alphanum_seg_data	;write comma/dot data
1722   F00A 32          				pula  	
1723   F00B             			endif
1723   F00B             
1723   F00B             
1723   F00B             
1723   F00B             
1723   F00B             
1723   F00B~            			endif
1723   F00B~            			endif
1723   F00B             
1723   F00B~            			endif
1723   F00B~            			endif
1723   F00B             
1723   EFD0             
1723   EFD0 3A          
1723   EFD1             
1723   EFD1             
1723   EFD1~            			endif
1723   EFD1~            			endif
1723   EFD1~            			endif
1723   EFD1             
1723   F00B             
1723   F00B~            			endif
1723   F00B~            			endif
1723   F00B             
1724   F00B C6 FF       			ldab   #$FF
1725   F00D 76 00 AC    			ror	swap_player_displays
1726   F010             			ifcc
1726   F010             
1726   F010 25 FE       
1727   F012 54          b_083				lsrb						;Show BA
1728   F013 54          				lsrb	
1729   F014 54          				lsrb	
1730   F015 54          				lsrb	
1731   F016 84 F0       				anda	#$F0
1732   F018 20 20       				bra	b_08A					;Goto Display End
1733   F01A 96 79       b_081				ldaa	dmask_p2
1734   F01C 97 AA       				staa	credp1p2_bufferselect
1735   F01E 96 7B       				ldaa	dmask_p4
1736   F020 97 AB       				staa	mbipp3p4_bufferselect
1737   F022 D6 5E       				ldab	wave_p2_b0
1738   F024 79 00 AA    				rol	credp1p2_bufferselect
1739   F027             				ifcs
1739   F027             
1739   F027 24 FE       
1740   F029 D6 5F       					ldab	wave_p2_b1
1741   F02B             				endif
1741   F02B             
1741   F02B             
1741   F02B             
1741   F02B             
1741   F02B             
1741   F02B~            				endif
1741   F02B~            				endif
1741   F02B             
1741   F02B~            				endif
1741   F02B~            				endif
1741   F02B             
1741   F028             
1741   F028 02          
1741   F029             
1741   F029             
1741   F029~            				endif
1741   F029~            				endif
1741   F029~            				endif
1741   F029             
1741   F02B             
1741   F02B~            				endif
1741   F02B~            				endif
1741   F02B             
1742   F02B 96 5C       				ldaa	wave_p1_b0
1743   F02D 79 00 AB    				rol	mbipp3p4_bufferselect
1744   F030             				ifcs
1744   F030             
1744   F030 24 FE       
1745   F032 96 5D       					ldaa	wave_p1_b1
1746   F034             				endif
1746   F034             
1746   F034             
1746   F034             
1746   F034             
1746   F034             
1746   F034~            				endif
1746   F034~            				endif
1746   F034             
1746   F034~            				endif
1746   F034~            				endif
1746   F034             
1746   F031             
1746   F031 02          
1746   F032             
1746   F032             
1746   F032~            				endif
1746   F032~            				endif
1746   F032~            				endif
1746   F032             
1746   F034             
1746   F034~            				endif
1746   F034~            				endif
1746   F034             
1747   F034             			endif
1747   F034             
1747   F034             
1747   F034             
1747   F034             
1747   F034             
1747   F034~            			endif
1747   F034~            			endif
1747   F034             
1747   F034~            			endif
1747   F034~            			endif
1747   F034             
1747   F011             
1747   F011 22          
1747   F012             
1747   F012             
1747   F012~            			endif
1747   F012~            			endif
1747   F012~            			endif
1747   F012             
1747   F034             
1747   F034~            			endif
1747   F034~            			endif
1747   F034             
1748   F034 48          			asla						;Show AB
1749   F035 48          			asla	
1750   F036 48          			asla	
1751   F037 48          			asla	
1752   F038 C4 0F       			andb	#$0F					;Fall through to end
1753   F03A 1B          b_08A			aba	
1754   F03B B7 28 02    			staa	pia_disp_seg_data			;Store Digit BCD Data
1755   F03E             
1756   F03E             			;***********************************
1757   F03E             			;* Now do lamps...
1758   F03E             			;***********************************
1759   F03E 86 FF       			ldaa	#$FF
1760   F040 D6 A5       			ldab	irq_counter
1761   F042 56          			rorb	
1762   F043             			ifcc						;Do Lamps every other IRQ
1762   F043             
1762   F043 25 FE       
1763   F045 CE 24 00    				ldx	#pia_lamp_row_data			;Lamp PIA Offset
1764   F048 A7 00       				staa	$00,X					;Blank Lamp Rows with an $FF
1765   F04A B7 22 00    				staa	pia_sol_low_data
1766   F04D E6 03       				ldab	$03,X
1767   F04F 6F 03       				clr	$03,X
1768   F051 A7 02       				staa	$02,X					;Blank Lamp Columns with $FF
1769   F053 E7 03       				stab	$03,X
1770   F055 96 A8       				ldaa	lamp_bit				;Which strobe are we on
1771   F057 A7 02       				staa	$02,X				;Put the strobe out there
1772   F059 A1 02       				cmpa	$02,X				;Did it take?
1773   F05B             				ifeq
1773   F05B             
1773   F05B 26 FE       
1774   F05D DE A6       					ldx	lamp_index_word			;This will always be $0001-$0080, it is
1775   F05F             											;used to index the lamp buffer bit positions.			
1776   F05F A6 28       					ldaa	lampbufferselect,X		;0=buffer_0 1=buffer_1
1777   F061 16          					tab	
1778   F062 53          					comb	
1779   F063 E4 10       					andb	lampbuffer0,X
1780   F065 A4 34       					anda	lampbuffer1,X
1781   F067 1B          					aba	
1782   F068 43          					coma	
1783   F069 B7 24 00    					staa	pia_lamp_row_data			;Store Lamp Row Data
1784   F06C             
1785   F06C             					;* In Hyperball we have another half matrix of lamps too
1786   F06C 96 A7       					ldaa  lamp_index_wordx
1787   F06E 16          					tab   
1788   F06F 44          					lsra  
1789   F070 97 A7       					staa	lamp_index_wordx
1790   F072 DE A6       					ldx   lamp_index_word
1791   F074 D7 A7       					stab  lamp_index_wordx
1792   F076 A6 30       					ldaa  lampbufferselectx,X
1793   F078 16          					tab   
1794   F079 53          					comb  
1795   F07A E4 18       					andb  lampbuffer0x,X
1796   F07C A4 3C       					anda  lampbuffer1x,X
1797   F07E 1B          					aba   
1798   F07F 43          					coma  
1799   F080 D6 A7       					ldab   lamp_index_wordx
1800   F082 0C          					clc   
1801   F083 56          					rorb  
1802   F084             					ifcs
1802   F084             
1802   F084 24 FE       
1803   F086 44          						lsra  
1804   F087 44          						lsra  
1805   F088 44          						lsra  
1806   F089 44          						lsra  
1807   F08A             					endif
1807   F08A             
1807   F08A             
1807   F08A             
1807   F08A             
1807   F08A             
1807   F08A~            					endif
1807   F08A~            					endif
1807   F08A             
1807   F08A~            					endif
1807   F08A~            					endif
1807   F08A             
1807   F085             
1807   F085 04          
1807   F086             
1807   F086             
1807   F086~            					endif
1807   F086~            					endif
1807   F086~            					endif
1807   F086             
1807   F08A             
1807   F08A~            					endif
1807   F08A~            					endif
1807   F08A             
1808   F08A 84 0F       					anda  #0F
1809   F08C B7 22 00    					staa   pia_sol_low_data
1810   F08F             				endif
1810   F08F             
1810   F08F             
1810   F08F             
1810   F08F             
1810   F08F             
1810   F08F~            				endif
1810   F08F~            				endif
1810   F08F             
1810   F08F~            				endif
1810   F08F~            				endif
1810   F08F             
1810   F05C             
1810   F05C 32          
1810   F05D             
1810   F05D             
1810   F05D~            				endif
1810   F05D~            				endif
1810   F05D~            				endif
1810   F05D             
1810   F08F             
1810   F08F~            				endif
1810   F08F~            				endif
1810   F08F             
1811   F08F             			endif
1811   F08F             
1811   F08F             
1811   F08F             
1811   F08F             
1811   F08F             
1811   F08F~            			endif
1811   F08F~            			endif
1811   F08F             
1811   F08F~            			endif
1811   F08F~            			endif
1811   F08F             
1811   F044             
1811   F044 4A          
1811   F045             
1811   F045             
1811   F045~            			endif
1811   F045~            			endif
1811   F045~            			endif
1811   F045             
1811   F08F             
1811   F08F~            			endif
1811   F08F~            			endif
1811   F08F             
1812   F08F             			
1813   F08F             			;***********************************
1814   F08F             			;* Done with Displays
1815   F08F             			;* Increment the IRQ counter
1816   F08F             			;***********************************
1817   F08F 96 A5       			ldaa	irq_counter				;We need to increment this every time.
1818   F091 4C          			inca	
1819   F092 97 A5       			staa	irq_counter
1820   F094             
1821   F094             			;******************************************************************
1822   F094             			;* Now do switches, The switch logic has a total of 5 data buffers.
1823   F094             			;* These are used for debouncing the switch through software. The
1824   F094             			;* original Level7 code used an X indexed loop to do this, which was
1825   F094             			;* much more compact, however because of the indexed addressing it
1826   F094             			;* was substantially slower, while this takes more ROM space it ends
1827   F094             			;* up being about 100 clock cycles faster
1828   F094             			;******************************************************************
1829   F094 46          			rora	
1830   F095             			ifcs
1830   F095             
1830   F095 24 FE       
1831   F097 7E F1 5F    				jmp	irq_sol
1832   F09A             			endif
1832   F09A             
1832   F09A             
1832   F09A             
1832   F09A             
1832   F09A             
1832   F09A~            			endif
1832   F09A~            			endif
1832   F09A             
1832   F09A~            			endif
1832   F09A~            			endif
1832   F09A             
1832   F096             
1832   F096 03          
1832   F097             
1832   F097             
1832   F097~            			endif
1832   F097~            			endif
1832   F097~            			endif
1832   F097             
1832   F09A             
1832   F09A~            			endif
1832   F09A~            			endif
1832   F09A             
1833   F09A 86 01       			ldaa	#$01
1834   F09C B7 30 02    			staa	pia_switch_strobe_data		;Store Switch Column Drives
1835   F09F             						
1836   F09F 96 7D       			ldaa	switch_debounced
1837   F0A1 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
1838   F0A4 16          			tab	
1839   F0A5 94 85       			anda	switch_masked
1840   F0A7 9A 8D       			oraa	switch_pending
1841   F0A9 97 8D       			staa	switch_pending
1842   F0AB D7 85       			stab	switch_masked
1843   F0AD 53          			comb	
1844   F0AE D4 8D       			andb	switch_pending
1845   F0B0 DA 95       			orab	switch_aux
1846   F0B2 D7 95       			stab	switch_aux
1847   F0B4 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
1848   F0B7 96 7E       			ldaa	switch_debounced+1
1849   F0B9 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
1850   F0BC 16          			tab	
1851   F0BD 94 86       			anda	switch_masked+1
1852   F0BF 9A 8E       			oraa	switch_pending+1
1853   F0C1 97 8E       			staa	switch_pending+1
1854   F0C3 D7 86       			stab	switch_masked+1
1855   F0C5 53          			comb	
1856   F0C6 D4 8E       			andb	switch_pending+1
1857   F0C8 DA 96       			orab	switch_aux+1
1858   F0CA D7 96       			stab	switch_aux+1
1859   F0CC 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
1860   F0CF 96 7F       			ldaa	switch_debounced+2
1861   F0D1 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
1862   F0D4 16          			tab	
1863   F0D5 94 87       			anda	switch_masked+2
1864   F0D7 9A 8F       			oraa	switch_pending+2
1865   F0D9 97 8F       			staa	switch_pending+2
1866   F0DB D7 87       			stab	switch_masked+2
1867   F0DD 53          			comb	
1868   F0DE D4 8F       			andb	switch_pending+2
1869   F0E0 DA 97       			orab	switch_aux+2
1870   F0E2 D7 97       			stab	switch_aux+2
1871   F0E4 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
1872   F0E7 96 80       			ldaa	switch_debounced+3
1873   F0E9 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
1874   F0EC 16          			tab	
1875   F0ED 94 88       			anda	switch_masked+3
1876   F0EF 9A 90       			oraa	switch_pending+3
1877   F0F1 97 90       			staa	switch_pending+3
1878   F0F3 D7 88       			stab	switch_masked+3
1879   F0F5 53          			comb	
1880   F0F6 D4 90       			andb	switch_pending+3
1881   F0F8 DA 98       			orab	switch_aux+3
1882   F0FA D7 98       			stab	switch_aux+3
1883   F0FC 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
1884   F0FF 96 81       			ldaa	switch_debounced+4
1885   F101 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
1886   F104 16          			tab	
1887   F105 94 89       			anda	switch_masked+4
1888   F107 9A 91       			oraa	switch_pending+4
1889   F109 97 91       			staa	switch_pending+4
1890   F10B D7 89       			stab	switch_masked+4
1891   F10D 53          			comb	
1892   F10E D4 91       			andb	switch_pending+4
1893   F110 DA 99       			orab	switch_aux+4
1894   F112 D7 99       			stab	switch_aux+4
1895   F114 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
1896   F117 96 82       			ldaa	switch_debounced+5
1897   F119 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
1898   F11C 16          			tab	
1899   F11D 94 8A       			anda	switch_masked+5
1900   F11F 9A 92       			oraa	switch_pending+5
1901   F121 97 92       			staa	switch_pending+5
1902   F123 D7 8A       			stab	switch_masked+5
1903   F125 53          			comb	
1904   F126 D4 92       			andb	switch_pending+5
1905   F128 DA 9A       			orab	switch_aux+5
1906   F12A D7 9A       			stab	switch_aux+5
1907   F12C 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
1908   F12F 96 83       			ldaa	switch_debounced+6
1909   F131 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
1910   F134 16          			tab	
1911   F135 94 8B       			anda	switch_masked+6
1912   F137 9A 93       			oraa	switch_pending+6
1913   F139 97 93       			staa	switch_pending+6
1914   F13B D7 8B       			stab	switch_masked+6
1915   F13D 53          			comb	
1916   F13E D4 93       			andb	switch_pending+6
1917   F140 DA 9B       			orab	switch_aux+6
1918   F142 D7 9B       			stab	switch_aux+6
1919   F144 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
1920   F147 96 84       			ldaa	switch_debounced+7
1921   F149 B8 30 00    			eora	pia_switch_return_data		;Switch Row Return Data
1922   F14C 16          			tab	
1923   F14D 94 8C       			anda	switch_masked+7
1924   F14F 9A 94       			oraa	switch_pending+7
1925   F151 97 94       			staa	switch_pending+7
1926   F153 D7 8C       			stab	switch_masked+7
1927   F155 53          			comb	
1928   F156 D4 94       			andb	switch_pending+7
1929   F158 DA 9C       			orab	switch_aux+7
1930   F15A D7 9C       			stab	switch_aux+7
1931   F15C 78 30 02    			asl	pia_switch_strobe_data		;Shift to Next Column Drive
1932   F15F             			;***********************************
1933   F15F             			;* Now do solenoids
1934   F15F             			;***********************************
1935   F15F 96 B2       irq_sol		ldaa	solenoid_counter			;Solenoid Counter
1936   F161             			ifne
1936   F161             
1936   F161 27 FE       
1937   F163 7A 00 B2    				dec	solenoid_counter			;Solenoid Counter
1938   F166             				ifeq
1938   F166             
1938   F166 26 FE       
1939   F168 DE AF       					ldx	solenoid_address
1940   F16A A6 00       					ldaa	$00,X
1941   F16C 98 B1       					eora	solenoid_bitpos
1942   F16E A7 00       					staa	$00,X
1943   F170             				endif
1943   F170             
1943   F170             
1943   F170             
1943   F170             
1943   F170             
1943   F170~            				endif
1943   F170~            				endif
1943   F170             
1943   F170~            				endif
1943   F170~            				endif
1943   F170             
1943   F167             
1943   F167 08          
1943   F168             
1943   F168             
1943   F168~            				endif
1943   F168~            				endif
1943   F168~            				endif
1943   F168             
1943   F170             
1943   F170~            				endif
1943   F170~            				endif
1943   F170             
1944   F170             			endif
1944   F170             
1944   F170             
1944   F170             
1944   F170             
1944   F170             
1944   F170~            			endif
1944   F170~            			endif
1944   F170             
1944   F170~            			endif
1944   F170~            			endif
1944   F170             
1944   F162             
1944   F162 0D          
1944   F163             
1944   F163             
1944   F163~            			endif
1944   F163~            			endif
1944   F163~            			endif
1944   F163             
1944   F170             
1944   F170~            			endif
1944   F170~            			endif
1944   F170             
1945   F170 3B          			rti
1946   F171             
1947   F171             ;*************************************************************************
1948   F171             ;* End IRQ
1949   F171             ;*************************************************************************
1950   F171             
1951   F171             ;*************************************************************************
1952   F171             ;* PIA Data Direction Register Data - Loaded on Initialization
1953   F171             ;*************************************************************************
1954   F171 7F 3E C0 3E pia_ddr_data	.db $7F,$3E,$C0,$3E	;$2100 - Sound PIA
1955   F175 FF 3C FF 34 			.db $FF,$3C,$FF,$34	;$2200 - Solenoid PIA
1956   F179 FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2400 - Lamp PIA
1957   F17D FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2800 - Display PIA
1958   F181 00 3C FF 3C 			.db $00,$3C,$FF,$3C	;$3000 - Switch PIA
1959   F185 FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$4000 - Alpha PIA
1960   F189             
1961   F189 0010001C0034lampbuffers		.db $00,$10,$00,$1C,$00,$34,$00,$28
1961   F18F 0028
1962   F191             
1963   F191             ;*************************************************************************
1964   F191             ;* Turn On Lamp: Lamp number is in A (packed format). This can also be 
1965   F191             ;*               used to set a bitflag.
1966   F191             ;*************************************************************************
1967   F191 DF BC       lamp_on		stx	temp3
1968   F193 CE 00 10    			ldx	#lampbuffer0			;Set up correct index to lampbuffer
1969   F196 37          lamp_or		pshb	
1970   F197 8D 79       			bsr	unpack_byte				
1971   F199 37          			pshb						;B now contains the bitpos
1972   F19A EA 00       			orab	$00,X
1973   F19C E7 00       lamp_commit		stab	$00,X					;turn it on
1974   F19E DF BA       			stx	temp2
1975   F1A0 D6 BB       			ldab	temp2+1				;was item worked on within lampbuffer0
1976   F1A2 C1 1C       			cmpb	#(bitflags)&$FF			;compare index against start of bitflags
1977   F1A4 33          			pulb	
1978   F1A5 24 05       			bcc	lamp_done
1979   F1A7 53          			comb						;If we are here, then we must switch buffers.
1980   F1A8 E4 30       			andb	lampbufferselectx,X		;We are now on buffer 0
1981   F1AA E7 30       			stab	lampbufferselectx,X
1982   F1AC 33          lamp_done		pulb	
1983   F1AD DE BC       			ldx	temp3
1984   F1AF 39          			rts
1985   F1B0             
1986   F1B0             ;*************************************************************************
1987   F1B0             ;* Turn Off Lamp: Lamp number is in A (packed format). This can also be 
1988   F1B0             ;*               used to clear a bitflag.
1989   F1B0             ;*************************************************************************			
1990   F1B0 DF BC       lamp_off		stx	temp3
1991   F1B2 CE 00 10    			ldx	#lampbuffer0
1992   F1B5 37          lamp_and		pshb	
1993   F1B6 8D 5A       			bsr	unpack_byte				;seperate into X and B
1994   F1B8 37          			pshb	
1995   F1B9 53          			comb	
1996   F1BA E4 00       			andb	$00,X
1997   F1BC 20 DE       			bra	lamp_commit
1998   F1BE             
1999   F1BE             ;*************************************************************************
2000   F1BE             ;* Sets a Lamp to 'flashing' state
2001   F1BE             ;*************************************************************************			
2002   F1BE DF BC       lamp_flash		stx	temp3
2003   F1C0 CE 00 40    			ldx	#lampflashflag
2004   F1C3 20 D1       			bra	lamp_or
2005   F1C5             
2006   F1C5             ;*************************************************************************
2007   F1C5             ;* Toggle Lamp from existing state. This may be used on bitflags as well.
2008   F1C5             ;*************************************************************************			
2009   F1C5 DF BC       lamp_invert		stx	temp3
2010   F1C7 CE 00 10    			ldx	#lampbuffer0
2011   F1CA 37          lamp_eor		pshb	
2012   F1CB 8D 45       			bsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
2013   F1CD E8 00       			eorb	$00,X
2014   F1CF E7 00       			stab	$00,X
2015   F1D1 20 D9       			bra	lamp_done				;Leave now
2016   F1D3             				
2017   F1D3 DF BC       lamp_on_b		stx	temp3
2018   F1D5 CE 00 28    			ldx	#lampbufferselect
2019   F1D8 20 BC       			bra	lamp_or
2020   F1DA             
2021   F1DA DF BC       lamp_off_b		stx	temp3
2022   F1DC CE 00 28    			ldx	#lampbufferselect
2023   F1DF 20 D4       			bra	lamp_and
2024   F1E1             
2025   F1E1 DF BC       lamp_invert_b	stx	temp3
2026   F1E3 CE 00 28    			ldx	#lampbufferselect
2027   F1E6 20 E2       			bra	lamp_eor
2028   F1E8             
2029   F1E8 DF BC       lamp_on_1		stx	temp3
2030   F1EA CE 00 34    			ldx	#lampbuffer1
2031   F1ED 20 A7       			bra	lamp_or
2032   F1EF             
2033   F1EF DF BC       lamp_off_1		stx	temp3
2034   F1F1 CE 00 34    			ldx	#lampbuffer1
2035   F1F4 20 BF       			bra	lamp_and
2036   F1F6             
2037   F1F6 DF BC       lamp_invert_1	stx	temp3
2038   F1F8 CE 00 34    			ldx	#lampbuffer1
2039   F1FB 20 CD       			bra	lamp_eor
2040   F1FD             			
2041   F1FD DF BC       lamp_on_f		stx	temp3
2042   F1FF CE 00 1C    			ldx	#bitflags
2043   F202 20 92       			bra	lamp_or
2044   F204             
2045   F204 DF BC       lamp_off_f		stx	temp3
2046   F206 CE 00 1C    			ldx	#bitflags
2047   F209 20 AA       			bra	lamp_and
2048   F20B             
2049   F20B DF BC       lamp_invert_f	stx	temp3
2050   F20D CE 00 1C    			ldx	#bitflags
2051   F210 20 B8       			bra	lamp_eor
2052   F212             
2053   F212             ;*********************************************************
2054   F212             ;* Converts Packed Byte data into an Index in X and a
2055   F212             ;* bitpos in B
2056   F212             ;*
2057   F212             ;* Packed Data Format: IIII IBBB
2058   F212             ;*
2059   F212             ;*	Where IIIII is the index to the lamp buffers.
2060   F212             ;*    Values between 
2061   F212             ;*      0-7		lampbuffer0
2062   F212             ;*      7-15	
2063   F212             ;*********************************************************	
2064   F212 36          unpack_byte		psha	
2065   F213 44          			lsra	
2066   F214 44          			lsra	
2067   F215 44          			lsra	
2068   F216 BD EE 3E    			jsr	xplusa				;X = X + A
2069   F219 32          			pula	
2070   F21A 7E EA E5    			jmp	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
2071   F21D             
2072   F21D             ;***************************************************************
2073   F21D             ;* Lamp Range Manipulation Code Start Here
2074   F21D             ;***************************************************************
2075   F21D             ;Clears all lamps in specified buffer, sets active buffer to 0		
2076   F21D 8D 71       lampm_clr0		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2077   F21F             			begin
2077   F21F             
2078   F21F 17          				tba	
2079   F220 43          				coma	
2080   F221 A4 00       				anda	$00,X
2081   F223 8D 07       				bsr	lampm_buf0			;Set Lamp to Buffer 0
2082   F225 BD F2 CB    				jsr	lamp_left			;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2083   F228             			csend						;Loop it!
2083   F228             
2083   F228             
2083   F228~            			csend						;Loop it!
2083   F228~            			csend						;Loop it!
2083   F228~            			csend						;Loop it!
2083   F228             
2083   F228 24 F5       
2083   F22A             
2083   F22A~            			csend						;Loop it!
2083   F22A~            			csend						;Loop it!
2083   F22A             
2084   F22A 20 5D       			bra	abx_ret
2085   F22C             
2086   F22C A7 00       lampm_buf0		staa	$00,X
2087   F22E DF BA       			stx	temp2
2088   F230 96 BB       			ldaa	temp2+1
2089   F232 81 1C       			cmpa	#$1C					;If we are not using Buffer $0010 then skip this
2090   F234             			ifcs
2090   F234             
2090   F234 24 FE       
2091   F236 17          				tba	
2092   F237 43          				coma	
2093   F238 A4 30       				anda	lampbufferselectx,X
2094   F23A A7 30       				staa	lampbufferselectx,X
2095   F23C             			endif
2095   F23C             
2095   F23C             
2095   F23C             
2095   F23C             
2095   F23C             
2095   F23C~            			endif
2095   F23C~            			endif
2095   F23C             
2095   F23C~            			endif
2095   F23C~            			endif
2095   F23C             
2095   F235             
2095   F235 06          
2095   F236             
2095   F236             
2095   F236~            			endif
2095   F236~            			endif
2095   F236~            			endif
2095   F236             
2095   F23C             
2095   F23C~            			endif
2095   F23C~            			endif
2095   F23C             
2096   F23C 39          			rts	 
2097   F23D             
2098   F23D             ;Invert entire range
2099   F23D 8D 51       lampm_f		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2100   F23F             			begin
2100   F23F             
2101   F23F 17          				tba	
2102   F240 A8 00       				eora	$00,X
2103   F242 A7 00       				staa	$00,X
2104   F244 BD F2 CB    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2105   F247             			csend
2105   F247             
2105   F247             
2105   F247~            			csend
2105   F247~            			csend
2105   F247~            			csend
2105   F247             
2105   F247 24 F6       
2105   F249             
2105   F249~            			csend
2105   F249~            			csend
2105   F249             
2106   F249 20 3E       			bra	abx_ret
2107   F24B             
2108   F24B             ;This is unused in the macros. You must call it directly at $F1D5
2109   F24B             ;The behavior of this command is probably the most complex. It 
2110   F24B             ;starts at the last lamp in the range. If it is already set, then
2111   F24B             ;the routine simply exits. If the last lamp is not set, the routine
2112   F24B             ;goes down through each lamp in the range. If if finds a lamp on,
2113   F24B             ;then it turns off that lamp, then goes back up to the next lamp
2114   F24B             ;and turns it on. If no lamps are on in the range, then the first
2115   F24B             ;lamp in the range is turned on.
2116   F24B             ;The best example of this routine is for the 10-20-30 lamps on 
2117   F24B             ;Jungle Lord. It will simply incrment the 10-20-30 lamps sequentially
2118   F24B             ;and then stop at 30. If none are on, then it will turn on 10.
2119   F24B             lampm_g				
2120   F24B 8D 4F       			bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
2121   F24D 26 3A       			bne	abx_ret
2122   F24F             			begin
2122   F24F             
2123   F24F BD F2 DA    				jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2124   F252 25 08       				bcs	b_098
2125   F254             			neend
2125   F254             
2125   F254             
2125   F254~            			neend
2125   F254~            			neend
2125   F254~            			neend
2125   F254             
2125   F254 27 F9       
2125   F256             
2125   F256~            			neend
2125   F256~            			neend
2125   F256             
2126   F256 17          			tba	
2127   F257 43          			coma	
2128   F258 A4 00       			anda	$00,X
2129   F25A A7 00       			staa	$00,X
2130   F25C 8D 6D       b_098			bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2131   F25E EA 00       b_09A			orab	$00,X
2132   F260 E7 00       			stab	$00,X
2133   F262 20 25       			bra	abx_ret
2134   F264             
2135   F264             ;***************************************************
2136   F264             ;* Goes through range bits from low to high and
2137   F264             ;* finds first cleared bit, sets it and exits.	
2138   F264             ;***************************************************	
2139   F264 8D 2A       lampm_a		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2140   F266             			begin
2140   F266             
2141   F266 27 F6       				beq	b_09A
2142   F268 8D 61       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2143   F26A 25 1D       				bcs	abx_ret				;Return if we have reached end lamp
2144   F26C             			loopend
2144   F26C             
2144   F26C             
2144   F26C~            			loopend
2144   F26C~            			loopend
2144   F26C~            			loopend
2144   F26C             
2144   F26C 20 F8       
2144   F26E             
2144   F26E~            			loopend
2144   F26E~            			loopend
2144   F26E             
2145   F26E             
2146   F26E             ;***************************************************
2147   F26E             ;* Goes through range bits from low to high and
2148   F26E             ;* finds first cleared bit, sets it and exits. If 
2149   F26E             ;* all bits in range are already set, then routine 
2150   F26E             ;* clears all bits in range.
2151   F26E             ;***************************************************			
2152   F26E 8D 20       lampm_b		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2153   F270             			begin
2153   F270             
2154   F270 27 EC       				beq	b_09A
2155   F272 8D 57       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2156   F274             			csend
2156   F274             
2156   F274             
2156   F274~            			csend
2156   F274~            			csend
2156   F274~            			csend
2156   F274             
2156   F274 24 FA       
2156   F276             
2156   F276~            			csend
2156   F276~            			csend
2156   F276             
2157   F276 DE BC       			ldx	temp3
2158   F278 96 BE       			ldaa	sys_temp1
2159   F27A D6 BF       			ldab	sys_temp2
2160   F27C 20 9F       			bra	lampm_clr0				;Turn OFF All lamps in Range
2161   F27E             
2162   F27E             ;Sets all lamp bits specified buffer, sets active buffer to 0 if action is on buffer 0			
2163   F27E 8D 10       lampm_set0		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2164   F280             			begin
2164   F280             
2165   F280 17          				tba	
2166   F281 AA 00       				oraa	$00,X
2167   F283 8D A7       				bsr	lampm_buf0			;Set Lamp to Buffer 0
2168   F285 8D 44       				bsr	lamp_left			;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2169   F287             			csend
2169   F287             
2169   F287             
2169   F287~            			csend
2169   F287~            			csend
2169   F287~            			csend
2169   F287             
2169   F287 24 F7       
2169   F289             
2169   F289~            			csend
2169   F289~            			csend
2169   F289             
2170   F289 96 BE       abx_ret		ldaa	sys_temp1
2171   F28B D6 BF       			ldab	sys_temp2
2172   F28D DE BC       			ldx	temp3
2173   F28F 39          			rts	 
2174   F290             
2175   F290             ;************************************************************
2176   F290             ;* Lamp Range Routines: This take care of manipulating
2177   F290             ;*                      a collection of sequential lamps
2178   F290             ;*                      to create various lighting effects.
2179   F290             ;************************************************************
2180   F290             ;* Loads the Lamp range data
2181   F290             ;*
2182   F290             ;* sys_temp2 = start lamp
2183   F290             ;* sys_temp3 = end lamp
2184   F290             ;* A = Byte data anded with curent bit
2185   F290             ;* B = Bitpos
2186   F290             ;* X = Lamp Byte Postion
2187   F290             ;*
2188   F290             ;************************************			
2189   F290 BD F2 A2    lampr_start		jsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Bitpos X=Buffer
2190   F293 96 C0       			ldaa	sys_temp3				;Starting lamp in range
2191   F295 BD F2 12    lr_ret		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
2192   F298 17          			tba	
2193   F299 A4 00       			anda	$00,X
2194   F29B 39          			rts	 
2195   F29C             
2196   F29C 8D 04       lampr_end		bsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Bitpos X=Buffer
2197   F29E 96 C1       			ldaa	sys_temp4				;End Lamp In range
2198   F2A0 20 F3       			bra	lr_ret
2199   F2A2             			
2200   F2A2 DF BC       lampr_setup		stx	temp3
2201   F2A4 97 BE       			staa	sys_temp1
2202   F2A6 D7 BF       			stab	sys_temp2
2203   F2A8 FE D0 4F    			ldx	gr_lamptable_ptr			;Game ROM: Lamp Range Table
2204   F2AB 16          			tab	
2205   F2AC 58          			aslb	
2206   F2AD C4 7F       			andb	#$7F
2207   F2AF BD EE 8C    			jsr	xplusb
2208   F2B2 EE 00       			ldx	$00,X
2209   F2B4 DF C0       			stx	sys_temp3				;Save Lamp Range
2210   F2B6 CE F1 89    			ldx	#lampbuffers			;Lamp Buffer Locations
2211   F2B9 49          			rola	
2212   F2BA 49          			rola	
2213   F2BB 49          			rola	
2214   F2BC 48          			asla	
2215   F2BD 84 07       			anda	#$07
2216   F2BF BD EE 3E    			jsr	xplusa				;X = X + A
2217   F2C2 EE 00       			ldx	$00,X					;Get the Buffer Pointer Specified
2218   F2C4 D6 C1       			ldab	sys_temp4
2219   F2C6 D0 C0       			subb	sys_temp3
2220   F2C8 D7 B8       			stab	temp1					;Store how many lamps affected
2221   F2CA 39          			rts	 
2222   F2CB             
2223   F2CB             ;*************************************************************
2224   F2CB             ;* Moves current lamp bit up one bit. If shifted off end of 
2225   F2CB             ;* current lamp buffer byte, then byte is incremented and bit
2226   F2CB             ;* is reset to $01.
2227   F2CB             ;*************************************************************			
2228   F2CB 58          lamp_left		aslb					;shift it
2229   F2CC             			ifcs					;did it go off end
2229   F2CC             
2229   F2CC 24 FE       
2230   F2CE 59          				rolb					;yes, rolb to #$01
2231   F2CF 08          				inx					;increment the byte position
2232   F2D0             			endif
2232   F2D0             
2232   F2D0             
2232   F2D0             
2232   F2D0             
2232   F2D0             
2232   F2D0~            			endif
2232   F2D0~            			endif
2232   F2D0             
2232   F2D0~            			endif
2232   F2D0~            			endif
2232   F2D0             
2232   F2CD             
2232   F2CD 02          
2232   F2CE             
2232   F2CE             
2232   F2CE~            			endif
2232   F2CE~            			endif
2232   F2CE~            			endif
2232   F2CE             
2232   F2D0             
2232   F2D0~            			endif
2232   F2D0~            			endif
2232   F2D0             
2233   F2D0 96 B8       ls_ret		ldaa	temp1				;load up the original lamp counter until end lamp
2234   F2D2 80 01       			suba	#$01				;take one off
2235   F2D4 97 B8       			staa	temp1				;store it again
2236   F2D6 17          			tba					;get the bit back again
2237   F2D7 A4 00       			anda	$00,X				;AND accum A with current buffer location
2238   F2D9 39          			rts	
2239   F2DA             
2240   F2DA             ;*************************************************************
2241   F2DA             ;* Moves current lamp bit down one bit. If shifted off start of 
2242   F2DA             ;* current lamp buffer byte, then byte is deincremented and bit
2243   F2DA             ;* is reset to #$80
2244   F2DA             ;*************************************************************			
2245   F2DA 54          lamp_right		lsrb	
2246   F2DB 24 F3       			bcc	ls_ret
2247   F2DD 56          			rorb	
2248   F2DE 09          			dex	
2249   F2DF 20 EF       			bra	ls_ret
2250   F2E1             
2251   F2E1             ;***************************************************
2252   F2E1             ;* Goes through range bits from high to low, routine
2253   F2E1             ;* finds first bit in range that is set and clears
2254   F2E1             ;* it and then exits.
2255   F2E1             ;***************************************************			
2256   F2E1 8D B9       lampm_c		bsr	lampr_end				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2257   F2E3             lm_test		ifeq
2257   F2E3             
2257   F2E3 26 FE       
2258   F2E5 8D F3       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2259   F2E7 24 FA       				bcc	lm_test
2260   F2E9 20 9E       				bra	abx_ret
2261   F2EB             			endif
2261   F2EB             
2261   F2EB             
2261   F2EB             
2261   F2EB             
2261   F2EB             
2261   F2EB~            			endif
2261   F2EB~            			endif
2261   F2EB             
2261   F2EB~            			endif
2261   F2EB~            			endif
2261   F2EB             
2261   F2E4             
2261   F2E4 06          
2261   F2E5             
2261   F2E5             
2261   F2E5~            			endif
2261   F2E5~            			endif
2261   F2E5~            			endif
2261   F2E5             
2261   F2EB             
2261   F2EB~            			endif
2261   F2EB~            			endif
2261   F2EB             
2262   F2EB 53          			comb	
2263   F2EC E4 00       			andb	$00,X
2264   F2EE E7 00       			stab	$00,X
2265   F2F0 20 97       			bra	abx_ret
2266   F2F2             
2267   F2F2             ;Rotate Up			
2268   F2F2 8D 9C       lampm_e		bsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2269   F2F4 DF BA       			stx	temp2
2270   F2F6 D7 B9       			stab	temp1+1
2271   F2F8             			begin
2271   F2F8             
2272   F2F8 97 C2       				staa	sys_temp5
2273   F2FA 8D CF       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2274   F2FC 25 04       				bcs	b_0A2					;Branch if we are at the end of the range
2275   F2FE 8D 1A       				bsr	b_0A3
2276   F300             			loopend
2276   F300             
2276   F300             
2276   F300~            			loopend
2276   F300~            			loopend
2276   F300~            			loopend
2276   F300             
2276   F300 20 F6       
2276   F302             
2276   F302~            			loopend
2276   F302~            			loopend
2276   F302             
2277   F302             			
2278   F302 DE BA       b_0A2			ldx	temp2					;Get the last Byte location
2279   F304 D6 B9       			ldab	temp1+1				;Get the last Bitpos
2280   F306 8D 12       			bsr	b_0A3
2281   F308 20 38       			bra	to_abx_ret
2282   F30A             
2283   F30A             ;Rotate Down			
2284   F30A 8D 90       lampm_d		bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
2285   F30C DF BA       			stx	temp2
2286   F30E D7 B9       			stab	temp1+1
2287   F310             			begin
2287   F310             
2288   F310 97 C2       				staa	sys_temp5
2289   F312 8D C6       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2290   F314 25 EC       				bcs	b_0A2
2291   F316 8D 02       				bsr	b_0A3
2292   F318             			loopend
2292   F318             
2292   F318             
2292   F318~            			loopend
2292   F318~            			loopend
2292   F318~            			loopend
2292   F318             
2292   F318 20 F6       
2292   F31A             
2292   F31A~            			loopend
2292   F31A~            			loopend
2292   F31A             
2293   F31A             
2294   F31A 36          b_0A3			psha					
2295   F31B 17          			tba					;B has the bitpos
2296   F31C 43          			coma	
2297   F31D A4 00       			anda	$00,X				;Mask it off
2298   F31F 7D 00 C2    			tst	sys_temp5			;sys_temp5 has the first bit in range's value or 0s
2299   F322             			ifne					;if it was on
2299   F322             
2299   F322 27 FE       
2300   F324 1B          				aba					;make it on again
2301   F325             			endif
2301   F325             
2301   F325             
2301   F325             
2301   F325             
2301   F325             
2301   F325~            			endif
2301   F325~            			endif
2301   F325             
2301   F325~            			endif
2301   F325~            			endif
2301   F325             
2301   F323             
2301   F323 01          
2301   F324             
2301   F324             
2301   F324~            			endif
2301   F324~            			endif
2301   F324~            			endif
2301   F324             
2301   F325             
2301   F325~            			endif
2301   F325~            			endif
2301   F325             
2302   F325 A7 00       			staa	$00,X				;store it
2303   F327 32          			pula	
2304   F328 39          			rts
2305   F329             
2306   F329 BD F2 9C    lampm_z		jsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
2307   F32C             			ifeq
2307   F32C             
2307   F32C 26 FE       
2308   F32E             				begin
2308   F32E             
2309   F32E 8D AA       					bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2310   F330 25 10       					bcs	to_abx_ret
2311   F332             				neend
2311   F332             
2311   F332             
2311   F332~            				neend
2311   F332~            				neend
2311   F332~            				neend
2311   F332             
2311   F332 27 FA       
2311   F334             
2311   F334~            				neend
2311   F334~            				neend
2311   F334             
2312   F334             			endif
2312   F334             
2312   F334             
2312   F334             
2312   F334             
2312   F334             
2312   F334~            			endif
2312   F334~            			endif
2312   F334             
2312   F334~            			endif
2312   F334~            			endif
2312   F334             
2312   F32D             
2312   F32D 06          
2312   F32E             
2312   F32E             
2312   F32E~            			endif
2312   F32E~            			endif
2312   F32E~            			endif
2312   F32E             
2312   F334             
2312   F334~            			endif
2312   F334~            			endif
2312   F334             
2313   F334 17          			tba	
2314   F335 A8 00       			eora	$00,X
2315   F337 A7 00       			staa	$00,X
2316   F339 BD F2 DA    			jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2317   F33C 25 04       			bcs	to_abx_ret
2318   F33E EA 00       			orab	$00,X
2319   F340 E7 00       			stab	$00,X
2320   F342 7E F2 89    to_abx_ret		jmp	abx_ret
2321   F345             
2322   F345 BD F2 90    lfill_a		jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2323   F348             b_0AB			ifne
2323   F348             
2323   F348 27 FE       
2324   F34A BD F2 CB    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2325   F34D 24 F9       				bcc	b_0AB
2326   F34F 20 F1       				bra	to_abx_ret
2327   F351             			endif
2327   F351             
2327   F351             
2327   F351             
2327   F351             
2327   F351             
2327   F351~            			endif
2327   F351~            			endif
2327   F351             
2327   F351~            			endif
2327   F351~            			endif
2327   F351             
2327   F349             
2327   F349 07          
2327   F34A             
2327   F34A             
2327   F34A~            			endif
2327   F34A~            			endif
2327   F34A~            			endif
2327   F34A             
2327   F351             
2327   F351~            			endif
2327   F351~            			endif
2327   F351             
2328   F351 0C          lmp_clc		clc	
2329   F352 20 EE       			bra	to_abx_ret
2330   F354             
2331   F354 BD F2 90    lfill_b		jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2332   F357             			begin
2332   F357             
2333   F357 26 F8       				bne	lmp_clc
2334   F359 BD F2 CB    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2335   F35C             			csend
2335   F35C             
2335   F35C             
2335   F35C~            			csend
2335   F35C~            			csend
2335   F35C~            			csend
2335   F35C             
2335   F35C 24 F9       
2335   F35E             
2335   F35E~            			csend
2335   F35E~            			csend
2335   F35E             
2336   F35E 20 E2       			bra	to_abx_ret
2337   F360             
2338   F360 CE 00 7D    bit_switch		ldx	#switch_debounced
2339   F363 20 12       			bra	bit_main
2340   F365 CE 00 40    bit_lamp_flash	ldx	#lampflashflag
2341   F368 20 0D       			bra	bit_main
2342   F36A CE 00 34    bit_lamp_buf_1	ldx	#lampbuffer1
2343   F36D 20 08       			bra	bit_main
2344   F36F CE 00 1C    bit_lamp_buf_f	ldx	#bitflags
2345   F372 20 03       			bra	bit_main
2346   F374 CE 00 10    bit_lamp_buf_0	ldx	#lampbuffer0
2347   F377 BD F2 12    bit_main		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
2348   F37A E5 00       			bitb	$00,X
2349   F37C 39          			rts	
2350   F37D             
2351   F37D 84 3F       lampm_x		anda	#$3F
2352   F37F BD F2 90    			jsr	lampr_start				;A=Current State,B=Bitpos,X=Lamp Byte Postion
2353   F382             			begin
2353   F382             
2354   F382 97 C8       				staa	thread_priority			;This is probably just a temp location?
2355   F384 17          				tba	
2356   F385 43          				coma	
2357   F386 A4 24       				anda	bitflagsx,X
2358   F388 9A C8       				oraa	thread_priority			;Recall temp
2359   F38A A7 24       				staa	bitflagsx,X
2360   F38C BD F2 CB    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2361   F38F             			csend
2361   F38F             
2361   F38F             
2361   F38F~            			csend
2361   F38F~            			csend
2361   F38F~            			csend
2361   F38F             
2361   F38F 24 F1       
2361   F391             
2361   F391~            			csend
2361   F391~            			csend
2361   F391             
2362   F391 20 AF       			bra	to_abx_ret
2363   F393             			
2364   F393             ;***************************************************
2365   F393             ;* System Checksum #2: Set to make ROM csum from
2366   F393             ;*                     $F000-F7FF equal to $00
2367   F393             ;***************************************************
2368   F393             	
2369   F393 D8          csum2			.db $D8
2370   F394             
2371   F394             ;***************************************************
2372   F394             ;* VM Macro Pointers: Master Lookup Table
2373   F394             ;***************************************************
2374   F394             				
2375   F394 F4 5A       master_vm_lookup	.dw vm_control_0x		;Misc Functions
2376   F396 F4 7B       			.dw vm_control_1x		;Lamp Functions
2377   F398 F4 C1       			.dw vm_control_2x		;Lamp Functions
2378   F39A F4 DC       			.dw vm_control_3x		;Solenoid Functions
2379   F39C F4 E9       			.dw vm_control_4x		;Sound, Immediate Exe Functions
2380   F39E F5 3B       			.dw vm_control_5x		;RAM,Delay,Jump,SimpleBransh Functions
2381   F3A0 F5 DA       			.dw vm_control_6x		;Indexed Delay Functions
2382   F3A2 F5 DE       			.dw vm_control_7x		;Immediate Delay Functions
2383   F3A4 F5 E2       			.dw vm_control_8x		;Jump Relative 
2384   F3A6 F5 F2       			.dw vm_control_9x		;jsr Relative
2385   F3A8 F5 FC       			.dw vm_control_ax		;jsr to Code Relative
2386   F3AA F6 05       			.dw vm_control_bx		;Add RAM
2387   F3AC F6 12       			.dw vm_control_cx		;Set RAM
2388   F3AE F4 CD       			.dw vm_control_dx		;Extended Lamp Functions
2389   F3B0 F6 21       			.dw vm_control_ex		;Play Sound Once
2390   F3B2 F6 21       			.dw vm_control_fx		;Play Sound Once
2391   F3B4             
2392   F3B4 F4 62       vm_lookup_0x	.dw macro_pcminus100
2393   F3B6 F4 3C       			.dw macro_go
2394   F3B8 F4 36       			.dw macro_rts
2395   F3BA E9 C4       			.dw killthread
2396   F3BC F4 69       			.dw macro_code_start
2397   F3BE F4 71       			.dw macro_special
2398   F3C0 F4 76       			.dw macro_extraball
2399   F3C2             	
2400   F3C2 F2 7E       vm_lookup_1x_a	.dw lampm_set0
2401   F3C4 F2 1D       			.dw lampm_clr0
2402   F3C6 F2 64       			.dw lampm_a
2403   F3C8 F2 6E       			.dw lampm_b
2404   F3CA F2 E1       			.dw lampm_c
2405   F3CC F3 0A       			.dw lampm_d
2406   F3CE F2 F2       			.dw lampm_e
2407   F3D0 F2 3D       			.dw lampm_f 
2408   F3D2               
2409   F3D2 F1 91       vm_lookup_1x_b	.dw lamp_on
2410   F3D4 F1 B0       			.dw lamp_off
2411   F3D6 F1 C5       			.dw lamp_invert
2412   F3D8 F1 BE       			.dw lamp_flash
2413   F3DA             
2414   F3DA             vm_lookup_2x
2415   F3DA F1 D3       			.dw lamp_on_b
2416   F3DC F1 DA       			.dw lamp_off_b
2417   F3DE F1 E1       			.dw lamp_invert_b
2418   F3E0             
2419   F3E0             vm_lookup_2x_b
2420   F3E0 F1 E8       			.dw lamp_on_1
2421   F3E2 F1 EF       			.dw lamp_off_1
2422   F3E4 F1 F6       			.dw lamp_invert_1
2423   F3E6             
2424   F3E6             vm_lookup_2x_c
2425   F3E6 F1 FD       			.dw lamp_on_f
2426   F3E8 F2 04       			.dw lamp_off_f
2427   F3EA F2 0B       			.dw lamp_invert_f
2428   F3EC             
2429   F3EC             vm_lookup_4x
2430   F3EC EB D3       			.dw add_points
2431   F3EE EB 3D       			.dw score_main  
2432   F3F0 EB 36       			.dw dsnd_pts 
2433   F3F2             
2434   F3F2             vm_lookup_5x    
2435   F3F2 F5 44       			.dw macro_ramadd
2436   F3F4 F5 59       			.dw macro_ramcopy
2437   F3F6 F5 64       			.dw macro_set_pri
2438   F3F8 F5 6C       			.dw macro_delay_imm_b
2439   F3FA F5 89       			.dw macro_rem_th_s
2440   F3FC F5 90       			.dw macro_rem_th_m
2441   F3FE F5 97       			.dw macro_jsr_noreturn
2442   F400 F5 C1       			.dw macro_jsr_return
2443   F402 F6 67       			.dw macro_branch
2444   F404 F6 67       			.dw macro_branch
2445   F406 F6 67       			.dw macro_branch
2446   F408 F6 67       			.dw macro_branch
2447   F40A F5 E9       			.dw macro_jmp_cpu
2448   F40C F6 3E       			.dw macro_setswitch
2449   F40E F6 56       			.dw macro_clearswitch
2450   F410 F6 00       			.dw macro_jmp_abs
2451   F412             
2452   F412             branch_lookup
2453   F412 F6 F3       			.dw branch_tilt		;Tilt Flag				
2454   F414 F6 FA       			.dw branch_gameover     ;Game Over Flag			
2455   F416 F5 2F       			.dw macro_getnextbyte	;NextByte = Straight Data		
2456   F418 F6 D6       			.dw branch_invert		;Invert Result			
2457   F41A F6 DB       			.dw branch_lamp_on	;Check if Lamp is On or Flashing
2458   F41C F6 E7       			.dw branch_lamprangeoff	;Lamp Range All Off			
2459   F41E F6 EE       			.dw branch_lamprangeon	;Lamp Range All On			
2460   F420 F7 01       			.dw branch_lampbuf1	;RAM Matrix $0028			
2461   F422 F7 0D       			.dw branch_switch		;Check Encoded Switch		
2462   F424 F7 17       			.dw branch_add		;A = A + B				
2463   F426 F7 12       			.dw branch_and		;Logical AND 				
2464   F428 F7 19       			.dw branch_or		;Logical OR 				
2465   F42A F7 1E       			.dw branch_equal		;A = B ??				
2466   F42C F7 23       			.dw branch_ge		;A >= B ??				
2467   F42E F7 26       			.dw branch_threadpri	;Check for Priority Thread??	
2468   F430 F7 2D       			.dw branch_bitwise	;A && B	
2469   F432             
2470   F432             ;*************************************************************
2471   F432             ;* Virtual Machine Routines:
2472   F432             ;*
2473   F432             ;* These are the main routines that are called to interpret
2474   F432             ;* the commands written in WML7.
2475   F432             ;*************************************************************
2476   F432             macro_start		
2477   F432 97 00       			staa	ram_base
2478   F434 D7 01       			stab	ram_base+1
2479   F436             macro_rts		
2480   F436 32          			pula	
2481   F437 97 EF       			staa	vm_pc
2482   F439 32          			pula	
2483   F43A 97 F0       			staa	vm_pc+1
2484   F43C             macro_go		
2485   F43C BD D0 BA    			jsr	gr_macro_event
2486   F43F BD F5 2F    			jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2487   F442 16          			tab	
2488   F443 54          			lsrb	
2489   F444 54          			lsrb	
2490   F445 54          			lsrb	
2491   F446 C4 1E       			andb	#$1E
2492   F448 CE F3 94    			ldx	#master_vm_lookup
2493   F44B BD EE 8C    			jsr	xplusb
2494   F44E EE 00       			ldx	$00,X
2495   F450 6E 00       			jmp	$00,X
2496   F452             
2497   F452 DF EF       macro_next		stx	vm_pc
2498   F454 97 00       abreg_sto		staa	vm_reg_a
2499   F456 D7 01       breg_sto		stab	vm_reg_b
2500   F458 20 E2       			bra	macro_go
2501   F45A             			
2502   F45A             
2503   F45A CE F3 B4    vm_control_0x	ldx	#vm_lookup_0x
2504   F45D BD F5 28    			jsr	gettabledata_b			;X = data at (X + (A*2))
2505   F460 6E 00       			jmp	$00,X
2506   F462             			
2507   F462 DE EF       macro_pcminus100	ldx	vm_pc
2508   F464 09          			dex	
2509   F465 DF EF       			stx	vm_pc
2510   F467 20 D3       			bra	macro_go
2511   F469             
2512   F469 DE EF       macro_code_start	ldx	vm_pc
2513   F46B 96 00       			ldaa	ram_base
2514   F46D D6 01       			ldab	ram_base+1
2515   F46F 6E 00       			jmp	$00,X
2516   F471             
2517   F471 BD F7 4C    macro_special	jsr	award_replay			;Award Special
2518   F474 20 C6       			bra	macro_go
2519   F476             
2520   F476 BD F7 5C    macro_extraball	jsr	award_extraball			;Award Extra Ball
2521   F479 20 C1       			bra	macro_go
2522   F47B             			
2523   F47B 16          vm_control_1x	tab	
2524   F47C C4 0F       			andb	#$0F
2525   F47E C0 08       			subb	#$08
2526   F480 25 1D       			bcs	macro_17				;Branch for Macros 10-17
2527   F482 58          macro_x8f		aslb	
2528   F483 CE F3 C2    			ldx	#vm_lookup_1x_a
2529   F486 BD EE 8C    			jsr	xplusb				;X = X + B)
2530   F489 EE 00       			ldx	$00,X
2531   F48B 16          			tab						;Original Command #
2532   F48C 58          			aslb	
2533   F48D 58          			aslb	
2534   F48E C4 80       			andb	#$80
2535   F490             b_0AF			begin
2535   F490             
2536   F490 BD F5 2F    				jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2537   F493 36          				psha	
2538   F494 84 7F       				anda	#$7F
2539   F496 1B          				aba	
2540   F497 AD 00       				jsr	$00,X
2541   F499 32          				pula	
2542   F49A 4D          				tsta	
2543   F49B             			plend
2543   F49B             
2543   F49B             
2543   F49B~            			plend
2543   F49B~            			plend
2543   F49B~            			plend
2543   F49B             
2543   F49B 2B F3       
2543   F49D             
2543   F49D~            			plend
2543   F49D~            			plend
2543   F49D             
2544   F49D 20 9D       			bra	macro_go
2545   F49F             			
2546   F49F CE F3 D2    macro_17		ldx	#vm_lookup_1x_b
2547   F4A2 16          macro_x17		tab						;A = still instruction #
2548   F4A3 84 03       			anda	#$03
2549   F4A5 BD F5 28    			jsr	gettabledata_b			;X = data at (X + (A*2))
2550   F4A8 C5 04       			bitb	#$04
2551   F4AA             			ifeq					;Branch on 14-17
2551   F4AA             
2551   F4AA 26 FE       
2552   F4AC 5F          				clrb	
2553   F4AD 20 E1       				bra	b_0AF
2554   F4AF             			endif
2554   F4AF             
2554   F4AF             
2554   F4AF             
2554   F4AF             
2554   F4AF             
2554   F4AF~            			endif
2554   F4AF~            			endif
2554   F4AF             
2554   F4AF~            			endif
2554   F4AF~            			endif
2554   F4AF             
2554   F4AB             
2554   F4AB 03          
2554   F4AC             
2554   F4AC             
2554   F4AC~            			endif
2554   F4AC~            			endif
2554   F4AC~            			endif
2554   F4AC             
2554   F4AF             
2554   F4AF~            			endif
2554   F4AF~            			endif
2554   F4AF             
2555   F4AF             			begin
2555   F4AF             
2556   F4AF 8D 7E       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2557   F4B1 16          				tab	
2558   F4B2 DF BC       				stx	temp3
2559   F4B4 BD F5 B2    				jsr	macro_b_ram				;$00,LSD(A)->A
2560   F4B7 AD 00       				jsr	$00,X
2561   F4B9 DE BC       				ldx	temp3
2562   F4BB 5D          				tstb	
2563   F4BC             			plend
2563   F4BC             
2563   F4BC             
2563   F4BC~            			plend
2563   F4BC~            			plend
2563   F4BC~            			plend
2563   F4BC             
2563   F4BC 2B F1       
2563   F4BE             
2563   F4BE~            			plend
2563   F4BE~            			plend
2563   F4BE             
2564   F4BE 7E F4 3C    to_macro_go1	jmp	macro_go
2565   F4C1             
2566   F4C1 16          vm_control_2x	tab						;A= macro
2567   F4C2 C4 0F       			andb	#$0F
2568   F4C4 C0 08       			subb	#$08
2569   F4C6 24 BA       			bcc	macro_x8f				;Branch for Macros 28-2F
2570   F4C8 CE F3 DA    			ldx	#vm_lookup_2x
2571   F4CB 20 D5       			bra	macro_x17
2572   F4CD CE F3 E0    vm_control_dx	ldx   #vm_lookup_2x_b
2573   F4D0 16          			tab   
2574   F4D1 C4 0F       			andb  #0F
2575   F4D3 C0 08       			subb  #08
2576   F4D5 25 CB       			bcs   macro_x17
2577   F4D7 CE F3 E6    			ldx   #vm_lookup_2x_c
2578   F4DA 20 C6       			bra   macro_x17
2579   F4DC             
2580   F4DC 16          vm_control_3x	tab	
2581   F4DD C4 0F       			andb	#$0F					;16 Solenoids Max 
2582   F4DF             			begin
2582   F4DF             
2583   F4DF 8D 4E       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2584   F4E1 BD EA 83    				jsr	solbuf				;Turn On/Off Solenoid
2585   F4E4 5A          				decb	
2586   F4E5             			eqend
2586   F4E5             
2586   F4E5             
2586   F4E5~            			eqend
2586   F4E5~            			eqend
2586   F4E5~            			eqend
2586   F4E5             
2586   F4E5 26 F8       
2586   F4E7             
2586   F4E7~            			eqend
2586   F4E7~            			eqend
2586   F4E7             
2587   F4E7 20 D5       			bra	to_macro_go1
2588   F4E9             
2589   F4E9 84 0F       vm_control_4x	anda	#$0F
2590   F4EB             			ifeq
2590   F4EB             
2590   F4EB 26 FE       
2591   F4ED BD F5 84    				jsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
2592   F4F0 BD EB 32    				jsr	isnd_pts				;Play Sound Index(B)Once, Add Points(A)
2593   F4F3 20 C9       				bra	to_macro_go1
2594   F4F5             			endif
2594   F4F5             
2594   F4F5             
2594   F4F5             
2594   F4F5             
2594   F4F5             
2594   F4F5~            			endif
2594   F4F5~            			endif
2594   F4F5             
2594   F4F5~            			endif
2594   F4F5~            			endif
2594   F4F5             
2594   F4EC             
2594   F4EC 08          
2594   F4ED             
2594   F4ED             
2594   F4ED~            			endif
2594   F4ED~            			endif
2594   F4ED~            			endif
2594   F4ED             
2594   F4F5             
2594   F4F5~            			endif
2594   F4F5~            			endif
2594   F4F5             
2595   F4F5 81 04       			cmpa	#$04
2596   F4F7 24 0C       			bcc	macro_exec				;Branch for Macros 44-4F (execute cpu)
2597   F4F9 CE F3 EA    			ldx	#vm_lookup_4x-2
2598   F4FC BD F5 28    			jsr	gettabledata_b			;X = data at (X + (A*2))
2599   F4FF 8D 2E       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2600   F501 AD 00       			jsr	$00,X
2601   F503 20 B9       			bra	to_macro_go1			;Continue Executing Macros
2602   F505             
2603   F505 16          macro_exec		tab	
2604   F506 C0 02       			subb	#$02
2605   F508 CE 11 30    			ldx	#exe_buffer
2606   F50B             			begin
2606   F50B             
2607   F50B 8D 22       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2608   F50D A7 00       				staa	$00,X
2609   F50F 08          				inx	
2610   F510 5A          				decb	
2611   F511             			eqend						;Add B bytes to exe Buffer 
2611   F511             
2611   F511             
2611   F511~            			eqend						;Add B bytes to exe Buffer 
2611   F511~            			eqend						;Add B bytes to exe Buffer 
2611   F511~            			eqend						;Add B bytes to exe Buffer 
2611   F511             
2611   F511 26 F8       
2611   F513             
2611   F513~            			eqend						;Add B bytes to exe Buffer 
2611   F513~            			eqend						;Add B bytes to exe Buffer 
2611   F513             
2612   F513 86 7E       			ldaa	#$7E
2613   F515 A7 00       			staa	$00,X
2614   F517 86 F4       			ldaa	#((abreg_sto>>8)&$FF)
2615   F519 A7 01       			staa	$01,X
2616   F51B 86 54       			ldaa	#((abreg_sto)&$FF)		;Tack a jmp macro_next at the end of the routine
2617   F51D A7 02       			staa	$02,X
2618   F51F 96 00       			ldaa	vm_reg_a
2619   F521 D6 01       			ldab	vm_reg_b
2620   F523 7E 11 30    			jmp	exe_buffer				;Go there Now, put return A and B into RAM $00 and $01 
2621   F526             
2622   F526 84 0F       gettabledata_w	anda	#$0F
2623   F528 48          gettabledata_b	asla	
2624   F529 BD EE 3E    			jsr	xplusa
2625   F52C EE 00       			ldx	$00,X
2626   F52E 39          			rts
2627   F52F             			
2628   F52F             macro_getnextbyte	
2629   F52F DF B8       			stx	temp1
2630   F531 DE EF       			ldx	vm_pc
2631   F533 A6 00       			ldaa	$00,X
2632   F535 08          			inx	
2633   F536 DF EF       			stx	vm_pc
2634   F538 DE B8       getx_rts		ldx	temp1
2635   F53A 39          			rts	
2636   F53B             
2637   F53B CE F3 F2    vm_control_5x	ldx	#vm_lookup_5x
2638   F53E 16          			tab						;Move our Data into B
2639   F53F BD F5 26    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
2640   F542 6E 00       			jmp	$00,X
2641   F544             
2642   F544 8D E9       macro_ramadd	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2643   F546 16          			tab	
2644   F547 8D 69       			bsr	macro_b_ram				;$00,LSD(A)->A
2645   F549 97 BC       			staa	temp3
2646   F54B 54          			lsrb	
2647   F54C 54          			lsrb	
2648   F54D 54          			lsrb	
2649   F54E 54          			lsrb	
2650   F54F 17          			tba	
2651   F550 8D 60       			bsr	macro_b_ram				;$00,LSD(A)->A
2652   F552 9B BC       			adda	temp3
2653   F554 8D 4D       ram_sto2		bsr	macro_a_ram				;A->$00,LSD(B)
2654   F556 7E F4 3C    to_macro_go2	jmp	macro_go
2655   F559             
2656   F559 8D D4       macro_ramcopy	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2657   F55B 16          			tab	
2658   F55C 8D 54       			bsr	macro_b_ram				;$00,LSD(A)->A
2659   F55E 54          			lsrb	
2660   F55F 54          			lsrb	
2661   F560 54          			lsrb	
2662   F561 54          			lsrb	
2663   F562 20 F0       			bra	ram_sto2				;A->$00,LSD(B),jmp $F3B5
2664   F564             
2665   F564 8D C9       macro_set_pri	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2666   F566 DE CF       			ldx	current_thread			;Current VM Routine being run
2667   F568 A7 0D       			staa	threadobj_id,X
2668   F56A 20 EA       			bra	to_macro_go2			;Continue Executing Macros
2669   F56C             
2670   F56C             macro_delay_imm_b	
2671   F56C 8D C1       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2672   F56E 97 D5       dly_sto		staa	thread_timer_byte
2673   F570 DE EF       			ldx	vm_pc
2674   F572 96 00       			ldaa	vm_reg_a
2675   F574 D6 01       			ldab	vm_reg_b
2676   F576 BD E9 71    			jsr	delaythread				;Push Next Address onto VM, Timer at thread_timer_byte
2677   F579 7E F4 52    			jmp	macro_next
2678   F57C             
2679   F57C             macro_getnextword		
2680   F57C 8D 06       			bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
2681   F57E D7 B8       			stab	temp1
2682   F580 97 B9       			staa	temp1+1
2683   F582 20 B4       			bra	getx_rts
2684   F584             			
2685   F584 8D A9       macro_get2bytes	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2686   F586 16          			tab	
2687   F587 20 A6       			bra	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2688   F589             			
2689   F589 8D F9       macro_rem_th_s	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
2690   F58B BD EA 53    			jsr	kill_thread
2691   F58E 20 C6       			bra	to_macro_go2			;Continue Executing Macros
2692   F590             			
2693   F590 8D F2       macro_rem_th_m	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
2694   F592 BD EA 5B    			jsr	kill_threads
2695   F595 20 BF       			bra	to_macro_go2			;Continue Executing Macros
2696   F597             
2697   F597             macro_jsr_noreturn	
2698   F597 8D E3       			bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2699   F599 96 F0       			ldaa	vm_pc+1
2700   F59B 36          			psha	
2701   F59C 96 EF       			ldaa	vm_pc
2702   F59E 36          			psha	
2703   F59F DF EF       pc_sto2		stx	vm_pc
2704   F5A1 20 B3       			bra	to_macro_go2			;jContinue Executing Macros
2705   F5A3             			
2706   F5A3 DF B8       macro_a_ram		stx	temp1
2707   F5A5 C4 0F       			andb	#$0F
2708   F5A7 D7 BB       			stab	temp2+1
2709   F5A9 7F 00 BA    			clr	temp2
2710   F5AC DE BA       			ldx	temp2
2711   F5AE A7 00       			staa	$00,X
2712   F5B0 20 86       to_getx_rts		bra	getx_rts
2713   F5B2             
2714   F5B2 DF B8       macro_b_ram		stx	temp1
2715   F5B4 84 0F       			anda	#$0F
2716   F5B6 97 BB       			staa	temp2+1
2717   F5B8 7F 00 BA    			clr	temp2
2718   F5BB DE BA       			ldx	temp2
2719   F5BD A6 00       			ldaa	$00,X
2720   F5BF 20 EF       			bra	to_getx_rts				;ldx temp1, rts.
2721   F5C1             
2722   F5C1 8D B9       macro_jsr_return	bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2723   F5C3 96 F0       ret_sto		ldaa	vm_pc+1
2724   F5C5 36          			psha	
2725   F5C6 96 EF       			ldaa	vm_pc
2726   F5C8 36          			psha						;Push Macro PC
2727   F5C9 96 00       			ldaa	ram_base
2728   F5CB D6 01       			ldab	ram_base+1
2729   F5CD AD 00       			jsr	$00,X
2730   F5CF 97 00       			staa	ram_base
2731   F5D1 32          			pula	
2732   F5D2 97 EF       			staa	vm_pc					;Pull Macro PC
2733   F5D4 32          			pula	
2734   F5D5 97 F0       			staa	vm_pc+1
2735   F5D7 7E F4 56    			jmp	breg_sto
2736   F5DA             
2737   F5DA 8D D6       vm_control_6x	bsr	macro_b_ram				;Load RAM Data
2738   F5DC 20 90       			bra	dly_sto				;Delay it
2739   F5DE             			
2740   F5DE 84 0F       vm_control_7x	anda	#$0F
2741   F5E0 20 8C       			bra	dly_sto				;Delay it
2742   F5E2             			
2743   F5E2 8D 44       vm_control_8x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
2744   F5E4 DF EF       pc_sto		stx	vm_pc					;Store X into VMPC
2745   F5E6 7E F4 3C    to_macro_go4	jmp	macro_go
2746   F5E9             
2747   F5E9 BD F5 7C    macro_jmp_cpu	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2748   F5EC 96 00       			ldaa	vm_reg_a
2749   F5EE D6 01       			ldab	vm_reg_b
2750   F5F0 6E 00       			jmp	$00,X
2751   F5F2             			
2752   F5F2 8D 34       vm_control_9x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
2753   F5F4 D6 F0       			ldab	vm_pc+1
2754   F5F6 37          			pshb	
2755   F5F7 D6 EF       			ldab	vm_pc
2756   F5F9 37          			pshb	
2757   F5FA 20 E8       			bra	pc_sto				;Store X into VMPC, continue
2758   F5FC             
2759   F5FC 8D 2A       vm_control_ax	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
2760   F5FE 20 C3       			bra	ret_sto
2761   F600             			
2762   F600 BD F5 7C    macro_jmp_abs	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2763   F603 20 DF       			bra	pc_sto
2764   F605             			
2765   F605 16          vm_control_bx	tab	
2766   F606 8D AA       			bsr	macro_b_ram				;RAM Data (A&0f)->A
2767   F608 97 BA       			staa	temp2
2768   F60A 8D 58       			bsr	to_macro_getnextbyte
2769   F60C 9B BA       			adda	temp2
2770   F60E 8D 93       ram_sto		bsr	macro_a_ram				;A->RAM(B&0f)
2771   F610 20 D4       			bra	to_macro_go4
2772   F612             
2773   F612 16          vm_control_cx	tab	
2774   F613 8D 4F       			bsr	to_macro_getnextbyte
2775   F615 20 F7       			bra	ram_sto				;Save to RAM and continue
2776   F617             			
2777   F617 84 0F       vm_control_nu	anda	#$0F
2778   F619 16          			tab	
2779   F61A 8D 48       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2780   F61C BD EC 42    			jsr	sound_sub
2781   F61F 20 C5       			bra	to_macro_go4			;jmp  $F3B5 
2782   F621             
2783   F621             vm_control_ex
2784   F621 84 1F       vm_control_fx	anda	#$1F
2785   F623 BD EC 3B    			jsr	isnd_once				;Play Sound Index(A) Once
2786   F626 20 BE       			bra	to_macro_go4
2787   F628             			
2788   F628 84 0F       macro_pcadd		anda	#$0F
2789   F62A 85 08       			bita	#$08
2790   F62C             			ifne
2790   F62C             
2790   F62C 27 FE       
2791   F62E 8A F0       				oraa	#$F0
2792   F630             			endif
2792   F630             
2792   F630             
2792   F630             
2792   F630             
2792   F630             
2792   F630~            			endif
2792   F630~            			endif
2792   F630             
2792   F630~            			endif
2792   F630~            			endif
2792   F630             
2792   F62D             
2792   F62D 02          
2792   F62E             
2792   F62E             
2792   F62E~            			endif
2792   F62E~            			endif
2792   F62E~            			endif
2792   F62E             
2792   F630             
2792   F630~            			endif
2792   F630~            			endif
2792   F630             
2793   F630 16          			tab	
2794   F631 8D 31       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2795   F633 9B F0       			adda	vm_pc+1
2796   F635 97 B9       			staa	temp1+1
2797   F637 D9 EF       			adcb	vm_pc
2798   F639 D7 B8       			stab	temp1
2799   F63B DE B8       			ldx	temp1
2800   F63D 39          			rts	
2801   F63E             
2802   F63E 8D 0A       macro_setswitch	bsr	load_sw_no				;Get switch number from the data
2803   F640 EA 00       			orab	$00,X
2804   F642 E7 00       			stab	$00,X
2805   F644 96 C6       			ldaa	sys_temp_w3
2806   F646 2B F6       			bmi	macro_setswitch
2807   F648 20 17       			bra	to_macro_go3			;jmp  $F3B5
2808   F64A             			
2809   F64A 8D 18       load_sw_no		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2810   F64C 97 C6       			staa	sys_temp_w3
2811   F64E 84 3F       			anda	#$3F
2812   F650 CE 00 7D    			ldx	#switch_debounced
2813   F653 7E F2 12    			jmp	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
2814   F656             
2815   F656 8D F2       macro_clearswitch	bsr	load_sw_no				;Get switch number from the data
2816   F658 53          			comb	
2817   F659 E4 00       			andb	$00,X
2818   F65B E7 00       			stab	$00,X
2819   F65D 96 C6       			ldaa	sys_temp_w3
2820   F65F 2B F5       			bmi	macro_clearswitch
2821   F661 7E F4 3C    to_macro_go3	jmp	macro_go
2822   F664             
2823   F664             to_macro_getnextbyte			
2824   F664 7E F5 2F    			jmp	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2825   F667             
2826   F667 37          macro_branch	pshb	
2827   F668 8D 28       			bsr	branchdata				;Gets Main Result
2828   F66A BD F7 39    			jsr	test_a				;Returns #80 or #81 in (A) based on Test of A
2829   F66D 33          			pulb						;Get Back Command in B
2830   F66E 1B          			aba	
2831   F66F 36          			psha	
2832   F670 C5 02       			bitb	#$02					;Relative or Absolute Branch Flag
2833   F672             			ifeq
2833   F672             
2833   F672 26 FE       
2834   F674 BD F5 7C    				jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2835   F677             			else
2835   F677             
2835   F677             
2835   F677             
2835   F677             
2835   F673             
2835   F673             
2835   F673             
2835   F673~            			else
2835   F673~            			else
2835   F673~            			else
2835   F673~            			else
2835   F673             
2835   F673~            			else
2835   F673~            			else
2835   F673~            			else
2835   F673~            			else
2835   F673             
2835   F673             
2835   F673 05          
2835   F677             
2835   F677 20 FE       
2835   F679             
2835   F679             
2835   F679             
2835   F679~            			else
2835   F679~            			else
2835   F679~            			else
2835   F679~            			else
2835   F679~            			else
2835   F679             
2835   F679~            			else
2835   F679~            			else
2835   F679             
2835   F679~            			else
2835   F679~            			else
2835   F679             
2836   F679 8D E9       				bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2837   F67B C6 FF       				ldab	#$FF
2838   F67D 81 80       				cmpa	#$80
2839   F67F C9 00       				adcb	#$00
2840   F681 9B F0       				adda	vm_pc+1
2841   F683 D9 EF       				adcb	vm_pc
2842   F685 97 B9       				staa	temp1+1
2843   F687 D7 B8       				stab	temp1
2844   F689 DE B8       				ldx	temp1
2845   F68B             			endif
2845   F68B             
2845   F68B             
2845   F68B             
2845   F68B             
2845   F68B             
2845   F68B~            			endif
2845   F68B~            			endif
2845   F68B             
2845   F68B~            			endif
2845   F68B~            			endif
2845   F68B             
2845   F678             
2845   F678 12          
2845   F679             
2845   F679             
2845   F679~            			endif
2845   F679~            			endif
2845   F679~            			endif
2845   F679             
2845   F68B             
2845   F68B~            			endif
2845   F68B~            			endif
2845   F68B             
2846   F68B 32          			pula						;Get our result from above push
2847   F68C 46          			rora						;Test LSB
2848   F68D 24 D2       			bcc	to_macro_go3			;If result was #80, then ignore this branch (jmp  $F3B5)
2849   F68F 7E F5 9F    			jmp	pc_sto2				;Else, we will branch now. (stx  $D1, jmp $F3B5)
2850   F692             
2851   F692             
2852   F692 8D D0       branchdata		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2853   F694 81 D0       			cmpa	#$D0
2854   F696 27 1D       			beq	cbra2
2855   F698 25 40       			bcs	to_rts3				;(rts) if data is below #D0
2856   F69A 81 F0       			cmpa	#$F0
2857   F69C 24 13       			bcc	complexbranch			;Branch if #F0 or above (Complex)
2858   F69E 81 E0       			cmpa	#$E0
2859   F6A0             			ifcc						;Branch if less than #E0
2859   F6A0             
2859   F6A0 25 FE       
2860   F6A2 7E F5 B2    				jmp	macro_b_ram				;RAM Data (A&0f)->A (Data is E_)
2861   F6A5             			endif
2861   F6A5             
2861   F6A5             
2861   F6A5             
2861   F6A5             
2861   F6A5             
2861   F6A5~            			endif
2861   F6A5~            			endif
2861   F6A5             
2861   F6A5~            			endif
2861   F6A5~            			endif
2861   F6A5             
2861   F6A1             
2861   F6A1 03          
2861   F6A2             
2861   F6A2             
2861   F6A2~            			endif
2861   F6A2~            			endif
2861   F6A2~            			endif
2861   F6A2             
2861   F6A5             
2861   F6A5~            			endif
2861   F6A5~            			endif
2861   F6A5             
2862   F6A5 CE 01 93    			ldx	#adj_energystandard		;Pointer to Bottom of Game Adjustments
2863   F6A8 84 0F       			anda	#$0F					;A = Index for Game Adjustment Lookup
2864   F6AA 48          			asla	
2865   F6AB BD EE 3E    			jsr	xplusa				;X = X + A
2866   F6AE 7E EE 92    			jmp	cmosinc_a				;CMOS,X++ -> A
2867   F6B1             
2868   F6B1 81 F3       complexbranch	cmpa	#$F3
2869   F6B3             			ifcc							;data is below #F3 (not complex)
2869   F6B3             
2869   F6B3 25 FE       
2870   F6B5 36          cbra2				psha						;Push Current Branch Inst.
2871   F6B6 8D DA       				bsr	branchdata				;Gets Encoded Data Type
2872   F6B8 16          				tab	
2873   F6B9 D7 B8       				stab	temp1
2874   F6BB 32          				pula	
2875   F6BC 81 F9       				cmpa	#$F9
2876   F6BE             				ifcc						;Branch if below #F9 (Lamp or Bit Test)
2876   F6BE             
2876   F6BE 25 FE       
2877   F6C0 36          					psha	
2878   F6C1 37          					pshb	
2879   F6C2 8D CE       					bsr	branchdata				;Gets Encoded Data Type
2880   F6C4 97 B8       					staa	temp1
2881   F6C6 33          					pulb	
2882   F6C7 32          					pula	
2883   F6C8             				endif
2883   F6C8             
2883   F6C8             
2883   F6C8             
2883   F6C8             
2883   F6C8             
2883   F6C8~            				endif
2883   F6C8~            				endif
2883   F6C8             
2883   F6C8~            				endif
2883   F6C8~            				endif
2883   F6C8             
2883   F6BF             
2883   F6BF 08          
2883   F6C0             
2883   F6C0             
2883   F6C0~            				endif
2883   F6C0~            				endif
2883   F6C0~            				endif
2883   F6C0             
2883   F6C8             
2883   F6C8~            				endif
2883   F6C8~            				endif
2883   F6C8             
2884   F6C8             			endif
2884   F6C8             
2884   F6C8             
2884   F6C8             
2884   F6C8             
2884   F6C8             
2884   F6C8~            			endif
2884   F6C8~            			endif
2884   F6C8             
2884   F6C8~            			endif
2884   F6C8~            			endif
2884   F6C8             
2884   F6B4             
2884   F6B4 13          
2884   F6B5             
2884   F6B5             
2884   F6B5~            			endif
2884   F6B5~            			endif
2884   F6B5~            			endif
2884   F6B5             
2884   F6C8             
2884   F6C8~            			endif
2884   F6C8~            			endif
2884   F6C8             
2885   F6C8 81 D0       			cmpa	#$D0
2886   F6CA 27 3A       			beq	branch_lampflag
2887   F6CC CE F4 12    			ldx	#branch_lookup
2888   F6CF BD F5 26    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
2889   F6D2 96 B8       			ldaa	temp1
2890   F6D4 6E 00       			jmp	$00,X
2891   F6D6             
2892   F6D6 8D 61       branch_invert	bsr	test_a
2893   F6D8 88 01       			eora	#$01
2894   F6DA 39          to_rts3		rts	
2895   F6DB             
2896   F6DB BD F3 74    branch_lamp_on	jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
2897   F6DE 26 1E       			bne	ret_true				;return true
2898   F6E0 BD F3 65    			jsr	bit_lamp_flash			;Check Encoded #(A) with $0030
2899   F6E3 26 19       test_z		bne	ret_true				;return true
2900   F6E5 20 10       			bra	ret_false				;return false
2901   F6E7             			
2902   F6E7             branch_lamprangeoff	
2903   F6E7 BD F3 54    			jsr	lfill_b
2904   F6EA 25 12       test_c		bcs	ret_true				;return true
2905   F6EC 20 09       			bra	ret_false				;return false
2906   F6EE             			
2907   F6EE             branch_lamprangeon	
2908   F6EE BD F3 45    			jsr	lfill_a
2909   F6F1 20 F7       			bra	test_c
2910   F6F3             
2911   F6F3 96 E6       branch_tilt		ldaa	flag_tilt				;tilt flag?
2912   F6F5 26 07       			bne	ret_true				;return true
2913   F6F7 86 80       ret_false		ldaa	#$80					;return false
2914   F6F9 39          			rts	
2915   F6FA             			
2916   F6FA 96 E7       branch_gameover	ldaa	flag_gameover			;game over?
2917   F6FC 27 F9       			beq	ret_false				;return false
2918   F6FE 86 81       ret_true		ldaa	#$81
2919   F700 39          			rts
2920   F701             
2921   F701 BD F3 6A    branch_lampbuf1	jsr	bit_lamp_buf_1			;Check Encoded #(A) with $0028
2922   F704 20 DD       			bra	test_z				;Return Bool based on Z
2923   F706             
2924   F706             
2925   F706 96 B8       branch_lampflag	ldaa  temp1					;Check Encoded #(A) with bitflags
2926   F708 BD F3 6F    			jsr   bit_lamp_buf_f
2927   F70B 20 D6       			bra	test_z				;Return Boolean based on Z
2928   F70D             
2929   F70D BD F3 60    branch_switch	jsr	bit_switch				;Check Encoded #(A) with $0061:
2930   F710 20 D1       			bra	test_z				;Return Boolean based on Z
2931   F712             			
2932   F712 8D 1E       branch_and		bsr	set_logic
2933   F714 94 B8       			anda	temp1
2934   F716 39          			rts	
2935   F717             			
2936   F717 1B          branch_add		aba	
2937   F718 39          			rts	
2938   F719 8D 17       branch_or		bsr	set_logic
2939   F71B 9A B8       			oraa	temp1
2940   F71D 39          			rts	
2941   F71E             			
2942   F71E 11          branch_equal	cba	
2943   F71F 27 DD       			beq	ret_true				;lda  #$81, rts
2944   F721 20 D4       			bra	ret_false				;lda  #$80, rts
2945   F723             			
2946   F723 11          branch_ge		cba	
2947   F724 20 C4       			bra	test_c
2948   F726             
2949   F726 BD EA 60    branch_threadpri	jsr	check_threadid
2950   F729 24 D3       			bcc	ret_true				;lda  #$81, rts
2951   F72B 20 CA       			bra	ret_false				;lda  #$80, rts
2952   F72D             			
2953   F72D D7 B8       branch_bitwise	stab	temp1
2954   F72F 94 B8       			anda	temp1
2955   F731 39          to_rts4		rts	
2956   F732             
2957   F732 36          set_logic		psha	
2958   F733 17          			tba	
2959   F734 8D 03       			bsr	test_a
2960   F736 97 B8       			staa	temp1
2961   F738 32          			pula	
2962   F739 4D          test_a		tsta	
2963   F73A 2B F5       			bmi	to_rts4				;rts
2964   F73C BD F3 74    			jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
2965   F73F 27 B6       			beq	ret_false				;return false
2966   F741 81 40       			cmpa	#$40					;Check Encoded Lamp #
2967   F743 24 B9       			bcc	ret_true				;return true
2968   F745 BD F3 65    			jsr	bit_lamp_flash			;Bittest with $0030
2969   F748 26 AD       			bne	ret_false				;return false
2970   F74A 20 B2       			bra	ret_true				;return true
2971   F74C             			
2972   F74C             ;*******************************************************
2973   F74C             ;* End VM Code Section
2974   F74C             ;*******************************************************			
2975   F74C             
2976   F74C 36          award_replay	psha	
2977   F74D DF FA       			stx   credit_x_temp
2978   F74F CE 01 16    			ldx	#aud_replaycredits		;AUD: Replay Score Credits
2979   F752 BD F7 E7    			jsr	ptrx_plus_1				;Add 1 to data at X
2980   F755 BD D0 B8    			jsr	gr_special_event			;Game ROM Hook
2981   F758 DE FA       			ldx   credit_x_temp
2982   F75A 20 0E       			bra	eb_rts  
2983   F75C             
2984   F75C 36          award_extraball	psha	
2985   F75D DF F8       do_eb			stx	eb_x_temp				;Save X for later
2986   F75F BD D0 B6    			jsr	gr_eb_event
2987   F762 CE 01 22    			ldx	#aud_extraballs			;AUD: Total Extra Balls
2988   F765 BD F7 E7    			jsr	ptrx_plus_1				;Add 1 to data at X
2989   F768 DE F8       			ldx	eb_x_temp				;Restore X
2990   F76A 32          eb_rts		pula	
2991   F76B 39          			rts
2992   F76C             
2993   F76C DF FA       addcredits		stx	credit_x_temp			;Save X
2994   F76E 36          			psha	
2995   F76F 37          addcredit2		pshb	
2996   F770 8D 3C       			bsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
2997   F772             			ifcs						;No more if Carry Clear.
2997   F772             
2997   F772 24 FE       
2998   F774 BD EE A2    				jsr	cmosinc_b				;CMOS,X++ -> B
2999   F777 09          				dex	
3000   F778 09          				dex	
3001   F779 1B          				aba						;Add the new credits.
3002   F77A 19          				daa						;Adjust
3003   F77B             				ifcs
3003   F77B             
3003   F77B 24 FE       
3004   F77D 86 99       					ldaa	#$99					;If it rolled, set it to 99
3005   F77F             				endif
3005   F77F             
3005   F77F             
3005   F77F             
3005   F77F             
3005   F77F             
3005   F77F~            				endif
3005   F77F~            				endif
3005   F77F             
3005   F77F~            				endif
3005   F77F~            				endif
3005   F77F             
3005   F77C             
3005   F77C 02          
3005   F77D             
3005   F77D             
3005   F77D~            				endif
3005   F77D~            				endif
3005   F77D~            				endif
3005   F77D             
3005   F77F             
3005   F77F~            				endif
3005   F77F~            				endif
3005   F77F             
3006   F77F BD EE EE    				jsr	a_cmosinc				;A -> CMOS,X++
3007   F782 F1 11 9A    				cmpb	current_credits			;Actual Credits
3008   F785             				ifeq						;Check against shown credits
3008   F785             
3008   F785 26 FE       
3009   F787 C6 0E       					ldab	#$0E
3010   F789 D7 C8       					stab	thread_priority
3011   F78B CE F7 C4    					ldx	#creditq				;Thread: Add on Queued Credits
3012   F78E BD E9 D8    					jsr	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
3013   F791             					ifcs						;If Carry is set, thread was not added
3013   F791             
3013   F791 24 FE       
3014   F793 B7 11 9A    						staa	current_credits			;Actual Credits
3015   F796             					endif
3015   F796             
3015   F796             
3015   F796             
3015   F796             
3015   F796             
3015   F796~            					endif
3015   F796~            					endif
3015   F796             
3015   F796~            					endif
3015   F796~            					endif
3015   F796             
3015   F792             
3015   F792 03          
3015   F793             
3015   F793             
3015   F793~            					endif
3015   F793~            					endif
3015   F793~            					endif
3015   F793             
3015   F796             
3015   F796~            					endif
3015   F796~            					endif
3015   F796             
3016   F796             				endif
3016   F796             
3016   F796             
3016   F796             
3016   F796             
3016   F796             
3016   F796~            				endif
3016   F796~            				endif
3016   F796             
3016   F796~            				endif
3016   F796~            				endif
3016   F796             
3016   F786             
3016   F786 0F          
3016   F787             
3016   F787             
3016   F787~            				endif
3016   F787~            				endif
3016   F787~            				endif
3016   F787             
3016   F796             
3016   F796~            				endif
3016   F796~            				endif
3016   F796             
3017   F796 8D 04       				bsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
3018   F798             			endif
3018   F798             
3018   F798             
3018   F798             
3018   F798             
3018   F798             
3018   F798~            			endif
3018   F798~            			endif
3018   F798             
3018   F798~            			endif
3018   F798~            			endif
3018   F798             
3018   F773             
3018   F773 24          
3018   F774             
3018   F774             
3018   F774~            			endif
3018   F774~            			endif
3018   F774~            			endif
3018   F774             
3018   F798             
3018   F798~            			endif
3018   F798~            			endif
3018   F798             
3019   F798 DE FA       			ldx	credit_x_temp			;Restore X
3020   F79A 20 25       			bra	pull_ba_rts				;pulb,pula,rts
3021   F79C             
3022   F79C             ;**********************************************
3023   F79C             ;* Adjust the coin lockout solenoid and the 
3024   F79C             ;* credit lamp on playfield if installed.
3025   F79C             ;**********************************************			
3026   F79C 36          coinlockout		psha	
3027   F79D BD F7 AE    			jsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
3028   F7A0 B6 D0 63    			ldaa	gr_coinlockout			;Get coil number
3029   F7A3 8A F0       			oraa	#$F0
3030   F7A5             			ifcc
3030   F7A5             
3030   F7A5 25 FE       
3031   F7A7 84 0F       				anda	#$0F
3032   F7A9             			endif
3032   F7A9             
3032   F7A9             
3032   F7A9             
3032   F7A9             
3032   F7A9             
3032   F7A9~            			endif
3032   F7A9~            			endif
3032   F7A9             
3032   F7A9~            			endif
3032   F7A9~            			endif
3032   F7A9             
3032   F7A6             
3032   F7A6 02          
3032   F7A7             
3032   F7A7             
3032   F7A7~            			endif
3032   F7A7~            			endif
3032   F7A7~            			endif
3032   F7A7             
3032   F7A9             
3032   F7A9~            			endif
3032   F7A9~            			endif
3032   F7A9             
3033   F7A9 BD EA 83    			jsr	solbuf				;Turn Off Lockout Coils
3034   F7AC 32          			pula	
3035   F7AD 39          			rts	
3036   F7AE             
3037   F7AE             ;**********************************************
3038   F7AE             ;* See if we are at the adjustable maximum 
3039   F7AE             ;* credits allowed. If we are at max then
3040   F7AE             ;* carry flag is cleared, if we are not at
3041   F7AE             ;* max then the carry flag is set.
3042   F7AE             ;**********************************************			
3043   F7AE 36          checkmaxcredits	psha	
3044   F7AF 37          			pshb	
3045   F7B0 CE 01 AB    			ldx	#adj_max_credits			;ADJ: Max Credits
3046   F7B3 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
3047   F7B6 CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
3048   F7B9 5D          			tstb						;Max Credits allowed
3049   F7BA 0D          			sec	
3050   F7BB             			ifne
3050   F7BB             
3050   F7BB 27 FE       
3051   F7BD BD FD DB    				jsr	cmos_a				;CMOS, X -> A
3052   F7C0 11          				cba	
3053   F7C1             			endif
3053   F7C1             
3053   F7C1             
3053   F7C1             
3053   F7C1             
3053   F7C1             
3053   F7C1~            			endif
3053   F7C1~            			endif
3053   F7C1             
3053   F7C1~            			endif
3053   F7C1~            			endif
3053   F7C1             
3053   F7BC             
3053   F7BC 04          
3053   F7BD             
3053   F7BD             
3053   F7BD~            			endif
3053   F7BD~            			endif
3053   F7BD~            			endif
3053   F7BD             
3053   F7C1             
3053   F7C1~            			endif
3053   F7C1~            			endif
3053   F7C1             
3054   F7C1 33          pull_ba_rts		pulb	
3055   F7C2 32          			pula	
3056   F7C3 39          			rts
3057   F7C4             
3058   F7C4             ;***********************************************
3059   F7C4             ;* This routine is spawned as a thread when the
3060   F7C4             ;* credits in memory space do not match
3061   F7C4             ;* the number of credits in the CMOS RAM. It 
3062   F7C4             ;* Takes care of bringing them equal in a timely
3063   F7C4             ;* fashion and calling the game ROM hook each
3064   F7C4             ;* time a credit is added to the memory location. 
3065   F7C4             ;* With this, the game ROM can control the credit 
3066   F7C4             ;* award process.
3067   F7C4             ;***********************************************			
3068   F7C4 CE 01 6E    creditq		ldx	#aud_currentcredits		;CMOS: Current Credits
3069   F7C7 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
3070   F7CA F1 11 9A    			cmpb	current_credits
3071   F7CD             			ifne
3071   F7CD             
3071   F7CD 27 FE       
3072   F7CF B6 11 9A    				ldaa	current_credits
3073   F7D2 8B 01       				adda	#$01
3074   F7D4 19          				daa	
3075   F7D5 B7 11 9A    				staa	current_credits
3076   F7D8 FE D0 C8    				ldx	gr_coin_hook_ptr			;Game ROM:
3077   F7DB 11          				cba	
3078   F7DC             				ifne
3078   F7DC             
3078   F7DC 27 FE       
3079   F7DE AD 00       					jsr	$00,X					;jsr to Game ROM Credit Hook
3080   F7E0 20 E2       					bra	creditq				;Loop it.
3081   F7E2             				endif
3081   F7E2             
3081   F7E2             
3081   F7E2             
3081   F7E2             
3081   F7E2             
3081   F7E2~            				endif
3081   F7E2~            				endif
3081   F7E2             
3081   F7E2~            				endif
3081   F7E2~            				endif
3081   F7E2             
3081   F7DD             
3081   F7DD 04          
3081   F7DE             
3081   F7DE             
3081   F7DE~            				endif
3081   F7DE~            				endif
3081   F7DE~            				endif
3081   F7DE             
3081   F7E2             
3081   F7E2~            				endif
3081   F7E2~            				endif
3081   F7E2             
3082   F7E2 AD 00       				jsr	$00,X					;jsr to Game ROM/bell?
3083   F7E4             			endif
3083   F7E4             
3083   F7E4             
3083   F7E4             
3083   F7E4             
3083   F7E4             
3083   F7E4~            			endif
3083   F7E4~            			endif
3083   F7E4             
3083   F7E4~            			endif
3083   F7E4~            			endif
3083   F7E4             
3083   F7CE             
3083   F7CE 15          
3083   F7CF             
3083   F7CF             
3083   F7CF~            			endif
3083   F7CF~            			endif
3083   F7CF~            			endif
3083   F7CF             
3083   F7E4             
3083   F7E4~            			endif
3083   F7E4~            			endif
3083   F7E4             
3084   F7E4 7E E9 C4    			jmp	killthread				;Remove Current Thread from VM
3085   F7E7             
3086   F7E7             ;*************************************************
3087   F7E7             ;* Some utility routines for getting data from
3088   F7E7             ;* the CMOS RAM areas.
3089   F7E7             ;*************************************************
3090   F7E7 36          ptrx_plus_1		psha	
3091   F7E8 86 01       			ldaa	#$01
3092   F7EA 20 01       			bra	ptrx_plus
3093   F7EC 36          ptrx_plus_a		psha	
3094   F7ED 37          ptrx_plus		pshb	
3095   F7EE DF B8       			stx	temp1
3096   F7F0 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
3097   F7F3 37          			pshb	
3098   F7F4 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
3099   F7F7 1B          			aba	
3100   F7F8 19          			daa	
3101   F7F9 16          			tab	
3102   F7FA 32          			pula	
3103   F7FB 89 00       			adca	#$00
3104   F7FD 19          			daa	
3105   F7FE DE B8       			ldx	temp1
3106   F800 BD EE EE    			jsr	a_cmosinc				;A -> CMOS,X++
3107   F803 BD EE A8    			jsr	b_cmosinc				;B -> CMOS,X++
3108   F806 DE B8       			ldx	temp1
3109   F808 20 B7       			bra	pull_ba_rts				;pula, pulb, rts.
3110   F80A             	
3111   F80A             coin_accepted	
3112   F80A             			;Starts with Macros
3113   F80A 90 03       			.db $90,$03 	;MJSR $F7A7
3114   F80C 7E E9 C4    			.db $7E,$E9,$C4  	;Push $EA67 into Control Loop with delay of #0E
3115   F80F             			PRI_($0E) 		;Set this loops priority to #0E
3115   F80F 52 0E       
3116   F811             			SLEEP_($20) 	;Delay $20
3116   F811~            			SLEEP_($20) 	;Delay $20
3116   F811~            			SLEEP_($20) 	;Delay $20
3116   F811             
3116   F811 53 20       
3116   F813             
3117   F813             			CPUX_			;Resume CPU execution
3117   F813 04          
3118   F814             			
3119   F814 43          			coma 
3120   F815 8B 06       			adda	#$06
3121   F817 48          			asla 
3122   F818 16          			tab  					;A is 0,2,4  
3123   F819 58          			aslb 					;B is 0,4,8
3124   F81A CE 01 02    			ldx  	#aud_leftcoins		;AUD: Coins Left/Center/Right Chute Base for counter
3125   F81D BD EE 8C    			jsr  	xplusb			;Adjust Pointer
3126   F820 BD F7 E7    			jsr  	ptrx_plus_1   		;Add 1 click to the counter
3127   F823 CE 01 AF    			ldx  	#cmos_pricingbase		;AUD: Coin Slot Multiplier Base
3128   F826 BD EE 3E    			jsr  	xplusa   			;Adjust Pointer
3129   F829 BD EE A2    			jsr  	cmosinc_b    		;Get Multiplier into B
3130   F82C 8D 6F       			bsr  	dec2hex    			;Make it hex
3131   F82E CE 01 62    			ldx  	#cmos_bonusunits	
3132   F831 8D 46       			bsr  	cmos_a_plus_b_cmos    	;Load Previous Coin Count, Add B, Save it in CMOS++
3133   F833 8D 44       			bsr  	cmos_a_plus_b_cmos    	;Load A with CMOS $0164, add B, Save in CMOS++
3134   F835 CE 01 B9    			ldx  	#cmos_minimumcoins	;ADJ: Minimum Coin Units
3135   F838 BD EE A2    			jsr  	cmosinc_b    		;Get Minimum Coin Amount into B
3136   F83B 8D 60       			bsr	dec2hex
3137   F83D 11          			cba  
3138   F83E             			ifcc					;Have we met inserted minimum coins?
3138   F83E             
3138   F83E 25 FE       
3139   F840             									;Yes!
3140   F840 CE 01 B5    				ldx  	#cmos_coinsforcredit	;ADJ: Coin Units required for Credit
3141   F843 BD EE A2    				jsr  	cmosinc_b    		;Get Value
3142   F846 8D 55       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
3143   F848 8D 36       				bsr  	divide_ab
3144   F84A 97 B8       				staa  temp1
3145   F84C CE 01 64    				ldx  	#cmos_coinunits		;Save remainder coin units for next time
3146   F84F BD EE A8    				jsr  	b_cmosinc   		;( B -> CMOS,X++)
3147   F852 CE 01 B7    				ldx  	#cmos_bonuscoins		;ADJ: Coin Unit Bonus Point
3148   F855 BD EE A2    				jsr  	cmosinc_b    		;( CMOS,X++ -> B )
3149   F858 CE 01 62    				ldx  	#cmos_bonusunits	
3150   F85B BD EE 92    				jsr  	cmosinc_a 			;( CMOS,X++ -> A )
3151   F85E 8D 3D       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
3152   F860 8D 1E       				bsr  	divide_ab
3153   F862 4D          				tsta 
3154   F863             				ifne
3154   F863             
3154   F863 27 FE       
3155   F865 8D 2C       					bsr	clr_bonus_coins
3156   F867             				endif
3156   F867             
3156   F867             
3156   F867             
3156   F867             
3156   F867             
3156   F867~            				endif
3156   F867~            				endif
3156   F867             
3156   F867~            				endif
3156   F867~            				endif
3156   F867             
3156   F864             
3156   F864 02          
3156   F865             
3156   F865             
3156   F865~            				endif
3156   F865~            				endif
3156   F865~            				endif
3156   F865             
3156   F867             
3156   F867~            				endif
3156   F867~            				endif
3156   F867             
3157   F867 9B B8       				adda 	temp1
3158   F869 19          				daa  
3159   F86A CE 01 0E    				ldx  	#aud_paidcredits		;AUD: Total Paid Credits
3160   F86D BD F7 EC    				jsr  	ptrx_plus_a    		;Add A to data at X:
3161   F870 7E F7 6C    				jmp  	addcredits    		;Add Credits if Possible
3162   F873             			endif
3162   F873             
3162   F873             
3162   F873             
3162   F873             
3162   F873             
3162   F873~            			endif
3162   F873~            			endif
3162   F873             
3162   F873~            			endif
3162   F873~            			endif
3162   F873             
3162   F83F             
3162   F83F 33          
3162   F840             
3162   F840             
3162   F840~            			endif
3162   F840~            			endif
3162   F840~            			endif
3162   F840             
3162   F873             
3162   F873~            			endif
3162   F873~            			endif
3162   F873             
3163   F873 B6 D0 5C    			ldaa 	gr_creditsound		;Game ROM Data: Credit Sound
3164   F876 7E EC 3B    			jmp  	isnd_once			;Play Sound Index(A) Once
3165   F879             
3166   F879             ;*********************************************************
3167   F879             ;* Load A with value in X, Add B, Save to CMOS and 
3168   F879             ;* post increment
3169   F879             ;*********************************************************
3170   F879             cmos_a_plus_b_cmos	
3171   F879 BD FD DB    			jsr	cmos_a			;CMOS, X -> A 
3172   F87C 1B          			aba	
3173   F87D 7E EE EE    			jmp	a_cmosinc			;A -> CMOS,X++
3174   F880             
3175   F880             ;********************************************************
3176   F880             ;* Divides A by B, returns result in A and remainder in
3177   F880             ;* B. Input values are in Hex and not decimal.
3178   F880             ;********************************************************			
3179   F880 D7 BB       divide_ab		stab	temp2+1
3180   F882             			ifne
3180   F882             
3180   F882 27 FE       
3181   F884 16          				tab	
3182   F885 86 99       				ldaa	#$99	
3183   F887             				begin
3183   F887             
3184   F887 8B 01       					adda	#$01
3185   F889 19          					daa	
3186   F88A D0 BB       					subb	temp2+1
3187   F88C             				csend
3187   F88C             
3187   F88C             
3187   F88C~            				csend
3187   F88C~            				csend
3187   F88C~            				csend
3187   F88C             
3187   F88C 24 F9       
3187   F88E             
3187   F88E~            				csend
3187   F88E~            				csend
3187   F88E             
3188   F88E DB BB       				addb	temp2+1
3189   F890 39          				rts	
3190   F891             			endif
3190   F891             
3190   F891             
3190   F891             
3190   F891             
3190   F891             
3190   F891~            			endif
3190   F891~            			endif
3190   F891             
3190   F891~            			endif
3190   F891~            			endif
3190   F891             
3190   F883             
3190   F883 0D          
3190   F884             
3190   F884             
3190   F884~            			endif
3190   F884~            			endif
3190   F884~            			endif
3190   F884             
3190   F891             
3190   F891~            			endif
3190   F891~            			endif
3190   F891             
3191   F891 17          			tba	
3192   F892 39          			rts
3193   F893             
3194   F893             ;********************************************************
3195   F893             ;* Cleans out any half credits and bonus coins
3196   F893             ;********************************************************			
3197   F893 CE 00 00    clr_bonus_coins	ldx	#0000
3198   F896 FF 01 64    			stx	cmos_coinunits
3199   F899 FF 01 62    			stx	cmos_bonusunits
3200   F89C 39          			rts	
3201   F89D             
3202   F89D             ;********************************************************
3203   F89D             ;* Convert 2 digit decimal value into a hex number
3204   F89D             ;*
3205   F89D             ;* Requires:	Decimal Number in B
3206   F89D             ;* Protects:	A
3207   F89D             ;* Destroys:	
3208   F89D             ;* Output:		Hex Number in B
3209   F89D             ;********************************************************
3210   F89D 36          dec2hex		psha	
3211   F89E 17          			tba	
3212   F89F 5F          			clrb	
3213   F8A0             			begin
3213   F8A0             
3214   F8A0 4D          				tsta	
3215   F8A1 27 6C       				beq	to_pula_rts		;done
3216   F8A3 8B 99       				adda	#$99
3217   F8A5 19          				daa	
3218   F8A6 5C          				incb	
3219   F8A7             			loopend			;Loop forever
3219   F8A7             
3219   F8A7             
3219   F8A7~            			loopend			;Loop forever
3219   F8A7~            			loopend			;Loop forever
3219   F8A7~            			loopend			;Loop forever
3219   F8A7             
3219   F8A7 20 F7       
3219   F8A9             
3219   F8A9~            			loopend			;Loop forever
3219   F8A9~            			loopend			;Loop forever
3219   F8A9             
3220   F8A9             
3221   F8A9             ;*********************************************************
3222   F8A9             ;* Stores A from X to X+B
3223   F8A9             ;* 
3224   F8A9             ;* Requires:	A,B,X
3225   F8A9             ;* Destroys:	B
3226   F8A9             ;********************************************************			
3227   F8A9             write_range		
3228   F8A9             			begin
3228   F8A9             
3229   F8A9 A7 00       				staa	$00,X
3230   F8AB 08          				inx	
3231   F8AC 5A          				decb	
3232   F8AD             			eqend
3232   F8AD             
3232   F8AD             
3232   F8AD~            			eqend
3232   F8AD~            			eqend
3232   F8AD~            			eqend
3232   F8AD             
3232   F8AD 26 FA       
3232   F8AF             
3232   F8AF~            			eqend
3232   F8AF~            			eqend
3232   F8AF             
3233   F8AF 39          			rts	
3234   F8B0             
3235   F8B0             ;*********************************************************
3236   F8B0             ;* Initialzes a new game.
3237   F8B0             ;*********************************************************			
3238   F8B0 FE D0 CA    do_game_init	ldx	gr_game_hook_ptr			;Game Start Hook
3239   F8B3 AD 00       			jsr	$00,X					;jsr to Game ROM Hook
3240   F8B5 BD FA 2C    			jsr	dump_score_queue			;Clean the score queue
3241   F8B8 8D 57       			bsr	clear_displays			;Blank all Player Displays (buffer 0)
3242   F8BA 4A          			deca
3243   F8BB 97 5C       			staa	wave_p1_b0
3244   F8BD 8D 36       			bsr	initialize_game			;Remove one Credit, init some game variables
3245   F8BF 8D 03       			bsr	add_player				;Add one Player
3246   F8C1 7E F9 51    			jmp	init_player_up
3247   F8C4             
3248   F8C4             
3249   F8C4             ;****************************************************
3250   F8C4             ;* Add Player: Increments player count and loads    
3251   F8C4             ;*             default game data for that player.  
3252   F8C4             ;*             Plays start sound and inits display.
3253   F8C4             ;*
3254   F8C4             ;* Requires:   No Variables
3255   F8C4             ;****************************************************	
3256   F8C4 BD D0 BE    add_player		jsr   gr_addplayer_event
3257   F8C7 7C 00 EA    			inc   num_players
3258   F8CA D6 EA       			ldab  num_players
3259   F8CC 8D 5E       			bsr   init_player_game
3260   F8CE             		
3261   F8CE CE D0 57    			ldx	#gr_p1_startsound			;Game ROM Table: Player Start Sounds
3262   F8D1 BD EE 8C    			jsr	xplusb				;X = X + B)
3263   F8D4 A6 00       			ldaa	$00,X
3264   F8D6 BD EC 3B    			jsr	isnd_once				;Play Player Start Sound From Game ROM Table
3265   F8D9 CE 01 93    			ldx	#adj_energystandard
3266   F8DC BD EE 92    			jsr	cmosinc_a			
3267   F8DF 8A F0       			oraa	#$F0
3268   F8E1 5D          			tstb
3269   F8E2             			ifne
3269   F8E2             
3269   F8E2 27 FE       
3270   F8E4 97 5C       				staa	wave_p1_b0
3271   F8E6             			else
3271   F8E6             
3271   F8E6             
3271   F8E6             
3271   F8E6             
3271   F8E3             
3271   F8E3             
3271   F8E3             
3271   F8E3~            			else
3271   F8E3~            			else
3271   F8E3~            			else
3271   F8E3~            			else
3271   F8E3             
3271   F8E3~            			else
3271   F8E3~            			else
3271   F8E3~            			else
3271   F8E3~            			else
3271   F8E3             
3271   F8E3             
3271   F8E3 04          
3271   F8E6             
3271   F8E6 20 FE       
3271   F8E8             
3271   F8E8             
3271   F8E8             
3271   F8E8~            			else
3271   F8E8~            			else
3271   F8E8~            			else
3271   F8E8~            			else
3271   F8E8~            			else
3271   F8E8             
3271   F8E8~            			else
3271   F8E8~            			else
3271   F8E8             
3271   F8E8~            			else
3271   F8E8~            			else
3271   F8E8             
3272   F8E8 97 5E       				staa	wave_p2_b0
3273   F8EA             			endif
3273   F8EA             
3273   F8EA             
3273   F8EA             
3273   F8EA             
3273   F8EA             
3273   F8EA~            			endif
3273   F8EA~            			endif
3273   F8EA             
3273   F8EA~            			endif
3273   F8EA~            			endif
3273   F8EA             
3273   F8E7             
3273   F8E7 02          
3273   F8E8             
3273   F8E8             
3273   F8E8~            			endif
3273   F8E8~            			endif
3273   F8E8~            			endif
3273   F8E8             
3273   F8EA             
3273   F8EA~            			endif
3273   F8EA~            			endif
3273   F8EA             
3274   F8EA 58          ap_shft		aslb
3275   F8EB 58          			aslb
3276   F8EC CE 00 4C    			ldx	#score_p1_b0
3277   F8EF BD EE 8C    			jsr	xplusb
3278   F8F2 6F 03       			clr	$03,X
3279   F8F4 39          			rts
3280   F8F5             
3281   F8F5             ;****************************************************	
3282   F8F5             ;* Sets up all gameplay variables for a new game.
3283   F8F5             ;****************************************************		
3284   F8F5 4F          initialize_game	clra	
3285   F8F6 97 F4       			staa	flag_timer_bip			;Ball in Play Flag
3286   F8F8 97 EB       			staa	player_up				;Default player 1 DOH
3287   F8FA 97 E7       			staa	flag_gameover			;Game Play On
3288   F8FC 97 7C       			staa	comma_flags
3289   F8FE C6 08       			ldab	#$08
3290   F900 BD EA 5B    			jsr	kill_threads
3291   F903 4A          			deca	
3292   F904 97 EA       			staa	num_players				;Subtract one Credit
3293   F906 C6 12       			ldab	#$12
3294   F908 CE 00 22    			ldx	#$0022				;Clear RAM $0022-002E
3295   F90B 36          clear_range		psha	
3296   F90C 4F          			clra	
3297   F90D 8D 9A       			bsr	write_range				;Store A from X to X+B
3298   F90F 32          to_pula_rts		pula	
3299   F910 39          			rts	
3300   F911             
3301   F911             ;******************************************************
3302   F911             ;* Resets all player display scores to Blank 'FFFFFFFF'
3303   F911             ;******************************************************			
3304   F911 86 FF       clear_displays	ldaa	#$FF
3305   F913 C6 10       			ldab	#$10
3306   F915 CE 00 4C    			ldx	#score_p1_b0
3307   F918 8D 8F       			bsr	write_range				;Store A from X to X+B
3308   F91A 4F          			clra	
3309   F91B C6 0C       			ldab	#$0C
3310   F91D CE 00 60    			ldx	#alpha_b0
3311   F920 8D 87       			bsr	write_range
3312   F922             			
3313   F922 4F          clr_dis_masks	clra
3314   F923 97 7B       			staa	dmask_p4				;These are the Display Buffer Toggles
3315   F925 97 7A       			staa	dmask_p3
3316   F927 97 79       clr_dis_masks12	staa	dmask_p2
3317   F929 97 78       			staa	dmask_p1
3318   F92B 39          			rts	
3319   F92C             
3320   F92C             ;**********************************************************
3321   F92C             ;* Loads the default game data into the player number 
3322   F92C             ;* passed in B.
3323   F92C             ;*
3324   F92C             ;* Requires:    	Player Number to init in B
3325   F92C             ;* Destroys:    	X
3326   F92C             ;* Protects:	A,B
3327   F92C             ;**********************************************************			
3328   F92C 36          init_player_game	psha	
3329   F92D 37          			pshb	
3330   F92E 8D 0B       			bsr	setplayerbuffer			;Set up the Pointer to the Players Buffer
3331   F930 8D 15       			bsr	copyplayerdata			;Copy Default Player Data into Player Buffer (X)
3332   F932 DE B8       			ldx	temp1
3333   F934 C6 06       			ldab	#$06
3334   F936 8D D3       			bsr	clear_range				;Clear Remaining Part of Player Game Data Buffer
3335   F938 33          			pulb	
3336   F939 32          			pula	
3337   F93A 39          			rts	
3338   F93B             
3339   F93B             ;**********************************************************
3340   F93B             ;* Will set up X to point at the start of the player 
3341   F93B             ;* specified in B.
3342   F93B             ;*
3343   F93B             ;* Requires:   	Player Number in B
3344   F93B             ;* Destroys:	A,B
3345   F93B             ;* Protects:	None
3346   F93B             ;* Output:		X
3347   F93B             ;**********************************************************			
3348   F93B 86 24       setplayerbuffer	ldaa	#gamedata_size			;Length of Player Buffer
3349   F93D CE 11 40    			ldx	#p1_gamedata	;Player 1 base
3350   F940             			begin
3350   F940             
3351   F940 BD EE 3E    				jsr	xplusa	;X = X + A
3352   F943 5A          				decb	
3353   F944             			miend
3353   F944             
3353   F944             
3353   F944~            			miend
3353   F944~            			miend
3353   F944~            			miend
3353   F944             
3353   F944 2A FA       
3353   F946             
3353   F946~            			miend
3353   F946~            			miend
3353   F946             
3354   F946 39          			rts	
3355   F947             
3356   F947             ;***********************************************************
3357   F947             ;* Copies Player default data from game ROM to the player 
3358   F947             ;* buffer specified by X.
3359   F947             ;*
3360   F947             ;* Requires: Player Buffer to Fill in X
3361   F947             ;***********************************************************			
3362   F947 DF B8       copyplayerdata	stx	temp1
3363   F949 CE D0 74    			ldx	#gr_playerstartdata		;*** Table Pointer ***
3364   F94C C6 1E       			ldab	#$1E
3365   F94E 7E EE FB    			jmp	copyblock				;Copy Block: X -> temp1 B=Length
3366   F951             
3367   F951             ;***********************************************************
3368   F951             ;
3369   F951             ;***********************************************************
3370   F951 8D 78       init_player_up	bsr   init_player_sys
3371   F953 CE 00 5E    			ldx   #wave_p2_b0
3372   F956 D6 EB       			ldab   player_up
3373   F958             			ifne
3373   F958             
3373   F958 27 FE       
3374   F95A CE 00 5C    				ldx   #wave_p1_b0
3375   F95D             			endif
3375   F95D             
3375   F95D             
3375   F95D             
3375   F95D             
3375   F95D             
3375   F95D~            			endif
3375   F95D~            			endif
3375   F95D             
3375   F95D~            			endif
3375   F95D~            			endif
3375   F95D             
3375   F959             
3375   F959 03          
3375   F95A             
3375   F95A             
3375   F95A~            			endif
3375   F95A~            			endif
3375   F95A~            			endif
3375   F95A             
3375   F95D             
3375   F95D~            			endif
3375   F95D~            			endif
3375   F95D             
3376   F95D A6 00       			ldaa   $00,X
3377   F95F             			ifmi
3377   F95F             
3377   F95F 2A FE       
3378   F961 84 0F       				anda  #0F
3379   F963             			endif
3379   F963             
3379   F963             
3379   F963             
3379   F963             
3379   F963             
3379   F963~            			endif
3379   F963~            			endif
3379   F963             
3379   F963~            			endif
3379   F963~            			endif
3379   F963             
3379   F960             
3379   F960 02          
3379   F961             
3379   F961             
3379   F961~            			endif
3379   F961~            			endif
3379   F961~            			endif
3379   F961             
3379   F963             
3379   F963~            			endif
3379   F963~            			endif
3379   F963             
3380   F963 8B 99       			adda  #$99
3381   F965 19          			daa   
3382   F966 81 10       			cmpa  #$10
3383   F968             			iflt
3383   F968             
3383   F968 2C FE       
3384   F96A 8A F0       				oraa   #$F0
3385   F96C             			endif
3385   F96C             
3385   F96C             
3385   F96C             
3385   F96C             
3385   F96C             
3385   F96C~            			endif
3385   F96C~            			endif
3385   F96C             
3385   F96C~            			endif
3385   F96C~            			endif
3385   F96C             
3385   F969             
3385   F969 02          
3385   F96A             
3385   F96A             
3385   F96A~            			endif
3385   F96A~            			endif
3385   F96A~            			endif
3385   F96A             
3385   F96C             
3385   F96C~            			endif
3385   F96C~            			endif
3385   F96C             
3386   F96C A7 00       			staa	$00,X
3387   F96E 8D 7A       			bsr   resetplayerdata
3388   F970 FE D0 CC    			ldx   gr_player_hook_ptr
3389   F973 AD 00       			jsr   $00,X
3390   F975             			begin
3390   F975             
3391   F975 BD E9 7C    player_ready		jsr   addthread		;Push Following Routine onto Control Stack with Timer
3392   F978 05          				.db $05          		;Timer Data
3393   F979             				;This following loop makes the current players
3394   F979             				;score flash until any score is made.
3395   F979 8D 36       				bsr   disp_mask
3396   F97B 43          				coma  
3397   F97C 94 7C       				anda  comma_flags
3398   F97E 97 7C       				staa  comma_flags
3399   F980 8D 3C       				bsr   disp_clear
3400   F982 DE CF       				ldx   current_thread
3401   F984 86 07       				ldaa  #07
3402   F986 A7 0D       				staa  threadobj_id,X
3403   F988 CE 00 78    				ldx   #dmask_p1
3404   F98B BD EE 8C    				jsr   xplusb
3405   F98E A6 00       				ldaa  $00,X
3406   F990 8A 7F       				oraa	#$7F
3407   F992 A7 00       				staa  $00,X
3408   F994 BD E9 7C    				jsr   addthread				;Push Following Routine onto Control Stack with Timer
3409   F997 05          				.db	$05
3410   F998 BD D0 BC    				jsr   gr_ready_event			;Game ROM Hook
3411   F99B A6 00       				ldaa  $00,X
3412   F99D 84 80       				anda  #$80
3413   F99F A7 00       				staa  $00,X
3414   F9A1 BD EA F8    				jsr   update_commas
3415   F9A4 DE CF       				ldx   current_thread
3416   F9A6 86 04       				ldaa  #04
3417   F9A8 A7 0D       				staa  threadobj_id,X
3418   F9AA 96 F4       				ldaa  flag_timer_bip
3419   F9AC             			neend
3419   F9AC             
3419   F9AC             
3419   F9AC~            			neend
3419   F9AC~            			neend
3419   F9AC~            			neend
3419   F9AC             
3419   F9AC 27 C7       
3419   F9AE             
3419   F9AE~            			neend
3419   F9AE~            			neend
3419   F9AE             
3420   F9AE 7E E9 C4    			jmp   killthread			;Remove Current Thread from Control Stack
3421   F9B1             
3422   F9B1 D6 EB       disp_mask		ldab	player_up				;Current Player Up (0-3)
3423   F9B3 CE EA F0    			ldx	#comma_million			;Comma Tables
3424   F9B6 BD EE 8C    			jsr	xplusb				;X = X + B)
3425   F9B9 A6 00       			ldaa	$00,X					;comma_million: 40 04 80 08
3426   F9BB AA 04       			oraa	$04,X					;comma_thousand: 10 01 20 02
3427   F9BD 39          			rts	
3428   F9BE             			
3429   F9BE DE EC       disp_clear		ldx	pscore_buf				;Start of Current Player Score Buffer
3430   F9C0 86 FF       			ldaa	#$FF
3431   F9C2 A7 08       			staa	$08,X
3432   F9C4 A7 09       			staa	$09,X
3433   F9C6 A7 0A       			staa	$0A,X
3434   F9C8 A7 0B       			staa	$0B,X
3435   F9CA 39          			rts	
3436   F9CB             
3437   F9CB             ;********************************************************
3438   F9CB             ;* Initializes new player. Clears tilt counter, reset 
3439   F9CB             ;* bonus ball enable, enables flippers, Loads Player 
3440   F9CB             ;* score buffer pointer.
3441   F9CB             ;********************************************************			
3442   F9CB 96 7D       init_player_sys	ldaa	switch_debounced
3443   F9CD 84 FE       			anda	#$FE
3444   F9CF 97 7D       			staa	switch_debounced				;Blank the Tilt Lines?
3445   F9D1 4F          			clra	
3446   F9D2 97 E6       			staa	flag_tilt				;Clear Tilt Flag
3447   F9D4 97 F1       			staa	num_tilt				;Clear Plumb Bob Tilts
3448   F9D6 97 E8       			staa	random_bool				;Clear Random
3449   F9D8 86 F9       			ldaa	#$F9
3450   F9DA BD EA 83    			jsr	solbuf				;Turn on Solenoid $18 (Flipper Enable?)
3451   F9DD 96 EB       			ldaa	player_up				;Current Player Up (0-3)
3452   F9DF 48          			asla	
3453   F9E0 48          			asla	
3454   F9E1 CE 00 4C    			ldx	#score_p1_b0
3455   F9E4 BD EE 3E    			jsr	xplusa				;X= P1:0038 P2:003C P3:0040 P4:0044
3456   F9E7 DF EC       			stx	pscore_buf				;Pointer to Start of Score Buffer 0
3457   F9E9 39          			rts	
3458   F9EA             
3459   F9EA             ;*********************************************************
3460   F9EA             ;* Applies Game ROM mask to player game data to reset 
3461   F9EA             ;* specific bits of data. Loads the flashing lamp data
3462   F9EA             ;* Resets Player game data at start of RAM.
3463   F9EA             ;*********************************************************	
3464   F9EA CE 00 10    resetplayerdata	ldx	#lampbuffer0
3465   F9ED DF B8       			stx	temp1					;temp1 Points to Base of Lamp Matrix Data
3466   F9EF BD F9 3B    			jsr	setplayerbuffer			
3467   F9F2 DF BA       			stx	temp2					;temp2 Points to Base of Player Game Data Buffer
3468   F9F4 CE D0 74    			ldx	#gr_playerstartdata		;X points to base of default player data
3469   F9F7             			begin
3469   F9F7             
3470   F9F7 A6 1E       				ldaa	$1E,X					;Get Game Data Reset Data
3471   F9F9 16          				tab	
3472   F9FA 53          				comb	
3473   F9FB E4 00       				andb	$00,X					;AND !B with Players Last Lamps
3474   F9FD 08          				inx	
3475   F9FE DF BC       				stx	temp3					;X points to base of default player data +1
3476   FA00 DE BA       				ldx	temp2					;Player Game Data Buffer
3477   FA02 A4 00       				anda	$00,X
3478   FA04 08          				inx	
3479   FA05 DF BA       				stx	temp2
3480   FA07 1B          				aba	
3481   FA08 DE B8       				ldx	temp1
3482   FA0A A7 00       				staa	$00,X
3483   FA0C 08          				inx	
3484   FA0D 8C 00 22    				cpx	#$0022
3485   FA10             				ifeq
3485   FA10             
3485   FA10 26 FE       
3486   FA12 CE 00 40    					ldx	#lampflashflag
3487   FA15             				endif
3487   FA15             
3487   FA15             
3487   FA15             
3487   FA15             
3487   FA15             
3487   FA15~            				endif
3487   FA15~            				endif
3487   FA15             
3487   FA15~            				endif
3487   FA15~            				endif
3487   FA15             
3487   FA11             
3487   FA11 03          
3487   FA12             
3487   FA12             
3487   FA12~            				endif
3487   FA12~            				endif
3487   FA12~            				endif
3487   FA12             
3487   FA15             
3487   FA15~            				endif
3487   FA15~            				endif
3487   FA15             
3488   FA15 DF B8       				stx	temp1
3489   FA17 DE BC       				ldx	temp3
3490   FA19 8C D0 92    				cpx	#gr_playerresetdata		;End of Default Player Game Data
3491   FA1C             			eqend						;Loop it!
3491   FA1C             
3491   FA1C             
3491   FA1C~            			eqend						;Loop it!
3491   FA1C~            			eqend						;Loop it!
3491   FA1C~            			eqend						;Loop it!
3491   FA1C             
3491   FA1C 26 D9       
3491   FA1E             
3491   FA1E~            			eqend						;Loop it!
3491   FA1E~            			eqend						;Loop it!
3491   FA1E             
3492   FA1E CE 00 02    			ldx	#$0002
3493   FA21 DF B8       			stx	temp1
3494   FA23 DE BA       			ldx	temp2
3495   FA25 C6 06       			ldab	#$06
3496   FA27 8D 52       			bsr	to_copyblock			;Copy Data Block: Current Game Data 0-6 -> Player Game Data 0-6
3497   FA29 7E F7 9C    			jmp	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary 
3498   FA2C             
3499   FA2C             ;*********************************************************************
3500   FA2C             ;* Scoring Queue: This will bring all scores up to date with current *
3501   FA2C             ;*                scores waiting to be applied.                      *
3502   FA2C             ;*********************************************************************			
3503   FA2C CE 11 28    dump_score_queue	ldx	#score_queue
3504   FA2F 86 0F       			ldaa	#$0F
3505   FA31             			begin
3505   FA31             
3506   FA31 E6 00       				ldab	$00,X
3507   FA33             				ifne
3507   FA33             
3507   FA33 27 FE       
3508   FA35             					begin
3508   FA35             
3509   FA35 BD EB 3D    						jsr	score_main				;Main Add Points Routine
3510   FA38 6A 00       						dec	$00,X
3511   FA3A             					eqend
3511   FA3A             
3511   FA3A             
3511   FA3A~            					eqend
3511   FA3A~            					eqend
3511   FA3A~            					eqend
3511   FA3A             
3511   FA3A 26 F9       
3511   FA3C             
3511   FA3C~            					eqend
3511   FA3C~            					eqend
3511   FA3C             
3512   FA3C             				endif
3512   FA3C             
3512   FA3C             
3512   FA3C             
3512   FA3C             
3512   FA3C             
3512   FA3C~            				endif
3512   FA3C~            				endif
3512   FA3C             
3512   FA3C~            				endif
3512   FA3C~            				endif
3512   FA3C             
3512   FA34             
3512   FA34 07          
3512   FA35             
3512   FA35             
3512   FA35~            				endif
3512   FA35~            				endif
3512   FA35~            				endif
3512   FA35             
3512   FA3C             
3512   FA3C~            				endif
3512   FA3C~            				endif
3512   FA3C             
3513   FA3C 08          				inx	
3514   FA3D 4A          				deca	
3515   FA3E 85 08       				bita	#$08
3516   FA40             			eqend
3516   FA40             
3516   FA40             
3516   FA40~            			eqend
3516   FA40~            			eqend
3516   FA40~            			eqend
3516   FA40             
3516   FA40 26 EF       
3516   FA42             
3516   FA42~            			eqend
3516   FA42~            			eqend
3516   FA42             
3517   FA42 39          			rts	
3518   FA43             
3519   FA43             ;*********************************************************************
3520   FA43             ;* Main Outhole Routine: The outhole switch will jump here on closure
3521   FA43             ;*********************************************************************			
3522   FA43 8D E7       outhole_main	bsr	dump_score_queue			
3523   FA45 BD F4 32    			jsr	macro_start				;Start Executing Macros
3524   FA48             			
3525   FA48 71          			.db $71          			;Delay 1
3526   FA49 5AFE0101FA  			.db $5A,$FE,$01,$01,$FA 	;Branch if Priority #01 to $F9B0
3527   FA4E 55 0A 00    			.db $55,$0A,$00  			;Reset Threads Based on Priority #0A	
3528   FA51             			CPUX_ 				;Resume CPU Execution
3528   FA51 04          
3529   FA52             
3530   FA52 FE D0 CE    			ldx  	gr_outhole_hook_ptr		;Game ROM: Pointer
3531   FA55 AD 00       			jsr  	$00,X  				;JSR to GameROM
3532   FA57 7F 00 F4    			clr  	flag_timer_bip			;Ball in Play Flag (Stop Timer)
3533   FA5A D6 EB       			ldab  player_up     			;Current Player Up (0-3)
3534   FA5C 8D 05       			bsr  	saveplayertobuffer    		;Save Player Data to Buffer
3535   FA5E 8D 1E       			bsr  	balladjust				;Do Outhole Processing (EB, Bonus Ball)
3536   FA60 7E F9 51    			jmp  	init_player_up			;Init New Player Up
3537   FA63             
3538   FA63             ;*********************************************************************
3539   FA63             ;* Save Player Data: This will save lamp and game specific data to   
3540   FA63             ;*                   the holding area so information can carrry from 
3541   FA63             ;*                   ball to ball.            
3542   FA63             ;*********************************************************************
3543   FA63             saveplayertobuffer	
3544   FA63 BD F9 3B    			jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
3545   FA66 DF B8       			stx	temp1
3546   FA68 CE 00 10    			ldx	#lampbuffer0
3547   FA6B C6 12       			ldab	#$12
3548   FA6D 8D 0C       			bsr	to_copyblock			;Save current lamp settings
3549   FA6F CE 00 40    			ldx	#lampflashflag
3550   FA72 C6 0C       			ldab	#$0C
3551   FA74 8D 05       			bsr	to_copyblock			;Save Flashing lamps too!
3552   FA76 CE 00 02    			ldx	#$0002
3553   FA79 C6 06       			ldab	#$06
3554   FA7B 7E EE FB    to_copyblock	jmp	copyblock				;Finally, save player game data.
3555   FA7E             
3556   FA7E             ;*********************************************************************
3557   FA7E             ;* Ball Update: This will increment to next player if there is one   
3558   FA7E             ;*              or will increment to next ball. If we are on the last
3559   FA7E             ;*              ball then it jumps to the gameover handler.
3560   FA7E             ;*********************************************************************
3561   FA7E CE 01 2A    balladjust		ldx   #aud_totalballs
3562   FA81 BD F7 E7    			jsr   ptrx_plus_1	 		;Add 1 to data in X
3563   FA84 5F          badj_loop		clrb  
3564   FA85 96 EA       			ldaa   num_players
3565   FA87             			ifne
3565   FA87             
3565   FA87 27 FE       
3566   FA89 96 EB       				ldaa   player_up
3567   FA8B             				ifeq
3567   FA8B             
3567   FA8B 26 FE       
3568   FA8D 5C          					incb
3569   FA8E             				endif
3569   FA8E             
3569   FA8E             
3569   FA8E             
3569   FA8E             
3569   FA8E             
3569   FA8E~            				endif
3569   FA8E~            				endif
3569   FA8E             
3569   FA8E~            				endif
3569   FA8E~            				endif
3569   FA8E             
3569   FA8C             
3569   FA8C 01          
3569   FA8D             
3569   FA8D             
3569   FA8D~            				endif
3569   FA8D~            				endif
3569   FA8D~            				endif
3569   FA8D             
3569   FA8E             
3569   FA8E~            				endif
3569   FA8E~            				endif
3569   FA8E             
3570   FA8E D7 EB       				stab   player_up
3571   FA90             				ifeq
3571   FA90             
3571   FA90 26 FE       
3572   FA92 8D 18       					bsr   chk_p1
3573   FA94 27 07       					beq   badj_p2
3574   FA96 39          badj_rts				rts 
3575   FA97             				endif
3575   FA97             
3575   FA97             
3575   FA97             
3575   FA97             
3575   FA97             
3575   FA97~            				endif
3575   FA97~            				endif
3575   FA97             
3575   FA97~            				endif
3575   FA97~            				endif
3575   FA97             
3575   FA91             
3575   FA91 05          
3575   FA92             
3575   FA92             
3575   FA92~            				endif
3575   FA92~            				endif
3575   FA92~            				endif
3575   FA92             
3575   FA97             
3575   FA97~            				endif
3575   FA97~            				endif
3575   FA97             
3576   FA97 96 5C       				ldaa   wave_p1_b0
3577   FA99 81 F0       				cmpa  #$F0
3578   FA9B 26 F9       				bne   badj_rts
3579   FA9D 8D 0D       badj_p2		      bsr   chk_p1
3580   FA9F 26 E3       				bne   badj_loop
3581   FAA1 91 5C       				cmpa  wave_p1_b0
3582   FAA3 26 DF       				bne   badj_loop
3583   FAA5             			else
3583   FAA5             
3583   FAA5             
3583   FAA5             
3583   FAA5             
3583   FA88             
3583   FA88             
3583   FA88             
3583   FA88~            			else
3583   FA88~            			else
3583   FA88~            			else
3583   FA88~            			else
3583   FA88             
3583   FA88~            			else
3583   FA88~            			else
3583   FA88~            			else
3583   FA88~            			else
3583   FA88             
3583   FA88             
3583   FA88 1E          
3583   FAA5             
3583   FAA5 20 FE       
3583   FAA7             
3583   FAA7             
3583   FAA7             
3583   FAA7~            			else
3583   FAA7~            			else
3583   FAA7~            			else
3583   FAA7~            			else
3583   FAA7~            			else
3583   FAA7             
3583   FAA7~            			else
3583   FAA7~            			else
3583   FAA7             
3583   FAA7~            			else
3583   FAA7~            			else
3583   FAA7             
3584   FAA7 8D 03       				bsr   chk_p1
3585   FAA9             				ifne
3585   FAA9             
3585   FAA9 27 FE       
3586   FAAB 39          					rts 
3587   FAAC 96 5E       chk_p1			      ldaa   wave_p2_b0
3588   FAAE 81 F0       					cmpa  #$F0
3589   FAB0 39          					rts   
3590   FAB1 CE 00 54    show_hstd				ldx   #score_p1_b1
3591   FAB4 DF B8       					stx   temp1
3592   FAB6 86 02       					ldaa   #02
3593   FAB8             					begin
3593   FAB8             
3594   FAB8 C6 04       						ldab   #04
3595   FABA CE 01 66    						ldx   #aud_currenthstd
3596   FABD BD FF CD    						jsr   block_copy
3597   FAC0 4A          						deca  
3598   FAC1             					eqend
3598   FAC1             
3598   FAC1             
3598   FAC1~            					eqend
3598   FAC1~            					eqend
3598   FAC1~            					eqend
3598   FAC1             
3598   FAC1 26 F5       
3598   FAC3             
3598   FAC3~            					eqend
3598   FAC3~            					eqend
3598   FAC3             
3599   FAC3 39          					rts  
3600   FAC4             				endif
3600   FAC4             
3600   FAC4             
3600   FAC4             
3600   FAC4             
3600   FAC4             
3600   FAC4~            				endif
3600   FAC4~            				endif
3600   FAC4             
3600   FAC4~            				endif
3600   FAC4~            				endif
3600   FAC4             
3600   FAAA             
3600   FAAA 19          
3600   FAAB             
3600   FAAB             
3600   FAAB~            				endif
3600   FAAB~            				endif
3600   FAAB~            				endif
3600   FAAB             
3600   FAC4             
3600   FAC4~            				endif
3600   FAC4~            				endif
3600   FAC4             
3601   FAC4             			endif
3601   FAC4             
3601   FAC4             
3601   FAC4             
3601   FAC4             
3601   FAC4             
3601   FAC4~            			endif
3601   FAC4~            			endif
3601   FAC4             
3601   FAC4~            			endif
3601   FAC4~            			endif
3601   FAC4             
3601   FAA6             
3601   FAA6 1D          
3601   FAA7             
3601   FAA7             
3601   FAA7~            			endif
3601   FAA7~            			endif
3601   FAA7~            			endif
3601   FAA7             
3601   FAC4             
3601   FAC4~            			endif
3601   FAC4~            			endif
3601   FAC4             
3602   FAC4             
3603   FAC4 BD D0 C0    gameover		jsr   gr_gameover_event
3604   FAC7 CE 00 40    			ldx   #lampflashflag
3605   FACA C6 0C       			ldab  #$0C
3606   FACC BD F9 0B    			jsr   clear_range
3607   FACF 20 2B       			bra   check_hstd
3608   FAD1             
3609   FAD1 B6 D0 5B    endgame		ldaa  gr_gameoversound
3610   FAD4 BD EC 3B    			jsr   isnd_once
3611   FAD7             			;fall through to init
3612   FAD7             
3613   FAD7 B6 D0 5D    powerup_init	ldaa	gr_gameover_lamp			;Game ROM: Game Over Lamp Location
3614   FADA BD F4 32    			jsr	macro_start				;Start Macro Execution
3615   FADD             			
3616   FADD             			SOL_($09)				;Turn Off Solenoid: Shooter/BallLift Disabled
3616   FADD 31 09       
3617   FADF 17 00       			.db $17,$00 			;Flash Lamp: Lamp Locatation at RAM $00
3618   FAE1             			CPUX_ 				;Resume CPU execution
3618   FAE1 04          
3619   FAE2 7C 00 E7    set_gameover	inc	flag_gameover			;Set Game Over
3620   FAE5 FE D0 5F    			ldx	gr_gameoverthread_ptr		;Game ROM: Init Pointer
3621   FAE8 BD EA 24    			jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
3622   FAEB BD F9 22    			jsr	clr_dis_masks		
3623   FAEE 7E E9 C4    			jmp	killthread				;Remove Current Thread from VM
3624   FAF1             
3625   FAF1             
3626   FAF1             get_aud_baseawd
3627   FAF1 CE 01 46    			ldx   #aud_game7
3628   FAF4 96 EB       			ldaa   player_up
3629   FAF6             			ifne   
3629   FAF6             
3629   FAF6 27 FE       
3630   FAF8 CE 01 48    				ldx   #aud_game7+2
3631   FAFB             			endif
3631   FAFB             
3631   FAFB             
3631   FAFB             
3631   FAFB             
3631   FAFB             
3631   FAFB~            			endif
3631   FAFB~            			endif
3631   FAFB             
3631   FAFB~            			endif
3631   FAFB~            			endif
3631   FAFB             
3631   FAF7             
3631   FAF7 03          
3631   FAF8             
3631   FAF8             
3631   FAF8~            			endif
3631   FAF8~            			endif
3631   FAF8~            			endif
3631   FAF8             
3631   FAFB             
3631   FAFB~            			endif
3631   FAFB~            			endif
3631   FAFB             
3632   FAFB 39          			rts   
3633   FAFC             
3634   FAFC CE 01 81    check_hstd		ldx	#adj_backuphstd			;CMOS: Backup HSTD
3635   FAFF BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
3636   FB02             			ifne						;No award if backup HSTD is 0,000,000
3636   FB02             
3636   FB02 27 FE       
3637   FB04 7F 00 BF    				clr	sys_temp2
3638   FB07 C6 02       				ldab	#$02
3639   FB09 D7 BE       				stab	sys_temp1
3640   FB0B CE 00 49    				ldx	#score_p1_b0-3			;Start High and work down low on the digits
3641   FB0E DF C2       				stx	sys_temp5
3642   FB10             				begin
3642   FB10             
3643   FB10 C6 04       					ldab	#$04
3644   FB12 D7 C6       					stab	sys_temp_w3				;Number of score Bytes Per Player
3645   FB14 CE 01 66    					ldx	#aud_currenthstd			;CMOS: Current HSTD
3646   FB17             					begin
3646   FB17             
3647   FB17 BD EE A2    						jsr	cmosinc_b				;CMOS,X++ -> B
3648   FB1A DF C4       						stx	sys_temp_w2
3649   FB1C DE C2       						ldx	sys_temp5
3650   FB1E BD EB C3    						jsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
3651   FB21 11          						cba	
3652   FB22 22 2B       						bhi	update_hstd				;HSTD beat by this digit, adjust HSTD so we dont have multiple awards by each player beating HSTD.
3653   FB24 26 48       						bne	hstd_adddig				;$A4=$A4+$A8
3654   FB26 08          						inx						;Next Digit
3655   FB27 DF C2       						stx	sys_temp5				;Store it
3656   FB29 DE C4       						ldx	sys_temp_w2				;Next HSDT Digit (pointer)
3657   FB2B 7A 00 C6    						dec	sys_temp_w3				;Goto Next Set of Digits
3658   FB2E             					eqend						;Loop for all (4)2 digits
3658   FB2E             
3658   FB2E             
3658   FB2E~            					eqend						;Loop for all (4)2 digits
3658   FB2E~            					eqend						;Loop for all (4)2 digits
3658   FB2E~            					eqend						;Loop for all (4)2 digits
3658   FB2E             
3658   FB2E 26 E7       
3658   FB30             
3658   FB30~            					eqend						;Loop for all (4)2 digits
3658   FB30~            					eqend						;Loop for all (4)2 digits
3658   FB30             
3659   FB30 7A 00 BE    hstd_nextp			dec	sys_temp1				;Goto Next Player
3660   FB33             				eqend						;Loop for all 4 Players
3660   FB33             
3660   FB33             
3660   FB33~            				eqend						;Loop for all 4 Players
3660   FB33~            				eqend						;Loop for all 4 Players
3660   FB33~            				eqend						;Loop for all 4 Players
3660   FB33             
3660   FB33 26 DB       
3660   FB35             
3660   FB35~            				eqend						;Loop for all 4 Players
3660   FB35~            				eqend						;Loop for all 4 Players
3660   FB35             
3661   FB35 96 BF       				ldaa	sys_temp2
3662   FB37             				ifne
3662   FB37             
3662   FB37 27 FE       
3663   FB39 FE D0 64    					ldx	gr_highscoresound			;Game ROM Data: High Score Sound
3664   FB3C 6E 00       					jmp   $00,X
3665   FB3E B6 01 66    set_hstd				ldaa	aud_currenthstd			;HSTD High Digit
3666   FB41 84 0F       					anda	#$0F
3667   FB43             					ifne					;Branch if Score is under 10 million
3667   FB43             
3667   FB43 27 FE       
3668   FB45 86 99       						ldaa	#$99
3669   FB47 8D 36       						bsr	fill_hstd_digits			;Set HSTD to 9,999,999
3670   FB49 7F 01 66    						clr	aud_currenthstd			;Clear 10 Million Digit
3671   FB4C             					endif
3671   FB4C             
3671   FB4C             
3671   FB4C             
3671   FB4C             
3671   FB4C             
3671   FB4C~            					endif
3671   FB4C~            					endif
3671   FB4C             
3671   FB4C~            					endif
3671   FB4C~            					endif
3671   FB4C             
3671   FB44             
3671   FB44 07          
3671   FB45             
3671   FB45             
3671   FB45~            					endif
3671   FB45~            					endif
3671   FB45~            					endif
3671   FB45             
3671   FB4C             
3671   FB4C~            					endif
3671   FB4C~            					endif
3671   FB4C             
3672   FB4C             				endif
3672   FB4C             
3672   FB4C             
3672   FB4C             
3672   FB4C             
3672   FB4C             
3672   FB4C~            				endif
3672   FB4C~            				endif
3672   FB4C             
3672   FB4C~            				endif
3672   FB4C~            				endif
3672   FB4C             
3672   FB38             
3672   FB38 13          
3672   FB39             
3672   FB39             
3672   FB39~            				endif
3672   FB39~            				endif
3672   FB39~            				endif
3672   FB39             
3672   FB4C             
3672   FB4C~            				endif
3672   FB4C~            				endif
3672   FB4C             
3673   FB4C             			endif
3673   FB4C             
3673   FB4C             
3673   FB4C             
3673   FB4C             
3673   FB4C             
3673   FB4C~            			endif
3673   FB4C~            			endif
3673   FB4C             
3673   FB4C~            			endif
3673   FB4C~            			endif
3673   FB4C             
3673   FB03             
3673   FB03 48          
3673   FB04             
3673   FB04             
3673   FB04~            			endif
3673   FB04~            			endif
3673   FB04~            			endif
3673   FB04             
3673   FB4C             
3673   FB4C~            			endif
3673   FB4C~            			endif
3673   FB4C             
3674   FB4C 7E FA D1    			jmp   endgame
3675   FB4F             
3676   FB4F CE 01 66    update_hstd		ldx	#aud_currenthstd			;Current HSTD
3677   FB52 96 BE       			ldaa	sys_temp1
3678   FB54 97 BF       			staa	sys_temp2
3679   FB56 DF B8       			stx	temp1
3680   FB58 8D 18       			bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
3681   FB5A C6 04       			ldab	#$04
3682   FB5C 09          			dex	
3683   FB5D BD EF 23    			jsr	copyblock2				;Transfer Data Block at X to temp1, Length B
3684   FB60 7C 01 66    			inc	aud_currenthstd			;Adjust HSTD to new player score
3685   FB63 B6 01 67    			ldaa	aud_currenthstd+1
3686   FB66 4C          			inca	
3687   FB67 84 0F       			anda	#$0F
3688   FB69 26 C5       			bne	hstd_nextp				;Go Check Next Player Score
3689   FB6B 7F 01 67    			clr	aud_currenthstd+1
3690   FB6E 8D 02       hstd_adddig		bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
3691   FB70 20 BE       			bra	hstd_nextp				;Go Check Next Player Score
3692   FB72             			
3693   FB72             ;*************************************************
3694   FB72             ;* Add LSB of sys_temp_w3 to sys_temp5
3695   FB72             ;*************************************************
3696   FB72 DE C2       wordplusbyte	ldx	sys_temp5
3697   FB74 96 C6       			ldaa	sys_temp_w3
3698   FB76 7F 00 C6    			clr	sys_temp_w3
3699   FB79 BD EE 3E    			jsr	xplusa				;X = X + A
3700   FB7C DF C2       			stx	sys_temp5
3701   FB7E 39          to_rts1		rts	
3702   FB7F             			
3703   FB7F             ;**************************************************
3704   FB7F             ;* This routine will fill the value of A into all
3705   FB7F             ;* high score digit data.
3706   FB7F             ;**************************************************
3707   FB7F CE 01 66    fill_hstd_digits	ldx	#aud_currenthstd			;CMOS: Current HSTD
3708   FB82 C6 04       			ldab	#$04
3709   FB84             			begin
3709   FB84             
3710   FB84 BD EE EE    				jsr	a_cmosinc				;A -> CMOS,X++)
3711   FB87 5A          				decb	
3712   FB88             			eqend
3712   FB88             
3712   FB88             
3712   FB88~            			eqend
3712   FB88~            			eqend
3712   FB88~            			eqend
3712   FB88             
3712   FB88 26 FA       
3712   FB8A             
3712   FB8A~            			eqend
3712   FB8A~            			eqend
3712   FB8A             
3713   FB8A 39          			rts
3714   FB8B             				
3715   FB8B             send_sound		begin
3715   FB8B             
3716   FB8B BD E9 7C    				jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3717   FB8E 02          				.db 	$02
3718   FB8F 96 DF       				ldaa  sys_soundflags			
3719   FB91             		      eqend
3719   FB91             
3719   FB91             
3719   FB91~            		      eqend
3719   FB91~            		      eqend
3719   FB91~            		      eqend
3719   FB91             
3719   FB91 26 F8       
3719   FB93             
3719   FB93~            		      eqend
3719   FB93~            		      eqend
3719   FB93             
3720   FB93 39          		      rts 
3721   FB94             
3722   FB94             ;******************************************************
3723   FB94             ;* Get Random: Will pull various system variables and
3724   FB94             ;*             calculate a pseudo-random number.
3725   FB94             ;******************************************************			
3726   FB94 37          get_random		pshb	
3727   FB95 96 F5       			ldaa	randomseed				;This is changed by Switch Closures
3728   FB97 16          			tab	
3729   FB98 56          			rorb	
3730   FB99 56          			rorb	
3731   FB9A 97 B8       			staa	temp1					;Use some Temp variables for data
3732   FB9C D8 B8       			eorb	temp1
3733   FB9E 49          			rola	
3734   FB9F 9B A5       			adda	irq_counter					;Throw in some switch matrix stuff
3735   FBA1 97 F5       			staa	randomseed
3736   FBA3 33          			pulb	
3737   FBA4 39          to_rts2		rts
3738   FBA5             
3739   FBA5             ;********************************************************
3740   FBA5             ;* Credit Button Press: 
3741   FBA5             ;********************************************************
3742   FBA5 CE 01 AB    credit_button	ldx	#adj_max_credits			;CMOS: Max. Credits
3743   FBA8 BD EE A2    			jsr	cmosinc_b				;CMOS,X++ -> B
3744   FBAB CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
3745   FBAE BD FD DB    			jsr	cmos_a				;CMOS, X -> A )
3746   FBB1 26 03       			bne	has_credit
3747   FBB3 5D          			tstb						;No credits, check for free play
3748   FBB4             			ifeq						;No Free Play, get outta here.
3748   FBB4             
3748   FBB4 26 FE       
3749   FBB6 D6 E7       has_credit			ldab	flag_gameover			;Has valid credit or freeplay, is Game Over?
3750   FBB8 26 20       				bne	start_new_game			;No, goto Start New Game
3751   FBBA DF C4       				stx	sys_temp_w2
3752   FBBC CE 01 93    				ldx	#adj_energystandard
3753   FBBF BD EE A2    				jsr	cmosinc_b				;CMOS,X++ -> B
3754   FBC2 DE C4       				ldx	sys_temp_w2
3755   FBC4 5A          				decb
3756   FBC5 CA F0       				orab	#$F0
3757   FBC7 D1 5E       				cmpb	wave_p2_b0
3758   FBC9             				ifle
3758   FBC9             
3758   FBC9 2E FE       
3759   FBCB D6 EA       					ldab	num_players				;Current # of Players
3760   FBCD F1 D0 4E    					cmpb	gr_numplayers			;Max # of Players (Game ROM data)
3761   FBD0             					ifcs						;Already 4 players, outta here.
3761   FBD0             
3761   FBD0 24 FE       
3762   FBD2 8D 0B       						bsr	lesscredit				;Subtract a credit
3763   FBD4 BD F8 C4    						jsr	add_player				;Add a player.
3764   FBD7             					endif
3764   FBD7             
3764   FBD7             
3764   FBD7             
3764   FBD7             
3764   FBD7             
3764   FBD7~            					endif
3764   FBD7~            					endif
3764   FBD7             
3764   FBD7~            					endif
3764   FBD7~            					endif
3764   FBD7             
3764   FBD1             
3764   FBD1 05          
3764   FBD2             
3764   FBD2             
3764   FBD2~            					endif
3764   FBD2~            					endif
3764   FBD2~            					endif
3764   FBD2             
3764   FBD7             
3764   FBD7~            					endif
3764   FBD7~            					endif
3764   FBD7             
3765   FBD7             				endif
3765   FBD7             
3765   FBD7             
3765   FBD7             
3765   FBD7             
3765   FBD7             
3765   FBD7~            				endif
3765   FBD7~            				endif
3765   FBD7             
3765   FBD7~            				endif
3765   FBD7~            				endif
3765   FBD7             
3765   FBCA             
3765   FBCA 0C          
3765   FBCB             
3765   FBCB             
3765   FBCB~            				endif
3765   FBCB~            				endif
3765   FBCB~            				endif
3765   FBCB             
3765   FBD7             
3765   FBD7~            				endif
3765   FBD7~            				endif
3765   FBD7             
3766   FBD7             			endif
3766   FBD7             
3766   FBD7             
3766   FBD7             
3766   FBD7             
3766   FBD7             
3766   FBD7~            			endif
3766   FBD7~            			endif
3766   FBD7             
3766   FBD7~            			endif
3766   FBD7~            			endif
3766   FBD7             
3766   FBB5             
3766   FBB5 21          
3766   FBB6             
3766   FBB6             
3766   FBB6~            			endif
3766   FBB6~            			endif
3766   FBB6~            			endif
3766   FBB6             
3766   FBD7             
3766   FBD7~            			endif
3766   FBD7~            			endif
3766   FBD7             
3767   FBD7 7E E9 C4    			jmp	killthread				;Remove Current Thread from VM
3768   FBDA             
3769   FBDA             ;*********************************************************
3770   FBDA             ;* Resets Games and Starts Anew
3771   FBDA             ;*********************************************************
3772   FBDA 8D 03       start_new_game	bsr	lesscredit				;Subtract a credit
3773   FBDC 7E F8 B0    			jmp	do_game_init			;Init Player 1
3774   FBDF             
3775   FBDF             ;*********************************************************
3776   FBDF             ;* Removes a credit and adjusts coin lockout and credit 
3777   FBDF             ;* lamp appropriately. Also updates audits.
3778   FBDF             ;*
3779   FBDF             ;* 	Current Credits in A.
3780   FBDF             ;*********************************************************
3781   FBDF 4D          lesscredit		tsta	
3782   FBE0             			ifne						;Is it Zero?
3782   FBE0             
3782   FBE0 27 FE       
3783   FBE2 8B 99       				adda	#$99					;Subtract 1 credit
3784   FBE4 19          				daa						;dont' forget to adjust
3785   FBE5 BD EE EE    				jsr	a_cmosinc				;A -> CMOS,X++)
3786   FBE8 B6 11 9A    				ldaa	current_credits				;Current Credits
3787   FBEB 8B 99       				adda	#$99					;Subtract 1
3788   FBED 19          				daa	
3789   FBEE B7 11 9A    				staa	current_credits				;Store Credits
3790   FBF1             			endif
3790   FBF1             
3790   FBF1             
3790   FBF1             
3790   FBF1             
3790   FBF1             
3790   FBF1~            			endif
3790   FBF1~            			endif
3790   FBF1             
3790   FBF1~            			endif
3790   FBF1~            			endif
3790   FBF1             
3790   FBE1             
3790   FBE1 0F          
3790   FBE2             
3790   FBE2             
3790   FBE2~            			endif
3790   FBE2~            			endif
3790   FBE2~            			endif
3790   FBE2             
3790   FBF1             
3790   FBF1~            			endif
3790   FBF1~            			endif
3790   FBF1             
3791   FBF1 BD F7 9C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
3792   FBF4 BD F8 93    			jsr	clr_bonus_coins			;Reset Any Bonus Coins... too bad!
3793   FBF7 CE 01 1E    			ldx	#aud_totalcredits			;Audit: Total Credits
3794   FBFA 7E F7 E7    			jmp	ptrx_plus_1				;Add 1 to data at X
3795   FBFD             
3796   FBFD             ;*********************************************************
3797   FBFD             ;* Tilt Contacts
3798   FBFD             ;*********************************************************			
3799   FBFD 7C 00 F1    tilt_warning	inc	num_tilt				;Add 1 Tilt
3800   FC00 B6 01 92    			ldaa	adj_maxplumbbobtilts+1		;ADJ: LSD Max Plumb Bob Tilts
3801   FC03 84 0F       			anda	#$0F
3802   FC05 91 F1       			cmpa	num_tilt				;Current # of Plumb Bob Tilts
3803   FC07 22 9B       			bhi	to_rts2				;Not enough warnings yet.. Leave now!
3804   FC09 B6 D0 5E    do_tilt		ldaa	gr_tilt_lamp			;Game ROM: Tilt Lamp Location
3805   FC0C 97 E6       			staa	flag_tilt				;Tilt Flag
3806   FC0E BD F4 32    			jsr	macro_start				;Start Macro Execution-
3807   FC11             			
3808   FC11 14 00       			.db $14,$00 		;Turn on Tilt Lamp
3809   FC13             			REMTHREADS_($0C,$00)	;.db $55,$0C,$00  	;Get Rid of non-tilt threads
3809   FC13 55 0C 00    
3810   FC16             			CPUX_				;Return to Program Execution 
3810   FC16 04          
3811   FC17 39          			rts
3812   FC18             
3813   FC18             
3814   FC18             ;***********************************************************
3815   FC18             ;* Self Test Routines Begin Here, first some data tables
3816   FC18             ;***********************************************************
3817   FC18             ;* Define our test entry points
3818   FC18             ;***********************************************
3819   FC18 FD FF       testdata		.dw st_display
3820   FC1A FE 32       			.dw st_sound
3821   FC1C FE 5D       			.dw st_lamp
3822   FC1E FE 9C       			.dw st_solenoid
3823   FC20 FE D8       			.dw st_switch
3824   FC22             
3825   FC22             ;***********************************************
3826   FC22             ;* This table defines which routines
3827   FC22             ;* handel the various adjustment displays.
3828   FC22             ;***********************************************			
3829   FC22 00          testlists		.db $00		;Function 00:    Game Identification
3830   FC23 FD 46       			.dw fn_gameid	;$FD,$23
3831   FC25 01          			.db $01		;Function 01-11: System Audits
3832   FC26 FD 53       			.dw fn_sysaud	;$FD,$30
3833   FC28 0C          			.db $0C		;Function 12:    Current HSTD
3834   FC29 FD 66       			.dw fn_hstd		;$FD,$A9
3835   FC2B 0D          			.db $0D		;Function 13-17: Backup HSTD and Replays
3836   FC2C FD 6E       			.dw fn_replay	;$FD,$B1
3837   FC2E 12          			.db $12		;Function 18:    Max Credits
3838   FC2F FD E2       			.dw fn_credit	;$FE,$26
3839   FC31 13          			.db $13		;Function 19:    Pricing Control
3840   FC32 FD AC       			.dw fn_pricec	;$FD,$EF
3841   FC34 14          			.db $14		;Function 20-25: Pricing Settings
3842   FC35 FD C6       			.dw fn_prices	;$FE,$09
3843   FC37 1A          			.db $1A		;Function 26-41: System and Game Adjustments
3844   FC38 FD EF       			.dw fn_adj		;$FE,$33
3845   FC3A 2A          			.db $2A		;Function 42-49: Game Audits
3846   FC3B FD 51       			.dw fn_gameaud	;$FD,$2E
3847   FC3D 32          			.db $32		;Function 50:    Command Mode
3848   FC3E FD FA       			.dw fn_command	;$FE,$3E
3849   FC40 33          			.db $33
3850   FC41             
3851   FC41             ;************************************************
3852   FC41             ;* Main Self-Test Routine
3853   FC41             ;************************************************
3854   FC41             test_number =	$000e			;RAM Location to store where we are...
3855   FC41             test_lamptimer =	$000f			;Timer for Lamp test loop
3856   FC41             
3857   FC41 8D 51       selftest_entry	bsr	check_adv				;Advance: - if Triggered
3858   FC43             			ifpl
3858   FC43             
3858   FC43 2B FE       
3859   FC45 7E E9 C4    				jmp	killthread				;Kill Current Thread
3860   FC48             			endif
3860   FC48             
3860   FC48             
3860   FC48             
3860   FC48             
3860   FC48             
3860   FC48~            			endif
3860   FC48~            			endif
3860   FC48             
3860   FC48~            			endif
3860   FC48~            			endif
3860   FC48             
3860   FC44             
3860   FC44 03          
3860   FC45             
3860   FC45             
3860   FC45~            			endif
3860   FC45~            			endif
3860   FC45~            			endif
3860   FC45             
3860   FC48             
3860   FC48~            			endif
3860   FC48~            			endif
3860   FC48             
3861   FC48 86 09       			ldaa	#09
3862   FC4A BD EA 83    			jsr	solbuf
3863   FC4D 8D 5B       			bsr	st_init				;Set up self test
3864   FC4F 8D 4E       			bsr	check_aumd				;AUMD: + if Manual-Down
3865   FC51 2B 77       			bmi	do_audadj				;Auto-Up, go do audits and adjustments instead
3866   FC53 4F          			clra	
3867   FC54 7F 00 0E    st_diagnostics	clr	test_number				;Start at 0
3868   FC57 CE FC 18    			ldx	#testdata				;Macro Pointer
3869   FC5A 36          			psha	
3870   FC5B 86 09       			ldaa	#09
3871   FC5D BD EA 83    			jsr	solbuf
3872   FC60 32          			pula
3873   FC61 36          			psha
3874   FC62 BD F5 28    			jsr	gettabledata_b			;Load up the pointer to our test routine in X
3875   FC65 32          			pula	
3876   FC66 16          			tab	
3877   FC67 5A          			decb						;Adjust back down to where it was before table lookup incremented it
3878   FC68 D7 5E       			stab	wave_p2_b0				;Show the test number in display
3879   FC6A BD EA 24    			jsr	newthread_06			;Start a new thread with our test routine
3880   FC6D BD E9 7C    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3881   FC70 10          			.db	$10	
3882   FC71             			;This is the Advance button handler, it runs as a seperate thread to the test routine
3883   FC71             			begin
3883   FC71             
3884   FC71             				begin
3884   FC71             
3885   FC71 8D 21       					bsr	check_adv			;Advance: Stay here forever until pressed			   
3886   FC73             				miend
3886   FC73             
3886   FC73             
3886   FC73~            				miend
3886   FC73~            				miend
3886   FC73~            				miend
3886   FC73             
3886   FC73 2A FC       
3886   FC75             
3886   FC75~            				miend
3886   FC75~            				miend
3886   FC75             
3887   FC75 8D 28       				bsr	check_aumd				;AUMD: + if Manual-Down
3888   FC77 2B 40       				bmi	st_nexttest				;Do next test...
3889   FC79 D7 0E       				stab	test_number
3890   FC7B             				begin
3890   FC7B             
3891   FC7B 8D 17       					bsr	check_adv			;Advance: Stay here forever until released
3892   FC7D             				plend
3892   FC7D             
3892   FC7D             
3892   FC7D~            				plend
3892   FC7D~            				plend
3892   FC7D~            				plend
3892   FC7D             
3892   FC7D 2B FC       
3892   FC7F             
3892   FC7F~            				plend
3892   FC7F~            				plend
3892   FC7F             
3893   FC7F             			loopend
3893   FC7F             
3893   FC7F             
3893   FC7F~            			loopend
3893   FC7F~            			loopend
3893   FC7F~            			loopend
3893   FC7F             
3893   FC7F 20 F0       
3893   FC81             
3893   FC81~            			loopend
3893   FC81~            			loopend
3893   FC81             
3894   FC81             
3895   FC81             ;*******************************************************
3896   FC81             ;*
3897   FC81             ;*******************************************************			
3898   FC81 36          do_aumd		psha	
3899   FC82 96 E9       			ldaa	flags_selftest
3900   FC84             			ifpl
3900   FC84             
3900   FC84 2B FE       
3901   FC86 8D 17       				bsr	check_aumd					;AUMD: + if Manual-Down
3902   FC88             				ifpl
3902   FC88             
3902   FC88 2B FE       
3903   FC8A 96 0E       					ldaa	test_number
3904   FC8C             					ifne
3904   FC8C             
3904   FC8C 27 FE       
3905   FC8E 4F          						clra	
3906   FC8F 97 0E       						staa	test_number
3907   FC91 4A          						deca	
3908   FC92             					endif
3908   FC92             
3908   FC92             
3908   FC92             
3908   FC92             
3908   FC92             
3908   FC92~            					endif
3908   FC92~            					endif
3908   FC92             
3908   FC92~            					endif
3908   FC92~            					endif
3908   FC92             
3908   FC8D             
3908   FC8D 04          
3908   FC8E             
3908   FC8E             
3908   FC8E~            					endif
3908   FC8E~            					endif
3908   FC8E~            					endif
3908   FC8E             
3908   FC92             
3908   FC92~            					endif
3908   FC92~            					endif
3908   FC92             
3909   FC92             				endif
3909   FC92             
3909   FC92             
3909   FC92             
3909   FC92             
3909   FC92             
3909   FC92~            				endif
3909   FC92~            				endif
3909   FC92             
3909   FC92~            				endif
3909   FC92~            				endif
3909   FC92             
3909   FC89             
3909   FC89 08          
3909   FC8A             
3909   FC8A             
3909   FC8A~            				endif
3909   FC8A~            				endif
3909   FC8A~            				endif
3909   FC8A             
3909   FC92             
3909   FC92~            				endif
3909   FC92~            				endif
3909   FC92             
3910   FC92             			endif
3910   FC92             
3910   FC92             
3910   FC92             
3910   FC92             
3910   FC92             
3910   FC92~            			endif
3910   FC92~            			endif
3910   FC92             
3910   FC92~            			endif
3910   FC92~            			endif
3910   FC92             
3910   FC85             
3910   FC85 0C          
3910   FC86             
3910   FC86             
3910   FC86~            			endif
3910   FC86~            			endif
3910   FC86~            			endif
3910   FC86             
3910   FC92             
3910   FC92~            			endif
3910   FC92~            			endif
3910   FC92             
3911   FC92 32          			pula	
3912   FC93 39          			rts
3913   FC94             
3914   FC94             ;*********************************************************
3915   FC94             ;* This will check the state of the advance switch and
3916   FC94             ;* return the control register results
3917   FC94             ;*********************************************************				
3918   FC94 F6 28 00    check_adv		ldab	pia_disp_digit_data		;Dummy read to clear previous results
3919   FC97 BD E9 7C    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3920   FC9A 02          			.db	$02
3921   FC9B F6 28 01    			ldab	pia_disp_digit_ctrl
3922   FC9E 39          			rts
3923   FC9F             
3924   FC9F             ;*********************************************************
3925   FC9F             ;* This routine will check the state of the Up/Down toggle
3926   FC9F             ;* switch. First do a dummy read to clear previous results
3927   FC9F             ;*********************************************************
3928   FC9F F6 28 02    check_aumd		ldab	pia_disp_seg_data			;Dummy read to clear previous results
3929   FCA2 BD E9 7C    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3930   FCA5 02          			.db	$02
3931   FCA6 F6 28 03    			ldab	pia_disp_seg_ctrl
3932   FCA9 39          			rts 
3933   FCAA             
3934   FCAA             ;**************************************************
3935   FCAA             ;* Self Test Initializations:
3936   FCAA             ;*	Remove all VM Threads
3937   FCAA             ;*	Disable Solenoids
3938   FCAA             ;*	Clear RAM
3939   FCAA             ;**************************************************
3940   FCAA 5F          st_init		clrb	
3941   FCAB BD EA 5B    			jsr	kill_threads			;Remove All VM Threads 
3942   FCAE 7C 00 E9    			inc	flags_selftest			;Set Test Flag
3943   FCB1 CE 00 00    			ldx	#ram_base
3944   FCB4 C6 A5       			ldab	#$A5
3945   FCB6 7E F9 0B    to_clear_range	jmp	clear_range				;Clear RAM from $0000-0089
3946   FCB9             
3947   FCB9             ;**************************************************
3948   FCB9             ;* Next Test: Will advance diagnostics to next
3949   FCB9             ;*            test in sequence, if done, then fall
3950   FCB9             ;*            through to audits/adjustments
3951   FCB9             ;**************************************************
3952   FCB9 C6 3C       st_nexttest		ldab	#$3C
3953   FCBB CE 00 10    			ldx	#lampbuffer0
3954   FCBE 8D F6       			bsr	to_clear_range			;Clear RAM from $0010-0038
3955   FCC0 BD EA 5B    			jsr	kill_threads			;Remove all VM Threads
3956   FCC3 4C          			inca	
3957   FCC4 81 05       			cmpa	#$05					;are we done yet?
3958   FCC6 26 8C       			bne	st_diagnostics			;Goto back to Self-Test Diagnostics routine
3959   FCC8             			;Fall through if finished
3960   FCC8             			
3961   FCC8             ;**************************************************
3962   FCC8             ;* Main Audit/Adjustments Process Entry
3963   FCC8             ;**************************************************			
3964   FCC8 8D E0       to_audadj		bsr	st_init				;Clear all RAM and set up self testing
3965   FCCA 7F 00 5C    do_audadj		clr	wave_p1_b0
3966   FCCD 86 04       			ldaa	#$04					;Show test 04 by default
3967   FCCF 97 5E       			staa	wave_p2_b0
3968   FCD1 BD E9 7C    			jsr	addthread				;Wait $10
3969   FCD4 10          			.db 	$10
3970   FCD5             			begin
3970   FCD5             
3971   FCD5 BD F9 11    				jsr	clear_displays			;Blank all Player Displays (buffer 0)
3972   FCD8 8D 34       				bsr	b_129					;#08 -> $0F
3973   FCDA D6 5C       				ldab	wave_p1_b0
3974   FCDC BD F8 9D    				jsr	dec2hex				;Convert Decimal(B) to Hex(B)
3975   FCDF CE FC 1F    				ldx	#testlists-3
3976   FCE2             				begin
3976   FCE2             
3977   FCE2 08          					inx	
3978   FCE3 08          					inx	
3979   FCE4 08          					inx	
3980   FCE5 E1 03       					cmpb	$03,X					;Are we at next handler?
3981   FCE7             				csend
3981   FCE7             
3981   FCE7             
3981   FCE7~            				csend
3981   FCE7~            				csend
3981   FCE7~            				csend
3981   FCE7             
3981   FCE7 24 F9       
3981   FCE9             
3981   FCE9~            				csend
3981   FCE9~            				csend
3981   FCE9             
3982   FCE9 EE 01       				ldx	$01,X					;Load the routine
3983   FCEB AD 00       				jsr	$00,X					;Do the routine to load up data into displays
3984   FCED             				begin
3984   FCED             
3985   FCED 8D A5       					bsr	check_adv			;Advance: - if Triggered
3986   FCEF             				miend
3986   FCEF             
3986   FCEF             
3986   FCEF~            				miend
3986   FCEF~            				miend
3986   FCEF~            				miend
3986   FCEF             
3986   FCEF 2A FC       
3986   FCF1             
3986   FCF1~            				miend
3986   FCF1~            				miend
3986   FCF1             
3987   FCF1 8D 1B       b_133				bsr	b_129					;#08 -> $0F
3988   FCF3 8D 9F       show_func			bsr	check_adv				;Advance: - if Triggered
3989   FCF5             			miend
3989   FCF5             
3989   FCF5             
3989   FCF5~            			miend
3989   FCF5~            			miend
3989   FCF5~            			miend
3989   FCF5             
3989   FCF5 2A DE       
3989   FCF7             
3989   FCF7~            			miend
3989   FCF7~            			miend
3989   FCF7             
3990   FCF7 8D 1A       			bsr	b_12D
3991   FCF9 26 F8       			bne	show_func				;Look at the buttons again
3992   FCFB 8D 31       			bsr	adjust_func				;Add or subtract the function number?
3993   FCFD 9B 5C       			adda	wave_p1_b0				;Change it
3994   FCFF 19          			daa	
3995   FD00 81 51       			cmpa	#$51					;Are we now on audit 51??
3996   FD02 27 35       			beq	st_reset				;Yes, Blank displays, reboot game
3997   FD04 81 99       			cmpa	#$99					;Going down, are we minus now??
3998   FD06             			ifeq
3998   FD06             
3998   FD06 26 FE       
3999   FD08 86 50       				ldaa	#$50					;Yes, wrap around to 50
4000   FD0A             			endif
4000   FD0A             
4000   FD0A             
4000   FD0A             
4000   FD0A             
4000   FD0A             
4000   FD0A~            			endif
4000   FD0A~            			endif
4000   FD0A             
4000   FD0A~            			endif
4000   FD0A~            			endif
4000   FD0A             
4000   FD07             
4000   FD07 02          
4000   FD08             
4000   FD08             
4000   FD08~            			endif
4000   FD08~            			endif
4000   FD08~            			endif
4000   FD08             
4000   FD0A             
4000   FD0A~            			endif
4000   FD0A~            			endif
4000   FD0A             
4001   FD0A 97 5C       			staa	wave_p1_b0				;Store new value
4002   FD0C 20 E5       			bra	show_func				;Look at the buttons again
4003   FD0E             
4004   FD0E 86 08       b_129			ldaa	#$08
4005   FD10 97 0F       			staa	$000F
4006   FD12 39          			rts	
4007   FD13             			
4008   FD13 96 0F       b_12D			ldaa	$000F
4009   FD15             			ifne
4009   FD15             
4009   FD15 27 FE       
4010   FD17 7A 00 0F    				dec	$000F
4011   FD1A 81 08       				cmpa	#$08
4012   FD1C             			endif
4012   FD1C             
4012   FD1C             
4012   FD1C             
4012   FD1C             
4012   FD1C             
4012   FD1C~            			endif
4012   FD1C~            			endif
4012   FD1C             
4012   FD1C~            			endif
4012   FD1C~            			endif
4012   FD1C             
4012   FD16             
4012   FD16 05          
4012   FD17             
4012   FD17             
4012   FD17~            			endif
4012   FD17~            			endif
4012   FD17~            			endif
4012   FD17             
4012   FD1C             
4012   FD1C~            			endif
4012   FD1C~            			endif
4012   FD1C             
4013   FD1C 39          			rts
4014   FD1D             
4015   FD1D             			begin
4015   FD1D             
4016   FD1D 8D EF       				bsr	b_129					;#08 -> $0F
4017   FD1F BD FC 94    b_135				jsr	check_adv				;Advance: - if Triggered
4018   FD22 2B CD       				bmi	b_133
4019   FD24 96 85       				ldaa	switch_masked
4020   FD26 85 04       				bita	#$04
4021   FD28             			neend
4021   FD28             
4021   FD28             
4021   FD28~            			neend
4021   FD28~            			neend
4021   FD28~            			neend
4021   FD28             
4021   FD28 27 F3       
4021   FD2A             
4021   FD2A~            			neend
4021   FD2A~            			neend
4021   FD2A             
4022   FD2A 8D E7       			bsr	b_12D
4023   FD2C 26 F1       			bne	b_135
4024   FD2E 86 99       adjust_func		ldaa	#$99
4025   FD30 BD FC 9F    			jsr	check_aumd				;AUMD: + if Manual-Down
4026   FD33             			ifmi
4026   FD33             
4026   FD33 2A FE       
4027   FD35 86 01       				ldaa	#$01
4028   FD37             			endif
4028   FD37             
4028   FD37             
4028   FD37             
4028   FD37             
4028   FD37             
4028   FD37~            			endif
4028   FD37~            			endif
4028   FD37             
4028   FD37~            			endif
4028   FD37~            			endif
4028   FD37             
4028   FD34             
4028   FD34 02          
4028   FD35             
4028   FD35             
4028   FD35~            			endif
4028   FD35~            			endif
4028   FD35~            			endif
4028   FD35             
4028   FD37             
4028   FD37~            			endif
4028   FD37~            			endif
4028   FD37             
4029   FD37 16          			tab	
4030   FD38 39          			rts
4031   FD39             
4032   FD39 86 FF       st_reset		ldaa	#$FF
4033   FD3B 97 5C       			staa	wave_p1_b0
4034   FD3D 97 5E       			staa	wave_p2_b0
4035   FD3F BD E9 7C    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
4036   FD42 50          			.db 	$50
4037   FD43 7E E7 30    			jmp	reset					;Goto Reset Entry
4038   FD46             
4039   FD46             ;************************************************************
4040   FD46             ;* Self Test Audit and Adjustment Handlers:
4041   FD46             ;* 	These routines are in charge of the functions shown
4042   FD46             ;* 	in the self test routines. Each one handles one or
4043   FD46             ;*    more functions to retrieve and display the proper 
4044   FD46             ;*    data on the various displays.
4045   FD46             ;************************************************************			
4046   FD46 FE D0 00    fn_gameid		ldx	gr_gamenumber
4047   FD49 DF 4D       			stx	score_p1_b0+1			;Game # -> Player 1 Display
4048   FD4B B6 D0 02    			ldaa	gr_romrevision
4049   FD4E 97 4F       			staa	score_p1_b0+3			;ROM Rev -> Player Display
4050   FD50 39          			rts	   
4051   FD51             
4052   FD51 C0 1E       fn_gameaud		subb	#$1E
4053   FD53 58          fn_sysaud		aslb	
4054   FD54 58          			aslb	
4055   FD55 CE 00 FE    			ldx	#$00FE
4056   FD58 BD EE 8C    			jsr	xplusb				;X = X + B)
4057   FD5B BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
4058   FD5E 97 4E       			staa	score_p1_b0+2
4059   FD60 BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
4060   FD63 97 4F       			staa	score_p1_b0+3			;Show Data in Player 1 Display
4061   FD65 39          			rts
4062   FD66             
4063   FD66 BD FA B1    fn_hstd		jsr	show_hstd				;Puts HSTD in All Player Displays(Buffer 1)
4064   FD69 86 7F       			ldaa	#$7F
4065   FD6B 97 78       			staa	dmask_p1
4066   FD6D 39          			rts
4067   FD6E             
4068   FD6E CE 01 81    fn_replay		ldx	#adj_backuphstd			;Offset to Replay Levels
4069   FD71 C0 0D       			subb	#$0D					;Subtract 13 to get correct base
4070   FD73 58          			aslb						;*2  2 bytes data per level(replay score)
4071   FD74 BD EE 8C    			jsr	xplusb				;X = X + B)
4072   FD77 DF EF       			stx	vm_pc					;Pointer to Current Replay Level Data
4073   FD79 58          			aslb						;*2  4 bytes data per level(times exceeded)
4074   FD7A CE 01 4E    			ldx	#aud_hstdcredits			;Offset to Replay Level Times Exceeded
4075   FD7D BD EE 8C    			jsr	xplusb				;X = X + B)
4076   FD80 BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
4077   FD83 97 52       			staa	score_p2_b0+2			;Show Times Exceeded MSD's in Player 2 Display
4078   FD85 BD EE 92    			jsr	cmosinc_a				;CMOS,X++ -> A
4079   FD88 97 53       			staa	score_p2_b0+3			;Show Times Exceeded LSD's in Player 2 Display
4080   FD8A 5F          			clrb	
4081   FD8B             			begin
4081   FD8B             
4082   FD8B DE EF       				ldx	vm_pc					;reload current offset * 2
4083   FD8D 8D 14       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
4084   FD8F 16          				tab	
4085   FD90 BD EC 32    				jsr	split_ab				;Shift the digits around for display
4086   FD93 84 F0       				anda	#$F0					;Blank MSD (10,000,000 digit)
4087   FD95 D7 4C       				stab	score_p1_b0				;Show it.
4088   FD97 97 4D       				staa	score_p1_b0+1			;Player 1 Display
4089   FD99 5F          				clrb	
4090   FD9A D7 4E       				stab	score_p1_b0+2			;Lay down some Zero's
4091   FD9C D7 4F       				stab	score_p1_b0+3			
4092   FD9E BD FD 1F    				jsr	b_135
4093   FDA1             			loopend
4093   FDA1             
4093   FDA1             
4093   FDA1~            			loopend
4093   FDA1~            			loopend
4093   FDA1~            			loopend
4093   FDA1             
4093   FDA1 20 E8       
4093   FDA3             
4093   FDA3~            			loopend
4093   FDA3~            			loopend
4093   FDA3             
4094   FDA3             
4095   FDA3 8D 36       cmos_add_d		bsr	cmos_a				;CMOS, X -> A )
4096   FDA5 1B          			aba	
4097   FDA6 19          			daa	
4098   FDA7 BD EE EE    			jsr	a_cmosinc				;A -> CMOS,X++)
4099   FDAA 20 32       			bra	fn_ret				;dex,dex,tsta,rts.
4100   FDAC             
4101   FDAC 5F          fn_pricec		clrb	
4102   FDAD             			begin
4102   FDAD             
4103   FDAD             				begin
4103   FDAD             
4104   FDAD CE 01 AD    					ldx	#adj_pricecontrol			;Standard/Custom Pricing Control
4105   FDB0 BD FD A3    					jsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
4106   FDB3 C6 99       					ldab	#$99
4107   FDB5 81 09       					cmpa	#$09
4108   FDB7             				csend					;Custom Pricing = 09?
4108   FDB7             
4108   FDB7             
4108   FDB7~            				csend					;Custom Pricing = 09?
4108   FDB7~            				csend					;Custom Pricing = 09?
4108   FDB7~            				csend					;Custom Pricing = 09?
4108   FDB7             
4108   FDB7 24 F4       
4108   FDB9             
4108   FDB9~            				csend					;Custom Pricing = 09?
4108   FDB9~            				csend					;Custom Pricing = 09?
4108   FDB9             
4109   FDB9 97 4F       				staa	score_p1_b0+3			;Player 1 Display
4110   FDBB 16          				tab	
4111   FDBC             				ifne
4111   FDBC             
4111   FDBC 27 FE       
4112   FDBE BD EF 0F    					jsr	loadpricing
4113   FDC1             				endif
4113   FDC1             
4113   FDC1             
4113   FDC1             
4113   FDC1             
4113   FDC1             
4113   FDC1~            				endif
4113   FDC1~            				endif
4113   FDC1             
4113   FDC1~            				endif
4113   FDC1~            				endif
4113   FDC1             
4113   FDBD             
4113   FDBD 03          
4113   FDBE             
4113   FDBE             
4113   FDBE~            				endif
4113   FDBE~            				endif
4113   FDBE~            				endif
4113   FDBE             
4113   FDC1             
4113   FDC1~            				endif
4113   FDC1~            				endif
4113   FDC1             
4114   FDC1 BD FD 1F    				jsr	b_135
4115   FDC4             			loopend
4115   FDC4             
4115   FDC4             
4115   FDC4~            			loopend
4115   FDC4~            			loopend
4115   FDC4~            			loopend
4115   FDC4             
4115   FDC4 20 E7       
4115   FDC6             
4115   FDC6~            			loopend
4115   FDC6~            			loopend
4115   FDC6             
4116   FDC6             
4117   FDC6 CE 01 AF    fn_prices		ldx	#cmos_leftcoinmult		;Left Coin Slot Multiplier
4118   FDC9 C0 14       			subb	#$14
4119   FDCB 58          			aslb	
4120   FDCC BD EE 8C    			jsr	xplusb				;X = X + B)
4121   FDCF 8D 0A       			bsr	cmos_a				;CMOS, X -> A )
4122   FDD1 97 4F       			staa	score_p1_b0+3			;Player 1 Display
4123   FDD3 B6 01 AE    			ldaa	adj_pricecontrol+1		;Standard/Custom Pricing Control LSD
4124   FDD6 84 0F       			anda	#$0F
4125   FDD8 27 0B       			beq	fn_cdtbtn
4126   FDDA 39          			rts 
4127   FDDB             
4128   FDDB BD EE 92    cmos_a		jsr	cmosinc_a				;CMOS,X++ -> A
4129   FDDE 09          fn_ret		dex	
4130   FDDF 09          			dex	
4131   FDE0 4D          			tsta	
4132   FDE1 39          			rts
4133   FDE2             
4134   FDE2 CE 01 AB    fn_credit		ldx	#adj_max_credits			;RAM Pointer Base
4135   FDE5 5F          fn_cdtbtn		clrb
4136   FDE6             			begin
4136   FDE6             
4137   FDE6 8D BB       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
4138   FDE8 97 4F       				staa	score_p1_b0+3			;Player 1 Display
4139   FDEA BD FD 1F    				jsr	b_135
4140   FDED             			loopend
4140   FDED             
4140   FDED             
4140   FDED~            			loopend
4140   FDED~            			loopend
4140   FDED~            			loopend
4140   FDED             
4140   FDED 20 F7       
4140   FDEF             
4140   FDEF~            			loopend
4140   FDEF~            			loopend
4140   FDEF             
4141   FDEF             
4142   FDEF CE 01 8B    fn_adj		ldx	#adj_matchenable			;RAM Pointer Base
4143   FDF2 C0 1A       			subb	#$1A
4144   FDF4 58          			aslb	
4145   FDF5 BD EE 8C    			jsr	xplusb				;X = X + B)
4146   FDF8 20 EB       			bra	fn_cdtbtn
4147   FDFA             			
4148   FDFA CE 01 70    fn_command		ldx	#aud_command			;RAM Pointer Base
4149   FDFD 20 E6       			bra	fn_cdtbtn
4150   FDFF             
4151   FDFF             ;****************************************************
4152   FDFF             ;* Main Display Test Routine - Cycles all score 
4153   FDFF             ;*                             displays through 0-9
4154   FDFF             ;****************************************************			
4155   FDFF             st_display		begin
4155   FDFF             
4156   FDFF 4F          				clra
4157   FE00             				begin	
4157   FE00             
4158   FE00             					begin
4158   FE00             
4159   FE00 CE 00 4C    						ldx	#score_p1_b0
4160   FE03 C6 14       						ldab	#$14
4161   FE05 BD F8 A9    						jsr	write_range				;RAM $38-$5B = A: Clear all Displays
4162   FE08 36          						psha
4163   FE09 85 01       						bita	#$01
4164   FE0B             						ifne
4164   FE0B             
4164   FE0B 27 FE       
4165   FE0D 86 CF       							ldaa	#$CF
4166   FE0F             						else
4166   FE0F             
4166   FE0F             
4166   FE0F             
4166   FE0F             
4166   FE0C             
4166   FE0C             
4166   FE0C             
4166   FE0C~            						else
4166   FE0C~            						else
4166   FE0C~            						else
4166   FE0C~            						else
4166   FE0C             
4166   FE0C~            						else
4166   FE0C~            						else
4166   FE0C~            						else
4166   FE0C~            						else
4166   FE0C             
4166   FE0C             
4166   FE0C 04          
4166   FE0F             
4166   FE0F 20 FE       
4166   FE11             
4166   FE11             
4166   FE11             
4166   FE11~            						else
4166   FE11~            						else
4166   FE11~            						else
4166   FE11~            						else
4166   FE11~            						else
4166   FE11             
4166   FE11~            						else
4166   FE11~            						else
4166   FE11             
4166   FE11~            						else
4166   FE11~            						else
4166   FE11             
4167   FE11 86 2C       							ldaa	#$2C
4168   FE13             						endif
4168   FE13             
4168   FE13             
4168   FE13             
4168   FE13             
4168   FE13             
4168   FE13~            						endif
4168   FE13~            						endif
4168   FE13             
4168   FE13~            						endif
4168   FE13~            						endif
4168   FE13             
4168   FE10             
4168   FE10 02          
4168   FE11             
4168   FE11             
4168   FE11~            						endif
4168   FE11~            						endif
4168   FE11~            						endif
4168   FE11             
4168   FE13             
4168   FE13~            						endif
4168   FE13~            						endif
4168   FE13             
4169   FE13 C6 0C       						ldab	#$0C
4170   FE15 CE 00 60    						ldx	#alpha_b0
4171   FE18 BD F8 A9    						jsr	write_range
4172   FE1B 32          						pula
4173   FE1C BD E9 7C    						jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
4174   FE1F 18          						.db	$18
4175   FE20 BD FC 81    						jsr	do_aumd				;Check Auto/Manual, return + if Manual
4176   FE23             					miend
4176   FE23             
4176   FE23             
4176   FE23~            					miend
4176   FE23~            					miend
4176   FE23~            					miend
4176   FE23             
4176   FE23 2A DB       
4176   FE25             
4176   FE25~            					miend
4176   FE25~            					miend
4176   FE25             
4177   FE25 73 00 7C    					com	comma_flags				;Toggle commas on each count
4178   FE28 8B 11       					adda	#$11					;Add one to each digit
4179   FE2A 19          					daa	
4180   FE2B             				csend
4180   FE2B             
4180   FE2B             
4180   FE2B~            				csend
4180   FE2B~            				csend
4180   FE2B~            				csend
4180   FE2B             
4180   FE2B 24 D3       
4180   FE2D             
4180   FE2D~            				csend
4180   FE2D~            				csend
4180   FE2D             
4181   FE2D D6 E9       				ldab	flags_selftest
4182   FE2F             			miend				;Clear All Displays
4182   FE2F             
4182   FE2F             
4182   FE2F~            			miend				;Clear All Displays
4182   FE2F~            			miend				;Clear All Displays
4182   FE2F~            			miend				;Clear All Displays
4182   FE2F             
4182   FE2F 2A CE       
4182   FE31             
4182   FE31~            			miend				;Clear All Displays
4182   FE31~            			miend				;Clear All Displays
4182   FE31             
4183   FE31 39          			rts
4184   FE32             
4185   FE32             ;****************************************************
4186   FE32             ;* Main Sound Routine - Toggles each of the sound 
4187   FE32             ;*                      command line individually.
4188   FE32             ;****************************************************			
4189   FE32 BD F9 11    st_sound		jsr	clear_displays			;Blank all Player Displays (buffer 0)
4190   FE35             			begin
4190   FE35             
4191   FE35 4F          				clra	
4192   FE36 97 7C       				staa	comma_flags				;Turn off commas
4193   FE38 97 5C       				staa	wave_p1_b0				;Match/Ball in Play Display = 00
4194   FE3A 86 FE       				ldaa	#$FE					;Initial Sound Command $1E
4195   FE3C             				begin
4195   FE3C             
4196   FE3C             					begin
4196   FE3C             
4197   FE3C C6 FF       						ldab	#$FF
4198   FE3E F7 21 00    						stab	pia_sound_data			;Sound Blanking
4199   FE41 BD E9 7C    						jsr	addthread				;Delay enough for sound board to stop
4200   FE44 00          						.db	$00	
4201   FE45 B7 21 00    						staa	pia_sound_data			;Commands.. $1E,$1D,$1B,$17,$0F
4202   FE48 BD E9 7C    						jsr	addthread				;Delay $40 IRQ's
4203   FE4B 40          						.db	$40
4204   FE4C BD FC 81    						jsr	do_aumd				;Either repeat same sound or move on to next
4205   FE4F             					miend
4205   FE4F             
4205   FE4F             
4205   FE4F~            					miend
4205   FE4F~            					miend
4205   FE4F~            					miend
4205   FE4F             
4205   FE4F 2A EB       
4205   FE51             
4205   FE51~            					miend
4205   FE51~            					miend
4205   FE51             
4206   FE51 7C 00 5C    					inc	wave_p1_b0				;Increment Match/Ball in Play Display
4207   FE54 48          					asla	
4208   FE55 4C          					inca	
4209   FE56             				plend
4209   FE56             
4209   FE56             
4209   FE56~            				plend
4209   FE56~            				plend
4209   FE56~            				plend
4209   FE56             
4209   FE56 2B E4       
4209   FE58             
4209   FE58~            				plend
4209   FE58~            				plend
4209   FE58             
4210   FE58 D6 E9       				ldab	flags_selftest
4211   FE5A             			miend					;Start Over
4211   FE5A             
4211   FE5A             
4211   FE5A~            			miend					;Start Over
4211   FE5A~            			miend					;Start Over
4211   FE5A~            			miend					;Start Over
4211   FE5A             
4211   FE5A 2A D9       
4211   FE5C             
4211   FE5C~            			miend					;Start Over
4211   FE5C~            			miend					;Start Over
4211   FE5C             
4212   FE5C 39          			rts
4213   FE5D             
4214   FE5D             ;****************************************************
4215   FE5D             ;* Main Lamp Routine - Flashes all lamps 
4216   FE5D             ;****************************************************			
4217   FE5D C6 AA       st_lamp		ldab	#$AA
4218   FE5F D7 5C       			stab	wave_p1_b0				;Match/Ball in Play Display Buffer 0
4219   FE61 D7 0F       			stab	test_lamptimer
4220   FE63             			begin
4220   FE63             
4221   FE63             				begin
4221   FE63             
4222   FE63 96 10       					ldaa	lampbuffer0
4223   FE65 43          					coma	
4224   FE66 CE 00 10    					ldx	#lampbuffer0
4225   FE69 C6 0C       					ldab	#$0C
4226   FE6B BD F8 A9    					jsr	write_range				;Store A from $0010-0017
4227   FE6E BD E9 7C    					jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
4228   FE71 1B          					.db	$1B
4229   FE72 7A 00 0F    					dec  	test_lamptimer
4230   FE75             				eqend
4230   FE75             
4230   FE75             
4230   FE75~            				eqend
4230   FE75~            				eqend
4230   FE75~            				eqend
4230   FE75             
4230   FE75 26 EC       
4230   FE77             
4230   FE77~            				eqend
4230   FE77~            				eqend
4230   FE77             
4231   FE77 D6 E9       				ldab  flags_selftest			;Auto-Cycle??
4232   FE79             			miend
4232   FE79             
4232   FE79             
4232   FE79~            			miend
4232   FE79~            			miend
4232   FE79~            			miend
4232   FE79             
4232   FE79 2A E8       
4232   FE7B             
4232   FE7B~            			miend
4232   FE7B~            			miend
4232   FE7B             
4233   FE7B 39          			rts 
4234   FE7C             
4235   FE7C             ;****************************************************
4236   FE7C             ;* Auto-Cycle Routine - This is the timing thread to
4237   FE7C             ;*                      allow each test routine to 
4238   FE7C             ;*                      repeat indefinitely.
4239   FE7C             ;****************************************************			
4240   FE7C BD FC AA    st_autocycle	jsr  	st_init
4241   FE7F 5A          			decb 
4242   FE80 D7 E9       			stab  flags_selftest
4243   FE82             			begin
4243   FE82             
4244   FE82 BD FD FF    				jsr  	st_display    		;Clear All Displays
4245   FE85 7F 00 5E    				clr  	wave_p2_b0
4246   FE88 8D A8       				bsr  	st_sound
4247   FE8A 7C 00 5E    				inc  	wave_p2_b0
4248   FE8D 8D CE       				bsr  	st_lamp
4249   FE8F 7C 00 5E    				inc  	wave_p2_b0
4250   FE92 8D 08       				bsr  	st_solenoid
4251   FE94 CE 01 4A    				ldx  	#aud_autocycles		;Audit: Auto-Cycles
4252   FE97 BD F7 E7    				jsr  	ptrx_plus_1 		;Add 1 to data at X
4253   FE9A             			loopend
4253   FE9A             
4253   FE9A             
4253   FE9A~            			loopend
4253   FE9A~            			loopend
4253   FE9A~            			loopend
4253   FE9A             
4253   FE9A 20 E6       
4253   FE9C             
4253   FE9C~            			loopend
4253   FE9C~            			loopend
4253   FE9C             
4254   FE9C             
4255   FE9C             ;****************************************************
4256   FE9C             ;* Main Solenoid Routine - Steps through each solenoid 
4257   FE9C             ;****************************************************			
4258   FE9C 86 F9       st_solenoid		ldaa	#$F9
4259   FE9E BD EA 83    			jsr	solbuf
4260   FEA1             			begin
4260   FEA1             
4261   FEA1 C6 01       				ldab  #$01
4262   FEA3 D7 5C       				stab 	wave_p1_b0	 
4263   FEA5 86 20       				ldaa 	#$20
4264   FEA7             				begin
4264   FEA7             
4265   FEA7             					begin
4265   FEA7             
4266   FEA7 85 08       						bita	#$08
4267   FEA9             						ifne
4267   FEA9             
4267   FEA9 27 FE       
4268   FEAB 8D 1F       							bsr   solenoid_wait
4269   FEAD             						else
4269   FEAD             
4269   FEAD             
4269   FEAD             
4269   FEAD             
4269   FEAA             
4269   FEAA             
4269   FEAA             
4269   FEAA~            						else
4269   FEAA~            						else
4269   FEAA~            						else
4269   FEAA~            						else
4269   FEAA             
4269   FEAA~            						else
4269   FEAA~            						else
4269   FEAA~            						else
4269   FEAA~            						else
4269   FEAA             
4269   FEAA             
4269   FEAA 04          
4269   FEAD             
4269   FEAD 20 FE       
4269   FEAF             
4269   FEAF             
4269   FEAF             
4269   FEAF~            						else
4269   FEAF~            						else
4269   FEAF~            						else
4269   FEAF~            						else
4269   FEAF~            						else
4269   FEAF             
4269   FEAF~            						else
4269   FEAF~            						else
4269   FEAF             
4269   FEAF~            						else
4269   FEAF~            						else
4269   FEAF             
4270   FEAF BD EA 83    							jsr  	solbuf			;Turn On Outhole Solenoid
4271   FEB2 BD E9 7C    							jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
4272   FEB5 20          							.db	$20
4273   FEB6             							
4274   FEB6             						endif
4274   FEB6             
4274   FEB6             
4274   FEB6             
4274   FEB6             
4274   FEB6             
4274   FEB6~            						endif
4274   FEB6~            						endif
4274   FEB6             
4274   FEB6~            						endif
4274   FEB6~            						endif
4274   FEB6             
4274   FEAE             
4274   FEAE 07          
4274   FEAF             
4274   FEAF             
4274   FEAF~            						endif
4274   FEAF~            						endif
4274   FEAF~            						endif
4274   FEAF             
4274   FEB6             
4274   FEB6~            						endif
4274   FEB6~            						endif
4274   FEB6             
4275   FEB6 BD E9 7C    						jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
4276   FEB9 20          						.db	$20
4277   FEBA BD FC 81    						jsr  	do_aumd			;AUMD: + if Manual-Down
4278   FEBD             					miend
4278   FEBD             
4278   FEBD             
4278   FEBD~            					miend
4278   FEBD~            					miend
4278   FEBD~            					miend
4278   FEBD             
4278   FEBD 2A E8       
4278   FEBF             
4278   FEBF~            					miend
4278   FEBF~            					miend
4278   FEBF             
4279   FEBF 4C          					inca
4280   FEC0 7C 00 5C    					inc	wave_p1_b0
4281   FEC3 81 09       					cmpa	#$09
4282   FEC5             				eqend
4282   FEC5             
4282   FEC5             
4282   FEC5~            				eqend
4282   FEC5~            				eqend
4282   FEC5~            				eqend
4282   FEC5             
4282   FEC5 26 E0       
4282   FEC7             
4282   FEC7~            				eqend
4282   FEC7~            				eqend
4282   FEC7             
4283   FEC7 D6 E9       				ldab  flags_selftest			;Auto-Cycle??
4284   FEC9             			miend
4284   FEC9             
4284   FEC9             
4284   FEC9~            			miend
4284   FEC9~            			miend
4284   FEC9~            			miend
4284   FEC9             
4284   FEC9 2A D6       
4284   FECB             
4284   FECB~            			miend
4284   FECB~            			miend
4284   FECB             
4285   FECB 39          			rts  
4286   FECC             
4287   FECC             solenoid_wait
4288   FECC             			begin
4288   FECC             
4289   FECC D6 B2       				ldab   solenoid_counter
4290   FECE             			eqend
4290   FECE             
4290   FECE             
4290   FECE~            			eqend
4290   FECE~            			eqend
4290   FECE~            			eqend
4290   FECE             
4290   FECE 26 FC       
4290   FED0             
4290   FED0~            			eqend
4290   FED0~            			eqend
4290   FED0             
4291   FED0 86 08       			ldaa   #08
4292   FED2 C6 0E       			ldab   #0E
4293   FED4 37          			pshb  
4294   FED5 7E EA B1    			jmp   set_sol_counter
4295   FED8             
4296   FED8             ;****************************************************
4297   FED8             ;* Main Switch Routine - Scans for closed switches
4298   FED8             ;****************************************************			
4299   FED8             st_switch		begin
4299   FED8             
4300   FED8 86 FF       				ldaa	#$FF
4301   FEDA 97 5C       				staa  wave_p1_b0
4302   FEDC BD E9 7C    				jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
4303   FEDF 00          				.db	$00
4304   FEE0 B6 D0 4D    				ldaa 	gr_lastswitch		;Game ROM: Last Switch Used
4305   FEE3 4A          				deca 
4306   FEE4 36          st_swnext			psha
4307   FEE5 FE D0 51    				ldx  	gr_switchtable_ptr
4308   FEE8 C6 03       				ldab	#$03
4309   FEEA             				begin
4309   FEEA             
4310   FEEA 4A          					deca					;Switchtable entries are 3 bytes each
4311   FEEB 2B 05       					bmi	st_dosw		
4312   FEED BD EE 8C    					jsr	xplusb
4313   FEF0             				loopend
4313   FEF0             
4313   FEF0             
4313   FEF0~            				loopend
4313   FEF0~            				loopend
4313   FEF0~            				loopend
4313   FEF0             
4313   FEF0 20 F8       
4313   FEF2             
4313   FEF2~            				loopend
4313   FEF2~            				loopend
4313   FEF2             
4314   FEF2 A6 00       st_dosw			ldaa	$00,X
4315   FEF4 84 10       				anda	#$10
4316   FEF6 97 00       				staa	vm_reg_a
4317   FEF8 32          				pula
4318   FEF9 CE 00 85    				ldx	#switch_masked
4319   FEFC BD F2 12    				jsr  	unpack_byte    		;Unpack Switch
4320   FEFF 7D 00 00    				tst	vm_reg_a
4321   FF02             				ifeq
4321   FF02             
4321   FF02 26 FE       
4322   FF04 E5 00       					bitb 	$00,X
4323   FF06 26 18       					bne	st_swe
4324   FF08             				else
4324   FF08             
4324   FF08             
4324   FF08             
4324   FF08             
4324   FF03             
4324   FF03             
4324   FF03             
4324   FF03~            				else
4324   FF03~            				else
4324   FF03~            				else
4324   FF03~            				else
4324   FF03             
4324   FF03~            				else
4324   FF03~            				else
4324   FF03~            				else
4324   FF03~            				else
4324   FF03             
4324   FF03             
4324   FF03 06          
4324   FF08             
4324   FF08 20 FE       
4324   FF0A             
4324   FF0A             
4324   FF0A             
4324   FF0A~            				else
4324   FF0A~            				else
4324   FF0A~            				else
4324   FF0A~            				else
4324   FF0A~            				else
4324   FF0A             
4324   FF0A~            				else
4324   FF0A~            				else
4324   FF0A             
4324   FF0A~            				else
4324   FF0A~            				else
4324   FF0A             
4325   FF0A E5 00       					bitb 	$00,X
4326   FF0C 27 12       					beq   st_swe
4327   FF0E             				endif
4327   FF0E             
4327   FF0E             
4327   FF0E             
4327   FF0E             
4327   FF0E             
4327   FF0E~            				endif
4327   FF0E~            				endif
4327   FF0E             
4327   FF0E~            				endif
4327   FF0E~            				endif
4327   FF0E             
4327   FF09             
4327   FF09 04          
4327   FF0A             
4327   FF0A             
4327   FF0A~            				endif
4327   FF0A~            				endif
4327   FF0A~            				endif
4327   FF0A             
4327   FF0E             
4327   FF0E~            				endif
4327   FF0E~            				endif
4327   FF0E             
4328   FF0E 36          				psha  
4329   FF0F 4C          				inca  
4330   FF10 C6 01       				ldab  #01
4331   FF12 BD F8 80    				jsr   divide_ab
4332   FF15 97 5C       				staa   wave_p1_b0
4333   FF17 4F          				clra  
4334   FF18 BD EC 3B    				jsr   isnd_once
4335   FF1B 32          				pula  
4336   FF1C BD E9 7C    				jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
4337   FF1F 40          				.db	$40
4338   FF20 4A          st_swe			deca  
4339   FF21             			plend
4339   FF21             
4339   FF21             
4339   FF21~            			plend
4339   FF21~            			plend
4339   FF21~            			plend
4339   FF21             
4339   FF21 2B B5       
4339   FF23             
4339   FF23~            			plend
4339   FF23~            			plend
4339   FF23             
4340   FF23 20 BF       			bra 	st_swnext
4341   FF25             
4342   FF25             ;**********************************************************************************
4343   FF25             ;* NMI Routines - This section of code is run only when the 
4344   FF25             ;*                diagnostic switch on the CPU board is pressed.
4345   FF25             ;*                It will test the hardware and report any errors
4346   FF25             ;*                via the LED display on the CPU board. If all tests
4347   FF25             ;*                are passed, the LED display will show '0' and
4348   FF25             ;*                the code jumps to the normal power-up routines.
4349   FF25             ;*
4350   FF25             ;* Errors are as Follows:
4351   FF25             ;*
4352   FF25             ;*      0 - Test Passed
4353   FF25             ;*      1 - IC13 RAM Fault (Most Significant Nybble)
4354   FF25             ;*      2 - IC16 RAM Fault (Least Significant Nybble)
4355   FF25             ;*      3 - IC17 ROM 2 Fault (Location $F000-$FFFF)
4356   FF25             ;*      4 - IC14 ROM 1 Fault (Location $E000-$EFFF)
4357   FF25             ;*      5 - IC20 ROM 0 Fault (Location $D000-$DFFF)
4358   FF25             ;*      6 - Not Used
4359   FF25             ;*      7 - Not Used
4360   FF25             ;*      8 - IC19 CMOS RAM Fault or Memory Protect Failure
4361   FF25             ;*      9 - Coin Door Closed or Memory Protect Failure or IC19 CMOS RAM Fault
4362   FF25             ;**********************************************************************************
4363   FF25 C6 20       rambad		ldab	#$20
4364   FF27 A8 00       			eora	$00,X
4365   FF29 84 F0       			anda	#$F0
4366   FF2B 27 52       			beq	diag_showerror
4367   FF2D C6 10       			ldab	#$10
4368   FF2F 20 4E       			bra	diag_showerror
4369   FF31             
4370   FF31             ;*******************************************************************
4371   FF31             ;* Main NMI Entry 
4372   FF31             ;*******************************************************************
4373   FF31 0F          diag			sei	
4374   FF32 CE 28 00    			ldx	#pia_disp_digit_data
4375   FF35 6F 01       			clr	$01,X
4376   FF37 86 F0       			ldaa	#$F0
4377   FF39 A7 00       			staa	$00,X
4378   FF3B C6 3C       			ldab	#$3C
4379   FF3D E7 01       			stab	$01,X
4380   FF3F A7 00       			staa	$00,X			;Blank Diagnostic Display
4381   FF41 4F          			clra	
4382   FF42             			begin
4382   FF42             
4383   FF42 CE 10 00    				ldx	#$1000
4384   FF45             				begin					;\
4384   FF45             
4385   FF45 A7 00       					staa	$00,X			;|
4386   FF47 08          					inx				;| Clear RAM $1000-13FF
4387   FF48 8C 14 00    					cpx	#$1400		;|
4388   FF4B             				eqend					;/
4388   FF4B             
4388   FF4B             
4388   FF4B~            				eqend					;/
4388   FF4B~            				eqend					;/
4388   FF4B~            				eqend					;/
4388   FF4B             
4388   FF4B 26 F8       
4388   FF4D             
4388   FF4D~            				eqend					;/
4388   FF4D~            				eqend					;/
4388   FF4D             
4389   FF4D 35          				txs	
4390   FF4E             				begin
4390   FF4E             
4391   FF4E 09          					dex	
4392   FF4F A1 00       					cmpa	$00,X			;Test
4393   FF51 26 D2       					bne	rambad		;Bad RAM
4394   FF53 8C 10 00    					cpx	#$1000
4395   FF56             				eqend
4395   FF56             
4395   FF56             
4395   FF56~            				eqend
4395   FF56~            				eqend
4395   FF56~            				eqend
4395   FF56             
4395   FF56 26 F6       
4395   FF58             
4395   FF58~            				eqend
4395   FF58~            				eqend
4395   FF58             
4396   FF58 43          				coma					;Test with #$FF
4397   FF59             			eqend
4397   FF59             
4397   FF59             
4397   FF59~            			eqend
4397   FF59~            			eqend
4397   FF59~            			eqend
4397   FF59             
4397   FF59 26 E7       
4397   FF5B             
4397   FF5B~            			eqend
4397   FF5B~            			eqend
4397   FF5B             
4398   FF5B 86 03       			ldaa	#$03
4399   FF5D 97 BA       			staa	temp2
4400   FF5F C6 20       			ldab	#$20					;Begin ROM Test
4401   FF61 CE FF FF    			ldx	#$FFFF
4402   FF64             			begin
4402   FF64             
4403   FF64 DF B8       				stx	temp1
4404   FF66 CB 10       				addb	#$10
4405   FF68 7A 00 BA    				dec	temp2
4406   FF6B 2B 18       				bmi	diag_ramtest
4407   FF6D 96 B8       				ldaa	temp1					
4408   FF6F 80 10       				suba	#$10
4409   FF71 97 B8       				staa	temp1					;Set our stopping address
4410   FF73 4F          				clra	
4411   FF74             				begin
4411   FF74             
4412   FF74 A9 00       					adca	$00,X					;Add with carry!!
4413   FF76 09          					dex	
4414   FF77 9C B8       					cpx	temp1
4415   FF79             				eqend
4415   FF79             
4415   FF79             
4415   FF79~            				eqend
4415   FF79~            				eqend
4415   FF79~            				eqend
4415   FF79             
4415   FF79 26 F9       
4415   FF7B             
4415   FF7B~            				eqend
4415   FF7B~            				eqend
4415   FF7B             
4416   FF7B 81 80       				cmpa	#$80					;Done changing data?
4417   FF7D             			neend						;CSUM must be = #00
4417   FF7D             
4417   FF7D             
4417   FF7D~            			neend						;CSUM must be = #00
4417   FF7D~            			neend						;CSUM must be = #00
4417   FF7D~            			neend						;CSUM must be = #00
4417   FF7D             
4417   FF7D 27 E5       
4417   FF7F             
4417   FF7F~            			neend						;CSUM must be = #00
4417   FF7F~            			neend						;CSUM must be = #00
4417   FF7F             
4418   FF7F             			;fall through on error, B contains error code
4419   FF7F             			
4420   FF7F 53          diag_showerror	comb	
4421   FF80 F7 28 00    			stab	pia_disp_digit_data		;Dump Error to Display
4422   FF83 20 FE       tightloop		bra	tightloop				;Stay Here forever
4423   FF85             
4424   FF85             
4425   FF85             ;Define a single CMOS location to write test
4426   FF85             cmos_byteloc	=	$01BB
4427   FF85             
4428   FF85 C6 90       diag_ramtest	ldab	#$90					;Begin CMOS RAM Test
4429   FF87 B6 01 BB    			ldaa	cmos_byteloc			;Test a single byte
4430   FF8A 7C 01 BB    			inc	cmos_byteloc
4431   FF8D B1 01 BB    			cmpa	cmos_byteloc
4432   FF90 27 ED       			beq	diag_showerror			;Wrong
4433   FF92 C6 80       			ldab	#$80					;Backup CMOS data now
4434   FF94 CE 12 00    			ldx	#$1200
4435   FF97 DF B8       			stx	temp1
4436   FF99 CE 01 00    			ldx	#cmos_base
4437   FF9C 8D 2F       			bsr	block_copy					;Copy Block from X -> temp1, Length = B
4438   FF9E 86 F1       			ldaa	#$F1
4439   FFA0 97 BC       			staa	temp3
4440   FFA2             			begin				
4440   FFA2             
4441   FFA2 CE 01 00    				ldx	#cmos_base
4442   FFA5 96 BC       				ldaa	temp3
4443   FFA7             				begin
4443   FFA7             
4444   FFA7 A7 00       					staa	$00,X
4445   FFA9 8D 43       					bsr	adjust_a
4446   FFAB             				eqend
4446   FFAB             
4446   FFAB             
4446   FFAB~            				eqend
4446   FFAB~            				eqend
4446   FFAB~            				eqend
4446   FFAB             
4446   FFAB 26 FA       
4446   FFAD             
4446   FFAD~            				eqend
4446   FFAD~            				eqend
4446   FFAD             
4447   FFAD CE 01 00    				ldx	#cmos_base
4448   FFB0 96 BC       				ldaa	temp3
4449   FFB2             				begin
4449   FFB2             
4450   FFB2 16          					tab	
4451   FFB3 E8 00       					eorb	$00,X
4452   FFB5 C4 0F       					andb	#$0F
4453   FFB7 26 0E       					bne	cmos_error
4454   FFB9 8D 33       					bsr	adjust_a
4455   FFBB             				eqend
4455   FFBB             
4455   FFBB             
4455   FFBB~            				eqend
4455   FFBB~            				eqend
4455   FFBB~            				eqend
4455   FFBB             
4455   FFBB 26 F5       
4455   FFBD             
4455   FFBD~            				eqend
4455   FFBD~            				eqend
4455   FFBD             
4456   FFBD 7C 00 BC    				inc	temp3
4457   FFC0             			eqend
4457   FFC0             
4457   FFC0             
4457   FFC0~            			eqend
4457   FFC0~            			eqend
4457   FFC0~            			eqend
4457   FFC0             
4457   FFC0 26 E0       
4457   FFC2             
4457   FFC2~            			eqend
4457   FFC2~            			eqend
4457   FFC2             
4458   FFC2 8D 1D       			bsr	cmos_restore			;Put back original CMOS data
4459   FFC4 7E E7 30    			jmp	reset					;Goto Reset Entry, Everything OK.
4460   FFC7             
4461   FFC7 8D 18       cmos_error		bsr	cmos_restore
4462   FFC9 C6 80       			ldab	#$80
4463   FFCB 20 B2       			bra	diag_showerror
4464   FFCD             			
4465   FFCD 36          block_copy		psha	
4466   FFCE             			begin
4466   FFCE             
4467   FFCE BD EE 92    				jsr	cmosinc_a				;CMOS,X++ -> A
4468   FFD1 DF BA       				stx	temp2
4469   FFD3 DE B8       				ldx	temp1
4470   FFD5 A7 00       				staa	$00,X
4471   FFD7 08          				inx	
4472   FFD8 DF B8       				stx	temp1
4473   FFDA DE BA       				ldx	temp2
4474   FFDC 5A          				decb	
4475   FFDD             			eqend
4475   FFDD             
4475   FFDD             
4475   FFDD~            			eqend
4475   FFDD~            			eqend
4475   FFDD~            			eqend
4475   FFDD             
4475   FFDD 26 EF       
4475   FFDF             
4475   FFDF~            			eqend
4475   FFDF~            			eqend
4475   FFDF             
4476   FFDF 32          			pula	
4477   FFE0 39          			rts  
4478   FFE1             
4479   FFE1 CE 01 00    cmos_restore	ldx	#$0100
4480   FFE4 DF B8       			stx	temp1
4481   FFE6 CE 12 00    			ldx	#$1200
4482   FFE9 C6 80       			ldab	#$80
4483   FFEB 7E EF 23    			jmp	copyblock2				;Transfer Data Block at X to temp1, Length B
4484   FFEE             			
4485   FFEE 4C          adjust_a		inca	
4486   FFEF             			ifeq
4486   FFEF             
4486   FFEF 26 FE       
4487   FFF1 86 F1       				ldaa	#$F1
4488   FFF3             			endif
4488   FFF3             
4488   FFF3             
4488   FFF3             
4488   FFF3             
4488   FFF3             
4488   FFF3~            			endif
4488   FFF3~            			endif
4488   FFF3             
4488   FFF3~            			endif
4488   FFF3~            			endif
4488   FFF3             
4488   FFF0             
4488   FFF0 02          
4488   FFF1             
4488   FFF1             
4488   FFF1~            			endif
4488   FFF1~            			endif
4488   FFF1~            			endif
4488   FFF1             
4488   FFF3             
4488   FFF3~            			endif
4488   FFF3~            			endif
4488   FFF3             
4489   FFF3 08          			inx
4490   FFF4 8C 02 00    			cpx	#$0200
4491   FFF7 39          			rts	
4492   FFF8             
4493   FFF8             ;*******************************************
4494   FFF8             ;* CPU Startup/Interrupt Vectors go here.
4495   FFF8             ;*******************************************
4496   FFF8             	
4497   FFF8 D0 D0       irq_entry		.dw gr_irq_entry	;Goes to Game ROM
4498   FFFA D0 D3       swi_entry		.dw gr_swi_entry	;Goes to Game ROM 
4499   FFFC FF 31       nmi_entry		.dw diag
4500   FFFE E7 30       res_entry		.dw reset
4501   10000             
4502   10000             	.end
4503   10000             
4504   10000             ;*******************************************
4505   10000             ;* Exports for the Game ROM
4506   10000             ;*******************************************
4507   10000             
4508   10000             ;.export vm_reg_a,vm_reg_b,game_ram_2,game_ram_3,game_ram_4,game_ram_5,game_ram_6,game_ram_7,game_ram_8
4509   10000             ;.export game_ram_9,game_ram_a,game_ram_b,game_ram_c,game_ram_d,lampbuffer0,bitflags,lampbufferselect,lampbuffer1,lampflashflag
4510   10000             ;.export score_p1_b0,score_p1_b1,score_p2_b1,wave_p1_b0,wave_p1_b1,wave_p2_b0,wave_p2_b1
4511   10000             ;.export dmask_p1,dmask_p2,dmask_p3,dmask_p4,comma_flags,switch_debounced,switch_masked,switch_pending,switch_aux,switch_b4,irq_counter
4512   10000             ;.export lamp_index_word,lamp_bit,comma_data_temp,credp1p2_bufferselect,mbipp3p4_bufferselect,swap_player_displays,solenoid_address
4513   10000             ;.export solenoid_bitpos,solenoid_counter,irqcount16,switch_queue_pointer,solenoid_queue_pointer
4514   10000             ;.export temp1,temp2,temp3,sys_temp1,sys_temp2,sys_temp3,sys_temp4,sys_temp5,sw_encoded,sys_temp_w2,sys_temp_w3,thread_priority
4515   10000             ;.export unused_ram1,irqcount,vm_base,vm_nextslot,current_thread,vm_tail_thread,lamp_flash_rate,lamp_flash_count,thread_timer_byte
4516   10000             ;.export soundcount,lastsound,cur_sndflags,soundptr,soundirqcount,soundindex_com,sys_soundflags,soundindex,csound_timer,next_sndflags
4517   10000             ;.export next_sndcnt,next_sndcmd,flag_tilt,flag_gameover,flags_selftest,num_players,player_up
4518   10000             ;.export pscore_buf,vm_pc,num_tilt,minutetimer,flag_timer_bip,randomseed,x_temp_1,eb_x_temp,credit_x_temp,x_temp_2,spare_ram
4519   10000             ;.export cmos_base,cmos_csum,aud_leftcoins
4520   10000             ;.export aud_centercoins,aud_rightcoins,aud_paidcredits,aud_specialcredits,aud_replaycredits,aud_matchcredits,aud_totalcredits
4521   10000             ;.export aud_extraballs,aud_avgballtime,aud_totalballs,aud_game1,aud_game2,aud_game3,aud_game4,aud_game5,aud_game6,aud_game7
4522   10000             ;.export aud_autocycles,aud_hstdcredits,aud_replay1times,aud_replay2times,aud_replay3times,aud_replay4times,cmos_bonusunits
4523   10000             ;.export cmos_coinunits,aud_currenthstd,aud_currentcredits,aud_command,adj_cmoscsum,adj_backuphstd,adj_replay1,adj_replay2
4524   10000             ;.export adj_replay3,adj_replay4,adj_matchenable,adj_specialaward,adj_replayaward,adj_maxplumbbobtilts
4525   10000             ;.export adj_gameadjust2,adj_gameadjust3,adj_gameadjust4
4526   10000             ;.export adj_gameadjust5,adj_gameadjust6,adj_gameadjust7,adj_gameadjust8,adj_gameadjust9,adj_hstdcredits,adj_max_extraballs
4527   10000             ;.export adj_max_credits,adj_pricecontrol,cmos_leftcoinmult,cmos_centercoinmult,cmos_rightcoinmult,cmos_coinsforcredit
4528   10000             ;.export cmos_bonuscoins,cmos_minimumcoins,cmos_byteloc,switch_queue,sol_queue,score_queue,exe_buffer,p1_gamedata,p2_gamedata
4529   10000             ;.export pia_sound_data,pia_sound_ctrl,pia_comma_data,pia_comma_ctrl,pia_sol_low_data,pia_sol_low_ctrl
4530   10000             ;.export pia_sol_high_data,pia_sol_high_ctrl,pia_lamp_row_data,pia_lamp_row_ctrl,pia_lamp_col_data,pia_lamp_col_ctrl,pia_disp_digit_data
4531   10000             ;.export pia_disp_digit_ctrl,pia_disp_seg_data,pia_disp_seg_ctrl,pia_switch_return_data,pia_switch_return_ctrl
4532   10000             ;.export pia_switch_strobe_data,pia_switch_strobe_ctrl,pia_alphanum_digit_data,pia_alphanum_digit_ctrl,pia_alphanum_seg_data
4533   10000             ;.export pia_alphanum_seg_ctrl,
4534   10000             .export sys_irq_entry,show_hstd,clr_dis_masks12,solenoid_wait
4535   10000             .export reset,csum1,init_done,clear_all,main,checkswitch,time,switches,next_sw,sw_break,vm_irqcheck
4536   10000             .export flashlamp,solq,snd_queue,check_threads,nextthread,delaythread,addthread,dump_thread,killthread
4537   10000             .export newthread_sp,newthread_06,killthread_sp,kill_thread,kill_threads,check_threadid,pri_next,pri_skipme
4538   10000             .export solbuf,set_solenoid,set_ss_off,set_s_pia,set_ss_on,soladdr,hex2bitpos,comma_million,comma_thousand
4539   10000             .export update_commas,set_comma_bit,test_mask_b,isnd_pts,dsnd_pts,snd_pts,score_main,score_update
4540   10000             .export hex2dec,score2hex,sh_exit,add_points,checkreplay,get_hs_digits,b_plus10,split_ab,isnd_once,sound_sub,isnd_test
4541   10000             .export isnd_mult,snd_exit_pull,snd_exit,send_snd_save,send_snd,do_complex_snd,store_csndflg,check_sw_mask,sw_ignore
4542   10000             .export sw_active,sw_down,sw_dtime,sw_trig_yes,sw_proc,check_sw_close,to_ldx_rts,getswitch,sw_pack,pack_done
4543   10000             .export check_sw_open,sw_get_time,sw_tbl_lookup,xplusa,copy_word,setup_vm_stack,stack_done,xplusb,cmosinc_a,cmosinc_b,b_cmosinc
4544   10000             .export reset_audits,clr_ram_100,clr_ram,factory_zeroaudits,restore_hstd,a_cmosinc,copyblock,loadpricing,copyblock2
4545   10000             .export pia_ddr_data,lampbuffers,lamp_on,lamp_or,lamp_commit,lamp_done,lamp_off,lamp_and,lamp_flash,lamp_invert
4546   10000             .export lamp_eor,lamp_on_b,lamp_off_b,lamp_invert_b,lamp_on_1,lamp_off_1,lamp_invert_1,unpack_byte,lampm_clr0,lampm_buf0
4547   10000             .export lampm_f,lampm_a,lampm_b,lampm_set0,abx_ret,lampr_start,lr_ret,lampr_end
4548   10000             .export lampr_setup,lamp_left,ls_ret,lamp_right,lampm_c,lm_test,lampm_e,lampm_d,bit_switch,bit_lamp_flash,bit_lamp_buf_1,bit_lamp_buf_0,bit_lamp_buf_f
4549   10000             .export lfill_a,lfill_b,lamp_on_f,lamp_off_f
4550   10000             .export lampm_z,lampm_x,bit_main,csum2,master_vm_lookup,vm_lookup_0x,vm_lookup_1x_a,vm_lookup_1x_b,vm_lookup_2x,vm_lookup_4x,vm_lookup_5x
4551   10000             .export branch_lookup,macro_start,macro_rts,macro_go,macro_next,breg_sto,vm_control_0x,macro_pcminus100,macro_code_start
4552   10000             .export macro_special,macro_extraball,vm_control_1x, macro_x8f,macro_17,macro_x17,to_macro_go1,vm_control_2x,vm_control_3x
4553   10000             .export vm_control_4x,macro_exec,gettabledata_w,gettabledata_b,macro_getnextbyte,getx_rts,vm_control_5x,macro_ramadd,ram_sto2
4554   10000             .export to_macro_go2,macro_ramcopy,macro_set_pri,macro_delay_imm_b,dly_sto,macro_getnextword,macro_get2bytes,macro_rem_th_s
4555   10000             .export macro_rem_th_m,macro_jsr_noreturn,pc_sto2,macro_a_ram,to_getx_rts,macro_b_ram,macro_jsr_return,ret_sto,vm_control_6x
4556   10000             .export vm_control_7x,vm_control_8x,pc_sto,to_macro_go4,macro_jmp_cpu,vm_control_9x,vm_control_ax,macro_jmp_abs,vm_control_bx
4557   10000             .export ram_sto,vm_control_cx,vm_control_dx,vm_control_ex,vm_control_fx,macro_pcadd,macro_setswitch,load_sw_no,macro_clearswitch
4558   10000             .export to_macro_go3,to_macro_getnextbyte,macro_branch,branchdata,complexbranch,branch_invert,to_rts3,branch_lamp_on,test_z
4559   10000             .export branch_lamprangeoff,test_c,branch_lamprangeon,branch_tilt,ret_false,branch_gameover,ret_true,branch_lampbuf1
4560   10000             .export branch_switch,branch_and,branch_add,branch_or,branch_equal,branch_ge,branch_threadpri,branch_bitwise,to_rts4,set_logic
4561   10000             .export award_replay,award_extraball,do_eb,addcredits,addcredit2,coinlockout,checkmaxcredits
4562   10000             .export pull_ba_rts,creditq,ptrx_plus_1,ptrx_plus_a,ptrx_plus,coin_accepted,cmos_a_plus_b_cmos,divide_ab,clr_bonus_coins
4563   10000             .export dec2hex,write_range,do_game_init,add_player,initialize_game,clear_range,to_pula_rts,clear_displays,clr_dis_masks
4564   10000             .export init_player_game,setplayerbuffer,copyplayerdata,init_player_up,disp_mask,disp_clear,init_player_sys,resetplayerdata
4565   10000             .export dump_score_queue,outhole_main,saveplayertobuffer,to_copyblock,balladjust,gameover,powerup_init,set_gameover
4566   10000             .export check_hstd,hstd_nextp,set_hstd,update_hstd,hstd_adddig,wordplusbyte,to_rts1,fill_hstd_digits,send_sound
4567   10000             .export get_random,to_rts2,credit_button,has_credit,start_new_game,lesscredit,tilt_warning,do_tilt,testdata,testlists
4568   10000             .export selftest_entry,st_diagnostics,do_aumd,check_adv,check_aumd,st_init,to_clear_range,st_nexttest,to_audadj,do_audadj
4569   10000             .export show_func,adjust_func,st_reset,fn_gameid,fn_gameaud,fn_sysaud,fn_hstd,fn_replay,cmos_add_d,fn_pricec,fn_prices
4570   10000             .export cmos_a,fn_ret,fn_credit,fn_cdtbtn,fn_adj,fn_command,st_display,st_sound,st_lamp,st_autocycle,st_solenoid,st_switch
4571   10000             .export st_swnext,rambad,diag,diag_showerror,tightloop,diag_ramtest,cmos_error,block_copy,cmos_restore,adjust_a,irq_entry
4572   10000             .export swi_entry,nmi_entry,res_entry,player_ready,isnd_mult_xtasm: Number of errors = 0
