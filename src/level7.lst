0001   0000             ;*****************************************************************************
0002   0000             ;* Williams Level 7 Flipper Code
0003   0000             ;***************************************************************************
0004   0000             ;* Code copyright Williams Electronic Games Inc.
0005   0000             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006   0000             ;* For use with TASMx Assembler
0007   0000             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008   0000             ;* for more information.
0009   0000             ;* You may redistribute this file as long as this header remains intact.
0010   0000             ;***************************************************************************
0011   0000             ;* This file is set up with tab stops at 6
0012   0000             ;*****************************************************************************
0013   0000             ;* DB pointed out that this is probably a good idea.
0014   0000             .msfirst	
0015   0000             
0016   0000             #include "68logic.asm"		;68XX Logic Definitions
0001+  0000             ;***********************************************
0002+  0000             ;* 680X Style Logical Instruction Macros       *
0003+  0000             ;* For use with TASMx Assembler                *
0004+  0000             ;* Written by Jess M. Askey 2001 jess@askey.org*
0005+  0000             ;***********************************************
0006+  0000             .module logic
0007+  0000             .msfirst
0008+  0000             
0009+  0000             var1_		.equ	$00
0010+  0000             var2_		.equ	$00
0011+  0000             var3_		.equ	$00
0012+  0000             var4_		.equ	$00
0013+  0000             
0014+  0000             #define     FLAG_IF    	0
0015+  0000             #define     FLAG_ELSE 	1
0016+  0000             #define	FLAG_BEGIN 	2
0017+  0000             
0018+  0000             ;*******************************************************************
0019+  0000             ;* Locate: Pushes two Words                                        *
0020+  0000             ;*                                                                 *
0021+  0000             ;*            Word 1 - address of branch location                  *
0022+  0000             ;*            Word 2 - Type of Operation                           *
0023+  0000             ;*                     0 - Standard ENDIF                          *
0024+  0000             ;*                     1 - ELSE or Logical ELSE                    *
0025+  0000             ;*                     2 - Loop                                    *
0026+  0000             ;*******************************************************************
0027+  0000             #define	logic_loc(type)	     \ .push  *, type
0028+  0000             
0029+  0000             ;*******************************************************************
0030+  0000             ;* Ifxx: These are the standard 'if' statements, they will always  *
0031+  0000             ;*       be of type 0.                                             *
0032+  0000             ;*******************************************************************
0033+  0000             #define	logic_ifxx(x)	     logic_loc(FLAG_IF) \ x  * 
0034+  0000             
0035+  0000             ;*******************************************************************
0036+  0000             ;* Begin: The start marker for logical loops, must terminate with  *
0037+  0000             ;*        an 'xxend' statement.                                    *
0038+  0000             ;******************************************************************* 
0039+  0000             #define     begin(x)		     logic_loc(FLAG_BEGIN)
0040+  0000             
0041+  0000             ;*******************************************************************
0042+  0000             ;* Logic End: This is the end macro for the 'begin' statement. It  *
0043+  0000             ;*            pulls the pc location of the beginning of the loop   *
0044+  0000             ;*            and verifies that the 'type' is correct.             *
0045+  0000             ;*******************************************************************
0046+  0000             #define logic_loopend(x,y)	\ .pop var1_, var2_
0047+  0000             #defcont				\#if (var1_ & FLAG_BEGIN)
0048+  0000             #defcont					\#if ((var2_-*-2+127) <= 0)
0049+  0000             #defcont						\ y	*+5
0050+  0000             #defcont						\ jmp	var2_
0051+  0000             #defcont					\#else
0052+  0000             #defcont						\ x	var2_
0053+  0000             #defcont					\#endif
0054+  0000             #defcont				\#else
0055+  0000             #defcont					\ .error "Inappropriate End for BEGIN Loop."
0056+  0000             #defcont				\#endif
0057+  0000             
0058+  0000             ;*******************************************************************
0059+  0000             ;* Logic Find: Used for ENDIF statement. Will find the pc for the  *
0060+  0000             ;*             previous IF (or ELSE) and update the branch or jump *
0061+  0000             ;*             at that address to point to the current address.    *
0062+  0000             ;*******************************************************************
0063+  0000             #define logic_end \var1_ .set *
0064+  0000             #defcont		\ .pop var3_, var4_
0065+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0 
0066+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0	
0067+  0000             #defcont  				\var2_ .set var1_-var4_-2
0068+  0000             #defcont				\#if var2_+127 < 0
0069+  0000             #defcont					\ .error "Branch Range < -127"
0070+  0000             #defcont				\#else
0071+  0000             #defcont					\#if var2_-128 > 0
0072+  0000             #defcont						\ .error "Branch Range > 128"
0073+  0000             #defcont					\#else
0074+  0000             #defcont    					\ .org var4_+1
0075+  0000             #defcont						\ .byte var2_
0076+  0000             #defcont					\#endif
0077+  0000             #defcont				\#endif
0078+  0000             #defcont			\#else	
0079+  0000             #defcont    			\ .org  var4_-2	
0080+  0000             #defcont				\ .word var1_
0081+  0000             #defcont			\#endif
0082+  0000             #defcont			\ .org	var1_
0083+  0000             #defcont		\#else
0084+  0000             #defcont			\.error "Wrong Endtype for IF block"
0085+  0000             #defcont		\#endif
0086+  0000             
0087+  0000             ;*******************************************************************
0088+  0000             ;* Logic Else: Can act as a standard else or a complex else        *
0089+  0000             ;*             (ie. with additional logic as defined below). The   *
0090+  0000             ;*             ELSE block will resove how to terminate the current *
0091+  0000             ;*             code and then set the owning IF statement's data    *
0092+  0000             ;*             byte.                                               *
0093+  0000             ;*******************************************************************
0094+  0000             #define	logic_else(x,y)	\var1_ .set $
0095+  0000             #defcont		\ .pop var3_, var4_
0096+  0000             #defcont		\#if (var3_ & FLAG_BEGIN)==0
0097+  0000             #defcont			\#if (var3_ & FLAG_ELSE)==0
0098+  0000             #defcont				\ .org var4_+1
0099+  0000             #defcont	      		\#if x==0
0100+  0000             #defcont					\var2_ .set var1_-var4_-2+2
0101+  0000             #defcont					\#if var2_+127 < 0
0102+  0000             #defcont						\ .org var1_
0103+  0000             #defcont						\.push $+3, 1
0104+  0000             #defcont						\ jmp $
0105+  0000             #defcont					\#else
0106+  0000             #defcont						\#if var2_-128>0
0107+  0000             #defcont							\ .org var1_
0108+  0000             #defcont							\.push $+3, 1
0109+  0000             #defcont							\ jmp $
0110+  0000             #defcont						\#else
0111+  0000             #defcont							\.push var1_, 0
0112+  0000             #defcont							\ .byte var2_
0113+  0000             #defcont							\ .org var1_
0114+  0000             #defcont							\ BRA $
0115+  0000             #defcont							\ .org var1_+2
0116+  0000             #defcont						\#endif
0117+  0000             #defcont					\#endif
0118+  0000             #defcont				\#else
0119+  0000             #defcont					\ .byte var1_-var4_-2+2
0120+  0000             #defcont					\ .org var1_
0121+  0000             #defcont					\.push $, 0
0122+  0000             #defcont					\ y $		
0123+  0000             #defcont				\#endif
0124+  0000             #defcont			\#else
0125+  0000             #defcont				\.error "Duplicate ELSE Statement"
0126+  0000             #defcont			\#endif
0127+  0000             #defcont		\#else
0128+  0000             #defcont			\ .error "Misplaced Else"
0129+  0000             #defcont		\#endif
0130+  0000             
0131+  0000             
0132+  0000             ;*******************************************************************
0133+  0000             ;* Defines how to use the various logic macros defined above.      *
0134+  0000             ;*******************************************************************
0135+  0000             #define	ifeq	logic_ifxx(BNE)		
0136+  0000             #define	ifne	logic_ifxx(BEQ)
0137+  0000             #define	ifpl	logic_ifxx(BMI)
0138+  0000             #define	ifhi	logic_ifxx(BLO)
0139+  0000             #define	ifmi	logic_ifxx(BPL)
0140+  0000             #define	iflo	logic_ifxx(BHI)
0141+  0000             #define	ifcs	logic_ifxx(BCC)
0142+  0000             #define	ifcc	logic_ifxx(BCS)
0143+  0000             #define 	ifvc	logic_ifxx(BVS)
0144+  0000             #define 	ifvs	logic_ifxx(BVC)
0145+  0000             #define	ifge	logic_ifxx(BLO)
0146+  0000             #define	ifgt	logic_ifxx(BLS)
0147+  0000             
0148+  0000             #define	else  	logic_else(0,0)
0149+  0000             #define	else_eq	logic_else(1,BEQ)
0150+  0000             #define	else_ne	logic_else(1,BNE)
0151+  0000             #define	else_pl	logic_else(1,BPL)
0152+  0000             #define	else_mi	logic_else(1,BMI)
0153+  0000             #define	else_cc	logic_else(1,BCC)
0154+  0000             #define	else_cs	logic_else(1,BCS)
0155+  0000             
0156+  0000             #define 	endif		logic_end
0157+  0000             
0158+  0000             #define	eqend	logic_loopend(BNE,BEQ)		
0159+  0000             #define	neend	logic_loopend(BEQ,BNE)		
0160+  0000             #define	plend	logic_loopend(BMI,BPL)
0161+  0000             #define	miend	logic_loopend(BPL,BMI)
0162+  0000             #define	csend	logic_loopend(BCC,BCS)
0163+  0000             #define	ccend	logic_loopend(BCS,BCC)
0164+  0000             #define	vcend	logic_loopend(BVS,BVC)
0165+  0000             #define	vsend	logic_loopend(BVC,BVS)
0166+  0000             
0167+  0000             #define	loopend	logic_loopend(BRA,BRA)
0168+  0000             
0169+  0000             #define	lsb(x)	x&$FF
0170+  0000             
0171+  0000             #define	msb(x)	(x>>8)&$FF0017   0000             #include "7hard.asm"		;Level 7 Hardware Definitions
0001+  0000             ;***********************************************************
0002+  0000             ;* Level 7 Hardware Definitions                            *
0003+  0000             ;* 1999-2001 Jess M. Askey                                 *
0004+  0000             ;***********************************************************
0005+  0000             ;* This file defines the RAM structure and the actual      *
0006+  0000             ;* hardware contained on the Level 7 CPU board.            *
0007+  0000             ;***********************************************************
0008+  0000             	.org $0000
0009+  0000             
0010+  0000             ram_base	
0011+  0000             vm_reg_a			.block	1		;Virtual Machine Register A
0012+  0001             vm_reg_b			.block	1		;Virtual Machine Register B
0013+  0002             game_ram_2			.block	1
0014+  0003             game_ram_3			.block	1
0015+  0004             game_ram_4			.block	1
0016+  0005             game_ram_5			.block	1
0017+  0006             game_ram_6			.block	1
0018+  0007             game_ram_7			.block	1
0019+  0008             game_ram_8			.block	1
0020+  0009             game_ram_9			.block	1
0021+  000A             game_ram_a			.block	1
0022+  000B             game_ram_b			.block	1
0023+  000C             game_ram_c			.block	1
0024+  000D             game_ram_d			.block	1
0025+  000E             game_ram_e			.block	1
0026+  000F             game_ram_f			.block	1
0027+  0010             lampbuffer0			.block	8		;Lamp Buffer 0
0028+  0018             bitflags			.block	8
0029+  0020             lampbufferselect		.block	8		;Lamp Buffer Selection Bit
0030+  0028             lampbuffer1			.block	8		;Lamp Buffer 1
0031+  0030             lampflashflag		.block	8		;Lamp Flashing Bits
0032+  0038             score_p1_b0			.block	4
0033+  003C             score_p2_b0			.block	4
0034+  0040             score_p3_b0			.block	4
0035+  0044             score_p4_b0			.block	4
0036+  0048             score_p1_b1			.block	4
0037+  004C             score_p2_b1			.block	4
0038+  0050             score_p3_b1			.block	4
0039+  0054             score_p4_b1			.block	4
0040+  0058             mbip_b0			.block	1
0041+  0059             mbip_b1			.block	1
0042+  005A             cred_b0			.block	1
0043+  005B             cred_b1			.block	1
0044+  005C             dmask_p1			.block	1
0045+  005D             dmask_p2			.block	1
0046+  005E             dmask_p3			.block	1
0047+  005F             dmask_p4			.block	1
0048+  0060             comma_flags			.block	1
0049+  0061             switch_debounced		.block	8
0050+  0069             switch_masked		.block	8
0051+  0071             switch_pending		.block	8
0052+  0079             switch_aux			.block	8
0053+  0081             switch_b4			.block	8
0054+  0089             irq_counter			.block	1
0055+  008A             lamp_index_word		.block	2		;This will always be $00 in the MSB, will be a rotating bit in LSB
0056+  008C             lamp_bit			.block	1		;$008C
0057+  008D             comma_data_temp		.block	1
0058+  008E             credp1p2_bufferselect	.block	1
0059+  008F             mbipp3p4_bufferselect	.block	1
0060+  0090             swap_player_displays	.block	1
0061+  0091             solenoid_address		.block	2
0062+  0093             solenoid_bitpos		.block	1
0063+  0094             solenoid_counter		.block	1
0064+  0095             irqcount16			.block	1
0065+  0096             switch_queue_pointer	.block	2
0066+  0098             solenoid_queue_pointer	.block	2
0067+  009A             temp1				.block	2
0068+  009C             temp2				.block	2
0069+  009E             temp3				.block	2
0070+  00A0             sys_temp1			.block	1
0071+  00A1             sys_temp2			.block	1
0072+  00A2             sys_temp3			.block	1
0073+  00A3             sys_temp4			.block	1
0074+  00A4             sys_temp5			.block	1
0075+  00A5             sw_encoded			.block	1
0076+  00A6             sys_temp_w2			.block	2
0077+  00A8             sys_temp_w3			.block	2
0078+  00AA             thread_priority		.block	1
0079+  00AB             unused_ram1			.block	1		;$00AB
0080+  00AC             irqcount			.block	1
0081+  00AD             vm_base			.block	2
0082+  00AF             vm_nextslot			.block	2
0083+  00B1             current_thread		.block	2
0084+  00B3             vm_tail_thread		.block	2
0085+  00B5             lamp_flash_rate		.block	1
0086+  00B6             lamp_flash_count		.block	1
0087+  00B7             thread_timer_byte		.block	1
0088+  00B8             soundcount			.block	1
0089+  00B9             lastsound			.block	1
0090+  00BA             cur_sndflags		.block	1		;$00BA
0091+  00BB             soundptr			.block	2
0092+  00BD             soundirqcount		.block	2
0093+  00BF             soundindex_com		.block	2
0094+  00C1             sys_soundflags		.block	1
0095+  00C2             soundindex			.block	1
0096+  00C3             csound_timer		.block	2		;$00C3
0097+  00C5             next_sndflags		.block	1		;$00C5
0098+  00C6             next_sndcnt		      .block	1		;$00C6
0099+  00C7             next_sndcmd		      .block	1		;$00C7
0100+  00C8             flag_tilt			.block	1
0101+  00C9             flag_gameover		.block	1
0102+  00CA             flag_bonusball		.block	1
0103+  00CB             flags_selftest		.block	1
0104+  00CC             num_players			.block	1
0105+  00CD             player_up			.block	1
0106+  00CE             pscore_buf			.block	2
0107+  00D0             num_eb			.block	1
0108+  00D1             vm_pc				.block	2
0109+  00D3             num_tilt			.block	1
0110+  00D4             minutetimer			.block	2
0111+  00D6             flag_timer_bip		.block	1
0112+  00D7             randomseed			.block	1
0113+  00D8             x_temp_1			.block	2		;$00D8-D9
0114+  00DA             eb_x_temp			.block	2		;$00DA-DB
0115+  00DC             credit_x_temp		.block	2		;$00DC-DD
0116+  00DE             x_temp_2			.block	2
0117+  00E0             
0118+  00E0             ;***************************************************************
0119+  00E0             ;* Spare RAM: The last 32 bytes are available to the GAME ROM
0120+  00E0             ;*            if needed. Only the first 8 are defined by name.
0121+  00E0             ;***************************************************************
0122+  00E0             spare_ram			.block	1
0123+  00E1             spare_ram+1			.block	1
0124+  00E2             spare_ram+2			.block	1
0125+  00E3             spare_ram+3			.block	1
0126+  00E4             spare_ram+4			.block	1
0127+  00E5             spare_ram+5			.block	1
0128+  00E6             spare_ram+6			.block	1
0129+  00E7             spare_ram+7			.block	1
0130+  00E8             
0131+  00E8             ;***************************************************************
0132+  00E8             ;* CMOS RAM - The cmos RAM data bus is only 4-bits wide, so
0133+  00E8             ;*            each byte of data takes two consecutive address
0134+  00E8             ;*            locations. The lower address is the most 
0135+  00E8             ;*            significant nibble in the byte.
0136+  00E8             ;***************************************************************
0137+  0100             	.org $0100
0138+  0100             
0139+  0100             cmos_base
0140+  0100             cmos_csum			.block	2
0141+  0102             
0142+  0102             ;* First section is game audits
0143+  0102             aud_base
0144+  0102             aud_leftcoins		.block	4	;0102-0105	"Coins, Left Chute"
0145+  0106             aud_centercoins		.block	4	;0106-0109	"Coins, Center Chute"
0146+  010A             aud_rightcoins		.block	4	;010A-010D	"Coins, Right Chute"
0147+  010E             aud_paidcredits		.block	4	;010E-0111	Total Paid Credits
0148+  0112             aud_specialcredits	.block	4	;0112-0115	Special Credits
0149+  0116             aud_replaycredits		.block	4	;0116-0119	Replay Score Credits
0150+  011A             aud_matchcredits		.block	4	;011A-011D	Match Credits
0151+  011E             aud_totalcredits		.block	4	;011E-0121	Total Credits
0152+  0122             aud_extraballs		.block	4	;0122-0125	Total Extra Balls
0153+  0126             aud_avgballtime		.block	4	;0126-0129	Ball Time in Minutes
0154+  012A             aud_totalballs		.block	4	;012A-012D	Total Balls Played
0155+  012E             aud_game1			.block	4	;012E-0131	Game Specific Audit#1
0156+  0132             aud_game2			.block	4	;0132-0135	Game Specific Audit#2
0157+  0136             aud_game3			.block	4	;0136-0139	Game Specific Audit#3
0158+  013A             aud_game4			.block	4	;013A-013D	Game Specific Audit#4
0159+  013E             aud_game5			.block	4	;013E-0141	Game Specific Audit#5
0160+  0142             aud_game6			.block	4	;0142-0145	Game Specific Audit#6
0161+  0146             aud_game7			.block	4	;0146-0149	Game Specific Audit#7
0162+  014A             aud_autocycles		.block	4	;014A-014D	Number of Auto Cycles Completed
0163+  014E             aud_hstdcredits		.block	2	;014E-014F	2 -HSTD Credits Awarded
0164+  0150             aud_replay1times		.block	4	;0150-0153	2 -Times Exceeded
0165+  0154             aud_replay2times		.block	4	;0154-0157	2 -Times Exceeded
0166+  0158             aud_replay3times		.block	4	;0158-015B	2 -Times Exceeded
0167+  015C             aud_replay4times		.block	4	;015C-015F	2 -Times Exceeded
0168+  0160             
0169+  0160             				.block	2	;0160-0161	Unknown
0170+  0162             cmos_bonusunits		.block	2	;0162-1063	Hold Over Bonus Coin Units
0171+  0164             cmos_coinunits		.block	2	;0164-0165	Hold Over Total Coin Units
0172+  0166             				
0173+  0166             aud_currenthstd		.block	8	;0166-016D	Current HSTD
0174+  016E             aud_currentcredits	.block	2	;016D-016F  Current Credits			
0175+  0170             aud_command			.block	2	;0170-0171	Command Entry
0176+  0172             
0177+  0172             				.block	11
0178+  017D             
0179+  017D             
0180+  017D             
0181+  017D             
0182+  017D             ;* Then adjustments
0183+  017D             adj_base
0184+  017D             adj_cmoscsum			.block	4	;017D-0180	"Game #, ROM Revision"                                     
0185+  0181             adj_backuphstd			.block	2     ;0181-0182	Backup HSTD                                                
0186+  0183             adj_replay1				.block	2     ;0183-0184	Replay 1 Score                                             
0187+  0185             adj_replay2				.block	2     ;0185-0186	Replay 2 Score                                             
0188+  0187             adj_replay3				.block	2     ;0187-0188	Replay 3 Score                                             
0189+  0189             adj_replay4				.block	2     ;0189-018A	Replay 4 Score                                             
0190+  018B             adj_matchenable			.block	2     ;018B-018C	Match: 00=On 01=OFF                                        
0191+  018D             adj_specialaward			.block	2     ;018D-018E	Special:00=Awards Credit 01=Extra Ball 02=Awards Points    
0192+  018F             adj_replayaward			.block	2     ;018F-0190	Replay Scores: 00=Awards Credit 01=Extra Ball              
0193+  0191             adj_maxplumbbobtilts		.block	2     ;0191-0192	Max Plumb Bob Tilts                                        
0194+  0193             adj_numberofballs			.block	2     ;0193-0194	Number of Balls (3 or 5)                                   
0195+  0195             adj_gameadjust1			.block	2     ;0195-0196	Game Specific Adjustment#1                                 
0196+  0197             adj_gameadjust2			.block	2     ;0197-0198	Game Specific Adjustment#2                                 
0197+  0199             adj_gameadjust3			.block	2     ;0199-019A	Game Specific Adjustment#3                                 
0198+  019B             adj_gameadjust4			.block	2     ;019B-019C	Game Specific Adjustment#4                                 
0199+  019D             adj_gameadjust5			.block	2     ;019D-019E	Game Specific Adjustment#5                                 
0200+  019F             adj_gameadjust6			.block	2     ;019F-01A0	Game Specific Adjustment#6                                 
0201+  01A1             adj_gameadjust7			.block	2     ;01A1-01A2	Game Specific Adjustment#7                                 
0202+  01A3             adj_gameadjust8			.block	2     ;01A3-01A4	Game Specific Adjustment#8                                 
0203+  01A5             adj_gameadjust9			.block	2     ;01A5-01A6	Game Specific Adjustment#9                                 
0204+  01A7             adj_hstdcredits			.block	2     ;01A7-01A8	High Score Credit Award                                    
0205+  01A9             adj_max_extraballs		.block	2     ;01A9-019A	Maximum Extra Balls 00=No Extra Balls                      
0206+  01AB             adj_max_credits			.block	2     ;01AB-01AC	Maximum Credits                                            
0207+  01AD             adj_pricecontrol			.block	2     ;01AD-01AE	Standard/Custom Pricing Control   
0208+  01AF             
0209+  01AF             cmos_pricingbase                         
0210+  01AF             cmos_leftcoinmult			.block	2     ;01AF-01B0	Left Coin Slot Multiplier                                  
0211+  01B1             cmos_centercoinmult		.block	2     ;01B1-01B2	Center Coin Slot Multiplier    
0212+  01B3             cmos_rightcoinmult		.block	2     ;01B3-01B4	Right Coin Slot Multiplier     
0213+  01B5             cmos_coinsforcredit		.block	2     ;01B5-01B6	Coin Units Required for Credit 
0214+  01B7             cmos_bonuscoins			.block	2     ;01B7-01B8	Coin Units Bonus Point         
0215+  01B9             cmos_minimumcoins			.block	2     ;01B9-01BA	Minimum Coin Units             
0216+  01BB             
0217+  01BB             
0218+  01BB             
0219+  01BB             ;***************************************************************
0220+  01BB             ;* Extended RAM area. This RAM space was added in Level 7 games
0221+  01BB             ;* for extended flexibility.
0222+  01BB             ;***************************************************************
0223+  1100             	.org $1100
0224+  1100             
0225+  1100             switch_queue		.block	24
0226+  1118             
0227+  1118             switch_queue_full
0228+  1118             sol_queue			.block	16
0229+  1128             
0230+  1128             sol_queue_full
0231+  1128             score_queue			.block	8
0232+  1130             
0233+  1130             score_queue_full
0234+  1130             exe_buffer			.block	16		;Temp code buffer for exe macro
0235+  1140             p1_gamedata			.block	25
0236+  1159             p2_gamedata			.block	25
0237+  1172             p3_gamedata			.block	25
0238+  118B             p4_gamedata			.block	25
0239+  11A4             
0240+  11A4             
0241+  11A4             ;***************************************************************
0242+  11A4             ;* PIA Input/Output hardware
0243+  11A4             ;***************************************************************
0244+  11A4             ;* Some equates for indexing
0245+  11A4             pia_pir			.equ		0
0246+  11A4             pia_control			.equ		1
0247+  11A4             pia_pir_a			.equ		0
0248+  11A4             pia_control_a		.equ		1
0249+  11A4             pia_pir_b			.equ		2
0250+  11A4             pia_control_b		.equ		3
0251+  11A4             
0252+  11A4             
0253+  11A4             pia_sound_data		.equ		$2100
0254+  11A4             pia_sound_ctrl		.equ		$2101
0255+  11A4             pia_comma_data		.equ		$2102
0256+  11A4             pia_comma_ctrl		.equ		$2103
0257+  11A4             
0258+  11A4             pia_sol_low_data		.equ		$2200
0259+  11A4             pia_sol_low_ctrl		.equ		$2201
0260+  11A4             pia_sol_high_data		.equ		$2202
0261+  11A4             pia_sol_high_ctrl		.equ		$2203
0262+  11A4             
0263+  11A4             pia_lamp_row_data		.equ		$2400
0264+  11A4             pia_lamp_row_ctrl		.equ		$2401
0265+  11A4             pia_lamp_col_data		.equ		$2402
0266+  11A4             pia_lamp_col_ctrl		.equ		$2403
0267+  11A4             
0268+  11A4             pia_disp_digit_data	.equ		$2800
0269+  11A4             pia_disp_digit_ctrl	.equ		$2801
0270+  11A4             pia_disp_seg_data		.equ		$2802
0271+  11A4             pia_disp_seg_ctrl		.equ		$2803
0272+  11A4             
0273+  11A4             pia_switch_return_data	.equ		$3000
0274+  11A4             pia_switch_return_ctrl	.equ		$3001
0275+  11A4             pia_switch_strobe_data	.equ		$3002
0276+  11A4             pia_switch_strobe_ctrl	.equ		$3003
0277+  11A4             
0278+  11A4             
0279+  11A4             ;*******************************************
0280+  11A4             ;* Special PIA for Hyperball Driver Boards *
0281+  11A4             ;* Controls the Alpha-Numeric Display      *
0282+  11A4             ;*******************************************
0283+  11A4             pia_alphanum_digit_data	.equ		$4000
0284+  11A4             pia_alphanum_digit_ctrl	.equ		$4001
0285+  11A4             pia_alphanum_seg_data	.equ		$4002
0286+  11A4             pia_alphanum_seg_ctrl	.equ		$4003
0018   11A4             #include "wvm7.asm"		;Virtual Machine Instruction Definitions
0001+  11A4             ;*****************************************************************************
0002+  11A4             ;* Williams Level 7 Virtual Machine Macro Definitions
0003+  11A4             ;*****************************************************************************
0004+  11A4             ;* Code copyright Williams Electronic Games Inc.
0005+  11A4             ;* Written/Decoded by Jess M. Askey (jess@askey.org)
0006+  11A4             ;* For use with TASMx Assembler
0007+  11A4             ;* Visit http://www.gamearchive.com/pinball/manufacturer/williams/pinbuilder
0008+  11A4             ;* for more information.
0009+  11A4             ;* You may redistribute this file as long as this header remains intact.
0010+  11A4             ;*****************************************************************************
0011+  11A4             
0012+  11A4             ;********************************************************
0013+  11A4             ;* First Define the Thread Structure used in the virtual 
0014+  11A4             ;* machine linked list.
0015+  11A4             ;********************************************************
0016+  11A4             ;* Next:	This is the pointer to the next thread in 
0017+  11A4             ;* 		the linked list. The VM requires this to 
0018+  11A4             ;*		move about the list of threads. This is 
0019+  11A4             ;* 		set by the VM thread handlers and does not
0020+  11A4             ;*          need to be manually fiddled with by the 
0021+  11A4             ;*          game program as it is automatic.
0022+  11A4             ;*
0023+  11A4             ;* Timer:	This is a byte timer (0-255) that holds the 
0024+  11A4             ;*          number of IRQ's counts required before the 
0025+  11A4             ;*          thread is executed. This is set by the 
0026+  11A4             ;*          programmer for delays between executions.	
0027+  11A4             ;*
0028+  11A4             ;* Vars:	When a thread is created, the originating
0029+  11A4             ;*          program may push up to 8 additional bytes
0030+  11A4             ;* 		of data onto the stack which will then be
0031+  11A4             ;*          placed into these 8 byte holders.
0032+  11A4             ;*
0033+  11A4             ;* PC:	This is the address of the program entry 
0034+  11A4             ;*          point that will be executed when the thread
0035+  11A4             ;*       	timer expires.
0036+  11A4             ;*
0037+  11A4             ;* ID:	The thread ID is a number that identifies 
0038+  11A4             ;* 		the thread type. The ID defintions are all
0039+  11A4             ;*		decided by the programmer except for thread
0040+  11A4             ;*		ID #06 which is a general 'end-of-ball' terminated
0041+  11A4             ;*		thread. Because the VM can destroy groups of 
0042+  11A4             ;* 		threads by ID and branch on existence of threads
0043+  11A4             ;*    	with certain ID's, this is a very important
0044+  11A4             ;*		design consideration. See the programming 
0045+  11A4             ;*  		manual for more information.
0046+  11A4             ;*	
0047+  11A4             ;* RegA:	This holds the value that was contained in 
0048+  11A4             ;*		the CPU register A when the Thread was created.
0049+  11A4             ;*
0050+  11A4             ;* RegB:	Similar to above, holds the value of CPU reg B.
0051+  11A4             ;*
0052+  11A4             ;* RegX:	Again, holds the value of the X register upon
0053+  11A4             ;*		thread creation.
0054+  11A4             ;*
0055+  11A4             ;************************************************************
0056+  11A4             
0057+  11A4             threadobj_next	.equ	$00
0058+  11A4             threadobj_timer	.equ	$02
0059+  11A4             threadobj_var1	.equ	$03
0060+  11A4             threadobj_var2	.equ	$04
0061+  11A4             threadobj_var3	.equ	$05
0062+  11A4             threadobj_var4	.equ	$06
0063+  11A4             threadobj_var5	.equ	$07
0064+  11A4             threadobj_var6	.equ	$09
0065+  11A4             threadobj_var7	.equ	$09
0066+  11A4             threadobj_var8	.equ	$0a
0067+  11A4             threadobj_pc	.equ	$0b
0068+  11A4             threadobj_id	.equ	$0d
0069+  11A4             threadobj_rega	.equ	$0e
0070+  11A4             threadobj_regb	.equ	$0f
0071+  11A4             threadobj_regx	.equ	$10
0072+  11A4             
0073+  11A4             ;********************************************************
0074+  11A4             ;* Switch Table Equates
0075+  11A4             ;********************************************************
0076+  11A4             #define	switchentry(a,b)	.db a /.dw b
0077+  11A4             
0078+  11A4             sf_wml7	.equ	$80
0079+  11A4             sf_code 	.equ 	$00
0080+  11A4             sf_tilt	.equ	$40
0081+  11A4             sf_gameover	.equ	$20
0082+  11A4             sf_enabled	.equ	$10
0083+  11A4             sf_instant	.equ	$08
0084+  11A4             
0085+  11A4             ;********************************************************
0086+  11A4             ;* Define our Level 7 macros.
0087+  11A4             ;********************************************************
0088+  11A4             
0089+  11A4             #define 	PC100_	\.db $00	
0090+  11A4             #define 	NOP_		\.db $01	
0091+  11A4             #define	MRTS_		\.db $02
0092+  11A4             #define	KILL_		\.db $03	
0093+  11A4             #define 	CPUX_		\.db $04
0094+  11A4             #define	SPEC_		\.db $05	
0095+  11A4             #define	EB_		\.db $06	
0096+  11A4             
0097+  11A4             ;********************************************************
0098+  11A4             ;* Lamp Macro Definition: These take care of turning lamps
0099+  11A4             ;*                        on/off and doing the basic lamp
0100+  11A4             ;*                        effects.
0101+  11A4             ;********************************************************
0102+  11A4             #define	BITON_(a)		\.db $10,a
0103+  11A4             #define	BITON_(a,b)		\.db $10,(a+$80),b
0104+  11A4             #define	BITON_(a,b,c)	\.db $10,(a+$80),(b+$80),c
0105+  11A4             #define	BITON_(a,b,c,d)	\.db $10,(a+$80),(b+$80),(c+$80),d
0106+  11A4             
0107+  11A4             #define	BITOFF_(a)		\.db $11,a
0108+  11A4             #define	BITOFF_(a,b)	\.db $11,(a+$80),b
0109+  11A4             #define	BITOFF_(a,b,c)	\.db $11,(a+$80),(b+$80),c
0110+  11A4             #define	BITOFF_(a,b,c,d)	\.db $11,(a+$80),(b+$80),(c+$80),d
0111+  11A4             
0112+  11A4             #define	BITINV_(a)		\.db $12,a
0113+  11A4             #define	BITINV_(a,b)	\.db $12,(a+$80),b
0114+  11A4             #define	BITINV_(a,b,c)	\.db $12,(a+$80),(b+$80),c
0115+  11A4             #define	BITINV_(a,b,c,d)	\.db $12,(a+$80),(b+$80),(c+$80),d
0116+  11A4             
0117+  11A4             #define	BITFL_(a)		\.db $13,a
0118+  11A4             #define	BITFL_(a,b)		\.db $13,(a+$80),b
0119+  11A4             #define	BITFL_(a,b,c)	\.db $13,(a+$80),(b+$80),c
0120+  11A4             #define	BITFL_(a,b,c,d)	\.db $13,(a+$80),(b+$80),(c+$80),d
0121+  11A4              
0122+  11A4             #define	BITONP_(a)		\.db $14,a
0123+  11A4             #define	BITONP_(a,b)	\.db $14,(a+$80),b
0124+  11A4             #define	BITONP_(a,b,c)	\.db $14,(a+$80),(b+$80),c
0125+  11A4             #define	BITONP_(a,b,c,d)	\.db $14,(a+$80),(b+$80),(c+$80),d 
0126+  11A4             
0127+  11A4             #define	BITOFFP_(a)		\.db $15,a
0128+  11A4             #define	BITOFFP_(a,b)	\.db $15,(a+$80),b
0129+  11A4             #define	BITOFFP_(a,b,c)	\.db $15,(a+$80),(b+$80),c
0130+  11A4             #define	BITOFFP_(a,b,c,d)	\.db $15,(a+$80),(b+$80),(c+$80),d 
0131+  11A4             
0132+  11A4             #define	BITINVP_(a)		\.db $16,a
0133+  11A4             #define	BITINVP_(a,b)	\.db $16,(a+$80),b
0134+  11A4             #define	BITINVP_(a,b,c)	\.db $16,(a+$80),(b+$80),c
0135+  11A4             #define	BITINVP_(a,b,c,d)	\.db $16,(a+$80),(b+$80),(c+$80),d 
0136+  11A4              
0137+  11A4             #define	BITFLP_(a)		\.db $17,a
0138+  11A4             #define	BITFLP_(a,b)	\.db $17,(a+$80),b
0139+  11A4             #define	BITFLP_(a,b,c)	\.db $17,(a+$80),(b+$80),c
0140+  11A4             #define	BITFLP_(a,b,c,d)	\.db $17,(a+$80),(b+$80),(c+$80),d  
0141+  11A4             
0142+  11A4             ;************************
0143+  11A4             ;* Lamp/Bit Effects
0144+  11A4             ;************************
0145+  11A4             #define	BE18_(a)		\.db $18,a
0146+  11A4             #define	BE18_(a,b)		\.db $18,(a+$80),b
0147+  11A4             #define	BE18_(a,b,c)	\.db $18,(a+$80),(b+$80),c
0148+  11A4             #define	BE18_(a,b,c,d)	\.db $18,(a+$80),(b+$80),(c+$80),d  
0149+  11A4             
0150+  11A4             #define	BE19_(a)		\.db $19,a
0151+  11A4             #define	BE19_(a,b)		\.db $19,(a+$80),b
0152+  11A4             #define	BE19_(a,b,c)	\.db $19,(a+$80),(b+$80),c
0153+  11A4             #define	BE19_(a,b,c,d)	\.db $19,(a+$80),(b+$80),(c+$80),d 
0154+  11A4             
0155+  11A4             #define	BE1A_(a)		\.db $1A,a
0156+  11A4             #define	BE1A_(a,b)		\.db $1A,(a+$80),b
0157+  11A4             #define	BE1A_(a,b,c)	\.db $1A,(a+$80),(b+$80),c
0158+  11A4             #define	BE1A_(a,b,c,d)	\.db $1A,(a+$80),(b+$80),(c+$80),d 
0159+  11A4             
0160+  11A4             #define	BE1B_(a)		\.db $1B,a
0161+  11A4             #define	BE1B_(a,b)		\.db $1B,(a+$80),b
0162+  11A4             #define	BE1B_(a,b,c)	\.db $1B,(a+$80),(b+$80),c
0163+  11A4             #define	BE1B_(a,b,c,d)	\.db $1B,(a+$80),(b+$80),(c+$80),d 
0164+  11A4             
0165+  11A4             #define	BE1C_(a)		\.db $1C,a
0166+  11A4             #define	BE1C_(a,b)		\.db $1C,(a+$80),b
0167+  11A4             #define	BE1C_(a,b,c)	\.db $1C,(a+$80),(b+$80),c
0168+  11A4             #define	BE1C_(a,b,c,d)	\.db $1C,(a+$80),(b+$80),(c+$80),d 
0169+  11A4             
0170+  11A4             #define	BE1D_(a)		\.db $1D,a
0171+  11A4             #define	BE1D_(a,b)		\.db $1D,(a+$80),b
0172+  11A4             #define	BE1D_(a,b,c)	\.db $1D,(a+$80),(b+$80),c
0173+  11A4             #define	BE1D_(a,b,c,d)	\.db $1D,(a+$80),(b+$80),(c+$80),d 
0174+  11A4             
0175+  11A4             #define	BE1E_(a)		\.db $1E,a
0176+  11A4             #define	BE1E_(a,b)		\.db $1E,(a+$80),b
0177+  11A4             #define	BE1E_(a,b,c)	\.db $1E,(a+$80),(b+$80),c
0178+  11A4             #define	BE1E_(a,b,c,d)	\.db $1E,(a+$80),(b+$80),(c+$80),d 
0179+  11A4             
0180+  11A4             #define	BE1F_(a)		\.db $1F,a
0181+  11A4             #define	BE1F_(a,b)		\.db $1F,(a+$80),b
0182+  11A4             #define	BE1F_(a,b,c)	\.db $1F,(a+$80),(b+$80),c
0183+  11A4             #define	BE1F_(a,b,c,d)	\.db $1F,(a+$80),(b+$80),(c+$80),d 
0184+  11A4             
0185+  11A4             #define	BITON2_(a)		\.db $20,a
0186+  11A4             #define	BITON2_(a,b)	\.db $20,(a+$80),b
0187+  11A4             #define	BITON2_(a,b,c)	\.db $20,(a+$80),(b+$80),c
0188+  11A4             #define	BITON2_(a,b,c,d)	\.db $20,(a+$80),(b+$80),(c+$80),d
0189+  11A4             
0190+  11A4             #define	BITOFF2_(a)		\.db $21,a
0191+  11A4             #define	BITOFF2_(a,b)	\.db $21,(a+$80),b
0192+  11A4             #define	BITOFF2_(a,b,c)	\.db $21,(a+$80),(b+$80),c
0193+  11A4             #define	BITOFF2_(a,b,c,d)	\.db $21,(a+$80),(b+$80),(c+$80),d
0194+  11A4             
0195+  11A4             #define	BITINV2_(a)		\.db $22,a
0196+  11A4             #define	BITINV2_(a,b)	\.db $22,(a+$80),b
0197+  11A4             #define	BITINV2_(a,b,c)	\.db $22,(a+$80),(b+$80),c
0198+  11A4             #define	BITINV2_(a,b,c,d)	\.db $22,(a+$80),(b+$80),(c+$80),d
0199+  11A4             
0200+  11A4             #define	BITFL2_(a)		\.db $23,a
0201+  11A4             #define	BITFL2_(a,b)	\.db $23,(a+$80),b
0202+  11A4             #define	BITFL2_(a,b,c)	\.db $23,(a+$80),(b+$80),c
0203+  11A4             #define	BITFL2_(a,b,c,d)	\.db $23,(a+$80),(b+$80),(c+$80),d
0204+  11A4              
0205+  11A4             #define	BITONP2_(a)		\.db $24,a
0206+  11A4             #define	BITONP2_(a,b)	\.db $24,(a+$80),b
0207+  11A4             #define	BITONP2_(a,b,c)	\.db $24,(a+$80),(b+$80),c
0208+  11A4             #define	BITONP2_(a,b,c,d)	\.db $24,(a+$80),(b+$80),(c+$80),d 
0209+  11A4             
0210+  11A4             #define	BITOFFP2_(a)	\.db $25,a
0211+  11A4             #define	BITOFFP2_(a,b)	\.db $25,(a+$80),b
0212+  11A4             #define	BITOFFP2_(a,b,c)	\.db $25,(a+$80),(b+$80),c
0213+  11A4             #define	BITOFFP2_(a,b,c,d) \.db $25,(a+$80),(b+$80),(c+$80),d 
0214+  11A4             
0215+  11A4             #define	BITINVP2_(a)	\.db $26,a
0216+  11A4             #define	BITINVP2_(a,b)	\.db $26,(a+$80),b
0217+  11A4             #define	BITINVP2_(a,b,c)	\.db $26,(a+$80),(b+$80),c
0218+  11A4             #define	BITINVP2_(a,b,c,d) \.db $26,(a+$80),(b+$80),(c+$80),d 
0219+  11A4              
0220+  11A4             #define	BITFLP2_(a)		\.db $27,a
0221+  11A4             #define	BITFLP2_(a,b)	\.db $27,(a+$80),b
0222+  11A4             #define	BITFLP2_(a,b,c)	\.db $27,(a+$80),(b+$80),c
0223+  11A4             #define	BITFLP2_(a,b,c,d)	\.db $27,(a+$80),(b+$80),(c+$80),d 
0224+  11A4             
0225+  11A4             #define	BE28_(a)		\.db $28,a
0226+  11A4             #define	BE28_(a,b)		\.db $28,(a+$80),b
0227+  11A4             #define	BE28_(a,b,c)	\.db $28,(a+$80),(b+$80),c
0228+  11A4             #define	BE28_(a,b,c,d)	\.db $28,(a+$80),(b+$80),(c+$80),d  
0229+  11A4             
0230+  11A4             #define	BE29_(a)		\.db $29,a
0231+  11A4             #define	BE29_(a,b)		\.db $29,(a+$80),b
0232+  11A4             #define	BE29_(a,b,c)	\.db $29,(a+$80),(b+$80),c
0233+  11A4             #define	BE29_(a,b,c,d)	\.db $29,(a+$80),(b+$80),(c+$80),d 
0234+  11A4             
0235+  11A4             #define	BE2A_(a)		\.db $2A,a
0236+  11A4             #define	BE2A_(a,b)		\.db $2A,(a+$80),b
0237+  11A4             #define	BE2A_(a,b,c)	\.db $2A,(a+$80),(b+$80),c
0238+  11A4             #define	BE2A_(a,b,c,d)	\.db $2A,(a+$80),(b+$80),(c+$80),d 
0239+  11A4             
0240+  11A4             #define	BE2B_(a)		\.db $2B,a
0241+  11A4             #define	BE2B_(a,b)		\.db $2B,(a+$80),b
0242+  11A4             #define	BE2B_(a,b,c)	\.db $2B,(a+$80),(b+$80),c
0243+  11A4             #define	BE2B_(a,b,c,d)	\.db $2B,(a+$80),(b+$80),(c+$80),d 
0244+  11A4             
0245+  11A4             #define	BE2C_(a)		\.db $2C,a
0246+  11A4             #define	BE2C_(a,b)		\.db $2C,(a+$80),b
0247+  11A4             #define	BE2C_(a,b,c)	\.db $2C,(a+$80),(b+$80),c
0248+  11A4             #define	BE2C_(a,b,c,d)	\.db $2C,(a+$80),(b+$80),(c+$80),d 
0249+  11A4             
0250+  11A4             #define	BE2D_(a)		\.db $2D,a
0251+  11A4             #define	BE2D_(a,b)		\.db $2D,(a+$80),b
0252+  11A4             #define	BE2D_(a,b,c)	\.db $2D,(a+$80),(b+$80),c
0253+  11A4             #define	BE2D_(a,b,c,d)	\.db $2D,(a+$80),(b+$80),(c+$80),d 
0254+  11A4             
0255+  11A4             #define	BE2E_(a)		\.db $2E,a
0256+  11A4             #define	BE2E_(a,b)		\.db $2E,(a+$80),b
0257+  11A4             #define	BE2E_(a,b,c)	\.db $2E,(a+$80),(b+$80),c
0258+  11A4             #define	BE2E_(a,b,c,d)	\.db $2E,(a+$80),(b+$80),(c+$80),d 
0259+  11A4             
0260+  11A4             #define	BE2F_(a)		\.db $2F,a
0261+  11A4             #define	BE2F_(a,b)		\.db $2F,(a+$80),b
0262+  11A4             #define	BE2F_(a,b,c)	\.db $2F,(a+$80),(b+$80),c
0263+  11A4             #define	BE2F_(a,b,c,d)	\.db $2F,(a+$80),(b+$80),(c+$80),d 
0264+  11A4             
0265+  11A4             ;********************************************************
0266+  11A4             ;* Solenoid Macro Definition: We will pre-define this for
0267+  11A4             ;*                            up to six solenoids even
0268+  11A4             ;*                            tho up to 16 are actually
0269+  11A4             ;*                            allowed.
0270+  11A4             ;********************************************************
0271+  11A4             #define	SOL_(a)		\.db $31,a
0272+  11A4             #define	SOL_(a,b)		\.db $32,a,b
0273+  11A4             #define 	SOL_(a,b,c)		\.db $33,a,b,c
0274+  11A4             #define	SOL_(a,b,c,d)	\.db $34,a,b,c,d
0275+  11A4             #define	SOL_(a,b,c,d,e)	\.db $35,a,b,c,d,e
0276+  11A4             #define	SOL_(a,b,c,d,e,f)	\.db $36,a,b,c,d,e,f
0277+  11A4             
0278+  11A4             ;********************************************************
0279+  11A4             ;* Macros 40-43: Static Length, easy
0280+  11A4             ;********************************************************
0281+  11A4             #define	PTSSND_(a,b)	\.db $40,a,b
0282+  11A4             #define	PTSCHIME_(a)	\.db $41,a
0283+  11A4             #define	POINTS_(a)		\.db $44,a
0284+  11A4             #define	PTSDIG_(a)		\.db $43,a
0285+  11A4             
0286+  11A4             ;********************************************************
0287+  11A4             ;* Macros 44-4F: Define temporary execution of CPU code.
0288+  11A4             ;*               The length of bytes to execute is in 
0289+  11A4             ;*               the lower nibble and must be between
0290+  11A4             ;*               4-f. Therefore, number is bytes to 
0291+  11A4             ;*               execute must be between 2 and 13.
0292+  11A4             ;********************************************************
0293+  11A4             #define	EXE_(a)		\#if (a>13)|(a<2)
0294+  11A4             #defcont				\    .error "Macro EXE_: Number of bytes to execute must be between 2-15"
0295+  11A4             #defcont				\#else
0296+  11A4             #defcont				\    .db ($44+a-2)
0297+  11A4             #defcont				\#endif
0298+  11A4             
0299+  11A4             ;********************************************************
0300+  11A4             ;* Macros 50-57:
0301+  11A4             ;********************************************************
0302+  11A4             #define	RAMADD_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0303+  11A4             #defcont				\	.db $50,((a*16)+b) 
0304+  11A4             #defcont				\#else
0305+  11A4             #defcont				\	.error "Macro RAMADD_: Parameters out of range"
0306+  11A4             #defcont				\#endif
0307+  11A4             
0308+  11A4             #define	RAMCPY_(a,b)	\#if (a<16)&(a>=0)&(b<16)&(b>=0)
0309+  11A4             #defcont				\	.db $51,((a*16)+b) 
0310+  11A4             #defcont				\#else
0311+  11A4             #defcont				\	.error "Macro RAMCPY_: Parameters out of range"
0312+  11A4             #defcont				\#endif
0313+  11A4             
0314+  11A4             #define	PRI_(a)		\.db $52,a
0315+  11A4             
0316+  11A4             #define	SLEEP_(a)		\#if (a<16)
0317+  11A4             #defcont				\	.db ($70+a)
0318+  11A4             #defcont				\#else
0319+  11A4             #defcont				\	.db $53,a
0320+  11A4             #defcont				\#endif
0321+  11A4             
0322+  11A4             #define	REMTHREAD_(a,b)	\.db $54,a,b
0323+  11A4             
0324+  11A4             #define  	REMTHREADS_(a,b)	\.db $55,a,b
0325+  11A4             
0326+  11A4             #define 	JSR_(a)		\.db $56 \.dw a
0327+  11A4             #define	JSRD_(a)		\.db $57 \.dw a
0328+  11A4             
0329+  11A4             ;**********************************************************
0330+  11A4             ;* Branch Macros: 58-5B
0331+  11A4             ;**********************************************************
0332+  11A4             
0333+  11A4             
0334+  11A4             ;**********************************************************
0335+  11A4             ;* Macros 5C-5F
0336+  11A4             ;**********************************************************
0337+  11A4             #define	JMPD_(a)		.db $5c \.dw a
0338+  11A4             
0339+  11A4             #define	SWSET_(a)		.db $5d,a
0340+  11A4             #define	SWSET_(a,b)		.db $5d,a,b
0341+  11A4             #define	SWSET_(a,b,c)	.db $5d,a,b,c
0342+  11A4             #define	SWSET_(a,b,c,d)	.db $5d,a,b,c,d
0343+  11A4             
0344+  11A4             #define	SWCLR_(a)		.db $5e,a
0345+  11A4             #define	SWCLR_(a,b)		.db $5e,a,b
0346+  11A4             #define	SWCLR_(a,b,c)	.db $5e,a,b,c
0347+  11A4             #define	SWCLR_(a,b,c,d)	.db $5e,a,b,c,d
0348+  11A4             
0349+  11A4             #define	JMP_(a)		.db $5f \.dw a
0350+  11A4             
0351+  11A4             ;**********************************************************
0352+  11A4             ;* Macro 6X:
0353+  11A4             ;**********************************************************
0354+  11A4             #define	SLEEPI_(a)		.db ($60+a)
0355+  11A4             
0356+  11A4             ;**********************************************************
0357+  11A4             ;* Macro 7X: 
0358+  11A4             ;**********************************************************
0359+  11A4             ;See SLEEP macro previous...
0360+  11A4             
0361+  11A4             ;**********************************************************
0362+  11A4             ;* Macro 8X:
0363+  11A4             ;**********************************************************
0364+  11A4             #define 	JMPR_(a)		.db ($80+((a-$)>>8)) \.dw ((a-$)&$ff)
0365+  11A4             
0366+  11A4             ;**********************************************************
0367+  11A4             ;* Macro 9X:
0368+  11A4             ;**********************************************************
0369+  11A4             #define 	JSRR_(a)		.db ($90+((a-$)>>8)) \.dw ((a-$)&$ff)
0370+  11A4             
0371+  11A4             ;**********************************************************
0372+  11A4             ;* Macro AX:
0373+  11A4             ;**********************************************************
0374+  11A4             #define 	JSRDR_(a)		.db ($a0+((a-$)>>8)) \.dw ((a-$)&$ff)
0375+  11A4             
0376+  11A4             ;**********************************************************
0377+  11A4             ;* Macro BX: Add NextByte to RAM LSD(command) 
0378+  11A4             ;**********************************************************
0379+  11A4             #define 	ADDRAM_(ramloc,data)	.db ($b0+ramloc),data
0380+  11A4             
0381+  11A4             ;**********************************************************
0382+  11A4             ;* Macro CX: Set NextByte to RAM LSD(command) 
0383+  11A4             ;**********************************************************
0384+  11A4             #define 	SETRAM_(ramloc,data)	.db ($c0+ramloc),data
0385+  11A4             
0386+  11A4             ;**********************************************************
0387+  11A4             ;* Macro DX: Play Index Sound (NextByte)Times  
0388+  11A4             ;**********************************************************
0389+  11A4             #define	RSND_(snd,times)		.db $d0+snd,times
0390+  11A4             
0391+  11A4             ;**********************************************************
0392+  11A4             ;* Macro EX,FX: Play Index Sound (NextByte)Times  
0393+  11A4             ;**********************************************************
0394+  11A4             #define	SND_(a)			.db $e0+a
0019   11A4             
0020   11A4             ;Requires game definition file, link to the export file
0021   11A4             #include "gamerom.exp"
0001+  11A4             .module noname
0002+  11A4             
0003+  11A4             gr_gamenumber    .EQU  $e000
0004+  11A4             gr_romrevision   .EQU  $e002
0005+  11A4             gr_cmoscsum      .EQU  $e003
0006+  11A4             gr_backuphstd    .EQU  $e005
0007+  11A4             gr_replay1       .EQU  $e006
0008+  11A4             gr_replay2       .EQU  $e007
0009+  11A4             gr_replay3       .EQU  $e008
0010+  11A4             gr_replay4       .EQU  $e009
0011+  11A4             gr_matchenable   .EQU  $e00a
0012+  11A4             gr_specialaward  .EQU  $e00b
0013+  11A4             gr_replayaward   .EQU  $e00c
0014+  11A4             gr_maxplumbbobtilts .EQU  $e00d
0015+  11A4             gr_numberofballs .EQU  $e00e
0016+  11A4             gr_gameadjust1   .EQU  $e00f
0017+  11A4             gr_gameadjust2   .EQU  $e010
0018+  11A4             gr_gameadjust3   .EQU  $e011
0019+  11A4             gr_gameadjust4   .EQU  $e012
0020+  11A4             gr_gameadjust5   .EQU  $e013
0021+  11A4             gr_gameadjust6   .EQU  $e014
0022+  11A4             gr_gameadjust7   .EQU  $e015
0023+  11A4             gr_gameadjust8   .EQU  $e016
0024+  11A4             gr_gameadjust9   .EQU  $e017
0025+  11A4             gr_hstdcredits   .EQU  $e018
0026+  11A4             gr_max_extraballs .EQU  $e019
0027+  11A4             gr_max_credits   .EQU  $e01a
0028+  11A4             gr_pricingdata   .EQU  $e01b
0029+  11A4             gr_maxthreads    .EQU  $e04b
0030+  11A4             gr_extendedromtest .EQU  $e04c
0031+  11A4             gr_lastswitch    .EQU  $e04d
0032+  11A4             gr_numplayers    .EQU  $e04e
0033+  11A4             gr_lamptable_ptr .EQU  $e04f
0034+  11A4             gr_switchtable_ptr .EQU  $e051
0035+  11A4             gr_soundtable_ptr .EQU  $e053
0036+  11A4             gr_lampflashrate .EQU  $e055
0037+  11A4             gr_specialawardsound .EQU  $e056
0038+  11A4             gr_p1_startsound .EQU  $e057
0039+  11A4             gr_p2_startsound .EQU  $e058
0040+  11A4             gr_p3_startsound .EQU  $e059
0041+  11A4             gr_p4_startsound .EQU  $e05a
0042+  11A4             gr_matchsound    .EQU  $e05b
0043+  11A4             gr_highscoresound .EQU  $e05c
0044+  11A4             gr_gameoversound .EQU  $e05d
0045+  11A4             gr_creditsound   .EQU  $e05e
0046+  11A4             gr_eb_lamp_1     .EQU  $e05f
0047+  11A4             gr_eb_lamp_2     .EQU  $e060
0048+  11A4             gr_lastlamp      .EQU  $e061
0049+  11A4             gr_hs_lamp       .EQU  $e062
0050+  11A4             gr_match_lamp    .EQU  $e063
0051+  11A4             gr_bip_lamp      .EQU  $e064
0052+  11A4             gr_gameover_lamp .EQU  $e065
0053+  11A4             gr_tilt_lamp     .EQU  $e066
0054+  11A4             gr_gameoverthread_ptr .EQU  $e067
0055+  11A4             gr_switchtypetable .EQU  $e069
0056+  11A4             gr_playerstartdata .EQU  $e077
0057+  11A4             gr_playerresetdata .EQU  $e08b
0058+  11A4             gr_switch_event  .EQU  $e09f
0059+  11A4             gr_sound_event   .EQU  $e0a1
0060+  11A4             gr_score_event   .EQU  $e0a3
0061+  11A4             gr_eb_event      .EQU  $e0a5
0062+  11A4             gr_special_event .EQU  $e0a7
0063+  11A4             gr_macro_event   .EQU  $e0a9
0064+  11A4             gr_ready_event   .EQU  $e0ab
0065+  11A4             gr_addplayer_event .EQU  $e0ad
0066+  11A4             gr_gameover_event .EQU  $e0af
0067+  11A4             gr_hstdtoggle_event .EQU  $e0b1
0068+  11A4             gr_reset_hook_ptr .EQU  $e0b3
0069+  11A4             gr_main_hook_ptr .EQU  $e0b5
0070+  11A4             gr_coin_hook_ptr .EQU  $e0b7
0071+  11A4             gr_game_hook_ptr .EQU  $e0b9
0072+  11A4             gr_player_hook_ptr .EQU  $e0bb
0073+  11A4             gr_outhole_hook_ptr .EQU  $e0bd
0074+  11A4             gr_irq_entry     .EQU  $e0bf
0075+  11A4             gr_swi_entry     .EQU  $e0c2
0076+  11A4             gr_rts           .EQU  $e0c5
0077+  11A4             gameover_entry   .EQU  $e0c7
0078+  11A4             lampgrouptable   .EQU  $e0c7
0079+  11A4             switchtable      .EQU  $e0c7
0080+  11A4             switchtable_end  .EQU  $e0c7
0081+  11A4             soundtable       .EQU  $e0c7
0022   11A4             
0023   11A4             ;*****************************************************************************
0024   11A4             ;* Some Global Equates
0025   11A4             ;*****************************************************************************
0026   11A4             
0027   11A4             irq_per_minute =	$0EFF
0028   11A4             
0029   11A4             ;*****************************************************************************
0030   11A4             ;*Program starts at $e800 for standard games... we can expand this later..
0031   11A4             ;*****************************************************************************
0032   E800             	.org $E800
0033   E800             
0034   E800             ;**************************************
0035   E800             ;* Main Entry from Reset
0036   E800             ;**************************************
0037   E800 0F          reset			sei	
0038   E801 8E F1 0D    			lds	#pia_ddr_data-1		;Point stack to start of init data
0039   E804 C6 0A       			ldab	#$0A				;Number of PIA sections to initialize
0040   E806 CE 21 00    			ldx	#pia_sound_data		;Start with the lowest PIA
0041   E809 86 04       			ldaa	#$04
0042   E80B A7 01       			staa	pia_control,X		;Select control register
0043   E80D 86 7F       			ldaa	#$7F				
0044   E80F A7 00       			staa	pia_pir,X
0045   E811 DF 9A       			stx	temp1
0046   E813 9C 9A       			cpx	temp1
0047   E815             			ifeq
0047   E815             
0047   E815 26 FE       
0048   E817             				begin
0048   E817             
0049   E817 DE 9A       					ldx	temp1			;Get next PIA address base
0050   E819             					begin
0050   E819             
0051   E819 6F 01       						clr	pia_control,X	;Initialize all PIA data direction registers
0052   E81B 32          						pula				;Get DDR data
0053   E81C A7 00       						staa	pia_pir,X
0054   E81E 32          						pula	
0055   E81F A7 01       						staa	pia_control,X	;Get Control Data
0056   E821 8C 21 00    						cpx	#pia_sound_data	;This is the last PIA to do in Level 7 games
0057   E824             						ifne
0057   E824             
0057   E824 27 FE       
0058   E826 6F 00       							clr	pia_pir,X		;If we are on the sound PIA, then clear the
0059   E828             											;peripheral interface register 
0060   E828             						endif
0060   E828             
0060   E828             
0060   E828             
0060   E828             
0060   E828             
0060   E828~            						endif
0060   E828~            						endif
0060   E828             
0060   E828~            						endif
0060   E828~            						endif
0060   E828             
0060   E825             
0060   E825 02          
0060   E826             
0060   E826             
0060   E826~            						endif
0060   E826~            						endif
0060   E826~            						endif
0060   E826             
0060   E828             
0060   E828~            						endif
0060   E828~            						endif
0060   E828             
0061   E828 08          						inx	
0062   E829 08          						inx	
0063   E82A 5A          						decb	
0064   E82B 27 13       						beq	init_done
0065   E82D C5 01       						bitb	#$01
0066   E82F             					eqend
0066   E82F             
0066   E82F             
0066   E82F~            					eqend
0066   E82F~            					eqend
0066   E82F~            					eqend
0066   E82F             
0066   E82F 26 E8       
0066   E831             
0066   E831~            					eqend
0066   E831~            					eqend
0066   E831             
0067   E831 96 9A       					ldaa	temp1			;Get current PIA address MSB
0068   E833 48          					asla	
0069   E834 84 1F       					anda	#$1F			;Move to next PIA
0070   E836 8A 20       					oraa	#$20
0071   E838 97 9A       					staa	temp1			;Store it
0072   E83A             				loopend
0072   E83A             
0072   E83A             
0072   E83A~            				loopend
0072   E83A~            				loopend
0072   E83A~            				loopend
0072   E83A             
0072   E83A 20 DB       
0072   E83C             
0072   E83C~            				loopend
0072   E83C~            				loopend
0072   E83C             
0073   E83C             			endif
0073   E83C             
0073   E83C             
0073   E83C             
0073   E83C             
0073   E83C             
0073   E83C~            			endif
0073   E83C~            			endif
0073   E83C             
0073   E83C~            			endif
0073   E83C~            			endif
0073   E83C             
0073   E816             
0073   E816 25          
0073   E817             
0073   E817             
0073   E817~            			endif
0073   E817~            			endif
0073   E817~            			endif
0073   E817             
0073   E83C             
0073   E83C~            			endif
0073   E83C~            			endif
0073   E83C             
0074   E83C 7E FF 2B    			jmp	diag					;NMI Entry
0075   E83F             			
0076   E83F             ;***************************************************
0077   E83F             ;* System Checksum #1: Set to make ROM csum from
0078   E83F             ;*                     $E800-$EFFF equal to $00
0079   E83F             ;***************************************************		
0080   E83F             			
0081   E83F 0B          csum1			.db $0B
0082   E840             			
0083   E840             ;***************************************************************
0084   E840             ;* PIA initialization is done now, set up the vm etc.
0085   E840             ;***************************************************************			
0086   E840 CE 13 FF    init_done		ldx	#$13FF				;\
0087   E843 35          			txs						;|
0088   E844             			begin						;|
0088   E844             
0089   E844 6F 00       				clr	$00,X				;Clear RAM 1000-13FF
0090   E846 09          				dex					;|
0091   E847 8C 0F FF    				cpx	#$0FFF			;|
0092   E84A             			eqend						;/
0092   E84A             
0092   E84A             
0092   E84A~            			eqend						;/
0092   E84A~            			eqend						;/
0092   E84A~            			eqend						;/
0092   E84A             
0092   E84A 26 F8       
0092   E84C             
0092   E84C~            			eqend						;/
0092   E84C~            			eqend						;/
0092   E84C             
0093   E84C BD EF 22    			jsr	setup_vm_stack			;Initially Set up the VM
0094   E84F B6 E0 55    			ldaa	gr_lampflashrate			;Get Lamp Flash Rate
0095   E852 97 B5       			staa	lamp_flash_rate
0096   E854 CE 11 00    			ldx	#switch_queue
0097   E857 DF 96       			stx	switch_queue_pointer
0098   E859 CE 11 18    			ldx	#sol_queue				;Works from top down
0099   E85C DF 98       			stx	solenoid_queue_pointer		;Set up Solenoid Buffer Pointer
0100   E85E CE 01 7D    			ldx	#adj_cmoscsum			;CMOS Checksum
0101   E861 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
0102   E864 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
0103   E867 1B          			aba	
0104   E868 81 57       			cmpa	#$57					;CSUM CMOS RAM
0105   E86A             			ifne
0105   E86A             
0105   E86A 27 FE       
0106   E86C BD EF 7D    clear_all			jsr	factory_zeroaudits		;Restore Factory Settings and Zero Audit Totals
0107   E86F             			endif
0107   E86F             
0107   E86F             
0107   E86F             
0107   E86F             
0107   E86F             
0107   E86F~            			endif
0107   E86F~            			endif
0107   E86F             
0107   E86F~            			endif
0107   E86F~            			endif
0107   E86F             
0107   E86B             
0107   E86B 03          
0107   E86C             
0107   E86C             
0107   E86C~            			endif
0107   E86C~            			endif
0107   E86C~            			endif
0107   E86C             
0107   E86F             
0107   E86F~            			endif
0107   E86F~            			endif
0107   E86F             
0108   E86F CE 01 6E    			ldx	#aud_currentcredits		;Current Credits
0109   E872 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
0110   E875 97 5A       			staa	cred_b0
0111   E877 BD FE 1F    			jsr	cmos_a				;CMOS, X -> A Audit 50 Command
0112   E87A 6F 00       			clr	$00,X
0113   E87C 6F 01       			clr	$01,X
0114   E87E 81 15       			cmpa	#$15					;Auto-Cycle?
0115   E880             			ifeq
0115   E880             
0115   E880 26 FE       
0116   E882 CE FE AC    				ldx	#st_autocycle			;Set-Up Auto Cycle Mode
0117   E885 BD EA C4    				jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
0118   E888             			endif
0118   E888             
0118   E888             
0118   E888             
0118   E888             
0118   E888             
0118   E888~            			endif
0118   E888~            			endif
0118   E888             
0118   E888~            			endif
0118   E888~            			endif
0118   E888             
0118   E881             
0118   E881 06          
0118   E882             
0118   E882             
0118   E882~            			endif
0118   E882~            			endif
0118   E882~            			endif
0118   E882             
0118   E888             
0118   E888~            			endif
0118   E888~            			endif
0118   E888             
0119   E888 81 45       			cmpa	#$45
0120   E88A 27 E0       			beq	clear_all				;Restore Factory Setting/Zero Audits
0121   E88C 81 35       			cmpa	#$35
0122   E88E             			ifeq						;Zero Audits
0122   E88E             
0122   E88E 26 FE       
0123   E890 BD EF 6F    				jsr	reset_audits			;(Reset Audits 0100-0165)
0124   E893             			endif
0124   E893             
0124   E893             
0124   E893             
0124   E893             
0124   E893             
0124   E893~            			endif
0124   E893~            			endif
0124   E893             
0124   E893~            			endif
0124   E893~            			endif
0124   E893             
0124   E88F             
0124   E88F 03          
0124   E890             
0124   E890             
0124   E890~            			endif
0124   E890~            			endif
0124   E890~            			endif
0124   E890             
0124   E893             
0124   E893~            			endif
0124   E893~            			endif
0124   E893             
0125   E893 BD F7 2C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
0126   E896 7A 00 61    			dec	switch_debounced
0127   E899 BD F8 9A    			jsr	clear_displays			;Blank all Player Displays (buffer 0)
0128   E89C 97 3B       			staa	score_p1_b0+3			;Set player one score to '00'
0129   E89E 0E          			cli	
0130   E89F FE E0 B3    			ldx	gr_reset_hook_ptr
0131   E8A2 AD 00       			jsr	$00,X					;JSR GameROM
0132   E8A4 CE FA 34    			ldx	#powerup_init			;Jump to Game Over Mode
0133   E8A7 BD EA C4    			jsr	newthread_06			;Start the thread
0134   E8AA 7E E9 FC    			jmp	check_threads			;Run the loop
0135   E8AD             			
0136   E8AD             ;************************************************************************************
0137   E8AD             ;* Begin Main Loop - This is the end of all initialization and the start of the loop
0138   E8AD             ;*                   that runs consistently to support the VM.
0139   E8AD             ;************************************************************************************			
0140   E8AD CE 00 AD    main			ldx	#vm_base
0141   E8B0 DF B3       			stx	vm_tail_thread			;Current VM Routine being run
0142   E8B2 DF B1       			stx	current_thread			;Current VM Routine being run
0143   E8B4 FE E0 B5    			ldx	gr_main_hook_ptr
0144   E8B7 AD 00       			jsr	$00,X					;Game ROM:Main Loop Hook
0145   E8B9 0F          			sei	
0146   E8BA 96 95       			ldaa	irqcount16				;IRQ Counter, Incremented every 16 IRQ's
0147   E8BC 7F 00 95    			clr	irqcount16				;Reset the counter
0148   E8BF 0E          			cli	
0149   E8C0 97 AC       			staa	irqcount				;Put the data into counter holder, use later
0150   E8C2 96 CB       			ldaa	flags_selftest			;See if we are in test mode
0151   E8C4             			ifne
0151   E8C4             
0151   E8C4 27 FE       
0152   E8C6 7E E9 46    				jmp	vm_irqcheck				;If so, then skip a bunch of stuff...
0153   E8C9             			endif
0153   E8C9             
0153   E8C9             
0153   E8C9             
0153   E8C9             
0153   E8C9             
0153   E8C9~            			endif
0153   E8C9~            			endif
0153   E8C9             
0153   E8C9~            			endif
0153   E8C9~            			endif
0153   E8C9             
0153   E8C5             
0153   E8C5 03          
0153   E8C6             
0153   E8C6             
0153   E8C6~            			endif
0153   E8C6~            			endif
0153   E8C6~            			endif
0153   E8C6             
0153   E8C9             
0153   E8C9~            			endif
0153   E8C9~            			endif
0153   E8C9             
0154   E8C9 B6 28 01    			ldaa	pia_disp_digit_ctrl		;Check the Advance Switch
0155   E8CC             			ifmi
0155   E8CC             
0155   E8CC 2A FE       
0156   E8CE CE FC 23    				ldx	#selftest_entry
0157   E8D1 BD EA C4    				jsr	newthread_06			;Create the diagnostics thread
0158   E8D4             			endif
0158   E8D4             
0158   E8D4             
0158   E8D4             
0158   E8D4             
0158   E8D4             
0158   E8D4~            			endif
0158   E8D4~            			endif
0158   E8D4             
0158   E8D4~            			endif
0158   E8D4~            			endif
0158   E8D4             
0158   E8CD             
0158   E8CD 06          
0158   E8CE             
0158   E8CE             
0158   E8CE~            			endif
0158   E8CE~            			endif
0158   E8CE~            			endif
0158   E8CE             
0158   E8D4             
0158   E8D4~            			endif
0158   E8D4~            			endif
0158   E8D4             
0159   E8D4 CE 00 00    checkswitch		ldx	#ram_base
0160   E8D7             			begin
0160   E8D7             
0161   E8D7 A6 81       				ldaa	switch_b4,X
0162   E8D9 43          				coma	
0163   E8DA A4 71       				anda	switch_pending,X
0164   E8DC             				ifne
0164   E8DC             
0164   E8DC 27 FE       
0165   E8DE BD EE 61    					jsr	check_sw_close				;Switch Closed?
0166   E8E1             				endif
0166   E8E1             
0166   E8E1             
0166   E8E1             
0166   E8E1             
0166   E8E1             
0166   E8E1~            				endif
0166   E8E1~            				endif
0166   E8E1             
0166   E8E1~            				endif
0166   E8E1~            				endif
0166   E8E1             
0166   E8DD             
0166   E8DD 03          
0166   E8DE             
0166   E8DE             
0166   E8DE~            				endif
0166   E8DE~            				endif
0166   E8DE~            				endif
0166   E8DE             
0166   E8E1             
0166   E8E1~            				endif
0166   E8E1~            				endif
0166   E8E1             
0167   E8E1 A6 81       				ldaa	switch_b4,X
0168   E8E3 A4 79       				anda	switch_aux,X
0169   E8E5             				ifne
0169   E8E5             
0169   E8E5 27 FE       
0170   E8E7 BD EE BB    					jsr	check_sw_open				;Switch Open?
0171   E8EA             				endif
0171   E8EA             
0171   E8EA             
0171   E8EA             
0171   E8EA             
0171   E8EA             
0171   E8EA~            				endif
0171   E8EA~            				endif
0171   E8EA             
0171   E8EA~            				endif
0171   E8EA~            				endif
0171   E8EA             
0171   E8E6             
0171   E8E6 03          
0171   E8E7             
0171   E8E7             
0171   E8E7~            				endif
0171   E8E7~            				endif
0171   E8E7~            				endif
0171   E8E7             
0171   E8EA             
0171   E8EA~            				endif
0171   E8EA~            				endif
0171   E8EA             
0172   E8EA 08          				inx	
0173   E8EB 8C 00 08    				cpx	#$0008
0174   E8EE             			eqend
0174   E8EE             
0174   E8EE             
0174   E8EE~            			eqend
0174   E8EE~            			eqend
0174   E8EE~            			eqend
0174   E8EE             
0174   E8EE 26 E7       
0174   E8F0             
0174   E8F0~            			eqend
0174   E8F0~            			eqend
0174   E8F0             
0175   E8F0 D6 D6       time			ldab	flag_timer_bip			;Ball Timer Flag
0176   E8F2 27 19       			beq	switches
0177   E8F4 96 AC       			ldaa	irqcount				;Number of IRQ's since last
0178   E8F6 DE D4       			ldx	minutetimer
0179   E8F8 BD EE FF    			jsr	xplusa				;X = X + A
0180   E8FB DF D4       			stx	minutetimer
0181   E8FD 8C 0E FF    			cpx	#irq_per_minute
0182   E900 2B 0B       			bmi	switches				;Not 1 minute yet
0183   E902 5F          			clrb	
0184   E903 D7 D4       			stab	minutetimer				;Clear the Minute Timer
0185   E905 D7 D5       			stab	minutetimer+1
0186   E907 CE 01 26    			ldx	#aud_avgballtime			;AUD: Ball time in Minutes
0187   E90A BD F7 7F    			jsr	ptrx_plus_1				;Add 1 to data at X
0188   E90D             			
0189   E90D CE 11 00    switches		ldx	#switch_queue
0190   E910 9C 96       next_sw		cpx	switch_queue_pointer		;Check Buffer Pointer
0191   E912             			ifne
0191   E912             
0191   E912 27 FE       
0192   E914 A6 00       				ldaa	$00,X					;Command Timer
0193   E916 90 AC       				suba	irqcount				;Subtract our IRQ's
0194   E918             				iflo						;Ready to run?
0194   E918             
0194   E918 22 FE       
0195   E91A DF A8       					stx	sys_temp_w3				;Yes!
0196   E91C A6 01       					ldaa	$01,X					;Encoded Switch #
0197   E91E 97 A5       					staa	sw_encoded
0198   E920 7F 00 A0    					clr	sys_temp1
0199   E923 16          					tab	
0200   E924 57          					asrb	
0201   E925 57          					asrb	
0202   E926 57          					asrb	
0203   E927 D7 A1       					stab	sys_temp2
0204   E929 BD EB 8E    					jsr	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
0205   E92C D7 A2       					stab	sys_temp3
0206   E92E DE A0       					ldx	sys_temp1
0207   E930 A6 61       					ldaa	switch_debounced,X
0208   E932 97 A4       					staa	sys_temp5
0209   E934 BD EE 04    					jsr	sw_down
0210   E937 DE A8       					ldx	sys_temp_w3
0211   E939 24 07       					bcc	sw_break
0212   E93B BD EF 0F    					jsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
0213   E93E 20 D0       					bra	next_sw
0214   E940             				endif
0214   E940             
0214   E940             
0214   E940             
0214   E940             
0214   E940             
0214   E940~            				endif
0214   E940~            				endif
0214   E940             
0214   E940~            				endif
0214   E940~            				endif
0214   E940             
0214   E919             
0214   E919 26          
0214   E91A             
0214   E91A             
0214   E91A~            				endif
0214   E91A~            				endif
0214   E91A~            				endif
0214   E91A             
0214   E940             
0214   E940~            				endif
0214   E940~            				endif
0214   E940             
0215   E940 A7 00       				staa	$00,X
0216   E942 08          sw_break			inx	
0217   E943 08          				inx	
0218   E944 20 CA       				bra	next_sw
0219   E946             			endif
0219   E946             
0219   E946             
0219   E946             
0219   E946             
0219   E946             
0219   E946~            			endif
0219   E946~            			endif
0219   E946             
0219   E946~            			endif
0219   E946~            			endif
0219   E946             
0219   E913             
0219   E913 32          
0219   E914             
0219   E914             
0219   E914~            			endif
0219   E914~            			endif
0219   E914~            			endif
0219   E914             
0219   E946             
0219   E946~            			endif
0219   E946~            			endif
0219   E946             
0220   E946             
0221   E946             			;We come back in here if we are in auto-cycle mode...
0222   E946             						
0223   E946 DE AD       vm_irqcheck		ldx	vm_base				;Check the start of the vm loop
0224   E948             			begin
0224   E948             
0225   E948 27 0D       				beq	flashlamp
0226   E94A A6 02       				ldaa	$02,X
0227   E94C 90 AC       				suba	irqcount			;Subtract the number of IRQ loops completed
0228   E94E             				ifcs
0228   E94E             
0228   E94E 24 FE       
0229   E950 4F          					clra					;Clear it so it can be run next loop
0230   E951             				endif
0230   E951             
0230   E951             
0230   E951             
0230   E951             
0230   E951             
0230   E951~            				endif
0230   E951~            				endif
0230   E951             
0230   E951~            				endif
0230   E951~            				endif
0230   E951             
0230   E94F             
0230   E94F 01          
0230   E950             
0230   E950             
0230   E950~            				endif
0230   E950~            				endif
0230   E950~            				endif
0230   E950             
0230   E951             
0230   E951~            				endif
0230   E951~            				endif
0230   E951             
0231   E951 A7 02       				staa	$02,X
0232   E953 EE 00       				ldx	$00,X
0233   E955             			loopend
0233   E955             
0233   E955             
0233   E955~            			loopend
0233   E955~            			loopend
0233   E955~            			loopend
0233   E955             
0233   E955 20 F1       
0233   E957             
0233   E957~            			loopend
0233   E957~            			loopend
0233   E957             
0234   E957             			
0235   E957 96 B6       flashlamp		ldaa	lamp_flash_count		;Timer for Flashing Lamps
0236   E959 90 AC       			suba	irqcount			;Subtract the IRQ's
0237   E95B             			iflo
0237   E95B             
0237   E95B 22 FE       
0238   E95D CE 00 00    				ldx	#ram_base
0239   E960 C6 08       				ldab	#$08
0240   E962             				begin
0240   E962             
0241   E962 A6 10       					ldaa	lampbuffer0,X			;Invert Selected Lamps.
0242   E964 A8 30       					eora	lampflashflag,X
0243   E966 A7 10       					staa	lampbuffer0,X
0244   E968 08          					inx	
0245   E969 5A          					decb	
0246   E96A             				eqend
0246   E96A             
0246   E96A             
0246   E96A~            				eqend
0246   E96A~            				eqend
0246   E96A~            				eqend
0246   E96A             
0246   E96A 26 F6       
0246   E96C             
0246   E96C~            				eqend
0246   E96C~            				eqend
0246   E96C             
0247   E96C 96 B5       				ldaa	lamp_flash_rate		;Get Reset Value
0248   E96E             			endif
0248   E96E             
0248   E96E             
0248   E96E             
0248   E96E             
0248   E96E             
0248   E96E~            			endif
0248   E96E~            			endif
0248   E96E             
0248   E96E~            			endif
0248   E96E~            			endif
0248   E96E             
0248   E95C             
0248   E95C 11          
0248   E95D             
0248   E95D             
0248   E95D~            			endif
0248   E95D~            			endif
0248   E95D~            			endif
0248   E95D             
0248   E96E             
0248   E96E~            			endif
0248   E96E~            			endif
0248   E96E             
0249   E96E 97 B6       			staa	lamp_flash_count			;Reset the Lamp Timer
0250   E970             			
0251   E970 96 94       solq			ldaa	solenoid_counter			;Solenoid Counter
0252   E972             			ifeq						;Skip if Counter hasnt Expired
0252   E972             
0252   E972 26 FE       
0253   E974 CE 11 18    				ldx	#sol_queue				;Start at bottom of Queue
0254   E977 9C 98       				cpx	solenoid_queue_pointer		
0255   E979             				ifne						;Do we have any to do?
0255   E979             
0255   E979 27 FE       
0256   E97B A6 00       					ldaa	$00,X					;Takes lowest Solenoid # into A
0257   E97D             											;We only do 1 solenoid at a time
0258   E97D             					begin
0258   E97D             
0259   E97D E6 01       						ldab	$01,X					;Moves the rest down into place
0260   E97F E7 00       						stab	$00,X
0261   E981 08          						inx	
0262   E982 9C 98       						cpx	solenoid_queue_pointer
0263   E984             					eqend
0263   E984             
0263   E984             
0263   E984~            					eqend
0263   E984~            					eqend
0263   E984~            					eqend
0263   E984             
0263   E984 26 F7       
0263   E986             
0263   E986~            					eqend
0263   E986~            					eqend
0263   E986             
0264   E986 09          					dex	
0265   E987 DF 98       					stx	solenoid_queue_pointer		;Adjust Pointer to end of list
0266   E989 BD EB 47    					jsr	set_solenoid			;Turn On/Off Solenoid (Solenoid # in A)
0267   E98C             				endif
0267   E98C             
0267   E98C             
0267   E98C             
0267   E98C             
0267   E98C             
0267   E98C~            				endif
0267   E98C~            				endif
0267   E98C             
0267   E98C~            				endif
0267   E98C~            				endif
0267   E98C             
0267   E97A             
0267   E97A 11          
0267   E97B             
0267   E97B             
0267   E97B~            				endif
0267   E97B~            				endif
0267   E97B~            				endif
0267   E97B             
0267   E98C             
0267   E98C~            				endif
0267   E98C~            				endif
0267   E98C             
0268   E98C             			endif
0268   E98C             
0268   E98C             
0268   E98C             
0268   E98C             
0268   E98C             
0268   E98C~            			endif
0268   E98C~            			endif
0268   E98C             
0268   E98C~            			endif
0268   E98C~            			endif
0268   E98C             
0268   E973             
0268   E973 18          
0268   E974             
0268   E974             
0268   E974~            			endif
0268   E974~            			endif
0268   E974~            			endif
0268   E974             
0268   E98C             
0268   E98C~            			endif
0268   E98C~            			endif
0268   E98C             
0269   E98C             			
0270   E98C 96 C1       snd_queue		ldaa	sys_soundflags			;Sound Flag??
0271   E98E 27 55       			beq	doscoreq				;If zero, time to check for the score queue sound/pts
0272   E990 96 BA       			ldaa	cur_sndflags
0273   E992 85 10       			bita	#$10					;Is this an immediate or timed sound?
0274   E994             			ifne
0274   E994             
0274   E994 27 FE       
0275   E996 F6 21 02    				ldab	pia_comma_data			;Do immediate, but only if sound board is not busy.
0276   E999 C4 20       				andb	#$20
0277   E99B 27 5F       				beq	check_threads			;Get Outta Here
0278   E99D             			else
0278   E99D             
0278   E99D             
0278   E99D             
0278   E99D             
0278   E995             
0278   E995             
0278   E995             
0278   E995~            			else
0278   E995~            			else
0278   E995~            			else
0278   E995~            			else
0278   E995             
0278   E995~            			else
0278   E995~            			else
0278   E995~            			else
0278   E995~            			else
0278   E995             
0278   E995             
0278   E995 09          
0278   E99D             
0278   E99D 20 FE       
0278   E99F             
0278   E99F             
0278   E99F             
0278   E99F~            			else
0278   E99F~            			else
0278   E99F~            			else
0278   E99F~            			else
0278   E99F~            			else
0278   E99F             
0278   E99F~            			else
0278   E99F~            			else
0278   E99F             
0278   E99F~            			else
0278   E99F~            			else
0278   E99F             
0279   E99F 96 BE       				ldaa	soundirqcount+1			;LSB Sound IRQ Counter
0280   E9A1 90 AC       				suba	irqcount				;Subtract the number of IRQ's that have cycled
0281   E9A3 97 BE       				staa	soundirqcount+1
0282   E9A5 96 BD       				ldaa	soundirqcount			;Update the counter
0283   E9A7 82 00       				sbca	#$00
0284   E9A9 97 BD       				staa	soundirqcount			;Carry over to MSB of couter as well
0285   E9AB 24 4F       				bcc	check_threads			;Leave if counter has not gone under zero.
0286   E9AD             			endif
0286   E9AD             
0286   E9AD             
0286   E9AD             
0286   E9AD             
0286   E9AD             
0286   E9AD~            			endif
0286   E9AD~            			endif
0286   E9AD             
0286   E9AD~            			endif
0286   E9AD~            			endif
0286   E9AD             
0286   E99E             
0286   E99E 0E          
0286   E99F             
0286   E99F             
0286   E99F~            			endif
0286   E99F~            			endif
0286   E99F~            			endif
0286   E99F             
0286   E9AD             
0286   E9AD~            			endif
0286   E9AD~            			endif
0286   E9AD             
0287   E9AD 86 7F       			ldaa	#$7F
0288   E9AF BD ED A0    			jsr	send_snd			;Send A->Sound Board (mute?)
0289   E9B2 96 BA       			ldaa	cur_sndflags		;Is this a simple sound
0290   E9B4             			ifpl					;yes
0290   E9B4             
0290   E9B4 2B FE       
0291   E9B6 7A 00 B8    				dec	soundcount
0292   E9B9 27 1C       				beq	_sndnext			;Sound Repeat Counter
0293   E9BB D6 C1       				ldab	sys_soundflags		;
0294   E9BD             				ifpl
0294   E9BD             
0294   E9BD 2B FE       
0295   E9BF DE BF       					ldx	soundindex_com
0296   E9C1 DF BD       					stx	soundirqcount
0297   E9C3 96 B9       					ldaa	lastsound
0298   E9C5 BD ED 9E    					jsr	send_snd_save		;Send the Command, Save in 'lastsound'
0299   E9C8 20 32       					bra	check_threads		;Get Outta here.
0300   E9CA             				endif
0300   E9CA             
0300   E9CA             
0300   E9CA             
0300   E9CA             
0300   E9CA             
0300   E9CA~            				endif
0300   E9CA~            				endif
0300   E9CA             
0300   E9CA~            				endif
0300   E9CA~            				endif
0300   E9CA             
0300   E9BE             
0300   E9BE 0B          
0300   E9BF             
0300   E9BF             
0300   E9BF~            				endif
0300   E9BF~            				endif
0300   E9BF~            				endif
0300   E9BF             
0300   E9CA             
0300   E9CA~            				endif
0300   E9CA~            				endif
0300   E9CA             
0301   E9CA 8A 80       				oraa	#$80
0302   E9CC 97 BA       				staa	cur_sndflags		;make it a complex sound now.
0303   E9CE DE BF       				ldx	soundindex_com
0304   E9D0 DF BB       				stx	soundptr
0305   E9D2             			endif
0305   E9D2             
0305   E9D2             
0305   E9D2             
0305   E9D2             
0305   E9D2             
0305   E9D2~            			endif
0305   E9D2~            			endif
0305   E9D2             
0305   E9D2~            			endif
0305   E9D2~            			endif
0305   E9D2             
0305   E9B5             
0305   E9B5 1C          
0305   E9B6             
0305   E9B6             
0305   E9B6~            			endif
0305   E9B6~            			endif
0305   E9B6~            			endif
0305   E9B6             
0305   E9D2             
0305   E9D2~            			endif
0305   E9D2~            			endif
0305   E9D2             
0306   E9D2 BD ED A7    			jsr	do_complex_snd
0307   E9D5 20 25       			bra	check_threads		;Get Outta Here.
0308   E9D7 D6 C6       _sndnext		ldab	next_sndcnt				;Here if we are done iterating the sound command.
0309   E9D9 27 0A       			beq	doscoreq			;Check the scoring queue
0310   E9DB 96 C7       			ldaa	next_sndcmd
0311   E9DD BD ED 53    			jsr	isnd_mult			;Play Sound Index(A),(B)Times
0312   E9E0 7F 00 C6    			clr	next_sndcnt
0313   E9E3 20 17       			bra	check_threads		;Get Outta Here.
0314   E9E5             			
0315   E9E5 7F 00 C1    doscoreq		clr	sys_soundflags		;Reset the Sound Flag??
0316   E9E8 CE 11 27    			ldx	#$1127			;See if there is something in this stack
0317   E9EB 86 08       			ldaa	#$08
0318   E9ED             			begin
0318   E9ED             
0319   E9ED 08          				inx	
0320   E9EE 4A          				deca	
0321   E9EF 2B 0B       				bmi	check_threads		;Nuttin' Honey, Skip this Sound Crap!
0322   E9F1 E6 00       				ldab	$00,X
0323   E9F3             			neend					;Nuttin' Honey, Check next Entry!
0323   E9F3             
0323   E9F3             
0323   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
0323   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
0323   E9F3~            			neend					;Nuttin' Honey, Check next Entry!
0323   E9F3             
0323   E9F3 27 F8       
0323   E9F5             
0323   E9F5~            			neend					;Nuttin' Honey, Check next Entry!
0323   E9F5~            			neend					;Nuttin' Honey, Check next Entry!
0323   E9F5             
0324   E9F5 6A 00       			dec	$00,X				;Re-Adjust the Sound Command So Sound #00 will still work!
0325   E9F7 8A 08       			oraa	#$08
0326   E9F9 BD EB FE    			jsr	dsnd_pts			;Add Points(A),Play Digit Sound
0327   E9FC             			
0328   E9FC CE 00 AD    check_threads	ldx	#vm_base
0329   E9FF             			begin
0329   E9FF             
0330   E9FF EE 00       nextthread			ldx	$00,X				;Check to see if we have a routine to do?
0331   EA01             				ifeq
0331   EA01             
0331   EA01 26 FE       
0332   EA03 7E E8 AD    					jmp main				;Back to the start of the main loop
0333   EA06             				endif
0333   EA06             
0333   EA06             
0333   EA06             
0333   EA06             
0333   EA06             
0333   EA06~            				endif
0333   EA06~            				endif
0333   EA06             
0333   EA06~            				endif
0333   EA06~            				endif
0333   EA06             
0333   EA02             
0333   EA02 03          
0333   EA03             
0333   EA03             
0333   EA03~            				endif
0333   EA03~            				endif
0333   EA03~            				endif
0333   EA03             
0333   EA06             
0333   EA06~            				endif
0333   EA06~            				endif
0333   EA06             
0334   EA06 A6 02       				ldaa	$02,X				;Timer expired?
0335   EA08             			eqend					;No, goto next one.
0335   EA08             
0335   EA08             
0335   EA08~            			eqend					;No, goto next one.
0335   EA08~            			eqend					;No, goto next one.
0335   EA08~            			eqend					;No, goto next one.
0335   EA08             
0335   EA08 26 F5       
0335   EA0A             
0335   EA0A~            			eqend					;No, goto next one.
0335   EA0A~            			eqend					;No, goto next one.
0335   EA0A             
0336   EA0A DF B1       			stx	current_thread		;Yes, lets do this one now.
0337   EA0C DF B3       			stx	vm_tail_thread		;Current VM Routine being run
0338   EA0E C6 08       			ldab	#$08
0339   EA10             			begin
0339   EA10             
0340   EA10 A6 03       				ldaa	$03,X
0341   EA12 36          				psha	
0342   EA13 08          				inx	
0343   EA14 5A          				decb	
0344   EA15             			eqend
0344   EA15             
0344   EA15             
0344   EA15~            			eqend
0344   EA15~            			eqend
0344   EA15~            			eqend
0344   EA15             
0344   EA15 26 F9       
0344   EA17             
0344   EA17~            			eqend
0344   EA17~            			eqend
0344   EA17             
0345   EA17 A6 04       			ldaa	$04,X
0346   EA19 36          			psha	
0347   EA1A A6 03       			ldaa	$03,X
0348   EA1C 36          			psha	
0349   EA1D A6 06       			ldaa	$06,X
0350   EA1F E6 07       			ldab	$07,X
0351   EA21 EE 08       			ldx	$08,X
0352   EA23 39          			rts					;Jump to the offending routine.
0353   EA24             
0354   EA24             ;**************************************************************************
0355   EA24             ;* This is similar to 'addthread' below but the timer data does not follow
0356   EA24             ;* the jsr. Instead, the timer data is pre-loaded into 'thread_timer_byte'.
0357   EA24             ;* The thread is started in the same manner as described below.
0358   EA24             ;**************************************************************************			
0359   EA24 97 9C       delaythread		staa	temp2				;Routine returns here when done
0360   EA26 DF 9A       			stx	temp1
0361   EA28 96 B7       			ldaa	thread_timer_byte
0362   EA2A 30          			tsx					;Get where we came from
0363   EA2B EE 00       			ldx	$00,X				;Get the address of the new thread
0364   EA2D 20 0A       			bra	dump_thread
0365   EA2F             
0366   EA2F             ;**************************************************************************
0367   EA2F             ;* Adds a new thread to the VM. The data for this routine is contained 
0368   EA2F             ;* directly after the jsr to this routine. A single byte follows the
0369   EA2F             ;* jsr and is the timer byte used for the delay until the thread starts.
0370   EA2F             ;* The actual address directly after the timer byte is where the thread
0371   EA2F             ;* will start running. Example:
0372   EA2F             ;*
0373   EA2F             ;* 	jsr addthread
0374   EA2F             ;*    .db 05		;This is the timer byte
0375   EA2F             ;*	lda #FF		;This code is executed as the thread.
0376   EA2F             ;***************************************************************************
0377   EA2F DF 9A       addthread		stx	temp1
0378   EA31 97 9C       			staa	temp2
0379   EA33 30          			tsx	
0380   EA34 EE 00       			ldx	$00,X				;Return Address from RTS to $EA2F
0381   EA36 A6 00       			ldaa	$00,X				;New Timer Value
0382   EA38 08          			inx	
0383   EA39             
0384   EA39             ;**************************************************************************
0385   EA39             ;* Will take all variables in RAM and dump them into the thread data 
0386   EA39             ;* structure for next time. This gives the thread memory over executions
0387   EA39             ;* until it is killed.
0388   EA39             ;**************************************************************************			
0389   EA39 DF 9E       dump_thread		stx	temp3				;Now X points the the replacement address
0390   EA3B DE B1       			ldx	current_thread		;Current VM Routine being run
0391   EA3D A7 02       			staa	$02,X				;Timer For next Time
0392   EA3F 96 9E       			ldaa	temp3
0393   EA41 A7 0B       			staa	$0B,X
0394   EA43 96 9F       			ldaa	temp3+1
0395   EA45 A7 0C       			staa	$0C,X
0396   EA47 E7 0F       			stab	$0F,X
0397   EA49 96 9C       			ldaa	temp2
0398   EA4B A7 0E       			staa	$0E,X
0399   EA4D 96 9A       			ldaa	temp1
0400   EA4F A7 10       			staa	$10,X
0401   EA51 96 9B       			ldaa	temp1+1
0402   EA53 A7 11       			staa	$11,X
0403   EA55 31          			ins	
0404   EA56 31          			ins	
0405   EA57 C6 08       			ldab	#$08
0406   EA59             			begin
0406   EA59             
0407   EA59 32          				pula	
0408   EA5A A7 0A       				staa	$0A,X
0409   EA5C 09          				dex	
0410   EA5D 5A          				decb	
0411   EA5E             			eqend
0411   EA5E             
0411   EA5E             
0411   EA5E~            			eqend
0411   EA5E~            			eqend
0411   EA5E~            			eqend
0411   EA5E             
0411   EA5E 26 F9       
0411   EA60             
0411   EA60~            			eqend
0411   EA60~            			eqend
0411   EA60             
0412   EA60 DE B1       			ldx	current_thread			;Current VM Routine being run
0413   EA62             			begin
0413   EA62             
0414   EA62 8E 13 F7    				lds	#$13F7			;Restore the stack.
0415   EA65 20 98       				bra	nextthread			;Go check the Control Routine for another job.
0416   EA67             				
0417   EA67 CE 00 AD    killthread			ldx	#vm_base
0418   EA6A             				begin
0418   EA6A             
0419   EA6A DF 9C       					stx	temp2					;Thread that points to killed thread
0420   EA6C EE 00       					ldx	$00,X
0421   EA6E 27 8C       					beq	check_threads			;Nothing on VM
0422   EA70 9C B1       					cpx	current_thread			;Current VM Routine being run
0423   EA72             				eqend						;If $B1 != *$00AD check next entry
0423   EA72             
0423   EA72             
0423   EA72~            				eqend						;If $B1 != *$00AD check next entry
0423   EA72~            				eqend						;If $B1 != *$00AD check next entry
0423   EA72~            				eqend						;If $B1 != *$00AD check next entry
0423   EA72             
0423   EA72 26 F6       
0423   EA74             
0423   EA74~            				eqend						;If $B1 != *$00AD check next entry
0423   EA74~            				eqend						;If $B1 != *$00AD check next entry
0423   EA74             
0424   EA74 8D 56       				bsr	killthread_sp			;Remove Entry (X)($B1) From VM
0425   EA76             			loopend
0425   EA76             
0425   EA76             
0425   EA76~            			loopend
0425   EA76~            			loopend
0425   EA76~            			loopend
0425   EA76             
0425   EA76 20 EA       
0425   EA78             
0425   EA78~            			loopend
0425   EA78~            			loopend
0425   EA78             
0426   EA78             ;****************************************************************************
0427   EA78             ;* This is the main routine in charge of adding new threads to the
0428   EA78             ;* virtual machine. The following variables are passed.
0429   EA78             ;*
0430   EA78             ;*	A: Pushed into VMregA
0431   EA78             ;* 	B: Pushed into VMregB
0432   EA78             ;*	X: Thread Initial Program Counter
0433   EA78             ;* 	
0434   EA78             ;* In addition, the following two variables contain data for the
0435   EA78             ;* thread.
0436   EA78             ;*	thread_priority:		Unique Identifier to classify thread
0437   EA78             ;*	system_temp_word2:	???
0438   EA78             ;*
0439   EA78             ;* See header definition file for specifics on thread class structure
0440   EA78             ;*
0441   EA78             ;* Returns: Carry Cleared if New Thread was added
0442   EA78             ;*          Carry Set if VM was full
0443   EA78             ;*
0444   EA78             ;****************************************************************************
0445   EA78 DF 9A       newthread_sp	stx	temp1
0446   EA7A 0D          			sec	
0447   EA7B DE AF       			ldx	vm_nextslot			;Get Next Available Slot Address
0448   EA7D             			ifne
0448   EA7D             
0448   EA7D 27 FE       
0449   EA7F 36          				psha	
0450   EA80 A6 00       				ldaa	$00,X				;\
0451   EA82 97 AF       				staa	vm_nextslot			;|---- Set New Next Available Slot Address
0452   EA84 A6 01       				ldaa	$01,X				;|
0453   EA86 97 B0       				staa	vm_nextslot+1		;/
0454   EA88 DF 9C       				stx	temp2				;Temp2 = New Thread Base Address
0455   EA8A DE B3       				ldx	vm_tail_thread		;This is the last thread in the vm, it has the tail
0456   EA8C A6 00       				ldaa	$00,X				;\
0457   EA8E 97 9E       				staa	temp3				;|
0458   EA90 A6 01       				ldaa	$01,X				;|---- Store the running threads next pointer in temp3
0459   EA92 97 9F       				staa	temp3+1			;/
0460   EA94 96 9C       				ldaa	temp2				;\
0461   EA96 A7 00       				staa	$00,X				;|
0462   EA98 96 9D       				ldaa	temp2+1			;|---- Put the new thread into the running threads next pointer
0463   EA9A A7 01       				staa	$01,X				;/
0464   EA9C EE 00       				ldx	$00,X
0465   EA9E DF B3       				stx	vm_tail_thread		;Make the new thread the last thread
0466   EAA0 96 9E       				ldaa	temp3				;\
0467   EAA2 A7 00       				staa	$00,X				;|
0468   EAA4 96 9F       				ldaa	temp3+1			;|---- Set the Next pointer of the new thread to the 
0469   EAA6 A7 01       				staa	$01,X				;/     previous threads next pointer.
0470   EAA8 96 9A       				ldaa	temp1
0471   EAAA A7 0B       				staa	$0B,X
0472   EAAC 96 9B       				ldaa	temp1+1
0473   EAAE A7 0C       				staa	$0C,X
0474   EAB0 96 AA       				ldaa	thread_priority		;Store the priority
0475   EAB2 A7 0D       				staa	$0D,X
0476   EAB4 96 A6       				ldaa	sys_temp_w2			;Push variables from sys_temp_w2
0477   EAB6 A7 10       				staa	$10,X
0478   EAB8 96 A7       				ldaa	sys_temp_w2+1
0479   EABA A7 11       				staa	$11,X
0480   EABC 32          				pula	
0481   EABD A7 0E       				staa	$0E,X				;Store reg A
0482   EABF E7 0F       				stab	$0F,X				;Store reg B
0483   EAC1 6F 02       				clr	$02,X				;Reset the counter
0484   EAC3             			endif
0484   EAC3             
0484   EAC3             
0484   EAC3             
0484   EAC3             
0484   EAC3             
0484   EAC3~            			endif
0484   EAC3~            			endif
0484   EAC3             
0484   EAC3~            			endif
0484   EAC3~            			endif
0484   EAC3             
0484   EA7E             
0484   EA7E 44          
0484   EA7F             
0484   EA7F             
0484   EA7F~            			endif
0484   EA7F~            			endif
0484   EA7F~            			endif
0484   EA7F             
0484   EAC3             
0484   EAC3~            			endif
0484   EAC3~            			endif
0484   EAC3             
0485   EAC3 39          			rts	
0486   EAC4             
0487   EAC4 36          newthread_06	psha	
0488   EAC5 86 06       			ldaa	#$06
0489   EAC7 97 AA       			staa	thread_priority
0490   EAC9 32          			pula	
0491   EACA 20 AC       			bra	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
0492   EACC             
0493   EACC             ;***************************************************************************
0494   EACC             ;* This will remove the current thread from the VM. 
0495   EACC             ;*
0496   EACC             ;* Requires: temp2 holds the thread that points to the thread to be killed	
0497   EACC             ;***************************************************************************		
0498   EACC 36          killthread_sp	psha	
0499   EACD A6 00       			ldaa	$00,X					;\
0500   EACF 97 9A       			staa	temp1					;|--  Get 'next'
0501   EAD1 A6 01       			ldaa	$01,X					;|
0502   EAD3 97 9B       			staa	temp1+1				;/
0503   EAD5 96 AF       			ldaa	vm_nextslot				;\
0504   EAD7 A7 00       			staa	$00,X					;|--  Kill this one by setting next to 0
0505   EAD9 96 B0       			ldaa	vm_nextslot+1			;|
0506   EADB A7 01       			staa	$01,X					;/
0507   EADD DF AF       			stx	vm_nextslot				;Make this new blank spot the next one
0508   EADF 9C B3       			cpx	vm_tail_thread			;Unless this was the tail thread
0509   EAE1             			ifeq
0509   EAE1             
0509   EAE1 26 FE       
0510   EAE3 DE B1       				ldx	current_thread			;Make the current thread the tail
0511   EAE5 DF B3       				stx	vm_tail_thread
0512   EAE7             			endif
0512   EAE7             
0512   EAE7             
0512   EAE7             
0512   EAE7             
0512   EAE7             
0512   EAE7~            			endif
0512   EAE7~            			endif
0512   EAE7             
0512   EAE7~            			endif
0512   EAE7~            			endif
0512   EAE7             
0512   EAE2             
0512   EAE2 04          
0512   EAE3             
0512   EAE3             
0512   EAE3~            			endif
0512   EAE3~            			endif
0512   EAE3~            			endif
0512   EAE3             
0512   EAE7             
0512   EAE7~            			endif
0512   EAE7~            			endif
0512   EAE7             
0513   EAE7 DE 9C       			ldx	temp2					;Get Parent Thread
0514   EAE9 96 9A       			ldaa	temp1					;Store killed thread 'next' into parents 'next'
0515   EAEB A7 00       			staa	$00,X
0516   EAED 96 9B       			ldaa	temp1+1
0517   EAEF A7 01       			staa	$01,X
0518   EAF1 32          			pula						;Save A
0519   EAF2 39          			rts	
0520   EAF3             
0521   EAF3             ;*************************************************
0522   EAF3             ;* Kill Single thread with the given ID
0523   EAF3             ;*
0524   EAF3             ;* Requires: 	A - Level Defintion
0525   EAF3             ;* 			B - Select Mask
0526   EAF3             ;* 
0527   EAF3             ;* If B is $00, then all threads are cleared
0528   EAF3             ;*************************************************			
0529   EAF3 8D 0B       kill_thread		bsr	check_threadid		;Test Thread ID Mask
0530   EAF5             			ifcc					;Return with Carry Set
0530   EAF5             
0530   EAF5 25 FE       
0531   EAF7 8D D3       				bsr	killthread_sp		;Remove Entry (X)($B1) From VM
0532   EAF9 0C          				clc	
0533   EAFA             			endif
0533   EAFA             
0533   EAFA             
0533   EAFA             
0533   EAFA             
0533   EAFA             
0533   EAFA~            			endif
0533   EAFA~            			endif
0533   EAFA             
0533   EAFA~            			endif
0533   EAFA~            			endif
0533   EAFA             
0533   EAF6             
0533   EAF6 03          
0533   EAF7             
0533   EAF7             
0533   EAF7~            			endif
0533   EAF7~            			endif
0533   EAF7~            			endif
0533   EAF7             
0533   EAFA             
0533   EAFA~            			endif
0533   EAFA~            			endif
0533   EAFA             
0534   EAFA 39          			rts	
0535   EAFB             
0536   EAFB             ;*************************************************
0537   EAFB             ;* Kill All threads with the given ID
0538   EAFB             ;*
0539   EAFB             ;* Requires: 	A - Level Definition
0540   EAFB             ;* 			B - Select Mask
0541   EAFB             ;* 
0542   EAFB             ;* If B is $00, then all threads are cleared
0543   EAFB             ;*************************************************
0544   EAFB             kill_threads	begin
0544   EAFB             
0545   EAFB 8D F6       				bsr	kill_thread		;Kill first One
0546   EAFD             			csend				;Repeat if Carry Clear
0546   EAFD             
0546   EAFD             
0546   EAFD~            			csend				;Repeat if Carry Clear
0546   EAFD~            			csend				;Repeat if Carry Clear
0546   EAFD~            			csend				;Repeat if Carry Clear
0546   EAFD             
0546   EAFD 24 FC       
0546   EAFF             
0546   EAFF~            			csend				;Repeat if Carry Clear
0546   EAFF~            			csend				;Repeat if Carry Clear
0546   EAFF             
0547   EAFF 39          			rts	
0548   EB00             
0549   EB00             ;*************************************************
0550   EB00             ;* Checks the VM thread list for threads that 
0551   EB00             ;* qualify agains the bitmasks defined in A and B.
0552   EB00             ;* If a thread qualifies, then this routine will
0553   EB00             ;* return with carry cleared.
0554   EB00             ;*************************************************		
0555   EB00 37          check_threadid	pshb	
0556   EB01 D7 9A       			stab	temp1
0557   EB03 CE 00 AD    			ldx	#vm_base		;Load Start Address
0558   EB06 DF 9C       			stx	temp2			;Store it
0559   EB08 DE AD       			ldx	vm_base		;Load End Address
0560   EB0A 0D          pri_next		sec	
0561   EB0B             			ifne				;Branch if we have reached the end of the VM (Next = 0000)
0561   EB0B             
0561   EB0B 27 FE       
0562   EB0D 16          				tab	
0563   EB0E E8 0D       				eorb	threadobj_id,X		;EOR with Type Code in Current Routine
0564   EB10 53          				comb	
0565   EB11 D4 9A       				andb	temp1
0566   EB13 D1 9A       				cmpb	temp1
0567   EB15             				ifne				;Branch if Bits Dont work
0567   EB15             
0567   EB15 27 FE       
0568   EB17 DF 9C       pri_skipme				stx	temp2
0569   EB19 EE 00       					ldx	threadobj_next,X
0570   EB1B 20 ED       					bra	pri_next		;Goto Next Thread ->
0571   EB1D             				endif
0571   EB1D             
0571   EB1D             
0571   EB1D             
0571   EB1D             
0571   EB1D             
0571   EB1D~            				endif
0571   EB1D~            				endif
0571   EB1D             
0571   EB1D~            				endif
0571   EB1D~            				endif
0571   EB1D             
0571   EB16             
0571   EB16 06          
0571   EB17             
0571   EB17             
0571   EB17~            				endif
0571   EB17~            				endif
0571   EB17~            				endif
0571   EB17             
0571   EB1D             
0571   EB1D~            				endif
0571   EB1D~            				endif
0571   EB1D             
0572   EB1D 9C B1       				cpx	current_thread	;Make sure it isn't this thread
0573   EB1F 27 F6       				beq	pri_skipme		;If it is this thread, skip it!
0574   EB21             			endif
0574   EB21             
0574   EB21             
0574   EB21             
0574   EB21             
0574   EB21             
0574   EB21~            			endif
0574   EB21~            			endif
0574   EB21             
0574   EB21~            			endif
0574   EB21~            			endif
0574   EB21             
0574   EB0C             
0574   EB0C 14          
0574   EB0D             
0574   EB0D             
0574   EB0D~            			endif
0574   EB0D~            			endif
0574   EB0D~            			endif
0574   EB0D             
0574   EB21             
0574   EB21~            			endif
0574   EB21~            			endif
0574   EB21             
0575   EB21 33          			pulb	
0576   EB22 39          			rts	
0577   EB23             			
0578   EB23             ;*****************************************************************	
0579   EB23             ;* Solenoid Queue Processing: This is the routine that is called
0580   EB23             ;* to fire a specific solenoid. It will add the solenoid to the 
0581   EB23             ;* queue. Works from top down. Solenoid Number is in A along with
0582   EB23             ;* data on how to handle solenoid. Format of A is ...
0583   EB23             ;*
0584   EB23             ;*  	XXXZZZZZ	Where: ZZZZZ is solenoid number 00-24
0585   EB23             ;*                       XXX is timer/command
0586   EB23             ;*
0587   EB23             ;*****************************************************************		
0588   EB23 36          solbuf		psha					;Push Solenoid #
0589   EB24 37          			pshb	
0590   EB25 DF 9A       			stx	temp1				;Put X into Temp1
0591   EB27 DE 98       			ldx	solenoid_queue_pointer	;Check Solenoid Buffer
0592   EB29 8C 11 18    			cpx	#sol_queue	
0593   EB2C             			ifne					;Buffer not full
0593   EB2C             
0593   EB2C 27 FE       
0594   EB2E 0D          				sec					;Carry Set if Buffer Full
0595   EB2F 8C 11 28    				cpx	#sol_queue_full		;Buffer Full
0596   EB32             				ifne
0596   EB32             
0596   EB32 27 FE       
0597   EB34 A7 00       _sb01					staa	$00,X				;Insert Solenoid Into Buffer
0598   EB36 08          					inx	
0599   EB37 DF 98       					stx	solenoid_queue_pointer	;Update Pointer
0600   EB39 0C          _sb02					clc					;Carry Cleared on Buffer Add
0601   EB3A             				endif
0601   EB3A             
0601   EB3A             
0601   EB3A             
0601   EB3A             
0601   EB3A             
0601   EB3A~            				endif
0601   EB3A~            				endif
0601   EB3A             
0601   EB3A~            				endif
0601   EB3A~            				endif
0601   EB3A             
0601   EB33             
0601   EB33 06          
0601   EB34             
0601   EB34             
0601   EB34~            				endif
0601   EB34~            				endif
0601   EB34~            				endif
0601   EB34             
0601   EB3A             
0601   EB3A~            				endif
0601   EB3A~            				endif
0601   EB3A             
0602   EB3A 33          				pulb	
0603   EB3B 32          				pula					;Pull Solenoid #
0604   EB3C DE 9A       				ldx	temp1				;Get Back X
0605   EB3E 39          				rts	
0606   EB3F             			endif
0606   EB3F             
0606   EB3F             
0606   EB3F             
0606   EB3F             
0606   EB3F             
0606   EB3F~            			endif
0606   EB3F~            			endif
0606   EB3F             
0606   EB3F~            			endif
0606   EB3F~            			endif
0606   EB3F             
0606   EB2D             
0606   EB2D 11          
0606   EB2E             
0606   EB2E             
0606   EB2E~            			endif
0606   EB2E~            			endif
0606   EB2E~            			endif
0606   EB2E             
0606   EB3F             
0606   EB3F~            			endif
0606   EB3F~            			endif
0606   EB3F             
0607   EB3F D6 94       			ldab	solenoid_counter		;Solenoid Counter
0608   EB41 26 F1       			bne	_sb01
0609   EB43 8D 02       			bsr	set_solenoid		;Turn On/Off Solenoid (Solenoid # in A)
0610   EB45 20 F2       			bra	_sb02
0611   EB47             
0612   EB47             ;***************************************************
0613   EB47             ;* Turns On/Off solenoid.
0614   EB47             ;*
0615   EB47             ;* Requires:	A - XXXZZZZZ
0616   EB47             ;*					
0617   EB47             ;* Where XXX 	= Solenoid Timer/Command
0618   EB47             ;*       ZZZZZ	= Solenoid Number
0619   EB47             ;*
0620   EB47             ;* Example: A = 20 turns on solenoid #00 for 1 IRQ
0621   EB47             ;*              F8 turns on solenoid #18 idefinitely
0622   EB47             ;*              C3 turns on solenoid #03 for 6 IRQ's
0623   EB47             ;*              03 turns off solenoid #03 indefinitely
0624   EB47             ;***************************************************
0625   EB47 37          set_solenoid	pshb	
0626   EB48 16          			tab	
0627   EB49 C4 E0       			andb	#$E0
0628   EB4B             			ifne
0628   EB4B             
0628   EB4B 27 FE       
0629   EB4D C1 E0       				cmpb	#$E0
0630   EB4F             				ifne
0630   EB4F             
0630   EB4F 27 FE       
0631   EB51             					;1-6 goes into counter
0632   EB51 D7 94       					stab	solenoid_counter		;Restore Solenoid Counter to #E0
0633   EB53 8D 1C       					bsr	soladdr			;Get Solenoid PIA address and bitpos
0634   EB55 DF 91       					stx	solenoid_address
0635   EB57 D7 93       					stab	solenoid_bitpos
0636   EB59             				else
0636   EB59             
0636   EB59             
0636   EB59             
0636   EB59             
0636   EB50             
0636   EB50             
0636   EB50             
0636   EB50~            				else
0636   EB50~            				else
0636   EB50~            				else
0636   EB50~            				else
0636   EB50             
0636   EB50~            				else
0636   EB50~            				else
0636   EB50~            				else
0636   EB50~            				else
0636   EB50             
0636   EB50             
0636   EB50 0A          
0636   EB59             
0636   EB59 20 FE       
0636   EB5B             
0636   EB5B             
0636   EB5B             
0636   EB5B~            				else
0636   EB5B~            				else
0636   EB5B~            				else
0636   EB5B~            				else
0636   EB5B~            				else
0636   EB5B             
0636   EB5B~            				else
0636   EB5B~            				else
0636   EB5B             
0636   EB5B~            				else
0636   EB5B~            				else
0636   EB5B             
0637   EB5B             					;Do it now... if at 7
0638   EB5B 8D 14       					bsr	soladdr			;Get Solenoid PIA address and bitpos
0639   EB5D             				endif
0639   EB5D             
0639   EB5D             
0639   EB5D             
0639   EB5D             
0639   EB5D             
0639   EB5D~            				endif
0639   EB5D~            				endif
0639   EB5D             
0639   EB5D~            				endif
0639   EB5D~            				endif
0639   EB5D             
0639   EB5A             
0639   EB5A 02          
0639   EB5B             
0639   EB5B             
0639   EB5B~            				endif
0639   EB5B~            				endif
0639   EB5B~            				endif
0639   EB5B             
0639   EB5D             
0639   EB5D~            				endif
0639   EB5D~            				endif
0639   EB5D             
0640   EB5D 25 0C       				bcs	set_ss_on			;Carry Set: Special Solenoid, these work in reverse
0641   EB5F             				;Here to turn solenoid ON
0642   EB5F 0F          set_ss_off			sei	
0643   EB60 EA 00       				orab	$00,X
0644   EB62 E7 00       set_s_pia			stab	$00,X			;Write Solenoid Data to PIA
0645   EB64 0E          				cli	
0646   EB65 33          				pulb	
0647   EB66 39          				rts					;Outta here!
0648   EB67             			endif
0648   EB67             
0648   EB67             
0648   EB67             
0648   EB67             
0648   EB67             
0648   EB67~            			endif
0648   EB67~            			endif
0648   EB67             
0648   EB67~            			endif
0648   EB67~            			endif
0648   EB67             
0648   EB4C             
0648   EB4C 1A          
0648   EB4D             
0648   EB4D             
0648   EB4D~            			endif
0648   EB4D~            			endif
0648   EB4D~            			endif
0648   EB4D             
0648   EB67             
0648   EB67~            			endif
0648   EB67~            			endif
0648   EB67             
0649   EB67 8D 08       			bsr	soladdr				;Get Solenoid PIA address and bitpos
0650   EB69 25 F4       			bcs	set_ss_off				;Special Solenoids work in reverse
0651   EB6B             			;Here to turn solenoid OFF			
0652   EB6B 53          set_ss_on		comb	
0653   EB6C 0F          			sei	
0654   EB6D E4 00       			andb	$00,X
0655   EB6F 20 F1       			bra	set_s_pia				;Store it now.
0656   EB71             
0657   EB71             ;*************************************************
0658   EB71             ;* Get Physical Address and Bitposition of 
0659   EB71             ;* solenoid number.
0660   EB71             ;*
0661   EB71             ;* Requires:	A - Solenoid Number
0662   EB71             ;* Output:		B - PIA bit position
0663   EB71             ;*			X - PIA address
0664   EB71             ;*************************************************	
0665   EB71 84 1F       soladdr		anda	#$1F				;Mask to under 32 Solenoids
0666   EB73 81 0F       			cmpa	#$0F
0667   EB75             			iflo					;Get Regular Solenoid Address (PIA)
0667   EB75             
0667   EB75 22 FE       
0668   EB77 CE 22 00    				ldx	#pia_sol_low_data		;Solenoid PIA Offset
0669   EB7A 81 07       				cmpa	#$07
0670   EB7C             				ifgt
0670   EB7C             
0670   EB7C 23 FE       
0671   EB7E 08          					inx	
0672   EB7F 08          					inx	
0673   EB80             				endif
0673   EB80             
0673   EB80             
0673   EB80             
0673   EB80             
0673   EB80             
0673   EB80~            				endif
0673   EB80~            				endif
0673   EB80             
0673   EB80~            				endif
0673   EB80~            				endif
0673   EB80             
0673   EB7D             
0673   EB7D 02          
0673   EB7E             
0673   EB7E             
0673   EB7E~            				endif
0673   EB7E~            				endif
0673   EB7E~            				endif
0673   EB7E             
0673   EB80             
0673   EB80~            				endif
0673   EB80~            				endif
0673   EB80             
0674   EB80 20 0C       				bra	hex2bitpos			;Convert Hex (A&07) into bitpos (B) and leave
0675   EB82             			endif
0675   EB82             
0675   EB82             
0675   EB82             
0675   EB82             
0675   EB82             
0675   EB82~            			endif
0675   EB82~            			endif
0675   EB82             
0675   EB82~            			endif
0675   EB82~            			endif
0675   EB82             
0675   EB76             
0675   EB76 0B          
0675   EB77             
0675   EB77             
0675   EB77~            			endif
0675   EB77~            			endif
0675   EB77~            			endif
0675   EB77             
0675   EB82             
0675   EB82~            			endif
0675   EB82~            			endif
0675   EB82             
0676   EB82 80 10       ssoladdr		suba	#$10
0677   EB84 CE F1 22    			ldx	#spec_sol_def			;Special Solenoid PIA Location Table
0678   EB87 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
0679   EB8A C6 08       			ldab	#$08
0680   EB8C 0D          			sec	
0681   EB8D 39          			rts	
0682   EB8E             
0683   EB8E             ;********************************************************
0684   EB8E             ;* Convert Hex value in A to a single bit positioned at
0685   EB8E             ;* the value of (A&7). Bitpos is returned in B
0686   EB8E             ;*
0687   EB8E             ;* Requires:	Data in A
0688   EB8E             ;* Protects:	A,X
0689   EB8E             ;* Destroys:	B
0690   EB8E             ;* Output:		Bitpos in B
0691   EB8E             ;********************************************************
0692   EB8E 36          hex2bitpos		psha	
0693   EB8F 84 07       			anda	#$07
0694   EB91 5F          			clrb	
0695   EB92 0D          			sec	
0696   EB93             			begin
0696   EB93             
0697   EB93 59          				rolb	
0698   EB94 4A          				deca	
0699   EB95             			miend
0699   EB95             
0699   EB95             
0699   EB95~            			miend
0699   EB95~            			miend
0699   EB95~            			miend
0699   EB95             
0699   EB95 2A FC       
0699   EB97             
0699   EB97~            			miend
0699   EB97~            			miend
0699   EB97             
0700   EB97 32          			pula	
0701   EB98 39          			rts	
0702   EB99             
0703   EB99             ;********************************************************
0704   EB99             ;* Checks the current score shown and updates the comma
0705   EB99             ;* flags accordingly to show the relavant ones.
0706   EB99             ;********************************************************			
0707   EB99 40 04 80 08 comma_million	.db $40,$04,$80,$08
0708   EB9D 10 01 20 02 comma_thousand	.db $10,$01,$20,$02
0709   EBA1             
0710   EBA1 C6 40       update_commas	ldab	#$40				;Million digit
0711   EBA3 8D 2B       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
0712   EBA5             			ifeq				;Branch if it is already set
0712   EBA5             
0712   EBA5 26 FE       
0713   EBA7 DE CE       				ldx	pscore_buf			;Start of Current Player Score Buffer
0714   EBA9 E6 00       				ldab	$00,X
0715   EBAB 5C          				incb	
0716   EBAC             				ifne					;Is MSD at FF (blank0?
0716   EBAC             
0716   EBAC 27 FE       
0717   EBAE CE EB 99    					ldx	#comma_million		;No.. we have a million digit.
0718   EBB1 8D 11       					bsr	set_comma_bit		;Set the appropriate bit
0719   EBB3             				endif
0719   EBB3             
0719   EBB3             
0719   EBB3             
0719   EBB3             
0719   EBB3             
0719   EBB3~            				endif
0719   EBB3~            				endif
0719   EBB3             
0719   EBB3~            				endif
0719   EBB3~            				endif
0719   EBB3             
0719   EBAD             
0719   EBAD 05          
0719   EBAE             
0719   EBAE             
0719   EBAE~            				endif
0719   EBAE~            				endif
0719   EBAE~            				endif
0719   EBAE             
0719   EBB3             
0719   EBB3~            				endif
0719   EBB3~            				endif
0719   EBB3             
0720   EBB3             			endif
0720   EBB3             
0720   EBB3             
0720   EBB3             
0720   EBB3             
0720   EBB3             
0720   EBB3~            			endif
0720   EBB3~            			endif
0720   EBB3             
0720   EBB3~            			endif
0720   EBB3~            			endif
0720   EBB3             
0720   EBA6             
0720   EBA6 0C          
0720   EBA7             
0720   EBA7             
0720   EBA7~            			endif
0720   EBA7~            			endif
0720   EBA7~            			endif
0720   EBA7             
0720   EBB3             
0720   EBB3~            			endif
0720   EBB3~            			endif
0720   EBB3             
0721   EBB3 C6 08       			ldab	#$08				;1000's Digit
0722   EBB5 8D 19       			bsr	test_mask_b			;Bittest Current Player Display Toggles against B
0723   EBB7             			ifeq
0723   EBB7             
0723   EBB7 26 FE       
0724   EBB9 DE CE       				ldx	pscore_buf			;Start of Current Player Score Buffer
0725   EBBB E6 02       				ldab	$02,X
0726   EBBD C1 F0       				cmpb	#$F0
0727   EBBF             				ifcs
0727   EBBF             
0727   EBBF 24 FE       
0728   EBC1 CE EB 9D    					ldx	#comma_thousand			;Get the appropriate bit for the thousand digit	
0729   EBC4 96 CD       set_comma_bit			ldaa	player_up				;Current Player Up (0-3)
0730   EBC6 BD EE FF    					jsr	xplusa				;X = X + A
0731   EBC9 A6 00       					ldaa	$00,X
0732   EBCB 9A 60       					oraa	comma_flags
0733   EBCD 97 60       					staa	comma_flags
0734   EBCF             				endif
0734   EBCF             
0734   EBCF             
0734   EBCF             
0734   EBCF             
0734   EBCF             
0734   EBCF~            				endif
0734   EBCF~            				endif
0734   EBCF             
0734   EBCF~            				endif
0734   EBCF~            				endif
0734   EBCF             
0734   EBC0             
0734   EBC0 0E          
0734   EBC1             
0734   EBC1             
0734   EBC1~            				endif
0734   EBC1~            				endif
0734   EBC1~            				endif
0734   EBC1             
0734   EBCF             
0734   EBCF~            				endif
0734   EBCF~            				endif
0734   EBCF             
0735   EBCF             			endif
0735   EBCF             
0735   EBCF             
0735   EBCF             
0735   EBCF             
0735   EBCF             
0735   EBCF~            			endif
0735   EBCF~            			endif
0735   EBCF             
0735   EBCF~            			endif
0735   EBCF~            			endif
0735   EBCF             
0735   EBB8             
0735   EBB8 16          
0735   EBB9             
0735   EBB9             
0735   EBB9~            			endif
0735   EBB9~            			endif
0735   EBB9~            			endif
0735   EBB9             
0735   EBCF             
0735   EBCF~            			endif
0735   EBCF~            			endif
0735   EBCF             
0736   EBCF 39          			rts	
0737   EBD0             
0738   EBD0 96 CD       test_mask_b		ldaa	player_up				;Current Player Up (0-3)
0739   EBD2 CE 00 5C    			ldx	#dmask_p1
0740   EBD5 BD EE FF    			jsr	xplusa				;X = X + A
0741   EBD8 E5 00       			bitb	$00,X
0742   EBDA 39          			rts	
0743   EBDB             
0744   EBDB             ;*********************************************************
0745   EBDB             ;* From the main scoring routine, this will update the
0746   EBDB             ;* extra ball lamp by removing a single extra ball. It 
0747   EBDB             ;* must be done here so that if an extra ball drains 
0748   EBDB             ;* without scoring, the extra ball will not be removed.
0749   EBDB             ;* Therefore all extra ball removals must be done on a
0750   EBDB             ;* scoring event.
0751   EBDB             ;*********************************************************			
0752   EBDB D6 CA       update_eb_count	ldab	flag_bonusball			;Are we in infinte ball mode?
0753   EBDD             			ifeq							;No
0753   EBDD             
0753   EBDD 26 FE       
0754   EBDF 73 00 CA    				com	flag_bonusball			;
0755   EBE2 D6 D0       				ldab	num_eb				;Number of Extra Balls Remaining
0756   EBE4             				ifne				
0756   EBE4             
0756   EBE4 27 FE       
0757   EBE6 7A 00 D0    					dec	num_eb				;EB = EB - 1
0758   EBE9             					ifeq
0758   EBE9             
0758   EBE9 26 FE       
0759   EBEB 36          						psha	
0760   EBEC B6 E0 5F    						ldaa	gr_eb_lamp_1			;Game ROM: Extra Ball Lamp1 Location
0761   EBEF BD F1 5B    						jsr	lamp_off				;Turn off Lamp A (encoded):
0762   EBF2 B6 E0 60    						ldaa	gr_eb_lamp_2			;Game ROM: Extra Ball Lamp2 Location
0763   EBF5 BD F1 5B    						jsr	lamp_off				;Turn off Lamp A (encoded):
0764   EBF8 32          						pula	
0765   EBF9             					endif
0765   EBF9             
0765   EBF9             
0765   EBF9             
0765   EBF9             
0765   EBF9             
0765   EBF9~            					endif
0765   EBF9~            					endif
0765   EBF9             
0765   EBF9~            					endif
0765   EBF9~            					endif
0765   EBF9             
0765   EBEA             
0765   EBEA 0E          
0765   EBEB             
0765   EBEB             
0765   EBEB~            					endif
0765   EBEB~            					endif
0765   EBEB~            					endif
0765   EBEB             
0765   EBF9             
0765   EBF9~            					endif
0765   EBF9~            					endif
0765   EBF9             
0766   EBF9             				endif
0766   EBF9             
0766   EBF9             
0766   EBF9             
0766   EBF9             
0766   EBF9             
0766   EBF9~            				endif
0766   EBF9~            				endif
0766   EBF9             
0766   EBF9~            				endif
0766   EBF9~            				endif
0766   EBF9             
0766   EBE5             
0766   EBE5 13          
0766   EBE6             
0766   EBE6             
0766   EBE6~            				endif
0766   EBE6~            				endif
0766   EBE6~            				endif
0766   EBE6             
0766   EBF9             
0766   EBF9~            				endif
0766   EBF9~            				endif
0766   EBF9             
0767   EBF9             			endif
0767   EBF9             
0767   EBF9             
0767   EBF9             
0767   EBF9             
0767   EBF9             
0767   EBF9~            			endif
0767   EBF9~            			endif
0767   EBF9             
0767   EBF9~            			endif
0767   EBF9~            			endif
0767   EBF9             
0767   EBDE             
0767   EBDE 1A          
0767   EBDF             
0767   EBDF             
0767   EBDF~            			endif
0767   EBDF~            			endif
0767   EBDF~            			endif
0767   EBDF             
0767   EBF9             
0767   EBF9~            			endif
0767   EBF9~            			endif
0767   EBF9             
0768   EBF9 39          			rts	
0769   EBFA             
0770   EBFA             ;**********************************************************
0771   EBFA             ;* Point based sounds (chime type).
0772   EBFA             ;**********************************************************			
0773   EBFA 36          isnd_pts		psha	
0774   EBFB 17          			tba	
0775   EBFC 20 03       			bra	snd_pts
0776   EBFE 36          dsnd_pts		psha	
0777   EBFF 84 07       			anda	#$07
0778   EC01 BD EC FC    snd_pts		jsr	isnd_once			;Play Sound Index(A) Once
0779   EC04 32          			pula
0780   EC05             			;Fall Through to points
0781   EC05             				
0782   EC05 36          score_main		psha	
0783   EC06 37          			pshb	
0784   EC07 7A 00 D7    			dec	randomseed			;Change the Random # seed
0785   EC0A DF D8       			stx	x_temp_1			;Store X for later
0786   EC0C BD E0 A3    			jsr	gr_score_event		;Check Game ROM Hook
0787   EC0F 8D CA       			bsr	update_eb_count		;Update extra balls
0788   EC11 8D 0A       			bsr	score_update		;Add Points to Current Score, Data in A:
0789   EC13 8D 8C       			bsr	update_commas		;Update Master Display Toggle From Current Player
0790   EC15 BD EC AC    			jsr	checkreplay			;Check Current Player Score against all Replay Levels
0791   EC18 DE D8       			ldx	x_temp_1			;Get it back
0792   EC1A 33          			pulb	
0793   EC1B 32          			pula	
0794   EC1C 39          			rts	
0795   EC1D             			
0796   EC1D             ;**********************************************
0797   EC1D             ; Update Score Routine: Score to add is in A
0798   EC1D             ;**********************************************
0799   EC1D DE CE       score_update	ldx	pscore_buf			;Start of Current Player Score Buffer
0800   EC1F EE 00       			ldx	$00,X				;Get XX,XX_,b__
0801   EC21 DF DE       			stx	x_temp_2			;Store it!
0802   EC23 DE CE       			ldx	pscore_buf			;Start of Current Player Score Buffer
0803   EC25 C6 04       			ldab	#$04
0804   EC27 D7 D6       			stab	flag_timer_bip		;Run Ball Play Timer (Audit)
0805   EC29 D7 A0       			stab	sys_temp1			;Number of Ram Location to iterate (4)
0806   EC2B 97 A2       			staa	sys_temp3
0807   EC2D 5F          			clrb	
0808   EC2E D7 A3       			stab	sys_temp4
0809   EC30 D7 A1       			stab	sys_temp2
0810   EC32 16          			tab					;Get Points data
0811   EC33 C4 07       			andb	#$07
0812   EC35 26 27       _su01			bne	_su04
0813   EC37 5C          			incb	
0814   EC38 D7 9E       			stab	temp3				;Store (data&07)+1
0815   EC3A D6 A2       _su02			ldab	sys_temp3
0816   EC3C 54          			lsrb	
0817   EC3D 54          			lsrb	
0818   EC3E 54          			lsrb	
0819   EC3F 8D 45       			bsr	score2hex			;Convert MSD Blanks to 0's on (X+03)
0820   EC41             			begin
0820   EC41             
0821   EC41 9B 9E       				adda	temp3				;(data&07)+1
0822   EC43 8D 3A       				bsr	hex2dec			;Decimal Adjust A, sys_temp2 incremented if A flipped
0823   EC45 5A          				decb					
0824   EC46             			eqend
0824   EC46             
0824   EC46             
0824   EC46~            			eqend
0824   EC46~            			eqend
0824   EC46~            			eqend
0824   EC46             
0824   EC46 26 F9       
0824   EC48             
0824   EC48~            			eqend
0824   EC48~            			eqend
0824   EC48             
0825   EC48 D6 A1       _su03			ldab	sys_temp2
0826   EC4A 27 26       			beq	_su05			;A didn't Flip, Branch.
0827   EC4C A7 03       			staa	$03,X			;Store this digit
0828   EC4E 09          			dex	
0829   EC4F 7A 00 A0    			dec	sys_temp1			;Do next set of digits
0830   EC52             			ifne
0830   EC52             
0830   EC52 27 FE       
0831   EC54 8D 30       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
0832   EC56 7F 00 A1    				clr	sys_temp2
0833   EC59 1B          				aba	
0834   EC5A 8D 23       				bsr	hex2dec				;Decimal Adjust A, sys_temp2 incremented if A flipped
0835   EC5C 20 EA       				bra	_su03
0836   EC5E 5A          _su04				decb	
0837   EC5F             				ifeq
0837   EC5F             
0837   EC5F 26 FE       
0838   EC61 C6 10       					ldab	#$10
0839   EC63 D7 9E       					stab	temp3
0840   EC65 20 D3       					bra	_su02
0841   EC67             				endif
0841   EC67             
0841   EC67             
0841   EC67             
0841   EC67             
0841   EC67             
0841   EC67~            				endif
0841   EC67~            				endif
0841   EC67             
0841   EC67~            				endif
0841   EC67~            				endif
0841   EC67             
0841   EC60             
0841   EC60 06          
0841   EC61             
0841   EC61             
0841   EC61~            				endif
0841   EC61~            				endif
0841   EC61~            				endif
0841   EC61             
0841   EC67             
0841   EC67~            				endif
0841   EC67~            				endif
0841   EC67             
0842   EC67 8D 1D       				bsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
0843   EC69 A7 03       				staa	$03,X
0844   EC6B 7A 00 A0    				dec	sys_temp1
0845   EC6E 09          				dex	
0846   EC6F 5A          				decb	
0847   EC70 20 C3       				bra	_su01
0848   EC72 D6 A3       _su05				ldab	sys_temp4
0849   EC74             				ifne
0849   EC74             
0849   EC74 27 FE       
0850   EC76 81 10       					cmpa	#$10
0851   EC78             					ifcs
0851   EC78             
0851   EC78 24 FE       
0852   EC7A 8B F0       						adda	#$F0
0853   EC7C             					endif
0853   EC7C             
0853   EC7C             
0853   EC7C             
0853   EC7C             
0853   EC7C             
0853   EC7C~            					endif
0853   EC7C~            					endif
0853   EC7C             
0853   EC7C~            					endif
0853   EC7C~            					endif
0853   EC7C             
0853   EC79             
0853   EC79 02          
0853   EC7A             
0853   EC7A             
0853   EC7A~            					endif
0853   EC7A~            					endif
0853   EC7A~            					endif
0853   EC7A             
0853   EC7C             
0853   EC7C~            					endif
0853   EC7C~            					endif
0853   EC7C             
0854   EC7C             				endif
0854   EC7C             
0854   EC7C             
0854   EC7C             
0854   EC7C             
0854   EC7C             
0854   EC7C~            				endif
0854   EC7C~            				endif
0854   EC7C             
0854   EC7C~            				endif
0854   EC7C~            				endif
0854   EC7C             
0854   EC75             
0854   EC75 06          
0854   EC76             
0854   EC76             
0854   EC76~            				endif
0854   EC76~            				endif
0854   EC76~            				endif
0854   EC76             
0854   EC7C             
0854   EC7C~            				endif
0854   EC7C~            				endif
0854   EC7C             
0855   EC7C A7 03       				staa	$03,X
0856   EC7E             			endif
0856   EC7E             
0856   EC7E             
0856   EC7E             
0856   EC7E             
0856   EC7E             
0856   EC7E~            			endif
0856   EC7E~            			endif
0856   EC7E             
0856   EC7E~            			endif
0856   EC7E~            			endif
0856   EC7E             
0856   EC53             
0856   EC53 2A          
0856   EC54             
0856   EC54             
0856   EC54~            			endif
0856   EC54~            			endif
0856   EC54~            			endif
0856   EC54             
0856   EC7E             
0856   EC7E~            			endif
0856   EC7E~            			endif
0856   EC7E             
0857   EC7E 39          			rts	
0858   EC7F             
0859   EC7F             ;******************************************************************************
0860   EC7F             ; Convert Hex to Decimal: If value was above 9 then sys_temp2 is incremented 
0861   EC7F             ;******************************************************************************
0862   EC7F 19          hex2dec		daa	
0863   EC80             			ifcs
0863   EC80             
0863   EC80 24 FE       
0864   EC82 7C 00 A1    				inc	sys_temp2
0865   EC85             			endif
0865   EC85             
0865   EC85             
0865   EC85             
0865   EC85             
0865   EC85             
0865   EC85~            			endif
0865   EC85~            			endif
0865   EC85             
0865   EC85~            			endif
0865   EC85~            			endif
0865   EC85             
0865   EC81             
0865   EC81 03          
0865   EC82             
0865   EC82             
0865   EC82~            			endif
0865   EC82~            			endif
0865   EC82~            			endif
0865   EC82             
0865   EC85             
0865   EC85~            			endif
0865   EC85~            			endif
0865   EC85             
0866   EC85 39          			rts	
0867   EC86             
0868   EC86 A6 03       score2hex		ldaa	$03,X
0869   EC88 4C          			inca	
0870   EC89             			ifne					;Leave if both digits are blanked
0870   EC89             
0870   EC89 27 FE       
0871   EC8B 4A          				deca	
0872   EC8C 81 F0       				cmpa	#$F0
0873   EC8E 25 05       				bcs	sh_exit			;if A was less than #F0
0874   EC90 8B 10       				adda	#$10				;Set High Digit to a 0
0875   EC92             			endif
0875   EC92             
0875   EC92             
0875   EC92             
0875   EC92             
0875   EC92             
0875   EC92~            			endif
0875   EC92~            			endif
0875   EC92             
0875   EC92~            			endif
0875   EC92~            			endif
0875   EC92             
0875   EC8A             
0875   EC8A 07          
0875   EC8B             
0875   EC8B             
0875   EC8B~            			endif
0875   EC8B~            			endif
0875   EC8B~            			endif
0875   EC8B             
0875   EC92             
0875   EC92~            			endif
0875   EC92~            			endif
0875   EC92             
0876   EC92 7C 00 A3    			inc	sys_temp4			;Digit was cleared
0877   EC95 39          sh_exit		rts
0878   EC96             	
0879   EC96             ;**************************************************************
0880   EC96             ;* Add points to Scoring Queue
0881   EC96             ;**************************************************************	
0882   EC96 36          add_points		psha	
0883   EC97 37          			pshb	
0884   EC98 16          			tab	
0885   EC99 C4 07       			andb	#$07
0886   EC9B CE 11 30    			ldx	#score_queue_full	
0887   EC9E             			begin
0887   EC9E             
0888   EC9E 09          				dex	
0889   EC9F 5A          				decb	
0890   ECA0             			miend
0890   ECA0             
0890   ECA0             
0890   ECA0~            			miend
0890   ECA0~            			miend
0890   ECA0~            			miend
0890   ECA0             
0890   ECA0 2A FC       
0890   ECA2             
0890   ECA2~            			miend
0890   ECA2~            			miend
0890   ECA2             
0891   ECA2 44          			lsra	
0892   ECA3 44          			lsra	
0893   ECA4 44          			lsra	
0894   ECA5 AB 00       			adda	$00,X
0895   ECA7 A7 00       			staa	$00,X
0896   ECA9 33          			pulb	
0897   ECAA 32          			pula	
0898   ECAB 39          			rts	
0899   ECAC             ;**********************************************************
0900   ECAC             ;* Checks the current player score against each replay 
0901   ECAC             ;* level. Award Replay if passed.
0902   ECAC             ;**********************************************************
0903   ECAC CE 00 DE    checkreplay		ldx	#x_temp_2
0904   ECAF 8D 33       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
0905   ECB1 D7 DE       			stab	x_temp_2
0906   ECB3 DE CE       			ldx	pscore_buf			;Current Player Score Buffer Pointer
0907   ECB5 8D 2D       			bsr	get_hs_digits		;Put Player High Digits into A&B, convert F's to 0's
0908   ECB7 86 04       			ldaa	#$04
0909   ECB9 97 DF       			staa	x_temp_2+1			;Check All 4 Replay Levels
0910   ECBB CE 01 83    			ldx	#adj_replay1		;ADJ: Replay 1 Score
0911   ECBE             			begin
0911   ECBE             
0912   ECBE BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
0913   ECC1 11          				cba	
0914   ECC2             				iflo						;Not High Enough, goto next score level
0914   ECC2             
0914   ECC2 22 FE       
0915   ECC4 91 DE       					cmpa	x_temp_2
0916   ECC6             					ifgt
0916   ECC6             
0916   ECC6 23 FE       
0917   ECC8 DF AA       						stx	thread_priority		;Store our Score Buffer Pointer
0918   ECCA 86 04       						ldaa	#$04
0919   ECCC 90 DF       						suba	x_temp_2+1			;See which Replay Level we are at
0920   ECCE 48          						asla					;X2
0921   ECCF 48          						asla					;X2
0922   ECD0 CE 01 52    						ldx	#aud_replay1times+2	;Base of Replay Score Exceeded Audits
0923   ECD3 BD EE FF    						jsr	xplusa			;X = X + A
0924   ECD6 BD F7 7F    						jsr	ptrx_plus_1			;Add 1 to data at X
0925   ECD9 DE AA       						ldx	thread_priority
0926   ECDB BD F6 BF    						jsr	award_replay		;Replay Score Level Exceeded: Give award, sound bell.
0927   ECDE             					endif
0927   ECDE             
0927   ECDE             
0927   ECDE             
0927   ECDE             
0927   ECDE             
0927   ECDE~            					endif
0927   ECDE~            					endif
0927   ECDE             
0927   ECDE~            					endif
0927   ECDE~            					endif
0927   ECDE             
0927   ECC7             
0927   ECC7 16          
0927   ECC8             
0927   ECC8             
0927   ECC8~            					endif
0927   ECC8~            					endif
0927   ECC8~            					endif
0927   ECC8             
0927   ECDE             
0927   ECDE~            					endif
0927   ECDE~            					endif
0927   ECDE             
0928   ECDE             				endif
0928   ECDE             
0928   ECDE             
0928   ECDE             
0928   ECDE             
0928   ECDE             
0928   ECDE~            				endif
0928   ECDE~            				endif
0928   ECDE             
0928   ECDE~            				endif
0928   ECDE~            				endif
0928   ECDE             
0928   ECC3             
0928   ECC3 1A          
0928   ECC4             
0928   ECC4             
0928   ECC4~            				endif
0928   ECC4~            				endif
0928   ECC4~            				endif
0928   ECC4             
0928   ECDE             
0928   ECDE~            				endif
0928   ECDE~            				endif
0928   ECDE             
0929   ECDE 7A 00 DF    				dec	x_temp_2+1				;Goto Next Score Level
0930   ECE1             			eqend
0930   ECE1             
0930   ECE1             
0930   ECE1~            			eqend
0930   ECE1~            			eqend
0930   ECE1~            			eqend
0930   ECE1             
0930   ECE1 26 DB       
0930   ECE3             
0930   ECE3~            			eqend
0930   ECE3~            			eqend
0930   ECE3             
0931   ECE3 39          			rts
0932   ECE4             ;*********************************************************
0933   ECE4             ;* Load Million and Hundred Thousand Score digits into
0934   ECE4             ;* A and B. Player score buffer pointer is in X. Routine
0935   ECE4             ;* will convert blanks($ff) into 0's
0936   ECE4             ;*********************************************************			
0937   ECE4 A6 00       get_hs_digits	ldaa	$00,X
0938   ECE6 E6 01       			ldab	$01,X
0939   ECE8 8D 04       			bsr	b_plus10		;If B minus then B = B + 0x10
0940   ECEA 8D 07       			bsr	split_ab		;Shift A<<4 B>>4
0941   ECEC 1B          			aba	
0942   ECED 16          			tab	
0943   ECEE             b_plus10		ifmi
0943   ECEE             
0943   ECEE 2A FE       
0944   ECF0 CB 10       				addb	#$10
0945   ECF2             			endif
0945   ECF2             
0945   ECF2             
0945   ECF2             
0945   ECF2             
0945   ECF2             
0945   ECF2~            			endif
0945   ECF2~            			endif
0945   ECF2             
0945   ECF2~            			endif
0945   ECF2~            			endif
0945   ECF2             
0945   ECEF             
0945   ECEF 02          
0945   ECF0             
0945   ECF0             
0945   ECF0~            			endif
0945   ECF0~            			endif
0945   ECF0~            			endif
0945   ECF0             
0945   ECF2             
0945   ECF2~            			endif
0945   ECF2~            			endif
0945   ECF2             
0946   ECF2 39          			rts	
0947   ECF3             ;*********************************************************
0948   ECF3             ;* Shifts A and B to convert million and hundred thousand
0949   ECF3             ;* score digits into a single byte.
0950   ECF3             ;*********************************************************
0951   ECF3 48          split_ab		asla	
0952   ECF4 48          			asla	
0953   ECF5 48          			asla	
0954   ECF6 48          			asla	
0955   ECF7 54          			lsrb	
0956   ECF8 54          			lsrb	
0957   ECF9 54          			lsrb	
0958   ECFA 54          			lsrb	
0959   ECFB 39          			rts	
0960   ECFC             ;*********************************************************
0961   ECFC             ;* Sound Routines 
0962   ECFC             ;*********************************************************
0963   ECFC             ;* isnd_once - will play index sound in A one time by 
0964   ECFC             ;*             loading B with 01 and calling the main
0965   ECFC             ;*             sound subroutine.
0966   ECFC             ;*********************************************************			
0967   ECFC 37          isnd_once		pshb	
0968   ECFD C6 01       			ldab	#$01
0969   ECFF 8D 02       			bsr	sound_sub
0970   ED01 33          			pulb	
0971   ED02 39          			rts
0972   ED03             ;*********************************************************
0973   ED03             ;* This is the main sound subroutine. It will play index
0974   ED03             ;* sound contained in A, B times.
0975   ED03             ;*********************************************************				
0976   ED03 DF AA       sound_sub		stx	thread_priority
0977   ED05 36          			psha	
0978   ED06 37          			pshb	
0979   ED07 D6 C1       			ldab	sys_soundflags			;Sound Status
0980   ED09 27 1C       			beq	b_04E					;Goto Sound Routine #2
0981   ED0B 16          			tab						
0982   ED0C 48          			asla	
0983   ED0D 1B          			aba	                              ;A=A*3
0984   ED0E FE E0 53    			ldx	gr_soundtable_ptr			;Game ROM Table: Sounds
0985   ED11 BD EE FF    			jsr	xplusa				;X = X + A
0986   ED14 A6 02       			ldaa	$02,X                         ;get the actual sound command that will be sent
0987   ED16 4C          			inca	
0988   ED17             			ifeq						;If value is $FF, then this is complex sound
0988   ED17             
0988   ED17 26 FE       
0989   ED19 EE 00       				ldx	$00,X
0990   ED1B             			endif
0990   ED1B             
0990   ED1B             
0990   ED1B             
0990   ED1B             
0990   ED1B             
0990   ED1B~            			endif
0990   ED1B~            			endif
0990   ED1B             
0990   ED1B~            			endif
0990   ED1B~            			endif
0990   ED1B             
0990   ED18             
0990   ED18 02          
0990   ED19             
0990   ED19             
0990   ED19~            			endif
0990   ED19~            			endif
0990   ED19~            			endif
0990   ED19             
0990   ED1B             
0990   ED1B~            			endif
0990   ED1B~            			endif
0990   ED1B             
0991   ED1B A6 00       			ldaa	$00,X
0992   ED1D D6 BA       			ldab	cur_sndflags
0993   ED1F C5 40       			bitb	#$40
0994   ED21             			ifeq
0994   ED21             
0994   ED21 26 FE       
0995   ED23 8D 1D       				bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
0996   ED25             				ifcc
0996   ED25             
0996   ED25 25 FE       
0997   ED27 33          b_04E					pulb	
0998   ED28 32          					pula	
0999   ED29 20 2A       					bra	b_051
1000   ED2B             				endif
1000   ED2B             
1000   ED2B             
1000   ED2B             
1000   ED2B             
1000   ED2B             
1000   ED2B~            				endif
1000   ED2B~            				endif
1000   ED2B             
1000   ED2B~            				endif
1000   ED2B~            				endif
1000   ED2B             
1000   ED26             
1000   ED26 04          
1000   ED27             
1000   ED27             
1000   ED27~            				endif
1000   ED27~            				endif
1000   ED27~            				endif
1000   ED27             
1000   ED2B             
1000   ED2B~            				endif
1000   ED2B~            				endif
1000   ED2B             
1001   ED2B             			endif
1001   ED2B             
1001   ED2B             
1001   ED2B             
1001   ED2B             
1001   ED2B             
1001   ED2B~            			endif
1001   ED2B~            			endif
1001   ED2B             
1001   ED2B~            			endif
1001   ED2B~            			endif
1001   ED2B             
1001   ED22             
1001   ED22 08          
1001   ED23             
1001   ED23             
1001   ED23~            			endif
1001   ED23~            			endif
1001   ED23~            			endif
1001   ED23             
1001   ED2B             
1001   ED2B~            			endif
1001   ED2B~            			endif
1001   ED2B             
1002   ED2B 4D          b_050			tsta	
1003   ED2C 2A 6B       			bpl	snd_exit_pull			;pula,pulb,rts.
1004   ED2E D6 C6       			ldab	next_sndcnt
1005   ED30             			ifne
1005   ED30             
1005   ED30 27 FE       
1006   ED32 D6 C5             			ldab	next_sndflags
1007   ED34 8D 0C             			bsr	isnd_test				;If (A&0f)&(B&0f)=0) & (B&20=00) Then Set Carry
1008   ED36 25 61             			bcs	snd_exit_pull			;pula,pulb,rts.
1009   ED38                   		endif
1009   ED38             
1009   ED38             
1009   ED38             
1009   ED38             
1009   ED38             
1009   ED38~                  		endif
1009   ED38~                  		endif
1009   ED38             
1009   ED38~                  		endif
1009   ED38~                  		endif
1009   ED38             
1009   ED31             
1009   ED31 06          
1009   ED32             
1009   ED32             
1009   ED32~                  		endif
1009   ED32~                  		endif
1009   ED32~                  		endif
1009   ED32             
1009   ED38             
1009   ED38~                  		endif
1009   ED38~                  		endif
1009   ED38             
1010   ED38 97 C5       			staa	next_sndflags
1011   ED3A 33          			pulb	
1012   ED3B 32          			pula	
1013   ED3C 97 C7       			staa	next_sndcmd
1014   ED3E D7 C6       			stab	next_sndcnt
1015   ED40 20 59       			bra	snd_exit					;rts
1016   ED42             			
1017   ED42 36          isnd_test		psha	
1018   ED43 37          			pshb	
1019   ED44 84 0F       			anda	#$0F
1020   ED46 C4 0F       			andb	#$0F
1021   ED48 11          			cba	
1022   ED49 33          			pulb	
1023   ED4A 32          			pula	
1024   ED4B             			ifeq
1024   ED4B             
1024   ED4B 26 FE       
1025   ED4D C5 20       				bitb	#$20
1026   ED4F             				ifeq
1026   ED4F             
1026   ED4F 26 FE       
1027   ED51 0D          					sec
1028   ED52             				endif
1028   ED52             
1028   ED52             
1028   ED52             
1028   ED52             
1028   ED52             
1028   ED52~            				endif
1028   ED52~            				endif
1028   ED52             
1028   ED52~            				endif
1028   ED52~            				endif
1028   ED52             
1028   ED50             
1028   ED50 01          
1028   ED51             
1028   ED51             
1028   ED51~            				endif
1028   ED51~            				endif
1028   ED51~            				endif
1028   ED51             
1028   ED52             
1028   ED52~            				endif
1028   ED52~            				endif
1028   ED52             
1029   ED52             			endif
1029   ED52             
1029   ED52             
1029   ED52             
1029   ED52             
1029   ED52             
1029   ED52~            			endif
1029   ED52~            			endif
1029   ED52             
1029   ED52~            			endif
1029   ED52~            			endif
1029   ED52             
1029   ED4C             
1029   ED4C 05          
1029   ED4D             
1029   ED4D             
1029   ED4D~            			endif
1029   ED4D~            			endif
1029   ED4D~            			endif
1029   ED4D             
1029   ED52             
1029   ED52~            			endif
1029   ED52~            			endif
1029   ED52             
1030   ED52 39          			rts	
1031   ED53             
1032   ED53             ;A=sound command
1033   ED53             ;B=count
1034   ED53 DF AA       isnd_mult		stx	thread_priority
1035   ED55 36          b_051			psha	
1036   ED56 37          			pshb	
1037   ED57 D7 B8       			stab	soundcount
1038   ED59 16          			tab	                              ;store our sound in B temporarily
1039   ED5A 86 7F       			ldaa	#$7F
1040   ED5C 8D 42       			bsr	send_snd				;Send Sound Stop Command
1041   ED5E 17          			tba	                              ;get it back
1042   ED5F 97 C2       			staa	soundindex				;Sound Command Table Index
1043   ED61 48          			asla	
1044   ED62 1B          			aba						;Index * 3
1045   ED63 FE E0 53    			ldx	gr_soundtable_ptr			;Game ROM: Sound Table Pointer
1046   ED66 BD EE FF    isnd_mult_x		jsr	xplusa				;X = X + A
1047   ED69 A6 02       			ldaa	$02,X					;Sound Command
1048   ED6B 81 FF       			cmpa	#$FF
1049   ED6D             			ifne						;Simple Sound
1049   ED6D             
1049   ED6D 27 FE       
1050   ED6F E6 00       				ldab	$00,X
1051   ED71 C4 7F       				andb	#$7F
1052   ED73 D7 BA       				stab	cur_sndflags			
1053   ED75 E6 01       				ldab	$01,X
1054   ED77 D7 BE       				stab	soundirqcount+1			
1055   ED79 7F 00 BD    				clr	soundirqcount
1056   ED7C DE BD       				ldx	soundirqcount			;Clear the MSB of the word counter ($BD,$BE)
1057   ED7E DF BF       				stx	soundindex_com			;Store the whole counter in the Common Sound Index
1058   ED80 C6 40       				ldab	#$40
1059   ED82 D7 C1       				stab	sys_soundflags			;Sound Flag?
1060   ED84 8D 18       				bsr	send_snd_save			;Send the Command, Save in 'lastsound'
1061   ED86             			else						;Complex Sound
1061   ED86             
1061   ED86             
1061   ED86             
1061   ED86             
1061   ED6E             
1061   ED6E             
1061   ED6E             
1061   ED6E~            			else						;Complex Sound
1061   ED6E~            			else						;Complex Sound
1061   ED6E~            			else						;Complex Sound
1061   ED6E~            			else						;Complex Sound
1061   ED6E             
1061   ED6E~            			else						;Complex Sound
1061   ED6E~            			else						;Complex Sound
1061   ED6E~            			else						;Complex Sound
1061   ED6E~            			else						;Complex Sound
1061   ED6E             
1061   ED6E             
1061   ED6E 19          
1061   ED86             
1061   ED86 20 FE       
1061   ED88             
1061   ED88             
1061   ED88             
1061   ED88~            			else						;Complex Sound
1061   ED88~            			else						;Complex Sound
1061   ED88~            			else						;Complex Sound
1061   ED88~            			else						;Complex Sound
1061   ED88~            			else						;Complex Sound
1061   ED88             
1061   ED88~            			else						;Complex Sound
1061   ED88~            			else						;Complex Sound
1061   ED88             
1061   ED88~            			else						;Complex Sound
1061   ED88~            			else						;Complex Sound
1061   ED88             
1062   ED88 EE 00       				ldx	$00,X					;Here if Complex Sound Command
1063   ED8A C6 80       				ldab	#$80
1064   ED8C D7 C1       				stab	sys_soundflags			;Set Status Flag
1065   ED8E EA 00       				orab	$00,X
1066   ED90 D7 BA       				stab	cur_sndflags
1067   ED92 08          				inx	
1068   ED93 DF BF       				stx	soundindex_com
1069   ED95 DF BB       				stx	soundptr
1070   ED97 8D 0E       				bsr	do_complex_snd			;Process it and send
1071   ED99             			endif
1071   ED99             
1071   ED99             
1071   ED99             
1071   ED99             
1071   ED99             
1071   ED99~            			endif
1071   ED99~            			endif
1071   ED99             
1071   ED99~            			endif
1071   ED99~            			endif
1071   ED99             
1071   ED87             
1071   ED87 11          
1071   ED88             
1071   ED88             
1071   ED88~            			endif
1071   ED88~            			endif
1071   ED88~            			endif
1071   ED88             
1071   ED99             
1071   ED99~            			endif
1071   ED99~            			endif
1071   ED99             
1072   ED99 33          snd_exit_pull	pulb	
1073   ED9A 32          			pula	
1074   ED9B DE AA       snd_exit		ldx	thread_priority
1075   ED9D 39          			rts	
1076   ED9E             
1077   ED9E             ;*****************************************************************
1078   ED9E             ;* Send the command to the sound board, stores the command sent
1079   ED9E             ;* in 'lastsound' for reference.
1080   ED9E             ;*****************************************************************			
1081   ED9E 97 B9       send_snd_save	staa	lastsound
1082   EDA0 BD E0 A1    send_snd		jsr	gr_sound_event			
1083   EDA3 B7 21 00    			staa	pia_sound_data
1084   EDA6 39          			rts	
1085   EDA7             
1086   EDA7             ;*****************************************************************
1087   EDA7             ;* This routine will send the next item in a complex sound
1088   EDA7             ;* index to the Sound board PIA.
1089   EDA7             ;*****************************************************************			
1090   EDA7 DE BB       do_complex_snd	ldx	soundptr
1091   EDA9 A6 00       _csnd_loop		ldaa	$00,X				;Load the first byte of this sequence
1092   EDAB 16          			tab	
1093   EDAC C4 C0       			andb	#$C0
1094   EDAE             			ifne					;Check bits $80 or $40
1094   EDAE             
1094   EDAE 27 FE       
1095   EDB0             				ifpl				;If bit $80 is set, then sound is immediate
1095   EDB0             
1095   EDB0 2B FE       
1096   EDB2 84 3F       					anda	#$3F
1097   EDB4 97 C3       					staa	csound_timer
1098   EDB6 08          					inx	
1099   EDB7 A6 00       					ldaa	$00,X
1100   EDB9 97 C4       b_05B					staa	csound_timer+1
1101   EDBB 96 BA       					ldaa	cur_sndflags
1102   EDBD 84 EF       					anda	#$EF			;Flag this sound as non-immediate (timer based)
1103   EDBF 97 BA       store_csndflg			staa	cur_sndflags	;Store Flag
1104   EDC1 08          					inx	
1105   EDC2 20 E5       					bra	_csnd_loop
1106   EDC4             				endif
1106   EDC4             
1106   EDC4             
1106   EDC4             
1106   EDC4             
1106   EDC4             
1106   EDC4~            				endif
1106   EDC4~            				endif
1106   EDC4             
1106   EDC4~            				endif
1106   EDC4~            				endif
1106   EDC4             
1106   EDB1             
1106   EDB1 12          
1106   EDB2             
1106   EDB2             
1106   EDB2~            				endif
1106   EDB2~            				endif
1106   EDB2~            				endif
1106   EDB2             
1106   EDC4             
1106   EDC4~            				endif
1106   EDC4~            				endif
1106   EDC4             
1107   EDC4 7F 00 C3    				clr	csound_timer
1108   EDC7 84 7F       				anda	#$7F
1109   EDC9 26 EE       				bne	b_05B			;If the timer is not zero, then flag this sound as non-immediate
1110   EDCB 96 BA       				ldaa	cur_sndflags
1111   EDCD 8A 10       				oraa	#$10			;Flag as non-immediate
1112   EDCF 20 EE       				bra	store_csndflg
1113   EDD1             			endif
1113   EDD1             
1113   EDD1             
1113   EDD1             
1113   EDD1             
1113   EDD1             
1113   EDD1~            			endif
1113   EDD1~            			endif
1113   EDD1             
1113   EDD1~            			endif
1113   EDD1~            			endif
1113   EDD1             
1113   EDAF             
1113   EDAF 21          
1113   EDB0             
1113   EDB0             
1113   EDB0~            			endif
1113   EDB0~            			endif
1113   EDB0~            			endif
1113   EDB0             
1113   EDD1             
1113   EDD1~            			endif
1113   EDD1~            			endif
1113   EDD1             
1114   EDD1 8D CB       			bsr	send_snd_save		;Send the Command, Save in 'lastsound'
1115   EDD3 08          			inx	
1116   EDD4 DF BB       			stx	soundptr			;Move pointer to next byte
1117   EDD6 A6 00       			ldaa	$00,X
1118   EDD8 81 3F       			cmpa	#$3F				;Are we done?
1119   EDDA             			ifeq
1119   EDDA             
1119   EDDA 26 FE       
1120   EDDC 96 BA       				ldaa	cur_sndflags		;Yes 
1121   EDDE 84 7F       				anda	#$7F				;Mark it as a simple sound now
1122   EDE0 97 BA       				staa	cur_sndflags
1123   EDE2             			endif
1123   EDE2             
1123   EDE2             
1123   EDE2             
1123   EDE2             
1123   EDE2             
1123   EDE2~            			endif
1123   EDE2~            			endif
1123   EDE2             
1123   EDE2~            			endif
1123   EDE2~            			endif
1123   EDE2             
1123   EDDB             
1123   EDDB 06          
1123   EDDC             
1123   EDDC             
1123   EDDC~            			endif
1123   EDDC~            			endif
1123   EDDC~            			endif
1123   EDDC             
1123   EDE2             
1123   EDE2~            			endif
1123   EDE2~            			endif
1123   EDE2             
1124   EDE2 DE C3       			ldx	csound_timer
1125   EDE4 DF BD       			stx	soundirqcount
1126   EDE6 39          			rts	
1127   EDE7             
1128   EDE7             ;**********************************************************
1129   EDE7             ;* This routine will check two of the switch flags in the
1130   EDE7             ;* B register (byte 1 of switch table). If the switch 
1131   EDE7             ;* is disabled for either flag (tilt and gameover) then
1132   EDE7             ;* the routine returns with the carry flag set.
1133   EDE7             ;**********************************************************			
1134   EDE7 36          check_sw_mask	psha	
1135   EDE8 B6 E0 4D    			ldaa	gr_lastswitch			;Last Switch # for Game
1136   EDEB 91 A5       			cmpa	sw_encoded				;Switch #
1137   EDED             			ifgt						;Out of Range!
1137   EDED             
1137   EDED 23 FE       
1138   EDEF C5 40       				bitb	#$40					;Flag 40: Active on Game Tilt
1139   EDF1             				ifeq
1139   EDF1             
1139   EDF1 26 FE       
1140   EDF3 7D 00 C8    					tst	flag_tilt				;Tilt Flag
1141   EDF6 26 09       					bne	sw_ignore
1142   EDF8             				endif
1142   EDF8             
1142   EDF8             
1142   EDF8             
1142   EDF8             
1142   EDF8             
1142   EDF8~            				endif
1142   EDF8~            				endif
1142   EDF8             
1142   EDF8~            				endif
1142   EDF8~            				endif
1142   EDF8             
1142   EDF2             
1142   EDF2 05          
1142   EDF3             
1142   EDF3             
1142   EDF3~            				endif
1142   EDF3~            				endif
1142   EDF3~            				endif
1142   EDF3             
1142   EDF8             
1142   EDF8~            				endif
1142   EDF8~            				endif
1142   EDF8             
1143   EDF8 C5 20       				bitb	#$20					;Flag 20: Active on Game Over
1144   EDFA 26 06       				bne	sw_active
1145   EDFC 7D 00 C9    				tst	flag_gameover			;Game Over?
1146   EDFF 27 01       				beq	sw_active
1147   EE01             			endif
1147   EE01             
1147   EE01             
1147   EE01             
1147   EE01             
1147   EE01             
1147   EE01~            			endif
1147   EE01~            			endif
1147   EE01             
1147   EE01~            			endif
1147   EE01~            			endif
1147   EE01             
1147   EDEE             
1147   EDEE 12          
1147   EDEF             
1147   EDEF             
1147   EDEF~            			endif
1147   EDEF~            			endif
1147   EDEF~            			endif
1147   EDEF             
1147   EE01             
1147   EE01~            			endif
1147   EE01~            			endif
1147   EE01             
1148   EE01 0D          sw_ignore		sec						;Ignore this switch when carry is set
1149   EE02 32          sw_active		pula	
1150   EE03 39          			rts	
1151   EE04             
1152   EE04             ;**********************************************************
1153   EE04             ;* Switch is in down position, see if we should run it.
1154   EE04             ;**********************************************************			
1155   EE04 BD EE F7    sw_down		jsr	sw_tbl_lookup		;Loads X with pointer to switch table entry
1156   EE07 E6 00       			ldab	$00,X				;GAME ROM Switch Data 1(Flags,etc)
1157   EE09 96 A4       			ldaa	sys_temp5
1158   EE0B 95 A2       			bita	sys_temp3
1159   EE0D 27 06       			beq	sw_dtime			;Is switch still down?
1160   EE0F C5 08       			bitb	#$08				;No, but check Flag 08 which is Instant Trigger
1161   EE11             			ifne					;Not instant,.. leave now.
1161   EE11             
1161   EE11 27 FE       
1162   EE13 20 04       				bra	sw_trig_yes			;Must have been instant, do it now.	
1163   EE15 C5 10       sw_dtime			bitb	#$10				;Switch has been down enough, but is it enabled?
1164   EE17             				ifne					;no.. leave now.
1164   EE17             
1164   EE17 27 FE       
1165   EE19 8D CC       sw_trig_yes				bsr	check_sw_mask		;Checks Switch Flags for Tilt and Gameover and if switch is in range
1166   EE1B             					ifcc					;If not okay to run... leave
1166   EE1B             
1166   EE1B 25 FE       
1167   EE1D 4F          						clra	
1168   EE1E C5 40       						bitb	#$40				;Is it Active on Game Tilt?
1169   EE20             						ifne					
1169   EE20             
1169   EE20 27 FE       
1170   EE22 8A 04       							oraa	#$04				;Give this thread a different priority then
1171   EE24             						endif
1171   EE24             
1171   EE24             
1171   EE24             
1171   EE24             
1171   EE24             
1171   EE24~            						endif
1171   EE24~            						endif
1171   EE24             
1171   EE24~            						endif
1171   EE24~            						endif
1171   EE24             
1171   EE21             
1171   EE21 02          
1171   EE22             
1171   EE22             
1171   EE22~            						endif
1171   EE22~            						endif
1171   EE22~            						endif
1171   EE22             
1171   EE24             
1171   EE24~            						endif
1171   EE24~            						endif
1171   EE24             
1172   EE24 97 AA       						staa	thread_priority
1173   EE26 96 A5       						ldaa	sw_encoded			;Switch # (encoded)
1174   EE28 EE 01       						ldx	$01,X
1175   EE2A C5 07       						bitb	#$07				;Was this a inline defined switch type? Type = 0
1176   EE2C             						ifeq					;Always?
1176   EE2C             
1176   EE2C 26 FE       
1177   EE2E EE 02       							ldx	$02,X				;Get handler address at base pointer + 2
1178   EE30             						endif
1178   EE30             
1178   EE30             
1178   EE30             
1178   EE30             
1178   EE30             
1178   EE30~            						endif
1178   EE30~            						endif
1178   EE30             
1178   EE30~            						endif
1178   EE30~            						endif
1178   EE30             
1178   EE2D             
1178   EE2D 02          
1178   EE2E             
1178   EE2E             
1178   EE2E~            						endif
1178   EE2E~            						endif
1178   EE2E~            						endif
1178   EE2E             
1178   EE30             
1178   EE30~            						endif
1178   EE30~            						endif
1178   EE30             
1179   EE30 5D          						tstb					;Is the handler code WML7 or Native?
1180   EE31             						ifmi					;Minus = WML7
1180   EE31             
1180   EE31 2A FE       
1181   EE33 DF A6       							stx	sys_temp_w2			;X = Handler Address
1182   EE35 CE F3 CB    							ldx	#switch_entry		;Will put this routine into VM.
1183   EE38             						endif
1183   EE38             
1183   EE38             
1183   EE38             
1183   EE38             
1183   EE38             
1183   EE38~            						endif
1183   EE38~            						endif
1183   EE38             
1183   EE38~            						endif
1183   EE38~            						endif
1183   EE38             
1183   EE32             
1183   EE32 05          
1183   EE33             
1183   EE33             
1183   EE33~            						endif
1183   EE33~            						endif
1183   EE33~            						endif
1183   EE33             
1183   EE38             
1183   EE38~            						endif
1183   EE38~            						endif
1183   EE38             
1184   EE38 BD E0 9F    						jsr	gr_switch_event		;Game ROM switch event hook
1185   EE3B BD EA 78    						jsr	newthread_sp		;Push VM: Data in A,B,X,threadpriority,$A6,$A7
1186   EE3E 25 69       						bcs	_clc_rts			;Carry set if VM was full and thread not added
1187   EE40             											;Exit now and don't mark switch as attended too.
1188   EE40             					endif
1188   EE40             
1188   EE40             
1188   EE40             
1188   EE40             
1188   EE40             
1188   EE40~            					endif
1188   EE40~            					endif
1188   EE40             
1188   EE40~            					endif
1188   EE40~            					endif
1188   EE40             
1188   EE1C             
1188   EE1C 23          
1188   EE1D             
1188   EE1D             
1188   EE1D~            					endif
1188   EE1D~            					endif
1188   EE1D~            					endif
1188   EE1D             
1188   EE40             
1188   EE40~            					endif
1188   EE40~            					endif
1188   EE40             
1189   EE40             				endif
1189   EE40             
1189   EE40             
1189   EE40             
1189   EE40             
1189   EE40             
1189   EE40~            				endif
1189   EE40~            				endif
1189   EE40             
1189   EE40~            				endif
1189   EE40~            				endif
1189   EE40             
1189   EE18             
1189   EE18 27          
1189   EE19             
1189   EE19             
1189   EE19~            				endif
1189   EE19~            				endif
1189   EE19~            				endif
1189   EE19             
1189   EE40             
1189   EE40~            				endif
1189   EE40~            				endif
1189   EE40             
1190   EE40             			endif
1190   EE40             
1190   EE40             
1190   EE40             
1190   EE40             
1190   EE40             
1190   EE40~            			endif
1190   EE40~            			endif
1190   EE40             
1190   EE40~            			endif
1190   EE40~            			endif
1190   EE40             
1190   EE12             
1190   EE12 2D          
1190   EE13             
1190   EE13             
1190   EE13~            			endif
1190   EE13~            			endif
1190   EE13~            			endif
1190   EE13             
1190   EE40             
1190   EE40~            			endif
1190   EE40~            			endif
1190   EE40             
1191   EE40 DE A0       			ldx	sys_temp1
1192   EE42 96 A2       			ldaa	sys_temp3
1193   EE44 A8 61       			eora	switch_debounced,X		;Clear Switch Matrix Flag (switch attended too)
1194   EE46 A7 61       			staa	switch_debounced,X
1195   EE48 DE A0       sw_proc		ldx	sys_temp1
1196   EE4A D6 A2       			ldab	sys_temp3
1197   EE4C 53          			comb	
1198   EE4D 17          			tba	
1199   EE4E E4 69       			andb	switch_masked,X
1200   EE50 E7 69       			stab	switch_masked,X
1201   EE52 16          			tab	
1202   EE53 E4 71       			andb	switch_pending,X
1203   EE55 E7 71       			stab	switch_pending,X
1204   EE57 16          			tab	
1205   EE58 A4 79       			anda	switch_aux,X
1206   EE5A A7 79       			staa	switch_aux,X
1207   EE5C E4 81       			andb	switch_b4,X
1208   EE5E E7 81       			stab	switch_b4,X
1209   EE60 39          			rts	
1210   EE61             
1211   EE61             ;****************************************************************************
1212   EE61             ;*
1213   EE61             ;****************************************************************************			
1214   EE61 DF A0       check_sw_close	stx	sys_temp1
1215   EE63 E6 61       			ldab	switch_debounced,X
1216   EE65 D7 A4       			stab	sys_temp5				;Store 
1217   EE67 97 A3       			staa	sys_temp4
1218   EE69 8D 2D       _sc01			bsr	getswitch				;Clear Carry if Switch Active or Done
1219   EE6B 25 28       			bcs	to_ldx_rts				;get outta here!
1220   EE6D 8D 3C       			bsr	sw_pack				;$A5 = ($A1<<3)+BitPos($A2)
1221   EE6F 8D 6A       			bsr	sw_get_time				;Gets Switch Trigger Data
1222   EE71             			ifne						;If it is not 0 then we must time it
1222   EE71             
1222   EE71 27 FE       
1223   EE73 9B AC       				adda	irqcount				;Number of IRQ's since last loop
1224   EE75 DE 96       				ldx	switch_queue_pointer
1225   EE77 8C 11 18    				cpx	#switch_queue_full
1226   EE7A 27 ED       				beq	_sc01
1227   EE7C A7 00       				staa	$00,X
1228   EE7E 96 A5       				ldaa	sw_encoded				;Encoded Switch Number
1229   EE80 A7 01       				staa	$01,X
1230   EE82 08          				inx	
1231   EE83 08          				inx	
1232   EE84 DF 96       				stx	switch_queue_pointer
1233   EE86 DE A0       				ldx	sys_temp1
1234   EE88 A6 81       				ldaa	switch_b4,X
1235   EE8A 9A A2       				oraa	sys_temp3
1236   EE8C A7 81       				staa	switch_b4,X
1237   EE8E 20 D9       				bra	_sc01
1238   EE90             			endif
1238   EE90             
1238   EE90             
1238   EE90             
1238   EE90             
1238   EE90             
1238   EE90~            			endif
1238   EE90~            			endif
1238   EE90             
1238   EE90~            			endif
1238   EE90~            			endif
1238   EE90             
1238   EE72             
1238   EE72 1D          
1238   EE73             
1238   EE73             
1238   EE73~            			endif
1238   EE73~            			endif
1238   EE73~            			endif
1238   EE73             
1238   EE90             
1238   EE90~            			endif
1238   EE90~            			endif
1238   EE90             
1239   EE90 BD EE 04    			jsr	sw_down				;Ready to do switch now!
1240   EE93 20 D4       			bra	_sc01
1241   EE95 DE A0       to_ldx_rts		ldx	sys_temp1
1242   EE97 39          			rts	
1243   EE98             
1244   EE98             ;****************************************************************************
1245   EE98             ;*
1246   EE98             ;****************************************************************************				
1247   EE98 4F          getswitch		clra	
1248   EE99 0D          			sec	
1249   EE9A D6 A3       			ldab	sys_temp4			;Switch Data
1250   EE9C             			ifne
1250   EE9C             
1250   EE9C 27 FE       
1251   EE9E             				begin
1251   EE9E             
1252   EE9E 49          					rola	
1253   EE9F 95 A3       					bita	sys_temp4
1254   EEA1             				neend
1254   EEA1             
1254   EEA1             
1254   EEA1~            				neend
1254   EEA1~            				neend
1254   EEA1~            				neend
1254   EEA1             
1254   EEA1 27 FB       
1254   EEA3             
1254   EEA3~            				neend
1254   EEA3~            				neend
1254   EEA3             
1255   EEA3 97 A2       				staa	sys_temp3
1256   EEA5 98 A3       				eora	sys_temp4
1257   EEA7 97 A3       				staa	sys_temp4
1258   EEA9 0C          _clc_rts			clc	
1259   EEAA             			endif
1259   EEAA             
1259   EEAA             
1259   EEAA             
1259   EEAA             
1259   EEAA             
1259   EEAA~            			endif
1259   EEAA~            			endif
1259   EEAA             
1259   EEAA~            			endif
1259   EEAA~            			endif
1259   EEAA             
1259   EE9D             
1259   EE9D 0C          
1259   EE9E             
1259   EE9E             
1259   EE9E~            			endif
1259   EE9E~            			endif
1259   EE9E~            			endif
1259   EE9E             
1259   EEAA             
1259   EEAA~            			endif
1259   EEAA~            			endif
1259   EEAA             
1260   EEAA 39          			rts	
1261   EEAB             
1262   EEAB             ;****************************************************************************
1263   EEAB             ;* Takes the decimal representation of the switch number contained in 
1264   EEAB             ;* sys_temp2 and sys_temp3 and converts it into a more compact form of 
1265   EEAB             ;* 	
1266   EEAB             ;* AAAAABBB
1267   EEAB             ;* 
1268   EEAB             ;* where AAAAA is the column number of the switch (sw 17 = 2)
1269   EEAB             ;*       BBB   is the bit position of the current switch (sw 17 = $01)
1270   EEAB             ;****************************************************************************	
1271   EEAB 96 A1       sw_pack		ldaa	sys_temp2
1272   EEAD 48          			asla	
1273   EEAE 48          			asla	
1274   EEAF 48          			asla	
1275   EEB0 D6 A2       			ldab	sys_temp3
1276   EEB2             			begin
1276   EEB2             
1277   EEB2 56          				rorb	
1278   EEB3 25 03       				bcs	pack_done
1279   EEB5 4C          				inca	
1280   EEB6             			loopend
1280   EEB6             
1280   EEB6             
1280   EEB6~            			loopend
1280   EEB6~            			loopend
1280   EEB6~            			loopend
1280   EEB6             
1280   EEB6 20 FA       
1280   EEB8             
1280   EEB8~            			loopend
1280   EEB8~            			loopend
1280   EEB8             
1281   EEB8 97 A5       pack_done		staa	sw_encoded
1282   EEBA 39          			rts	
1283   EEBB             
1284   EEBB             ;****************************************************************************
1285   EEBB             ;*
1286   EEBB             ;****************************************************************************				
1287   EEBB 97 A3       check_sw_open	staa	sys_temp4
1288   EEBD DF A0       			stx	sys_temp1
1289   EEBF 8D D7       b_06F			bsr	getswitch				;Clear Carry if Switch Activated
1290   EEC1 25 D2       			bcs	to_ldx_rts				;ldx $A0, rts.
1291   EEC3 8D E6       			bsr	sw_pack				;$A5(A) = ($A1<<3)+BitPos($A2) Encode Matrix Position
1292   EEC5 CE 11 00    			ldx	#switch_queue
1293   EEC8 9C 96       b_071			cpx	switch_queue_pointer
1294   EECA 27 F3       			beq	b_06F
1295   EECC A1 01       			cmpa	$01,X					;Is this switch in the buffer?
1296   EECE 26 07       			bne	b_070
1297   EED0 8D 3D       			bsr	copy_word				;Copy Word: $96--  Data,$96 -> Data,X
1298   EED2 BD EE 48    			jsr	sw_proc
1299   EED5 20 E8       			bra	b_06F
1300   EED7 08          b_070			inx	
1301   EED8 08          			inx	
1302   EED9 20 ED       			bra	b_071
1303   EEDB             			
1304   EEDB             ;****************************************************************************
1305   EEDB             ;* Looks up the trigger data (time up and time down requirements) for the
1306   EEDB             ;* switch contained in 'sw_encoded'. If the switch table lists the trigger
1307   EEDB             ;* type as 0, then the trigger data is pulled from the location in bytes
1308   EEDB             ;* 2 and 3 of the switch table entry.
1309   EEDB             ;****************************************************************************				
1310   EEDB 8D 1A       sw_get_time		bsr	sw_tbl_lookup		;X = Data@ (E051 + $A5*3)
1311   EEDD A6 00       			ldaa	$00,X
1312   EEDF 84 07       			anda	#$07				;Get the trigger type for this switch
1313   EEE1             			ifne					;If 1-7, then look up data in switch type table
1313   EEE1             
1313   EEE1 27 FE       
1314   EEE3 48          				asla						
1315   EEE4 CE E0 67    				ldx	#gr_switchtypetable-2		;Game ROM Table: Switch Trigger Table
1316   EEE7 8D 16       				bsr	xplusa				;X = X + A
1317   EEE9             			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE9             
1317   EEE9             
1317   EEE9             
1317   EEE9             
1317   EEE2             
1317   EEE2             
1317   EEE2             
1317   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE2             
1317   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE2~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEE2             
1317   EEE2             
1317   EEE2 08          
1317   EEE9             
1317   EEE9 20 FE       
1317   EEEB             
1317   EEEB             
1317   EEEB             
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB             
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB             
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB~            			else					;Otherwise, this switch has inline trigger data pointer
1317   EEEB             
1318   EEEB EE 01       				ldx	$01,X
1319   EEED             			endif
1319   EEED             
1319   EEED             
1319   EEED             
1319   EEED             
1319   EEED             
1319   EEED~            			endif
1319   EEED~            			endif
1319   EEED             
1319   EEED~            			endif
1319   EEED~            			endif
1319   EEED             
1319   EEEA             
1319   EEEA 02          
1319   EEEB             
1319   EEEB             
1319   EEEB~            			endif
1319   EEEB~            			endif
1319   EEEB~            			endif
1319   EEEB             
1319   EEED             
1319   EEED~            			endif
1319   EEED~            			endif
1319   EEED             
1320   EEED 96 A4       			ldaa	sys_temp5			;Matrix Data
1321   EEEF 94 A2       			anda	sys_temp3			;Bit Position
1322   EEF1             			ifne
1322   EEF1             
1322   EEF1 27 FE       
1323   EEF3 08          				inx					;Point to Switch Close Trigger data instead
1324   EEF4             			endif
1324   EEF4             
1324   EEF4             
1324   EEF4             
1324   EEF4             
1324   EEF4             
1324   EEF4~            			endif
1324   EEF4~            			endif
1324   EEF4             
1324   EEF4~            			endif
1324   EEF4~            			endif
1324   EEF4             
1324   EEF2             
1324   EEF2 01          
1324   EEF3             
1324   EEF3             
1324   EEF3~            			endif
1324   EEF3~            			endif
1324   EEF3~            			endif
1324   EEF3             
1324   EEF4             
1324   EEF4~            			endif
1324   EEF4~            			endif
1324   EEF4             
1325   EEF4 A6 00       			ldaa	$00,X				;Load Trigger Data
1326   EEF6 39          			rts	
1327   EEF7             			
1328   EEF7 96 A5       sw_tbl_lookup	ldaa	sw_encoded
1329   EEF9 16          			tab	
1330   EEFA 48          			asla					;Times 3 for switch table entry length
1331   EEFB 1B          			aba	
1332   EEFC FE E0 51    			ldx	gr_switchtable_ptr		;*** Table Pointer ***
1333   EEFF 36          xplusa		psha	
1334   EF00 DF A6       			stx	sys_temp_w2
1335   EF02 9B A7       			adda	sys_temp_w2+1
1336   EF04 97 A7       			staa	sys_temp_w2+1
1337   EF06             			ifcs
1337   EF06             
1337   EF06 24 FE       
1338   EF08 7C 00 A6    				inc	sys_temp_w2
1339   EF0B             			endif 
1339   EF0B             
1339   EF0B             
1339   EF0B             
1339   EF0B             
1339   EF0B             
1339   EF0B~            			endif 
1339   EF0B~            			endif 
1339   EF0B             
1339   EF0B~            			endif 
1339   EF0B~            			endif 
1339   EF0B             
1339   EF07             
1339   EF07 03          
1339   EF08             
1339   EF08             
1339   EF08~            			endif 
1339   EF08~            			endif 
1339   EF08~            			endif 
1339   EF08             
1339   EF0B             
1339   EF0B~            			endif 
1339   EF0B~            			endif 
1339   EF0B             
1340   EF0B DE A6       			ldx	sys_temp_w2
1341   EF0D 32          			pula	
1342   EF0E 39          			rts	
1343   EF0F             			
1344   EF0F DF A6       copy_word		stx	sys_temp_w2
1345   EF11 DE 96       			ldx	switch_queue_pointer
1346   EF13 09          			dex	
1347   EF14 09          			dex	
1348   EF15 DF 96       			stx	switch_queue_pointer
1349   EF17 A6 00       			ldaa	$00,X
1350   EF19 E6 01       			ldab	$01,X
1351   EF1B DE A6       			ldx	sys_temp_w2
1352   EF1D A7 00       			staa	$00,X
1353   EF1F E7 01       			stab	$01,X
1354   EF21 39          			rts	
1355   EF22             ;**************************************************
1356   EF22             ;* Initializes the Virtual Machine stack. Routine
1357   EF22             ;* will set up all 'next' pointers for each thread
1358   EF22             ;* placeholder. The VM size is determined by the 
1359   EF22             ;* settings in the game ROM. This must be balanced
1360   EF22             ;* properly for each game so that the created
1361   EF22             ;* threads do not clobber the cpu stack since they
1362   EF22             ;* grow towards each other.
1363   EF22             ;**************************************************
1364   EF22 F6 E0 4B    setup_vm_stack	ldab	gr_maxthreads		;Max Size of VM
1365   EF25 CE 11 A8    			ldx	#$11A8
1366   EF28 DF AF       			stx	vm_nextslot
1367   EF2A             			begin
1367   EF2A             
1368   EF2A DF 9C       				stx	temp2
1369   EF2C 96 9D       				ldaa	temp2+1
1370   EF2E 8B 12       				adda	#$12
1371   EF30 A7 01       				staa	$01,X
1372   EF32 86 00       				ldaa	#$00
1373   EF34 99 9C       				adca	temp2
1374   EF36 A7 00       				staa	$00,X
1375   EF38 5A          				decb	
1376   EF39 27 04       				beq	stack_done
1377   EF3B EE 00       				ldx	$00,X
1378   EF3D             			loopend
1378   EF3D             
1378   EF3D             
1378   EF3D~            			loopend
1378   EF3D~            			loopend
1378   EF3D~            			loopend
1378   EF3D             
1378   EF3D 20 EB       
1378   EF3F             
1378   EF3F~            			loopend
1378   EF3F~            			loopend
1378   EF3F             
1379   EF3F E7 00       stack_done		stab	$00,X
1380   EF41 E7 01       			stab	$01,X
1381   EF43 D7 AD       			stab	vm_base
1382   EF45 D7 AE       			stab	vm_base+1
1383   EF47 CE 00 AD    			ldx	#vm_base
1384   EF4A DF B3       			stx	vm_tail_thread
1385   EF4C 39          			rts
1386   EF4D             ;**************************************************
1387   EF4D             ;* Adds B to X, Protects A
1388   EF4D             ;**************************************************				
1389   EF4D 36          xplusb		psha	
1390   EF4E 17          			tba	
1391   EF4F 8D AE       			bsr	xplusa		;X = X + A
1392   EF51 32          			pula	
1393   EF52 39          			rts	
1394   EF53             ;**************************************************
1395   EF53             ;* Pulls data from CMOS location in X and X+1
1396   EF53             ;* and puts it in A. X is double incremented.
1397   EF53             ;*
1398   EF53             ;* Requires:	X
1399   EF53             ;* Protects:	B
1400   EF53             ;* Output:		A
1401   EF53             ;**************************************************		
1402   EF53 37          cmosinc_a		pshb	
1403   EF54 A6 00       			ldaa	$00,X
1404   EF56 E6 01       			ldab	$01,X
1405   EF58 08          			inx	
1406   EF59 08          			inx	
1407   EF5A C4 0F       			andb	#$0F
1408   EF5C 48          			asla	
1409   EF5D 48          			asla	
1410   EF5E 48          			asla	
1411   EF5F 48          			asla	
1412   EF60 1B          			aba	
1413   EF61 33          			pulb	
1414   EF62 39          			rts	
1415   EF63             ;**************************************************
1416   EF63             ;* Pulls data from CMOS location in X and X+1
1417   EF63             ;* and puts it in B. X is double incremented.
1418   EF63             ;*
1419   EF63             ;* Requires:	X
1420   EF63             ;* Protects:	A
1421   EF63             ;* Output:		B
1422   EF63             ;**************************************************				
1423   EF63 36          cmosinc_b		psha	
1424   EF64 8D ED       			bsr	cmosinc_a
1425   EF66 16          			tab	
1426   EF67 32          			pula	
1427   EF68 39          			rts	
1428   EF69             ;**************************************************
1429   EF69             ;* Transfers the byte value in B to the CMOS RAM
1430   EF69             ;* location contained in X. The byte is stored in
1431   EF69             ;* two consecutive nybbles in CMOS. X is double 
1432   EF69             ;* incremented.
1433   EF69             ;*
1434   EF69             ;* Requires: 	B,X
1435   EF69             ;* Protects:	A
1436   EF69             ;**************************************************
1437   EF69 36          b_cmosinc		psha	
1438   EF6A 17          			tba	
1439   EF6B 8D 42       			bsr	a_cmosinc		;A -> CMOS,X++
1440   EF6D 32          			pula	
1441   EF6E 39          			rts	
1442   EF6F             ;**************************************************
1443   EF6F             ;* Reset Game Audits only
1444   EF6F             ;**************************************************			
1445   EF6F CE 00 66    reset_audits	ldx	#$0066		;Clear RAM from 0100-0165
1446   EF72 20 03       			bra	clr_ram
1447   EF74 CE 01 00    clr_ram_100		ldx	#cmos_base
1448   EF77             clr_ram		begin
1448   EF77             
1449   EF77 6F FF       				clr	$FF,X
1450   EF79 09          				dex	
1451   EF7A             			eqend
1451   EF7A             
1451   EF7A             
1451   EF7A~            			eqend
1451   EF7A~            			eqend
1451   EF7A~            			eqend
1451   EF7A             
1451   EF7A 26 FB       
1451   EF7C             
1451   EF7C~            			eqend
1451   EF7C~            			eqend
1451   EF7C             
1452   EF7C 39          			rts	
1453   EF7D             ;**************************************************
1454   EF7D             ;* Restores Factory Settings and resets all audit 
1455   EF7D             ;* information, reloads pricing data and restores 
1456   EF7D             ;* the backup high score.
1457   EF7D             ;**************************************************			
1458   EF7D             factory_zeroaudits	
1459   EF7D 8D F5       			bsr	clr_ram_100				;Clear RAM 0100-01FF
1460   EF7F CE 01 7D    			ldx	#adj_base
1461   EF82 DF 9A       			stx	temp1
1462   EF84 CE E0 03    			ldx	#gr_cmoscsum			;Begining of Default Audit Data
1463   EF87 C6 18       			ldab	#$18
1464   EF89 8D 59       			bsr	copyblock2				;Transfer Audit Data
1465   EF8B C6 01       			ldab	#$01
1466   EF8D B6 21 00    			ldaa	pia_sound_data			;Read W29 Jumper Setting
1467   EF90             			ifmi
1467   EF90             
1467   EF90 2A FE       
1468   EF92 5C          				incb
1469   EF93             			endif
1469   EF93             
1469   EF93             
1469   EF93             
1469   EF93             
1469   EF93             
1469   EF93~            			endif
1469   EF93~            			endif
1469   EF93             
1469   EF93~            			endif
1469   EF93~            			endif
1469   EF93             
1469   EF91             
1469   EF91 01          
1469   EF92             
1469   EF92             
1469   EF92~            			endif
1469   EF92~            			endif
1469   EF92~            			endif
1469   EF92             
1469   EF93             
1469   EF93~            			endif
1469   EF93~            			endif
1469   EF93             
1470   EF93 8D 3B       			bsr	loadpricing				;Load Pricing Data
1471   EF95 8D 06       			bsr	restore_hstd			;Restore Backup High Score
1472   EF97 CE FC A3    			ldx	#to_audadj
1473   EF9A 7E EA C4    			jmp	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
1474   EF9D             			
1475   EF9D             ;**************************************************
1476   EF9D             ;* Clears the CMOS High Score RAM then copies
1477   EF9D             ;* the backup high score.
1478   EF9D             ;**************************************************			
1479   EF9D 4F          restore_hstd	clra	
1480   EF9E BD FB 24    			jsr	fill_hstd_digits			;Fill HSTD Digits with A
1481   EFA1 CE 01 81    			ldx	#adj_backuphstd
1482   EFA4 8D AD       			bsr	cmosinc_a				;CMOS,X++ -> A
1483   EFA6 16          			tab	
1484   EFA7 BD EC F3    			jsr	split_ab				;Shift A<<4 B>>4
1485   EFAA CE 01 66    			ldx	#aud_currenthstd			;CMOS: Current HSTD
1486   EFAD 8D BA       			bsr	b_cmosinc				;B -> CMOS,X++
1487   EFAF             
1488   EFAF             ;**************************************************
1489   EFAF             ;* Transfers the byte value in A to the CMOS RAM
1490   EFAF             ;* location contained in X. The byte is stored in
1491   EFAF             ;* two consecutive nybbles in CMOS. X is double 
1492   EFAF             ;* incremented.
1493   EFAF             ;*
1494   EFAF             ;* Requires: 	A,X
1495   EFAF             ;* Protects:	B
1496   EFAF             ;**************************************************			
1497   EFAF 36          a_cmosinc		psha	
1498   EFB0 A7 01       			staa	$01,X
1499   EFB2 44          			lsra	
1500   EFB3 44          			lsra	
1501   EFB4 44          			lsra	
1502   EFB5 44          			lsra	
1503   EFB6 A7 00       			staa	$00,X
1504   EFB8 08          			inx	
1505   EFB9 08          			inx	
1506   EFBA 32          			pula	
1507   EFBB 39          			rts	
1508   EFBC             
1509   EFBC             ;********************************************************
1510   EFBC             ;* Copies B bytes of data from address in X(temp2) to 
1511   EFBC             ;* address in temp1
1512   EFBC             ;*
1513   EFBC             ;* Requires:	B,X,temp1
1514   EFBC             ;* Protects:	A
1515   EFBC             ;* Destroys:	B,X,temp1,temp2
1516   EFBC             ;* Output:		B = 0
1517   EFBC             ;******************************************************** 			
1518   EFBC 36          copyblock		psha	
1519   EFBD             			begin
1519   EFBD             
1520   EFBD A6 00       				ldaa	$00,X
1521   EFBF 08          				inx	
1522   EFC0 DF 9C       				stx	temp2
1523   EFC2 DE 9A       				ldx	temp1
1524   EFC4 A7 00       				staa	$00,X
1525   EFC6 08          				inx	
1526   EFC7 DF 9A       				stx	temp1
1527   EFC9 DE 9C       				ldx	temp2
1528   EFCB 5A          				decb	
1529   EFCC             			eqend
1529   EFCC             
1529   EFCC             
1529   EFCC~            			eqend
1529   EFCC~            			eqend
1529   EFCC~            			eqend
1529   EFCC             
1529   EFCC 26 EF       
1529   EFCE             
1529   EFCE~            			eqend
1529   EFCE~            			eqend
1529   EFCE             
1530   EFCE 32          			pula	
1531   EFCF 39          			rts
1532   EFD0             
1533   EFD0             ;************************************************
1534   EFD0             ;* Copies the default pricing data block from
1535   EFD0             ;* the game ROM to CMOS RAM. Register B contains
1536   EFD0             ;* either $01 or $02 which specifies which 
1537   EFD0             ;* default table to copy based on MPU jumper W29
1538   EFD0             ;*
1539   EFD0             ;* Requires: B
1540   EFD0             ;************************************************				
1541   EFD0 F7 01 AE    loadpricing		stab	adj_pricecontrol+1		;Get the LSB of the pricing index
1542   EFD3 CE 01 AF    			ldx	#cmos_pricingbase   
1543   EFD6 DF 9A       			stx	temp1
1544   EFD8 58          			aslb						
1545   EFD9 17          			tba	
1546   EFDA 48          			asla	
1547   EFDB 1B          			aba	
1548   EFDC CE E0 15    			ldx	#gr_gameadjust7			;*** Table Pointer ***
1549   EFDF BD EE FF    			jsr	xplusa				;X = X + A
1550   EFE2 C6 06       			ldab	#$06
1551   EFE4 36          copyblock2		psha
1552   EFE5             			begin	
1552   EFE5             
1553   EFE5 A6 00       				ldaa	$00,X
1554   EFE7 08          				inx	
1555   EFE8 DF 9C       				stx	temp2
1556   EFEA DE 9A       				ldx	temp1
1557   EFEC 8D C1       				bsr	a_cmosinc				;A -> CMOS,X++
1558   EFEE DF 9A       				stx	temp1
1559   EFF0 DE 9C       				ldx	temp2
1560   EFF2 5A          				decb	
1561   EFF3             			eqend
1561   EFF3             
1561   EFF3             
1561   EFF3~            			eqend
1561   EFF3~            			eqend
1561   EFF3~            			eqend
1561   EFF3             
1561   EFF3 26 F0       
1561   EFF5             
1561   EFF5~            			eqend
1561   EFF5~            			eqend
1561   EFF5             
1562   EFF5 32          			pula	
1563   EFF6 39          			rts
1564   EFF7             			
1565   EFF7             ;******************************************************
1566   EFF7             ;* IRQ Routine
1567   EFF7             ;*
1568   EFF7             ;* This is the main timekeeping section of the code. 
1569   EFF7             ;* All events are kept track of by couting the IRQ's
1570   EFF7             ;* that have run.
1571   EFF7             ;*
1572   EFF7             ;* Tasks processed in the IRQ:
1573   EFF7             ;*		
1574   EFF7             ;*		Update Next Lamp
1575   EFF7             ;******************************************************			
1576   EFF7             sys_irq			
1577   EFF7             			;***********************************
1578   EFF7             			;* Start IRQ with Lamps...
1579   EFF7             			;***********************************
1580   EFF7 86 FF       			ldaa	#$FF
1581   EFF9 D6 89       			ldab	irq_counter
1582   EFFB 56          			rorb	
1583   EFFC             			ifcc						;Do Lamps every other IRQ
1583   EFFC             
1583   EFFC 25 FE       
1584   EFFE 7C 00 8B    				inc	lamp_index_word+1
1585   F001 CE 24 00    				ldx	#pia_lamp_row_data			;Lamp PIA Offset
1586   F004 A7 00       				staa	$00,X					;Blank Lamp Rows with an $FF
1587   F006 E6 03       				ldab	$03,X
1588   F008 6F 03       				clr	$03,X
1589   F00A A7 02       				staa	$02,X					;Blank Lamp Columns with $FF
1590   F00C E7 03       				stab	$03,X
1591   F00E 96 8C       				ldaa	lamp_bit				;Which strobe are we on
1592   F010 48          				asla						;Shift to next one
1593   F011             				ifeq						;Did it shift off end?			
1593   F011             
1593   F011 26 FE       
1594   F013 97 8B       					staa	lamp_index_word+1			;Yes, Reset lamp strobe count
1595   F015 97 89       					staa	irq_counter				;And Reset IRQ counter
1596   F017 4C          					inca						;Make it a 1
1597   F018             				endif
1597   F018             
1597   F018             
1597   F018             
1597   F018             
1597   F018             
1597   F018~            				endif
1597   F018~            				endif
1597   F018             
1597   F018~            				endif
1597   F018~            				endif
1597   F018             
1597   F012             
1597   F012 05          
1597   F013             
1597   F013             
1597   F013~            				endif
1597   F013~            				endif
1597   F013~            				endif
1597   F013             
1597   F018             
1597   F018~            				endif
1597   F018~            				endif
1597   F018             
1598   F018 97 8C       				staa	lamp_bit			;Store new lamp strobe bit position
1599   F01A A7 02       				staa	$02,X				;Put the strobe out there
1600   F01C A1 02       				cmpa	$02,X				;Did it take?
1601   F01E             				ifeq
1601   F01E             
1601   F01E 26 FE       
1602   F020 DE 8A       					ldx	lamp_index_word			;This will always be $0001-$0080, it is
1603   F022             											;used to index the lamp buffer bit positions.			
1604   F022 A6 20       					ldaa	lampbufferselect,X		;0=buffer_0 1=buffer_1
1605   F024 16          					tab	
1606   F025 53          					comb	
1607   F026 E4 10       					andb	lampbuffer0,X
1608   F028 A4 28       					anda	lampbuffer1,X
1609   F02A 1B          					aba	
1610   F02B 43          					coma	
1611   F02C B7 24 00    					staa	pia_lamp_row_data			;Store Lamp Row Data
1612   F02F             				endif
1612   F02F             
1612   F02F             
1612   F02F             
1612   F02F             
1612   F02F             
1612   F02F~            				endif
1612   F02F~            				endif
1612   F02F             
1612   F02F~            				endif
1612   F02F~            				endif
1612   F02F             
1612   F01F             
1612   F01F 0F          
1612   F020             
1612   F020             
1612   F020~            				endif
1612   F020~            				endif
1612   F020~            				endif
1612   F020             
1612   F02F             
1612   F02F~            				endif
1612   F02F~            				endif
1612   F02F             
1613   F02F             			endif
1613   F02F             
1613   F02F             
1613   F02F             
1613   F02F             
1613   F02F             
1613   F02F~            			endif
1613   F02F~            			endif
1613   F02F             
1613   F02F~            			endif
1613   F02F~            			endif
1613   F02F             
1613   EFFD             
1613   EFFD 31          
1613   EFFE             
1613   EFFE             
1613   EFFE~            			endif
1613   EFFE~            			endif
1613   EFFE~            			endif
1613   EFFE             
1613   F02F             
1613   F02F~            			endif
1613   F02F~            			endif
1613   F02F             
1614   F02F             			;***********************************
1615   F02F             			;* Now we will do the displays
1616   F02F             			;***********************************
1617   F02F DE 8A       			ldx	lamp_index_word		;Reset X back to $0000
1618   F031 D6 89       			ldab	irq_counter
1619   F033 C4 07       			andb	#$07
1620   F035             			ifeq				;Branch on Digits 2-8 or 10-16 (scores)
1620   F035             
1620   F035 26 FE       
1621   F037 86 FF       				ldaa	#$FF
1622   F039 B7 28 02    				staa	pia_disp_seg_data			;Display PIA Port B
1623   F03C D6 89       				ldab	irq_counter
1624   F03E F7 28 00    				stab	pia_disp_digit_data		;Display PIA Port A
1625   F041 26 6A       				bne	b_081
1626   F043 7C 00 95    				inc	irqcount16
1627   F046 96 60       				ldaa	comma_flags
1628   F048 97 8D       				staa	comma_data_temp
1629   F04A 96 5C       				ldaa	dmask_p1
1630   F04C 97 8E       				staa	credp1p2_bufferselect
1631   F04E 96 5E       				ldaa	dmask_p3
1632   F050 97 8F       				staa	mbipp3p4_bufferselect
1633   F052 D6 5A       				ldab	cred_b0
1634   F054 79 00 8E    				rol	credp1p2_bufferselect
1635   F057             				ifcs
1635   F057             
1635   F057 24 FE       
1636   F059 D6 5B       					ldab	cred_b1
1637   F05B             				endif
1637   F05B             
1637   F05B             
1637   F05B             
1637   F05B             
1637   F05B             
1637   F05B~            				endif
1637   F05B~            				endif
1637   F05B             
1637   F05B~            				endif
1637   F05B~            				endif
1637   F05B             
1637   F058             
1637   F058 02          
1637   F059             
1637   F059             
1637   F059~            				endif
1637   F059~            				endif
1637   F059~            				endif
1637   F059             
1637   F05B             
1637   F05B~            				endif
1637   F05B~            				endif
1637   F05B             
1638   F05B 96 58       				ldaa	mbip_b0
1639   F05D 79 00 8F    				rol	mbipp3p4_bufferselect
1640   F060 24 43       				bcc	b_083
1641   F062 96 59       				ldaa	mbip_b1
1642   F064 20 3F       				bra	b_083
1643   F066             			endif
1643   F066             
1643   F066             
1643   F066             
1643   F066             
1643   F066             
1643   F066~            			endif
1643   F066~            			endif
1643   F066             
1643   F066~            			endif
1643   F066~            			endif
1643   F066             
1643   F036             
1643   F036 2F          
1643   F037             
1643   F037             
1643   F037~            			endif
1643   F037~            			endif
1643   F037~            			endif
1643   F037             
1643   F066             
1643   F066~            			endif
1643   F066~            			endif
1643   F066             
1644   F066 D7 90       			stab	swap_player_displays
1645   F068 5A          			decb	
1646   F069 27 04       			beq	b_084
1647   F06B C0 03       			subb	#$03
1648   F06D             			ifeq
1648   F06D             
1648   F06D 26 FE       
1649   F06F 79 00 8D    b_084				rol	comma_data_temp			;Commas...
1650   F072 56          				rorb	
1651   F073 79 00 8D    				rol	comma_data_temp
1652   F076 56          				rorb	
1653   F077 FA 21 02    				orab	pia_comma_data			;Store Commas
1654   F07A             			else
1654   F07A             
1654   F07A             
1654   F07A             
1654   F07A             
1654   F06E             
1654   F06E             
1654   F06E             
1654   F06E~            			else
1654   F06E~            			else
1654   F06E~            			else
1654   F06E~            			else
1654   F06E             
1654   F06E~            			else
1654   F06E~            			else
1654   F06E~            			else
1654   F06E~            			else
1654   F06E             
1654   F06E             
1654   F06E 0D          
1654   F07A             
1654   F07A 20 FE       
1654   F07C             
1654   F07C             
1654   F07C             
1654   F07C~            			else
1654   F07C~            			else
1654   F07C~            			else
1654   F07C~            			else
1654   F07C~            			else
1654   F07C             
1654   F07C~            			else
1654   F07C~            			else
1654   F07C             
1654   F07C~            			else
1654   F07C~            			else
1654   F07C             
1655   F07C F6 21 02    				ldab	pia_comma_data			;Get Comma Data
1656   F07F C4 3F       				andb	#$3F
1657   F081             			endif						;Blank them out.
1657   F081             
1657   F081             
1657   F081             
1657   F081             
1657   F081             
1657   F081~            			endif						;Blank them out.
1657   F081~            			endif						;Blank them out.
1657   F081             
1657   F081~            			endif						;Blank them out.
1657   F081~            			endif						;Blank them out.
1657   F081             
1657   F07B             
1657   F07B 05          
1657   F07C             
1657   F07C             
1657   F07C~            			endif						;Blank them out.
1657   F07C~            			endif						;Blank them out.
1657   F07C~            			endif						;Blank them out.
1657   F07C             
1657   F081             
1657   F081~            			endif						;Blank them out.
1657   F081~            			endif						;Blank them out.
1657   F081             
1658   F081 F7 21 02    			stab	pia_comma_data			;Store the data.
1659   F084 86 FF       			ldaa	#$FF
1660   F086 B7 28 02    			staa	pia_disp_seg_data			;Blank the Display Digits
1661   F089 96 89       			ldaa	irq_counter
1662   F08B B7 28 00    			staa	pia_disp_digit_data		;Send Display Strobe
1663   F08E A6 38       			ldaa	score_p1_b0,X			;Buffer 0
1664   F090 79 00 8E    			rol	credp1p2_bufferselect
1665   F093             			ifcs
1665   F093             
1665   F093 24 FE       
1666   F095 A6 48       				ldaa	score_p1_b1,X			;Buffer 1
1667   F097             			endif
1667   F097             
1667   F097             
1667   F097             
1667   F097             
1667   F097             
1667   F097~            			endif
1667   F097~            			endif
1667   F097             
1667   F097~            			endif
1667   F097~            			endif
1667   F097             
1667   F094             
1667   F094 02          
1667   F095             
1667   F095             
1667   F095~            			endif
1667   F095~            			endif
1667   F095~            			endif
1667   F095             
1667   F097             
1667   F097~            			endif
1667   F097~            			endif
1667   F097             
1668   F097 E6 40       			ldab	score_p3_b0,X			;Buffer 0
1669   F099 79 00 8F    			rol	mbipp3p4_bufferselect
1670   F09C             			ifcs
1670   F09C             
1670   F09C 24 FE       
1671   F09E E6 50       				ldab	score_p3_b1,X			;Buffer 1
1672   F0A0             			endif
1672   F0A0             
1672   F0A0             
1672   F0A0             
1672   F0A0             
1672   F0A0             
1672   F0A0~            			endif
1672   F0A0~            			endif
1672   F0A0             
1672   F0A0~            			endif
1672   F0A0~            			endif
1672   F0A0             
1672   F09D             
1672   F09D 02          
1672   F09E             
1672   F09E             
1672   F09E~            			endif
1672   F09E~            			endif
1672   F09E~            			endif
1672   F09E             
1672   F0A0             
1672   F0A0~            			endif
1672   F0A0~            			endif
1672   F0A0             
1673   F0A0 76 00 90    			ror	swap_player_displays
1674   F0A3             			ifcc
1674   F0A3             
1674   F0A3 25 FE       
1675   F0A5 54          b_083				lsrb						;Show BA
1676   F0A6 54          				lsrb	
1677   F0A7 54          				lsrb	
1678   F0A8 54          				lsrb	
1679   F0A9 84 F0       				anda	#$F0
1680   F0AB 20 20       				bra	b_08A					;Goto Display End
1681   F0AD 96 5D       b_081				ldaa	dmask_p2
1682   F0AF 97 8E       				staa	credp1p2_bufferselect
1683   F0B1 96 5F       				ldaa	dmask_p4
1684   F0B3 97 8F       				staa	mbipp3p4_bufferselect
1685   F0B5 D6 5A       				ldab	cred_b0
1686   F0B7 79 00 8E    				rol	credp1p2_bufferselect
1687   F0BA             				ifcs
1687   F0BA             
1687   F0BA 24 FE       
1688   F0BC D6 5B       					ldab	cred_b1
1689   F0BE             				endif
1689   F0BE             
1689   F0BE             
1689   F0BE             
1689   F0BE             
1689   F0BE             
1689   F0BE~            				endif
1689   F0BE~            				endif
1689   F0BE             
1689   F0BE~            				endif
1689   F0BE~            				endif
1689   F0BE             
1689   F0BB             
1689   F0BB 02          
1689   F0BC             
1689   F0BC             
1689   F0BC~            				endif
1689   F0BC~            				endif
1689   F0BC~            				endif
1689   F0BC             
1689   F0BE             
1689   F0BE~            				endif
1689   F0BE~            				endif
1689   F0BE             
1690   F0BE 96 58       				ldaa	mbip_b0
1691   F0C0 79 00 8F    				rol	mbipp3p4_bufferselect
1692   F0C3             				ifcs
1692   F0C3             
1692   F0C3 24 FE       
1693   F0C5 96 59       					ldaa	mbip_b1
1694   F0C7             				endif
1694   F0C7             
1694   F0C7             
1694   F0C7             
1694   F0C7             
1694   F0C7             
1694   F0C7~            				endif
1694   F0C7~            				endif
1694   F0C7             
1694   F0C7~            				endif
1694   F0C7~            				endif
1694   F0C7             
1694   F0C4             
1694   F0C4 02          
1694   F0C5             
1694   F0C5             
1694   F0C5~            				endif
1694   F0C5~            				endif
1694   F0C5~            				endif
1694   F0C5             
1694   F0C7             
1694   F0C7~            				endif
1694   F0C7~            				endif
1694   F0C7             
1695   F0C7             			endif
1695   F0C7             
1695   F0C7             
1695   F0C7             
1695   F0C7             
1695   F0C7             
1695   F0C7~            			endif
1695   F0C7~            			endif
1695   F0C7             
1695   F0C7~            			endif
1695   F0C7~            			endif
1695   F0C7             
1695   F0A4             
1695   F0A4 22          
1695   F0A5             
1695   F0A5             
1695   F0A5~            			endif
1695   F0A5~            			endif
1695   F0A5~            			endif
1695   F0A5             
1695   F0C7             
1695   F0C7~            			endif
1695   F0C7~            			endif
1695   F0C7             
1696   F0C7 48          			asla						;Show AB
1697   F0C8 48          			asla	
1698   F0C9 48          			asla	
1699   F0CA 48          			asla	
1700   F0CB C4 0F       			andb	#$0F					;Fall through to end
1701   F0CD 1B          b_08A			aba	
1702   F0CE B7 28 02    			staa	pia_disp_seg_data			;Store Digit BCD Data
1703   F0D1             			;***********************************
1704   F0D1             			;* Done with Displays
1705   F0D1             			;* Increment the IRQ counter
1706   F0D1             			;***********************************
1707   F0D1 96 89       			ldaa	irq_counter				;We need to increment this every time.
1708   F0D3 4C          			inca	
1709   F0D4 97 89       			staa	irq_counter
1710   F0D6             			;***********************************
1711   F0D6             			;* Now do switches, The switch logic
1712   F0D6             			;* has a total of 5 data buffers.
1713   F0D6             			;* These are used for debouncing the
1714   F0D6             			;* switch through software.
1715   F0D6             			;***********************************
1716   F0D6 46          			rora	
1717   F0D7             			ifcc						;Every other IRQ, do all switches
1717   F0D7             
1717   F0D7 25 FE       
1718   F0D9 86 01       				ldaa	#$01
1719   F0DB B7 30 02    				staa	pia_switch_strobe_data		;Store Switch Column Drives
1720   F0DE CE 00 00    				ldx	#ram_base
1721   F0E1             				begin
1721   F0E1             
1722   F0E1 A6 61       					ldaa	switch_debounced,X
1723   F0E3 B8 30 00    					eora	pia_switch_return_data		;Switch Row Return Data
1724   F0E6 16          					tab	
1725   F0E7 A4 69       					anda	switch_masked,X
1726   F0E9 AA 71       					oraa	switch_pending,X
1727   F0EB A7 71       					staa	switch_pending,X
1728   F0ED E7 69       					stab	switch_masked,X
1729   F0EF 53          					comb	
1730   F0F0 E4 71       					andb	switch_pending,X
1731   F0F2 EA 79       					orab	switch_aux,X
1732   F0F4 E7 79       					stab	switch_aux,X
1733   F0F6 08          					inx	
1734   F0F7 78 30 02    					asl	pia_switch_strobe_data		;Shift to Next Column Drive
1735   F0FA             				csend
1735   F0FA             
1735   F0FA             
1735   F0FA~            				csend
1735   F0FA~            				csend
1735   F0FA~            				csend
1735   F0FA             
1735   F0FA 24 E5       
1735   F0FC             
1735   F0FC~            				csend
1735   F0FC~            				csend
1735   F0FC             
1736   F0FC             			endif
1736   F0FC             
1736   F0FC             
1736   F0FC             
1736   F0FC             
1736   F0FC             
1736   F0FC~            			endif
1736   F0FC~            			endif
1736   F0FC             
1736   F0FC~            			endif
1736   F0FC~            			endif
1736   F0FC             
1736   F0D8             
1736   F0D8 23          
1736   F0D9             
1736   F0D9             
1736   F0D9~            			endif
1736   F0D9~            			endif
1736   F0D9~            			endif
1736   F0D9             
1736   F0FC             
1736   F0FC~            			endif
1736   F0FC~            			endif
1736   F0FC             
1737   F0FC             			;***********************************
1738   F0FC             			;* Now do solenoids
1739   F0FC             			;***********************************
1740   F0FC 96 94       			ldaa	solenoid_counter			;Solenoid Counter
1741   F0FE             			ifne
1741   F0FE             
1741   F0FE 27 FE       
1742   F100 7A 00 94    				dec	solenoid_counter			;Solenoid Counter
1743   F103             				ifeq
1743   F103             
1743   F103 26 FE       
1744   F105 DE 91       					ldx	solenoid_address
1745   F107 A6 00       					ldaa	$00,X
1746   F109 98 93       					eora	solenoid_bitpos
1747   F10B A7 00       					staa	$00,X
1748   F10D             				endif
1748   F10D             
1748   F10D             
1748   F10D             
1748   F10D             
1748   F10D             
1748   F10D~            				endif
1748   F10D~            				endif
1748   F10D             
1748   F10D~            				endif
1748   F10D~            				endif
1748   F10D             
1748   F104             
1748   F104 08          
1748   F105             
1748   F105             
1748   F105~            				endif
1748   F105~            				endif
1748   F105~            				endif
1748   F105             
1748   F10D             
1748   F10D~            				endif
1748   F10D~            				endif
1748   F10D             
1749   F10D             			endif
1749   F10D             
1749   F10D             
1749   F10D             
1749   F10D             
1749   F10D             
1749   F10D~            			endif
1749   F10D~            			endif
1749   F10D             
1749   F10D~            			endif
1749   F10D~            			endif
1749   F10D             
1749   F0FF             
1749   F0FF 0D          
1749   F100             
1749   F100             
1749   F100~            			endif
1749   F100~            			endif
1749   F100~            			endif
1749   F100             
1749   F10D             
1749   F10D~            			endif
1749   F10D~            			endif
1749   F10D             
1750   F10D 3B          			rti
1751   F10E             ;*************************************************************************
1752   F10E             ;* End IRQ
1753   F10E             ;*************************************************************************
1754   F10E             
1755   F10E             ;*************************************************************************
1756   F10E             ;* PIA Data Direction Register Data - Loaded on Initialization
1757   F10E             ;*************************************************************************
1758   F10E 7F 3E C0 3E pia_ddr_data	.db $7F,$3E,$C0,$3E	;$2100 - Sound PIA
1759   F112 FF 3C FF 34 			.db $FF,$3C,$FF,$34	;$2200 - Solenoid PIA
1760   F116 FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2400 - Lamp PIA
1761   F11A FF 3C FF 3C 			.db $FF,$3C,$FF,$3C	;$2800 - Display PIA
1762   F11E 00 3C FF 3C 			.db $00,$3C,$FF,$3C	;$3000 - Switch PIA
1763   F122             
1764   F122             ;*************************************************************************
1765   F122             ;* Special Solenoid Locations	- Defines the addresses for each PIA	
1766   F122             ;*************************************************************************	
1767   F122 24 03       spec_sol_def	.dw pia_lamp_col_ctrl		;Solenoid $10
1768   F124 24 01       			.dw pia_lamp_row_ctrl		;Solenoid $11
1769   F126 30 03       			.dw pia_switch_strobe_ctrl	;Solenoid $12
1770   F128 30 01       			.dw pia_switch_return_ctrl	;Solenoid $13
1771   F12A 22 01       			.dw pia_sol_low_ctrl		;Solenoid $14
1772   F12C 28 03       			.dw pia_disp_seg_ctrl		;Solenoid $15
1773   F12E 21 03       			.dw pia_comma_ctrl		;Solenoid $16-ST7
1774   F130 21 01       			.dw pia_sound_ctrl		;Solenoid $17-ST8
1775   F132 22 03       			.dw pia_sol_high_ctrl		;Solenoid $18-Flipper/Solenoid Enable
1776   F134             
1777   F134             ;*************************************************************************
1778   F134             ;* Lamp Buffer Locations		
1779   F134             ;*************************************************************************	
1780   F134 00 10       lampbuffers		.dw lampbuffer0
1781   F136 00 30       			.dw lampflashflag
1782   F138 00 28       			.dw lampbuffer1	
1783   F13A 00 20       			.dw lampbufferselect
1784   F13C             			
1785   F13C             ;*************************************************************************
1786   F13C             ;* Turn On Lamp: Lamp number is in A (packed format). This can also be 
1787   F13C             ;*               used to set a bitflag.
1788   F13C             ;*************************************************************************
1789   F13C DF 9E       lamp_on		stx	temp3
1790   F13E CE 00 10    			ldx	#lampbuffer0			;Set up correct index to lampbuffer
1791   F141 37          lamp_or		pshb	
1792   F142 8D 58       			bsr	unpack_byte				
1793   F144 37          			pshb						;B now contains the bitpos
1794   F145 EA 00       			orab	$00,X
1795   F147 E7 00       lamp_commit		stab	$00,X					;turn it on
1796   F149 DF 9C       			stx	temp2
1797   F14B D6 9D       			ldab	temp2+1				;was item worked on within lampbuffer0
1798   F14D C1 18       			cmpb	#(bitflags)&$FF			;compare index against start of bitflags
1799   F14F 33          			pulb	
1800   F150 24 05       			bcc	lamp_done
1801   F152 53          			comb						;If we are here, then we must switch buffers.
1802   F153 E4 20       			andb	lampbufferselect,X		;We are now on buffer 0
1803   F155 E7 20       			stab	lampbufferselect,X
1804   F157 33          lamp_done		pulb	
1805   F158 DE 9E       			ldx	temp3
1806   F15A 39          			rts	
1807   F15B             
1808   F15B             ;*************************************************************************
1809   F15B             ;* Turn Off Lamp: Lamp number is in A (packed format). This can also be 
1810   F15B             ;*               used to clear a bitflag.
1811   F15B             ;*************************************************************************			
1812   F15B DF 9E       lamp_off		stx	temp3
1813   F15D CE 00 10    			ldx	#lampbuffer0
1814   F160 37          lamp_and		pshb	
1815   F161 8D 39       			bsr	unpack_byte				;seperate into X and B
1816   F163 37          			pshb	
1817   F164 53          			comb	
1818   F165 E4 00       			andb	$00,X
1819   F167 20 DE       			bra	lamp_commit
1820   F169             
1821   F169             ;*************************************************************************
1822   F169             ;* Sets a Lamp to 'flashing' state
1823   F169             ;*************************************************************************			
1824   F169 DF 9E       lamp_flash		stx	temp3
1825   F16B CE 00 30    			ldx	#lampflashflag
1826   F16E 20 D1       			bra	lamp_or
1827   F170             
1828   F170             ;*************************************************************************
1829   F170             ;* Toggle Lamp from existing state. This may be used on bitflags as well.
1830   F170             ;*************************************************************************			
1831   F170 DF 9E       lamp_invert		stx	temp3
1832   F172 CE 00 10    			ldx	#lampbuffer0
1833   F175 37          lamp_eor		pshb	
1834   F176 8D 24       			bsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
1835   F178 E8 00       			eorb	$00,X
1836   F17A E7 00       			stab	$00,X
1837   F17C 20 D9       			bra	lamp_done				;Leave now
1838   F17E             			
1839   F17E             			
1840   F17E CE 00 20    lamp_on_b		ldx	#lampbufferselect
1841   F181 20 BE       			bra	lamp_or
1842   F183             
1843   F183 CE 00 20    lamp_off_b		ldx	#lampbufferselect
1844   F186 20 D8       			bra	lamp_and
1845   F188             
1846   F188 CE 00 20    lamp_invert_b	ldx	#lampbufferselect
1847   F18B 20 E8       			bra	lamp_eor
1848   F18D             
1849   F18D CE 00 28    lamp_on_1		ldx	#lampbuffer1
1850   F190 20 AF       			bra	lamp_or
1851   F192             
1852   F192 CE 00 28    lamp_off_1		ldx	#lampbuffer1
1853   F195 20 C9       			bra	lamp_and
1854   F197             
1855   F197 CE 00 28    lamp_invert_1	ldx	#lampbuffer1
1856   F19A 20 D9       			bra	lamp_eor
1857   F19C             
1858   F19C             ;*********************************************************
1859   F19C             ;* Converts Packed Byte data into an Index in X and a
1860   F19C             ;* bitpos in B
1861   F19C             ;*
1862   F19C             ;* Packed Data Format: IIII IBBB
1863   F19C             ;*
1864   F19C             ;*	Where IIIII is the index to the lamp buffers.
1865   F19C             ;*    Values between 
1866   F19C             ;*      0-7		lampbuffer0
1867   F19C             ;*      7-15	
1868   F19C             ;*********************************************************	
1869   F19C 36          unpack_byte		psha	
1870   F19D 44          			lsra	
1871   F19E 44          			lsra	
1872   F19F 44          			lsra	
1873   F1A0 BD EE FF    			jsr	xplusa				;X = X + A
1874   F1A3 32          			pula	
1875   F1A4 7E EB 8E    			jmp	hex2bitpos				;Convert Hex (A&07) into bitpos (B)
1876   F1A7             
1877   F1A7             ;**********************************************************
1878   F1A7             ;* Lamp Range Manipulation Code Start Here
1879   F1A7             ;**********************************************************			
1880   F1A7 8D 71       lampm_off		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
1881   F1A9             			begin
1881   F1A9             
1882   F1A9 17          				tba	
1883   F1AA 43          				coma	
1884   F1AB A4 00       				anda	$00,X
1885   F1AD 8D 07       				bsr	lampm_noflash			;Turn off Flashing State for this lamp
1886   F1AF BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
1887   F1B2             			csend						;Loop it!
1887   F1B2             
1887   F1B2             
1887   F1B2~            			csend						;Loop it!
1887   F1B2~            			csend						;Loop it!
1887   F1B2~            			csend						;Loop it!
1887   F1B2             
1887   F1B2 24 F5       
1887   F1B4             
1887   F1B4~            			csend						;Loop it!
1887   F1B4~            			csend						;Loop it!
1887   F1B4             
1888   F1B4 20 5D       			bra	abx_ret
1889   F1B6             			
1890   F1B6 A7 00       lampm_noflash	staa	$00,X
1891   F1B8 DF 9C       			stx	temp2
1892   F1BA 96 9D       			ldaa	temp2+1
1893   F1BC 81 18       			cmpa	#$18					;If we are not using Buffer $0010 then skip this
1894   F1BE             			ifcs
1894   F1BE             
1894   F1BE 24 FE       
1895   F1C0 17          				tba	
1896   F1C1 43          				coma	
1897   F1C2 A4 20       				anda	lampbufferselect,X
1898   F1C4 A7 20       				staa	lampbufferselect,X
1899   F1C6             			endif
1899   F1C6             
1899   F1C6             
1899   F1C6             
1899   F1C6             
1899   F1C6             
1899   F1C6~            			endif
1899   F1C6~            			endif
1899   F1C6             
1899   F1C6~            			endif
1899   F1C6~            			endif
1899   F1C6             
1899   F1BF             
1899   F1BF 06          
1899   F1C0             
1899   F1C0             
1899   F1C0~            			endif
1899   F1C0~            			endif
1899   F1C0~            			endif
1899   F1C0             
1899   F1C6             
1899   F1C6~            			endif
1899   F1C6~            			endif
1899   F1C6             
1900   F1C6 39          			rts	
1901   F1C7             
1902   F1C7             
1903   F1C7 8D 51       lampm_f		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
1904   F1C9             			begin
1904   F1C9             
1905   F1C9 17          				tba	
1906   F1CA A8 00       				eora	$00,X
1907   F1CC A7 00       				staa	$00,X
1908   F1CE BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
1909   F1D1             			csend
1909   F1D1             
1909   F1D1             
1909   F1D1~            			csend
1909   F1D1~            			csend
1909   F1D1~            			csend
1909   F1D1             
1909   F1D1 24 F6       
1909   F1D3             
1909   F1D3~            			csend
1909   F1D3~            			csend
1909   F1D3             
1910   F1D3 20 3E       			bra	abx_ret
1911   F1D5             
1912   F1D5             ;unused?			
1913   F1D5 8D 4F       			bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
1914   F1D7 26 3A       			bne	abx_ret
1915   F1D9             			begin
1915   F1D9             
1916   F1D9 BD F2 64    				jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
1917   F1DC 25 08       				bcs	b_098
1918   F1DE             			neend
1918   F1DE             
1918   F1DE             
1918   F1DE~            			neend
1918   F1DE~            			neend
1918   F1DE~            			neend
1918   F1DE             
1918   F1DE 27 F9       
1918   F1E0             
1918   F1E0~            			neend
1918   F1E0~            			neend
1918   F1E0             
1919   F1E0 17          			tba	
1920   F1E1 43          			coma	
1921   F1E2 A4 00       			anda	$00,X
1922   F1E4 A7 00       			staa	$00,X
1923   F1E6 8D 6D       b_098			bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
1924   F1E8 EA 00       b_09A			orab	$00,X
1925   F1EA E7 00       			stab	$00,X
1926   F1EC 20 25       			bra	abx_ret
1927   F1EE             			
1928   F1EE 8D 2A       lampm_a		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
1929   F1F0             			begin
1929   F1F0             
1930   F1F0 27 F6       				beq	b_09A
1931   F1F2 8D 61       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
1932   F1F4 25 1D       				bcs	abx_ret
1933   F1F6             			loopend
1933   F1F6             
1933   F1F6             
1933   F1F6~            			loopend
1933   F1F6~            			loopend
1933   F1F6~            			loopend
1933   F1F6             
1933   F1F6 20 F8       
1933   F1F8             
1933   F1F8~            			loopend
1933   F1F8~            			loopend
1933   F1F8             
1934   F1F8             			
1935   F1F8 8D 20       lampm_b		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
1936   F1FA             			begin
1936   F1FA             
1937   F1FA 27 EC       				beq	b_09A
1938   F1FC 8D 57       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
1939   F1FE             			csend
1939   F1FE             
1939   F1FE             
1939   F1FE~            			csend
1939   F1FE~            			csend
1939   F1FE~            			csend
1939   F1FE             
1939   F1FE 24 FA       
1939   F200             
1939   F200~            			csend
1939   F200~            			csend
1939   F200             
1940   F200 DE 9E       			ldx	temp3
1941   F202 96 A0       			ldaa	sys_temp1
1942   F204 D6 A1       			ldab	sys_temp2
1943   F206 20 9F       			bra	lampm_off				;Turn OFF All lamps in Range
1944   F208             			
1945   F208 8D 10       lampm_8		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
1946   F20A             			begin
1946   F20A             
1947   F20A 17          				tba	
1948   F20B AA 00       				oraa	$00,X
1949   F20D 8D A7       				bsr	lampm_noflash			;Turn off Flashing State for this lamp
1950   F20F 8D 44       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
1951   F211             			csend
1951   F211             
1951   F211             
1951   F211~            			csend
1951   F211~            			csend
1951   F211~            			csend
1951   F211             
1951   F211 24 F7       
1951   F213             
1951   F213~            			csend
1951   F213~            			csend
1951   F213             
1952   F213 96 A0       abx_ret		ldaa	sys_temp1
1953   F215 D6 A1       			ldab	sys_temp2
1954   F217 DE 9E       			ldx	temp3
1955   F219 39          			rts	
1956   F21A             			
1957   F21A             ;************************************************************
1958   F21A             ;* Lamp Range Routines: This take care of manipulating
1959   F21A             ;*                      a collection of sequential lamps
1960   F21A             ;*                      to create various lighting effects.
1961   F21A             ;************************************************************			
1962   F21A BD F2 2C    lampr_start		jsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Number Of lamps X=Buffer
1963   F21D 96 A2       			ldaa	sys_temp3				;Starting lamp in range
1964   F21F BD F1 9C    lr_ret		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
1965   F222 17          			tba	
1966   F223 A4 00       			anda	$00,X
1967   F225 39          			rts	
1968   F226             			
1969   F226 8D 04       lampr_end		bsr	lampr_setup				;Set up Lamp: $A2=start $A3=last B=Number Of lamps X=Buffer
1970   F228 96 A3       			ldaa	sys_temp4				;End Lamp In range
1971   F22A 20 F3       			bra	lr_ret
1972   F22C             			
1973   F22C DF 9E       lampr_setup		stx	temp3
1974   F22E 97 A0       			staa	sys_temp1
1975   F230 D7 A1       			stab	sys_temp2
1976   F232 FE E0 4F    			ldx	gr_lamptable_ptr			;Game ROM: Lamp Range Table
1977   F235 16          			tab	
1978   F236 58          			aslb	
1979   F237 C4 7F       			andb	#$7F
1980   F239 BD EF 4D    			jsr	xplusb
1981   F23C EE 00       			ldx	$00,X
1982   F23E DF A2       			stx	sys_temp3				;Save Lamp Range
1983   F240 CE F1 34    			ldx	#lampbuffers			;Lamp Buffer Locations
1984   F243 49          			rola	
1985   F244 49          			rola	
1986   F245 49          			rola	
1987   F246 48          			asla	
1988   F247 84 07       			anda	#$07
1989   F249 BD EE FF    			jsr	xplusa				;X = X + A
1990   F24C EE 00       			ldx	$00,X					;Get the Buffer Pointer Specified
1991   F24E D6 A3       			ldab	sys_temp4
1992   F250 D0 A2       			subb	sys_temp3
1993   F252 D7 9A       			stab	temp1					;Store how many lamps affected
1994   F254 39          			rts	
1995   F255             			
1996   F255 58          lamp_left		aslb	
1997   F256             			ifcs
1997   F256             
1997   F256 24 FE       
1998   F258 59          				rolb	
1999   F259 08          				inx	
2000   F25A             			endif
2000   F25A             
2000   F25A             
2000   F25A             
2000   F25A             
2000   F25A             
2000   F25A~            			endif
2000   F25A~            			endif
2000   F25A             
2000   F25A~            			endif
2000   F25A~            			endif
2000   F25A             
2000   F257             
2000   F257 02          
2000   F258             
2000   F258             
2000   F258~            			endif
2000   F258~            			endif
2000   F258~            			endif
2000   F258             
2000   F25A             
2000   F25A~            			endif
2000   F25A~            			endif
2000   F25A             
2001   F25A 96 9A       ls_ret		ldaa	temp1
2002   F25C 80 01       			suba	#$01
2003   F25E 97 9A       			staa	temp1
2004   F260 17          			tba	
2005   F261 A4 00       			anda	$00,X
2006   F263 39          			rts	
2007   F264             			
2008   F264 54          lamp_right		lsrb	
2009   F265 24 F3       			bcc	ls_ret
2010   F267 56          			rorb	
2011   F268 09          			dex	
2012   F269 20 EF       			bra	ls_ret
2013   F26B             			
2014   F26B             			
2015   F26B 8D B9       lampm_c		bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
2016   F26D             lm_test		ifeq
2016   F26D             
2016   F26D 26 FE       
2017   F26F 8D F3       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2018   F271 24 FA       				bcc	lm_test
2019   F273 20 9E       				bra	abx_ret
2020   F275             			endif
2020   F275             
2020   F275             
2020   F275             
2020   F275             
2020   F275             
2020   F275~            			endif
2020   F275~            			endif
2020   F275             
2020   F275~            			endif
2020   F275~            			endif
2020   F275             
2020   F26E             
2020   F26E 06          
2020   F26F             
2020   F26F             
2020   F26F~            			endif
2020   F26F~            			endif
2020   F26F~            			endif
2020   F26F             
2020   F275             
2020   F275~            			endif
2020   F275~            			endif
2020   F275             
2021   F275 53          			comb	
2022   F276 E4 00       			andb	$00,X
2023   F278 E7 00       			stab	$00,X
2024   F27A 20 97       			bra	abx_ret
2025   F27C             			
2026   F27C 8D 9C       lampm_e		bsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
2027   F27E DF 9C       			stx	temp2
2028   F280 D7 9B       			stab	temp1+1
2029   F282             			begin
2029   F282             
2030   F282 97 A4       				staa	sys_temp5
2031   F284 8D CF       				bsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2032   F286 25 04       				bcs	b_0A2
2033   F288 8D 1A       				bsr	b_0A3
2034   F28A             			loopend
2034   F28A             
2034   F28A             
2034   F28A~            			loopend
2034   F28A~            			loopend
2034   F28A~            			loopend
2034   F28A             
2034   F28A 20 F6       
2034   F28C             
2034   F28C~            			loopend
2034   F28C~            			loopend
2034   F28C             
2035   F28C             			
2036   F28C DE 9C       b_0A2			ldx	temp2
2037   F28E D6 9B       			ldab	temp1+1
2038   F290 8D 12       			bsr	b_0A3
2039   F292 20 38       			bra	b_0A5
2040   F294             			
2041   F294 8D 90       lampm_d		bsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
2042   F296 DF 9C       			stx	temp2
2043   F298 D7 9B       			stab	temp1+1
2044   F29A             			begin
2044   F29A             
2045   F29A 97 A4       				staa	sys_temp5
2046   F29C 8D C6       				bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2047   F29E 25 EC       				bcs	b_0A2
2048   F2A0 8D 02       				bsr	b_0A3
2049   F2A2             			loopend
2049   F2A2             
2049   F2A2             
2049   F2A2~            			loopend
2049   F2A2~            			loopend
2049   F2A2~            			loopend
2049   F2A2             
2049   F2A2 20 F6       
2049   F2A4             
2049   F2A4~            			loopend
2049   F2A4~            			loopend
2049   F2A4             
2050   F2A4             			
2051   F2A4 36          b_0A3			psha	
2052   F2A5 17          			tba	
2053   F2A6 43          			coma	
2054   F2A7 A4 00       			anda	$00,X
2055   F2A9 7D 00 A4    			tst	sys_temp5
2056   F2AC             			ifne
2056   F2AC             
2056   F2AC 27 FE       
2057   F2AE 1B          				aba
2058   F2AF             			endif
2058   F2AF             
2058   F2AF             
2058   F2AF             
2058   F2AF             
2058   F2AF             
2058   F2AF~            			endif
2058   F2AF~            			endif
2058   F2AF             
2058   F2AF~            			endif
2058   F2AF~            			endif
2058   F2AF             
2058   F2AD             
2058   F2AD 01          
2058   F2AE             
2058   F2AE             
2058   F2AE~            			endif
2058   F2AE~            			endif
2058   F2AE~            			endif
2058   F2AE             
2058   F2AF             
2058   F2AF~            			endif
2058   F2AF~            			endif
2058   F2AF             
2059   F2AF A7 00       			staa	$00,X
2060   F2B1 32          			pula	
2061   F2B2 39          			rts	
2062   F2B3             			
2063   F2B3 BD F2 26    lampm_z		jsr	lampr_end				;A = Last Lamp Level, B = Last Lamp BitPos
2064   F2B6             			ifeq
2064   F2B6             
2064   F2B6 26 FE       
2065   F2B8             				begin
2065   F2B8             
2066   F2B8 8D AA       					bsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2067   F2BA 25 10       					bcs	b_0A5
2068   F2BC             				neend
2068   F2BC             
2068   F2BC             
2068   F2BC~            				neend
2068   F2BC~            				neend
2068   F2BC~            				neend
2068   F2BC             
2068   F2BC 27 FA       
2068   F2BE             
2068   F2BE~            				neend
2068   F2BE~            				neend
2068   F2BE             
2069   F2BE             			endif
2069   F2BE             
2069   F2BE             
2069   F2BE             
2069   F2BE             
2069   F2BE             
2069   F2BE~            			endif
2069   F2BE~            			endif
2069   F2BE             
2069   F2BE~            			endif
2069   F2BE~            			endif
2069   F2BE             
2069   F2B7             
2069   F2B7 06          
2069   F2B8             
2069   F2B8             
2069   F2B8~            			endif
2069   F2B8~            			endif
2069   F2B8~            			endif
2069   F2B8             
2069   F2BE             
2069   F2BE~            			endif
2069   F2BE~            			endif
2069   F2BE             
2070   F2BE 17          			tba	
2071   F2BF A8 00       			eora	$00,X
2072   F2C1 A7 00       			staa	$00,X
2073   F2C3 BD F2 64    			jsr	lamp_right				;Shift Lamp Bit Right, De-increment Lamp Counter, Write it
2074   F2C6 25 04       			bcs	b_0A5
2075   F2C8 EA 00       			orab	$00,X
2076   F2CA E7 00       			stab	$00,X
2077   F2CC 7E F2 13    b_0A5			jmp	abx_ret
2078   F2CF             
2079   F2CF BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
2080   F2D2             b_0AB			ifne
2080   F2D2             
2080   F2D2 27 FE       
2081   F2D4 BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2082   F2D7 24 F9       				bcc	b_0AB
2083   F2D9 20 F1       				bra	b_0A5
2084   F2DB             			endif
2084   F2DB             
2084   F2DB             
2084   F2DB             
2084   F2DB             
2084   F2DB             
2084   F2DB~            			endif
2084   F2DB~            			endif
2084   F2DB             
2084   F2DB~            			endif
2084   F2DB~            			endif
2084   F2DB             
2084   F2D3             
2084   F2D3 07          
2084   F2D4             
2084   F2D4             
2084   F2D4~            			endif
2084   F2D4~            			endif
2084   F2D4~            			endif
2084   F2D4             
2084   F2DB             
2084   F2DB~            			endif
2084   F2DB~            			endif
2084   F2DB             
2085   F2DB 0C          b_0AA			clc	
2086   F2DC 20 EE       			bra	b_0A5
2087   F2DE BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
2088   F2E1 26 F8       b_0AC			bne	b_0AA
2089   F2E3 BD F2 55    			jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2090   F2E6 24 F9       			bcc	b_0AC
2091   F2E8 20 E2       			bra	b_0A5
2092   F2EA             
2093   F2EA             		
2094   F2EA CE 00 61    bit_switch		ldx	#switch_debounced
2095   F2ED 20 0D       			bra	bit_main
2096   F2EF CE 00 30    bit_lamp_flash	ldx	#lampflashflag
2097   F2F2 20 08       			bra	bit_main
2098   F2F4 CE 00 28    bit_lamp_buf_1	ldx	#lampbuffer1
2099   F2F7 20 03       			bra	bit_main
2100   F2F9 CE 00 10    bit_lamp_buf_0	ldx	#lampbuffer0
2101   F2FC BD F1 9C    bit_main		jsr	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
2102   F2FF E5 00       			bitb	$00,X
2103   F301 39          			rts	
2104   F302             			
2105   F302             			
2106   F302 84 3F       lampm_x		anda	#$3F
2107   F304 BD F2 1A    			jsr	lampr_start				;A = Start Lamp Level, B = Start Lamp BitPos
2108   F307             			begin
2108   F307             
2109   F307 97 AA       				staa	thread_priority			;This is probably just a temp location?
2110   F309 17          				tba	
2111   F30A 43          				coma	
2112   F30B A4 18       				anda	bitflags,X
2113   F30D 9A AA       				oraa	thread_priority			;Recall temp
2114   F30F A7 18       				staa	bitflags,X
2115   F311 BD F2 55    				jsr	lamp_left				;Shift Lamp Bit Left, De-increment Lamp Counter, Write it
2116   F314             			csend
2116   F314             
2116   F314             
2116   F314~            			csend
2116   F314~            			csend
2116   F314~            			csend
2116   F314             
2116   F314 24 F1       
2116   F316             
2116   F316~            			csend
2116   F316~            			csend
2116   F316             
2117   F316 20 B4       			bra	b_0A5
2118   F318             			
2119   F318             ;***************************************************
2120   F318             ;* System Checksum #2: Set to make ROM csum from
2121   F318             ;*                     $F000-F7FF equal to $00
2122   F318             ;***************************************************
2123   F318             	
2124   F318 EF          csum2			.db $EF
2125   F319             			
2126   F319             ;***************************************************
2127   F319             ;* VM Macro Pointers: Master Lookup Table
2128   F319             ;***************************************************
2129   F319             				
2130   F319 F3 D3       master_vm_lookup	.dw vm_control_0x		;Misc Functions
2131   F31B F3 F4       			.dw vm_control_1x		;Lamp Functions
2132   F31D F4 36       			.dw vm_control_2x		;Lamp Functions
2133   F31F F4 42       			.dw vm_control_3x		;Solenoid Functions
2134   F321 F4 4F       			.dw vm_control_4x		;Sound, Immediate Exe Functions
2135   F323 F4 A1       			.dw vm_control_5x		;RAM,Delay,Jump,SimpleBransh Functions
2136   F325 F5 40       			.dw vm_control_6x		;Indexed Delay Functions
2137   F327 F5 44       			.dw vm_control_7x		;Immediate Delay Functions
2138   F329 F5 48       			.dw vm_control_8x		;Jump Relative 
2139   F32B F5 58       			.dw vm_control_9x		;JSR Relative
2140   F32D F5 62       			.dw vm_control_ax		;JSR to Code Relative
2141   F32F F5 6B       			.dw vm_control_bx		;Add RAM
2142   F331 F5 78       			.dw vm_control_cx		;Set RAM
2143   F333 F5 7D       			.dw vm_control_dx		;Play Sound Multiple
2144   F335 F5 87       			.dw vm_control_ex		;Play Sound Once
2145   F337 F5 87       			.dw vm_control_fx		;Play Sound Once
2146   F339             			
2147   F339             			
2148   F339 F3 DB       vm_lookup_0x	.dw macro_pcminus100
2149   F33B F3 B5       			.dw macro_go
2150   F33D F3 AF       			.dw macro_rts
2151   F33F EA 67       			.dw killthread
2152   F341 F3 E2       			.dw macro_code_start
2153   F343 F3 EA       			.dw macro_special
2154   F345 F3 EF       			.dw macro_extraball
2155   F347             			
2156   F347 F2 08       vm_lookup_1x_a	.dw lampm_8
2157   F349 F1 A7       			.dw lampm_off
2158   F34B F1 EE       			.dw lampm_a
2159   F34D F1 F8       			.dw lampm_b
2160   F34F F2 6B       			.dw lampm_c
2161   F351 F2 94       			.dw lampm_d
2162   F353 F2 7C       			.dw lampm_e
2163   F355 F1 C7       			.dw lampm_f
2164   F357             			
2165   F357 F1 3C       vm_lookup_1x_b	.dw lamp_on
2166   F359 F1 5B       			.dw lamp_off
2167   F35B F1 70       			.dw lamp_invert
2168   F35D F1 69       			.dw lamp_flash
2169   F35F             			
2170   F35F F1 7E       vm_lookup_2x	.dw lamp_on_b
2171   F361 F1 83       			.dw lamp_off_b
2172   F363 F1 88       			.dw lamp_invert_b
2173   F365             			
2174   F365 EC 96       vm_lookup_4x	.dw add_points
2175   F367 EC 05       			.dw score_main
2176   F369 EB FE       			.dw dsnd_pts
2177   F36B             			
2178   F36B F4 AA       vm_lookup_5x	.dw macro_ramadd
2179   F36D F4 BF       			.dw macro_ramcopy
2180   F36F F4 CA       			.dw macro_set_pri
2181   F371 F4 D2       			.dw macro_delay_imm_b
2182   F373 F4 EF       			.dw macro_rem_th_s
2183   F375 F4 F6       			.dw macro_rem_th_m
2184   F377 F4 FD       			.dw macro_jsr_noreturn
2185   F379 F5 27       			.dw macro_jsr_return
2186   F37B F5 CD       			.dw macro_branch
2187   F37D F5 CD       			.dw macro_branch
2188   F37F F5 CD       			.dw macro_branch
2189   F381 F5 CD       			.dw macro_branch
2190   F383 F5 4F       			.dw macro_jmp_cpu
2191   F385 F5 A4       			.dw macro_setswitch
2192   F387 F5 BC       			.dw macro_clearswitch
2193   F389 F5 66       			.dw macro_jmp_abs
2194   F38B             
2195   F38B             ;***************************************************************
2196   F38B             ;* Pointers to routines for complex branch tests
2197   F38B             ;***************************************************************			
2198   F38B F6 53       branch_lookup	.dw branch_tilt		;Tilt Flag				
2199   F38D F6 5A       			.dw branch_gameover     ;Game Over Flag			
2200   F38F F4 95       			.dw macro_getnextbyte	;NextByte = Straight Data		
2201   F391 F6 36       			.dw branch_invert		;Invert Result			
2202   F393 F6 3B       			.dw branch_lamp_on	;Check if Lamp is On or Flashing
2203   F395 F6 47       			.dw branch_lamprangeoff	;Lamp Range All Off			
2204   F397 F6 4E       			.dw branch_lamprangeon	;Lamp Range All On			
2205   F399 F6 61       			.dw branch_lampbuf1	;RAM Matrix $0028			
2206   F39B F6 66       			.dw branch_switch		;Check Encoded Switch		
2207   F39D F6 70       			.dw branch_add		;A = A + B				
2208   F39F F6 6B       			.dw branch_and		;Logical AND 				
2209   F3A1 F6 72       			.dw branch_or		;Logical OR 				
2210   F3A3 F6 77       			.dw branch_equal		;A = B ??				
2211   F3A5 F6 7C       			.dw branch_ge		;A >= B ??				
2212   F3A7 F6 7F       			.dw branch_threadpri	;Check for Priority Thread??	
2213   F3A9 F6 86       			.dw branch_bitwise	;A && B				
2214   F3AB             
2215   F3AB             ;*************************************************************
2216   F3AB             ;* Virtual Machine Routines:
2217   F3AB             ;*
2218   F3AB             ;* These are the main routines that are called to interpret
2219   F3AB             ;* the commands written in WML7.
2220   F3AB             ;*************************************************************
2221   F3AB 97 00       macro_start		staa	ram_base
2222   F3AD D7 01       			stab	ram_base+1
2223   F3AF 32          macro_rts		pula	
2224   F3B0 97 D1       			staa	vm_pc
2225   F3B2 32          			pula	
2226   F3B3 97 D2       			staa	vm_pc+1
2227   F3B5 BD E0 A9    macro_go		jsr	gr_macro_event
2228   F3B8 BD F4 95    			jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2229   F3BB 16          			tab	
2230   F3BC 54          			lsrb	
2231   F3BD 54          			lsrb	
2232   F3BE 54          			lsrb	
2233   F3BF C4 1E       			andb	#$1E
2234   F3C1 CE F3 19    			ldx	#master_vm_lookup
2235   F3C4 BD EF 4D    			jsr	xplusb
2236   F3C7 EE 00       			ldx	$00,X
2237   F3C9 6E 00       			jmp	$00,X
2238   F3CB             			
2239   F3CB DF D1       switch_entry	stx	vm_pc
2240   F3CD 97 00       			staa	ram_base
2241   F3CF D7 01       breg_sto		stab	ram_base+1
2242   F3D1 20 E2       			bra	macro_go
2243   F3D3             			
2244   F3D3 CE F3 39    vm_control_0x	ldx	#vm_lookup_0x
2245   F3D6 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
2246   F3D9 6E 00       			jmp	$00,X
2247   F3DB             			
2248   F3DB DE D1       macro_pcminus100	ldx	vm_pc
2249   F3DD 09          			dex	
2250   F3DE DF D1       			stx	vm_pc
2251   F3E0 20 D3       			bra	macro_go
2252   F3E2             			
2253   F3E2 DE D1       macro_code_start	ldx	vm_pc
2254   F3E4 96 00       			ldaa	ram_base
2255   F3E6 D6 01       			ldab	ram_base+1
2256   F3E8 6E 00       			jmp	$00,X
2257   F3EA             			
2258   F3EA BD F6 A5    macro_special	jsr	award_special			;Award Special
2259   F3ED 20 C6       			bra	macro_go
2260   F3EF             			
2261   F3EF BD F6 D5    macro_extraball	jsr	extraball				;Award Extra Ball
2262   F3F2 20 C1       			bra	macro_go
2263   F3F4             			
2264   F3F4 16          vm_control_1x	tab	
2265   F3F5 C4 0F       			andb	#$0F
2266   F3F7 C0 08       			subb	#$08
2267   F3F9 25 1D       			bcs	macro_17				;Branch for Macros 10-17
2268   F3FB 58          macro_x8f		aslb	
2269   F3FC CE F3 47    			ldx	#vm_lookup_1x_a
2270   F3FF BD EF 4D    			jsr	xplusb				;X = X + B)
2271   F402 EE 00       			ldx	$00,X
2272   F404 16          			tab						;Original Command #
2273   F405 58          			aslb	
2274   F406 58          			aslb	
2275   F407 C4 80       			andb	#$80
2276   F409             b_0AF			begin
2276   F409             
2277   F409 BD F4 95    				jsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2278   F40C 36          				psha	
2279   F40D 84 7F       				anda	#$7F
2280   F40F 1B          				aba	
2281   F410 AD 00       				jsr	$00,X
2282   F412 32          				pula	
2283   F413 4D          				tsta	
2284   F414             			plend
2284   F414             
2284   F414             
2284   F414~            			plend
2284   F414~            			plend
2284   F414~            			plend
2284   F414             
2284   F414 2B F3       
2284   F416             
2284   F416~            			plend
2284   F416~            			plend
2284   F416             
2285   F416 20 9D       			bra	macro_go
2286   F418             			
2287   F418 CE F3 57    macro_17		ldx	#vm_lookup_1x_b
2288   F41B 16          macro_x17		tab						;A = still instruction #
2289   F41C 84 03       			anda	#$03
2290   F41E BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
2291   F421 C5 04       			bitb	#$04
2292   F423             			ifeq					;Branch on 14-17
2292   F423             
2292   F423 26 FE       
2293   F425 5F          				clrb	
2294   F426 20 E1       				bra	b_0AF
2295   F428             			endif
2295   F428             
2295   F428             
2295   F428             
2295   F428             
2295   F428             
2295   F428~            			endif
2295   F428~            			endif
2295   F428             
2295   F428~            			endif
2295   F428~            			endif
2295   F428             
2295   F424             
2295   F424 03          
2295   F425             
2295   F425             
2295   F425~            			endif
2295   F425~            			endif
2295   F425~            			endif
2295   F425             
2295   F428             
2295   F428~            			endif
2295   F428~            			endif
2295   F428             
2296   F428             			begin
2296   F428             
2297   F428 8D 6B       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2298   F42A 16          				tab	
2299   F42B BD F5 18    				jsr	macro_b_ram				;$00,LSD(A)->A
2300   F42E AD 00       				jsr	$00,X
2301   F430 5D          				tstb	
2302   F431             			plend
2302   F431             
2302   F431             
2302   F431~            			plend
2302   F431~            			plend
2302   F431~            			plend
2302   F431             
2302   F431 2B F5       
2302   F433             
2302   F433~            			plend
2302   F433~            			plend
2302   F433             
2303   F433 7E F3 B5    to_macro_go1	jmp	macro_go
2304   F436             
2305   F436 16          vm_control_2x	tab						;A= macro
2306   F437 C4 0F       			andb	#$0F
2307   F439 C0 08       			subb	#$08
2308   F43B 24 BE       			bcc	macro_x8f				;Branch for Macros 28-2F
2309   F43D CE F3 5F    			ldx	#vm_lookup_2x
2310   F440 20 D9       			bra	macro_x17
2311   F442             			
2312   F442 16          vm_control_3x	tab	
2313   F443 C4 0F       			andb	#$0F					;16 Solenoids Max 
2314   F445             			begin
2314   F445             
2315   F445 8D 4E       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2316   F447 BD EB 23    				jsr	solbuf				;Turn On/Off Solenoid
2317   F44A 5A          				decb	
2318   F44B             			eqend
2318   F44B             
2318   F44B             
2318   F44B~            			eqend
2318   F44B~            			eqend
2318   F44B~            			eqend
2318   F44B             
2318   F44B 26 F8       
2318   F44D             
2318   F44D~            			eqend
2318   F44D~            			eqend
2318   F44D             
2319   F44D 20 E4       			bra	to_macro_go1
2320   F44F             			
2321   F44F 84 0F       vm_control_4x	anda	#$0F
2322   F451             			ifeq
2322   F451             
2322   F451 26 FE       
2323   F453 BD F4 EA    				jsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
2324   F456 BD EB FA    				jsr	isnd_pts				;Play Sound Index(B)Once, Add Points(A)
2325   F459 20 D8       				bra	to_macro_go1
2326   F45B             			endif
2326   F45B             
2326   F45B             
2326   F45B             
2326   F45B             
2326   F45B             
2326   F45B~            			endif
2326   F45B~            			endif
2326   F45B             
2326   F45B~            			endif
2326   F45B~            			endif
2326   F45B             
2326   F452             
2326   F452 08          
2326   F453             
2326   F453             
2326   F453~            			endif
2326   F453~            			endif
2326   F453~            			endif
2326   F453             
2326   F45B             
2326   F45B~            			endif
2326   F45B~            			endif
2326   F45B             
2327   F45B 81 04       			cmpa	#$04
2328   F45D 24 0C       			bcc	macro_exec				;Branch for Macros 44-4F (execute cpu)
2329   F45F CE F3 63    			ldx	#vm_lookup_4x-2
2330   F462 BD F4 8E    			jsr	gettabledata_b			;X = data at (X + (A*2))
2331   F465 8D 2E       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2332   F467 AD 00       			jsr	$00,X
2333   F469 20 C8       			bra	to_macro_go1			;Continue Executing Macros
2334   F46B             			
2335   F46B 16          macro_exec		tab	
2336   F46C C0 02       			subb	#$02
2337   F46E CE 11 30    			ldx	#exe_buffer
2338   F471             			begin
2338   F471             
2339   F471 8D 22       				bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2340   F473 A7 00       				staa	$00,X
2341   F475 08          				inx	
2342   F476 5A          				decb	
2343   F477             			eqend					;Add B bytes to Buffer at #1130
2343   F477             
2343   F477             
2343   F477~            			eqend					;Add B bytes to Buffer at #1130
2343   F477~            			eqend					;Add B bytes to Buffer at #1130
2343   F477~            			eqend					;Add B bytes to Buffer at #1130
2343   F477             
2343   F477 26 F8       
2343   F479             
2343   F479~            			eqend					;Add B bytes to Buffer at #1130
2343   F479~            			eqend					;Add B bytes to Buffer at #1130
2343   F479             
2344   F479 86 7E       			ldaa	#$7E
2345   F47B A7 00       			staa	$00,X
2346   F47D 86 F3       			ldaa	#$F3
2347   F47F A7 01       			staa	$01,X
2348   F481 86 CD       			ldaa	#$CD					;Tack a JMP $F3CD at the end of the routine
2349   F483 A7 02       			staa	$02,X
2350   F485 96 00       			ldaa	ram_base
2351   F487 D6 01       			ldab	ram_base+1
2352   F489 7E 11 30    			jmp	exe_buffer				;Go there Now, put return A and B into RAM $00 and $01
2353   F48C             			
2354   F48C 84 0F       gettabledata_w	anda	#$0F
2355   F48E 48          gettabledata_b	asla	
2356   F48F BD EE FF    			jsr	xplusa
2357   F492 EE 00       			ldx	$00,X
2358   F494 39          			rts
2359   F495             			
2360   F495             macro_getnextbyte	
2361   F495 DF 9A       			stx	temp1
2362   F497 DE D1       			ldx	vm_pc
2363   F499 A6 00       			ldaa	$00,X
2364   F49B 08          			inx	
2365   F49C DF D1       			stx	vm_pc
2366   F49E DE 9A       getx_rts		ldx	temp1
2367   F4A0 39          			rts	
2368   F4A1             			
2369   F4A1 CE F3 6B    vm_control_5x	ldx	#vm_lookup_5x
2370   F4A4 16          			tab						;Move our Data into B
2371   F4A5 BD F4 8C    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
2372   F4A8 6E 00       			jmp	$00,X
2373   F4AA             			
2374   F4AA 8D E9       macro_ramadd	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2375   F4AC 16          			tab	
2376   F4AD 8D 69       			bsr	macro_b_ram				;$00,LSD(A)->A
2377   F4AF 97 9E       			staa	temp3
2378   F4B1 54          			lsrb	
2379   F4B2 54          			lsrb	
2380   F4B3 54          			lsrb	
2381   F4B4 54          			lsrb	
2382   F4B5 17          			tba	
2383   F4B6 8D 60       			bsr	macro_b_ram				;$00,LSD(A)->A
2384   F4B8 9B 9E       			adda	temp3
2385   F4BA 8D 4D       ram_sto2		bsr	macro_a_ram				;A->$00,LSD(B)
2386   F4BC 7E F3 B5    to_macro_go2	jmp	macro_go
2387   F4BF             
2388   F4BF 8D D4       macro_ramcopy	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2389   F4C1 16          			tab	
2390   F4C2 8D 54       			bsr	macro_b_ram				;$00,LSD(A)->A
2391   F4C4 54          			lsrb	
2392   F4C5 54          			lsrb	
2393   F4C6 54          			lsrb	
2394   F4C7 54          			lsrb	
2395   F4C8 20 F0       			bra	ram_sto2				;A->$00,LSD(B),jmp $F3B5
2396   F4CA             			
2397   F4CA 8D C9       macro_set_pri	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2398   F4CC DE B1       			ldx	current_thread			;Current VM Routine being run
2399   F4CE A7 0D       			staa	threadobj_id,X
2400   F4D0 20 EA       			bra	to_macro_go2			;Continue Executing Macros
2401   F4D2             			
2402   F4D2             macro_delay_imm_b	
2403   F4D2 8D C1       			bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2404   F4D4 97 B7       dly_sto		staa	thread_timer_byte
2405   F4D6 DE D1       			ldx	vm_pc
2406   F4D8 96 00       			ldaa	ram_base
2407   F4DA D6 01       			ldab	ram_base+1
2408   F4DC BD EA 24    			jsr	delaythread				;Push Next Address onto VM, Timer at thread_timer_byte
2409   F4DF 7E F3 CB    			jmp	switch_entry
2410   F4E2             			
2411   F4E2             macro_getnextword		
2412   F4E2 8D 06       			bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
2413   F4E4 D7 9A       			stab	temp1
2414   F4E6 97 9B       			staa	temp1+1
2415   F4E8 20 B4       			bra	getx_rts
2416   F4EA             			
2417   F4EA 8D A9       macro_get2bytes	bsr	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2418   F4EC 16          			tab	
2419   F4ED 20 A6       			bra	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2420   F4EF             			
2421   F4EF 8D F9       macro_rem_th_s	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
2422   F4F1 BD EA F3    			jsr	kill_thread
2423   F4F4 20 C6       			bra	to_macro_go2			;Continue Executing Macros
2424   F4F6             			
2425   F4F6 8D F2       macro_rem_th_m	bsr	macro_get2bytes			;Macro Data: Next Two Bytes into B & A:
2426   F4F8 BD EA FB    			jsr	kill_threads
2427   F4FB 20 BF       			bra	to_macro_go2			;Continue Executing Macros
2428   F4FD             			
2429   F4FD             macro_jsr_noreturn	
2430   F4FD 8D E3       			bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2431   F4FF 96 D2       			ldaa	vm_pc+1
2432   F501 36          			psha	
2433   F502 96 D1       			ldaa	vm_pc
2434   F504 36          			psha	
2435   F505 DF D1       pc_sto2		stx	vm_pc
2436   F507 20 B3       			bra	to_macro_go2			;jContinue Executing Macros
2437   F509             			
2438   F509 DF 9A       macro_a_ram		stx	temp1
2439   F50B C4 0F       			andb	#$0F
2440   F50D D7 9D       			stab	temp2+1
2441   F50F 7F 00 9C    			clr	temp2
2442   F512 DE 9C       			ldx	temp2
2443   F514 A7 00       			staa	$00,X
2444   F516 20 86       to_getx_rts		bra	getx_rts
2445   F518             
2446   F518 DF 9A       macro_b_ram		stx	temp1
2447   F51A 84 0F       			anda	#$0F
2448   F51C 97 9D       			staa	temp2+1
2449   F51E 7F 00 9C    			clr	temp2
2450   F521 DE 9C       			ldx	temp2
2451   F523 A6 00       			ldaa	$00,X
2452   F525 20 EF       			bra	to_getx_rts				;ldx temp1, rts.
2453   F527             			
2454   F527 8D B9       macro_jsr_return	bsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2455   F529 96 D2       ret_sto		ldaa	vm_pc+1
2456   F52B 36          			psha	
2457   F52C 96 D1       			ldaa	vm_pc
2458   F52E 36          			psha						;Push Macro PC
2459   F52F 96 00       			ldaa	ram_base
2460   F531 D6 01       			ldab	ram_base+1
2461   F533 AD 00       			jsr	$00,X
2462   F535 97 00       			staa	ram_base
2463   F537 32          			pula	
2464   F538 97 D1       			staa	vm_pc					;Pull Macro PC
2465   F53A 32          			pula	
2466   F53B 97 D2       			staa	vm_pc+1
2467   F53D 7E F3 CF    			jmp	breg_sto
2468   F540             			
2469   F540 8D D6       vm_control_6x	bsr	macro_b_ram				;Load RAM Data
2470   F542 20 90       			bra	dly_sto				;Delay it
2471   F544             			
2472   F544 84 0F       vm_control_7x	anda	#$0F
2473   F546 20 8C       			bra	dly_sto				;Delay it
2474   F548             			
2475   F548 8D 44       vm_control_8x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
2476   F54A DF D1       pc_sto		stx	vm_pc					;Store X into VMPC
2477   F54C 7E F3 B5    to_macro_go4	jmp	macro_go
2478   F54F             
2479   F54F BD F4 E2    macro_jmp_cpu	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2480   F552 96 00       			ldaa	ram_base
2481   F554 D6 01       			ldab	ram_base+1
2482   F556 6E 00       			jmp	$00,X
2483   F558             			
2484   F558 8D 34       vm_control_9x	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
2485   F55A D6 D2       			ldab	vm_pc+1
2486   F55C 37          			pshb	
2487   F55D D6 D1       			ldab	vm_pc
2488   F55F 37          			pshb	
2489   F560 20 E8       			bra	pc_sto				;Store X into VMPC, continue
2490   F562             			
2491   F562 8D 2A       vm_control_ax	bsr	macro_pcadd				;Add LSD(A)+NextByte to $D1,$D2 -> X
2492   F564 20 C3       			bra	ret_sto
2493   F566             			
2494   F566 BD F4 E2    macro_jmp_abs	jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2495   F569 20 DF       			bra	pc_sto
2496   F56B             			
2497   F56B 16          vm_control_bx	tab	
2498   F56C 8D AA       			bsr	macro_b_ram				;RAM Data (A&0f)->A
2499   F56E 97 9C       			staa	temp2
2500   F570 8D 58       			bsr	to_macro_getnextbyte
2501   F572 9B 9C       			adda	temp2
2502   F574 8D 93       ram_sto		bsr	macro_a_ram				;A->RAM(B&0f)
2503   F576 20 D4       			bra	to_macro_go4
2504   F578             			
2505   F578 16          vm_control_cx	tab	
2506   F579 8D 4F       			bsr	to_macro_getnextbyte
2507   F57B 20 F7       			bra	ram_sto				;Save to RAM and continue
2508   F57D             			
2509   F57D 84 0F       vm_control_dx	anda	#$0F
2510   F57F 16          			tab	
2511   F580 8D 48       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2512   F582 BD ED 03    			jsr	sound_sub
2513   F585 20 C5       			bra	to_macro_go4			;jmp  $F3B5
2514   F587             			
2515   F587             vm_control_ex
2516   F587 84 1F       vm_control_fx	anda	#$1F
2517   F589 BD EC FC    			jsr	isnd_once				;Play Sound Index(A) Once
2518   F58C 20 BE       			bra	to_macro_go4
2519   F58E             			
2520   F58E 84 0F       macro_pcadd		anda	#$0F
2521   F590 85 08       			bita	#$08
2522   F592             			ifne
2522   F592             
2522   F592 27 FE       
2523   F594 8A F0       				oraa	#$F0
2524   F596             			endif
2524   F596             
2524   F596             
2524   F596             
2524   F596             
2524   F596             
2524   F596~            			endif
2524   F596~            			endif
2524   F596             
2524   F596~            			endif
2524   F596~            			endif
2524   F596             
2524   F593             
2524   F593 02          
2524   F594             
2524   F594             
2524   F594~            			endif
2524   F594~            			endif
2524   F594~            			endif
2524   F594             
2524   F596             
2524   F596~            			endif
2524   F596~            			endif
2524   F596             
2525   F596 16          			tab	
2526   F597 8D 31       			bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2527   F599 9B D2       			adda	vm_pc+1
2528   F59B 97 9B       			staa	temp1+1
2529   F59D D9 D1       			adcb	vm_pc
2530   F59F D7 9A       			stab	temp1
2531   F5A1 DE 9A       			ldx	temp1
2532   F5A3 39          			rts	
2533   F5A4             			
2534   F5A4 8D 0A       macro_setswitch	bsr	load_sw_no				;Get switch number from the data
2535   F5A6 EA 00       			orab	$00,X
2536   F5A8 E7 00       			stab	$00,X
2537   F5AA 96 A8       			ldaa	sys_temp_w3
2538   F5AC 2B F6       			bmi	macro_setswitch
2539   F5AE 20 17       			bra	to_macro_go3			;jmp  $F3B5
2540   F5B0             			
2541   F5B0 8D 18       load_sw_no		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2542   F5B2 97 A8       			staa	sys_temp_w3
2543   F5B4 84 3F       			anda	#$3F
2544   F5B6 CE 00 61    			ldx	#switch_debounced
2545   F5B9 7E F1 9C    			jmp	unpack_byte				;(X = X + A>>3), B = (bitpos(A&07))
2546   F5BC             			
2547   F5BC 8D F2       macro_clearswitch	bsr	load_sw_no				;Get switch number from the data
2548   F5BE 53          			comb	
2549   F5BF E4 00       			andb	$00,X
2550   F5C1 E7 00       			stab	$00,X
2551   F5C3 96 A8       			ldaa	sys_temp_w3
2552   F5C5 2B F5       			bmi	macro_clearswitch
2553   F5C7 7E F3 B5    to_macro_go3	jmp	macro_go
2554   F5CA             
2555   F5CA             to_macro_getnextbyte			
2556   F5CA 7E F4 95    			jmp	macro_getnextbyte			;Macro Data: A = Next Byte $D1+1
2557   F5CD             
2558   F5CD 37          macro_branch	pshb	
2559   F5CE 8D 28       			bsr	branchdata				;Gets Main Result
2560   F5D0 BD F6 92    			jsr	test_a				;Returns #80 or #81 in (A) based on Test of A
2561   F5D3 33          			pulb						;Get Back Command in B
2562   F5D4 1B          			aba	
2563   F5D5 36          			psha	
2564   F5D6 C5 02       			bitb	#$02					;Relative or Absolute Branch Flag
2565   F5D8             			ifeq
2565   F5D8             
2565   F5D8 26 FE       
2566   F5DA BD F4 E2    				jsr	macro_getnextword			;Macro Data: Load X with Next Two Bytes
2567   F5DD             			else
2567   F5DD             
2567   F5DD             
2567   F5DD             
2567   F5DD             
2567   F5D9             
2567   F5D9             
2567   F5D9             
2567   F5D9~            			else
2567   F5D9~            			else
2567   F5D9~            			else
2567   F5D9~            			else
2567   F5D9             
2567   F5D9~            			else
2567   F5D9~            			else
2567   F5D9~            			else
2567   F5D9~            			else
2567   F5D9             
2567   F5D9             
2567   F5D9 05          
2567   F5DD             
2567   F5DD 20 FE       
2567   F5DF             
2567   F5DF             
2567   F5DF             
2567   F5DF~            			else
2567   F5DF~            			else
2567   F5DF~            			else
2567   F5DF~            			else
2567   F5DF~            			else
2567   F5DF             
2567   F5DF~            			else
2567   F5DF~            			else
2567   F5DF             
2567   F5DF~            			else
2567   F5DF~            			else
2567   F5DF             
2568   F5DF 8D E9       				bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2569   F5E1 C6 FF       				ldab	#$FF
2570   F5E3 81 80       				cmpa	#$80
2571   F5E5 C9 00       				adcb	#$00
2572   F5E7 9B D2       				adda	vm_pc+1
2573   F5E9 D9 D1       				adcb	vm_pc
2574   F5EB 97 9B       				staa	temp1+1
2575   F5ED D7 9A       				stab	temp1
2576   F5EF DE 9A       				ldx	temp1
2577   F5F1             			endif
2577   F5F1             
2577   F5F1             
2577   F5F1             
2577   F5F1             
2577   F5F1             
2577   F5F1~            			endif
2577   F5F1~            			endif
2577   F5F1             
2577   F5F1~            			endif
2577   F5F1~            			endif
2577   F5F1             
2577   F5DE             
2577   F5DE 12          
2577   F5DF             
2577   F5DF             
2577   F5DF~            			endif
2577   F5DF~            			endif
2577   F5DF~            			endif
2577   F5DF             
2577   F5F1             
2577   F5F1~            			endif
2577   F5F1~            			endif
2577   F5F1             
2578   F5F1 32          			pula						;Get our result from above push
2579   F5F2 46          			rora						;Test LSB
2580   F5F3 24 D2       			bcc	to_macro_go3			;If result was #80, then ignore this branch (jmp  $F3B5)
2581   F5F5 7E F5 05    			jmp	pc_sto2				;Else, we will branch now. (stx  $D1, jmp $F3B5)
2582   F5F8             			
2583   F5F8 8D D0       branchdata		bsr	to_macro_getnextbyte		;Macro Data: A = Next Byte $D1+1
2584   F5FA 81 D0       			cmpa	#$D0
2585   F5FC 25 3C       			bcs	to_rts3				;(rts) if data is below #D0
2586   F5FE 81 F0       			cmpa	#$F0
2587   F600 24 13       			bcc	complexbranch			;Branch if #F0 or above (Complex)
2588   F602 81 E0       			cmpa	#$E0
2589   F604             			ifcc						;Branch if less than #E0
2589   F604             
2589   F604 25 FE       
2590   F606 7E F5 18    				jmp	macro_b_ram				;RAM Data (A&0f)->A (Data is E_)
2591   F609             			endif
2591   F609             
2591   F609             
2591   F609             
2591   F609             
2591   F609             
2591   F609~            			endif
2591   F609~            			endif
2591   F609             
2591   F609~            			endif
2591   F609~            			endif
2591   F609             
2591   F605             
2591   F605 03          
2591   F606             
2591   F606             
2591   F606~            			endif
2591   F606~            			endif
2591   F606~            			endif
2591   F606             
2591   F609             
2591   F609~            			endif
2591   F609~            			endif
2591   F609             
2592   F609 CE 01 93    			ldx	#adj_gameadjust1-2		;Pointer to Bottom of Game Adjustments
2593   F60C 84 0F       			anda	#$0F					;A = Index for Game Adjustment Lookup
2594   F60E 48          			asla	
2595   F60F BD EE FF    			jsr	xplusa				;X = X + A
2596   F612 7E EF 53    			jmp	cmosinc_a				;CMOS,X++ -> A
2597   F615             			
2598   F615 81 F3       complexbranch	cmpa	#$F3
2599   F617             			ifcc							;data is below #F3 (not complex)
2599   F617             
2599   F617 25 FE       
2600   F619 36          				psha						;Push Current Branch Inst.
2601   F61A 8D DC       				bsr	branchdata				;Gets Encoded Data Type
2602   F61C 16          				tab	
2603   F61D D7 9A       				stab	temp1
2604   F61F 32          				pula	
2605   F620 81 F9       				cmpa	#$F9
2606   F622             				ifcc						;Branch if below #F9 (Lamp or Bit Test)
2606   F622             
2606   F622 25 FE       
2607   F624 36          					psha	
2608   F625 37          					pshb	
2609   F626 8D D0       					bsr	branchdata				;Gets Encoded Data Type
2610   F628 97 9A       					staa	temp1
2611   F62A 33          					pulb	
2612   F62B 32          					pula	
2613   F62C             				endif
2613   F62C             
2613   F62C             
2613   F62C             
2613   F62C             
2613   F62C             
2613   F62C~            				endif
2613   F62C~            				endif
2613   F62C             
2613   F62C~            				endif
2613   F62C~            				endif
2613   F62C             
2613   F623             
2613   F623 08          
2613   F624             
2613   F624             
2613   F624~            				endif
2613   F624~            				endif
2613   F624~            				endif
2613   F624             
2613   F62C             
2613   F62C~            				endif
2613   F62C~            				endif
2613   F62C             
2614   F62C             			endif
2614   F62C             
2614   F62C             
2614   F62C             
2614   F62C             
2614   F62C             
2614   F62C~            			endif
2614   F62C~            			endif
2614   F62C             
2614   F62C~            			endif
2614   F62C~            			endif
2614   F62C             
2614   F618             
2614   F618 13          
2614   F619             
2614   F619             
2614   F619~            			endif
2614   F619~            			endif
2614   F619~            			endif
2614   F619             
2614   F62C             
2614   F62C~            			endif
2614   F62C~            			endif
2614   F62C             
2615   F62C CE F3 8B    			ldx	#branch_lookup
2616   F62F BD F4 8C    			jsr	gettabledata_w			;X = data at (X + LSD(A)*2)
2617   F632 96 9A       			ldaa	temp1
2618   F634 6E 00       			jmp	$00,X
2619   F636             			
2620   F636 8D 5A       branch_invert	bsr	test_a
2621   F638 88 01       			eora	#$01
2622   F63A 39          to_rts3		rts	
2623   F63B             
2624   F63B BD F2 F9    branch_lamp_on	jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
2625   F63E 26 1E       			bne	ret_true				;return true
2626   F640 BD F2 EF    			jsr	bit_lamp_flash			;Check Encoded #(A) with $0030
2627   F643 26 19       test_z		bne	ret_true				;return true
2628   F645 20 10       			bra	ret_false				;return false
2629   F647             			
2630   F647             branch_lamprangeoff	
2631   F647 BD F2 DE    			jsr	$F2DE
2632   F64A 25 12       test_c		bcs	ret_true				;return true
2633   F64C 20 09       			bra	ret_false				;return false
2634   F64E             			
2635   F64E             branch_lamprangeon	
2636   F64E BD F2 CF    			jsr	$F2CF
2637   F651 20 F7       			bra	test_c
2638   F653             			
2639   F653 96 C8       branch_tilt		ldaa	flag_tilt				;tilt flag?
2640   F655 26 07       			bne	ret_true				;return true
2641   F657 86 80       ret_false		ldaa	#$80					;return false
2642   F659 39          			rts	
2643   F65A             			
2644   F65A 96 C9       branch_gameover	ldaa	flag_gameover			;game over?
2645   F65C 27 F9       			beq	ret_false				;return false
2646   F65E 86 81       ret_true		ldaa	#$81
2647   F660 39          			rts	
2648   F661             			
2649   F661 BD F2 F4    branch_lampbuf1	jsr	bit_lamp_buf_1			;Check Encoded #(A) with $0028
2650   F664 20 DD       			bra	test_z				;Return Bool based on Z
2651   F666             									
2652   F666 BD F2 EA    branch_switch	jsr	bit_switch				;Check Encoded #(A) with $0061:
2653   F669 20 D8       			bra	test_z				;Return Boolean based on Z
2654   F66B             			
2655   F66B 8D 1E       branch_and		bsr	set_logic
2656   F66D 94 9A       			anda	temp1
2657   F66F 39          			rts	
2658   F670             			
2659   F670 1B          branch_add		aba	
2660   F671 39          			rts	
2661   F672             			
2662   F672 8D 17       branch_or		bsr	set_logic
2663   F674 9A 9A       			oraa	temp1
2664   F676 39          			rts	
2665   F677             			
2666   F677 11          branch_equal	cba	
2667   F678 27 E4       			beq	ret_true				;lda  #$81, rts
2668   F67A 20 DB       			bra	ret_false				;lda  #$80, rts
2669   F67C             			
2670   F67C 11          branch_ge		cba	
2671   F67D 20 CB       			bra	test_c
2672   F67F             			
2673   F67F BD EB 00    branch_threadpri	jsr	check_threadid
2674   F682 24 DA       			bcc	ret_true				;lda  #$81, rts
2675   F684 20 D1       			bra	ret_false				;lda  #$80, rts
2676   F686             			
2677   F686 D7 9A       branch_bitwise	stab	temp1
2678   F688 94 9A       			anda	temp1
2679   F68A 39          to_rts4		rts	
2680   F68B             
2681   F68B 36          set_logic		psha	
2682   F68C 17          			tba	
2683   F68D 8D 03       			bsr	test_a
2684   F68F 97 9A       			staa	temp1
2685   F691 32          			pula	
2686   F692 4D          test_a		tsta	
2687   F693 2B F5       			bmi	to_rts4				;rts
2688   F695 BD F2 F9    			jsr	bit_lamp_buf_0			;Bit Test B with Lamp Data (A)
2689   F698 27 BD       			beq	ret_false				;return false
2690   F69A 81 40       			cmpa	#$40					;Check Encoded Lamp #
2691   F69C 24 C0       			bcc	ret_true				;return true
2692   F69E BD F2 EF    			jsr	bit_lamp_flash			;Bittest with $0030
2693   F6A1 26 B4       			bne	ret_false				;return false
2694   F6A3 20 B9       			bra	ret_true				;return true
2695   F6A5             			
2696   F6A5             ;*******************************************************
2697   F6A5             ;* End VM Code Section
2698   F6A5             ;*******************************************************			
2699   F6A5             
2700   F6A5             ;*******************************************************
2701   F6A5             ;* This is the main special award routine that decides 
2702   F6A5             ;* what type of award is to be given and jumps to the 
2703   F6A5             ;* appropriate place.
2704   F6A5             ;*******************************************************			
2705   F6A5 36          award_special	psha	
2706   F6A6 B6 01 8E    			ldaa	adj_specialaward+1		;ADJ: LSD Special Award-00=Credit 01=EB 02=Points
2707   F6A9 84 0F       			anda	#$0F
2708   F6AB 27 0B       			beq	credit_special			;Special award is credits
2709   F6AD 46          			rora	
2710   F6AE 25 26       			bcs	do_eb					;Extra Ball
2711   F6B0 B6 E0 56    			ldaa	gr_specialawardsound		;*Here if Points* Data byte from Game ROM
2712   F6B3 BD EB FE    			jsr	dsnd_pts				;Add Points(A),Play Digit Sound
2713   F6B6 32          			pula	
2714   F6B7 39          			rts	
2715   F6B8             			
2716   F6B8 DF DC       credit_special	stx	credit_x_temp			;Save X for later
2717   F6BA CE 01 12    			ldx	#aud_specialcredits		;AUD: Special Credits
2718   F6BD 20 0C       			bra	give_credit
2719   F6BF             ;*******************************************************
2720   F6BF             ;* Main entry for replays... score or matching
2721   F6BF             ;*******************************************************			
2722   F6BF 36          award_replay	psha	
2723   F6C0 B6 01 90    			ldaa	adj_replayaward+1			;ADJ: LSD Replay Award-00=Credit 01=Extra Ball
2724   F6C3 46          			rora	
2725   F6C4 25 10       			bcs	do_eb					;Extra Ball
2726   F6C6 DF DC       			stx	credit_x_temp			;Save X for later
2727   F6C8 CE 01 16    			ldx	#aud_replaycredits		;AUD: Replay Score Credits
2728   F6CB BD F7 7F    give_credit		jsr	ptrx_plus_1				;Add 1 to data at X
2729   F6CE BD E0 A7    			jsr	gr_special_event			;Game ROM Hook
2730   F6D1 86 01       			ldaa	#$01
2731   F6D3 20 2C       			bra	addcredit2
2732   F6D5             			
2733   F6D5 36          extraball		psha	
2734   F6D6 DF DA       do_eb			stx	eb_x_temp				;Save X for later
2735   F6D8 CE 01 A9    			ldx	#adj_max_extraballs		;ADJ: Max Extra Balls
2736   F6DB BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
2737   F6DE 91 D0       			cmpa	num_eb				;Number of Extra Balls Remaining
2738   F6E0             			ifgt
2738   F6E0             
2738   F6E0 23 FE       
2739   F6E2 BD E0 A5    				jsr	gr_eb_event
2740   F6E5 B6 E0 5F    				ldaa	gr_eb_lamp_1			;*** Game ROM data ***
2741   F6E8 BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
2742   F6EB B6 E0 60    				ldaa	gr_eb_lamp_2			;*** Game ROM data ***
2743   F6EE BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
2744   F6F1 7C 00 D0    				inc	num_eb
2745   F6F4 CE 01 22    				ldx	#aud_extraballs			;AUD: Total Extra Balls
2746   F6F7 BD F7 7F    				jsr	ptrx_plus_1				;Add 1 to data at X
2747   F6FA             			endif
2747   F6FA             
2747   F6FA             
2747   F6FA             
2747   F6FA             
2747   F6FA             
2747   F6FA~            			endif
2747   F6FA~            			endif
2747   F6FA             
2747   F6FA~            			endif
2747   F6FA~            			endif
2747   F6FA             
2747   F6E1             
2747   F6E1 18          
2747   F6E2             
2747   F6E2             
2747   F6E2~            			endif
2747   F6E2~            			endif
2747   F6E2~            			endif
2747   F6E2             
2747   F6FA             
2747   F6FA~            			endif
2747   F6FA~            			endif
2747   F6FA             
2748   F6FA DE DA       			ldx	eb_x_temp				;Restore X
2749   F6FC 32          			pula	
2750   F6FD 39          			rts	
2751   F6FE             			
2752   F6FE DF DC       addcredits		stx	credit_x_temp			;Save X
2753   F700 36          			psha	
2754   F701 37          addcredit2		pshb	
2755   F702 8D 45       			bsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
2756   F704             			ifcs						;No more if Carry Clear.
2756   F704             
2756   F704 24 FE       
2757   F706 BD EF 63    				jsr	cmosinc_b				;CMOS,X++ -> B
2758   F709 09          				dex	
2759   F70A 09          				dex	
2760   F70B 1B          				aba						;Add the new credits.
2761   F70C 19          				daa						;Adjust
2762   F70D             				ifcs
2762   F70D             
2762   F70D 24 FE       
2763   F70F 86 99       					ldaa	#$99					;If it rolled, set it to 99
2764   F711             				endif
2764   F711             
2764   F711             
2764   F711             
2764   F711             
2764   F711             
2764   F711~            				endif
2764   F711~            				endif
2764   F711             
2764   F711~            				endif
2764   F711~            				endif
2764   F711             
2764   F70E             
2764   F70E 02          
2764   F70F             
2764   F70F             
2764   F70F~            				endif
2764   F70F~            				endif
2764   F70F~            				endif
2764   F70F             
2764   F711             
2764   F711~            				endif
2764   F711~            				endif
2764   F711             
2765   F711 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++
2766   F714 D1 5A       				cmpb	cred_b0				;Actual Credits
2767   F716             				ifeq						;Check against shown credits
2767   F716             
2767   F716 26 FE       
2768   F718 C6 0E       					ldab	#$0E
2769   F71A D7 AA       					stab	thread_priority
2770   F71C CE F7 5F    					ldx	#creditq				;Thread: Add on Queued Credits
2771   F71F BD EA 78    					jsr	newthread_sp			;Push VM: Data in A,B,X,threadpriority,$A6,$A7
2772   F722             					ifcs						;If Carry is set, thread was not added
2772   F722             
2772   F722 24 FE       
2773   F724 97 5A       						staa	cred_b0				;Actual Credits
2774   F726             					endif
2774   F726             
2774   F726             
2774   F726             
2774   F726             
2774   F726             
2774   F726~            					endif
2774   F726~            					endif
2774   F726             
2774   F726~            					endif
2774   F726~            					endif
2774   F726             
2774   F723             
2774   F723 02          
2774   F724             
2774   F724             
2774   F724~            					endif
2774   F724~            					endif
2774   F724~            					endif
2774   F724             
2774   F726             
2774   F726~            					endif
2774   F726~            					endif
2774   F726             
2775   F726             				endif
2775   F726             
2775   F726             
2775   F726             
2775   F726             
2775   F726             
2775   F726~            				endif
2775   F726~            				endif
2775   F726             
2775   F726~            				endif
2775   F726~            				endif
2775   F726             
2775   F717             
2775   F717 0E          
2775   F718             
2775   F718             
2775   F718~            				endif
2775   F718~            				endif
2775   F718~            				endif
2775   F718             
2775   F726             
2775   F726~            				endif
2775   F726~            				endif
2775   F726             
2776   F726 8D 04       				bsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
2777   F728             			endif
2777   F728             
2777   F728             
2777   F728             
2777   F728             
2777   F728             
2777   F728~            			endif
2777   F728~            			endif
2777   F728             
2777   F728~            			endif
2777   F728~            			endif
2777   F728             
2777   F705             
2777   F705 22          
2777   F706             
2777   F706             
2777   F706~            			endif
2777   F706~            			endif
2777   F706~            			endif
2777   F706             
2777   F728             
2777   F728~            			endif
2777   F728~            			endif
2777   F728             
2778   F728 DE DC       			ldx	credit_x_temp			;Restore X
2779   F72A 20 30       			bra	pull_ba_rts				;pulb,pula,rts
2780   F72C             
2781   F72C             ;**********************************************
2782   F72C             ;* Adjust the coin lockout solenoid and the 
2783   F72C             ;* credit lamp on playfield if installed.
2784   F72C             ;**********************************************			
2785   F72C 36          coinlockout		psha	
2786   F72D BD F7 49    			jsr	checkmaxcredits			;Check Max Credits (Carry Set if Okay)
2787   F730 86 EF       			ldaa	#$EF					;Lockout Coils On
2788   F732             			ifcc
2788   F732             
2788   F732 25 FE       
2789   F734 86 0F       				ldaa	#$0F					;Lockout Coils Off
2790   F736             			endif
2790   F736             
2790   F736             
2790   F736             
2790   F736             
2790   F736             
2790   F736~            			endif
2790   F736~            			endif
2790   F736             
2790   F736~            			endif
2790   F736~            			endif
2790   F736             
2790   F733             
2790   F733 02          
2790   F734             
2790   F734             
2790   F734~            			endif
2790   F734~            			endif
2790   F734~            			endif
2790   F734             
2790   F736             
2790   F736~            			endif
2790   F736~            			endif
2790   F736             
2791   F736 BD EB 23    			jsr	solbuf				;Turn Off Lockout Coils
2792   F739 B6 E0 61    			ldaa	gr_lastlamp				;Game ROM: Last Lamp Used
2793   F73C BD F1 5B    			jsr	lamp_off				;Turn off Lamp A (encoded):
2794   F73F BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
2795   F742             			ifne
2795   F742             
2795   F742 27 FE       
2796   F744 BD F1 3C    				jsr	lamp_on				;Turn on Lamp A (encoded):
2797   F747             			endif
2797   F747             
2797   F747             
2797   F747             
2797   F747             
2797   F747             
2797   F747~            			endif
2797   F747~            			endif
2797   F747             
2797   F747~            			endif
2797   F747~            			endif
2797   F747             
2797   F743             
2797   F743 03          
2797   F744             
2797   F744             
2797   F744~            			endif
2797   F744~            			endif
2797   F744~            			endif
2797   F744             
2797   F747             
2797   F747~            			endif
2797   F747~            			endif
2797   F747             
2798   F747 32          			pula	
2799   F748 39          			rts	
2800   F749             ;**********************************************
2801   F749             ;* See if we are at the adjustable maximum 
2802   F749             ;* credits allowed. If we are at max then
2803   F749             ;* carry flag is cleared, if we are not at
2804   F749             ;* max then the carry flag is set.
2805   F749             ;**********************************************			
2806   F749 36          checkmaxcredits	psha	
2807   F74A 37          			pshb	
2808   F74B CE 01 AB    			ldx	#adj_max_credits			;ADJ: Max Credits
2809   F74E BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
2810   F751 CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
2811   F754 5D          			tstb						;Max Credits allowed
2812   F755 0D          			sec	
2813   F756             			ifne
2813   F756             
2813   F756 27 FE       
2814   F758 BD FE 1F    				jsr	cmos_a				;CMOS, X -> A
2815   F75B 11          				cba	
2816   F75C             			endif
2816   F75C             
2816   F75C             
2816   F75C             
2816   F75C             
2816   F75C             
2816   F75C~            			endif
2816   F75C~            			endif
2816   F75C             
2816   F75C~            			endif
2816   F75C~            			endif
2816   F75C             
2816   F757             
2816   F757 04          
2816   F758             
2816   F758             
2816   F758~            			endif
2816   F758~            			endif
2816   F758~            			endif
2816   F758             
2816   F75C             
2816   F75C~            			endif
2816   F75C~            			endif
2816   F75C             
2817   F75C 33          pull_ba_rts		pulb	
2818   F75D 32          			pula	
2819   F75E 39          			rts	
2820   F75F             
2821   F75F             ;***********************************************
2822   F75F             ;* This routine is spawned as a thread when the
2823   F75F             ;* credits showing on the display do not match
2824   F75F             ;* the number of credits in the CMOS RAM. It 
2825   F75F             ;* Takes care of bringing them equal in a timely
2826   F75F             ;* fashion and calling the game ROM hook each
2827   F75F             ;* time a credit is added to the display. With
2828   F75F             ;* this, the game ROM can control the credit 
2829   F75F             ;* award process.
2830   F75F             ;***********************************************			
2831   F75F CE 01 6E    creditq		ldx	#aud_currentcredits		;CMOS: Current Credits
2832   F762 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
2833   F765 D1 5A       			cmpb	cred_b0
2834   F767             			ifne
2834   F767             
2834   F767 27 FE       
2835   F769 96 5A       				ldaa	cred_b0
2836   F76B 8B 01       				adda	#$01
2837   F76D 19          				daa	
2838   F76E 97 5A       				staa	cred_b0
2839   F770 FE E0 B7    				ldx	gr_coin_hook_ptr			;Game ROM:
2840   F773 11          				cba	
2841   F774             				ifne
2841   F774             
2841   F774 27 FE       
2842   F776 AD 00       					jsr	$00,X					;JSR to Game ROM Credit Hook
2843   F778 20 E5       					bra	creditq				;Loop it.
2844   F77A             				endif
2844   F77A             
2844   F77A             
2844   F77A             
2844   F77A             
2844   F77A             
2844   F77A~            				endif
2844   F77A~            				endif
2844   F77A             
2844   F77A~            				endif
2844   F77A~            				endif
2844   F77A             
2844   F775             
2844   F775 04          
2844   F776             
2844   F776             
2844   F776~            				endif
2844   F776~            				endif
2844   F776~            				endif
2844   F776             
2844   F77A             
2844   F77A~            				endif
2844   F77A~            				endif
2844   F77A             
2845   F77A AD 00       				jsr	$00,X					;JSR to Game ROM/bell?
2846   F77C             			endif
2846   F77C             
2846   F77C             
2846   F77C             
2846   F77C             
2846   F77C             
2846   F77C~            			endif
2846   F77C~            			endif
2846   F77C             
2846   F77C~            			endif
2846   F77C~            			endif
2846   F77C             
2846   F768             
2846   F768 13          
2846   F769             
2846   F769             
2846   F769~            			endif
2846   F769~            			endif
2846   F769~            			endif
2846   F769             
2846   F77C             
2846   F77C~            			endif
2846   F77C~            			endif
2846   F77C             
2847   F77C 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
2848   F77F             
2849   F77F             ;*************************************************
2850   F77F             ;* Some utility routines for getting data from
2851   F77F             ;* the CMOS RAM areas.
2852   F77F             ;*************************************************
2853   F77F 36          ptrx_plus_1		psha	
2854   F780 86 01       			ldaa	#$01
2855   F782 20 01       			bra	ptrx_plus
2856   F784 36          ptrx_plus_a		psha	
2857   F785 37          ptrx_plus		pshb	
2858   F786 DF 9A       			stx	temp1
2859   F788 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
2860   F78B 37          			pshb	
2861   F78C BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
2862   F78F 1B          			aba	
2863   F790 19          			daa	
2864   F791 16          			tab	
2865   F792 32          			pula	
2866   F793 89 00       			adca	#$00
2867   F795 19          			daa	
2868   F796 DE 9A       			ldx	temp1
2869   F798 BD EF AF    			jsr	a_cmosinc				;A -> CMOS,X++
2870   F79B BD EF 69    			jsr	b_cmosinc				;B -> CMOS,X++
2871   F79E DE 9A       			ldx	temp1
2872   F7A0 20 BA       			bra	pull_ba_rts				;pula, pulb, rts.
2873   F7A2             			
2874   F7A2             ;*********************************************************************************
2875   F7A2             ;* Main Coin Switch Routine - Called from each coin switch in the Switch Table.
2876   F7A2             ;*                            This takes care of all bonus coins, multipliers,etc.
2877   F7A2             ;*********************************************************************************
2878   F7A2             coin_accepted	
2879   F7A2             			;Starts with Macros
2880   F7A2 90 03       			.db $90,$03 	;MJSR $F7A7
2881   F7A4 7E EA 67    			.db $7E,$EA,$67  	;Push $EA67 into Control Loop with delay of #0E
2882   F7A7             			PRI_($0E) 		;Set this loops priority to #0E
2882   F7A7 52 0E       
2883   F7A9             			SLEEP_($20) 	;Delay $20
2883   F7A9~            			SLEEP_($20) 	;Delay $20
2883   F7A9~            			SLEEP_($20) 	;Delay $20
2883   F7A9             
2883   F7A9 53 20       
2883   F7AB             
2884   F7AB             			CPUX_			;Resume CPU execution
2884   F7AB 04          
2885   F7AC             			
2886   F7AC 43          			coma 
2887   F7AD 8B 06       			adda	#$06
2888   F7AF 48          			asla 
2889   F7B0 16          			tab  					;A is 0,2,4  
2890   F7B1 58          			aslb 					;B is 0,4,8
2891   F7B2 CE 01 02    			ldx  	#aud_leftcoins		;AUD: Coins Left/Center/Right Chute Base for counter
2892   F7B5 BD EF 4D    			jsr  	xplusb			;Adjust Pointer
2893   F7B8 BD F7 7F    			jsr  	ptrx_plus_1   		;Add 1 click to the counter
2894   F7BB CE 01 AF    			ldx  	#cmos_pricingbase		;AUD: Coin Slot Multiplier Base
2895   F7BE BD EE FF    			jsr  	xplusa   			;Adjust Pointer
2896   F7C1 BD EF 63    			jsr  	cmosinc_b    		;Get Multiplier into B
2897   F7C4 8D 6E       			bsr  	dec2hex    			;Make it hex
2898   F7C6 CE 01 62    			ldx  	#cmos_bonusunits	
2899   F7C9 8D 44       			bsr  	cmos_a_plus_b_cmos    	;Load Previous Coin Count, Add B, Save it in CMOS++
2900   F7CB 8D 42       			bsr  	cmos_a_plus_b_cmos    	;Load A with CMOS $0164, add B, Save in CMOS++
2901   F7CD CE 01 B9    			ldx  	#cmos_minimumcoins	;ADJ: Minimum Coin Units
2902   F7D0 BD EF 63    			jsr  	cmosinc_b    		;Get Minimum Coin Amount into B
2903   F7D3 11          			cba  
2904   F7D4             			ifcc					;Have we met inserted minimum coins?
2904   F7D4             
2904   F7D4 25 FE       
2905   F7D6             									;Yes!
2906   F7D6 CE 01 B5    				ldx  	#cmos_coinsforcredit	;ADJ: Coin Units required for Credit
2907   F7D9 BD EF 63    				jsr  	cmosinc_b    		;Get Value
2908   F7DC 8D 56       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
2909   F7DE 8D 36       				bsr  	divide_ab
2910   F7E0 97 9A       				staa  temp1
2911   F7E2 CE 01 64    				ldx  	#cmos_coinunits		;Save remainder coin units for next time
2912   F7E5 BD EF 69    				jsr  	b_cmosinc   		;( B -> CMOS,X++)
2913   F7E8 CE 01 B7    				ldx  	#cmos_bonuscoins		;ADJ: Coin Unit Bonus Point
2914   F7EB BD EF 63    				jsr  	cmosinc_b    		;( CMOS,X++ -> B )
2915   F7EE CE 01 62    				ldx  	#cmos_bonusunits	
2916   F7F1 BD EF 53    				jsr  	cmosinc_a 			;( CMOS,X++ -> A )
2917   F7F4 8D 3E       				bsr  	dec2hex    			;Convert Decimal(B) to Hex(B)
2918   F7F6 8D 1E       				bsr  	divide_ab
2919   F7F8 4D          				tsta 
2920   F7F9             				ifne
2920   F7F9             
2920   F7F9 27 FE       
2921   F7FB 8D 2C       					bsr	clr_bonus_coins
2922   F7FD             				endif
2922   F7FD             
2922   F7FD             
2922   F7FD             
2922   F7FD             
2922   F7FD             
2922   F7FD~            				endif
2922   F7FD~            				endif
2922   F7FD             
2922   F7FD~            				endif
2922   F7FD~            				endif
2922   F7FD             
2922   F7FA             
2922   F7FA 02          
2922   F7FB             
2922   F7FB             
2922   F7FB~            				endif
2922   F7FB~            				endif
2922   F7FB~            				endif
2922   F7FB             
2922   F7FD             
2922   F7FD~            				endif
2922   F7FD~            				endif
2922   F7FD             
2923   F7FD 9B 9A       				adda 	temp1
2924   F7FF 19          				daa  
2925   F800 CE 01 0E    				ldx  	#aud_paidcredits		;AUD: Total Paid Credits
2926   F803 BD F7 84    				jsr  	ptrx_plus_a    		;Add A to data at X:
2927   F806 7E F6 FE    				jmp  	addcredits    		;Add Credits if Possible
2928   F809             			endif
2928   F809             
2928   F809             
2928   F809             
2928   F809             
2928   F809             
2928   F809~            			endif
2928   F809~            			endif
2928   F809             
2928   F809~            			endif
2928   F809~            			endif
2928   F809             
2928   F7D5             
2928   F7D5 33          
2928   F7D6             
2928   F7D6             
2928   F7D6~            			endif
2928   F7D6~            			endif
2928   F7D6~            			endif
2928   F7D6             
2928   F809             
2928   F809~            			endif
2928   F809~            			endif
2928   F809             
2929   F809 B6 E0 5E    			ldaa 	gr_creditsound		;Game ROM Data: Credit Sound
2930   F80C 7E EC FC    			jmp  	isnd_once			;Play Sound Index(A) Once
2931   F80F             
2932   F80F             ;*********************************************************
2933   F80F             ;* Load A with value in X, Add B, Save to CMOS and 
2934   F80F             ;* post increment
2935   F80F             ;*********************************************************
2936   F80F             cmos_a_plus_b_cmos	
2937   F80F BD FE 1F    			jsr	cmos_a			;CMOS, X -> A 
2938   F812 1B          			aba	
2939   F813 7E EF AF    			jmp	a_cmosinc			;A -> CMOS,X++
2940   F816             			
2941   F816             ;********************************************************
2942   F816             ;* Divides A by B, returns result in A and remainder in
2943   F816             ;* B. Input values are in Hex and not decimal.
2944   F816             ;********************************************************			
2945   F816 D7 9D       divide_ab		stab	temp2+1
2946   F818             			ifne
2946   F818             
2946   F818 27 FE       
2947   F81A 16          				tab	
2948   F81B 86 99       				ldaa	#$99	
2949   F81D             				begin
2949   F81D             
2950   F81D 8B 01       					adda	#$01
2951   F81F 19          					daa	
2952   F820 D0 9D       					subb	temp2+1
2953   F822             				csend
2953   F822             
2953   F822             
2953   F822~            				csend
2953   F822~            				csend
2953   F822~            				csend
2953   F822             
2953   F822 24 F9       
2953   F824             
2953   F824~            				csend
2953   F824~            				csend
2953   F824             
2954   F824 DB 9D       				addb	temp2+1
2955   F826 39          				rts	
2956   F827             			endif
2956   F827             
2956   F827             
2956   F827             
2956   F827             
2956   F827             
2956   F827~            			endif
2956   F827~            			endif
2956   F827             
2956   F827~            			endif
2956   F827~            			endif
2956   F827             
2956   F819             
2956   F819 0D          
2956   F81A             
2956   F81A             
2956   F81A~            			endif
2956   F81A~            			endif
2956   F81A~            			endif
2956   F81A             
2956   F827             
2956   F827~            			endif
2956   F827~            			endif
2956   F827             
2957   F827 17          			tba	
2958   F828 39          			rts	
2959   F829             
2960   F829             ;********************************************************
2961   F829             ;* Cleans out any half credits and bonus coins
2962   F829             ;********************************************************			
2963   F829 CE 00 00    clr_bonus_coins	ldx	#0000
2964   F82C FF 01 64    			stx	cmos_coinunits
2965   F82F FF 01 62    			stx	cmos_bonusunits
2966   F832 39          			rts	
2967   F833             
2968   F833             ;********************************************************
2969   F833             ;* System Checksum #3: Set to make ROM csum from
2970   F833             ;*                     $F800-$FFFF equal to $00
2971   F833             ;********************************************************
2972   F833 42          csum3			.db $42
2973   F834             
2974   F834             ;********************************************************
2975   F834             ;* Convert 2 digit decimal value into a hex number
2976   F834             ;*
2977   F834             ;* Requires:	Decimal Number in B
2978   F834             ;* Protects:	A
2979   F834             ;* Destroys:	
2980   F834             ;* Output:		Hex Number in B
2981   F834             ;********************************************************
2982   F834 36          dec2hex		psha	
2983   F835 17          			tba	
2984   F836 5F          			clrb	
2985   F837             			begin
2985   F837             
2986   F837 4D          				tsta	
2987   F838 27 5E       				beq	to_pula_rts		;done
2988   F83A 8B 99       				adda	#$99
2989   F83C 19          				daa	
2990   F83D 5C          				incb	
2991   F83E             			loopend			;Loop forever
2991   F83E             
2991   F83E             
2991   F83E~            			loopend			;Loop forever
2991   F83E~            			loopend			;Loop forever
2991   F83E~            			loopend			;Loop forever
2991   F83E             
2991   F83E 20 F7       
2991   F840             
2991   F840~            			loopend			;Loop forever
2991   F840~            			loopend			;Loop forever
2991   F840             
2992   F840             
2993   F840             ;*********************************************************
2994   F840             ;* Stores A from X to X+B
2995   F840             ;* 
2996   F840             ;* Requires:	A,B,X
2997   F840             ;* Destroys:	B
2998   F840             ;********************************************************			
2999   F840             write_range		
3000   F840             			begin
3000   F840             
3001   F840 A7 00       				staa	$00,X
3002   F842 08          				inx	
3003   F843 5A          				decb	
3004   F844             			eqend
3004   F844             
3004   F844             
3004   F844~            			eqend
3004   F844~            			eqend
3004   F844~            			eqend
3004   F844             
3004   F844 26 FA       
3004   F846             
3004   F846~            			eqend
3004   F846~            			eqend
3004   F846             
3005   F846 39          			rts	
3006   F847             
3007   F847             ;*********************************************************
3008   F847             ;* Initialzes a new game.
3009   F847             ;*********************************************************			
3010   F847 FE E0 B9    do_game_init	ldx	gr_game_hook_ptr			;Game Start Hook
3011   F84A AD 00       			jsr	$00,X					;JSR to Game ROM Hook
3012   F84C BD F9 94    			jsr	dump_score_queue			;Clean the score queue
3013   F84F 8D 49       			bsr	clear_displays			;Blank all Player Displays (buffer 0)
3014   F851 8D 25       			bsr	initialize_game			;Remove one Credit, init some game variables
3015   F853 8D 03       			bsr	add_player				;Add one Player
3016   F855 7E F8 D2    			jmp	init_player_up
3017   F858             		
3018   F858             ;****************************************************
3019   F858             ;* Add Player: Increments player count and loads    
3020   F858             ;*             default game data for that player.  
3021   F858             ;*             Plays start sound and inits display.
3022   F858             ;*
3023   F858             ;* Requires:   No Variables
3024   F858             ;****************************************************			
3025   F858 BD E0 AD    add_player		jsr	gr_addplayer_event		;(RTS)
3026   F85B 7C 00 CC    			inc	num_players				;Add One Player
3027   F85E D6 CC       			ldab	num_players
3028   F860 8D 4B       			bsr	init_player_game			;Put the Default(game start) data into Current Players Game Data Buffer
3029   F862 CE E0 57    			ldx	#gr_p1_startsound			;Game ROM Table: Player Start Sounds
3030   F865 BD EF 4D    			jsr	xplusb				;X = X + B)
3031   F868 A6 00       			ldaa	$00,X
3032   F86A BD EC FC    			jsr	isnd_once				;Play Player Start Sound From Game ROM Table
3033   F86D 58          			aslb	
3034   F86E 58          			aslb	
3035   F86F CE 00 38    			ldx	#score_p1_b0
3036   F872 BD EF 4D    			jsr	xplusb				;X = X + B)
3037   F875 6F 03       			clr	$03,X				;Put in "00" onto new player display
3038   F877 39          			rts	
3039   F878             
3040   F878             ;****************************************************	
3041   F878             ;* Sets up all gameplay variables for a new game.
3042   F878             ;****************************************************		
3043   F878 4F          initialize_game	clra	
3044   F879 97 D6       			staa	flag_timer_bip			;Ball in Play Flag
3045   F87B 97 D0       			staa	num_eb				;Number of Extra Balls Remaining
3046   F87D 97 CD       			staa	player_up				;Current Player Up (0-3)
3047   F87F 97 C9       			staa	flag_gameover			;Game Play On
3048   F881 97 60       			staa	comma_flags
3049   F883 C6 08       			ldab	#$08
3050   F885 BD EA FB    			jsr	kill_threads
3051   F888 4A          			deca	
3052   F889 97 CC       			staa	num_players				;Subtract one Credit
3053   F88B 86 F1       			ldaa	#$F1
3054   F88D 97 58       			staa	mbip_b0				;Set Display to Ball 1
3055   F88F C6 0C       			ldab	#$0C
3056   F891 CE 00 1C    			ldx	#$001C				;Clear RAM $001C-0027
3057   F894 36          clear_range		psha	
3058   F895 4F          			clra	
3059   F896 8D A8       			bsr	write_range				;Store A from X to X+B
3060   F898 32          to_pula_rts		pula	
3061   F899 39          			rts	
3062   F89A             
3063   F89A             ;******************************************************
3064   F89A             ;* Resets all player display scores to Blank 'FFFFFFFF'
3065   F89A             ;******************************************************			
3066   F89A 86 FF       clear_displays	ldaa	#$FF
3067   F89C C6 10       			ldab	#$10
3068   F89E CE 00 38    			ldx	#score_p1_b0
3069   F8A1 8D 9D       			bsr	write_range				;Store A from X to X+B
3070   F8A3 4F          			clra	
3071   F8A4             			
3072   F8A4             store_display_mask	
3073   F8A4 97 5C       			staa	dmask_p1				;These are the Display Buffer Toggles
3074   F8A6 97 5D       			staa	dmask_p2
3075   F8A8 97 5E       			staa	dmask_p3
3076   F8AA 97 5F       			staa	dmask_p4
3077   F8AC 39          			rts	
3078   F8AD             
3079   F8AD             ;**********************************************************
3080   F8AD             ;* Loads the default game data into the player number 
3081   F8AD             ;* passed in B.
3082   F8AD             ;*
3083   F8AD             ;* Requires:    	Player Number to init in B
3084   F8AD             ;* Destroys:    	X
3085   F8AD             ;* Protects:	A,B
3086   F8AD             ;**********************************************************			
3087   F8AD 36          init_player_game	psha	
3088   F8AE 37          			pshb	
3089   F8AF 8D 0B       			bsr	setplayerbuffer			;Set up the Pointer to the Players Buffer
3090   F8B1 8D 15       			bsr	copyplayerdata			;Copy Default Player Data into Player Buffer (X)
3091   F8B3 DE 9A       			ldx	temp1
3092   F8B5 C6 06       			ldab	#$06
3093   F8B7 8D DB       			bsr	clear_range				;Clear Remaining Part of Player Game Data Buffer
3094   F8B9 33          			pulb	
3095   F8BA 32          			pula	
3096   F8BB 39          			rts	
3097   F8BC             
3098   F8BC             ;**********************************************************
3099   F8BC             ;* Will set up X to point at the start of the player 
3100   F8BC             ;* specified in B.
3101   F8BC             ;*
3102   F8BC             ;* Requires:   	Player Number in B
3103   F8BC             ;* Destroys:	A,B
3104   F8BC             ;* Protects:	None
3105   F8BC             ;* Output:		X
3106   F8BC             ;**********************************************************			
3107   F8BC 86 1A       setplayerbuffer	ldaa	#$1A		;Length of Player Buffer
3108   F8BE CE 11 26    			ldx	#$1126	;Player 1 base
3109   F8C1             			begin
3109   F8C1             
3110   F8C1 BD EE FF    				jsr	xplusa	;X = X + A
3111   F8C4 5A          				decb	
3112   F8C5             			miend
3112   F8C5             
3112   F8C5             
3112   F8C5~            			miend
3112   F8C5~            			miend
3112   F8C5~            			miend
3112   F8C5             
3112   F8C5 2A FA       
3112   F8C7             
3112   F8C7~            			miend
3112   F8C7~            			miend
3112   F8C7             
3113   F8C7 39          			rts	
3114   F8C8             
3115   F8C8             ;***********************************************************
3116   F8C8             ;* Copies Player default data from game ROM to the player 
3117   F8C8             ;* buffer specified by X.
3118   F8C8             ;*
3119   F8C8             ;* Requires: Player Buffer to Fill in X
3120   F8C8             ;***********************************************************			
3121   F8C8 DF 9A       copyplayerdata	stx	temp1
3122   F8CA CE E0 77    			ldx	#gr_playerstartdata		;*** Table Pointer ***
3123   F8CD C6 14       			ldab	#$14
3124   F8CF 7E EF BC    			jmp	copyblock				;Copy Block: X -> temp1 B=Length
3125   F8D2             
3126   F8D2             ;***********************************************************
3127   F8D2             ;			
3128   F8D2 8D 5F       init_player_up	bsr	init_player_sys			;Initialize System for New Player Up
3129   F8D4 D6 CD       			ldab	player_up				;Current Player Up (0-3)
3130   F8D6 8D 7A       			bsr	resetplayerdata			;Reset Player Game Data:
3131   F8D8 FE E0 BB    			ldx	gr_player_hook_ptr		;Game ROM hook Location
3132   F8DB AD 00       			jsr	$00,X					;JSR to Game ROM
3133   F8DD             			;This following loop makes the current players
3134   F8DD             			;score flash until any score is made.
3135   F8DD             			begin
3135   F8DD             
3136   F8DD BD EA 2F    player_ready		jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3137   F8E0 05          				.db 	$05
3138   F8E1 8D 36       				bsr	disp_mask				;Get Active Player Display Toggle Data
3139   F8E3 43          				coma	
3140   F8E4 94 60       				anda	comma_flags
3141   F8E6 97 60       				staa	comma_flags
3142   F8E8 8D 3C       				bsr	disp_clear				;Blank Current Player Score Display (Buffer 1)
3143   F8EA DE B1       				ldx	current_thread			;Current VM Routine being run
3144   F8EC 86 07       				ldaa	#$07
3145   F8EE A7 0D       				staa	threadobj_id,X			;Set thread ID
3146   F8F0 CE 00 5C    				ldx	#dmask_p1				;Start of Display Toggles
3147   F8F3 BD EF 4D    				jsr	xplusb				;X = X + B
3148   F8F6 A6 00       				ldaa	$00,X
3149   F8F8 8A 7F       				oraa	#$7F
3150   F8FA A7 00       				staa	$00,X
3151   F8FC BD EA 2F    				jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3152   F8FF 05          				.db	$05
3153   F900 BD E0 AB    				jsr	gr_ready_event			;Game ROM Hook
3154   F903 A6 00       				ldaa	$00,X
3155   F905 84 80       				anda	#$80
3156   F907 A7 00       				staa	$00,X
3157   F909 BD EB A1    				jsr	update_commas			;Update Master Display Toggle From Current Player
3158   F90C DE B1       				ldx	current_thread			;Current VM Routine being run
3159   F90E 86 04       				ldaa	#$04
3160   F910 A7 0D       				staa	threadobj_id,X
3161   F912 96 D6       				ldaa	flag_timer_bip			;Ball in Play Flag
3162   F914             			neend					
3162   F914             
3162   F914             
3162   F914~            			neend					
3162   F914~            			neend					
3162   F914~            			neend					
3162   F914             
3162   F914 27 C7       
3162   F916             
3162   F916~            			neend					
3162   F916~            			neend					
3162   F916             
3163   F916 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
3164   F919             			
3165   F919 D6 CD       disp_mask		ldab	player_up				;Current Player Up (0-3)
3166   F91B CE EB 99    			ldx	#comma_million			;Comma Tables
3167   F91E BD EF 4D    			jsr	xplusb				;X = X + B)
3168   F921 A6 00       			ldaa	$00,X					;comma_million: 40 04 80 08
3169   F923 AA 04       			oraa	$04,X					;comma_thousand: 10 01 20 02
3170   F925 39          			rts	
3171   F926             			
3172   F926 DE CE       disp_clear		ldx	pscore_buf				;Start of Current Player Score Buffer
3173   F928 86 FF       			ldaa	#$FF
3174   F92A A7 10       			staa	lampbuffer0,X
3175   F92C A7 11       			staa	$11,X
3176   F92E A7 12       			staa	$12,X
3177   F930 A7 13       			staa	$13,X
3178   F932 39          			rts	
3179   F933             
3180   F933             ;********************************************************
3181   F933             ;* Initializes new player. Clears tilt counter, reset 
3182   F933             ;* bonus ball enable, enables flippers, Loads Plater 
3183   F933             ;* score buffer pointer.
3184   F933             ;********************************************************			
3185   F933 96 61       init_player_sys	ldaa	switch_debounced
3186   F935 84 FC       			anda	#$FC
3187   F937 97 61       			staa	switch_debounced				;Blank the Tilt Lines?
3188   F939 4F          			clra	
3189   F93A 97 C8       			staa	flag_tilt				;Clear Tilt Flag
3190   F93C 97 D3       			staa	num_tilt				;Clear Plumb Bob Tilts
3191   F93E 97 CA       			staa	flag_bonusball			;Enable Bonus Ball
3192   F940 86 18       			ldaa	#$18
3193   F942 BD EB 23    			jsr	solbuf				;Turn on Solenoid $18 (Flipper Enable?)
3194   F945 96 CD       			ldaa	player_up				;Current Player Up (0-3)
3195   F947 48          			asla	
3196   F948 48          			asla	
3197   F949 CE 00 38    			ldx	#score_p1_b0
3198   F94C BD EE FF    			jsr	xplusa				;X= P1:0038 P2:003C P3:0040 P4:0044
3199   F94F DF CE       			stx	pscore_buf				;Pointer to Start of Score Buffer 0
3200   F951 39          			rts	
3201   F952             
3202   F952             ;*********************************************************
3203   F952             ;* Applies Game ROM mask to player game data to reset 
3204   F952             ;* specific bits of data. Loads the flashing lamp data
3205   F952             ;* Resets Player game data at start of RAM.
3206   F952             ;*********************************************************	
3207   F952 CE 00 10    resetplayerdata	ldx	#lampbuffer0
3208   F955 DF 9A       			stx	temp1					;temp1 Points to Base of Lamp Matrix Data
3209   F957 BD F8 BC    			jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
3210   F95A DF 9C       			stx	temp2					;$9C Points to Base of Player Game Data Buffer
3211   F95C CE E0 77    			ldx	#gr_playerstartdata		;X points to base of default player data
3212   F95F             			begin
3212   F95F             
3213   F95F A6 14       				ldaa	$14,X					;Get Game Data Reset Data
3214   F961 16          				tab	
3215   F962 53          				comb	
3216   F963 E4 00       				andb	$00,X					;AND !B with Players Last Lamps
3217   F965 08          				inx	
3218   F966 DF 9E       				stx	temp3					;X points to base of default player data +1
3219   F968 DE 9C       				ldx	temp2					;Player Game Data Buffer
3220   F96A A4 00       				anda	$00,X
3221   F96C 08          				inx	
3222   F96D DF 9C       				stx	temp2
3223   F96F 1B          				aba	
3224   F970 DE 9A       				ldx	temp1
3225   F972 A7 00       				staa	$00,X
3226   F974 08          				inx	
3227   F975 8C 00 1C    				cpx	#lampbuffer0+$0C
3228   F978             				ifeq
3228   F978             
3228   F978 26 FE       
3229   F97A CE 00 30    					ldx	#lampflashflag
3230   F97D             				endif
3230   F97D             
3230   F97D             
3230   F97D             
3230   F97D             
3230   F97D             
3230   F97D~            				endif
3230   F97D~            				endif
3230   F97D             
3230   F97D~            				endif
3230   F97D~            				endif
3230   F97D             
3230   F979             
3230   F979 03          
3230   F97A             
3230   F97A             
3230   F97A~            				endif
3230   F97A~            				endif
3230   F97A~            				endif
3230   F97A             
3230   F97D             
3230   F97D~            				endif
3230   F97D~            				endif
3230   F97D             
3231   F97D DF 9A       				stx	temp1
3232   F97F DE 9E       				ldx	temp3
3233   F981 8C E0 8B    				cpx	#gr_playerresetdata		;End of Default Player Game Data
3234   F984             			eqend						;Loop it!
3234   F984             
3234   F984             
3234   F984~            			eqend						;Loop it!
3234   F984~            			eqend						;Loop it!
3234   F984~            			eqend						;Loop it!
3234   F984             
3234   F984 26 D9       
3234   F986             
3234   F986~            			eqend						;Loop it!
3234   F986~            			eqend						;Loop it!
3234   F986             
3235   F986 CE 00 02    			ldx	#$0002
3236   F989 DF 9A       			stx	temp1
3237   F98B DE 9C       			ldx	temp2
3238   F98D C6 06       			ldab	#$06
3239   F98F 8D 52       			bsr	to_copyblock			;Copy Data Block: Current Game Data 0-6 -> Player Game Data 0-6
3240   F991 7E F7 2C    			jmp	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
3241   F994             
3242   F994             ;*********************************************************************
3243   F994             ;* Scoring Queue: This will bring all scores up to date with current *
3244   F994             ;*                scores waiting to be applied.                      *
3245   F994             ;*********************************************************************			
3246   F994 CE 11 28    dump_score_queue	ldx	#score_queue
3247   F997 86 0F       			ldaa	#$0F
3248   F999             			begin
3248   F999             
3249   F999 E6 00       				ldab	$00,X
3250   F99B             				ifne
3250   F99B             
3250   F99B 27 FE       
3251   F99D             					begin
3251   F99D             
3252   F99D BD EC 05    						jsr	score_main				;Main Add Points Routine
3253   F9A0 6A 00       						dec	$00,X
3254   F9A2             					eqend
3254   F9A2             
3254   F9A2             
3254   F9A2~            					eqend
3254   F9A2~            					eqend
3254   F9A2~            					eqend
3254   F9A2             
3254   F9A2 26 F9       
3254   F9A4             
3254   F9A4~            					eqend
3254   F9A4~            					eqend
3254   F9A4             
3255   F9A4             				endif
3255   F9A4             
3255   F9A4             
3255   F9A4             
3255   F9A4             
3255   F9A4             
3255   F9A4~            				endif
3255   F9A4~            				endif
3255   F9A4             
3255   F9A4~            				endif
3255   F9A4~            				endif
3255   F9A4             
3255   F99C             
3255   F99C 07          
3255   F99D             
3255   F99D             
3255   F99D~            				endif
3255   F99D~            				endif
3255   F99D~            				endif
3255   F99D             
3255   F9A4             
3255   F9A4~            				endif
3255   F9A4~            				endif
3255   F9A4             
3256   F9A4 08          				inx	
3257   F9A5 4A          				deca	
3258   F9A6 85 08       				bita	#$08
3259   F9A8             			eqend
3259   F9A8             
3259   F9A8             
3259   F9A8~            			eqend
3259   F9A8~            			eqend
3259   F9A8~            			eqend
3259   F9A8             
3259   F9A8 26 EF       
3259   F9AA             
3259   F9AA~            			eqend
3259   F9AA~            			eqend
3259   F9AA             
3260   F9AA 39          			rts	
3261   F9AB             
3262   F9AB             ;*********************************************************************
3263   F9AB             ;* Main Outhole Routine: The outhole switch will jump here on closure
3264   F9AB             ;*********************************************************************			
3265   F9AB 8D E7       outhole_main	bsr	dump_score_queue			
3266   F9AD BD F3 AB    			jsr	macro_start				;Start Executing Macros
3267   F9B0             			
3268   F9B0 71          			.db $71          			;Delay 1
3269   F9B1 5AFE0101FA  			.db $5A,$FE,$01,$01,$FA 	;Branch if Priority #01 to $F9B0
3270   F9B6 55 0A 00    			.db $55,$0A,$00  			;Reset Threads Based on Priority #0A	
3271   F9B9             			CPUX_ 				;Resume CPU Execution
3271   F9B9 04          
3272   F9BA             
3273   F9BA FE E0 BD    			ldx  	gr_outhole_hook_ptr		;Game ROM: Pointer
3274   F9BD AD 00       			jsr  	$00,X  				;JSR to GameROM
3275   F9BF 7F 00 D6    			clr  	flag_timer_bip			;Ball in Play Flag (Stop Timer)
3276   F9C2 D6 CD       			ldab  player_up     			;Current Player Up (0-3)
3277   F9C4 8D 05       			bsr  	saveplayertobuffer    		;Save Player Data to Buffer
3278   F9C6 8D 1E       			bsr  	balladjust				;Do Outhole Processing (EB, Bonus Ball)
3279   F9C8 7E F8 D2    			jmp  	init_player_up			;Init New Player Up
3280   F9CB             
3281   F9CB             ;*********************************************************************
3282   F9CB             ;* Save Player Data: This will save lamp and game specific data to   
3283   F9CB             ;*                   the holding area so information can carrry from 
3284   F9CB             ;*                   ball to ball.            
3285   F9CB             ;*********************************************************************
3286   F9CB             saveplayertobuffer	
3287   F9CB BD F8 BC    			jsr	setplayerbuffer			;X=#1126+((B+1)*#1A))
3288   F9CE DF 9A       			stx	temp1
3289   F9D0 CE 00 10    			ldx	#lampbuffer0
3290   F9D3 C6 0C       			ldab	#$0C
3291   F9D5 8D 0C       			bsr	to_copyblock			;Save current lamp settings
3292   F9D7 CE 00 30    			ldx	#lampflashflag
3293   F9DA C6 08       			ldab	#$08
3294   F9DC 8D 05       			bsr	to_copyblock			;Save Flashing lamps too!
3295   F9DE CE 00 02    			ldx	#$0002
3296   F9E1 C6 06       			ldab	#$06
3297   F9E3 7E EF BC    to_copyblock	jmp	copyblock				;Finally, save player game data.
3298   F9E6             
3299   F9E6             ;*********************************************************************
3300   F9E6             ;* Ball Update: This will increment to next player if there is one   
3301   F9E6             ;*              or will increment to next ball. If we are on the last
3302   F9E6             ;*              ball then it jumps to the gameover handler.
3303   F9E6             ;*********************************************************************
3304   F9E6 96 CA       balladjust		ldaa	flag_bonusball			;Check the Bonus Ball Flag (00=free balls)
3305   F9E8             			ifne
3305   F9E8             
3305   F9E8 27 FE       
3306   F9EA CE 01 2A    				ldx	#aud_totalballs			;AUD: Total Balls Played
3307   F9ED BD F7 7F    				jsr	ptrx_plus_1				;Add 1 to data at X
3308   F9F0 96 D0       				ldaa	num_eb				;Number of Extra Balls Remaining
3309   F9F2             				ifeq
3309   F9F2             
3309   F9F2 26 FE       
3310   F9F4 96 CD       					ldaa	player_up				;Current Player Up (0-3)
3311   F9F6 91 CC       					cmpa	num_players				;Number of Players Playing
3312   F9F8 4C          					inca	
3313   F9F9             					ifcc
3313   F9F9             
3313   F9F9 25 FE       
3314   F9FB B6 01 94    						ldaa	adj_numberofballs+1		;ADJ: LSD Balls per game
3315   F9FE 98 58       						eora	mbip_b0
3316   FA00 84 0F       						anda	#$0F
3317   FA02 27 1A       						beq	gameover				;End of Game
3318   FA04 7C 00 58    						inc	mbip_b0				;Increment Ball #
3319   FA07 4F          						clra	
3320   FA08             					endif
3320   FA08             
3320   FA08             
3320   FA08             
3320   FA08             
3320   FA08             
3320   FA08~            					endif
3320   FA08~            					endif
3320   FA08             
3320   FA08~            					endif
3320   FA08~            					endif
3320   FA08             
3320   F9FA             
3320   F9FA 0D          
3320   F9FB             
3320   F9FB             
3320   F9FB~            					endif
3320   F9FB~            					endif
3320   F9FB~            					endif
3320   F9FB             
3320   FA08             
3320   FA08~            					endif
3320   FA08~            					endif
3320   FA08             
3321   FA08 97 CD       					staa	player_up				;Current Player Up (0-3)
3322   FA0A             				endif
3322   FA0A             
3322   FA0A             
3322   FA0A             
3322   FA0A             
3322   FA0A             
3322   FA0A~            				endif
3322   FA0A~            				endif
3322   FA0A             
3322   FA0A~            				endif
3322   FA0A~            				endif
3322   FA0A             
3322   F9F3             
3322   F9F3 16          
3322   F9F4             
3322   F9F4             
3322   F9F4~            				endif
3322   F9F4~            				endif
3322   F9F4~            				endif
3322   F9F4             
3322   FA0A             
3322   FA0A~            				endif
3322   FA0A~            				endif
3322   FA0A             
3323   FA0A             			endif
3323   FA0A             
3323   FA0A             
3323   FA0A             
3323   FA0A             
3323   FA0A             
3323   FA0A~            			endif
3323   FA0A~            			endif
3323   FA0A             
3323   FA0A~            			endif
3323   FA0A~            			endif
3323   FA0A             
3323   F9E9             
3323   F9E9 20          
3323   F9EA             
3323   F9EA             
3323   F9EA~            			endif
3323   F9EA~            			endif
3323   F9EA~            			endif
3323   F9EA             
3323   FA0A             
3323   FA0A~            			endif
3323   FA0A~            			endif
3323   FA0A             
3324   FA0A 39          			rts	
3325   FA0B             
3326   FA0B CE 00 48    show_hstd		ldx	#score_p1_b1				;Score Buffer 1 Base Index
3327   FA0E DF 9A       			stx	temp1
3328   FA10 86 04       			ldaa	#$04
3329   FA12             			begin
3329   FA12             
3330   FA12 C6 04       				ldab	#$04
3331   FA14 CE 01 66    				ldx	#aud_currenthstd				;CMOS: Current HSTD
3332   FA17 BD FF D1    				jsr	block_copy					;Copy Block from X -> temp1, Length = B
3333   FA1A 4A          				deca
3334   FA1B             			eqend
3334   FA1B             
3334   FA1B             
3334   FA1B~            			eqend
3334   FA1B~            			eqend
3334   FA1B~            			eqend
3334   FA1B             
3334   FA1B 26 F5       
3334   FA1D             
3334   FA1D~            			eqend
3334   FA1D~            			eqend
3334   FA1D             
3335   FA1D 39          			rts
3336   FA1E             
3337   FA1E             ;*********************************************************************
3338   FA1E             ;* Game Over Handler: This will do the basic events run at gameover.
3339   FA1E             ;*                    CheckHSTD and Match.
3340   FA1E             ;*********************************************************************				
3341   FA1E BD E0 AF    gameover		jsr	gr_gameover_event
3342   FA21 CE 00 30    			ldx	#lampflashflag
3343   FA24 C6 08       			ldab	#$08
3344   FA26 BD F8 94    			jsr	clear_range				;Clear RAM $30-37 (Lamp Inverts)
3345   FA29 8D 67       			bsr	check_hstd				;Check HSTD
3346   FA2B BD FB 39    			jsr	do_match				;Match Routine
3347   FA2E B6 E0 5D    			ldaa	gr_gameoversound			;Game ROM: Game Over Sound
3348   FA31 BD EC FC    			jsr	isnd_once				;Play Sound Index(A) Once
3349   FA34 B6 E0 65    powerup_init	ldaa	gr_gameover_lamp			;Game ROM: Game Over Lamp Location
3350   FA37 F6 E0 64    			ldab	gr_bip_lamp				;Game ROM: Ball in Play Lamp Location
3351   FA3A BD F3 AB    			jsr	macro_start				;Start Macro Execution
3352   FA3D             			
3353   FA3D             			SOL_($F8)				;Turn Off Solenoid: Flippers Disabled
3353   FA3D 31 F8       
3354   FA3F 17 00       			.db $17,$00 			;Flash Lamp: Lamp Locatation at RAM $00
3355   FA41 15 01       			.db $15,$01 			;Turn off Lamp: Lamp Location is at RAM $01
3356   FA43             			CPUX_ 				;Resume CPU execution
3356   FA43 04          
3357   FA44             
3358   FA44 7C 00 C9    set_gameover	inc	flag_gameover			;Set Game Over
3359   FA47 FE E0 67    			ldx	gr_gameoverthread_ptr		;Game ROM: Init Pointer
3360   FA4A BD EA C4    			jsr	newthread_06			;Push VM: Data in A,B,X,$A6,$A7,$AA=#06
3361   FA4D CE 01 81    			ldx	#adj_backuphstd			;CMOS: Backup HSTD
3362   FA50 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3363   FA53 26 03       			bne	show_all_scores			;If there is a HSTD, Show it now.
3364   FA55 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
3365   FA58             			
3366   FA58             show_all_scores	begin
3366   FA58             
3367   FA58 4F          				clra
3368   FA59 BD F8 A4    				jsr	store_display_mask		;A -> Display Buffer Toggle )
3369   FA5C B6 E0 62    				ldaa	gr_hs_lamp				;Game ROM: High Score Lamp Location
3370   FA5F BD F1 5B    				jsr	lamp_off				;Turn off Lamp A (encoded):
3371   FA62 BD EA 2F    				jsr	addthread				;Delay Thread
3372   FA65 90          				.db	$90
3373   FA66 8D A3       				bsr  	show_hstd   			;Puts HSTD in All Player Displays(Buffer 1) 
3374   FA68 D6 60       				ldab  comma_flags
3375   FA6A 43          				coma 
3376   FA6B 7D 00 48    				tst  	score_p1_b1
3377   FA6E             				ifeq
3377   FA6E             
3377   FA6E 26 FE       
3378   FA70 97 48       					staa  score_p1_b1
3379   FA72 97 4C       					staa  score_p2_b1
3380   FA74 97 50       					staa  score_p3_b1
3381   FA76 97 54       					staa  score_p4_b1
3382   FA78 86 33       					ldaa  #$33
3383   FA7A             				endif
3383   FA7A             
3383   FA7A             
3383   FA7A             
3383   FA7A             
3383   FA7A             
3383   FA7A~            				endif
3383   FA7A~            				endif
3383   FA7A             
3383   FA7A~            				endif
3383   FA7A~            				endif
3383   FA7A             
3383   FA6F             
3383   FA6F 0A          
3383   FA70             
3383   FA70             
3383   FA70~            				endif
3383   FA70~            				endif
3383   FA70~            				endif
3383   FA70             
3383   FA7A             
3383   FA7A~            				endif
3383   FA7A~            				endif
3383   FA7A             
3384   FA7A 97 60       				staa 	comma_flags
3385   FA7C 86 7F       				ldaa 	#$7F
3386   FA7E BD F8 A4    				jsr  	store_display_mask				
3387   FA81 B6 E0 62    				ldaa 	gr_hs_lamp				;Game ROM: High Score Lamp Location
3388   FA84 BD F1 69    				jsr  	lamp_flash				;Flash Lamp A(encoded)
3389   FA87 BD EA 2F    				jsr  	addthread   			;Delay Thread
3390   FA8A 70          				.db 	$70
3391   FA8B BD E0 B1    				jsr	gr_hstdtoggle_event		;Check the hook
3392   FA8E D7 60       				stab  comma_flags
3393   FA90             			loopend
3393   FA90             
3393   FA90             
3393   FA90~            			loopend
3393   FA90~            			loopend
3393   FA90~            			loopend
3393   FA90             
3393   FA90 20 C6       
3393   FA92             
3393   FA92~            			loopend
3393   FA92~            			loopend
3393   FA92             
3394   FA92             
3395   FA92             ;************************************************************************
3396   FA92             ;* High Score Check Routine: Will iterate through each player to see if
3397   FA92             ;*                           they beat the high score.
3398   FA92             ;************************************************************************
3399   FA92 CE 01 81    check_hstd		ldx	#adj_backuphstd			;CMOS: Backup HSTD
3400   FA95 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3401   FA98             			ifne						;No award if backup HSTD is 0,000,000
3401   FA98             
3401   FA98 27 FE       
3402   FA9A 7F 00 A1    				clr	sys_temp2
3403   FA9D C6 04       				ldab	#$04
3404   FA9F D7 A0       				stab	sys_temp1
3405   FAA1 CE 00 35    				ldx	#score_p1_b0-3			;Start High and work down low on the digits
3406   FAA4 DF A4       				stx	sys_temp5
3407   FAA6             				begin
3407   FAA6             
3408   FAA6 C6 04       					ldab	#$04
3409   FAA8 D7 A8       					stab	sys_temp_w3				;Number of score Bytes Per Player
3410   FAAA CE 01 66    					ldx	#aud_currenthstd			;CMOS: Current HSTD
3411   FAAD             					begin
3411   FAAD             
3412   FAAD BD EF 63    						jsr	cmosinc_b				;CMOS,X++ -> B
3413   FAB0 DF A6       						stx	sys_temp_w2
3414   FAB2 DE A4       						ldx	sys_temp5
3415   FAB4 BD EC 86    						jsr	score2hex				;Convert MSD Blanks to 0's on (X+03)
3416   FAB7 11          						cba	
3417   FAB8 22 3B       						bhi	update_hstd				;HSTD beat by this digit, adjust HSTD so we dont have multiple awards by each player beating HSTD.
3418   FABA 26 57       						bne	hstd_adddig				;$A4=$A4+$A8
3419   FABC 08          						inx						;Next Digit
3420   FABD DF A4       						stx	sys_temp5				;Store it
3421   FABF DE A6       						ldx	sys_temp_w2				;Next HSDT Digit (pointer)
3422   FAC1 7A 00 A8    						dec	sys_temp_w3				;Goto Next Set of Digits
3423   FAC4             					eqend						;Loop for all (4)2 digits
3423   FAC4             
3423   FAC4             
3423   FAC4~            					eqend						;Loop for all (4)2 digits
3423   FAC4~            					eqend						;Loop for all (4)2 digits
3423   FAC4~            					eqend						;Loop for all (4)2 digits
3423   FAC4             
3423   FAC4 26 E7       
3423   FAC6             
3423   FAC6~            					eqend						;Loop for all (4)2 digits
3423   FAC6~            					eqend						;Loop for all (4)2 digits
3423   FAC6             
3424   FAC6 7A 00 A0    hstd_nextp			dec	sys_temp1				;Goto Next Player
3425   FAC9             				eqend						;Loop for all 4 Players
3425   FAC9             
3425   FAC9             
3425   FAC9~            				eqend						;Loop for all 4 Players
3425   FAC9~            				eqend						;Loop for all 4 Players
3425   FAC9~            				eqend						;Loop for all 4 Players
3425   FAC9             
3425   FAC9 26 DB       
3425   FACB             
3425   FACB~            				eqend						;Loop for all 4 Players
3425   FACB~            				eqend						;Loop for all 4 Players
3425   FACB             
3426   FACB 96 A1       				ldaa	sys_temp2
3427   FACD             				ifne
3427   FACD             
3427   FACD 27 FE       
3428   FACF B6 E0 5C    					ldaa	gr_highscoresound			;Game ROM Data: High Score Sound
3429   FAD2 BD EC FC    					jsr	isnd_once				;Play Sound Index(A) Once
3430   FAD5 8D 59       					bsr	send_sound					;time delay
3431   FAD7 CE 01 A7    set_hstd				ldx	#adj_hstdcredits			;Adjustment: HSTD Award
3432   FADA BD EF 53    					jsr	cmosinc_a				;CMOS,X++ -> A
3433   FADD CE 01 4E    					ldx	#aud_hstdcredits			;Audit: HSTD Credits Awarded
3434   FAE0 BD F7 84    					jsr	ptrx_plus_a				;Add A to data at X:
3435   FAE3 BD F6 FE    					jsr	addcredits				;Add Credits if Possible
3436   FAE6 B6 01 66    					ldaa	aud_currenthstd			;HSTD High Digit
3437   FAE9 84 0F       					anda	#$0F
3438   FAEB             					ifne					;Branch if Score is under 10 million
3438   FAEB             
3438   FAEB 27 FE       
3439   FAED 86 99       						ldaa	#$99
3440   FAEF 8D 33       						bsr	fill_hstd_digits			;Set HSTD to 9,999,999
3441   FAF1 7F 01 66    						clr	aud_currenthstd			;Clear 10 Million Digit
3442   FAF4             					endif
3442   FAF4             
3442   FAF4             
3442   FAF4             
3442   FAF4             
3442   FAF4             
3442   FAF4~            					endif
3442   FAF4~            					endif
3442   FAF4             
3442   FAF4~            					endif
3442   FAF4~            					endif
3442   FAF4             
3442   FAEC             
3442   FAEC 07          
3442   FAED             
3442   FAED             
3442   FAED~            					endif
3442   FAED~            					endif
3442   FAED~            					endif
3442   FAED             
3442   FAF4             
3442   FAF4~            					endif
3442   FAF4~            					endif
3442   FAF4             
3443   FAF4             				endif
3443   FAF4             
3443   FAF4             
3443   FAF4             
3443   FAF4             
3443   FAF4             
3443   FAF4~            				endif
3443   FAF4~            				endif
3443   FAF4             
3443   FAF4~            				endif
3443   FAF4~            				endif
3443   FAF4             
3443   FACE             
3443   FACE 25          
3443   FACF             
3443   FACF             
3443   FACF~            				endif
3443   FACF~            				endif
3443   FACF~            				endif
3443   FACF             
3443   FAF4             
3443   FAF4~            				endif
3443   FAF4~            				endif
3443   FAF4             
3444   FAF4             			endif
3444   FAF4             
3444   FAF4             
3444   FAF4             
3444   FAF4             
3444   FAF4             
3444   FAF4~            			endif
3444   FAF4~            			endif
3444   FAF4             
3444   FAF4~            			endif
3444   FAF4~            			endif
3444   FAF4             
3444   FA99             
3444   FA99 5A          
3444   FA9A             
3444   FA9A             
3444   FA9A~            			endif
3444   FA9A~            			endif
3444   FA9A~            			endif
3444   FA9A             
3444   FAF4             
3444   FAF4~            			endif
3444   FAF4~            			endif
3444   FAF4             
3445   FAF4 39          			rts	
3446   FAF5             
3447   FAF5 CE 01 66    update_hstd		ldx	#aud_currenthstd			;Current HSTD
3448   FAF8 7C 00 A1    			inc	sys_temp2
3449   FAFB DF 9A       			stx	temp1
3450   FAFD 8D 18       			bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
3451   FAFF C6 04       			ldab	#$04
3452   FB01 09          			dex	
3453   FB02 BD EF E4    			jsr	copyblock2				;Transfer Data Block at X to temp1, Length B
3454   FB05 7C 01 66    			inc	aud_currenthstd			;Adjust HSTD to new player score
3455   FB08 B6 01 67    			ldaa	aud_currenthstd+1
3456   FB0B 4C          			inca	
3457   FB0C 84 0F       			anda	#$0F
3458   FB0E 26 B6       			bne	hstd_nextp				;Go Check Next Player Score
3459   FB10 7F 01 67    			clr	aud_currenthstd+1
3460   FB13 8D 02       hstd_adddig		bsr	wordplusbyte			;Add Byte to Word: $A4=$A4+$A8 00->$A8
3461   FB15 20 AF       			bra	hstd_nextp				;Go Check Next Player Score
3462   FB17             			
3463   FB17             ;*************************************************
3464   FB17             ;* Add LSB of sys_temp_w3 to sys_temp5
3465   FB17             ;*************************************************
3466   FB17 DE A4       wordplusbyte	ldx	sys_temp5
3467   FB19 96 A8       			ldaa	sys_temp_w3
3468   FB1B 7F 00 A8    			clr	sys_temp_w3
3469   FB1E BD EE FF    			jsr	xplusa				;X = X + A
3470   FB21 DF A4       			stx	sys_temp5
3471   FB23 39          to_rts1		rts	
3472   FB24             
3473   FB24             ;**************************************************
3474   FB24             ;* This routine will fill the value of A into all
3475   FB24             ;* high score digit data.
3476   FB24             ;**************************************************
3477   FB24 CE 01 66    fill_hstd_digits	ldx	#aud_currenthstd			;CMOS: Current HSTD
3478   FB27 C6 04       			ldab	#$04
3479   FB29             			begin
3479   FB29             
3480   FB29 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++)
3481   FB2C 5A          				decb	
3482   FB2D             			eqend
3482   FB2D             
3482   FB2D             
3482   FB2D~            			eqend
3482   FB2D~            			eqend
3482   FB2D~            			eqend
3482   FB2D             
3482   FB2D 26 FA       
3482   FB2F             
3482   FB2F~            			eqend
3482   FB2F~            			eqend
3482   FB2F             
3483   FB2F 39          			rts
3484   FB30             				
3485   FB30             send_sound		begin
3485   FB30             
3486   FB30 BD EA 2F    				jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3487   FB33 02          				.db 	$02
3488   FB34 96 C1       				ldaa  $C1					;Sound Flag?
3489   FB36             		      eqend
3489   FB36             
3489   FB36             
3489   FB36~            		      eqend
3489   FB36~            		      eqend
3489   FB36~            		      eqend
3489   FB36             
3489   FB36 26 F8       
3489   FB38             
3489   FB38~            		      eqend
3489   FB38~            		      eqend
3489   FB38             
3490   FB38 39          		      rts
3491   FB39             
3492   FB39             ;*************************************************************
3493   FB39             ;* Match Routine: Will generate a random number and put in in
3494   FB39             ;*                the match display. Then it will compare each
3495   FB39             ;*                player score too see if we have a match.    
3496   FB39             ;*                If so, it will increment temp1 for each. 
3497   FB39             ;*************************************************************
3498   FB39 B6 01 8C    do_match		ldaa	adj_matchenable+1			;Adjustment: LSD Match 00=on 01=off
3499   FB3C 46          			rora	
3500   FB3D 25 E4       			bcs	to_rts1				;If match is off, get out of here.
3501   FB3F             			begin
3501   FB3F             
3502   FB3F 8D 3F       				bsr	get_random				;Get Random Number??
3503   FB41 48          				asla	
3504   FB42 48          				asla	
3505   FB43 48          				asla	
3506   FB44 48          				asla	
3507   FB45 81 A0       				cmpa	#$A0
3508   FB47             			csend						;If A>= 0xA0 then try again.
3508   FB47             
3508   FB47             
3508   FB47~            			csend						;If A>= 0xA0 then try again.
3508   FB47~            			csend						;If A>= 0xA0 then try again.
3508   FB47~            			csend						;If A>= 0xA0 then try again.
3508   FB47             
3508   FB47 24 F6       
3508   FB49             
3508   FB49~            			csend						;If A>= 0xA0 then try again.
3508   FB49~            			csend						;If A>= 0xA0 then try again.
3508   FB49             
3509   FB49 97 58       			staa	mbip_b0				;Store Match # in Match/BallinPlay
3510   FB4B 7F 00 9A    			clr	temp1
3511   FB4E C6 04       			ldab	#$04
3512   FB50 D7 9B       			stab	temp1+1
3513   FB52 CE 00 38    			ldx	#score_p1_b0			;Player Score Buffers, do each one
3514   FB55             			begin
3514   FB55             
3515   FB55 A1 03       				cmpa	$03,X
3516   FB57             				ifeq
3516   FB57             
3516   FB57 26 FE       
3517   FB59 7C 00 9A    					inc	temp1					;Yes, a Match!
3518   FB5C             				endif
3518   FB5C             
3518   FB5C             
3518   FB5C             
3518   FB5C             
3518   FB5C             
3518   FB5C~            				endif
3518   FB5C~            				endif
3518   FB5C             
3518   FB5C~            				endif
3518   FB5C~            				endif
3518   FB5C             
3518   FB58             
3518   FB58 03          
3518   FB59             
3518   FB59             
3518   FB59~            				endif
3518   FB59~            				endif
3518   FB59~            				endif
3518   FB59             
3518   FB5C             
3518   FB5C~            				endif
3518   FB5C~            				endif
3518   FB5C             
3519   FB5C BD EF 4D    				jsr	xplusb				;X = X + B)
3520   FB5F 7A 00 9B    				dec	temp1+1
3521   FB62             			eqend						;Do it 4 Times.
3521   FB62             
3521   FB62             
3521   FB62~            			eqend						;Do it 4 Times.
3521   FB62~            			eqend						;Do it 4 Times.
3521   FB62~            			eqend						;Do it 4 Times.
3521   FB62             
3521   FB62 26 F1       
3521   FB64             
3521   FB64~            			eqend						;Do it 4 Times.
3521   FB64~            			eqend						;Do it 4 Times.
3521   FB64             
3522   FB64 D6 9A       			ldab	temp1					;Number of Matches
3523   FB66             			ifne						;None, Get outta here.
3523   FB66             
3523   FB66 27 FE       
3524   FB68 B6 E0 5B    				ldaa	gr_matchsound			;Game ROM Data: Match Sound
3525   FB6B BD EC FC    				jsr	isnd_once				;Play Sound Index(A) Once
3526   FB6E 8D C0       				bsr	send_sound
3527   FB70 17          				tba	
3528   FB71 CE 01 1A    				ldx	#aud_matchcredits			;Audit: Match Credits
3529   FB74 BD F7 84    				jsr	ptrx_plus_a				;Add Matches to Audit
3530   FB77 BD F6 FE    				jsr	addcredits				;Add Credits if Possible
3531   FB7A             			endif
3531   FB7A             
3531   FB7A             
3531   FB7A             
3531   FB7A             
3531   FB7A             
3531   FB7A~            			endif
3531   FB7A~            			endif
3531   FB7A             
3531   FB7A~            			endif
3531   FB7A~            			endif
3531   FB7A             
3531   FB67             
3531   FB67 12          
3531   FB68             
3531   FB68             
3531   FB68~            			endif
3531   FB68~            			endif
3531   FB68~            			endif
3531   FB68             
3531   FB7A             
3531   FB7A~            			endif
3531   FB7A~            			endif
3531   FB7A             
3532   FB7A B6 E0 63    			ldaa	gr_match_lamp			;Game ROM: Match Lamp Location
3533   FB7D 7E F1 3C    			jmp	lamp_on				;Turn on Lamp A (encoded):
3534   FB80             
3535   FB80             ;******************************************************
3536   FB80             ;* Get Random: Will pull various system variables and
3537   FB80             ;*             calculate a pseudo-random number.
3538   FB80             ;******************************************************			
3539   FB80 37          get_random		pshb	
3540   FB81 96 D7       			ldaa	randomseed				;This is changed by Switch Closures
3541   FB83 16          			tab	
3542   FB84 56          			rorb	
3543   FB85 56          			rorb	
3544   FB86 97 9A       			staa	temp1					;Use some Temp variables for data
3545   FB88 D8 9A       			eorb	temp1
3546   FB8A 59          			rolb	
3547   FB8B 49          			rola	
3548   FB8C 97 D7       			staa	randomseed
3549   FB8E 9B 89       			adda	irq_counter					;Throw in some switch matrix stuff
3550   FB90 33          			pulb	
3551   FB91 39          to_rts2		rts	
3552   FB92             
3553   FB92             ;********************************************************
3554   FB92             ;* Credit Button Press: 
3555   FB92             ;********************************************************
3556   FB92 CE 01 AB    credit_button	ldx	#adj_max_credits			;CMOS: Max. Credits
3557   FB95 BD EF 63    			jsr	cmosinc_b				;CMOS,X++ -> B
3558   FB98 CE 01 6E    			ldx	#aud_currentcredits		;CMOS: Current Credits
3559   FB9B BD FE 1F    			jsr	cmos_a				;CMOS, X -> A )
3560   FB9E 26 03       			bne	has_credit
3561   FBA0 5D          			tstb						;No credits, check for free play
3562   FBA1             			ifeq						;No Free Play, get outta here.
3562   FBA1             
3562   FBA1 26 FE       
3563   FBA3 D6 C9       has_credit			ldab	flag_gameover			;Has valid credit or freeplay, is Game Over?
3564   FBA5 26 15       				bne	start_new_game			;No, goto Start New Game
3565   FBA7 D6 58       				ldab	mbip_b0				;Ball #
3566   FBA9 C1 F1       				cmpb	#$F1					;First Ball?
3567   FBAB 26 0F       				bne	start_new_game			;Start New Game
3568   FBAD D6 CC       				ldab	num_players				;Current # of Players
3569   FBAF F1 E0 4E    				cmpb	gr_numplayers			;Max # of Players (Game ROM data)
3570   FBB2             				ifcs						;Already 4 players, outta here.
3570   FBB2             
3570   FBB2 24 FE       
3571   FBB4 8D 0B       					bsr	lesscredit				;Subtract a credit
3572   FBB6 BD F8 58    					jsr	add_player				;Add a player.
3573   FBB9             				endif
3573   FBB9             
3573   FBB9             
3573   FBB9             
3573   FBB9             
3573   FBB9             
3573   FBB9~            				endif
3573   FBB9~            				endif
3573   FBB9             
3573   FBB9~            				endif
3573   FBB9~            				endif
3573   FBB9             
3573   FBB3             
3573   FBB3 05          
3573   FBB4             
3573   FBB4             
3573   FBB4~            				endif
3573   FBB4~            				endif
3573   FBB4~            				endif
3573   FBB4             
3573   FBB9             
3573   FBB9~            				endif
3573   FBB9~            				endif
3573   FBB9             
3574   FBB9             			endif
3574   FBB9             
3574   FBB9             
3574   FBB9             
3574   FBB9             
3574   FBB9             
3574   FBB9~            			endif
3574   FBB9~            			endif
3574   FBB9             
3574   FBB9~            			endif
3574   FBB9~            			endif
3574   FBB9             
3574   FBA2             
3574   FBA2 16          
3574   FBA3             
3574   FBA3             
3574   FBA3~            			endif
3574   FBA3~            			endif
3574   FBA3~            			endif
3574   FBA3             
3574   FBB9             
3574   FBB9~            			endif
3574   FBB9~            			endif
3574   FBB9             
3575   FBB9 7E EA 67    			jmp	killthread				;Remove Current Thread from VM
3576   FBBC             
3577   FBBC             ;*********************************************************
3578   FBBC             ;* Resets Games and Starts Anew
3579   FBBC             ;*********************************************************
3580   FBBC 8D 03       start_new_game	bsr	lesscredit				;Subtract a credit
3581   FBBE 7E F8 47    			jmp	do_game_init			;Init Player 1
3582   FBC1             			
3583   FBC1             ;*********************************************************
3584   FBC1             ;* Removes a credit and adjusts coin lockout and credit 
3585   FBC1             ;* lamp appropriately. Also updates audits.
3586   FBC1             ;*
3587   FBC1             ;* 	Current Credits in A.
3588   FBC1             ;*********************************************************
3589   FBC1 4D          lesscredit		tsta	
3590   FBC2             			ifne						;Is it Zero?
3590   FBC2             
3590   FBC2 27 FE       
3591   FBC4 8B 99       				adda	#$99					;Subtract 1 credit
3592   FBC6 19          				daa						;dont' forget to adjust
3593   FBC7 BD EF AF    				jsr	a_cmosinc				;A -> CMOS,X++)
3594   FBCA 96 5A       				ldaa	cred_b0				;Current Credits
3595   FBCC 8B 99       				adda	#$99					;Subtract 1
3596   FBCE 19          				daa	
3597   FBCF 97 5A       				staa	cred_b0				;Store Credits
3598   FBD1             			endif
3598   FBD1             
3598   FBD1             
3598   FBD1             
3598   FBD1             
3598   FBD1             
3598   FBD1~            			endif
3598   FBD1~            			endif
3598   FBD1             
3598   FBD1~            			endif
3598   FBD1~            			endif
3598   FBD1             
3598   FBC3             
3598   FBC3 0D          
3598   FBC4             
3598   FBC4             
3598   FBC4~            			endif
3598   FBC4~            			endif
3598   FBC4~            			endif
3598   FBC4             
3598   FBD1             
3598   FBD1~            			endif
3598   FBD1~            			endif
3598   FBD1             
3599   FBD1 BD F7 2C    			jsr	coinlockout				;Check Max Credits, Adjust Coin Lockout If Necessary
3600   FBD4 BD F8 29    			jsr	clr_bonus_coins			;Reset Any Bonus Coins... too bad!
3601   FBD7 CE 01 1E    			ldx	#aud_totalcredits			;Audit: Total Credits
3602   FBDA 7E F7 7F    			jmp	ptrx_plus_1				;Add 1 to data at X
3603   FBDD             
3604   FBDD             ;*********************************************************
3605   FBDD             ;* Tilt Contacts
3606   FBDD             ;*********************************************************			
3607   FBDD 7C 00 D3    tilt_warning	inc	num_tilt				;Add 1 Tilt
3608   FBE0 B6 01 92    			ldaa	adj_maxplumbbobtilts+1		;ADJ: LSD Max Plumb Bob Tilts
3609   FBE3 84 0F       			anda	#$0F
3610   FBE5 91 D3       			cmpa	num_tilt				;Current # of Plumb Bob Tilts
3611   FBE7 22 A8       			bhi	to_rts2				;Not enough warnings yet.. Leave now!
3612   FBE9 B6 E0 66    do_tilt		ldaa	gr_tilt_lamp			;Game ROM: Tilt Lamp Location
3613   FBEC 97 C8       			staa	flag_tilt				;Tilt Flag
3614   FBEE BD F3 AB    			jsr	macro_start				;Start Macro Execution-
3615   FBF1             			
3616   FBF1 14 00       			.db $14,$00 		;Turn on Tilt Lamp
3617   FBF3             			REMTHREADS_($0C,$00)	;.db $55,$0C,$00  	;Get Rid of non-tilt threads
3617   FBF3 55 0C 00    
3618   FBF6             			SOL_($F8)			;.db $31,$F8 		;Disable Flippers
3618   FBF6 31 F8       
3619   FBF8             			CPUX_				;Return to Program Execution 
3619   FBF8 04          
3620   FBF9             
3621   FBF9 39          			rts
3622   FBFA             
3623   FBFA             ;***********************************************************
3624   FBFA             ;* Self Test Routines Begin Here, first some data tables
3625   FBFA             ;***********************************************************
3626   FBFA             ;* Define our test entry points
3627   FBFA             ;***********************************************
3628   FBFA FE 43       testdata		.dw st_display
3629   FBFC FE 62       			.dw st_sound
3630   FBFE FE 8D       			.dw st_lamp
3631   FC00 FE CB       			.dw st_solenoid
3632   FC02 FE F0       			.dw st_switch
3633   FC04             
3634   FC04             ;***********************************************
3635   FC04             ;* This table defines which routines
3636   FC04             ;* handel the various adjustment displays.
3637   FC04             ;***********************************************			
3638   FC04 00          testlists		.db $00		;Function 00:    Game Identification
3639   FC05 FD 23       			.dw fn_gameid	;$FD,$23
3640   FC07 01          			.db $01		;Function 01-11: System Audits
3641   FC08 FD 30       			.dw fn_sysaud	;$FD,$30
3642   FC0A 0C          			.db $0C		;Function 12:    Current HSTD
3643   FC0B FD A9       			.dw fn_hstd		;$FD,$A9
3644   FC0D 0D          			.db $0D		;Function 13-17: Backup HSTD and Replays
3645   FC0E FD B1       			.dw fn_replay	;$FD,$B1
3646   FC10 12          			.db $12		;Function 18:    Max Credits
3647   FC11 FE 26       			.dw fn_credit	;$FE,$26
3648   FC13 13          			.db $13		;Function 19:    Pricing Control
3649   FC14 FD EF       			.dw fn_pricec	;$FD,$EF
3650   FC16 14          			.db $14		;Function 20-25: Pricing Settings
3651   FC17 FE 09       			.dw fn_prices	;$FE,$09
3652   FC19 1A          			.db $1A		;Function 26-41: System and Game Adjustments
3653   FC1A FE 33       			.dw fn_adj		;$FE,$33
3654   FC1C 2A          			.db $2A		;Function 42-49: Game Audits
3655   FC1D FD 2E       			.dw fn_gameaud	;$FD,$2E
3656   FC1F 32          			.db $32		;Function 50:    Command Mode
3657   FC20 FE 3E       			.dw fn_command	;$FE,$3E
3658   FC22 33          			.db $33
3659   FC23             
3660   FC23             ;************************************************
3661   FC23             ;* Main Self-Test Routine
3662   FC23             ;************************************************
3663   FC23             test_number =	$000e			;RAM Location to store where we are...
3664   FC23             test_lamptimer =	$000f			;Timer for Lamp test loop
3665   FC23             
3666   FC23             
3667   FC23 8D 45       selftest_entry	bsr	check_adv				;Advance: - if Triggered
3668   FC25             			ifpl
3668   FC25             
3668   FC25 2B FE       
3669   FC27 7E EA 67    				jmp	killthread				;Kill Current Thread
3670   FC2A             			endif
3670   FC2A             
3670   FC2A             
3670   FC2A             
3670   FC2A             
3670   FC2A             
3670   FC2A~            			endif
3670   FC2A~            			endif
3670   FC2A             
3670   FC2A~            			endif
3670   FC2A~            			endif
3670   FC2A             
3670   FC26             
3670   FC26 03          
3670   FC27             
3670   FC27             
3670   FC27~            			endif
3670   FC27~            			endif
3670   FC27~            			endif
3670   FC27             
3670   FC2A             
3670   FC2A~            			endif
3670   FC2A~            			endif
3670   FC2A             
3671   FC2A 8D 54       			bsr	st_init				;Set up self test
3672   FC2C 8D 47       			bsr	check_aumd				;AUMD: + if Manual-Down
3673   FC2E 2B 75       			bmi	do_audadj				;Auto-Up, go do audits and adjustments instead
3674   FC30 4F          			clra	
3675   FC31 7F 00 0E    st_diagnostics	clr	test_number				;Start at 0
3676   FC34 CE FB FA    			ldx	#testdata				;Macro Pointer
3677   FC37 36          			psha	
3678   FC38 BD F4 8E    			jsr	gettabledata_b			;Load up the pointer to our test routine in X
3679   FC3B 32          			pula	
3680   FC3C 16          			tab	
3681   FC3D 5A          			decb						;Adjust back down to where it was before table lookup incremented it
3682   FC3E D7 5A       			stab	cred_b0				;Show the test number in display
3683   FC40 BD EA C4    			jsr	newthread_06			;Start a new thread with our test routine
3684   FC43 BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3685   FC46 10          			.db	$10	
3686   FC47             			;This is the Advance button handler, it runs as a seperate thread to the test routine
3687   FC47             			begin
3687   FC47             
3688   FC47             				begin
3688   FC47             
3689   FC47 8D 21       					bsr	check_adv			;Advance: Stay here forever until pressed			   
3690   FC49             				miend
3690   FC49             
3690   FC49             
3690   FC49~            				miend
3690   FC49~            				miend
3690   FC49~            				miend
3690   FC49             
3690   FC49 2A FC       
3690   FC4B             
3690   FC4B~            				miend
3690   FC4B~            				miend
3690   FC4B             
3691   FC4B 8D 28       				bsr	check_aumd				;AUMD: + if Manual-Down
3692   FC4D 2B 45       				bmi	st_nexttest				;Do next test...
3693   FC4F D7 0E       				stab	test_number
3694   FC51             				begin
3694   FC51             
3695   FC51 8D 17       					bsr	check_adv			;Advance: Stay here forever until released
3696   FC53             				plend
3696   FC53             
3696   FC53             
3696   FC53~            				plend
3696   FC53~            				plend
3696   FC53~            				plend
3696   FC53             
3696   FC53 2B FC       
3696   FC55             
3696   FC55~            				plend
3696   FC55~            				plend
3696   FC55             
3697   FC55             			loopend
3697   FC55             
3697   FC55             
3697   FC55~            			loopend
3697   FC55~            			loopend
3697   FC55~            			loopend
3697   FC55             
3697   FC55 20 F0       
3697   FC57             
3697   FC57~            			loopend
3697   FC57~            			loopend
3697   FC57             
3698   FC57             
3699   FC57             ;*******************************************************
3700   FC57             ;*
3701   FC57             ;*******************************************************			
3702   FC57 36          do_aumd		psha	
3703   FC58 96 CB       			ldaa	flags_selftest
3704   FC5A             			ifpl
3704   FC5A             
3704   FC5A 2B FE       
3705   FC5C 8D 17       				bsr	check_aumd					;AUMD: + if Manual-Down
3706   FC5E             				ifpl
3706   FC5E             
3706   FC5E 2B FE       
3707   FC60 96 0E       					ldaa	test_number
3708   FC62             					ifne
3708   FC62             
3708   FC62 27 FE       
3709   FC64 4F          						clra	
3710   FC65 97 0E       						staa	test_number
3711   FC67 4A          						deca	
3712   FC68             					endif
3712   FC68             
3712   FC68             
3712   FC68             
3712   FC68             
3712   FC68             
3712   FC68~            					endif
3712   FC68~            					endif
3712   FC68             
3712   FC68~            					endif
3712   FC68~            					endif
3712   FC68             
3712   FC63             
3712   FC63 04          
3712   FC64             
3712   FC64             
3712   FC64~            					endif
3712   FC64~            					endif
3712   FC64~            					endif
3712   FC64             
3712   FC68             
3712   FC68~            					endif
3712   FC68~            					endif
3712   FC68             
3713   FC68             				endif
3713   FC68             
3713   FC68             
3713   FC68             
3713   FC68             
3713   FC68             
3713   FC68~            				endif
3713   FC68~            				endif
3713   FC68             
3713   FC68~            				endif
3713   FC68~            				endif
3713   FC68             
3713   FC5F             
3713   FC5F 08          
3713   FC60             
3713   FC60             
3713   FC60~            				endif
3713   FC60~            				endif
3713   FC60~            				endif
3713   FC60             
3713   FC68             
3713   FC68~            				endif
3713   FC68~            				endif
3713   FC68             
3714   FC68             			endif
3714   FC68             
3714   FC68             
3714   FC68             
3714   FC68             
3714   FC68             
3714   FC68~            			endif
3714   FC68~            			endif
3714   FC68             
3714   FC68~            			endif
3714   FC68~            			endif
3714   FC68             
3714   FC5B             
3714   FC5B 0C          
3714   FC5C             
3714   FC5C             
3714   FC5C~            			endif
3714   FC5C~            			endif
3714   FC5C~            			endif
3714   FC5C             
3714   FC68             
3714   FC68~            			endif
3714   FC68~            			endif
3714   FC68             
3715   FC68 32          			pula	
3716   FC69 39          			rts
3717   FC6A             
3718   FC6A             ;*********************************************************
3719   FC6A             ;* This will check the state of the advance switch and
3720   FC6A             ;* return the control register results
3721   FC6A             ;*********************************************************				
3722   FC6A F6 28 00    check_adv		ldab	pia_disp_digit_data		;Dummy read to clear previous results
3723   FC6D BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3724   FC70 02          			.db	$02
3725   FC71 F6 28 01    			ldab	pia_disp_digit_ctrl
3726   FC74 39          			rts
3727   FC75             
3728   FC75             ;*********************************************************
3729   FC75             ;* This routine will check the state of the Up/Down toggle
3730   FC75             ;* switch. First do a dummy read to clear previous results
3731   FC75             ;*********************************************************
3732   FC75 F6 28 02    check_aumd		ldab	pia_disp_seg_data			;Dummy read to clear previous results
3733   FC78 BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3734   FC7B 02          			.db	$02
3735   FC7C F6 28 03    			ldab	pia_disp_seg_ctrl
3736   FC7F 39          			rts
3737   FC80             
3738   FC80             ;**************************************************
3739   FC80             ;* Self Test Initializations:
3740   FC80             ;*	Remove all VM Threads
3741   FC80             ;*	Disable Solenoids
3742   FC80             ;*	Clear RAM
3743   FC80             ;**************************************************
3744   FC80 5F          st_init		clrb	
3745   FC81 BD EA FB    			jsr	kill_threads			;Remove All VM Threads 
3746   FC84 86 18       			ldaa	#$18
3747   FC86 BD EB 23    			jsr	solbuf				;Turn Off Solenoid 24 (Flipper Enable)
3748   FC89 7C 00 CB    			inc	flags_selftest			;Set Test Flag
3749   FC8C CE 00 00    			ldx	#ram_base
3750   FC8F C6 89       			ldab	#$89
3751   FC91 7E F8 94    to_clear_range	jmp	clear_range				;Clear RAM from $0000-0089
3752   FC94             
3753   FC94             ;**************************************************
3754   FC94             ;* Next Test: Will advance diagnostics to next
3755   FC94             ;*            test in sequence, if done, then fall
3756   FC94             ;*            through to audits/adjustments
3757   FC94             ;**************************************************
3758   FC94 C6 28       st_nexttest		ldab	#$28
3759   FC96 CE 00 10    			ldx	#lampbuffer0
3760   FC99 8D F6       			bsr	to_clear_range			;Clear RAM from $0010-0038
3761   FC9B BD EA FB    			jsr	kill_threads			;Remove all VM Threads
3762   FC9E 4C          			inca	
3763   FC9F 81 05       			cmpa	#$05					;are we done yet?
3764   FCA1 26 8E       			bne	st_diagnostics			;Goto back to Self-Test Diagnostics routine
3765   FCA3             			;Fall through if finished
3766   FCA3             			
3767   FCA3             ;**************************************************
3768   FCA3             ;* Main Audit/Adjustments Process Entry
3769   FCA3             ;**************************************************			
3770   FCA3 8D DB       to_audadj		bsr	st_init				;Clear all RAM and set up self testing
3771   FCA5 7F 00 58    do_audadj		clr	mbip_b0
3772   FCA8 86 04       			ldaa	#$04					;Show test 04 by default
3773   FCAA 97 5A       			staa	cred_b0
3774   FCAC BD EA 2F    			jsr	addthread				;Wait $10
3775   FCAF 10          			.db 	$10	
3776   FCB0             			begin
3776   FCB0             
3777   FCB0 BD F8 9A    				jsr	clear_displays			;Blank all Player Displays (buffer 0)
3778   FCB3 8D 36       				bsr	b_129					;#08 -> $0F
3779   FCB5 D6 58       				ldab	mbip_b0
3780   FCB7 BD F8 34    				jsr	dec2hex				;Convert Decimal(B) to Hex(B)
3781   FCBA CE FC 01    				ldx	#testlists-3
3782   FCBD             				begin
3782   FCBD             
3783   FCBD 08          					inx	
3784   FCBE 08          					inx	
3785   FCBF 08          					inx	
3786   FCC0 E1 03       					cmpb	$03,X					;Are we at next handler?
3787   FCC2             				csend
3787   FCC2             
3787   FCC2             
3787   FCC2~            				csend
3787   FCC2~            				csend
3787   FCC2~            				csend
3787   FCC2             
3787   FCC2 24 F9       
3787   FCC4             
3787   FCC4~            				csend
3787   FCC4~            				csend
3787   FCC4             
3788   FCC4 EE 01       				ldx	$01,X					;Load the routine
3789   FCC6 AD 00       				jsr	$00,X					;Do the routine to load up data into displays
3790   FCC8             				begin
3790   FCC8             
3791   FCC8 BD FC 6A    					jsr	check_adv			;Advance: - if Triggered
3792   FCCB             				miend
3792   FCCB             
3792   FCCB             
3792   FCCB~            				miend
3792   FCCB~            				miend
3792   FCCB~            				miend
3792   FCCB             
3792   FCCB 2A FB       
3792   FCCD             
3792   FCCD~            				miend
3792   FCCD~            				miend
3792   FCCD             
3793   FCCD 8D 1C       b_133				bsr	b_129					;#08 -> $0F
3794   FCCF BD FC 6A    show_func			jsr	check_adv				;Advance: - if Triggered
3795   FCD2             			miend
3795   FCD2             
3795   FCD2             
3795   FCD2~            			miend
3795   FCD2~            			miend
3795   FCD2~            			miend
3795   FCD2             
3795   FCD2 2A DC       
3795   FCD4             
3795   FCD4~            			miend
3795   FCD4~            			miend
3795   FCD4             
3796   FCD4 8D 1A       			bsr	b_12D
3797   FCD6 26 F7       			bne	show_func				;Look at the buttons again
3798   FCD8 8D 31       			bsr	adjust_func				;Add or subtract the function number?
3799   FCDA 9B 58       			adda	mbip_b0				;Change it
3800   FCDC 19          			daa	
3801   FCDD 81 51       			cmpa	#$51					;Are we now on audit 51??
3802   FCDF 27 35       			beq	st_reset				;Yes, Blank displays, reboot game
3803   FCE1 81 99       			cmpa	#$99					;Going down, are we minus now??
3804   FCE3             			ifeq
3804   FCE3             
3804   FCE3 26 FE       
3805   FCE5 86 50       				ldaa	#$50					;Yes, wrap around to 50
3806   FCE7             			endif
3806   FCE7             
3806   FCE7             
3806   FCE7             
3806   FCE7             
3806   FCE7             
3806   FCE7~            			endif
3806   FCE7~            			endif
3806   FCE7             
3806   FCE7~            			endif
3806   FCE7~            			endif
3806   FCE7             
3806   FCE4             
3806   FCE4 02          
3806   FCE5             
3806   FCE5             
3806   FCE5~            			endif
3806   FCE5~            			endif
3806   FCE5~            			endif
3806   FCE5             
3806   FCE7             
3806   FCE7~            			endif
3806   FCE7~            			endif
3806   FCE7             
3807   FCE7 97 58       			staa	mbip_b0				;Store new value
3808   FCE9 20 E4       			bra	show_func				;Look at the buttons again
3809   FCEB             			
3810   FCEB 86 08       b_129			ldaa	#$08
3811   FCED 97 0F       			staa	$000F
3812   FCEF 39          			rts	
3813   FCF0             			
3814   FCF0 96 0F       b_12D			ldaa	$000F
3815   FCF2             			ifne
3815   FCF2             
3815   FCF2 27 FE       
3816   FCF4 7A 00 0F    				dec	$000F
3817   FCF7 81 08       				cmpa	#$08
3818   FCF9             			endif
3818   FCF9             
3818   FCF9             
3818   FCF9             
3818   FCF9             
3818   FCF9             
3818   FCF9~            			endif
3818   FCF9~            			endif
3818   FCF9             
3818   FCF9~            			endif
3818   FCF9~            			endif
3818   FCF9             
3818   FCF3             
3818   FCF3 05          
3818   FCF4             
3818   FCF4             
3818   FCF4~            			endif
3818   FCF4~            			endif
3818   FCF4~            			endif
3818   FCF4             
3818   FCF9             
3818   FCF9~            			endif
3818   FCF9~            			endif
3818   FCF9             
3819   FCF9 39          			rts
3820   FCFA             	
3821   FCFA             			begin
3821   FCFA             
3822   FCFA 8D EF       				bsr	b_129					;#08 -> $0F
3823   FCFC BD FC 6A    b_135				jsr	check_adv				;Advance: - if Triggered
3824   FCFF 2B CC       				bmi	b_133
3825   FD01 96 69       				ldaa	switch_masked
3826   FD03 85 04       				bita	#$04
3827   FD05             			neend
3827   FD05             
3827   FD05             
3827   FD05~            			neend
3827   FD05~            			neend
3827   FD05~            			neend
3827   FD05             
3827   FD05 27 F3       
3827   FD07             
3827   FD07~            			neend
3827   FD07~            			neend
3827   FD07             
3828   FD07 8D E7       			bsr	b_12D
3829   FD09 26 F1       			bne	b_135
3830   FD0B 86 99       adjust_func		ldaa	#$99
3831   FD0D BD FC 75    			jsr	check_aumd				;AUMD: + if Manual-Down
3832   FD10             			ifmi
3832   FD10             
3832   FD10 2A FE       
3833   FD12 86 01       				ldaa	#$01
3834   FD14             			endif
3834   FD14             
3834   FD14             
3834   FD14             
3834   FD14             
3834   FD14             
3834   FD14~            			endif
3834   FD14~            			endif
3834   FD14             
3834   FD14~            			endif
3834   FD14~            			endif
3834   FD14             
3834   FD11             
3834   FD11 02          
3834   FD12             
3834   FD12             
3834   FD12~            			endif
3834   FD12~            			endif
3834   FD12~            			endif
3834   FD12             
3834   FD14             
3834   FD14~            			endif
3834   FD14~            			endif
3834   FD14             
3835   FD14 16          			tab	
3836   FD15 39          			rts
3837   FD16             				
3838   FD16 86 FF       st_reset		ldaa	#$FF
3839   FD18 97 58       			staa	mbip_b0
3840   FD1A 97 5A       			staa	cred_b0
3841   FD1C BD EA 2F    			jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
3842   FD1F 50          			.db 	$50
3843   FD20 7E E8 00    			jmp	reset					;Goto Reset Entry
3844   FD23             
3845   FD23             ;************************************************************
3846   FD23             ;* Self Test Audit and Adjustment Handlers:
3847   FD23             ;* 	These routines are in charge of the functions shown
3848   FD23             ;* 	in the self test routines. Each one handles one or
3849   FD23             ;*    more functions to retrieve and display the proper 
3850   FD23             ;*    data on the various displays.
3851   FD23             ;************************************************************			
3852   FD23 FE E0 00    fn_gameid		ldx	gr_gamenumber
3853   FD26 DF 39       			stx	score_p1_b0+1			;Game # -> Player 1 Display
3854   FD28 B6 E0 02    			ldaa	gr_romrevision
3855   FD2B 97 3B       			staa	score_p1_b0+3			;ROM Rev -> Player Display
3856   FD2D 39          			rts	
3857   FD2E             			
3858   FD2E C0 1E       fn_gameaud		subb	#$1E
3859   FD30 58          fn_sysaud		aslb	
3860   FD31 58          			aslb	
3861   FD32 CE 00 FE    			ldx	#$00FE
3862   FD35 BD EF 4D    			jsr	xplusb				;X = X + B)
3863   FD38 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3864   FD3B 97 3A       			staa	score_p1_b0+2
3865   FD3D BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3866   FD40 97 3B       			staa	score_p1_b0+3			;Show Data in Player 1 Display
3867   FD42 C1 20       			cmpb	#$20
3868   FD44             			ifne						;If on Audit 08, Keep Going
3868   FD44             
3868   FD44 27 FE       
3869   FD46 39          				rts						;Else... get outta here!
3870   FD47             			endif
3870   FD47             
3870   FD47             
3870   FD47             
3870   FD47             
3870   FD47             
3870   FD47~            			endif
3870   FD47~            			endif
3870   FD47             
3870   FD47~            			endif
3870   FD47~            			endif
3870   FD47             
3870   FD45             
3870   FD45 01          
3870   FD46             
3870   FD46             
3870   FD46~            			endif
3870   FD46~            			endif
3870   FD46~            			endif
3870   FD46             
3870   FD47             
3870   FD47~            			endif
3870   FD47~            			endif
3870   FD47             
3871   FD47 CE 01 4E    			ldx	#aud_hstdcredits			;Audit: HSTD Credits Awarded
3872   FD4A BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3873   FD4D 97 3E       			staa	score_p2_b0+2
3874   FD4F BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3875   FD52 97 3F       			staa	score_p2_b0+3
3876   FD54 CE 01 12    			ldx	#aud_specialcredits		;Audit: Special Credits
3877   FD57 C6 03       			ldab	#$03
3878   FD59 D7 9A       			stab	temp1
3879   FD5B             			begin
3879   FD5B             
3880   FD5B BD EF 63    				jsr	cmosinc_b				;CMOS,X++ -> B
3881   FD5E BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
3882   FD61 9B 3F       				adda	score_p2_b0+3
3883   FD63 19          				daa						;\
3884   FD64 97 3F       				staa	score_p2_b0+3			;|
3885   FD66 17          				tba						;|--  Add up HSTD,Special,Replay,Match Credits
3886   FD67 99 3E       				adca	score_p2_b0+2			;|
3887   FD69 19          				daa						;/
3888   FD6A 97 3E       				staa	score_p2_b0+2			;Store Result (Player 2 Display)
3889   FD6C 7A 00 9A    				dec	temp1
3890   FD6F             			eqend
3890   FD6F             
3890   FD6F             
3890   FD6F~            			eqend
3890   FD6F~            			eqend
3890   FD6F~            			eqend
3890   FD6F             
3890   FD6F 26 EA       
3890   FD71             
3890   FD71~            			eqend
3890   FD71~            			eqend
3890   FD71             
3891   FD71 CE 00 46    			ldx	#score_p4_b0+2
3892   FD74 C6 07       			ldab	#$07
3893   FD76 BD F8 94    			jsr	clear_range				;Clear RAM from X to X+B
3894   FD79 DE 3E       			ldx	score_p2_b0+2
3895   FD7B DF 48       			stx	score_p1_b1				;RAM $48 = Total Free Credits (Player 1 Display)
3896   FD7D 86 99       			ldaa	#$99
3897   FD7F 97 4D       			staa	score_p2_b1+1			;RAM $4D = #99 (Player 2 Display)
3898   FD81 16          			tab	
3899   FD82 90 3B       			suba	score_p1_b0+3
3900   FD84 D0 3A       			subb	score_p1_b0+2
3901   FD86 8B 01       			adda	#$01
3902   FD88 19          			daa	
3903   FD89 97 4F       			staa	score_p2_b1+3
3904   FD8B 17          			tba	
3905   FD8C 89 00       			adca	#$00
3906   FD8E 19          			daa	
3907   FD8F 97 4E       			staa	score_p2_b1+2
3908   FD91             			begin
3908   FD91             
3909   FD91 D6 47       				ldab	score_p4_b0+3
3910   FD93 CE 00 46    				ldx	#score_p4_b0+2
3911   FD96 0C          				clc
3912   FD97             				begin	
3912   FD97             
3913   FD97 A6 04       					ldaa	$04,X
3914   FD99 A9 09       					adca	$09,X
3915   FD9B 19          					daa	
3916   FD9C A7 04       					staa	$04,X
3917   FD9E 09          					dex	
3918   FD9F 8C 00 41    					cpx	#score_p3_b0+1
3919   FDA2             				eqend
3919   FDA2             
3919   FDA2             
3919   FDA2~            				eqend
3919   FDA2~            				eqend
3919   FDA2~            				eqend
3919   FDA2             
3919   FDA2 26 F3       
3919   FDA4             
3919   FDA4~            				eqend
3919   FDA4~            				eqend
3919   FDA4             
3920   FDA4 D1 47       				cmpb	score_p4_b0+3
3921   FDA6             			eqend
3921   FDA6             
3921   FDA6             
3921   FDA6~            			eqend
3921   FDA6~            			eqend
3921   FDA6~            			eqend
3921   FDA6             
3921   FDA6 26 E9       
3921   FDA8             
3921   FDA8~            			eqend
3921   FDA8~            			eqend
3921   FDA8             
3922   FDA8 39          			rts
3923   FDA9             				
3924   FDA9 BD FA 0B    fn_hstd		jsr	show_hstd				;Puts HSTD in All Player Displays(Buffer 1)
3925   FDAC 86 7F       			ldaa	#$7F
3926   FDAE 97 5C       			staa	dmask_p1
3927   FDB0 39          			rts
3928   FDB1             				
3929   FDB1 CE 01 81    fn_replay		ldx	#adj_backuphstd			;Offset to Replay Levels
3930   FDB4 C0 0D       			subb	#$0D					;Subtract 13 to get correct base
3931   FDB6 58          			aslb						;*2  2 bytes data per level(replay score)
3932   FDB7 BD EF 4D    			jsr	xplusb				;X = X + B)
3933   FDBA DF D1       			stx	vm_pc					;Pointer to Current Replay Level Data
3934   FDBC 58          			aslb						;*2  4 bytes data per level(times exceeded)
3935   FDBD CE 01 4E    			ldx	#aud_hstdcredits			;Offset to Replay Level Times Exceeded
3936   FDC0 BD EF 4D    			jsr	xplusb				;X = X + B)
3937   FDC3 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3938   FDC6 97 3E       			staa	score_p2_b0+2			;Show Times Exceeded MSD's in Player 2 Display
3939   FDC8 BD EF 53    			jsr	cmosinc_a				;CMOS,X++ -> A
3940   FDCB 97 3F       			staa	score_p2_b0+3			;Show Times Exceeded LSD's in Player 2 Display
3941   FDCD 5F          			clrb	
3942   FDCE             			begin
3942   FDCE             
3943   FDCE DE D1       				ldx	vm_pc					;reload current offset * 2
3944   FDD0 8D 14       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
3945   FDD2 16          				tab	
3946   FDD3 BD EC F3    				jsr	split_ab				;Shift the digits around for display
3947   FDD6 84 F0       				anda	#$F0					;Blank MSD (10,000,000 digit)
3948   FDD8 D7 38       				stab	score_p1_b0				;Show it.
3949   FDDA 97 39       				staa	score_p1_b0+1			;Player 1 Display
3950   FDDC 5F          				clrb	
3951   FDDD D7 3A       				stab	score_p1_b0+2			;Lay down some Zero's
3952   FDDF D7 3B       				stab	score_p1_b0+3			
3953   FDE1 BD FC FC    				jsr	b_135
3954   FDE4             			loopend
3954   FDE4             
3954   FDE4             
3954   FDE4~            			loopend
3954   FDE4~            			loopend
3954   FDE4~            			loopend
3954   FDE4             
3954   FDE4 20 E8       
3954   FDE6             
3954   FDE6~            			loopend
3954   FDE6~            			loopend
3954   FDE6             
3955   FDE6             			
3956   FDE6 8D 37       cmos_add_d		bsr	cmos_a				;CMOS, X -> A )
3957   FDE8 1B          			aba	
3958   FDE9 19          			daa	
3959   FDEA BD EF AF    			jsr	a_cmosinc				;A -> CMOS,X++)
3960   FDED 20 33       			bra	fn_ret				;dex,dex,tsta,rts.
3961   FDEF             			
3962   FDEF 5F          fn_pricec		clrb	
3963   FDF0             			begin
3963   FDF0             
3964   FDF0             				begin
3964   FDF0             
3965   FDF0 CE 01 AD    					ldx	#adj_pricecontrol			;Standard/Custom Pricing Control
3966   FDF3 BD FD E6    					jsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
3967   FDF6 C6 99       					ldab	#$99
3968   FDF8 81 09       					cmpa	#$09
3969   FDFA             				csend					;Custom Pricing = 09?
3969   FDFA             
3969   FDFA             
3969   FDFA~            				csend					;Custom Pricing = 09?
3969   FDFA~            				csend					;Custom Pricing = 09?
3969   FDFA~            				csend					;Custom Pricing = 09?
3969   FDFA             
3969   FDFA 24 F4       
3969   FDFC             
3969   FDFC~            				csend					;Custom Pricing = 09?
3969   FDFC~            				csend					;Custom Pricing = 09?
3969   FDFC             
3970   FDFC 97 3B       				staa	score_p1_b0+3			;Player 1 Display
3971   FDFE 16          				tab	
3972   FDFF             				ifne
3972   FDFF             
3972   FDFF 27 FE       
3973   FE01 BD EF D0    					jsr	loadpricing
3974   FE04             				endif
3974   FE04             
3974   FE04             
3974   FE04             
3974   FE04             
3974   FE04             
3974   FE04~            				endif
3974   FE04~            				endif
3974   FE04             
3974   FE04~            				endif
3974   FE04~            				endif
3974   FE04             
3974   FE00             
3974   FE00 03          
3974   FE01             
3974   FE01             
3974   FE01~            				endif
3974   FE01~            				endif
3974   FE01~            				endif
3974   FE01             
3974   FE04             
3974   FE04~            				endif
3974   FE04~            				endif
3974   FE04             
3975   FE04 BD FC FC    				jsr	b_135
3976   FE07             			loopend
3976   FE07             
3976   FE07             
3976   FE07~            			loopend
3976   FE07~            			loopend
3976   FE07~            			loopend
3976   FE07             
3976   FE07 20 E7       
3976   FE09             
3976   FE09~            			loopend
3976   FE09~            			loopend
3976   FE09             
3977   FE09             			
3978   FE09 CE 01 AF    fn_prices		ldx	#cmos_leftcoinmult		;Left Coin Slot Multiplier
3979   FE0C C0 14       			subb	#$14
3980   FE0E 58          			aslb	
3981   FE0F BD EF 4D    			jsr	xplusb				;X = X + B)
3982   FE12 BD FE 1F    			jsr	cmos_a				;CMOS, X -> A )
3983   FE15 97 3B       			staa	score_p1_b0+3			;Player 1 Display
3984   FE17 B6 01 AE    			ldaa	adj_pricecontrol+1		;Standard/Custom Pricing Control LSD
3985   FE1A 84 0F       			anda	#$0F
3986   FE1C 27 0B       			beq	fn_cdtbtn
3987   FE1E 39          			rts	
3988   FE1F             			
3989   FE1F BD EF 53    cmos_a		jsr	cmosinc_a				;CMOS,X++ -> A
3990   FE22 09          fn_ret		dex	
3991   FE23 09          			dex	
3992   FE24 4D          			tsta	
3993   FE25 39          			rts	
3994   FE26             			
3995   FE26 CE 01 AB    fn_credit		ldx	#adj_max_credits			;RAM Pointer Base
3996   FE29 5F          fn_cdtbtn		clrb
3997   FE2A             			begin
3997   FE2A             
3998   FE2A 8D BA       				bsr	cmos_add_d				;Decimal Add B to CMOS,X(nopostinc), Tst A
3999   FE2C 97 3B       				staa	score_p1_b0+3			;Player 1 Display
4000   FE2E BD FC FC    				jsr	b_135
4001   FE31             			loopend
4001   FE31             
4001   FE31             
4001   FE31~            			loopend
4001   FE31~            			loopend
4001   FE31~            			loopend
4001   FE31             
4001   FE31 20 F7       
4001   FE33             
4001   FE33~            			loopend
4001   FE33~            			loopend
4001   FE33             
4002   FE33             			
4003   FE33 CE 01 8B    fn_adj		ldx	#adj_matchenable			;RAM Pointer Base
4004   FE36 C0 1A       			subb	#$1A
4005   FE38 58          			aslb	
4006   FE39 BD EF 4D    			jsr	xplusb				;X = X + B)
4007   FE3C 20 EB       			bra	fn_cdtbtn
4008   FE3E             			
4009   FE3E CE 01 70    fn_command		ldx	#aud_command			;RAM Pointer Base
4010   FE41 20 E6       			bra	fn_cdtbtn
4011   FE43             
4012   FE43             ;****************************************************
4013   FE43             ;* Main Display Test Routine - Cycles all score 
4014   FE43             ;*                             displays through 0-9
4015   FE43             ;****************************************************			
4016   FE43 4F          st_display		clra
4017   FE44             			begin	
4017   FE44             
4018   FE44             				begin
4018   FE44             
4019   FE44 CE 00 38    					ldx	#score_p1_b0
4020   FE47 C6 24       					ldab	#$24
4021   FE49 BD F8 40    					jsr	write_range				;RAM $38-$5B = A: Clear all Displays
4022   FE4C BD EA 2F    					jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
4023   FE4F 18          					.db	$18
4024   FE50 BD FC 57    					jsr	do_aumd				;Check Auto/Manual, return + if Manual
4025   FE53             				miend
4025   FE53             
4025   FE53             
4025   FE53~            				miend
4025   FE53~            				miend
4025   FE53~            				miend
4025   FE53             
4025   FE53 2A EF       
4025   FE55             
4025   FE55~            				miend
4025   FE55~            				miend
4025   FE55             
4026   FE55 73 00 60    				com	comma_flags				;Toggle commas on each count
4027   FE58 8B 11       				adda	#$11					;Add one to each digit
4028   FE5A 19          				daa	
4029   FE5B             			csend
4029   FE5B             
4029   FE5B             
4029   FE5B~            			csend
4029   FE5B~            			csend
4029   FE5B~            			csend
4029   FE5B             
4029   FE5B 24 E7       
4029   FE5D             
4029   FE5D~            			csend
4029   FE5D~            			csend
4029   FE5D             
4030   FE5D D6 CB       			ldab	flags_selftest
4031   FE5F 2A E2       			bpl	st_display				;Clear All Displays
4032   FE61 39          			rts	
4033   FE62             
4034   FE62             ;****************************************************
4035   FE62             ;* Main Sound Routine - Toggles each of the sound 
4036   FE62             ;*                      command line individually.
4037   FE62             ;****************************************************			
4038   FE62 BD F8 9A    st_sound		jsr	clear_displays			;Blank all Player Displays (buffer 0)
4039   FE65             			begin
4039   FE65             
4040   FE65 4F          				clra	
4041   FE66 97 60       				staa	comma_flags				;Turn off commas
4042   FE68 97 58       				staa	mbip_b0				;Match/Ball in Play Display = 00
4043   FE6A 86 FE       				ldaa	#$FE					;Initial Sound Command $1E
4044   FE6C             				begin
4044   FE6C             
4045   FE6C             					begin
4045   FE6C             
4046   FE6C C6 FF       						ldab	#$FF
4047   FE6E F7 21 00    						stab	pia_sound_data			;Sound Blanking
4048   FE71 BD EA 2F    						jsr	addthread				;Delay enough for sound board to stop
4049   FE74 00          						.db	$00	
4050   FE75 B7 21 00    						staa	pia_sound_data			;Commands.. $1E,$1D,$1B,$17,$0F
4051   FE78 BD EA 2F    						jsr	addthread				;Delay $40 IRQ's
4052   FE7B 40          						.db	$40
4053   FE7C BD FC 57    						jsr	do_aumd				;Either repeat same sound or move on to next
4054   FE7F             					miend
4054   FE7F             
4054   FE7F             
4054   FE7F~            					miend
4054   FE7F~            					miend
4054   FE7F~            					miend
4054   FE7F             
4054   FE7F 2A EB       
4054   FE81             
4054   FE81~            					miend
4054   FE81~            					miend
4054   FE81             
4055   FE81 7C 00 58    					inc	mbip_b0				;Increment Match/Ball in Play Display
4056   FE84 48          					asla	
4057   FE85 4C          					inca	
4058   FE86             				plend
4058   FE86             
4058   FE86             
4058   FE86~            				plend
4058   FE86~            				plend
4058   FE86~            				plend
4058   FE86             
4058   FE86 2B E4       
4058   FE88             
4058   FE88~            				plend
4058   FE88~            				plend
4058   FE88             
4059   FE88 D6 CB       				ldab	flags_selftest
4060   FE8A             			miend					;Start Over
4060   FE8A             
4060   FE8A             
4060   FE8A~            			miend					;Start Over
4060   FE8A~            			miend					;Start Over
4060   FE8A~            			miend					;Start Over
4060   FE8A             
4060   FE8A 2A D9       
4060   FE8C             
4060   FE8C~            			miend					;Start Over
4060   FE8C~            			miend					;Start Over
4060   FE8C             
4061   FE8C 39          			rts	
4062   FE8D             			
4063   FE8D             ;****************************************************
4064   FE8D             ;* Main Lamp Routine - Flashes all lamps 
4065   FE8D             ;****************************************************			
4066   FE8D C6 AA       st_lamp		ldab	#$AA
4067   FE8F D7 58       			stab	mbip_b0				;Match/Ball in Play Display Buffer 0
4068   FE91 D7 0F       			stab	test_lamptimer
4069   FE93             			begin
4069   FE93             
4070   FE93             				begin
4070   FE93             
4071   FE93 96 10       					ldaa	lampbuffer0
4072   FE95 43          					coma	
4073   FE96 CE 00 10    					ldx	#lampbuffer0
4074   FE99 C6 08       					ldab	#$08
4075   FE9B BD F8 40    					jsr	write_range				;Store A from $0010-0017
4076   FE9E BD EA 2F    					jsr	addthread				;End This Routine, Replace with next routine, next byte is timer.
4077   FEA1 1B          					.db	$1B
4078   FEA2 7A 00 0F    					dec  	test_lamptimer
4079   FEA5             				eqend
4079   FEA5             
4079   FEA5             
4079   FEA5~            				eqend
4079   FEA5~            				eqend
4079   FEA5~            				eqend
4079   FEA5             
4079   FEA5 26 EC       
4079   FEA7             
4079   FEA7~            				eqend
4079   FEA7~            				eqend
4079   FEA7             
4080   FEA7 D6 CB       				ldab  flags_selftest			;Auto-Cycle??
4081   FEA9             			miend
4081   FEA9             
4081   FEA9             
4081   FEA9~            			miend
4081   FEA9~            			miend
4081   FEA9~            			miend
4081   FEA9             
4081   FEA9 2A E8       
4081   FEAB             
4081   FEAB~            			miend
4081   FEAB~            			miend
4081   FEAB             
4082   FEAB 39          			rts 
4083   FEAC             
4084   FEAC             ;****************************************************
4085   FEAC             ;* Auto-Cycle Routine - This is the timing thread to
4086   FEAC             ;*                      allow each test routine to 
4087   FEAC             ;*                      repeat indefinitely.
4088   FEAC             ;****************************************************			
4089   FEAC BD FC 80    st_autocycle	jsr  	st_init
4090   FEAF 5A          			decb 
4091   FEB0 D7 CB       			stab  flags_selftest
4092   FEB2             			begin
4092   FEB2             
4093   FEB2 8D 8F       				bsr  	st_display    		;Clear All Displays
4094   FEB4 7F 00 5A    				clr  	cred_b0
4095   FEB7 8D A9       				bsr  	st_sound
4096   FEB9 7C 00 5A    				inc  	cred_b0
4097   FEBC 8D CF       				bsr  	st_lamp
4098   FEBE 7C 00 5A    				inc  	cred_b0
4099   FEC1 8D 08       				bsr  	st_solenoid
4100   FEC3 CE 01 4A    				ldx  	#aud_autocycles		;Audit: Auto-Cycles
4101   FEC6 BD F7 7F    				jsr  	ptrx_plus_1 		;Add 1 to data at X
4102   FEC9             			loopend
4102   FEC9             
4102   FEC9             
4102   FEC9~            			loopend
4102   FEC9~            			loopend
4102   FEC9~            			loopend
4102   FEC9             
4102   FEC9 20 E7       
4102   FECB             
4102   FECB~            			loopend
4102   FECB~            			loopend
4102   FECB             
4103   FECB             
4104   FECB             ;****************************************************
4105   FECB             ;* Main Solenoid Routine - Steps through each solenoid 
4106   FECB             ;****************************************************			
4107   FECB             st_solenoid		begin
4107   FECB             
4108   FECB C6 01       				ldab  #$01
4109   FECD D7 58       				stab 	mbip_b0	 
4110   FECF 86 20       				ldaa 	#$20	
4111   FED1             				begin
4111   FED1             
4112   FED1             					begin
4112   FED1             
4113   FED1 BD EB 23    						jsr  	solbuf			;Turn On Outhole Solenoid
4114   FED4 BD EA 2F    						jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
4115   FED7 40          						.db	$40
4116   FED8 BD FC 57    						jsr  	do_aumd			;AUMD: + if Manual-Down
4117   FEDB             					miend
4117   FEDB             
4117   FEDB             
4117   FEDB~            					miend
4117   FEDB~            					miend
4117   FEDB~            					miend
4117   FEDB             
4117   FEDB 2A F4       
4117   FEDD             
4117   FEDD~            					miend
4117   FEDD~            					miend
4117   FEDD             
4118   FEDD 16          					tab  
4119   FEDE 96 58       					ldaa  mbip_b0
4120   FEE0 8B 01       					adda 	#$01
4121   FEE2 19          					daa  
4122   FEE3 97 58       					staa  mbip_b0
4123   FEE5 17          					tba  
4124   FEE6 4C          					inca 
4125   FEE7 81 39       					cmpa  #$39
4126   FEE9             				ccend
4126   FEE9             
4126   FEE9             
4126   FEE9~            				ccend
4126   FEE9~            				ccend
4126   FEE9~            				ccend
4126   FEE9             
4126   FEE9 25 E6       
4126   FEEB             
4126   FEEB~            				ccend
4126   FEEB~            				ccend
4126   FEEB             
4127   FEEB D6 CB       				ldab  flags_selftest			;Auto-Cycle??
4128   FEED             			miend
4128   FEED             
4128   FEED             
4128   FEED~            			miend
4128   FEED~            			miend
4128   FEED~            			miend
4128   FEED             
4128   FEED 2A DC       
4128   FEEF             
4128   FEEF~            			miend
4128   FEEF~            			miend
4128   FEEF             
4129   FEEF 39          			rts  
4130   FEF0             
4131   FEF0             ;****************************************************
4132   FEF0             ;* Main Switch Routine - Scans for closed switches
4133   FEF0             ;****************************************************			
4134   FEF0             st_switch		begin
4134   FEF0             
4135   FEF0 86 FF       				ldaa	#$FF
4136   FEF2 97 58       				staa  mbip_b0
4137   FEF4 BD EA 2F    				jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
4138   FEF7 00          				.db	$00
4139   FEF8 B6 E0 4D    				ldaa 	gr_lastswitch		;Game ROM: Last Switch Used
4140   FEFB 4A          				deca 
4141   FEFC CE 00 69    st_swnext			ldx  	#switch_masked
4142   FEFF BD F1 9C    				jsr  	unpack_byte    		;Unpack Switch
4143   FF02 E5 00       				bitb 	$00,X
4144   FF04             				ifne
4144   FF04             
4144   FF04 27 FE       
4145   FF06 36          					psha 
4146   FF07 4C          					inca 
4147   FF08 C6 01       					ldab  #$01
4148   FF0A BD F8 16    					jsr  	divide_ab
4149   FF0D 97 58       					staa 	mbip_b0
4150   FF0F 4F          					clra 
4151   FF10 C6 01       					ldab  #$01
4152   FF12 BD ED 53    					jsr  	isnd_mult			;Play Sound Command A, B Times:
4153   FF15 32          					pula 
4154   FF16 BD EA 2F    					jsr  	addthread    		;End This Routine, Replace with next routine, next byte is timer.
4155   FF19 40          					.db	$40
4156   FF1A             				endif
4156   FF1A             
4156   FF1A             
4156   FF1A             
4156   FF1A             
4156   FF1A             
4156   FF1A~            				endif
4156   FF1A~            				endif
4156   FF1A             
4156   FF1A~            				endif
4156   FF1A~            				endif
4156   FF1A             
4156   FF05             
4156   FF05 14          
4156   FF06             
4156   FF06             
4156   FF06~            				endif
4156   FF06~            				endif
4156   FF06~            				endif
4156   FF06             
4156   FF1A             
4156   FF1A~            				endif
4156   FF1A~            				endif
4156   FF1A             
4157   FF1A 4A          				deca 
4158   FF1B             			plend					;Start Back at the top switch
4158   FF1B             
4158   FF1B             
4158   FF1B~            			plend					;Start Back at the top switch
4158   FF1B~            			plend					;Start Back at the top switch
4158   FF1B~            			plend					;Start Back at the top switch
4158   FF1B             
4158   FF1B 2B D3       
4158   FF1D             
4158   FF1D~            			plend					;Start Back at the top switch
4158   FF1D~            			plend					;Start Back at the top switch
4158   FF1D             
4159   FF1D 20 DD       			bra  st_swnext			;Do Next Switch
4160   FF1F             
4161   FF1F             ;**********************************************************************************
4162   FF1F             ;* NMI Routines - This section of code is run only when the 
4163   FF1F             ;*                diagnostic switch on the CPU board is pressed.
4164   FF1F             ;*                It will test the hardware and report any errors
4165   FF1F             ;*                via the LED display on the CPU board. If all tests
4166   FF1F             ;*                are passed, the LED display will show '0' and
4167   FF1F             ;*                the code jumps to the normal power-up routines.
4168   FF1F             ;*
4169   FF1F             ;* Errors are as Follows:
4170   FF1F             ;*
4171   FF1F             ;*      0 - Test Passed
4172   FF1F             ;*      1 - IC13 RAM Fault (Most Significant Nybble)
4173   FF1F             ;*      2 - IC16 RAM Fault (Least Significant Nybble)
4174   FF1F             ;*      3 - IC17 ROM Lower Half (Location $F000-$F7FF)
4175   FF1F             ;*      4 - IC17 ROM Upper Half (Location $F800-$FFFF)
4176   FF1F             ;*      5 - IC20 ROM Fault (Location $E800-$EFFF)
4177   FF1F             ;*      6 - IC14 GAME ROM Fault (Location $E000-$E7FF)
4178   FF1F             ;*      7 - IC15 GAME ROM Fault (Location $D800-$DFFF)
4179   FF1F             ;*      8 - IC19 CMOS RAM Fault or Memory Protect Failure
4180   FF1F             ;*      9 - Coin Door Closed or Memory Protect Failure or IC19 CMOS RAM Fault
4181   FF1F             ;**********************************************************************************
4182   FF1F C6 20       rambad		ldab	#$20
4183   FF21 A8 00       			eora	$00,X
4184   FF23 84 F0       			anda	#$F0
4185   FF25 27 54       			beq	diag_showerror
4186   FF27 C6 10       			ldab	#$10
4187   FF29 20 50       			bra	diag_showerror
4188   FF2B             			
4189   FF2B             ;*******************************************************************
4190   FF2B             ;* Main NMI Entry 
4191   FF2B             ;*******************************************************************
4192   FF2B 0F          diag			sei	
4193   FF2C CE 28 00    			ldx	#pia_disp_digit_data
4194   FF2F 6F 01       			clr	$01,X
4195   FF31 86 F0       			ldaa	#$F0
4196   FF33 A7 00       			staa	$00,X
4197   FF35 C6 3C       			ldab	#$3C
4198   FF37 E7 01       			stab	$01,X
4199   FF39 A7 00       			staa	$00,X			;Blank Diagnostic Display
4200   FF3B 4F          			clra	
4201   FF3C             			begin
4201   FF3C             
4202   FF3C CE 10 00    				ldx	#$1000
4203   FF3F             				begin					;\
4203   FF3F             
4204   FF3F A7 00       					staa	$00,X			;|
4205   FF41 08          					inx				;| Clear RAM $1000-13FF
4206   FF42 8C 14 00    					cpx	#$1400		;|
4207   FF45             				eqend					;/
4207   FF45             
4207   FF45             
4207   FF45~            				eqend					;/
4207   FF45~            				eqend					;/
4207   FF45~            				eqend					;/
4207   FF45             
4207   FF45 26 F8       
4207   FF47             
4207   FF47~            				eqend					;/
4207   FF47~            				eqend					;/
4207   FF47             
4208   FF47 35          				txs	
4209   FF48             				begin
4209   FF48             
4210   FF48 09          					dex	
4211   FF49 A1 00       					cmpa	$00,X			;Test
4212   FF4B 26 D2       					bne	rambad		;Bad RAM
4213   FF4D 8C 10 00    					cpx	#$1000
4214   FF50             				eqend
4214   FF50             
4214   FF50             
4214   FF50~            				eqend
4214   FF50~            				eqend
4214   FF50~            				eqend
4214   FF50             
4214   FF50 26 F6       
4214   FF52             
4214   FF52~            				eqend
4214   FF52~            				eqend
4214   FF52             
4215   FF52 43          				coma					;Test with #FF
4216   FF53             			eqend
4216   FF53             
4216   FF53             
4216   FF53~            			eqend
4216   FF53~            			eqend
4216   FF53~            			eqend
4216   FF53             
4216   FF53 26 E7       
4216   FF55             
4216   FF55~            			eqend
4216   FF55~            			eqend
4216   FF55             
4217   FF55 C6 20       			ldab	#$20					;Begin ROM Test
4218   FF57 CE FF FF    			ldx	#$FFFF
4219   FF5A             			begin
4219   FF5A             
4220   FF5A DF 9A       				stx	temp1
4221   FF5C CB 10       				addb	#$10
4222   FF5E C1 70       				cmpb	#$70
4223   FF60 22 1F       				bhi	diag_ramtest
4224   FF62             				ifeq
4224   FF62             
4224   FF62 26 FE       
4225   FF64 B6 E0 4C    					ldaa	gr_extendedromtest		;Check to see if we need to test additional ROM
4226   FF67 2B 18       					bmi	diag_ramtest
4227   FF69             				endif
4227   FF69             
4227   FF69             
4227   FF69             
4227   FF69             
4227   FF69             
4227   FF69~            				endif
4227   FF69~            				endif
4227   FF69             
4227   FF69~            				endif
4227   FF69~            				endif
4227   FF69             
4227   FF63             
4227   FF63 05          
4227   FF64             
4227   FF64             
4227   FF64~            				endif
4227   FF64~            				endif
4227   FF64~            				endif
4227   FF64             
4227   FF69             
4227   FF69~            				endif
4227   FF69~            				endif
4227   FF69             
4228   FF69 96 9A       				ldaa	temp1					
4229   FF6B 80 08       				suba	#$08
4230   FF6D 97 9A       				staa	temp1					;Set our stopping address
4231   FF6F 4F          				clra	
4232   FF70             				begin
4232   FF70             
4233   FF70 A9 00       					adca	$00,X					;Add with carry!!
4234   FF72 09          					dex	
4235   FF73 9C 9A       					cpx	temp1
4236   FF75             				eqend
4236   FF75             
4236   FF75             
4236   FF75~            				eqend
4236   FF75~            				eqend
4236   FF75~            				eqend
4236   FF75             
4236   FF75 26 F9       
4236   FF77             
4236   FF77~            				eqend
4236   FF77~            				eqend
4236   FF77             
4237   FF77 81 80       				cmpa	#$80					;Done changing data?
4238   FF79             			neend						;CSUM must be = #00
4238   FF79             
4238   FF79             
4238   FF79~            			neend						;CSUM must be = #00
4238   FF79~            			neend						;CSUM must be = #00
4238   FF79~            			neend						;CSUM must be = #00
4238   FF79             
4238   FF79 27 DF       
4238   FF7B             
4238   FF7B~            			neend						;CSUM must be = #00
4238   FF7B~            			neend						;CSUM must be = #00
4238   FF7B             
4239   FF7B             			;fall through on error, B contains error code
4240   FF7B             			
4241   FF7B 53          diag_showerror	comb	
4242   FF7C F7 28 00    			stab	pia_disp_digit_data		;Dump Error to Display
4243   FF7F 20 FE       tightloop		bra	tightloop				;Stay Here forever
4244   FF81             
4245   FF81             ;Define a single CMOS location to write test
4246   FF81             cmos_byteloc	=	$01BB
4247   FF81             
4248   FF81 C6 90       diag_ramtest	ldab	#$90					;Begin CMOS RAM Test
4249   FF83 B6 01 BB    			ldaa	cmos_byteloc			;Test a single byte
4250   FF86 7C 01 BB    			inc	cmos_byteloc
4251   FF89 B1 01 BB    			cmpa	cmos_byteloc
4252   FF8C 27 ED       			beq	diag_showerror			;Wrong
4253   FF8E C6 80       			ldab	#$80					;Backup CMOS data now
4254   FF90 CE 12 00    			ldx	#$1200
4255   FF93 DF 9A       			stx	temp1
4256   FF95 CE 01 00    			ldx	#cmos_base
4257   FF98 8D 37       			bsr	block_copy					;Copy Block from X -> temp1, Length = B
4258   FF9A 86 F1       			ldaa	#$F1
4259   FF9C 97 9E       			staa	temp3
4260   FF9E             			begin
4260   FF9E             
4261   FF9E CE 01 00    				ldx	#cmos_base
4262   FFA1 96 9E       				ldaa	temp3
4263   FFA3             				begin
4263   FFA3             
4264   FFA3 A7 00       					staa	$00,X
4265   FFA5 8D 4B       					bsr	adjust_a
4266   FFA7 08          					inx	
4267   FFA8 8C 02 00    					cpx	#cmos_base+$100
4268   FFAB             				eqend
4268   FFAB             
4268   FFAB             
4268   FFAB~            				eqend
4268   FFAB~            				eqend
4268   FFAB~            				eqend
4268   FFAB             
4268   FFAB 26 F6       
4268   FFAD             
4268   FFAD~            				eqend
4268   FFAD~            				eqend
4268   FFAD             
4269   FFAD CE 01 00    				ldx	#cmos_base
4270   FFB0 96 9E       				ldaa	temp3
4271   FFB2             				begin
4271   FFB2             
4272   FFB2 16          					tab	
4273   FFB3 E8 00       					eorb	$00,X
4274   FFB5 C4 0F       					andb	#$0F
4275   FFB7 26 12       					bne	cmos_error
4276   FFB9 8D 37       					bsr	adjust_a
4277   FFBB 08          					inx	
4278   FFBC 8C 02 00    					cpx	#cmos_base+$100
4279   FFBF             				eqend
4279   FFBF             
4279   FFBF             
4279   FFBF~            				eqend
4279   FFBF~            				eqend
4279   FFBF~            				eqend
4279   FFBF             
4279   FFBF 26 F1       
4279   FFC1             
4279   FFC1~            				eqend
4279   FFC1~            				eqend
4279   FFC1             
4280   FFC1 7C 00 9E    				inc	temp3
4281   FFC4             			eqend
4281   FFC4             
4281   FFC4             
4281   FFC4~            			eqend
4281   FFC4~            			eqend
4281   FFC4~            			eqend
4281   FFC4             
4281   FFC4 26 D8       
4281   FFC6             
4281   FFC6~            			eqend
4281   FFC6~            			eqend
4281   FFC6             
4282   FFC6 8D 1D       			bsr	cmos_restore			;Put back original CMOS data
4283   FFC8 7E E8 00    			jmp	reset					;Goto Reset Entry, Everything OK.
4284   FFCB             			
4285   FFCB 8D 18       cmos_error		bsr	cmos_restore
4286   FFCD C6 80       			ldab	#$80
4287   FFCF 20 AA       			bra	diag_showerror
4288   FFD1             			
4289   FFD1 36          block_copy		psha	
4290   FFD2             			begin
4290   FFD2             
4291   FFD2 BD EF 53    				jsr	cmosinc_a				;CMOS,X++ -> A
4292   FFD5 DF 9C       				stx	temp2
4293   FFD7 DE 9A       				ldx	temp1
4294   FFD9 A7 00       				staa	$00,X
4295   FFDB 08          				inx	
4296   FFDC DF 9A       				stx	temp1
4297   FFDE DE 9C       				ldx	temp2
4298   FFE0 5A          				decb	
4299   FFE1             			eqend
4299   FFE1             
4299   FFE1             
4299   FFE1~            			eqend
4299   FFE1~            			eqend
4299   FFE1~            			eqend
4299   FFE1             
4299   FFE1 26 EF       
4299   FFE3             
4299   FFE3~            			eqend
4299   FFE3~            			eqend
4299   FFE3             
4300   FFE3 32          			pula	
4301   FFE4 39          			rts	
4302   FFE5             			
4303   FFE5 CE 01 00    cmos_restore	ldx	#$0100
4304   FFE8 DF 9A       			stx	temp1
4305   FFEA CE 12 00    			ldx	#$1200
4306   FFED C6 80       			ldab	#$80
4307   FFEF 7E EF E4    			jmp	copyblock2				;Transfer Data Block at X to temp1, Length B
4308   FFF2             			
4309   FFF2 4C          adjust_a		inca	
4310   FFF3             			ifeq
4310   FFF3             
4310   FFF3 26 FE       
4311   FFF5 86 F1       				ldaa	#$F1
4312   FFF7             			endif
4312   FFF7             
4312   FFF7             
4312   FFF7             
4312   FFF7             
4312   FFF7             
4312   FFF7~            			endif
4312   FFF7~            			endif
4312   FFF7             
4312   FFF7~            			endif
4312   FFF7~            			endif
4312   FFF7             
4312   FFF4             
4312   FFF4 02          
4312   FFF5             
4312   FFF5             
4312   FFF5~            			endif
4312   FFF5~            			endif
4312   FFF5~            			endif
4312   FFF5             
4312   FFF7             
4312   FFF7~            			endif
4312   FFF7~            			endif
4312   FFF7             
4313   FFF7 39          			rts	
4314   FFF8             
4315   FFF8             ;*******************************************
4316   FFF8             ;* CPU Startup/Interrupt Vectors go here.
4317   FFF8             ;*******************************************
4318   FFF8             	
4319   FFF8 E0 BF       irq_entry		.dw gr_irq_entry	;Goes to Game ROM
4320   FFFA E0 C2       swi_entry		.dw gr_swi_entry	;Goes to Game ROM 
4321   FFFC FF 2B       nmi_entry		.dw diag
4322   FFFE E8 00       res_entry		.dw reset
4323   10000             
4324   10000             	.end
4325   10000             
4326   10000             ;*******************************************
4327   10000             ;* Exports for the Game ROM
4328   10000             ;*******************************************
4329   10000             
4330   10000             .export vm_reg_a,vm_reg_b,game_ram_2,game_ram_3,game_ram_4,game_ram_5,game_ram_6,game_ram_7,game_ram_8
4331   10000             .export game_ram_9,game_ram_a,game_ram_b,game_ram_c,game_ram_d,lampbuffer0,bitflags,lampbufferselect,lampbuffer1,lampflashflag
4332   10000             .export score_p1_b0,score_p3_b0,score_p4_b0,score_p1_b1,score_p2_b1,score_p3_b1,score_p4_b1,mbip_b0,mbip_b1,cred_b0,cred_b1
4333   10000             .export dmask_p1,dmask_p2,dmask_p3,dmask_p4,comma_flags,switch_debounced,switch_masked,switch_pending,switch_aux,switch_b4,irq_counter
4334   10000             .export lamp_index_word,lamp_bit,comma_data_temp,credp1p2_bufferselect,mbipp3p4_bufferselect,swap_player_displays,solenoid_address
4335   10000             .export solenoid_bitpos,solenoid_counter,irqcount16,switch_queue_pointer,solenoid_queue_pointer
4336   10000             .export temp1,temp2,temp3,sys_temp1,sys_temp2,sys_temp3,sys_temp4,sys_temp5,sw_encoded,sys_temp_w2,sys_temp_w3,thread_priority
4337   10000             .export unused_ram1,irqcount,vm_base,vm_nextslot,current_thread,vm_tail_thread,lamp_flash_rate,lamp_flash_count,thread_timer_byte
4338   10000             .export soundcount,lastsound,cur_sndflags,soundptr,soundirqcount,soundindex_com,sys_soundflags,soundindex,csound_timer,next_sndflags
4339   10000             .export next_sndcnt,next_sndcmd,flag_tilt,flag_gameover,flag_bonusball,flags_selftest,num_players,player_up
4340   10000             .export pscore_buf,num_eb,vm_pc,num_tilt,minutetimer,flag_timer_bip,randomseed,x_temp_1,eb_x_temp,credit_x_temp,x_temp_2,spare_ram
4341   10000             .export cmos_base,cmos_csum,aud_leftcoins
4342   10000             .export aud_centercoins,aud_rightcoins,aud_paidcredits,aud_specialcredits,aud_replaycredits,aud_matchcredits,aud_totalcredits
4343   10000             .export aud_extraballs,aud_avgballtime,aud_totalballs,aud_game1,aud_game2,aud_game3,aud_game4,aud_game5,aud_game6,aud_game7
4344   10000             .export aud_autocycles,aud_hstdcredits,aud_replay1times,aud_replay2times,aud_replay3times,aud_replay4times,cmos_bonusunits
4345   10000             .export cmos_coinunits,aud_currenthstd,aud_currentcredits,aud_command,adj_cmoscsum,adj_backuphstd,adj_replay1,adj_replay2
4346   10000             .export adj_replay3,adj_replay4,adj_matchenable,adj_specialaward,adj_replayaward,adj_maxplumbbobtilts,adj_numberofballs
4347   10000             .export adj_gameadjust1,adj_gameadjust2,adj_gameadjust3,adj_gameadjust4
4348   10000             .export adj_gameadjust5,adj_gameadjust6,adj_gameadjust7,adj_gameadjust8,adj_gameadjust9,adj_hstdcredits,adj_max_extraballs
4349   10000             .export adj_max_credits,adj_pricecontrol,cmos_leftcoinmult,cmos_centercoinmult,cmos_rightcoinmult,cmos_coinsforcredit
4350   10000             .export cmos_bonuscoins,cmos_minimumcoins,cmos_byteloc,switch_queue,sol_queue,score_queue,exe_buffer,p1_gamedata,p2_gamedata
4351   10000             .export p3_gamedata,p4_gamedata,pia_sound_data,pia_sound_ctrl,pia_comma_data,pia_comma_ctrl,pia_sol_low_data,pia_sol_low_ctrl
4352   10000             .export pia_sol_high_data,pia_sol_high_ctrl,pia_lamp_row_data,pia_lamp_row_ctrl,pia_lamp_col_data,pia_lamp_col_ctrl,pia_disp_digit_data
4353   10000             .export pia_disp_digit_ctrl,pia_disp_seg_data,pia_disp_seg_ctrl,pia_switch_return_data,pia_switch_return_ctrl
4354   10000             .export pia_switch_strobe_data,pia_switch_strobe_ctrl,pia_alphanum_digit_data,pia_alphanum_digit_ctrl,pia_alphanum_seg_data
4355   10000             .export pia_alphanum_seg_ctrl,reset,csum1,init_done,clear_all,main,checkswitch,time,switches,next_sw,sw_break,vm_irqcheck
4356   10000             .export flashlamp,solq,snd_queue,check_threads,nextthread,delaythread,addthread,dump_thread,killthread
4357   10000             .export newthread_sp,newthread_06,killthread_sp,kill_thread,kill_threads,check_threadid,pri_next,pri_skipme
4358   10000             .export solbuf,set_solenoid,set_ss_off,set_s_pia,set_ss_on,soladdr,ssoladdr,hex2bitpos,comma_million,comma_thousand
4359   10000             .export update_commas,set_comma_bit,test_mask_b,update_eb_count,isnd_pts,dsnd_pts,snd_pts,score_main,score_update
4360   10000             .export hex2dec,score2hex,sh_exit,add_points,checkreplay,get_hs_digits,b_plus10,split_ab,isnd_once,sound_sub,isnd_test
4361   10000             .export isnd_mult,snd_exit_pull,snd_exit,send_snd_save,send_snd,do_complex_snd,store_csndflg,check_sw_mask,sw_ignore
4362   10000             .export sw_active,sw_down,sw_dtime,sw_trig_yes,sw_proc,check_sw_close,to_ldx_rts,getswitch,sw_pack,pack_done
4363   10000             .export check_sw_open,sw_get_time,sw_tbl_lookup,xplusa,copy_word,setup_vm_stack,stack_done,xplusb,cmosinc_a,cmosinc_b,b_cmosinc
4364   10000             .export reset_audits,clr_ram_100,clr_ram,factory_zeroaudits,restore_hstd,a_cmosinc,copyblock,loadpricing,copyblock2,sys_irq
4365   10000             .export pia_ddr_data,spec_sol_def,lampbuffers,lamp_on,lamp_or,lamp_commit,lamp_done,lamp_off,lamp_and,lamp_flash,lamp_invert
4366   10000             .export lamp_eor,lamp_on_b,lamp_off_b,lamp_invert_b,lamp_on_1,lamp_off_1,lamp_invert_1,unpack_byte,lampm_off,lampm_noflash
4367   10000             .export lampm_f,lampm_a,lampm_b,lampm_8,abx_ret,lampr_start,lr_ret,lampr_end
4368   10000             .export lampr_setup,lamp_left,ls_ret,lamp_right,lampm_c,lm_test,lampm_e,lampm_d,bit_switch,bit_lamp_flash,bit_lamp_buf_1,bit_lamp_buf_0
4369   10000             .export lampm_z,lampm_x,bit_main,csum2,master_vm_lookup,vm_lookup_0x,vm_lookup_1x_a,vm_lookup_1x_b,vm_lookup_2x,vm_lookup_4x,vm_lookup_5x
4370   10000             .export branch_lookup,macro_start,macro_rts,macro_go,switch_entry,breg_sto,vm_control_0x,macro_pcminus100,macro_code_start
4371   10000             .export macro_special,macro_extraball,vm_control_1x, macro_x8f,macro_17,macro_x17,to_macro_go1,vm_control_2x,vm_control_3x
4372   10000             .export vm_control_4x,macro_exec,gettabledata_w,gettabledata_b,macro_getnextbyte,getx_rts,vm_control_5x,macro_ramadd,ram_sto2
4373   10000             .export to_macro_go2,macro_ramcopy,macro_set_pri,macro_delay_imm_b,dly_sto,macro_getnextword,macro_get2bytes,macro_rem_th_s
4374   10000             .export macro_rem_th_m,macro_jsr_noreturn,pc_sto2,macro_a_ram,to_getx_rts,macro_b_ram,macro_jsr_return,ret_sto,vm_control_6x
4375   10000             .export vm_control_7x,vm_control_8x,pc_sto,to_macro_go4,macro_jmp_cpu,vm_control_9x,vm_control_ax,macro_jmp_abs,vm_control_bx
4376   10000             .export ram_sto,vm_control_cx,vm_control_dx,vm_control_ex,vm_control_fx,macro_pcadd,macro_setswitch,load_sw_no,macro_clearswitch
4377   10000             .export to_macro_go3,to_macro_getnextbyte,macro_branch,branchdata,complexbranch,branch_invert,to_rts3,branch_lamp_on,test_z
4378   10000             .export branch_lamprangeoff,test_c,branch_lamprangeon,branch_tilt,ret_false,branch_gameover,ret_true,branch_lampbuf1
4379   10000             .export branch_switch,branch_and,branch_add,branch_or,branch_equal,branch_ge,branch_threadpri,branch_bitwise,to_rts4,set_logic
4380   10000             .export award_special,credit_special,award_replay,give_credit,extraball,do_eb,addcredits,addcredit2,coinlockout,checkmaxcredits
4381   10000             .export pull_ba_rts,creditq,ptrx_plus_1,ptrx_plus_a,ptrx_plus,coin_accepted,cmos_a_plus_b_cmos,divide_ab,clr_bonus_coins,csum3
4382   10000             .export dec2hex,write_range,do_game_init,add_player,initialize_game,clear_range,to_pula_rts,clear_displays,store_display_mask
4383   10000             .export init_player_game,setplayerbuffer,copyplayerdata,init_player_up,disp_mask,disp_clear,init_player_sys,resetplayerdata
4384   10000             .export dump_score_queue,outhole_main,saveplayertobuffer,to_copyblock,balladjust,show_hstd,gameover,powerup_init,set_gameover
4385   10000             .export show_all_scores,check_hstd,hstd_nextp,set_hstd,update_hstd,hstd_adddig,wordplusbyte,to_rts1,fill_hstd_digits,send_sound
4386   10000             .export do_match,get_random,to_rts2,credit_button,has_credit,start_new_game,lesscredit,tilt_warning,do_tilt,testdata,testlists
4387   10000             .export selftest_entry,st_diagnostics,do_aumd,check_adv,check_aumd,st_init,to_clear_range,st_nexttest,to_audadj,do_audadj
4388   10000             .export show_func,adjust_func,st_reset,fn_gameid,fn_gameaud,fn_sysaud,fn_hstd,fn_replay,cmos_add_d,fn_pricec,fn_prices
4389   10000             .export cmos_a,fn_ret,fn_credit,fn_cdtbtn,fn_adj,fn_command,st_display,st_sound,st_lamp,st_autocycle,st_solenoid,st_switch
4390   10000             .export st_swnext,rambad,diag,diag_showerror,tightloop,diag_ramtest,cmos_error,block_copy,cmos_restore,adjust_a,irq_entry
4391   10000             .export swi_entry,nmi_entry,res_entry,player_ready,isnd_mult_xtasm: Number of errors = 0
